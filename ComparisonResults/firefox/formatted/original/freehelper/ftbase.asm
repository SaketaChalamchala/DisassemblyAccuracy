_ft_trig_pseudo_polarize PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
cmp	ecx, DWORD PTR _x$[ebp]
jle	SHORT $LN13@ft_trig_ps
mov	edx, DWORD PTR _x$[ebp]
neg	edx
cmp	DWORD PTR _y$[ebp], edx
jle	SHORT $LN12@ft_trig_ps
mov	DWORD PTR _theta$[ebp], 5898240		
mov	eax, DWORD PTR _y$[ebp]
mov	DWORD PTR _xtemp$[ebp], eax
mov	ecx, DWORD PTR _x$[ebp]
neg	ecx
mov	DWORD PTR _y$[ebp], ecx
mov	edx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], edx
jmp	SHORT $LN11@ft_trig_ps
cmp	DWORD PTR _y$[ebp], 0
jle	SHORT $LN16@ft_trig_ps
mov	DWORD PTR tv71[ebp], 11796480		
jmp	SHORT $LN17@ft_trig_ps
mov	DWORD PTR tv71[ebp], -11796480		
mov	eax, DWORD PTR tv71[ebp]
mov	DWORD PTR _theta$[ebp], eax
mov	ecx, DWORD PTR _x$[ebp]
neg	ecx
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _y$[ebp]
neg	edx
mov	DWORD PTR _y$[ebp], edx
jmp	SHORT $LN10@ft_trig_ps
mov	eax, DWORD PTR _x$[ebp]
neg	eax
cmp	DWORD PTR _y$[ebp], eax
jge	SHORT $LN9@ft_trig_ps
mov	DWORD PTR _theta$[ebp], -5898240	
mov	ecx, DWORD PTR _y$[ebp]
neg	ecx
mov	DWORD PTR _xtemp$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
jmp	SHORT $LN10@ft_trig_ps
mov	DWORD PTR _theta$[ebp], 0
mov	DWORD PTR _arctanptr$[ebp], OFFSET _ft_trig_arctan_table
mov	DWORD PTR _i$[ebp], 1
mov	DWORD PTR _b$[ebp], 1
jmp	SHORT $LN7@ft_trig_ps
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 1
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _i$[ebp], 23			
jge	$LN5@ft_trig_ps
cmp	DWORD PTR _y$[ebp], 0
jle	SHORT $LN4@ft_trig_ps
mov	eax, DWORD PTR _y$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	eax, cl
add	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR _xtemp$[ebp], eax
mov	edx, DWORD PTR _x$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _y$[ebp]
sub	eax, edx
mov	DWORD PTR _y$[ebp], eax
mov	ecx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _arctanptr$[ebp]
mov	eax, DWORD PTR _theta$[ebp]
add	eax, DWORD PTR [edx]
mov	DWORD PTR _theta$[ebp], eax
mov	ecx, DWORD PTR _arctanptr$[ebp]
add	ecx, 4
mov	DWORD PTR _arctanptr$[ebp], ecx
jmp	SHORT $LN3@ft_trig_ps
mov	edx, DWORD PTR _y$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _x$[ebp]
sub	eax, edx
mov	DWORD PTR _xtemp$[ebp], eax
mov	edx, DWORD PTR _x$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
add	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _arctanptr$[ebp]
mov	edx, DWORD PTR _theta$[ebp]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _theta$[ebp], edx
mov	eax, DWORD PTR _arctanptr$[ebp]
add	eax, 4
mov	DWORD PTR _arctanptr$[ebp], eax
jmp	$LN6@ft_trig_ps
cmp	DWORD PTR _theta$[ebp], 0
jl	SHORT $LN2@ft_trig_ps
mov	ecx, DWORD PTR _theta$[ebp]
add	ecx, 8
and	ecx, -16				
mov	DWORD PTR _theta$[ebp], ecx
jmp	SHORT $LN1@ft_trig_ps
mov	edx, DWORD PTR _theta$[ebp]
neg	edx
add	edx, 8
and	edx, -16				
neg	edx
mov	DWORD PTR _theta$[ebp], edx
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR _theta$[ebp]
mov	DWORD PTR [edx+4], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_trig_pseudo_rotate PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
cmp	DWORD PTR _theta$[ebp], -2949120	
jge	SHORT $LN7@ft_trig_ps
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR _xtemp$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
neg	edx
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _theta$[ebp]
add	ecx, 5898240				
mov	DWORD PTR _theta$[ebp], ecx
jmp	SHORT $LN9@ft_trig_ps
cmp	DWORD PTR _theta$[ebp], 2949120		
jle	SHORT $LN6@ft_trig_ps
mov	edx, DWORD PTR _y$[ebp]
neg	edx
mov	DWORD PTR _xtemp$[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR _y$[ebp], eax
mov	ecx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _theta$[ebp]
sub	edx, 5898240				
mov	DWORD PTR _theta$[ebp], edx
jmp	SHORT $LN7@ft_trig_ps
mov	DWORD PTR _arctanptr$[ebp], OFFSET _ft_trig_arctan_table
mov	DWORD PTR _i$[ebp], 1
mov	DWORD PTR _b$[ebp], 1
jmp	SHORT $LN5@ft_trig_ps
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 1
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _i$[ebp], 23			
jge	$LN3@ft_trig_ps
cmp	DWORD PTR _theta$[ebp], 0
jge	SHORT $LN2@ft_trig_ps
mov	edx, DWORD PTR _y$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
add	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR _xtemp$[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	eax, cl
mov	ecx, DWORD PTR _y$[ebp]
sub	ecx, eax
mov	DWORD PTR _y$[ebp], ecx
mov	edx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], edx
mov	eax, DWORD PTR _arctanptr$[ebp]
mov	ecx, DWORD PTR _theta$[ebp]
add	ecx, DWORD PTR [eax]
mov	DWORD PTR _theta$[ebp], ecx
mov	edx, DWORD PTR _arctanptr$[ebp]
add	edx, 4
mov	DWORD PTR _arctanptr$[ebp], edx
jmp	SHORT $LN1@ft_trig_ps
mov	eax, DWORD PTR _y$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	eax, cl
mov	ecx, DWORD PTR _x$[ebp]
sub	ecx, eax
mov	DWORD PTR _xtemp$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
add	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _arctanptr$[ebp]
mov	edx, DWORD PTR _theta$[ebp]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _theta$[ebp], edx
mov	eax, DWORD PTR _arctanptr$[ebp]
add	eax, 4
mov	DWORD PTR _arctanptr$[ebp], eax
jmp	$LN4@ft_trig_ps
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_trig_prenorm PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
cmp	DWORD PTR _x$[ebp], 0
jge	SHORT $LN5@ft_trig_pr
mov	ecx, DWORD PTR _x$[ebp]
neg	ecx
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN6@ft_trig_pr
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR tv69[ebp], edx
cmp	DWORD PTR _y$[ebp], 0
jge	SHORT $LN7@ft_trig_pr
mov	eax, DWORD PTR _y$[ebp]
neg	eax
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN8@ft_trig_pr
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR tv72[ebp], ecx
mov	edx, DWORD PTR tv69[ebp]
or	edx, DWORD PTR tv72[ebp]
push	edx
call	_FT_MSB
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
cmp	DWORD PTR _shift$[ebp], 29		
jg	SHORT $LN2@ft_trig_pr
mov	eax, 29					
sub	eax, DWORD PTR _shift$[ebp]
mov	DWORD PTR _shift$[ebp], eax
mov	edx, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR _y$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
jmp	SHORT $LN1@ft_trig_pr
mov	ecx, DWORD PTR _shift$[ebp]
sub	ecx, 29					
mov	DWORD PTR _shift$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR _y$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _shift$[ebp]
neg	ecx
mov	DWORD PTR _shift$[ebp], ecx
mov	eax, DWORD PTR _shift$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_trig_downscale PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _val$[ebp], 0
jge	SHORT $LN1@ft_trig_do
mov	eax, DWORD PTR _val$[ebp]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	DWORD PTR _s$[ebp], -1
mov	ecx, DWORD PTR _val$[ebp]
and	ecx, 65535				
mov	DWORD PTR _lo1$[ebp], ecx
mov	edx, DWORD PTR _val$[ebp]
sar	edx, 16					
mov	DWORD PTR _hi1$[ebp], edx
mov	DWORD PTR _lo2$[ebp], 23318		
mov	DWORD PTR _hi2$[ebp], 56281		
mov	eax, DWORD PTR _lo1$[ebp]
imul	eax, DWORD PTR _lo2$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo1$[ebp]
imul	ecx, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _i1$[ebp], ecx
mov	edx, DWORD PTR _lo2$[ebp]
imul	edx, DWORD PTR _hi1$[ebp]
mov	DWORD PTR _i2$[ebp], edx
mov	eax, DWORD PTR _hi1$[ebp]
imul	eax, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _i1$[ebp]
add	ecx, DWORD PTR _i2$[ebp]
mov	DWORD PTR _i1$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
cmp	edx, DWORD PTR _i2$[ebp]
jae	SHORT $LN4@ft_trig_do
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN5@ft_trig_do
mov	DWORD PTR tv74[ebp], 0
mov	eax, DWORD PTR tv74[ebp]
shl	eax, 16					
add	eax, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _i1$[ebp]
shr	ecx, 16					
add	ecx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
shl	edx, 16					
mov	DWORD PTR _i1$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
add	eax, DWORD PTR _i1$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR _i1$[ebp]
jae	SHORT $LN6@ft_trig_do
mov	DWORD PTR tv82[ebp], 1
jmp	SHORT $LN7@ft_trig_do
mov	DWORD PTR tv82[ebp], 0
mov	edx, DWORD PTR _hi$[ebp]
add	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
add	eax, 1073741824				
mov	DWORD PTR _lo$[ebp], eax
cmp	DWORD PTR _lo$[ebp], 1073741824		
jae	SHORT $LN8@ft_trig_do
mov	DWORD PTR tv86[ebp], 1
jmp	SHORT $LN9@ft_trig_do
mov	DWORD PTR tv86[ebp], 0
mov	ecx, DWORD PTR _hi$[ebp]
add	ecx, DWORD PTR tv86[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN10@ft_trig_do
mov	eax, DWORD PTR _val$[ebp]
neg	eax
mov	DWORD PTR tv90[ebp], eax
jmp	SHORT $LN11@ft_trig_do
mov	ecx, DWORD PTR _val$[ebp]
mov	DWORD PTR tv90[ebp], ecx
mov	eax, DWORD PTR tv90[ebp]
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Sfnt_Name PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 6
cmp	DWORD PTR _aname$[ebp], 0
je	$LN8@FT_Get_Sfn
cmp	DWORD PTR _face$[ebp], 0
je	$LN8@FT_Get_Sfn
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
je	$LN8@FT_Get_Sfn
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR _ttface$4[ebp], edx
mov	eax, DWORD PTR _ttface$4[ebp]
movzx	ecx, WORD PTR [eax+340]
cmp	DWORD PTR _idx$[ebp], ecx
jae	$LN8@FT_Get_Sfn
imul	edx, DWORD PTR _idx$[ebp], 20
mov	eax, DWORD PTR _ttface$4[ebp]
add	edx, DWORD PTR [eax+356]
mov	DWORD PTR _entry$3[ebp], edx
mov	ecx, DWORD PTR _entry$3[ebp]
movzx	edx, WORD PTR [ecx+8]
test	edx, edx
jle	$LN6@FT_Get_Sfn
mov	eax, DWORD PTR _entry$3[ebp]
cmp	DWORD PTR [eax+16], 0
jne	$LN6@FT_Get_Sfn
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$2[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$1[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _entry$3[ebp]
movzx	ecx, WORD PTR [eax+8]
push	ecx
push	0
push	1
mov	edx, DWORD PTR _memory$2[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _entry$3[ebp]
mov	DWORD PTR [ecx+16], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@FT_Get_Sfn
mov	edx, DWORD PTR _entry$3[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _stream$1[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@FT_Get_Sfn
mov	edx, DWORD PTR _entry$3[ebp]
movzx	eax, WORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _entry$3[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _stream$1[ebp]
push	eax
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@FT_Get_Sfn
mov	ecx, DWORD PTR _entry$3[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _memory$2[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _entry$3[ebp]
mov	DWORD PTR [ecx+16], 0
xor	edx, edx
jne	SHORT $LN3@FT_Get_Sfn
xor	eax, eax
mov	ecx, DWORD PTR _entry$3[ebp]
mov	WORD PTR [ecx+8], ax
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax]
mov	WORD PTR [edx], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax+2]
mov	WORD PTR [edx+2], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax+4]
mov	WORD PTR [edx+4], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax+6]
mov	WORD PTR [edx+6], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _entry$3[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _aname$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Get_Sfn
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN12@FT_Get_Sfn
DD	-8					
DD	4
DD	$LN11@FT_Get_Sfn
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Get_Sfnt_Name_Count PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN3@FT_Get_Sfn
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
je	SHORT $LN3@FT_Get_Sfn
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+340]
mov	DWORD PTR tv70[ebp], eax
jmp	SHORT $LN4@FT_Get_Sfn
mov	DWORD PTR tv70[ebp], 0
mov	eax, DWORD PTR tv70[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_get_rule_type_from_rule_index PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
cmp	DWORD PTR _rule_index$[ebp], 9
jb	SHORT $LN1@raccess_ge
mov	eax, -2					
jmp	SHORT $LN2@raccess_ge
mov	ecx, DWORD PTR _rule_index$[ebp]
mov	eax, DWORD PTR _ft_raccess_guess_table[ecx*8+4]
pop	ebp
ret	0
ENDP
_raccess_make_file_name PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _new_name$[ebp], 0
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _original_name$[ebp]
push	ecx
call	_strlen
add	esp, 4
mov	esi, eax
mov	edx, DWORD PTR _insertion$[ebp]
push	edx
call	_strlen
add	esp, 4
add	esi, eax
mov	DWORD PTR _new_length$[ebp], esi
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _new_length$[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _new_name$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@raccess_ma
xor	eax, eax
jmp	$LN4@raccess_ma
mov	esi, esp
push	47					
mov	eax, DWORD PTR _original_name$[ebp]
push	eax
call	DWORD PTR __imp__strrchr
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _tmp$[ebp], eax
cmp	DWORD PTR _tmp$[ebp], 0
je	SHORT $LN2@raccess_ma
mov	ecx, DWORD PTR _tmp$[ebp]
sub	ecx, DWORD PTR _original_name$[ebp]
add	ecx, 1
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _original_name$[ebp]
push	edx
mov	eax, DWORD PTR _new_name$[ebp]
push	eax
call	DWORD PTR __imp__strncpy
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _tmp$[ebp]
sub	ecx, DWORD PTR _original_name$[ebp]
mov	edx, DWORD PTR _new_name$[ebp]
mov	BYTE PTR [edx+ecx+1], 0
mov	eax, DWORD PTR _tmp$[ebp]
add	eax, 1
mov	DWORD PTR _slash$[ebp], eax
jmp	SHORT $LN1@raccess_ma
mov	ecx, DWORD PTR _original_name$[ebp]
mov	DWORD PTR _slash$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _new_name$[ebp]
mov	BYTE PTR [ecx+eax], 0
mov	edx, DWORD PTR _insertion$[ebp]
push	edx
mov	eax, DWORD PTR _new_name$[ebp]
push	eax
call	_strcat
add	esp, 8
mov	ecx, DWORD PTR _slash$[ebp]
push	ecx
mov	edx, DWORD PTR _new_name$[ebp]
push	edx
call	_strcat
add	esp, 8
mov	eax, DWORD PTR _new_name$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@raccess_ma
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN7@raccess_ma
DD	-24					
DD	4
DD	$LN6@raccess_ma
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_linux_double_from_file_name PROC
push	ebp
mov	ebp, esp
sub	esp, 68					
push	edi
lea	edi, DWORD PTR [ebp-68]
mov	ecx, 17					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _nouse$[ebp], 0
mov	DWORD PTR _args2$[ebp], 4
mov	eax, DWORD PTR _file_name$[ebp]
mov	DWORD PTR _args2$[ebp+12], eax
lea	ecx, DWORD PTR _stream2$[ebp]
push	ecx
lea	edx, DWORD PTR _args2$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN2@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
push	ecx
lea	edx, DWORD PTR _nouse$[ebp]
push	edx
mov	eax, DWORD PTR _file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _stream2$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_raccess_guess_apple_double
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
push	0
mov	eax, DWORD PTR _stream2$[ebp]
push	eax
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 68					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN7@raccess_gu
DD	-36					
DD	32					
DD	$LN4@raccess_gu
DD	-48					
DD	4
DD	$LN5@raccess_gu
DD	-60					
DD	4
DD	$LN6@raccess_gu
DB	110					
DB	111					
DB	117					
DB	115					
DB	101					
DB	0
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	50					
DB	0
DB	97					
DB	114					
DB	103					
DB	115					
DB	50					
DB	0
ENDP
_raccess_guess_apple_generic PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _version_number$[ebp], 0
mov	DWORD PTR _entry_length$[ebp], 0
mov	DWORD PTR _resource_fork_entry_id$[ebp], 2
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _base_file_name$[ebp]
mov	DWORD PTR _base_file_name$[ebp], ecx
mov	edx, DWORD PTR _version_number$[ebp]
mov	DWORD PTR _version_number$[ebp], edx
mov	eax, DWORD PTR _entry_length$[ebp]
mov	DWORD PTR _entry_length$[ebp], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _magic_from_stream$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
mov	eax, DWORD PTR _magic_from_stream$[ebp]
cmp	eax, DWORD PTR _magic$[ebp]
je	SHORT $LN14@raccess_gu
push	OFFSET $SG13004
push	729					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@raccess_gu
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _version_number$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
push	16					
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN12@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _n_of_entries$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
movzx	eax, WORD PTR _n_of_entries$[ebp]
test	eax, eax
jne	SHORT $LN10@raccess_gu
push	OFFSET $SG13011
push	742					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@raccess_gu
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN9@raccess_gu
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
movzx	edx, WORD PTR _n_of_entries$[ebp]
cmp	DWORD PTR _i$[ebp], edx
jge	$LN7@raccess_gu
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _entry_id$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
mov	edx, DWORD PTR _entry_id$[ebp]
cmp	edx, DWORD PTR _resource_fork_entry_id$[ebp]
jne	SHORT $LN5@raccess_gu
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _entry_offset$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _entry_length$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@raccess_gu
jmp	SHORT $LN8@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
mov	edx, DWORD PTR _entry_offset$[ebp]
mov	DWORD PTR [ecx], edx
xor	eax, eax
jmp	SHORT $LN16@raccess_gu
jmp	SHORT $LN2@raccess_gu
push	8
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN16@raccess_gu
jmp	$LN8@raccess_gu
push	OFFSET $SG13024
push	765					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN19@raccess_gu
DD	-12					
DD	4
DD	$LN18@raccess_gu
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_linux_netatalk PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12972
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN6@raccess_gu
push	OFFSET $SG12974
push	690					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN7@raccess_gu
mov	edx, DWORD PTR _result_offset$[ebp]
push	edx
mov	eax, DWORD PTR _newpath$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_guess_linux_double_from_file_name
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN4@raccess_gu
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _newpath$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_linux_double PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12949
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN6@raccess_gu
push	OFFSET $SG12951
push	658					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN7@raccess_gu
mov	edx, DWORD PTR _result_offset$[ebp]
push	edx
mov	eax, DWORD PTR _newpath$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_guess_linux_double_from_file_name
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN4@raccess_gu
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _newpath$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_linux_cap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12932
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12934
push	631					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN2@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [ecx], 0
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_vfat PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12916
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12918
push	605					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN2@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [ecx], 0
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_darwin_hfsplus PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _newpath$[ebp], 0
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
call	_strlen
add	esp, 4
mov	DWORD PTR _base_file_len$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _base_file_len$[ebp]
add	ecx, 6
cmp	ecx, 2147483647				
jle	SHORT $LN2@raccess_gu
push	OFFSET $SG12877
push	536					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	SHORT $LN3@raccess_gu
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_len$[ebp]
add	eax, 6
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _base_file_len$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
push	6
push	OFFSET $SG12880
mov	edx, DWORD PTR _newpath$[ebp]
add	edx, DWORD PTR _base_file_len$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	ecx, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [edx], 0
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN6@raccess_gu
DD	-8					
DD	4
DD	$LN5@raccess_gu
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_darwin_newvfs PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _newpath$[ebp], 0
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
call	_strlen
add	esp, 4
mov	DWORD PTR _base_file_len$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _base_file_len$[ebp]
add	ecx, 18					
cmp	ecx, 2147483647				
jle	SHORT $LN2@raccess_gu
push	OFFSET $SG12899
push	572					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	SHORT $LN3@raccess_gu
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_len$[ebp]
add	eax, 18					
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _base_file_len$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
push	18					
push	OFFSET $SG12902
mov	edx, DWORD PTR _newpath$[ebp]
add	edx, DWORD PTR _base_file_len$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	ecx, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [edx], 0
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN6@raccess_gu
DD	-8					
DD	4
DD	$LN5@raccess_gu
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_darwin_ufs_export PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12850
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN6@raccess_gu
push	OFFSET $SG12852
push	502					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN7@raccess_gu
mov	edx, DWORD PTR _result_offset$[ebp]
push	edx
mov	eax, DWORD PTR _newpath$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_guess_linux_double_from_file_name
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN4@raccess_gu
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _newpath$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_apple_single PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _magic$[ebp], 333312		
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12835
push	478					
push	81					
call	_FT_Throw
add	esp, 12					
or	eax, 81					
jmp	SHORT $LN2@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _magic$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_raccess_guess_apple_generic
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_apple_double PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _magic$[ebp], 333319		
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12819
push	456					
push	81					
call	_FT_Throw
add	esp, 12					
or	eax, 81					
jmp	SHORT $LN2@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _magic$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_raccess_guess_apple_generic
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_raccess_sort_ref_by_id PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _a$[ebp]
movzx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _b$[ebp]
movzx	eax, WORD PTR [edx]
cmp	ecx, eax
jge	SHORT $LN4@ft_raccess
or	eax, -1
jmp	SHORT $LN5@ft_raccess
jmp	SHORT $LN5@ft_raccess
mov	ecx, DWORD PTR _a$[ebp]
movzx	edx, WORD PTR [ecx]
mov	eax, DWORD PTR _b$[ebp]
movzx	ecx, WORD PTR [eax]
cmp	edx, ecx
jle	SHORT $LN2@ft_raccess
mov	eax, 1
jmp	SHORT $LN5@ft_raccess
jmp	SHORT $LN5@ft_raccess
xor	eax, eax
pop	ebp
ret	0
ENDP
_ft_property_do PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _set_name$[ebp], OFFSET $SG11866
mov	DWORD PTR _get_name$[ebp], OFFSET $SG11868
movzx	eax, BYTE PTR _set$[ebp]
test	eax, eax
je	SHORT $LN16@ft_propert
mov	ecx, DWORD PTR _set_name$[ebp]
mov	DWORD PTR tv66[ebp], ecx
jmp	SHORT $LN17@ft_propert
mov	edx, DWORD PTR _get_name$[ebp]
mov	DWORD PTR tv66[ebp], edx
mov	eax, DWORD PTR tv66[ebp]
mov	DWORD PTR _func_name$[ebp], eax
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN13@ft_propert
push	OFFSET $SG11872
push	4533					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN14@ft_propert
cmp	DWORD PTR _module_name$[ebp], 0
je	SHORT $LN11@ft_propert
cmp	DWORD PTR _property_name$[ebp], 0
je	SHORT $LN11@ft_propert
cmp	DWORD PTR _value$[ebp], 0
jne	SHORT $LN12@ft_propert
push	OFFSET $SG11875
push	4536					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN14@ft_propert
mov	ecx, DWORD PTR _library$[ebp]
add	ecx, 20					
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _cur$[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _limit$[ebp], edx
jmp	SHORT $LN10@ft_propert
mov	eax, DWORD PTR _cur$[ebp]
add	eax, 4
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jae	SHORT $LN8@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN7@ft_propert
jmp	SHORT $LN8@ft_propert
jmp	SHORT $LN9@ft_propert
mov	eax, DWORD PTR _cur$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jne	SHORT $LN6@ft_propert
mov	ecx, DWORD PTR _module_name$[ebp]
push	ecx
mov	edx, DWORD PTR _func_name$[ebp]
push	edx
push	OFFSET $SG11881
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11882
push	4550					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
jmp	$LN14@ft_propert
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
cmp	DWORD PTR [ecx+32], 0
jne	SHORT $LN5@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _func_name$[ebp]
push	eax
push	OFFSET $SG11884
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11885
push	4558					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN14@ft_propert
mov	esi, esp
push	OFFSET $SG11886
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _interface$[ebp], eax
cmp	DWORD PTR _interface$[ebp], 0
jne	SHORT $LN4@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _func_name$[ebp]
push	eax
push	OFFSET $SG11888
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11889
push	4568					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN14@ft_propert
mov	ecx, DWORD PTR _interface$[ebp]
mov	DWORD PTR _service$[ebp], ecx
movzx	edx, BYTE PTR _set$[ebp]
test	edx, edx
je	SHORT $LN3@ft_propert
mov	eax, DWORD PTR _service$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN18@ft_propert
mov	BYTE PTR tv171[ebp], 1
jmp	SHORT $LN19@ft_propert
mov	BYTE PTR tv171[ebp], 0
mov	cl, BYTE PTR tv171[ebp]
mov	BYTE PTR _missing_func$[ebp], cl
jmp	SHORT $LN2@ft_propert
mov	edx, DWORD PTR _service$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN20@ft_propert
mov	BYTE PTR tv174[ebp], 1
jmp	SHORT $LN21@ft_propert
mov	BYTE PTR tv174[ebp], 0
mov	al, BYTE PTR tv174[ebp]
mov	BYTE PTR _missing_func$[ebp], al
movzx	ecx, BYTE PTR _missing_func$[ebp]
test	ecx, ecx
je	SHORT $LN1@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _func_name$[ebp]
push	eax
push	OFFSET $SG11896
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11897
push	4582					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN14@ft_propert
movzx	ecx, BYTE PTR _set$[ebp]
test	ecx, ecx
je	SHORT $LN22@ft_propert
mov	esi, esp
mov	edx, DWORD PTR _value$[ebp]
push	edx
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv201[ebp], eax
jmp	SHORT $LN23@ft_propert
mov	esi, esp
mov	ecx, DWORD PTR _value$[ebp]
push	ecx
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _service$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv201[ebp], eax
mov	eax, DWORD PTR tv201[ebp]
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Destroy_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _clazz$[ebp], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN7@Destroy_Mo
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+160]
cmp	ecx, DWORD PTR _module$[ebp]
jne	SHORT $LN7@Destroy_Mo
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+160], 0
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 2
je	SHORT $LN6@Destroy_Mo
mov	eax, DWORD PTR _module$[ebp]
push	eax
call	_ft_remove_renderer
add	esp, 4
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 1
je	SHORT $LN5@Destroy_Mo
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
call	_Destroy_Driver
add	esp, 4
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+28], 0
je	SHORT $LN3@Destroy_Mo
mov	esi, esp
mov	eax, DWORD PTR _module$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+28]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _module$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _module$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@Destroy_Mo
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_remove_renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN6@ft_remove_
jmp	$LN7@ft_remove_
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
add	edx, 148				
push	edx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@ft_remove_
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _render$1[ebp], eax
mov	ecx, DWORD PTR _render$1[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	DWORD PTR [edx+36], 1869968492		
jne	SHORT $LN4@ft_remove_
mov	eax, DWORD PTR _render$1[ebp]
cmp	DWORD PTR [eax+52], 0
je	SHORT $LN4@ft_remove_
mov	esi, esp
mov	ecx, DWORD PTR _render$1[ebp]
mov	edx, DWORD PTR [ecx+52]
push	edx
mov	eax, DWORD PTR _render$1[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+56]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
add	edx, 148				
push	edx
call	_FT_List_Remove
add	esp, 8
mov	eax, DWORD PTR _node$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@ft_remove_
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_set_current_renderer
add	esp, 4
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_add_renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _node$[ebp], 0
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	12					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@ft_add_ren
jmp	$Exit$13
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _render$2[ebp], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _clazz$1[ebp], edx
mov	eax, DWORD PTR _render$2[ebp]
mov	ecx, DWORD PTR _clazz$1[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _render$2[ebp]
mov	eax, DWORD PTR _clazz$1[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _clazz$1[ebp]
cmp	DWORD PTR [edx+36], 1869968492		
jne	SHORT $LN6@ft_add_ren
mov	eax, DWORD PTR _clazz$1[ebp]
mov	ecx, DWORD PTR [eax+56]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN6@ft_add_ren
mov	edx, DWORD PTR _render$2[ebp]
add	edx, 52					
mov	esi, esp
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$1[ebp]
mov	edx, DWORD PTR [ecx+56]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@ft_add_ren
jmp	SHORT $Fail$14
mov	ecx, DWORD PTR _clazz$1[ebp]
mov	edx, DWORD PTR [ecx+56]
mov	eax, DWORD PTR _render$2[ebp]
mov	ecx, DWORD PTR [edx+16]
mov	DWORD PTR [eax+56], ecx
mov	edx, DWORD PTR _render$2[ebp]
mov	eax, DWORD PTR _clazz$1[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR [edx+60], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
add	edx, 148				
push	edx
call	_FT_List_Add
add	esp, 8
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_set_current_renderer
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $Exit$13
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@ft_add_ren
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@ft_add_ren
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN11@ft_add_ren
DD	-16					
DD	4
DD	$LN10@ft_add_ren
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_set_current_renderer PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
push	0
push	1869968492				
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR _renderer$[ebp]
mov	DWORD PTR [ecx+156], edx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_recompute_scaled_metrics PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+70]
push	eax
call	_FT_MulFix
add	esp, 8
add	eax, 63					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+72]
push	edx
call	_FT_MulFix
add	esp, 8
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+74]
push	edx
call	_FT_MulFix
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+20], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+76]
push	edx
call	_FT_MulFix
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+24], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_load_mac_face PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], eax
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_IsMacBinary
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
jne	$LN11@load_mac_f
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN9@load_mac_f
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
push	OFFSET $SG10322
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN10@load_mac_f
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_IsMacResource
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN5@load_mac_f
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@load_mac_f
mov	DWORD PTR tv88[ebp], OFFSET $SG10327
jmp	SHORT $LN15@load_mac_f
mov	DWORD PTR tv88[ebp], OFFSET $SG10328
mov	edx, DWORD PTR tv88[ebp]
push	edx
push	OFFSET $SG10329
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN6@load_mac_f
mov	ecx, DWORD PTR _error$[ebp]
and	ecx, 255				
cmp	ecx, 2
je	SHORT $LN1@load_mac_f
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 85					
jne	SHORT $LN2@load_mac_f
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 4
je	SHORT $LN2@load_mac_f
mov	edx, DWORD PTR _args$[ebp]
push	edx
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_load_face_in_embedded_rfork
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_load_face_in_embedded_rfork PROC
push	ebp
mov	ebp, esp
sub	esp, 212				
push	edi
lea	edi, DWORD PTR [ebp-212]
mov	ecx, 53					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 2
mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 0
mov	DWORD PTR _stream2$[ebp], 0
lea	edx, DWORD PTR _errors$[ebp]
push	edx
lea	eax, DWORD PTR _offsets$[ebp]
push	eax
lea	ecx, DWORD PTR _file_names$[ebp]
push	ecx
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Raccess_Guess
add	esp, 24					
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN38@load_face_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _i$[ebp], 9
jge	$LN36@load_face_
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_ft_raccess_rule_by_darwin_vfs
add	esp, 8
mov	BYTE PTR _is_darwin_vfs$[ebp], al
movzx	eax, BYTE PTR _is_darwin_vfs$[ebp]
test	eax, eax
je	SHORT $LN35@load_face_
movzx	ecx, BYTE PTR _vfs_rfork_has_no_font$[ebp]
test	ecx, ecx
je	SHORT $LN35@load_face_
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN33@load_face_
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10266
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN34@load_face_
jmp	SHORT $LN37@load_face_
mov	eax, DWORD PTR _i$[ebp]
cmp	DWORD PTR _errors$[ebp+eax*4], 0
je	SHORT $LN30@load_face_
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN28@load_face_
mov	eax, DWORD PTR _i$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _errors$[ebp+ecx*4]
push	edx
push	OFFSET $SG10272
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN29@load_face_
jmp	$LN37@load_face_
mov	DWORD PTR _args2$[ebp], 4
mov	ecx, DWORD PTR _i$[ebp]
cmp	DWORD PTR _file_names$[ebp+ecx*4], 0
je	SHORT $LN41@load_face_
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _file_names$[ebp+edx*4]
mov	DWORD PTR tv137[ebp], eax
jmp	SHORT $LN42@load_face_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR tv137[ebp], edx
mov	eax, DWORD PTR tv137[ebp]
mov	DWORD PTR _args2$[ebp+12], eax
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN24@load_face_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _offsets$[ebp+eax*4]
push	ecx
mov	edx, DWORD PTR _args2$[ebp+12]
push	edx
mov	eax, DWORD PTR _i$[ebp]
push	eax
push	OFFSET $SG10277
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN25@load_face_
lea	edx, DWORD PTR _stream2$[ebp]
push	edx
lea	eax, DWORD PTR _args2$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
movzx	edx, BYTE PTR _is_darwin_vfs$[ebp]
test	edx, edx
je	SHORT $LN21@load_face_
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 81					
jne	SHORT $LN21@load_face_
mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 1
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@load_face_
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN18@load_face_
push	OFFSET $SG10284
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN19@load_face_
jmp	$LN37@load_face_
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _offsets$[ebp+eax*4]
push	ecx
mov	edx, DWORD PTR _stream2$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_IsMacResource
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
push	0
mov	ecx, DWORD PTR _stream2$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN14@load_face_
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@load_face_
mov	DWORD PTR tv176[ebp], OFFSET $SG10289
jmp	SHORT $LN44@load_face_
mov	DWORD PTR tv176[ebp], OFFSET $SG10290
mov	ecx, DWORD PTR tv176[ebp]
push	ecx
push	OFFSET $SG10291
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN15@load_face_
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN11@load_face_
jmp	SHORT $LN36@load_face_
jmp	SHORT $LN10@load_face_
movzx	eax, BYTE PTR _is_darwin_vfs$[ebp]
test	eax, eax
je	SHORT $LN10@load_face_
mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 1
jmp	$LN37@load_face_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN8@load_face_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _i$[ebp], 9
jge	SHORT $LN6@load_face_
mov	edx, DWORD PTR _i$[ebp]
cmp	DWORD PTR _file_names$[ebp+edx*4], 0
je	SHORT $LN5@load_face_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _file_names$[ebp+eax*4]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR _file_names$[ebp+eax*4], 0
xor	ecx, ecx
jne	SHORT $LN4@load_face_
jmp	SHORT $LN7@load_face_
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@load_face_
mov	DWORD PTR _error$[ebp], 2
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN51@load_face_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 212				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	5
DD	$LN50@load_face_
DD	-56					
DD	36					
DD	$LN45@load_face_
DD	-100					
DD	36					
DD	$LN46@load_face_
DD	-144					
DD	36					
DD	$LN47@load_face_
DD	-188					
DD	32					
DD	$LN48@load_face_
DD	-200					
DD	4
DD	$LN49@load_face_
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	50					
DB	0
DB	97					
DB	114					
DB	103					
DB	115					
DB	50					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	115					
DB	0
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	115					
DB	0
DB	102					
DB	105					
DB	108					
DB	101					
DB	95					
DB	110					
DB	97					
DB	109					
DB	101					
DB	115					
DB	0
ENDP
_IsMacBinary PROC
push	ebp
mov	ebp, esp
sub	esp, 152				
push	edi
lea	edi, DWORD PTR [ebp-152]
mov	ecx, 38					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN5@IsMacBinar
push	OFFSET $SG10228
push	1886					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
jmp	$LN6@IsMacBinar
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@IsMacBinar
jmp	$Exit$11
push	128					
lea	ecx, DWORD PTR _header$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@IsMacBinar
jmp	$Exit$11
mov	eax, 1
imul	ecx, eax, 0
movzx	edx, BYTE PTR _header$[ebp+ecx]
test	edx, edx
jne	$LN1@IsMacBinar
mov	eax, 1
imul	ecx, eax, 74
movzx	edx, BYTE PTR _header$[ebp+ecx]
test	edx, edx
jne	SHORT $LN1@IsMacBinar
mov	eax, 1
imul	ecx, eax, 82
movzx	edx, BYTE PTR _header$[ebp+ecx]
test	edx, edx
jne	SHORT $LN1@IsMacBinar
mov	eax, 1
shl	eax, 0
movzx	ecx, BYTE PTR _header$[ebp+eax]
test	ecx, ecx
je	SHORT $LN1@IsMacBinar
mov	edx, 1
shl	edx, 0
movzx	eax, BYTE PTR _header$[ebp+edx]
cmp	eax, 33					
jg	SHORT $LN1@IsMacBinar
mov	ecx, 1
imul	edx, ecx, 63
movzx	eax, BYTE PTR _header$[ebp+edx]
test	eax, eax
jne	SHORT $LN1@IsMacBinar
mov	ecx, 1
shl	ecx, 0
movzx	edx, BYTE PTR _header$[ebp+ecx]
movzx	eax, BYTE PTR _header$[ebp+edx+2]
test	eax, eax
je	SHORT $LN2@IsMacBinar
push	OFFSET $SG10235
push	1903					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN6@IsMacBinar
mov	ecx, 1
imul	edx, ecx, 83
movzx	eax, BYTE PTR _header$[ebp+edx]
shl	eax, 24					
mov	ecx, 1
imul	edx, ecx, 84
movzx	ecx, BYTE PTR _header$[ebp+edx]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
imul	ecx, edx, 85
movzx	edx, BYTE PTR _header$[ebp+ecx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 86
movzx	ecx, BYTE PTR _header$[ebp+edx]
or	eax, ecx
mov	DWORD PTR _dlen$[ebp], eax
mov	edx, DWORD PTR _dlen$[ebp]
add	edx, 127				
and	edx, -128				
add	edx, 128				
mov	DWORD PTR _offset$[ebp], edx
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_IsMacResource
add	esp, 20					
jmp	SHORT $LN6@IsMacBinar
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@IsMacBinar
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 152				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN9@IsMacBinar
DD	-136					
DD	128					
DD	$LN8@IsMacBinar
DB	104					
DB	101					
DB	97					
DB	100					
DB	101					
DB	114					
DB	0
ENDP
_IsMacResource PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _rdara_pos$[ebp]
push	edx
lea	eax, DWORD PTR _map_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _resource_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Raccess_Get_HeaderInfo
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@IsMacResou
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@IsMacResou
lea	ecx, DWORD PTR _count$[ebp]
push	ecx
lea	edx, DWORD PTR _data_offsets$[ebp]
push	edx
push	1
push	1347375956				
mov	eax, DWORD PTR _rdara_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _map_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Raccess_Get_DataOffsets
add	esp, 32					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@IsMacResou
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _data_offsets$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_Mac_Read_POST_Resource
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _data_offsets$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _data_offsets$[ebp], 0
xor	eax, eax
jne	SHORT $LN9@IsMacResou
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN6@IsMacResou
mov	ecx, DWORD PTR _aface$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [edx], 1
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@IsMacResou
lea	eax, DWORD PTR _count$[ebp]
push	eax
lea	ecx, DWORD PTR _data_offsets$[ebp]
push	ecx
push	0
push	1936092788				
mov	edx, DWORD PTR _rdara_pos$[ebp]
push	edx
mov	eax, DWORD PTR _map_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Raccess_Get_DataOffsets
add	esp, 32					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN5@IsMacResou
mov	eax, DWORD PTR _face_index$[ebp]
cdq
idiv	DWORD PTR _count$[ebp]
mov	DWORD PTR _face_index_internal$1[ebp], edx
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index_internal$1[ebp]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _data_offsets$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_Mac_Read_sfnt_Resource
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _data_offsets$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _data_offsets$[ebp], 0
xor	edx, edx
jne	SHORT $LN4@IsMacResou
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN5@IsMacResou
mov	eax, DWORD PTR _aface$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@IsMacResou
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN18@IsMacResou
DD	-16					
DD	4
DD	$LN14@IsMacResou
DD	-28					
DD	4
DD	$LN15@IsMacResou
DD	-40					
DD	4
DD	$LN16@IsMacResou
DD	-52					
DD	4
DD	$LN17@IsMacResou
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	100					
DB	97					
DB	116					
DB	97					
DB	95					
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	115					
DB	0
DB	114					
DB	100					
DB	97					
DB	114					
DB	97					
DB	95					
DB	112					
DB	111					
DB	115					
DB	0
DB	109					
DB	97					
DB	112					
DB	95					
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
ENDP
_Mac_Read_sfnt_Resource PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _sfnt_data$[ebp], 0
mov	DWORD PTR _face_index_in_resource$[ebp], 0
cmp	DWORD PTR _face_index$[ebp], -1
jne	SHORT $LN9@Mac_Read_s
mov	DWORD PTR _face_index$[ebp], 0
mov	edx, DWORD PTR _face_index$[ebp]
cmp	edx, DWORD PTR _resource_cnt$[ebp]
jl	SHORT $LN8@Mac_Read_s
push	OFFSET $SG10152
push	1766					
push	1
call	_FT_Throw
add	esp, 12					
or	eax, 1
jmp	$LN10@Mac_Read_s
mov	eax, DWORD PTR _face_index$[ebp]
mov	ecx, DWORD PTR _offsets$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _flag_offset$[ebp], edx
mov	eax, DWORD PTR _flag_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@Mac_Read_s
jmp	$Exit$19
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _rlen$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@Mac_Read_s
jmp	$Exit$19
cmp	DWORD PTR _rlen$[ebp], -1
jne	SHORT $LN5@Mac_Read_s
push	OFFSET $SG10158
push	1776					
push	1
call	_FT_Throw
add	esp, 12					
or	eax, 1
jmp	$LN10@Mac_Read_s
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
push	0
push	0
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_open_face_PS_from_sfnt_stream
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@Mac_Read_s
jmp	$Exit$19
mov	edx, DWORD PTR _flag_offset$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
test	eax, eax
je	SHORT $LN3@Mac_Read_s
jmp	$Exit$19
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _rlen$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _sfnt_data$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@Mac_Read_s
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN10@Mac_Read_s
mov	ecx, DWORD PTR _rlen$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt_data$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@Mac_Read_s
jmp	SHORT $Exit$19
cmp	DWORD PTR _rlen$[ebp], 4
jle	SHORT $LN12@Mac_Read_s
push	4
push	OFFSET $SG10167
mov	ecx, DWORD PTR _sfnt_data$[ebp]
push	ecx
call	_memcmp
add	esp, 12					
test	eax, eax
jne	SHORT $LN12@Mac_Read_s
mov	DWORD PTR tv149[ebp], 1
jmp	SHORT $LN13@Mac_Read_s
mov	DWORD PTR tv149[ebp], 0
mov	edx, DWORD PTR tv149[ebp]
mov	DWORD PTR _is_cff$[ebp], edx
cmp	DWORD PTR _is_cff$[ebp], 0
je	SHORT $LN14@Mac_Read_s
mov	DWORD PTR tv153[ebp], OFFSET $SG10168
jmp	SHORT $LN15@Mac_Read_s
mov	DWORD PTR tv153[ebp], OFFSET $SG10169
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR tv153[ebp]
push	ecx
mov	edx, DWORD PTR _face_index_in_resource$[ebp]
push	edx
mov	eax, DWORD PTR _rlen$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt_data$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_open_face_from_buffer
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@Mac_Read_s
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN17@Mac_Read_s
DD	-16					
DD	4
DD	$LN16@Mac_Read_s
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_Mac_Read_POST_Resource PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 1
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _pfb_data$[ebp], 0
cmp	DWORD PTR _face_index$[ebp], -1
jne	SHORT $LN82@Mac_Read_P
mov	DWORD PTR _face_index$[ebp], 0
cmp	DWORD PTR _face_index$[ebp], 0
je	SHORT $LN81@Mac_Read_P
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN83@Mac_Read_P
mov	DWORD PTR _pfb_len$[ebp], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN80@Mac_Read_P
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _resource_cnt$[ebp]
jge	$LN65@Mac_Read_P
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _offsets$[ebp]
mov	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN77@Mac_Read_P
jmp	$Exit$88
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _temp$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN75@Mac_Read_P
jmp	$Exit$88
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN74@Mac_Read_P
mov	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10026
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN75@Mac_Read_P
cmp	DWORD PTR _temp$[ebp], 2147483647	
ja	SHORT $LN69@Mac_Read_P
mov	eax, DWORD PTR _temp$[ebp]
mov	ecx, DWORD PTR _pfb_len$[ebp]
lea	edx, DWORD PTR [ecx+eax+6]
cmp	edx, DWORD PTR _pfb_len$[ebp]
jae	SHORT $LN71@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN68@Mac_Read_P
mov	edx, DWORD PTR _temp$[ebp]
push	edx
push	OFFSET $SG10033
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN69@Mac_Read_P
push	OFFSET $SG10034
push	1595					
push	9
call	_FT_Throw
add	esp, 12					
or	eax, 9
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$88
mov	ecx, DWORD PTR _temp$[ebp]
mov	edx, DWORD PTR _pfb_len$[ebp]
lea	eax, DWORD PTR [edx+ecx+6]
mov	DWORD PTR _pfb_len$[ebp], eax
jmp	$LN79@Mac_Read_P
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN64@Mac_Read_P
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _resource_cnt$[ebp]
push	ecx
push	OFFSET $SG10039
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN65@Mac_Read_P
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
cmp	eax, 6
jae	SHORT $LN61@Mac_Read_P
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN59@Mac_Read_P
mov	eax, DWORD PTR _pfb_len$[ebp]
push	eax
push	OFFSET $SG10045
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN60@Mac_Read_P
push	OFFSET $SG10046
push	1608					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$88
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _pfb_data$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN56@Mac_Read_P
jmp	$Exit$88
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [ecx+eax], 128			
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [eax+edx], 1
mov	ecx, 1
shl	ecx, 1
mov	edx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [edx+ecx], 0
mov	eax, 1
imul	ecx, eax, 3
mov	edx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [edx+ecx], 0
mov	eax, 1
shl	eax, 2
mov	ecx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [ecx+eax], 0
mov	edx, 1
imul	eax, edx, 5
mov	ecx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [ecx+eax], 0
mov	DWORD PTR _pfb_pos$[ebp], 6
mov	DWORD PTR _pfb_lenpos$[ebp], 2
mov	DWORD PTR _len$[ebp], 0
mov	DWORD PTR _type$[ebp], 1
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN55@Mac_Read_P
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _resource_cnt$[ebp]
jge	$LN53@Mac_Read_P
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _offsets$[ebp]
mov	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN52@Mac_Read_P
jmp	$Exit2$89
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _rlen$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN51@Mac_Read_P
jmp	$Exit2$89
cmp	DWORD PTR _rlen$[ebp], 2147483647	
jbe	SHORT $LN50@Mac_Read_P
push	OFFSET $SG10058
push	1638					
push	9
call	_FT_Throw
add	esp, 12					
or	eax, 9
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit2$89
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	eax, ax
mov	DWORD PTR _flags$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN48@Mac_Read_P
jmp	$Exit2$89
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN47@Mac_Read_P
mov	eax, DWORD PTR _flags$[ebp]
push	eax
mov	ecx, DWORD PTR _rlen$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _offsets$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
push	OFFSET $SG10065
call	_FT_Message
add	esp, 20					
xor	eax, eax
jne	SHORT $LN48@Mac_Read_P
mov	DWORD PTR _error$[ebp], 10		
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 8
test	ecx, ecx
jne	SHORT $LN44@Mac_Read_P
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN42@Mac_Read_P
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10071
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN43@Mac_Read_P
jmp	$LN54@Mac_Read_P
cmp	DWORD PTR _rlen$[ebp], 2
jbe	SHORT $LN39@Mac_Read_P
mov	eax, DWORD PTR _rlen$[ebp]
sub	eax, 2
mov	DWORD PTR _rlen$[ebp], eax
jmp	SHORT $LN38@Mac_Read_P
mov	DWORD PTR _rlen$[ebp], 0
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 8
cmp	ecx, DWORD PTR _type$[ebp]
jne	SHORT $LN35@Mac_Read_P
mov	edx, DWORD PTR _len$[ebp]
add	edx, DWORD PTR _rlen$[ebp]
mov	DWORD PTR _len$[ebp], edx
jmp	$LN36@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN34@Mac_Read_P
mov	edx, DWORD PTR _pfb_lenpos$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_data$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10080
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN35@Mac_Read_P
mov	eax, DWORD PTR _pfb_lenpos$[ebp]
add	eax, 3
mov	ecx, DWORD PTR _pfb_len$[ebp]
add	ecx, 2
cmp	eax, ecx
jbe	SHORT $LN31@Mac_Read_P
jmp	$Exit2$89
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	al, BYTE PTR _len$[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _len$[ebp]
shr	ecx, 8
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [edx+1], cl
mov	eax, DWORD PTR _len$[ebp]
shr	eax, 16					
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [ecx+2], al
mov	edx, DWORD PTR _len$[ebp]
shr	edx, 24					
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [eax+3], dl
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 8
cmp	ecx, 5
jne	SHORT $LN29@Mac_Read_P
jmp	$LN53@Mac_Read_P
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN28@Mac_Read_P
mov	ecx, DWORD PTR _pfb_pos$[ebp]
push	ecx
mov	edx, DWORD PTR _pfb_data$[ebp]
push	edx
mov	eax, DWORD PTR _i$[ebp]
push	eax
push	OFFSET $SG10091
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN29@Mac_Read_P
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 6
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
cmp	edx, eax
jbe	SHORT $LN25@Mac_Read_P
jmp	$Exit2$89
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [ecx], 128			
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 1
mov	DWORD PTR _pfb_pos$[ebp], edx
mov	eax, DWORD PTR _flags$[ebp]
sar	eax, 8
mov	DWORD PTR _type$[ebp], eax
mov	ecx, DWORD PTR _rlen$[ebp]
mov	DWORD PTR _len$[ebp], ecx
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_pos$[ebp]
mov	al, BYTE PTR _type$[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _pfb_pos$[ebp]
add	ecx, 1
mov	DWORD PTR _pfb_pos$[ebp], ecx
mov	edx, DWORD PTR _pfb_pos$[ebp]
mov	DWORD PTR _pfb_lenpos$[ebp], edx
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [eax], 0
mov	ecx, DWORD PTR _pfb_pos$[ebp]
add	ecx, 1
mov	DWORD PTR _pfb_pos$[ebp], ecx
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [edx], 0
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, 1
mov	DWORD PTR _pfb_pos$[ebp], eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [ecx], 0
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 1
mov	DWORD PTR _pfb_pos$[ebp], edx
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [eax], 0
mov	ecx, DWORD PTR _pfb_pos$[ebp]
add	ecx, 1
mov	DWORD PTR _pfb_pos$[ebp], ecx
mov	edx, DWORD PTR _pfb_pos$[ebp]
cmp	edx, DWORD PTR _pfb_len$[ebp]
ja	SHORT $LN23@Mac_Read_P
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, DWORD PTR _rlen$[ebp]
cmp	eax, DWORD PTR _pfb_len$[ebp]
jbe	SHORT $LN22@Mac_Read_P
jmp	$Exit2$89
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN21@Mac_Read_P
mov	eax, DWORD PTR _pfb_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
push	ecx
mov	edx, DWORD PTR _rlen$[ebp]
push	edx
mov	eax, DWORD PTR _i$[ebp]
push	eax
push	OFFSET $SG10100
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN22@Mac_Read_P
mov	edx, DWORD PTR _rlen$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@Mac_Read_P
jmp	$Exit2$89
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, DWORD PTR _rlen$[ebp]
mov	DWORD PTR _pfb_pos$[ebp], edx
jmp	$LN54@Mac_Read_P
mov	DWORD PTR _error$[ebp], 10		
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, 2
mov	ecx, DWORD PTR _pfb_len$[ebp]
add	ecx, 2
cmp	eax, ecx
jbe	SHORT $LN17@Mac_Read_P
jmp	$Exit2$89
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [edx], 128			
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, 1
mov	DWORD PTR _pfb_pos$[ebp], eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [ecx], 3
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 1
mov	DWORD PTR _pfb_pos$[ebp], edx
mov	eax, DWORD PTR _pfb_lenpos$[ebp]
add	eax, 3
mov	ecx, DWORD PTR _pfb_len$[ebp]
add	ecx, 2
cmp	eax, ecx
jbe	SHORT $LN16@Mac_Read_P
jmp	SHORT $Exit2$89
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	al, BYTE PTR _len$[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _len$[ebp]
shr	ecx, 8
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [edx+1], cl
mov	eax, DWORD PTR _len$[ebp]
shr	eax, 16					
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [ecx+2], al
mov	edx, DWORD PTR _len$[ebp]
shr	edx, 24					
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [eax+3], dl
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
push	OFFSET $SG10109
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_open_face_from_buffer
add	esp, 24					
jmp	SHORT $LN83@Mac_Read_P
cmp	DWORD PTR _error$[ebp], 10		
jne	SHORT $LN15@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN13@Mac_Read_P
push	OFFSET $SG10115
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN14@Mac_Read_P
jmp	SHORT $LN10@Mac_Read_P
cmp	DWORD PTR _error$[ebp], 9
jne	SHORT $LN10@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN7@Mac_Read_P
push	OFFSET $SG10122
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@Mac_Read_P
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@Mac_Read_P
mov	DWORD PTR _error$[ebp], 1
mov	eax, DWORD PTR _pfb_data$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _pfb_data$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@Mac_Read_P
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN87@Mac_Read_P
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN86@Mac_Read_P
DD	-8					
DD	4
DD	$LN85@Mac_Read_P
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_lookup_PS_in_sfnt_stream PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _offset$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [edx], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _tag$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
cmp	DWORD PTR _tag$[ebp], 1954115633	
je	SHORT $LN14@ft_lookup_
push	OFFSET $SG9921
push	1442					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _numTables$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
push	6
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN12@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
mov	DWORD PTR _pstable_index$[ebp], -1
mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [edx], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN11@ft_lookup_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
movzx	ecx, WORD PTR _numTables$[ebp]
cmp	DWORD PTR _i$[ebp], ecx
jge	$LN9@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _tag$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_lookup_
push	4
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
cmp	DWORD PTR _tag$[ebp], 1128875040	
jne	SHORT $LN6@ft_lookup_
mov	edx, DWORD PTR _pstable_index$[ebp]
add	edx, 1
mov	DWORD PTR _pstable_index$[ebp], edx
mov	eax, DWORD PTR _offset$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, 22					
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _length$[ebp]
mov	ecx, DWORD PTR [eax]
sub	ecx, 22					
mov	edx, DWORD PTR _length$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [eax], 1
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN5@ft_lookup_
xor	eax, eax
jmp	SHORT $LN16@ft_lookup_
jmp	SHORT $LN4@ft_lookup_
cmp	DWORD PTR _tag$[ebp], 1415139377	
jne	SHORT $LN4@ft_lookup_
mov	ecx, DWORD PTR _pstable_index$[ebp]
add	ecx, 1
mov	DWORD PTR _pstable_index$[ebp], ecx
mov	edx, DWORD PTR _offset$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, 24					
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _length$[ebp]
mov	eax, DWORD PTR [edx]
sub	eax, 24					
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [edx], 0
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN4@ft_lookup_
xor	eax, eax
jmp	SHORT $LN16@ft_lookup_
cmp	DWORD PTR _face_index$[ebp], 0
jl	SHORT $LN1@ft_lookup_
mov	eax, DWORD PTR _pstable_index$[ebp]
cmp	eax, DWORD PTR _face_index$[ebp]
jne	SHORT $LN1@ft_lookup_
xor	eax, eax
jmp	SHORT $LN16@ft_lookup_
jmp	$LN10@ft_lookup_
push	OFFSET $SG9951
push	1479					
push	142					
call	_FT_Throw
add	esp, 12					
or	eax, 142				
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@ft_lookup_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN19@ft_lookup_
DD	-8					
DD	4
DD	$LN18@ft_lookup_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_new_memory_stream PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _stream$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN3@new_memory
push	OFFSET $SG9860
push	1325					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN4@new_memory
cmp	DWORD PTR _base$[ebp], 0
jne	SHORT $LN2@new_memory
push	OFFSET $SG9862
push	1328					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN4@new_memory
mov	eax, DWORD PTR _astream$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	40					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _stream$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@new_memory
jmp	SHORT $Exit$9
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _base$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_OpenMemory
add	esp, 12					
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _close$[ebp]
mov	DWORD PTR [edx+24], eax
mov	ecx, DWORD PTR _astream$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@new_memory
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN7@new_memory
DD	-8					
DD	4
DD	$LN6@new_memory
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_memory_stream_close PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx], 0
xor	eax, eax
jne	SHORT $LN3@memory_str
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+24], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_open_face PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _face$[ebp], 0
mov	DWORD PTR _internal$[ebp], 0
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+36]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@open_face
jmp	$Fail$24
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+96], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx+100], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _astream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+104], edx
movzx	eax, BYTE PTR _external_stream$[ebp]
test	eax, eax
je	SHORT $LN17@open_face
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 1024				
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+8], edx
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	60					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@open_face
jmp	$Fail$24
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+128], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	DWORD PTR [eax+48], 0
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN15@open_face
mov	ecx, DWORD PTR _i$1[ebp]
add	ecx, 1
mov	DWORD PTR _i$1[ebp], ecx
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR _num_params$[ebp]
jge	SHORT $LN13@open_face
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
jne	SHORT $LN13@open_face
mov	edx, DWORD PTR _i$1[ebp]
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+edx*8], 1768842098	
jne	SHORT $LN12@open_face
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR _i$1[ebp]
mov	ecx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [ecx+eax*8+4]
mov	DWORD PTR [edx+48], eax
jmp	SHORT $LN14@open_face
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN11@open_face
mov	esi, esp
mov	edx, DWORD PTR _params$[ebp]
push	edx
mov	eax, DWORD PTR _num_params$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _astream$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+48]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _astream$[ebp]
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+104]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@open_face
jmp	SHORT $Fail$24
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_find_unicode_charmap
add	esp, 4
mov	DWORD PTR _error2$[ebp], eax
cmp	DWORD PTR _error2$[ebp], 0
je	SHORT $LN9@open_face
mov	edx, DWORD PTR _error2$[ebp]
and	edx, 255				
cmp	edx, 38					
je	SHORT $LN9@open_face
mov	eax, DWORD PTR _error2$[ebp]
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$24
mov	ecx, DWORD PTR _aface$[ebp]
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@open_face
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_destroy_charmaps
add	esp, 8
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+52], 0
je	SHORT $LN6@open_face
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+52]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _internal$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _internal$[ebp], 0
xor	edx, edx
jne	SHORT $LN6@open_face
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _face$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@open_face
mov	eax, DWORD PTR _aface$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN23@open_face
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN22@open_face
DD	-24					
DD	4
DD	$LN21@open_face
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_find_variant_selector_charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@find_varia
push	OFFSET $SG9741
push	1089					
push	OFFSET $SG9742
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@find_varia
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _first$[ebp], edx
cmp	DWORD PTR _first$[ebp], 0
jne	SHORT $LN5@find_varia
xor	eax, eax
jmp	$LN10@find_varia
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _end$[ebp], eax
mov	ecx, DWORD PTR _first$[ebp]
mov	DWORD PTR _cur$[ebp], ecx
jmp	SHORT $LN4@find_varia
mov	edx, DWORD PTR _cur$[ebp]
add	edx, 4
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _cur$[ebp]
cmp	eax, DWORD PTR _end$[ebp]
jae	SHORT $LN2@find_varia
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
movzx	edx, WORD PTR [ecx+8]
test	edx, edx
jne	SHORT $LN1@find_varia
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
movzx	ecx, WORD PTR [eax+10]
cmp	ecx, 5
jne	SHORT $LN1@find_varia
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_FT_Get_CMap_Format
add	esp, 4
cmp	eax, 14					
jne	SHORT $LN1@find_varia
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
jmp	SHORT $LN10@find_varia
jmp	SHORT $LN3@find_varia
xor	eax, eax
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_find_unicode_charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN13@find_unico
push	OFFSET $SG9714
push	1000					
push	OFFSET $SG9715
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@find_unico
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _first$[ebp], edx
cmp	DWORD PTR _first$[ebp], 0
jne	SHORT $LN10@find_unico
push	OFFSET $SG9717
push	1005					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
jmp	$LN15@find_unico
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
sub	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _first$[ebp]
jb	$LN8@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
cmp	DWORD PTR [eax+4], 1970170211		
jne	SHORT $LN7@find_unico
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
movzx	edx, WORD PTR [ecx+8]
cmp	edx, 3
jne	SHORT $LN4@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
movzx	ecx, WORD PTR [eax+10]
cmp	ecx, 10					
je	SHORT $LN5@find_unico
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
movzx	eax, WORD PTR [edx+8]
test	eax, eax
jne	SHORT $LN7@find_unico
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
movzx	edx, WORD PTR [ecx+10]
cmp	edx, 4
jne	SHORT $LN7@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+92], ecx
xor	eax, eax
jmp	SHORT $LN15@find_unico
jmp	$LN9@find_unico
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _first$[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _cur$[ebp]
sub	eax, 4
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
cmp	ecx, DWORD PTR _first$[ebp]
jb	SHORT $LN2@find_unico
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
cmp	DWORD PTR [edx+4], 1970170211		
jne	SHORT $LN1@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+92], ecx
xor	eax, eax
jmp	SHORT $LN15@find_unico
jmp	SHORT $LN3@find_unico
push	OFFSET $SG9729
push	1067					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Destroy_Driver PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _driver$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
push	OFFSET _destroy_face
mov	eax, DWORD PTR _driver$[ebp]
add	eax, 16					
push	eax
call	_FT_List_Finalize
add	esp, 16					
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	SHORT $LN2@Destroy_Dr
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
call	_FT_GlyphLoader_Done
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_destroy_face PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+120], 0
je	SHORT $LN11@destroy_fa
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+116]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+120]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+84], 0
je	SHORT $LN10@destroy_fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+84]
push	eax
call	_FT_Done_GlyphSlot
add	esp, 4
jmp	SHORT $LN11@destroy_fa
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
push	OFFSET _destroy_size
mov	eax, DWORD PTR _face$[ebp]
add	eax, 108				
push	eax
call	_FT_List_Finalize
add	esp, 16					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+88], 0
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+48], 0
je	SHORT $LN9@destroy_fa
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+48]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_destroy_charmaps
add	esp, 8
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+52], 0
je	SHORT $LN8@destroy_fa
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+52]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 1024				
je	SHORT $LN15@destroy_fa
mov	DWORD PTR tv93[ebp], 1
jmp	SHORT $LN16@destroy_fa
mov	DWORD PTR tv93[ebp], 0
mov	edx, DWORD PTR tv93[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
push	ecx
call	_FT_Stream_Free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+104], 0
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+128], 0
je	SHORT $LN3@destroy_fa
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+128], 0
xor	edx, edx
jne	SHORT $LN6@destroy_fa
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _face$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@destroy_fa
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_destroy_charmaps PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@destroy_ch
jmp	SHORT $LN8@destroy_ch
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN6@destroy_ch
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR [ecx+36]
jge	SHORT $LN3@destroy_ch
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _n$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
mov	DWORD PTR _cmap$1[ebp], eax
mov	ecx, DWORD PTR _cmap$1[ebp]
push	ecx
call	_ft_cmap_done_internal
add	esp, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _n$[ebp]
mov	DWORD PTR [eax+ecx*4], 0
jmp	SHORT $LN5@destroy_ch
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+40], 0
xor	eax, eax
jne	SHORT $LN3@destroy_ch
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+36], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_cmap_done_internal PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _cmap$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN3@ft_cmap_do
mov	esi, esp
mov	ecx, DWORD PTR _cmap$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _cmap$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _cmap$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@ft_cmap_do
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_destroy_size PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN8@destroy_si
mov	esi, esp
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	DWORD PTR [edx+60], 0
je	SHORT $LN6@destroy_si
mov	esi, esp
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+60]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+40]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+40], 0
xor	edx, edx
jne	SHORT $LN6@destroy_si
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _size$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@destroy_si
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_glyphslot_grid_fit_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
add	eax, 24					
mov	DWORD PTR _metrics$[ebp], eax
movzx	ecx, BYTE PTR _vertical$[ebp]
test	ecx, ecx
je	$LN2@ft_glyphsl
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, 63					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx]
lea	eax, DWORD PTR [eax+edx+63]
and	eax, -64				
mov	DWORD PTR _right$[ebp], eax
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
lea	edx, DWORD PTR [edx+ecx+63]
and	edx, -64				
mov	DWORD PTR _bottom$[ebp], edx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+20]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+24]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _right$[ebp]
sub	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _bottom$[ebp]
sub	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+4], ecx
jmp	$LN1@ft_glyphsl
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+20]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+24]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx]
lea	ecx, DWORD PTR [ecx+eax+63]
and	ecx, -64				
mov	DWORD PTR _right$[ebp], ecx
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
and	ecx, -64				
mov	DWORD PTR _bottom$[ebp], ecx
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, 63					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _right$[ebp]
sub	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
sub	eax, DWORD PTR _bottom$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+16]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+28]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_lookup_glyph_renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN1@ft_lookup_
mov	ecx, DWORD PTR _result$[ebp]
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [ecx+16]
cmp	eax, DWORD PTR [edx+72]
je	SHORT $LN2@ft_lookup_
push	0
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+72]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_glyphslot_done PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+68], 0
je	SHORT $LN6@ft_glyphsl
mov	esi, esp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+68]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_free_bitmap
add	esp, 4
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+156], 0
je	SHORT $LN7@ft_glyphsl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	SHORT $LN3@ft_glyphsl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_GlyphLoader_Done
add	esp, 4
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+156], 0
xor	ecx, ecx
jne	SHORT $LN3@ft_glyphsl
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_glyphslot_clear PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_ft_glyphslot_free_bitmap
add	esp, 4
push	32					
push	0
mov	ecx, DWORD PTR _slot$[ebp]
add	ecx, 24					
push	ecx
call	_memset
add	esp, 12					
push	20					
push	0
mov	edx, DWORD PTR _slot$[ebp]
add	edx, 108				
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+80], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+76], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+84], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	BYTE PTR [eax+94], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+100], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+104], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+128], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+132], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+136], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+140], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+152], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+72], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+56], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+60], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+144], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+148], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_glyphslot_init PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _internal$[ebp], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	40					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@ft_glyphsl
jmp	SHORT $Exit$9
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+156], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 512				
jne	SHORT $LN2@ft_glyphsl
mov	edx, DWORD PTR _internal$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_FT_GlyphLoader_New
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $Exit$9
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+64], 0
je	SHORT $Exit$9
mov	esi, esp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+64]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@ft_glyphsl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN7@ft_glyphsl
DD	-20					
DD	4
DD	$LN6@ft_glyphsl
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_body	PROC
push	ebp
mov	ebp, esp
sub	esp, 100				
push	edi
lea	edi, DWORD PTR [ebp-100]
mov	ecx, 25					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR _ptr$[ebp], eax
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _saved_a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _saved_b$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _saved_c$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _saved_d$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [eax+edx]
shl	edx, 8
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv91[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv91[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR tv91[ebp]
mov	eax, DWORD PTR _a$[ebp]
lea	ecx, DWORD PTR [eax+edx-680876936]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
shl	edx, 7
mov	eax, DWORD PTR _a$[ebp]
shr	eax, 25					
or	edx, eax
mov	DWORD PTR _a$[ebp], edx
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, 1
shl	edx, 2
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 5
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 6
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 7
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv154[ebp], ecx
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv154[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
and	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR tv154[ebp]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-389564586]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 12					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 20					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, 1
shl	ecx, 3
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 9
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 10
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 11
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv185[ebp], eax
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv185[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR tv185[ebp]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+eax+606105819]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 17					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 15					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, 1
imul	ecx, eax, 12
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 13
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 14
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 15
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv216[ebp], eax
mov	eax, 4
imul	ecx, eax, 3
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv216[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR tv216[ebp]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+ecx-1044525330]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 22					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 10					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, 1
shl	ecx, 4
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 17
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 18
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 19
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv247[ebp], eax
mov	eax, 4
shl	eax, 2
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv247[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR tv247[ebp]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax-176418897]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 7
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 25					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 21
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 22
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 23
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv278[ebp], eax
mov	eax, 4
imul	ecx, eax, 5
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv278[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
and	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR tv278[ebp]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx+1200080426]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 12					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 20					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 24
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 25
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 26
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 27
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv309[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 6
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv309[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
and	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR tv309[ebp]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+edx-1473231341]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 17					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 15					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, 1
imul	eax, edx, 28
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 29
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 30
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 31
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv340[ebp], edx
mov	edx, 4
imul	eax, edx, 7
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv340[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
and	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR tv340[ebp]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax-45705983]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 22					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 10					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, 1
shl	eax, 5
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 33
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 34
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 35
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv371[ebp], edx
mov	edx, 4
shl	edx, 3
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv371[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR tv371[ebp]
mov	eax, DWORD PTR _a$[ebp]
lea	ecx, DWORD PTR [eax+edx+1770035416]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
shl	edx, 7
mov	eax, DWORD PTR _a$[ebp]
shr	eax, 25					
or	edx, eax
mov	DWORD PTR _a$[ebp], edx
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, 1
imul	eax, edx, 36
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 37
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 38
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 39
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv402[ebp], edx
mov	edx, 4
imul	eax, edx, 9
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv402[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR tv402[ebp]
mov	ecx, DWORD PTR _d$[ebp]
lea	edx, DWORD PTR [ecx+eax-1958414417]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
shl	eax, 12					
mov	ecx, DWORD PTR _d$[ebp]
shr	ecx, 20					
or	eax, ecx
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], edx
mov	eax, 1
imul	ecx, eax, 40
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 41
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 42
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 43
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv433[ebp], eax
mov	eax, 4
imul	ecx, eax, 10
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv433[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR tv433[ebp]
mov	edx, DWORD PTR _c$[ebp]
lea	eax, DWORD PTR [edx+ecx-42063]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
shl	ecx, 17					
mov	edx, DWORD PTR _c$[ebp]
shr	edx, 15					
or	ecx, edx
mov	DWORD PTR _c$[ebp], ecx
mov	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 44
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 45
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 46
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 47
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv464[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 11
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv464[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
and	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR tv464[ebp]
mov	eax, DWORD PTR _b$[ebp]
lea	ecx, DWORD PTR [eax+edx-1990404162]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
shl	edx, 22					
mov	eax, DWORD PTR _b$[ebp]
shr	eax, 10					
or	edx, eax
mov	DWORD PTR _b$[ebp], edx
mov	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, 1
imul	eax, edx, 48
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 49
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 50
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 51
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv495[ebp], edx
mov	edx, 4
imul	eax, edx, 12
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv495[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR tv495[ebp]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax+1804603682]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 7
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 25					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, 1
imul	ecx, eax, 52
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 53
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 54
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 55
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv526[ebp], eax
mov	eax, 4
imul	ecx, eax, 13
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv526[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
and	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR tv526[ebp]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-40341101]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 12					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 20					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 56
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 57
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 58
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 59
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv557[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 14
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv557[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
and	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR tv557[ebp]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+edx-1502002290]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 17					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 15					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, 1
imul	eax, edx, 60
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 61
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 62
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 63
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv588[ebp], edx
mov	edx, 4
imul	eax, edx, 15
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv588[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
and	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR tv588[ebp]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax+1236535329]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 22					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 10					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax-165796510]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 5
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 27					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
and	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _b$[ebp]
mov	ecx, 4
imul	edx, ecx, 6
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+eax-1069501632]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 9
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 23					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
and	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
imul	eax, edx, 11
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx+643717713]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 14					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 18					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-373897302]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-701558691]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 27					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 10
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx+38016083]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 9
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 23					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 15
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-660478335]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 14					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 18					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax-405537848]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 9
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax+568446438]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 27					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 14
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-1019803690]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 9
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 23					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-187363961]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 14					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 18					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
shl	ecx, 3
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax+1163531501]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 13
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-1444681467]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 27					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-51403784]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 9
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 23					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
and	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1735328473]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 14					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 18					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 12
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-1926607734]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-378558]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 28					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
shl	edx, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-2022574463]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 11					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 21					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 11
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1839030562]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 16					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 16					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _c$[ebp]
mov	eax, 4
imul	ecx, eax, 14
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-35309556]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 23					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 9
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax-1530992060]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 28					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _d$[ebp]
lea	edx, DWORD PTR [ecx+eax+1272893353]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
shl	eax, 11					
mov	ecx, DWORD PTR _d$[ebp]
shr	ecx, 21					
or	eax, ecx
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
mov	ecx, 4
imul	edx, ecx, 7
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _c$[ebp]
lea	eax, DWORD PTR [edx+eax-155497632]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
shl	ecx, 16					
mov	edx, DWORD PTR _c$[ebp]
shr	edx, 16					
or	ecx, edx
mov	DWORD PTR _c$[ebp], ecx
mov	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
imul	eax, edx, 10
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _b$[ebp]
lea	ecx, DWORD PTR [eax+ecx-1094730640]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
shl	edx, 23					
mov	eax, DWORD PTR _b$[ebp]
shr	eax, 9
or	edx, eax
mov	DWORD PTR _b$[ebp], edx
mov	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 13
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+edx+681279174]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 28					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+eax-358537222]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 11					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 21					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 3
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx-722521979]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 16					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 16					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _c$[ebp]
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx+76029189]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 23					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 9
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 9
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-640364487]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 28					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
imul	eax, edx, 12
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-421815835]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 11					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 21					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
mov	eax, 4
imul	ecx, eax, 15
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx+530742520]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 16					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 16					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax-995338651]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 23					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 9
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
not	eax
or	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-198630844]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 26					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
not	ecx
or	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1126891415]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 10					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 22					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
not	edx
or	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 14
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-1416354905]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 15					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 17					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
not	eax
or	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+eax-57434055]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 21					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 11					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
not	ecx
or	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
imul	eax, edx, 12
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _a$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1700485571]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
shl	edx, 6
mov	eax, DWORD PTR _a$[ebp]
shr	eax, 26					
or	edx, eax
mov	DWORD PTR _a$[ebp], edx
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
not	edx
or	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
mov	eax, 4
imul	ecx, eax, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _d$[ebp]
lea	edx, DWORD PTR [ecx+edx-1894986606]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
shl	eax, 10					
mov	ecx, DWORD PTR _d$[ebp]
shr	ecx, 22					
or	eax, ecx
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
not	eax
or	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
mov	ecx, 4
imul	edx, ecx, 10
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _c$[ebp]
lea	eax, DWORD PTR [edx+eax-1051523]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
shl	ecx, 15					
mov	edx, DWORD PTR _c$[ebp]
shr	edx, 17					
or	ecx, edx
mov	DWORD PTR _c$[ebp], ecx
mov	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
not	ecx
or	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _d$[ebp]
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+ecx-2054922799]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 21					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 11					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
not	ecx
or	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
shl	edx, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+ecx+1873313359]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 26					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
not	ecx
or	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 15
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-30611744]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 10					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 22					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
not	edx
or	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-1560198380]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 15					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 17					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
not	eax
or	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 13
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+eax+1309151649]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 21					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 11					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
not	ecx
or	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+ecx-145523070]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 26					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
not	ecx
or	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 11
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-1120210379]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 10					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 22					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
not	edx
or	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [ecx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+edx+718787259]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 15					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 17					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
not	edx
or	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 9
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-343485551]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 21					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 11					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _saved_a$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR _saved_b$[ebp]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _saved_c$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _saved_d$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _ptr$[ebp]
add	ecx, 64					
mov	DWORD PTR _ptr$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
sub	edx, 64					
mov	DWORD PTR _size$[ebp], edx
jne	$LN3@body
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR [eax+20], ecx
mov	eax, DWORD PTR _ptr$[ebp]
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_MD5_Final PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 63					
mov	DWORD PTR _used$[ebp], ecx
mov	edx, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR _used$[ebp]
mov	BYTE PTR [edx+24], 128			
mov	eax, DWORD PTR _used$[ebp]
add	eax, 1
mov	DWORD PTR _used$[ebp], eax
mov	ecx, 64					
sub	ecx, DWORD PTR _used$[ebp]
mov	DWORD PTR _available$[ebp], ecx
cmp	DWORD PTR _available$[ebp], 8
jae	SHORT $LN1@MD5_Final
mov	edx, DWORD PTR _available$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _used$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
lea	edx, DWORD PTR [ecx+eax+24]
push	edx
call	_memset
add	esp, 12					
push	64					
mov	eax, DWORD PTR _ctx$[ebp]
add	eax, 24					
push	eax
mov	ecx, DWORD PTR _ctx$[ebp]
push	ecx
call	_body
add	esp, 12					
mov	DWORD PTR _used$[ebp], 0
mov	DWORD PTR _available$[ebp], 64		
mov	edx, DWORD PTR _available$[ebp]
sub	edx, 8
push	edx
push	0
mov	eax, DWORD PTR _used$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
lea	edx, DWORD PTR [ecx+eax+24]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax]
shl	ecx, 3
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, 1
imul	ecx, eax, 56
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
mov	al, BYTE PTR [eax]
mov	BYTE PTR [edx+ecx+24], al
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx]
shr	edx, 8
mov	eax, 1
imul	ecx, eax, 57
mov	eax, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [eax+ecx+24], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx]
shr	edx, 16					
mov	eax, 1
imul	ecx, eax, 58
mov	eax, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [eax+ecx+24], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 59
mov	eax, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [eax+ecx+24], dl
mov	ecx, 1
imul	edx, ecx, 60
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
mov	cl, BYTE PTR [ecx+4]
mov	BYTE PTR [eax+edx+24], cl
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+4]
shr	eax, 8
mov	ecx, 1
imul	edx, ecx, 61
mov	ecx, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [ecx+edx+24], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+4]
shr	eax, 16					
mov	ecx, 1
imul	edx, ecx, 62
mov	ecx, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [ecx+edx+24], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+4]
shr	eax, 24					
mov	ecx, 1
imul	edx, ecx, 63
mov	ecx, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [ecx+edx+24], al
push	64					
mov	edx, DWORD PTR _ctx$[ebp]
add	edx, 24					
push	edx
mov	eax, DWORD PTR _ctx$[ebp]
push	eax
call	_body
add	esp, 12					
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _result$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
mov	cl, BYTE PTR [ecx+8]
mov	BYTE PTR [eax+edx], cl
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+8]
shr	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _result$[ebp]
mov	BYTE PTR [edx+ecx], al
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax+8]
shr	ecx, 16					
mov	edx, 1
shl	edx, 1
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+edx], cl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+8]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 3
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, 1
shl	ecx, 2
mov	edx, DWORD PTR _result$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
mov	al, BYTE PTR [eax+12]
mov	BYTE PTR [edx+ecx], al
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+12]
shr	edx, 8
mov	eax, 1
imul	ecx, eax, 5
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+12]
shr	edx, 16					
mov	eax, 1
imul	ecx, eax, 6
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+12]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 7
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, 1
shl	ecx, 3
mov	edx, DWORD PTR _result$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
mov	al, BYTE PTR [eax+16]
mov	BYTE PTR [edx+ecx], al
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 8
mov	eax, 1
imul	ecx, eax, 9
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 16					
mov	eax, 1
imul	ecx, eax, 10
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 11
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, 1
imul	edx, ecx, 12
mov	eax, DWORD PTR _result$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
mov	cl, BYTE PTR [ecx+20]
mov	BYTE PTR [eax+edx], cl
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+20]
shr	eax, 8
mov	ecx, 1
imul	edx, ecx, 13
mov	ecx, DWORD PTR _result$[ebp]
mov	BYTE PTR [ecx+edx], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+20]
shr	eax, 16					
mov	ecx, 1
imul	edx, ecx, 14
mov	ecx, DWORD PTR _result$[ebp]
mov	BYTE PTR [ecx+edx], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+20]
shr	eax, 24					
mov	ecx, 1
imul	edx, ecx, 15
mov	ecx, DWORD PTR _result$[ebp]
mov	BYTE PTR [ecx+edx], al
push	152					
push	0
mov	edx, DWORD PTR _ctx$[ebp]
push	edx
call	_memset
add	esp, 12					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_MD5_Update PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _saved_lo$[ebp], ecx
mov	edx, DWORD PTR _saved_lo$[ebp]
add	edx, DWORD PTR _size$[ebp]
and	edx, 536870911				
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
cmp	edx, DWORD PTR _saved_lo$[ebp]
jae	SHORT $LN4@MD5_Update
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax+4]
add	ecx, 1
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _size$[ebp]
shr	eax, 29					
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _saved_lo$[ebp]
and	eax, 63					
mov	DWORD PTR _used$[ebp], eax
je	SHORT $LN3@MD5_Update
mov	ecx, 64					
sub	ecx, DWORD PTR _used$[ebp]
mov	DWORD PTR _available$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
cmp	edx, DWORD PTR _available$[ebp]
jae	SHORT $LN2@MD5_Update
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _data$[ebp]
push	ecx
mov	edx, DWORD PTR _used$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
lea	ecx, DWORD PTR [eax+edx+24]
push	ecx
call	_memcpy
add	esp, 12					
jmp	$LN5@MD5_Update
mov	edx, DWORD PTR _available$[ebp]
push	edx
mov	eax, DWORD PTR _data$[ebp]
push	eax
mov	ecx, DWORD PTR _used$[ebp]
mov	edx, DWORD PTR _ctx$[ebp]
lea	eax, DWORD PTR [edx+ecx+24]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, DWORD PTR _available$[ebp]
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
sub	edx, DWORD PTR _available$[ebp]
mov	DWORD PTR _size$[ebp], edx
push	64					
mov	eax, DWORD PTR _ctx$[ebp]
add	eax, 24					
push	eax
mov	ecx, DWORD PTR _ctx$[ebp]
push	ecx
call	_body
add	esp, 12					
cmp	DWORD PTR _size$[ebp], 64		
jb	SHORT $LN1@MD5_Update
mov	edx, DWORD PTR _size$[ebp]
and	edx, -64				
push	edx
mov	eax, DWORD PTR _data$[ebp]
push	eax
mov	ecx, DWORD PTR _ctx$[ebp]
push	ecx
call	_body
add	esp, 12					
mov	DWORD PTR _data$[ebp], eax
mov	edx, DWORD PTR _size$[ebp]
and	edx, 63					
mov	DWORD PTR _size$[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _data$[ebp]
push	ecx
mov	edx, DWORD PTR _ctx$[ebp]
add	edx, 24					
push	edx
call	_memcpy
add	esp, 12					
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_MD5_Init PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [eax+8], 1732584193		
mov	ecx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [ecx+12], -271733879		
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+16], -1732584194		
mov	eax, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [eax+20], 271733878		
mov	ecx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+4], 0
pop	ebp
ret	0
ENDP
_ft_raccess_rule_by_darwin_vfs PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _rule_index$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_get_rule_type_from_rule_index
add	esp, 8
mov	DWORD PTR tv67[ebp], eax
cmp	DWORD PTR tv67[ebp], 3
jl	SHORT $LN1@ft_raccess
cmp	DWORD PTR tv67[ebp], 4
jle	SHORT $LN2@ft_raccess
jmp	SHORT $LN1@ft_raccess
mov	al, 1
jmp	SHORT $LN5@ft_raccess
xor	al, al
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_open_face_from_buffer PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _stream$[ebp], 0
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _stream$[ebp]
push	edx
push	OFFSET _memory_stream_close
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _base$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_new_memory_stream
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@open_face_
mov	eax, DWORD PTR _base$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _base$[ebp], 0
xor	edx, edx
jne	SHORT $LN9@open_face_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN11@open_face_
mov	DWORD PTR _args$[ebp], 2
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _args$[ebp+16], eax
cmp	DWORD PTR _driver_name$[ebp], 0
je	SHORT $LN6@open_face_
mov	ecx, DWORD PTR _args$[ebp]
or	ecx, 8
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _driver_name$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _args$[ebp+20], eax
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
lea	eax, DWORD PTR _args$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Open_Face
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN5@open_face_
mov	edx, DWORD PTR _aface$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
and	ecx, -1025				
mov	edx, DWORD PTR _aface$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [eax+8], ecx
jmp	SHORT $LN4@open_face_
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Close
add	esp, 4
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@open_face_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@open_face_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	2
DD	$LN15@open_face_
DD	-36					
DD	32					
DD	$LN13@open_face_
DD	-52					
DD	4
DD	$LN14@open_face_
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
DB	97					
DB	114					
DB	103					
DB	115					
DB	0
ENDP
_open_face_PS_from_sfnt_stream PROC
push	ebp
mov	ebp, esp
sub	esp, 72					
push	edi
lea	edi, DWORD PTR [ebp-72]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _sfnt_ps$[ebp], 0
mov	edx, DWORD PTR _num_params$[ebp]
mov	DWORD PTR _num_params$[ebp], edx
mov	eax, DWORD PTR _params$[ebp]
mov	DWORD PTR _params$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _pos$[ebp], eax
lea	edx, DWORD PTR _is_sfnt_cid$[ebp]
push	edx
lea	eax, DWORD PTR _length$[ebp]
push	eax
lea	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_ft_lookup_PS_in_sfnt_stream
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@open_face_
jmp	$Exit$19
mov	ecx, DWORD PTR _pos$[ebp]
add	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
test	eax, eax
je	SHORT $LN5@open_face_
jmp	$Exit$19
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _length$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _sfnt_ps$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@open_face_
jmp	SHORT $Exit$19
mov	eax, DWORD PTR _length$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt_ps$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@open_face_
jmp	SHORT $Exit$19
movzx	eax, BYTE PTR _is_sfnt_cid$[ebp]
test	eax, eax
je	SHORT $LN9@open_face_
mov	DWORD PTR tv93[ebp], OFFSET $SG9981
jmp	SHORT $LN10@open_face_
mov	DWORD PTR tv93[ebp], OFFSET $SG9982
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN11@open_face_
mov	ecx, DWORD PTR _face_index$[ebp]
mov	DWORD PTR tv128[ebp], ecx
jmp	SHORT $LN12@open_face_
mov	DWORD PTR tv128[ebp], 0
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR tv93[ebp]
push	eax
mov	ecx, DWORD PTR tv128[ebp]
push	ecx
mov	edx, DWORD PTR _length$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt_ps$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_open_face_from_buffer
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
jne	SHORT $LN2@open_face_
mov	eax, DWORD PTR _pos$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error1$1[ebp], eax
cmp	DWORD PTR _error1$1[ebp], 0
je	SHORT $LN2@open_face_
mov	eax, DWORD PTR _error1$1[ebp]
jmp	SHORT $LN7@open_face_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@open_face_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 72					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	4
DD	$LN17@open_face_
DD	-8					
DD	4
DD	$LN13@open_face_
DD	-24					
DD	4
DD	$LN14@open_face_
DD	-36					
DD	4
DD	$LN15@open_face_
DD	-49					
DD	1
DD	$LN16@open_face_
DB	105					
DB	115					
DB	95					
DB	115					
DB	102					
DB	110					
DB	116					
DB	95					
DB	99					
DB	105					
DB	100					
DB	0
DB	108					
DB	101					
DB	110					
DB	103					
DB	116					
DB	104					
DB	0
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Get_CMap_Format PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN7@FT_Get_CMa
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN8@FT_Get_CMa
or	eax, -1
jmp	$LN9@FT_Get_CMa
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN3@FT_Get_CMa
mov	esi, esp
push	OFFSET $SG11519
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], edx
xor	eax, eax
jne	SHORT $LN6@FT_Get_CMa
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN2@FT_Get_CMa
or	eax, -1
jmp	SHORT $LN9@FT_Get_CMa
mov	esi, esp
lea	ecx, DWORD PTR _cmap_info$[ebp]
push	ecx
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
mov	eax, DWORD PTR _service$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@FT_Get_CMa
or	eax, -1
jmp	SHORT $LN9@FT_Get_CMa
mov	eax, DWORD PTR _cmap_info$[ebp+4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Get_CMa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN12@FT_Get_CMa
DD	-20					
DD	8
DD	$LN11@FT_Get_CMa
DB	99					
DB	109					
DB	97					
DB	112					
DB	95					
DB	105					
DB	110					
DB	102					
DB	111					
DB	0
ENDP
_FT_Get_CMap_Language_ID PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN7@FT_Get_CMa
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN8@FT_Get_CMa
xor	eax, eax
jmp	SHORT $LN9@FT_Get_CMa
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN3@FT_Get_CMa
mov	esi, esp
push	OFFSET $SG11498
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], edx
xor	eax, eax
jne	SHORT $LN6@FT_Get_CMa
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN2@FT_Get_CMa
xor	eax, eax
jmp	SHORT $LN9@FT_Get_CMa
mov	esi, esp
lea	ecx, DWORD PTR _cmap_info$[ebp]
push	ecx
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
mov	eax, DWORD PTR _service$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@FT_Get_CMa
xor	eax, eax
jmp	SHORT $LN9@FT_Get_CMa
mov	eax, DWORD PTR _cmap_info$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Get_CMa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN12@FT_Get_CMa
DD	-20					
DD	8
DD	$LN11@FT_Get_CMa
DB	99					
DB	109					
DB	97					
DB	112					
DB	95					
DB	105					
DB	110					
DB	102					
DB	111					
DB	0
ENDP
_FT_Sfnt_Table_Info PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN6@FT_Sfnt_Ta
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
jne	SHORT $LN5@FT_Sfnt_Ta
push	OFFSET $SG11467
push	3755					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Sfnt_Ta
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Sfnt_Ta
mov	esi, esp
push	OFFSET $SG11477
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Sfnt_Ta
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN1@FT_Sfnt_Ta
push	OFFSET $SG11480
push	3759					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN8@FT_Sfnt_Ta
mov	esi, esp
mov	eax, DWORD PTR _length$[ebp]
push	eax
lea	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _tag$[ebp]
push	edx
mov	eax, DWORD PTR _table_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Sfnt_Ta
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN11@FT_Sfnt_Ta
DD	-12					
DD	4
DD	$LN10@FT_Sfnt_Ta
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
ENDP
_FT_Load_Sfnt_Table PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN6@FT_Load_Sf
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
jne	SHORT $LN5@FT_Load_Sf
push	OFFSET $SG11440
push	3730					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Load_Sf
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Load_Sf
mov	esi, esp
push	OFFSET $SG11450
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Load_Sf
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN1@FT_Load_Sf
push	OFFSET $SG11453
push	3734					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN8@FT_Load_Sf
mov	esi, esp
mov	eax, DWORD PTR _length$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _offset$[ebp]
push	edx
mov	eax, DWORD PTR _tag$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Sfnt_Table PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _table$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN6@FT_Get_Sfn
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
je	SHORT $LN6@FT_Get_Sfn
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Get_Sfn
mov	esi, esp
push	OFFSET $SG11423
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Get_Sfn
cmp	DWORD PTR _service$[ebp], 0
je	SHORT $LN6@FT_Get_Sfn
mov	esi, esp
mov	eax, DWORD PTR _tag$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _table$[ebp], eax
mov	eax, DWORD PTR _table$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ReadFields PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	BYTE PTR _frame_accessed$[ebp], 0
cmp	DWORD PTR _fields$[ebp], 0
jne	SHORT $LN28@FT_Stream_
push	OFFSET $SG13562
push	732					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN29@FT_Stream_
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN27@FT_Stream_
push	OFFSET $SG13564
push	735					
push	40					
call	_FT_Throw
add	esp, 12					
or	eax, 40					
jmp	$LN29@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _cursor$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _fields$[ebp]
movzx	eax, BYTE PTR [edx]
mov	DWORD PTR tv79[ebp], eax
mov	ecx, DWORD PTR tv79[ebp]
sub	ecx, 4
mov	DWORD PTR tv79[ebp], ecx
cmp	DWORD PTR tv79[ebp], 21			
ja	$LN9@FT_Stream_
mov	edx, DWORD PTR tv79[ebp]
movzx	eax, BYTE PTR $LN31@FT_Stream_[edx]
jmp	DWORD PTR $LN32@FT_Stream_[eax*4]
mov	ecx, DWORD PTR _fields$[ebp]
movzx	edx, WORD PTR [ecx+2]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@FT_Stream_
jmp	$Exit$33
mov	BYTE PTR _frame_accessed$[ebp], 1
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+32]
mov	DWORD PTR _cursor$[ebp], edx
mov	eax, DWORD PTR _fields$[ebp]
add	eax, 4
mov	DWORD PTR _fields$[ebp], eax
jmp	$LN25@FT_Stream_
mov	ecx, DWORD PTR _fields$[ebp]
movzx	edx, BYTE PTR [ecx+1]
mov	DWORD PTR _len$1[ebp], edx
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, DWORD PTR _len$1[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+36]
jbe	SHORT $LN18@FT_Stream_
push	OFFSET $SG13581
push	767					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$33
mov	edx, DWORD PTR _fields$[ebp]
movzx	eax, BYTE PTR [edx]
cmp	eax, 24					
jne	SHORT $LN17@FT_Stream_
mov	ecx, DWORD PTR _fields$[ebp]
movzx	edx, WORD PTR [ecx+2]
add	edx, DWORD PTR _structure$[ebp]
mov	DWORD PTR _p$2[ebp], edx
mov	eax, DWORD PTR _len$1[ebp]
push	eax
mov	ecx, DWORD PTR _cursor$[ebp]
push	ecx
mov	edx, DWORD PTR _p$2[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, DWORD PTR _len$1[ebp]
mov	DWORD PTR _cursor$[ebp], eax
mov	ecx, DWORD PTR _fields$[ebp]
add	ecx, 4
mov	DWORD PTR _fields$[ebp], ecx
jmp	$LN25@FT_Stream_
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx]
mov	DWORD PTR _value$4[ebp], eax
mov	ecx, DWORD PTR _cursor$[ebp]
add	ecx, 1
mov	DWORD PTR _cursor$[ebp], ecx
mov	DWORD PTR _sign_shift$3[ebp], 24	
jmp	$LN22@FT_Stream_
mov	edx, DWORD PTR _cursor$[ebp]
add	edx, 2
mov	DWORD PTR _cursor$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	DWORD PTR _value$4[ebp], edx
mov	DWORD PTR _sign_shift$3[ebp], 16	
jmp	$LN22@FT_Stream_
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, 2
mov	DWORD PTR _cursor$[ebp], eax
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
imul	edx, ecx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+edx-2]
or	eax, edx
movzx	eax, ax
mov	DWORD PTR _value$4[ebp], eax
mov	DWORD PTR _sign_shift$3[ebp], 16	
jmp	$LN22@FT_Stream_
mov	ecx, DWORD PTR _cursor$[ebp]
add	ecx, 4
mov	DWORD PTR _cursor$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+eax-4]
shl	edx, 24					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [ecx+eax-4]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 3
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
or	edx, ecx
mov	DWORD PTR _value$4[ebp], edx
mov	DWORD PTR _sign_shift$3[ebp], 0
jmp	$LN22@FT_Stream_
mov	edx, DWORD PTR _cursor$[ebp]
add	edx, 4
mov	DWORD PTR _cursor$[ebp], edx
mov	eax, 1
imul	ecx, eax, 3
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+ecx-4]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 1
mov	edx, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-4]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
or	eax, edx
mov	DWORD PTR _value$4[ebp], eax
mov	DWORD PTR _sign_shift$3[ebp], 0
jmp	$LN22@FT_Stream_
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, 3
mov	DWORD PTR _cursor$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+edx-3]
shl	ecx, 16					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
shl	edx, 8
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+eax-3]
or	ecx, eax
mov	DWORD PTR _value$4[ebp], ecx
mov	DWORD PTR _sign_shift$3[ebp], 8
jmp	SHORT $LN22@FT_Stream_
mov	ecx, DWORD PTR _cursor$[ebp]
add	ecx, 3
mov	DWORD PTR _cursor$[ebp], ecx
mov	edx, 1
shl	edx, 1
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+edx-3]
shl	ecx, 16					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
shl	edx, 8
or	ecx, edx
mov	eax, 1
imul	edx, eax, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
or	ecx, edx
mov	DWORD PTR _value$4[ebp], ecx
mov	DWORD PTR _sign_shift$3[ebp], 8
jmp	SHORT $LN22@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _cursor$[ebp]
mov	DWORD PTR [eax+32], ecx
jmp	$Exit$33
mov	edx, DWORD PTR _fields$[ebp]
movzx	eax, BYTE PTR [edx]
and	eax, 1
je	SHORT $LN8@FT_Stream_
mov	edx, DWORD PTR _value$4[ebp]
mov	ecx, DWORD PTR _sign_shift$3[ebp]
shl	edx, cl
mov	ecx, DWORD PTR _sign_shift$3[ebp]
sar	edx, cl
mov	DWORD PTR _value$4[ebp], edx
mov	eax, DWORD PTR _fields$[ebp]
movzx	ecx, WORD PTR [eax+2]
add	ecx, DWORD PTR _structure$[ebp]
mov	DWORD PTR _p$2[ebp], ecx
mov	edx, DWORD PTR _fields$[ebp]
mov	al, BYTE PTR [edx+1]
mov	BYTE PTR tv263[ebp], al
cmp	BYTE PTR tv263[ebp], 1
je	SHORT $LN5@FT_Stream_
cmp	BYTE PTR tv263[ebp], 2
je	SHORT $LN4@FT_Stream_
cmp	BYTE PTR tv263[ebp], 4
je	SHORT $LN3@FT_Stream_
jmp	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$2[ebp]
mov	dl, BYTE PTR _value$4[ebp]
mov	BYTE PTR [ecx], dl
jmp	SHORT $LN6@FT_Stream_
mov	eax, DWORD PTR _p$2[ebp]
mov	cx, WORD PTR _value$4[ebp]
mov	WORD PTR [eax], cx
jmp	SHORT $LN6@FT_Stream_
mov	edx, DWORD PTR _p$2[ebp]
mov	eax, DWORD PTR _value$4[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN6@FT_Stream_
mov	ecx, DWORD PTR _p$2[ebp]
mov	edx, DWORD PTR _value$4[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _fields$[ebp]
add	eax, 4
mov	DWORD PTR _fields$[ebp], eax
mov	ecx, 1
test	ecx, ecx
jne	$LN26@FT_Stream_
movzx	edx, BYTE PTR _frame_accessed$[ebp]
test	edx, edx
je	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	$LN21@FT_Stream_
DD	$LN16@FT_Stream_
DD	$LN15@FT_Stream_
DD	$LN14@FT_Stream_
DD	$LN13@FT_Stream_
DD	$LN12@FT_Stream_
DD	$LN11@FT_Stream_
DD	$LN10@FT_Stream_
DD	$LN19@FT_Stream_
DD	$LN9@FT_Stream_
DB	0
DB	9
DB	9
DB	9
DB	1
DB	1
DB	9
DB	9
DB	2
DB	2
DB	3
DB	3
DB	4
DB	4
DB	5
DB	5
DB	6
DB	6
DB	7
DB	7
DB	8
DB	8
ENDP
_FT_Stream_ReadULongLE PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13530
push	683					
push	OFFSET $SG13531
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 3
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+4]
jae	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	4
lea	eax, DWORD PTR _reads$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 4
je	SHORT $LN4@FT_Stream_
jmp	$Fail$16
lea	eax, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _stream$[ebp]
add	edx, DWORD PTR [eax+8]
mov	DWORD PTR _p$[ebp], edx
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 4
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-4]
shl	edx, 24					
mov	eax, 1
shl	eax, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-4]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
shl	ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
or	edx, ecx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 4
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13549
push	712					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13550
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	4
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadUShortLE PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
xor	eax, eax
mov	WORD PTR _result$[ebp], ax
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13437
push	542					
push	OFFSET $SG13438
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@FT_Stream_
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 1
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+4]
jae	$LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	2
lea	ecx, DWORD PTR _reads$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 2
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$16
lea	ecx, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], ecx
jmp	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	DWORD PTR _p$[ebp], eax
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-2]
or	edx, ecx
mov	WORD PTR _result$[ebp], dx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 2
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	ax, WORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13452
push	571					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13453
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	2
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadULong PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13497
push	636					
push	OFFSET $SG13498
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 3
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+4]
jae	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	4
lea	eax, DWORD PTR _reads$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 4
je	SHORT $LN4@FT_Stream_
jmp	$Fail$16
lea	eax, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _stream$[ebp]
add	edx, DWORD PTR [eax+8]
mov	DWORD PTR _p$[ebp], edx
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 4
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-4]
shl	edx, 24					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-4]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 3
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
or	edx, ecx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 4
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13516
push	665					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13517
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	4
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadUOffset PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13466
push	589					
push	OFFSET $SG13467
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 2
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+4]
jae	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	3
lea	eax, DWORD PTR _reads$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 3
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$16
lea	eax, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _stream$[ebp]
add	edx, DWORD PTR [eax+8]
mov	DWORD PTR _p$[ebp], edx
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 3
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-3]
shl	edx, 16					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-3]
shl	eax, 8
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-3]
or	edx, ecx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 3
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13483
push	618					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13484
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	3
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadUShort PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
xor	eax, eax
mov	WORD PTR _result$[ebp], ax
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13408
push	495					
push	OFFSET $SG13409
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@FT_Stream_
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 1
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+4]
jae	$LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	2
lea	ecx, DWORD PTR _reads$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 2
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$16
lea	ecx, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], ecx
jmp	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	DWORD PTR _p$[ebp], eax
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
mov	WORD PTR _result$[ebp], ax
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 2
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	ax, WORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13423
push	524					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13424
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	2
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadChar PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	BYTE PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN8@FT_Stream_
push	OFFSET $SG13386
push	456					
push	OFFSET $SG13387
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	1
lea	eax, DWORD PTR _result$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$15
jmp	SHORT $LN3@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jae	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	cl, BYTE PTR [eax+ecx]
mov	BYTE PTR _result$[ebp], cl
jmp	SHORT $LN3@FT_Stream_
jmp	SHORT $Fail$15
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 1
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	al, BYTE PTR _result$[ebp]
jmp	SHORT $LN10@FT_Stream_
push	OFFSET $SG13394
push	477					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13395
call	_FT_Message
add	esp, 12					
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN13@FT_Stream_
DD	-5					
DD	1
DD	$LN12@FT_Stream_
DB	114					
DB	101					
DB	115					
DB	117					
DB	108					
DB	116					
DB	0
ENDP
_FT_Stream_GetULongLE PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13363
push	438					
push	OFFSET $SG13364
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 3
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+36]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 3
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-4]
shl	ecx, 24					
mov	edx, 1
shl	edx, 1
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-4]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
or	ecx, eax
mov	DWORD PTR _result$[ebp], ecx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetUShortLE PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13300
push	383					
push	OFFSET $SG13301
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
xor	edx, edx
mov	WORD PTR _result$[ebp], dx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	eax, DWORD PTR _stream$[ebp]
cmp	edx, DWORD PTR [eax+36]
jae	SHORT $LN1@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-2]
or	ecx, eax
mov	WORD PTR _result$[ebp], cx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	ax, WORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetULong PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13340
push	420					
push	OFFSET $SG13341
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 3
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+36]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-4]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-4]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
or	ecx, eax
mov	DWORD PTR _result$[ebp], ecx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetUOffset PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13319
push	402					
push	OFFSET $SG13320
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+36]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _p$[ebp]
add	eax, 3
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-3]
shl	ecx, 16					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
shl	edx, 8
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-3]
or	ecx, eax
mov	DWORD PTR _result$[ebp], ecx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetUShort PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13281
push	364					
push	OFFSET $SG13282
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
xor	edx, edx
mov	WORD PTR _result$[ebp], dx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	eax, DWORD PTR _stream$[ebp]
cmp	edx, DWORD PTR [eax+36]
jae	SHORT $LN1@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
mov	WORD PTR _result$[ebp], dx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	ax, WORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetChar PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13268
push	347					
push	OFFSET $SG13269
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	BYTE PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+32]
cmp	ecx, DWORD PTR [eax+36]
jae	SHORT $LN1@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR _result$[ebp], cl
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
add	eax, 1
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+32], eax
mov	al, BYTE PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ReleaseFrame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN4@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN4@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _memory$1[ebp], edx
mov	eax, DWORD PTR _pbytes$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _memory$1[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [eax], 0
xor	ecx, ecx
jne	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [edx], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ExtractFrame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Stream_
mov	edx, DWORD PTR _pbytes$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+36], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ExitFrame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN7@FT_Stream_
push	OFFSET $SG13251
push	323					
push	OFFSET $SG13252
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN8@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN4@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$1[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], 0
xor	edx, edx
jne	SHORT $LN3@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+32], 0
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+36], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_EnterFrame PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN11@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN14@FT_Stream_
push	OFFSET $SG13222
push	242					
push	OFFSET $SG13223
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN15@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	$LN10@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _count$[ebp]
cmp	eax, DWORD PTR [edx+4]
jbe	SHORT $LN9@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
push	OFFSET $SG13227
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13228
push	257					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$21
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_qalloc
add	esp, 12					
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@FT_Stream_
jmp	$Exit$21
mov	esi, esp
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _read_bytes$[ebp], eax
mov	ecx, DWORD PTR _read_bytes$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN7@FT_Stream_
mov	edx, DWORD PTR _read_bytes$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
push	OFFSET $SG13233
call	_FT_Message
add	esp, 12					
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], 0
xor	edx, edx
jne	SHORT $LN6@FT_Stream_
push	OFFSET $SG13238
push	280					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+32], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
add	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+36], ecx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _read_bytes$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+8], ecx
jmp	$Exit$21
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
push	OFFSET $SG13242
call	_FT_Message
add	esp, 16					
push	OFFSET $SG13243
push	296					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$21
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
add	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+36], ecx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN19@FT_Stream_
DD	-8					
DD	4
DD	$LN18@FT_Stream_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Stream_TryRead PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _read_bytes$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jb	SHORT $LN4@FT_Stream_
jmp	SHORT $Exit$7
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN3@FT_Stream_
mov	esi, esp
mov	ecx, DWORD PTR _count$[ebp]
push	ecx
mov	edx, DWORD PTR _buffer$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _read_bytes$[ebp], eax
jmp	SHORT $LN2@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _read_bytes$[ebp], ecx
mov	edx, DWORD PTR _read_bytes$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jbe	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _count$[ebp]
mov	DWORD PTR _read_bytes$[ebp], eax
mov	ecx, DWORD PTR _read_bytes$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
push	eax
mov	edx, DWORD PTR _buffer$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _read_bytes$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _read_bytes$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ReadAt PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _pos$[ebp]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN5@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
push	OFFSET $SG13168
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13169
push	134					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
jmp	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN4@FT_Stream_
mov	esi, esp
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _pos$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _read_bytes$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
sub	ecx, DWORD PTR _pos$[ebp]
mov	DWORD PTR _read_bytes$[ebp], ecx
mov	edx, DWORD PTR _read_bytes$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jbe	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _count$[ebp]
mov	DWORD PTR _read_bytes$[ebp], eax
mov	ecx, DWORD PTR _read_bytes$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, DWORD PTR _pos$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _pos$[ebp]
add	edx, DWORD PTR _read_bytes$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _read_bytes$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN1@FT_Stream_
mov	edx, DWORD PTR _read_bytes$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
push	OFFSET $SG13174
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13175
push	156					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_Read PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadAt
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Stream_Pos PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [eax+8]
pop	ebp
ret	0
ENDP
_FT_Stream_Skip PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _distance$[ebp], 0
jge	SHORT $LN1@FT_Stream_
push	OFFSET $SG13144
push	96					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
jmp	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _distance$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Stream_Seek PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	0
push	0
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN4@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
push	OFFSET $SG13131
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13132
push	71					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _pos$[ebp]
cmp	eax, DWORD PTR [edx+4]
jbe	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _pos$[ebp]
push	eax
push	OFFSET $SG13135
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13136
push	81					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _pos$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_Close PROC
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+24], 0
je	SHORT $LN2@FT_Stream_
mov	esi, esp
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Stream_OpenMemory PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+24], 0
pop	ebp
ret	0
ENDP
_FT_Stream_Free PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Close
add	esp, 4
cmp	DWORD PTR _external$[ebp], 0
jne	SHORT $LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_Stream_
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_New PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _stream$[ebp], 0
mov	eax, DWORD PTR _astream$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN17@FT_Stream_
push	OFFSET $SG9339
push	164					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN18@FT_Stream_
cmp	DWORD PTR _args$[ebp], 0
jne	SHORT $LN16@FT_Stream_
push	OFFSET $SG9341
push	167					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN18@FT_Stream_
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	40					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _stream$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@FT_Stream_
jmp	$Exit$23
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx+28], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 1
je	SHORT $LN14@FT_Stream_
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_OpenMemory
add	esp, 12					
jmp	$LN13@FT_Stream_
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 4
je	SHORT $LN12@FT_Stream_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Open
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+16], eax
jmp	SHORT $LN13@FT_Stream_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 2
je	SHORT $LN10@FT_Stream_
mov	eax, DWORD PTR _args$[ebp]
cmp	DWORD PTR [eax+16], 0
je	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	eax, eax
jne	SHORT $LN9@FT_Stream_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _stream$[ebp], edx
jmp	SHORT $LN13@FT_Stream_
push	OFFSET $SG9356
push	205					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	edx, edx
jne	SHORT $LN4@FT_Stream_
jmp	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax+28], ecx
mov	edx, DWORD PTR _astream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN21@FT_Stream_
DD	-8					
DD	4
DD	$LN20@FT_Stream_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Raccess_Get_DataOffsets PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _offsets_internal$[ebp], 0
mov	DWORD PTR _ref$[ebp], 0
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN51@FT_Raccess
push	OFFSET $SG12562
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN52@FT_Raccess
mov	edx, DWORD PTR _map_offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN48@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	eax, ax
mov	DWORD PTR _cnt$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN47@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
mov	ecx, DWORD PTR _cnt$[ebp]
add	ecx, 1
mov	DWORD PTR _cnt$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN46@FT_Raccess
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _cnt$[ebp]
jge	$LN44@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _tag_internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN42@FT_Raccess
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _subcnt$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN42@FT_Raccess
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _rpos$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN41@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN40@FT_Raccess
mov	edx, DWORD PTR _tag_internal$[ebp]
and	edx, 255				
movsx	eax, dl
push	eax
mov	ecx, DWORD PTR _tag_internal$[ebp]
sar	ecx, 8
and	ecx, 255				
movsx	edx, cl
push	edx
mov	eax, DWORD PTR _tag_internal$[ebp]
sar	eax, 16					
and	eax, 255				
movsx	ecx, al
push	ecx
mov	edx, DWORD PTR _tag_internal$[ebp]
sar	edx, 24					
and	edx, 255				
movsx	eax, dl
push	eax
push	OFFSET $SG12582
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN41@FT_Raccess
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN36@FT_Raccess
mov	ecx, DWORD PTR _rpos$[ebp]
push	ecx
mov	edx, DWORD PTR _subcnt$[ebp]
push	edx
push	OFFSET $SG12587
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN37@FT_Raccess
mov	ecx, DWORD PTR _tag_internal$[ebp]
cmp	ecx, DWORD PTR _tag$[ebp]
jne	$LN33@FT_Raccess
mov	edx, DWORD PTR _subcnt$[ebp]
add	edx, 1
mov	eax, DWORD PTR _count$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _rpos$[ebp]
add	ecx, DWORD PTR _map_offset$[ebp]
mov	DWORD PTR _rpos$[ebp], ecx
mov	edx, DWORD PTR _rpos$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN32@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _count$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _ref$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN30@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _count$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax]
jge	$LN28@FT_Raccess
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _ref$[ebp]
mov	WORD PTR [edx+ecx*8], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@FT_Raccess
jmp	$Exit$58
push	2
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@FT_Raccess
jmp	$Exit$58
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _temp$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN25@FT_Raccess
jmp	$Exit$58
push	4
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@FT_Raccess
jmp	$Exit$58
mov	ecx, DWORD PTR _temp$[ebp]
and	ecx, 16777215				
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
mov	DWORD PTR [eax+edx*8+4], ecx
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN22@FT_Raccess
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _ref$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+4]
push	edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _ref$[ebp]
movzx	edx, WORD PTR [ecx+eax*8]
push	edx
mov	eax, DWORD PTR _j$[ebp]
push	eax
push	OFFSET $SG12609
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN23@FT_Raccess
jmp	$LN29@FT_Raccess
movzx	edx, BYTE PTR _sort_by_res_id$[ebp]
test	edx, edx
je	$LN19@FT_Raccess
mov	esi, esp
push	OFFSET _ft_raccess_sort_ref_by_id
push	8
mov	eax, DWORD PTR _count$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _ref$[ebp]
push	edx
call	DWORD PTR __imp__qsort
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN17@FT_Raccess
push	OFFSET $SG12619
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN18@FT_Raccess
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN14@FT_Raccess
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR [ecx]
jge	SHORT $LN19@FT_Raccess
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN10@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
mov	ecx, DWORD PTR [eax+edx*8+4]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
movzx	ecx, WORD PTR [eax+edx*8]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
push	edx
push	OFFSET $SG12627
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN11@FT_Raccess
jmp	SHORT $LN13@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _count$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _offsets_internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@FT_Raccess
jmp	SHORT $Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN6@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _count$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax]
jge	SHORT $LN4@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
mov	ecx, DWORD PTR _rdata_pos$[ebp]
add	ecx, DWORD PTR [eax+edx*8+4]
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _offsets_internal$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN5@FT_Raccess
mov	ecx, DWORD PTR _offsets$[ebp]
mov	edx, DWORD PTR _offsets_internal$[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _ref$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _ref$[ebp], 0
xor	edx, edx
jne	SHORT $Exit$58
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN53@FT_Raccess
jmp	$LN45@FT_Raccess
push	OFFSET $SG12638
push	254					
push	1
call	_FT_Throw
add	esp, 12					
or	eax, 1
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN57@FT_Raccess
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN56@FT_Raccess
DD	-8					
DD	4
DD	$LN55@FT_Raccess
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Raccess_Get_HeaderInfo PROC
push	ebp
mov	ebp, esp
sub	esp, 88					
push	edi
lea	edi, DWORD PTR [ebp-88]
mov	ecx, 22					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _rfork_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
push	16					
lea	eax, DWORD PTR _head$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
mov	edx, 1
imul	eax, edx, 0
movzx	ecx, BYTE PTR _head$[ebp+eax]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
movzx	eax, BYTE PTR _head$[ebp+edx]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
shl	edx, 1
movzx	eax, BYTE PTR _head$[ebp+edx]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
movzx	edx, BYTE PTR _head$[ebp+eax]
or	ecx, edx
add	ecx, DWORD PTR _rfork_offset$[ebp]
mov	eax, DWORD PTR _rdata_pos$[ebp]
mov	DWORD PTR [eax], ecx
mov	ecx, 1
shl	ecx, 2
movzx	edx, BYTE PTR _head$[ebp+ecx]
shl	edx, 24					
mov	eax, 1
imul	ecx, eax, 5
movzx	eax, BYTE PTR _head$[ebp+ecx]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
imul	eax, ecx, 6
movzx	ecx, BYTE PTR _head$[ebp+eax]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 7
movzx	eax, BYTE PTR _head$[ebp+ecx]
or	edx, eax
add	edx, DWORD PTR _rfork_offset$[ebp]
mov	DWORD PTR _map_pos$[ebp], edx
mov	ecx, 1
shl	ecx, 3
movzx	edx, BYTE PTR _head$[ebp+ecx]
shl	edx, 24					
mov	eax, 1
imul	ecx, eax, 9
movzx	eax, BYTE PTR _head$[ebp+ecx]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
imul	eax, ecx, 10
movzx	ecx, BYTE PTR _head$[ebp+eax]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 11
movzx	eax, BYTE PTR _head$[ebp+ecx]
or	edx, eax
mov	DWORD PTR _rdata_len$[ebp], edx
mov	ecx, DWORD PTR _rdata_pos$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, DWORD PTR _rdata_len$[ebp]
cmp	edx, DWORD PTR _map_pos$[ebp]
jne	SHORT $LN12@FT_Raccess
mov	eax, DWORD PTR _map_pos$[ebp]
cmp	eax, DWORD PTR _rfork_offset$[ebp]
jne	SHORT $LN13@FT_Raccess
push	OFFSET $SG12499
push	90					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@FT_Raccess
mov	ecx, DWORD PTR _map_pos$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
mov	eax, 1
imul	ecx, eax, 15
movzx	edx, BYTE PTR _head$[ebp+ecx]
add	edx, 1
mov	eax, 1
imul	ecx, eax, 15
mov	BYTE PTR _head2$[ebp+ecx], dl
push	16					
lea	edx, DWORD PTR _head2$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
mov	DWORD PTR _allzeros$[ebp], 1
mov	DWORD PTR _allmatch$[ebp], 1
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN9@FT_Raccess
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _i$[ebp], 16			
jge	SHORT $LN7@FT_Raccess
mov	edx, DWORD PTR _i$[ebp]
movzx	eax, BYTE PTR _head2$[ebp+edx]
test	eax, eax
je	SHORT $LN6@FT_Raccess
mov	DWORD PTR _allzeros$[ebp], 0
mov	ecx, DWORD PTR _i$[ebp]
movzx	edx, BYTE PTR _head2$[ebp+ecx]
mov	eax, DWORD PTR _i$[ebp]
movzx	ecx, BYTE PTR _head$[ebp+eax]
cmp	edx, ecx
je	SHORT $LN5@FT_Raccess
mov	DWORD PTR _allmatch$[ebp], 0
jmp	SHORT $LN8@FT_Raccess
cmp	DWORD PTR _allzeros$[ebp], 0
jne	SHORT $LN4@FT_Raccess
cmp	DWORD PTR _allmatch$[ebp], 0
jne	SHORT $LN4@FT_Raccess
push	OFFSET $SG12510
push	112					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	SHORT $LN16@FT_Raccess
push	8
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _type_list$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN16@FT_Raccess
cmp	DWORD PTR _type_list$[ebp], -1
jne	SHORT $LN2@FT_Raccess
push	OFFSET $SG12516
push	125					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	SHORT $LN16@FT_Raccess
mov	eax, DWORD PTR _map_pos$[ebp]
add	eax, DWORD PTR _type_list$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN16@FT_Raccess
mov	edx, DWORD PTR _map_pos$[ebp]
add	edx, DWORD PTR _type_list$[ebp]
mov	eax, DWORD PTR _map_offset$[ebp]
mov	DWORD PTR [eax], edx
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@FT_Raccess
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 88					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	3
DD	$LN21@FT_Raccess
DD	-12					
DD	4
DD	$LN18@FT_Raccess
DD	-36					
DD	16					
DD	$LN19@FT_Raccess
DD	-60					
DD	16					
DD	$LN20@FT_Raccess
DB	104					
DB	101					
DB	97					
DB	100					
DB	50					
DB	0
DB	104					
DB	101					
DB	97					
DB	100					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Raccess_Guess PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN6@FT_Raccess
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _i$[ebp], 9
jge	$LN7@FT_Raccess
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _new_names$[ebp]
mov	DWORD PTR [edx+ecx*4], 0
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN3@FT_Raccess
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _errors$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN2@FT_Raccess
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _errors$[ebp]
mov	DWORD PTR [ecx+eax*4], 0
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _errors$[ebp]
cmp	DWORD PTR [eax+edx*4], 0
je	SHORT $LN1@FT_Raccess
jmp	SHORT $LN5@FT_Raccess
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _offsets$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _new_names$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _base_name$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _ft_raccess_guess_table[ecx*8]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _errors$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	$LN5@FT_Raccess
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_validator_error PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _valid$[ebp]
mov	DWORD PTR _jump_buffer$[ebp], eax
mov	ecx, DWORD PTR _valid$[ebp]
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx+76], edx
mov	esi, esp
push	1
mov	eax, DWORD PTR _jump_buffer$[ebp]
push	eax
call	DWORD PTR __imp__longjmp
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_validator_run PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _valid$[ebp]
mov	DWORD PTR _valid$[ebp], eax
or	eax, -1
pop	ebp
ret	0
ENDP
_ft_validator_init PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _valid$[ebp]
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax+64], ecx
mov	edx, DWORD PTR _valid$[ebp]
mov	eax, DWORD PTR _limit$[ebp]
mov	DWORD PTR [edx+68], eax
mov	ecx, DWORD PTR _valid$[ebp]
mov	edx, DWORD PTR _level$[ebp]
mov	DWORD PTR [ecx+72], edx
mov	eax, DWORD PTR _valid$[ebp]
mov	DWORD PTR [eax+76], 0
pop	ebp
ret	0
ENDP
_FT_Outline_Get_Orientation PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _area$[ebp], 0
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN13@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
test	ecx, ecx
jg	SHORT $LN14@FT_Outline
xor	eax, eax
jmp	$LN15@FT_Outline
lea	edx, DWORD PTR _cbox$[ebp]
push	edx
mov	eax, DWORD PTR _outline$[ebp]
push	eax
call	_FT_Outline_Get_CBox
add	esp, 8
mov	ecx, DWORD PTR _cbox$[ebp]
cmp	ecx, DWORD PTR _cbox$[ebp+8]
je	SHORT $LN11@FT_Outline
mov	edx, DWORD PTR _cbox$[ebp+4]
cmp	edx, DWORD PTR _cbox$[ebp+12]
jne	SHORT $LN12@FT_Outline
mov	eax, 2
jmp	$LN15@FT_Outline
cmp	DWORD PTR _cbox$[ebp+8], 0
jge	SHORT $LN17@FT_Outline
mov	eax, DWORD PTR _cbox$[ebp+8]
neg	eax
mov	DWORD PTR tv75[ebp], eax
jmp	SHORT $LN18@FT_Outline
mov	ecx, DWORD PTR _cbox$[ebp+8]
mov	DWORD PTR tv75[ebp], ecx
cmp	DWORD PTR _cbox$[ebp], 0
jge	SHORT $LN19@FT_Outline
mov	edx, DWORD PTR _cbox$[ebp]
neg	edx
mov	DWORD PTR tv78[ebp], edx
jmp	SHORT $LN20@FT_Outline
mov	eax, DWORD PTR _cbox$[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR tv75[ebp]
or	ecx, DWORD PTR tv78[ebp]
push	ecx
call	_FT_MSB
add	esp, 4
sub	eax, 14					
mov	DWORD PTR _xshift$[ebp], eax
cmp	DWORD PTR _xshift$[ebp], 0
jle	SHORT $LN21@FT_Outline
mov	edx, DWORD PTR _xshift$[ebp]
mov	DWORD PTR tv83[ebp], edx
jmp	SHORT $LN22@FT_Outline
mov	DWORD PTR tv83[ebp], 0
mov	eax, DWORD PTR tv83[ebp]
mov	DWORD PTR _xshift$[ebp], eax
mov	ecx, DWORD PTR _cbox$[ebp+12]
sub	ecx, DWORD PTR _cbox$[ebp+4]
push	ecx
call	_FT_MSB
add	esp, 4
sub	eax, 14					
mov	DWORD PTR _yshift$[ebp], eax
cmp	DWORD PTR _yshift$[ebp], 0
jle	SHORT $LN23@FT_Outline
mov	edx, DWORD PTR _yshift$[ebp]
mov	DWORD PTR tv89[ebp], edx
jmp	SHORT $LN24@FT_Outline
mov	DWORD PTR tv89[ebp], 0
mov	eax, DWORD PTR tv89[ebp]
mov	DWORD PTR _yshift$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _points$[ebp], edx
mov	DWORD PTR _first$[ebp], 0
mov	DWORD PTR _c$[ebp], 0
jmp	SHORT $LN10@FT_Outline
mov	eax, DWORD PTR _c$[ebp]
add	eax, 1
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
cmp	DWORD PTR _c$[ebp], edx
jge	$LN8@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR _c$[ebp]
movsx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _last$1[ebp], eax
mov	ecx, DWORD PTR _last$1[ebp]
mov	edx, DWORD PTR _points$[ebp]
mov	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR [edx+ecx*8+4]
mov	DWORD PTR _v_prev$[ebp], eax
mov	DWORD PTR _v_prev$[ebp+4], ecx
mov	edx, DWORD PTR _first$[ebp]
mov	DWORD PTR _n$[ebp], edx
jmp	SHORT $LN7@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR _last$1[ebp]
jg	SHORT $LN5@FT_Outline
mov	edx, DWORD PTR _n$[ebp]
mov	eax, DWORD PTR _points$[ebp]
mov	ecx, DWORD PTR [eax+edx*8]
mov	edx, DWORD PTR [eax+edx*8+4]
mov	DWORD PTR _v_cur$[ebp], ecx
mov	DWORD PTR _v_cur$[ebp+4], edx
mov	eax, DWORD PTR _v_cur$[ebp+4]
sub	eax, DWORD PTR _v_prev$[ebp+4]
mov	ecx, DWORD PTR _yshift$[ebp]
sar	eax, cl
mov	edx, DWORD PTR _v_cur$[ebp]
add	edx, DWORD PTR _v_prev$[ebp]
mov	ecx, DWORD PTR _xshift$[ebp]
sar	edx, cl
imul	eax, edx
add	eax, DWORD PTR _area$[ebp]
mov	DWORD PTR _area$[ebp], eax
mov	eax, DWORD PTR _v_cur$[ebp]
mov	DWORD PTR _v_prev$[ebp], eax
mov	ecx, DWORD PTR _v_cur$[ebp+4]
mov	DWORD PTR _v_prev$[ebp+4], ecx
jmp	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _last$1[ebp]
add	edx, 1
mov	DWORD PTR _first$[ebp], edx
jmp	$LN9@FT_Outline
cmp	DWORD PTR _area$[ebp], 0
jle	SHORT $LN4@FT_Outline
mov	eax, 1
jmp	SHORT $LN15@FT_Outline
jmp	SHORT $LN15@FT_Outline
cmp	DWORD PTR _area$[ebp], 0
jge	SHORT $LN2@FT_Outline
xor	eax, eax
jmp	SHORT $LN15@FT_Outline
jmp	SHORT $LN15@FT_Outline
mov	eax, 2
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN29@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	3
DD	$LN28@FT_Outline
DD	-24					
DD	16					
DD	$LN25@FT_Outline
DD	-52					
DD	8
DD	$LN26@FT_Outline
DD	-68					
DD	8
DD	$LN27@FT_Outline
DB	118					
DB	95					
DB	99					
DB	117					
DB	114					
DB	0
DB	118					
DB	95					
DB	112					
DB	114					
DB	101					
DB	118					
DB	0
DB	99					
DB	98					
DB	111					
DB	120					
DB	0
ENDP
_FT_Outline_Render PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	BYTE PTR _update$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN8@FT_Outline
push	OFFSET $SG12344
push	621					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN9@FT_Outline
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN7@FT_Outline
push	OFFSET $SG12346
push	624					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN9@FT_Outline
cmp	DWORD PTR _params$[ebp], 0
jne	SHORT $LN6@FT_Outline
push	OFFSET $SG12348
push	627					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN9@FT_Outline
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR _renderer$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+148]
mov	DWORD PTR _node$[ebp], eax
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	DWORD PTR _error$[ebp], 19		
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN4@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _renderer$[ebp]
mov	edx, DWORD PTR [ecx+52]
push	edx
mov	eax, DWORD PTR _renderer$[ebp]
mov	ecx, DWORD PTR [eax+56]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_Outline
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 19					
je	SHORT $LN3@FT_Outline
jmp	SHORT $LN4@FT_Outline
lea	eax, DWORD PTR _node$[ebp]
push	eax
push	1869968492				
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	BYTE PTR _update$[ebp], 1
jmp	SHORT $LN5@FT_Outline
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Outline
movzx	edx, BYTE PTR _update$[ebp]
test	edx, edx
je	SHORT $LN1@FT_Outline
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN1@FT_Outline
push	0
push	0
mov	eax, DWORD PTR _renderer$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Set_Renderer
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN12@FT_Outline
DD	-20					
DD	4
DD	$LN11@FT_Outline
DB	110					
DB	111					
DB	100					
DB	101					
DB	0
ENDP
_FT_Outline_Get_Bitmap PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _abitmap$[ebp], 0
jne	SHORT $LN3@FT_Outline
push	OFFSET $SG12365
push	672					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN4@FT_Outline
mov	eax, DWORD PTR _abitmap$[ebp]
mov	DWORD PTR _params$[ebp], eax
mov	DWORD PTR _params$[ebp+8], 0
mov	ecx, DWORD PTR _abitmap$[ebp]
movzx	edx, BYTE PTR [ecx+18]
cmp	edx, 2
je	SHORT $LN1@FT_Outline
mov	eax, DWORD PTR _abitmap$[ebp]
movzx	ecx, BYTE PTR [eax+18]
cmp	ecx, 5
je	SHORT $LN1@FT_Outline
mov	edx, DWORD PTR _abitmap$[ebp]
movzx	eax, BYTE PTR [edx+18]
cmp	eax, 6
jne	SHORT $LN2@FT_Outline
mov	ecx, DWORD PTR _params$[ebp+8]
or	ecx, 1
mov	DWORD PTR _params$[ebp+8], ecx
lea	edx, DWORD PTR _params$[ebp]
push	edx
mov	eax, DWORD PTR _outline$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Outline_Render
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN7@FT_Outline
DD	-56					
DD	48					
DD	$LN6@FT_Outline
DB	112					
DB	97					
DB	114					
DB	97					
DB	109					
DB	115					
DB	0
ENDP
_FT_Outline_Reverse PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN8@FT_Outline
jmp	$LN9@FT_Outline
mov	DWORD PTR _first$[ebp], 0
xor	eax, eax
mov	WORD PTR _n$[ebp], ax
jmp	SHORT $LN7@FT_Outline
mov	cx, WORD PTR _n$[ebp]
add	cx, 1
mov	WORD PTR _n$[ebp], cx
movzx	edx, WORD PTR _n$[ebp]
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax]
cmp	edx, ecx
jge	$LN5@FT_Outline
movzx	edx, WORD PTR _n$[ebp]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+edx*2]
mov	DWORD PTR _last$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _p$6[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _last$[ebp]
lea	ecx, DWORD PTR [edx+eax*8]
mov	DWORD PTR _q$5[ebp], ecx
mov	edx, DWORD PTR _p$6[ebp]
cmp	edx, DWORD PTR _q$5[ebp]
jae	SHORT $LN3@FT_Outline
mov	eax, DWORD PTR _p$6[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _swap$4[ebp], ecx
mov	DWORD PTR _swap$4[ebp+4], edx
mov	eax, DWORD PTR _q$5[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _p$6[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _q$5[ebp]
mov	edx, DWORD PTR _swap$4[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _swap$4[ebp+4]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _p$6[ebp]
add	ecx, 8
mov	DWORD PTR _p$6[ebp], ecx
mov	edx, DWORD PTR _q$5[ebp]
sub	edx, 8
mov	DWORD PTR _q$5[ebp], edx
jmp	SHORT $LN4@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _first$[ebp]
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, DWORD PTR _last$[ebp]
mov	DWORD PTR _q$2[ebp], eax
mov	ecx, DWORD PTR _p$3[ebp]
cmp	ecx, DWORD PTR _q$2[ebp]
jae	SHORT $LN1@FT_Outline
mov	edx, DWORD PTR _p$3[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR _swap$1[ebp], al
mov	ecx, DWORD PTR _p$3[ebp]
mov	edx, DWORD PTR _q$2[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR [ecx], al
mov	ecx, DWORD PTR _q$2[ebp]
mov	dl, BYTE PTR _swap$1[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _p$3[ebp]
add	eax, 1
mov	DWORD PTR _p$3[ebp], eax
mov	ecx, DWORD PTR _q$2[ebp]
sub	ecx, 1
mov	DWORD PTR _q$2[ebp], ecx
jmp	SHORT $LN2@FT_Outline
mov	edx, DWORD PTR _last$[ebp]
add	edx, 1
mov	DWORD PTR _first$[ebp], edx
jmp	$LN6@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+16]
xor	ecx, 4
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [edx+16], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN12@FT_Outline
DD	-32					
DD	8
DD	$LN11@FT_Outline
DB	115					
DB	119					
DB	97					
DB	112					
DB	0
ENDP
_FT_Outline_EmboldenXY PROC
push	ebp
mov	ebp, esp
sub	esp, 160				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-160]
mov	ecx, 40					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN24@FT_Outline
push	OFFSET $SG12411
push	923					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN25@FT_Outline
mov	eax, DWORD PTR _xstrength$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _xstrength$[ebp], eax
mov	eax, DWORD PTR _ystrength$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _ystrength$[ebp], eax
cmp	DWORD PTR _xstrength$[ebp], 0
jne	SHORT $LN23@FT_Outline
cmp	DWORD PTR _ystrength$[ebp], 0
jne	SHORT $LN23@FT_Outline
xor	eax, eax
jmp	$LN25@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
push	eax
call	_FT_Outline_Get_Orientation
add	esp, 4
mov	DWORD PTR _orientation$[ebp], eax
cmp	DWORD PTR _orientation$[ebp], 2
jne	SHORT $LN22@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
test	edx, edx
je	SHORT $LN21@FT_Outline
push	OFFSET $SG12415
push	934					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN25@FT_Outline
jmp	SHORT $LN22@FT_Outline
xor	eax, eax
jmp	$LN25@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _points$[ebp], ecx
mov	DWORD PTR _first$[ebp], 0
mov	DWORD PTR _c$[ebp], 0
jmp	SHORT $LN19@FT_Outline
mov	edx, DWORD PTR _c$[ebp]
add	edx, 1
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax]
cmp	DWORD PTR _c$[ebp], ecx
jge	$LN17@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR _c$[ebp]
movsx	edx, WORD PTR [eax+ecx*2]
mov	DWORD PTR _last$1[ebp], edx
mov	eax, DWORD PTR _first$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	edx, DWORD PTR [ecx+eax*8]
mov	eax, DWORD PTR [ecx+eax*8+4]
mov	DWORD PTR _v_first$[ebp], edx
mov	DWORD PTR _v_first$[ebp+4], eax
mov	ecx, DWORD PTR _last$1[ebp]
mov	edx, DWORD PTR _points$[ebp]
mov	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR [edx+ecx*8+4]
mov	DWORD PTR _v_prev$[ebp], eax
mov	DWORD PTR _v_prev$[ebp+4], ecx
mov	edx, DWORD PTR _v_first$[ebp]
mov	DWORD PTR _v_cur$[ebp], edx
mov	eax, DWORD PTR _v_first$[ebp+4]
mov	DWORD PTR _v_cur$[ebp+4], eax
mov	ecx, DWORD PTR _v_cur$[ebp]
sub	ecx, DWORD PTR _v_prev$[ebp]
mov	DWORD PTR _in$9[ebp], ecx
mov	edx, DWORD PTR _v_cur$[ebp+4]
sub	edx, DWORD PTR _v_prev$[ebp+4]
mov	DWORD PTR _in$9[ebp+4], edx
lea	eax, DWORD PTR _in$9[ebp]
push	eax
call	_FT_Vector_Length
add	esp, 4
mov	DWORD PTR _l_in$6[ebp], eax
cmp	DWORD PTR _l_in$6[ebp], 0
je	SHORT $LN16@FT_Outline
mov	ecx, DWORD PTR _l_in$6[ebp]
push	ecx
mov	edx, DWORD PTR _in$9[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _in$9[ebp], eax
mov	eax, DWORD PTR _l_in$6[ebp]
push	eax
mov	ecx, DWORD PTR _in$9[ebp+4]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _in$9[ebp+4], eax
mov	edx, DWORD PTR _first$[ebp]
mov	DWORD PTR _n$[ebp], edx
jmp	SHORT $LN15@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR _last$1[ebp]
jg	$LN13@FT_Outline
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _last$1[ebp]
jge	SHORT $LN12@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+8]
mov	eax, DWORD PTR [ecx+eax*8+12]
mov	DWORD PTR _v_next$[ebp], edx
mov	DWORD PTR _v_next$[ebp+4], eax
jmp	SHORT $LN11@FT_Outline
mov	ecx, DWORD PTR _v_first$[ebp]
mov	DWORD PTR _v_next$[ebp], ecx
mov	edx, DWORD PTR _v_first$[ebp+4]
mov	DWORD PTR _v_next$[ebp+4], edx
mov	eax, DWORD PTR _v_next$[ebp]
sub	eax, DWORD PTR _v_cur$[ebp]
mov	DWORD PTR _out$8[ebp], eax
mov	ecx, DWORD PTR _v_next$[ebp+4]
sub	ecx, DWORD PTR _v_cur$[ebp+4]
mov	DWORD PTR _out$8[ebp+4], ecx
lea	edx, DWORD PTR _out$8[ebp]
push	edx
call	_FT_Vector_Length
add	esp, 4
mov	DWORD PTR _l_out$5[ebp], eax
cmp	DWORD PTR _l_out$5[ebp], 0
je	SHORT $LN10@FT_Outline
mov	eax, DWORD PTR _l_out$5[ebp]
push	eax
mov	ecx, DWORD PTR _out$8[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _out$8[ebp], eax
mov	edx, DWORD PTR _l_out$5[ebp]
push	edx
mov	eax, DWORD PTR _out$8[ebp+4]
push	eax
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _out$8[ebp+4], eax
mov	ecx, DWORD PTR _out$8[ebp]
push	ecx
mov	edx, DWORD PTR _in$9[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _out$8[ebp+4]
push	eax
mov	ecx, DWORD PTR _in$9[ebp+4]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _d$2[ebp], esi
cmp	DWORD PTR _d$2[ebp], -61440		
jle	$LN9@FT_Outline
mov	edx, DWORD PTR _d$2[ebp]
add	edx, 65536				
mov	DWORD PTR _d$2[ebp], edx
mov	eax, DWORD PTR _in$9[ebp+4]
add	eax, DWORD PTR _out$8[ebp+4]
mov	DWORD PTR _shift$7[ebp], eax
mov	ecx, DWORD PTR _in$9[ebp]
add	ecx, DWORD PTR _out$8[ebp]
mov	DWORD PTR _shift$7[ebp+4], ecx
cmp	DWORD PTR _orientation$[ebp], 0
jne	SHORT $LN8@FT_Outline
mov	edx, DWORD PTR _shift$7[ebp]
neg	edx
mov	DWORD PTR _shift$7[ebp], edx
jmp	SHORT $LN7@FT_Outline
mov	eax, DWORD PTR _shift$7[ebp+4]
neg	eax
mov	DWORD PTR _shift$7[ebp+4], eax
mov	ecx, DWORD PTR _in$9[ebp+4]
push	ecx
mov	edx, DWORD PTR _out$8[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _in$9[ebp]
push	eax
mov	ecx, DWORD PTR _out$8[ebp+4]
push	ecx
call	_FT_MulFix
add	esp, 8
sub	esi, eax
mov	DWORD PTR _q$3[ebp], esi
cmp	DWORD PTR _orientation$[ebp], 0
jne	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _q$3[ebp]
neg	edx
mov	DWORD PTR _q$3[ebp], edx
mov	eax, DWORD PTR _l_in$6[ebp]
cmp	eax, DWORD PTR _l_out$5[ebp]
jge	SHORT $LN27@FT_Outline
mov	ecx, DWORD PTR _l_in$6[ebp]
mov	DWORD PTR tv217[ebp], ecx
jmp	SHORT $LN28@FT_Outline
mov	edx, DWORD PTR _l_out$5[ebp]
mov	DWORD PTR tv217[ebp], edx
mov	eax, DWORD PTR tv217[ebp]
mov	DWORD PTR _l$4[ebp], eax
mov	ecx, DWORD PTR _q$3[ebp]
push	ecx
mov	edx, DWORD PTR _xstrength$[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _l$4[ebp]
push	eax
mov	ecx, DWORD PTR _d$2[ebp]
push	ecx
call	_FT_MulFix
add	esp, 8
cmp	esi, eax
jg	SHORT $LN5@FT_Outline
mov	edx, DWORD PTR _d$2[ebp]
push	edx
mov	eax, DWORD PTR _xstrength$[ebp]
push	eax
mov	ecx, DWORD PTR _shift$7[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp], eax
jmp	SHORT $LN4@FT_Outline
mov	edx, DWORD PTR _q$3[ebp]
push	edx
mov	eax, DWORD PTR _l$4[ebp]
push	eax
mov	ecx, DWORD PTR _shift$7[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp], eax
mov	edx, DWORD PTR _q$3[ebp]
push	edx
mov	eax, DWORD PTR _ystrength$[ebp]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _l$4[ebp]
push	ecx
mov	edx, DWORD PTR _d$2[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
cmp	esi, eax
jg	SHORT $LN3@FT_Outline
mov	eax, DWORD PTR _d$2[ebp]
push	eax
mov	ecx, DWORD PTR _ystrength$[ebp]
push	ecx
mov	edx, DWORD PTR _shift$7[ebp+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp+4], eax
jmp	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _q$3[ebp]
push	eax
mov	ecx, DWORD PTR _l$4[ebp]
push	ecx
mov	edx, DWORD PTR _shift$7[ebp+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp+4], eax
jmp	SHORT $LN1@FT_Outline
mov	DWORD PTR _shift$7[ebp+4], 0
mov	eax, DWORD PTR _shift$7[ebp+4]
mov	DWORD PTR _shift$7[ebp], eax
mov	ecx, DWORD PTR _v_cur$[ebp]
add	ecx, DWORD PTR _xstrength$[ebp]
add	ecx, DWORD PTR _shift$7[ebp]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _n$[ebp]
mov	DWORD PTR [eax+edx*8], ecx
mov	eax, DWORD PTR _v_cur$[ebp+4]
add	eax, DWORD PTR _ystrength$[ebp]
add	eax, DWORD PTR _shift$7[ebp+4]
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _n$[ebp]
mov	DWORD PTR [edx+ecx*8+4], eax
mov	edx, DWORD PTR _out$8[ebp]
mov	DWORD PTR _in$9[ebp], edx
mov	eax, DWORD PTR _out$8[ebp+4]
mov	DWORD PTR _in$9[ebp+4], eax
mov	ecx, DWORD PTR _l_out$5[ebp]
mov	DWORD PTR _l_in$6[ebp], ecx
mov	edx, DWORD PTR _v_next$[ebp]
mov	DWORD PTR _v_cur$[ebp], edx
mov	eax, DWORD PTR _v_next$[ebp+4]
mov	DWORD PTR _v_cur$[ebp+4], eax
jmp	$LN14@FT_Outline
mov	ecx, DWORD PTR _last$1[ebp]
add	ecx, 1
mov	DWORD PTR _first$[ebp], ecx
jmp	$LN18@FT_Outline
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN37@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 160				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	7
DD	$LN36@FT_Outline
DD	-16					
DD	8
DD	$LN29@FT_Outline
DD	-32					
DD	8
DD	$LN30@FT_Outline
DD	-48					
DD	8
DD	$LN31@FT_Outline
DD	-64					
DD	8
DD	$LN32@FT_Outline
DD	-96					
DD	8
DD	$LN33@FT_Outline
DD	-112					
DD	8
DD	$LN34@FT_Outline
DD	-128					
DD	8
DD	$LN35@FT_Outline
DB	115					
DB	104					
DB	105					
DB	102					
DB	116					
DB	0
DB	111					
DB	117					
DB	116					
DB	0
DB	105					
DB	110					
DB	0
DB	118					
DB	95					
DB	99					
DB	117					
DB	114					
DB	0
DB	118					
DB	95					
DB	110					
DB	101					
DB	120					
DB	116					
DB	0
DB	118					
DB	95					
DB	102					
DB	105					
DB	114					
DB	115					
DB	116					
DB	0
DB	118					
DB	95					
DB	112					
DB	114					
DB	101					
DB	118					
DB	0
ENDP
_FT_Outline_Embolden PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _strength$[ebp]
push	eax
mov	ecx, DWORD PTR _strength$[ebp]
push	ecx
mov	edx, DWORD PTR _outline$[ebp]
push	edx
call	_FT_Outline_EmboldenXY
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_Transform PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN4@FT_Outline
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN5@FT_Outline
jmp	SHORT $LN6@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _vec$[ebp]
lea	edx, DWORD PTR [ecx+eax*8]
mov	DWORD PTR _limit$[ebp], edx
jmp	SHORT $LN3@FT_Outline
mov	eax, DWORD PTR _vec$[ebp]
add	eax, 8
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _vec$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jae	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _matrix$[ebp]
push	edx
mov	eax, DWORD PTR _vec$[ebp]
push	eax
call	_FT_Vector_Transform
add	esp, 8
jmp	SHORT $LN2@FT_Outline
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Copy PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _source$[ebp], 0
je	SHORT $LN4@FT_Outline
cmp	DWORD PTR _target$[ebp], 0
jne	SHORT $LN5@FT_Outline
push	OFFSET $SG12240
push	408					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN6@FT_Outline
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _target$[ebp]
movsx	eax, WORD PTR [edx+2]
cmp	ecx, eax
jne	SHORT $LN2@FT_Outline
mov	ecx, DWORD PTR _source$[ebp]
movsx	edx, WORD PTR [ecx]
mov	eax, DWORD PTR _target$[ebp]
movsx	ecx, WORD PTR [eax]
cmp	edx, ecx
je	SHORT $LN3@FT_Outline
push	OFFSET $SG12243
push	412					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN6@FT_Outline
mov	edx, DWORD PTR _source$[ebp]
cmp	edx, DWORD PTR _target$[ebp]
jne	SHORT $LN1@FT_Outline
xor	eax, eax
jmp	$LN6@FT_Outline
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+2]
shl	ecx, 3
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+2]
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax]
shl	ecx, 1
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _target$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
mov	DWORD PTR _is_owner$[ebp], ecx
mov	edx, DWORD PTR _target$[ebp]
mov	eax, DWORD PTR _source$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _target$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, -2					
mov	ecx, DWORD PTR _target$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _target$[ebp]
mov	eax, DWORD PTR [edx+16]
or	eax, DWORD PTR _is_owner$[ebp]
mov	ecx, DWORD PTR _target$[ebp]
mov	DWORD PTR [ecx+16], eax
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Translate PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN4@FT_Outline
jmp	SHORT $LN5@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$[ebp], ecx
xor	edx, edx
mov	WORD PTR _n$[ebp], dx
jmp	SHORT $LN3@FT_Outline
mov	ax, WORD PTR _n$[ebp]
add	ax, 1
mov	WORD PTR _n$[ebp], ax
movzx	ecx, WORD PTR _n$[ebp]
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
cmp	ecx, eax
jge	SHORT $LN5@FT_Outline
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, DWORD PTR _xOffset$[ebp]
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx+4]
add	edx, DWORD PTR _yOffset$[ebp]
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _vec$[ebp]
add	ecx, 8
mov	DWORD PTR _vec$[ebp], ecx
jmp	SHORT $LN2@FT_Outline
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Get_CBox PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _outline$[ebp], 0
je	$LN11@FT_Outline
cmp	DWORD PTR _acbox$[ebp], 0
je	$LN11@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
test	ecx, ecx
jne	SHORT $LN9@FT_Outline
mov	DWORD PTR _xMin$[ebp], 0
mov	DWORD PTR _yMin$[ebp], 0
mov	DWORD PTR _xMax$[ebp], 0
mov	DWORD PTR _yMax$[ebp], 0
jmp	$LN8@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _vec$4[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _vec$4[ebp]
lea	ecx, DWORD PTR [eax+edx*8]
mov	DWORD PTR _limit$3[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _xMax$[ebp], eax
mov	ecx, DWORD PTR _xMax$[ebp]
mov	DWORD PTR _xMin$[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _yMax$[ebp], eax
mov	ecx, DWORD PTR _yMax$[ebp]
mov	DWORD PTR _yMin$[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
add	edx, 8
mov	DWORD PTR _vec$4[ebp], edx
jmp	SHORT $LN7@FT_Outline
mov	eax, DWORD PTR _vec$4[ebp]
add	eax, 8
mov	DWORD PTR _vec$4[ebp], eax
mov	ecx, DWORD PTR _vec$4[ebp]
cmp	ecx, DWORD PTR _limit$3[ebp]
jae	SHORT $LN8@FT_Outline
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _x$2[ebp], eax
mov	ecx, DWORD PTR _x$2[ebp]
cmp	ecx, DWORD PTR _xMin$[ebp]
jge	SHORT $LN4@FT_Outline
mov	edx, DWORD PTR _x$2[ebp]
mov	DWORD PTR _xMin$[ebp], edx
mov	eax, DWORD PTR _x$2[ebp]
cmp	eax, DWORD PTR _xMax$[ebp]
jle	SHORT $LN3@FT_Outline
mov	ecx, DWORD PTR _x$2[ebp]
mov	DWORD PTR _xMax$[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$1[ebp], eax
mov	ecx, DWORD PTR _y$1[ebp]
cmp	ecx, DWORD PTR _yMin$[ebp]
jge	SHORT $LN2@FT_Outline
mov	edx, DWORD PTR _y$1[ebp]
mov	DWORD PTR _yMin$[ebp], edx
mov	eax, DWORD PTR _y$1[ebp]
cmp	eax, DWORD PTR _yMax$[ebp]
jle	SHORT $LN1@FT_Outline
mov	ecx, DWORD PTR _y$1[ebp]
mov	DWORD PTR _yMax$[ebp], ecx
jmp	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _acbox$[ebp]
mov	eax, DWORD PTR _xMin$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _acbox$[ebp]
mov	edx, DWORD PTR _xMax$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _acbox$[ebp]
mov	ecx, DWORD PTR _yMin$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _acbox$[ebp]
mov	eax, DWORD PTR _yMax$[ebp]
mov	DWORD PTR [edx+12], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Check PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _outline$[ebp], 0
je	$Bad$13
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	DWORD PTR _n_points$5[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
mov	DWORD PTR _n_contours$4[ebp], eax
cmp	DWORD PTR _n_points$5[ebp], 0
jne	SHORT $LN9@FT_Outline
cmp	DWORD PTR _n_contours$4[ebp], 0
jne	SHORT $LN9@FT_Outline
xor	eax, eax
jmp	$LN11@FT_Outline
cmp	DWORD PTR _n_points$5[ebp], 0
jle	SHORT $LN7@FT_Outline
cmp	DWORD PTR _n_contours$4[ebp], 0
jg	SHORT $LN8@FT_Outline
jmp	SHORT $Bad$13
mov	DWORD PTR _end$2[ebp], -1
mov	ecx, DWORD PTR _end$2[ebp]
mov	DWORD PTR _end0$3[ebp], ecx
mov	DWORD PTR _n$1[ebp], 0
jmp	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _n$1[ebp]
add	edx, 1
mov	DWORD PTR _n$1[ebp], edx
mov	eax, DWORD PTR _n$1[ebp]
cmp	eax, DWORD PTR _n_contours$4[ebp]
jge	SHORT $LN4@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _n$1[ebp]
movsx	ecx, WORD PTR [edx+eax*2]
mov	DWORD PTR _end$2[ebp], ecx
mov	edx, DWORD PTR _end$2[ebp]
cmp	edx, DWORD PTR _end0$3[ebp]
jle	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _end$2[ebp]
cmp	eax, DWORD PTR _n_points$5[ebp]
jl	SHORT $LN3@FT_Outline
jmp	SHORT $Bad$13
mov	ecx, DWORD PTR _end$2[ebp]
mov	DWORD PTR _end0$3[ebp], ecx
jmp	SHORT $LN5@FT_Outline
mov	edx, DWORD PTR _n_points$5[ebp]
sub	edx, 1
cmp	DWORD PTR _end$2[ebp], edx
je	SHORT $LN1@FT_Outline
jmp	SHORT $Bad$13
xor	eax, eax
jmp	SHORT $LN11@FT_Outline
push	OFFSET $SG12231
push	394					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Done_Internal PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN12@FT_Outline
push	OFFSET $SG12251
push	439					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN13@FT_Outline
cmp	DWORD PTR _memory$[ebp], 0
jne	SHORT $LN11@FT_Outline
push	OFFSET $SG12253
push	442					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN13@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
je	SHORT $LN10@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [edx+4], 0
xor	eax, eax
jne	SHORT $LN9@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [ecx+8], 0
xor	edx, edx
jne	SHORT $LN6@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _outline$[ebp]
mov	DWORD PTR [eax+12], 0
xor	ecx, ecx
jne	SHORT $LN3@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR _null_outline
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _null_outline+4
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _null_outline+8
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _null_outline+12
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _null_outline+16
mov	DWORD PTR [edx+16], eax
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_Done PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@FT_Outline
push	OFFSET $SG12273
push	465					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_Outline_Done_Internal
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_New_Internal PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _anoutline$[ebp], 0
je	SHORT $LN6@FT_Outline
cmp	DWORD PTR _memory$[ebp], 0
jne	SHORT $LN7@FT_Outline
push	OFFSET $SG12183
push	307					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Outline
mov	eax, DWORD PTR _anoutline$[ebp]
mov	ecx, DWORD PTR _null_outline
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _null_outline+4
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _null_outline+8
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _null_outline+12
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR _null_outline+16
mov	DWORD PTR [eax+16], ecx
cmp	DWORD PTR _numContours$[ebp], 0
jl	SHORT $LN4@FT_Outline
mov	edx, DWORD PTR _numContours$[ebp]
cmp	edx, DWORD PTR _numPoints$[ebp]
jbe	SHORT $LN5@FT_Outline
push	OFFSET $SG12187
push	313					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Outline
cmp	DWORD PTR _numPoints$[ebp], 32767	
jbe	SHORT $LN3@FT_Outline
push	OFFSET $SG12189
push	316					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	$LN8@FT_Outline
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _numPoints$[ebp]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Outline
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _numPoints$[ebp]
push	eax
push	0
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Outline
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _numContours$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_Outline
jmp	SHORT $Fail$13
mov	edx, DWORD PTR _anoutline$[ebp]
mov	ax, WORD PTR _numPoints$[ebp]
mov	WORD PTR [edx+2], ax
mov	ecx, DWORD PTR _anoutline$[ebp]
mov	dx, WORD PTR _numContours$[ebp]
mov	WORD PTR [ecx], dx
mov	eax, DWORD PTR _anoutline$[ebp]
mov	ecx, DWORD PTR [eax+16]
or	ecx, 1
mov	edx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [edx+16], ecx
xor	eax, eax
jmp	SHORT $LN8@FT_Outline
mov	eax, DWORD PTR _anoutline$[ebp]
mov	ecx, DWORD PTR [eax+16]
or	ecx, 1
mov	edx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR _anoutline$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_FT_Outline_Done_Internal
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN11@FT_Outline
DD	-8					
DD	4
DD	$LN10@FT_Outline
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Outline_New PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@FT_Outline
push	OFFSET $SG12211
push	346					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _anoutline$[ebp]
push	eax
mov	ecx, DWORD PTR _numContours$[ebp]
push	ecx
mov	edx, DWORD PTR _numPoints$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_Outline_New_Internal
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_Decompose PROC
push	ebp
mov	ebp, esp
sub	esp, 188				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-188]
mov	ecx, 47					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN73@FT_Outline
push	OFFSET $SG12071
push	77					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN74@FT_Outline
cmp	DWORD PTR _func_interface$[ebp], 0
jne	SHORT $LN72@FT_Outline
push	OFFSET $SG12073
push	80					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN74@FT_Outline
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _shift$[ebp], ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _delta$[ebp], eax
mov	DWORD PTR _first$[ebp], 0
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN71@FT_Outline
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
cmp	DWORD PTR _n$[ebp], eax
jge	$LN69@FT_Outline
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN65@FT_Outline
mov	edx, DWORD PTR _n$[ebp]
push	edx
push	OFFSET $SG12082
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN68@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _n$[ebp]
movsx	ecx, WORD PTR [edx+eax*2]
mov	DWORD PTR _last$7[ebp], ecx
cmp	DWORD PTR _last$7[ebp], 0
jge	SHORT $LN64@FT_Outline
jmp	$Invalid_Outline$89
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _last$7[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _limit$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _first$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
mov	DWORD PTR _v_start$[ebp], eax
mov	DWORD PTR _v_start$[ebp+4], ecx
mov	edx, DWORD PTR _v_start$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_start$[ebp], edx
mov	eax, DWORD PTR _v_start$[ebp+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_start$[ebp+4], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _last$7[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
mov	edx, DWORD PTR [edx+eax*8+4]
mov	DWORD PTR _v_last$[ebp], ecx
mov	DWORD PTR _v_last$[ebp+4], edx
mov	eax, DWORD PTR _v_last$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_last$[ebp], eax
mov	edx, DWORD PTR _v_last$[ebp+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_last$[ebp+4], edx
mov	eax, DWORD PTR _v_start$[ebp]
mov	DWORD PTR _v_control$[ebp], eax
mov	ecx, DWORD PTR _v_start$[ebp+4]
mov	DWORD PTR _v_control$[ebp+4], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _first$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _point$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _first$[ebp]
mov	DWORD PTR _tags$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _tags$[ebp]
movsx	edx, BYTE PTR [ecx+eax]
and	edx, 3
mov	DWORD PTR _tag$[ebp], edx
cmp	DWORD PTR _tag$[ebp], 2
jne	SHORT $LN63@FT_Outline
jmp	$Invalid_Outline$89
cmp	DWORD PTR _tag$[ebp], 0
jne	SHORT $LN62@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _last$7[ebp]
movsx	eax, BYTE PTR [ecx+edx]
and	eax, 3
cmp	eax, 1
jne	SHORT $LN61@FT_Outline
mov	ecx, DWORD PTR _v_last$[ebp]
mov	DWORD PTR _v_start$[ebp], ecx
mov	edx, DWORD PTR _v_last$[ebp+4]
mov	DWORD PTR _v_start$[ebp+4], edx
mov	eax, DWORD PTR _limit$[ebp]
sub	eax, 8
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN60@FT_Outline
mov	eax, DWORD PTR _v_start$[ebp]
add	eax, DWORD PTR _v_last$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_start$[ebp], eax
mov	eax, DWORD PTR _v_start$[ebp+4]
add	eax, DWORD PTR _v_last$[ebp+4]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_start$[ebp+4], eax
mov	ecx, DWORD PTR _point$[ebp]
sub	ecx, 8
mov	DWORD PTR _point$[ebp], ecx
mov	edx, DWORD PTR _tags$[ebp]
sub	edx, 1
mov	DWORD PTR _tags$[ebp], edx
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN56@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12093
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN62@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _v_start$[ebp]
push	eax
mov	ecx, DWORD PTR _func_interface$[ebp]
mov	edx, DWORD PTR [ecx]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN55@FT_Outline
jmp	$Exit$90
mov	eax, DWORD PTR _point$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	$LN53@FT_Outline
mov	ecx, DWORD PTR _point$[ebp]
add	ecx, 8
mov	DWORD PTR _point$[ebp], ecx
mov	edx, DWORD PTR _tags$[ebp]
add	edx, 1
mov	DWORD PTR _tags$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _tags$[ebp]
movsx	eax, BYTE PTR [edx+ecx]
and	eax, 3
mov	DWORD PTR _tag$[ebp], eax
mov	ecx, DWORD PTR _tag$[ebp]
mov	DWORD PTR tv191[ebp], ecx
cmp	DWORD PTR tv191[ebp], 0
je	$LN44@FT_Outline
cmp	DWORD PTR tv191[ebp], 1
je	SHORT $LN50@FT_Outline
jmp	$LN26@FT_Outline
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$6[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$6[ebp+4], edx
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN46@FT_Outline
cvtsi2sd xmm0, DWORD PTR _vec$6[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$6[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12109
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN49@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _vec$6[ebp]
push	eax
mov	ecx, DWORD PTR _func_interface$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN45@FT_Outline
jmp	$Exit$90
jmp	$LN55@FT_Outline
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_control$[ebp], edx
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_control$[ebp+4], edx
mov	eax, DWORD PTR _point$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	$LN43@FT_Outline
mov	ecx, DWORD PTR _point$[ebp]
add	ecx, 8
mov	DWORD PTR _point$[ebp], ecx
mov	edx, DWORD PTR _tags$[ebp]
add	edx, 1
mov	DWORD PTR _tags$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _tags$[ebp]
movsx	eax, BYTE PTR [edx+ecx]
and	eax, 3
mov	DWORD PTR _tag$[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$5[ebp], edx
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$5[ebp+4], edx
cmp	DWORD PTR _tag$[ebp], 1
jne	$LN42@FT_Outline
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN38@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$5[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$5[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12121
call	_FT_Message
add	esp, 36					
xor	ecx, ecx
jne	SHORT $LN41@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _vec$5[ebp]
push	eax
lea	ecx, DWORD PTR _v_control$[ebp]
push	ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN37@FT_Outline
jmp	$Exit$90
jmp	$LN55@FT_Outline
cmp	DWORD PTR _tag$[ebp], 0
je	SHORT $LN36@FT_Outline
jmp	$Invalid_Outline$89
mov	eax, DWORD PTR _v_control$[ebp]
add	eax, DWORD PTR _vec$5[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_middle$4[ebp], eax
mov	eax, DWORD PTR _v_control$[ebp+4]
add	eax, DWORD PTR _vec$5[ebp+4]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_middle$4[ebp+4], eax
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN32@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_middle$4[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_middle$4[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12128
call	_FT_Message
add	esp, 36					
xor	edx, edx
jne	SHORT $LN35@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
lea	ecx, DWORD PTR _v_middle$4[ebp]
push	ecx
lea	edx, DWORD PTR _v_control$[ebp]
push	edx
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+8]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@FT_Outline
jmp	$Exit$90
mov	edx, DWORD PTR _vec$5[ebp]
mov	DWORD PTR _v_control$[ebp], edx
mov	eax, DWORD PTR _vec$5[ebp+4]
mov	DWORD PTR _v_control$[ebp+4], eax
jmp	$Do_Conic$91
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN27@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12134
call	_FT_Message
add	esp, 36					
xor	edx, edx
jne	SHORT $LN43@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
lea	ecx, DWORD PTR _v_start$[ebp]
push	ecx
lea	edx, DWORD PTR _v_control$[ebp]
push	edx
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+8]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	$Close$92
mov	edx, DWORD PTR _point$[ebp]
add	edx, 8
cmp	edx, DWORD PTR _limit$[ebp]
ja	SHORT $LN24@FT_Outline
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _tags$[ebp]
movsx	edx, BYTE PTR [ecx+eax]
and	edx, 3
cmp	edx, 2
je	SHORT $LN25@FT_Outline
jmp	$Invalid_Outline$89
mov	eax, DWORD PTR _point$[ebp]
add	eax, 16					
mov	DWORD PTR _point$[ebp], eax
mov	ecx, DWORD PTR _tags$[ebp]
add	ecx, 2
mov	DWORD PTR _tags$[ebp], ecx
mov	edx, 8
imul	eax, edx, -2
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec1$3[ebp], edx
mov	eax, 8
imul	ecx, eax, -2
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx+ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec1$3[ebp+4], eax
mov	ecx, 8
imul	edx, ecx, -1
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax+edx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec2$2[ebp], edx
mov	eax, 8
imul	ecx, eax, -1
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx+ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec2$2[ebp+4], eax
mov	ecx, DWORD PTR _point$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
ja	$LN23@FT_Outline
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$1[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$1[ebp+4], edx
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	$LN19@FT_Outline
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$1[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$1[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12147
call	_FT_Message
add	esp, 52					
xor	ecx, ecx
jne	$LN22@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _vec$1[ebp]
push	eax
lea	ecx, DWORD PTR _vec2$2[ebp]
push	ecx
lea	edx, DWORD PTR _vec1$3[ebp]
push	edx
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@FT_Outline
jmp	$Exit$90
jmp	$LN55@FT_Outline
mov	edx, 4
shl	edx, 3
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	$LN14@FT_Outline
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12153
call	_FT_Message
add	esp, 52					
xor	eax, eax
jne	$LN23@FT_Outline
mov	esi, esp
mov	ecx, DWORD PTR _user$[ebp]
push	ecx
lea	edx, DWORD PTR _v_start$[ebp]
push	edx
lea	eax, DWORD PTR _vec2$2[ebp]
push	eax
lea	ecx, DWORD PTR _vec1$3[ebp]
push	ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Close$92
jmp	$LN55@FT_Outline
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN10@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12158
call	_FT_Message
add	esp, 20					
xor	edx, edx
jne	SHORT $LN53@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
lea	ecx, DWORD PTR _v_start$[ebp]
push	ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@FT_Outline
jmp	SHORT $Exit$90
mov	ecx, DWORD PTR _last$7[ebp]
add	ecx, 1
mov	DWORD PTR _first$[ebp], ecx
jmp	$LN70@FT_Outline
mov	edx, 4
shl	edx, 3
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
push	eax
push	OFFSET $SG12164
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN69@FT_Outline
xor	eax, eax
jmp	SHORT $LN74@FT_Outline
mov	edx, 4
shl	edx, 3
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN1@FT_Outline
mov	eax, DWORD PTR _error$[ebp]
push	eax
push	OFFSET $SG12169
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $Exit$90
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN74@FT_Outline
push	OFFSET $SG12170
push	293					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN88@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 188				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	9
DD	$LN87@FT_Outline
DD	-12					
DD	8
DD	$LN78@FT_Outline
DD	-28					
DD	8
DD	$LN79@FT_Outline
DD	-44					
DD	8
DD	$LN80@FT_Outline
DD	-100					
DD	8
DD	$LN81@FT_Outline
DD	-116					
DD	8
DD	$LN82@FT_Outline
DD	-132					
DD	8
DD	$LN83@FT_Outline
DD	-148					
DD	8
DD	$LN84@FT_Outline
DD	-164					
DD	8
DD	$LN85@FT_Outline
DD	-180					
DD	8
DD	$LN86@FT_Outline
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	101					
DB	99					
DB	50					
DB	0
DB	118					
DB	101					
DB	99					
DB	49					
DB	0
DB	118					
DB	95					
DB	109					
DB	105					
DB	100					
DB	100					
DB	108					
DB	101					
DB	0
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	95					
DB	115					
DB	116					
DB	97					
DB	114					
DB	116					
DB	0
DB	118					
DB	95					
DB	99					
DB	111					
DB	110					
DB	116					
DB	114					
DB	111					
DB	108					
DB	0
DB	118					
DB	95					
DB	108					
DB	97					
DB	115					
DB	116					
DB	0
ENDP
_FT_List_Finalize PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN7@FT_List_Fi
cmp	DWORD PTR _memory$[ebp], 0
jne	SHORT $LN8@FT_List_Fi
jmp	SHORT $LN9@FT_List_Fi
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN5@FT_List_Fi
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _next$2[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _data$1[ebp], edx
cmp	DWORD PTR _destroy$[ebp], 0
je	SHORT $LN3@FT_List_Fi
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
mov	ecx, DWORD PTR _data$1[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	DWORD PTR _destroy$[ebp]
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _cur$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _cur$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_List_Fi
mov	eax, DWORD PTR _next$2[ebp]
mov	DWORD PTR _cur$[ebp], eax
jmp	SHORT $LN6@FT_List_Fi
mov	ecx, DWORD PTR _list$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _list$[ebp]
mov	DWORD PTR [edx+4], 0
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Iterate PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN4@FT_List_It
cmp	DWORD PTR _iterator$[ebp], 0
jne	SHORT $LN5@FT_List_It
push	OFFSET $SG14016
push	388					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN6@FT_List_It
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN2@FT_List_It
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _next$1[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _user$[ebp]
push	ecx
mov	edx, DWORD PTR _cur$[ebp]
push	edx
call	DWORD PTR _iterator$[ebp]
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_List_It
jmp	SHORT $LN2@FT_List_It
mov	eax, DWORD PTR _next$1[ebp]
mov	DWORD PTR _cur$[ebp], eax
jmp	SHORT $LN3@FT_List_It
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Up PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN4@FT_List_Up
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN5@FT_List_Up
jmp	SHORT $LN6@FT_List_Up
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _before$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _after$[ebp], eax
cmp	DWORD PTR _before$[ebp], 0
jne	SHORT $LN3@FT_List_Up
jmp	SHORT $LN6@FT_List_Up
mov	ecx, DWORD PTR _before$[ebp]
mov	edx, DWORD PTR _after$[ebp]
mov	DWORD PTR [ecx+4], edx
cmp	DWORD PTR _after$[ebp], 0
je	SHORT $LN2@FT_List_Up
mov	eax, DWORD PTR _after$[ebp]
mov	ecx, DWORD PTR _before$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN1@FT_List_Up
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR _before$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+4], ecx
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Remove PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN5@FT_List_Re
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN6@FT_List_Re
jmp	SHORT $LN7@FT_List_Re
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _before$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _after$[ebp], eax
cmp	DWORD PTR _before$[ebp], 0
je	SHORT $LN4@FT_List_Re
mov	ecx, DWORD PTR _before$[ebp]
mov	edx, DWORD PTR _after$[ebp]
mov	DWORD PTR [ecx+4], edx
jmp	SHORT $LN3@FT_List_Re
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR _after$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _after$[ebp], 0
je	SHORT $LN2@FT_List_Re
mov	edx, DWORD PTR _after$[ebp]
mov	eax, DWORD PTR _before$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN7@FT_List_Re
mov	ecx, DWORD PTR _list$[ebp]
mov	edx, DWORD PTR _before$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Insert PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN3@FT_List_In
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN4@FT_List_In
jmp	SHORT $LN5@FT_List_In
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _after$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _after$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], 0
cmp	DWORD PTR _after$[ebp], 0
jne	SHORT $LN2@FT_List_In
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx+4], eax
jmp	SHORT $LN1@FT_List_In
mov	ecx, DWORD PTR _after$[ebp]
mov	edx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Add PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN3@FT_List_Ad
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN4@FT_List_Ad
jmp	SHORT $LN5@FT_List_Ad
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _before$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR _before$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _before$[ebp], 0
je	SHORT $LN2@FT_List_Ad
mov	edx, DWORD PTR _before$[ebp]
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx+4], eax
jmp	SHORT $LN1@FT_List_Ad
mov	ecx, DWORD PTR _list$[ebp]
mov	edx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Find PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
jne	SHORT $LN4@FT_List_Fi
xor	eax, eax
jmp	SHORT $LN5@FT_List_Fi
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN2@FT_List_Fi
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR _data$[ebp]
jne	SHORT $LN1@FT_List_Fi
mov	eax, DWORD PTR _cur$[ebp]
jmp	SHORT $LN5@FT_List_Fi
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _cur$[ebp], edx
jmp	SHORT $LN3@FT_List_Fi
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Adjust_Subglyphs PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
mov	edx, DWORD PTR _base$[ebp]
mov	eax, DWORD PTR [edx+28]
shl	eax, 5
mov	ecx, DWORD PTR _base$[ebp]
add	eax, DWORD PTR [ecx+32]
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+32], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Adjust_Points PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+4]
lea	eax, DWORD PTR [edx+eax*8]
mov	ecx, DWORD PTR _current$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _base$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _base$[ebp]
mov	eax, DWORD PTR [edx+12]
lea	ecx, DWORD PTR [eax+ecx*2]
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _loader$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	SHORT $LN2@FT_GlyphLo
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+40]
lea	eax, DWORD PTR [edx+eax*8]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+76], eax
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+44]
lea	eax, DWORD PTR [edx+eax*8]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+80], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Add64 PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _y$[ebp]
add	ecx, DWORD PTR [edx]
mov	DWORD PTR _lo$[ebp], ecx
mov	eax, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR [eax]
jae	SHORT $LN3@FT_Add64
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN4@FT_Add64
mov	DWORD PTR tv72[ebp], 0
mov	edx, DWORD PTR _x$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _y$[ebp]
add	eax, DWORD PTR [ecx+4]
add	eax, DWORD PTR tv72[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	edx, DWORD PTR _z$[ebp]
mov	eax, DWORD PTR _lo$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _z$[ebp]
mov	edx, DWORD PTR _hi$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_div64by32 PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hi$[ebp]
cmp	eax, DWORD PTR _y$[ebp]
jb	SHORT $LN5@ft_div64by
mov	eax, 2147483647				
jmp	$LN6@ft_div64by
mov	ecx, DWORD PTR _hi$[ebp]
push	ecx
call	_FT_MSB
add	esp, 4
mov	edx, 31					
sub	edx, eax
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _hi$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
shl	eax, cl
mov	ecx, 32					
sub	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _lo$[ebp]
shr	edx, cl
or	eax, edx
mov	DWORD PTR _r$[ebp], eax
mov	eax, DWORD PTR _lo$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
shl	eax, cl
mov	DWORD PTR _lo$[ebp], eax
mov	eax, DWORD PTR _r$[ebp]
xor	edx, edx
div	DWORD PTR _y$[ebp]
mov	DWORD PTR _q$[ebp], eax
mov	ecx, DWORD PTR _q$[ebp]
imul	ecx, DWORD PTR _y$[ebp]
mov	edx, DWORD PTR _r$[ebp]
sub	edx, ecx
mov	DWORD PTR _r$[ebp], edx
mov	eax, 32					
sub	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _q$[ebp]
shl	ecx, 1
mov	DWORD PTR _q$[ebp], ecx
mov	edx, DWORD PTR _r$[ebp]
shl	edx, 1
mov	eax, DWORD PTR _lo$[ebp]
shr	eax, 31					
or	edx, eax
mov	DWORD PTR _r$[ebp], edx
mov	ecx, DWORD PTR _lo$[ebp]
shl	ecx, 1
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _r$[ebp]
cmp	edx, DWORD PTR _y$[ebp]
jb	SHORT $LN3@ft_div64by
mov	eax, DWORD PTR _r$[ebp]
sub	eax, DWORD PTR _y$[ebp]
mov	DWORD PTR _r$[ebp], eax
mov	ecx, DWORD PTR _q$[ebp]
or	ecx, 1
mov	DWORD PTR _q$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _i$[ebp], edx
jne	SHORT $LN4@ft_div64by
mov	eax, DWORD PTR _q$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_multo64 PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _x$[ebp]
and	eax, 65535				
mov	DWORD PTR _lo1$[ebp], eax
mov	ecx, DWORD PTR _x$[ebp]
shr	ecx, 16					
mov	DWORD PTR _hi1$[ebp], ecx
mov	edx, DWORD PTR _y$[ebp]
and	edx, 65535				
mov	DWORD PTR _lo2$[ebp], edx
mov	eax, DWORD PTR _y$[ebp]
shr	eax, 16					
mov	DWORD PTR _hi2$[ebp], eax
mov	ecx, DWORD PTR _lo1$[ebp]
imul	ecx, DWORD PTR _lo2$[ebp]
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _lo1$[ebp]
imul	edx, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _i1$[ebp], edx
mov	eax, DWORD PTR _lo2$[ebp]
imul	eax, DWORD PTR _hi1$[ebp]
mov	DWORD PTR _i2$[ebp], eax
mov	ecx, DWORD PTR _hi1$[ebp]
imul	ecx, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
add	edx, DWORD PTR _i2$[ebp]
mov	DWORD PTR _i1$[ebp], edx
mov	eax, DWORD PTR _i1$[ebp]
cmp	eax, DWORD PTR _i2$[ebp]
jae	SHORT $LN3@ft_multo64
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN4@ft_multo64
mov	DWORD PTR tv74[ebp], 0
mov	ecx, DWORD PTR tv74[ebp]
shl	ecx, 16					
add	ecx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
shr	edx, 16					
add	edx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _i1$[ebp]
shl	eax, 16					
mov	DWORD PTR _i1$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
add	ecx, DWORD PTR _i1$[ebp]
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _lo$[ebp]
cmp	edx, DWORD PTR _i1$[ebp]
jae	SHORT $LN5@ft_multo64
mov	DWORD PTR tv82[ebp], 1
jmp	SHORT $LN6@ft_multo64
mov	DWORD PTR tv82[ebp], 0
mov	eax, DWORD PTR _hi$[ebp]
add	eax, DWORD PTR tv82[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _z$[ebp]
mov	edx, DWORD PTR _lo$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _z$[ebp]
mov	ecx, DWORD PTR _hi$[ebp]
mov	DWORD PTR [eax+4], ecx
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Hypot PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR _v$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR _v$[ebp+4], ecx
lea	edx, DWORD PTR _v$[ebp]
push	edx
call	_FT_Vector_Length
add	esp, 4
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@FT_Hypot
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN4@FT_Hypot
DD	-12					
DD	8
DD	$LN3@FT_Hypot
DB	118					
DB	0
ENDP
_FT_MSB	PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _shift$[ebp], 0
mov	eax, DWORD PTR _z$[ebp]
and	eax, -65536				
je	SHORT $LN5@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 16					
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 16					
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 65280				
je	SHORT $LN4@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 8
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 8
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 240				
je	SHORT $LN3@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 4
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 4
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 12					
je	SHORT $LN2@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 2
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 2
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 2
je	SHORT $LN1@FT_MSB
mov	ecx, DWORD PTR _shift$[ebp]
add	ecx, 1
mov	DWORD PTR _shift$[ebp], ecx
mov	eax, DWORD PTR _shift$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_corner_is_flat PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _in_x$[ebp]
add	eax, DWORD PTR _out_x$[ebp]
mov	DWORD PTR _ax$[ebp], eax
mov	ecx, DWORD PTR _in_y$[ebp]
add	ecx, DWORD PTR _out_y$[ebp]
mov	DWORD PTR _ay$[ebp], ecx
cmp	DWORD PTR _in_x$[ebp], 0
jge	SHORT $LN3@ft_corner_
mov	edx, DWORD PTR _in_x$[ebp]
neg	edx
mov	DWORD PTR tv68[ebp], edx
jmp	SHORT $LN4@ft_corner_
mov	eax, DWORD PTR _in_x$[ebp]
mov	DWORD PTR tv68[ebp], eax
mov	ecx, DWORD PTR tv68[ebp]
mov	DWORD PTR _in_x$[ebp], ecx
cmp	DWORD PTR _in_y$[ebp], 0
jge	SHORT $LN5@ft_corner_
mov	edx, DWORD PTR _in_y$[ebp]
neg	edx
mov	DWORD PTR tv71[ebp], edx
jmp	SHORT $LN6@ft_corner_
mov	eax, DWORD PTR _in_y$[ebp]
mov	DWORD PTR tv71[ebp], eax
mov	ecx, DWORD PTR tv71[ebp]
mov	DWORD PTR _in_y$[ebp], ecx
mov	edx, DWORD PTR _in_x$[ebp]
cmp	edx, DWORD PTR _in_y$[ebp]
jle	SHORT $LN7@ft_corner_
imul	eax, DWORD PTR _in_y$[ebp], 3
sar	eax, 3
add	eax, DWORD PTR _in_x$[ebp]
mov	DWORD PTR tv79[ebp], eax
jmp	SHORT $LN8@ft_corner_
imul	ecx, DWORD PTR _in_x$[ebp], 3
sar	ecx, 3
add	ecx, DWORD PTR _in_y$[ebp]
mov	DWORD PTR tv79[ebp], ecx
mov	edx, DWORD PTR tv79[ebp]
mov	DWORD PTR _d_in$[ebp], edx
cmp	DWORD PTR _out_x$[ebp], 0
jge	SHORT $LN9@ft_corner_
mov	eax, DWORD PTR _out_x$[ebp]
neg	eax
mov	DWORD PTR tv82[ebp], eax
jmp	SHORT $LN10@ft_corner_
mov	ecx, DWORD PTR _out_x$[ebp]
mov	DWORD PTR tv82[ebp], ecx
mov	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR _out_x$[ebp], edx
cmp	DWORD PTR _out_y$[ebp], 0
jge	SHORT $LN11@ft_corner_
mov	eax, DWORD PTR _out_y$[ebp]
neg	eax
mov	DWORD PTR tv85[ebp], eax
jmp	SHORT $LN12@ft_corner_
mov	ecx, DWORD PTR _out_y$[ebp]
mov	DWORD PTR tv85[ebp], ecx
mov	edx, DWORD PTR tv85[ebp]
mov	DWORD PTR _out_y$[ebp], edx
mov	eax, DWORD PTR _out_x$[ebp]
cmp	eax, DWORD PTR _out_y$[ebp]
jle	SHORT $LN13@ft_corner_
imul	ecx, DWORD PTR _out_y$[ebp], 3
sar	ecx, 3
add	ecx, DWORD PTR _out_x$[ebp]
mov	DWORD PTR tv93[ebp], ecx
jmp	SHORT $LN14@ft_corner_
imul	edx, DWORD PTR _out_x$[ebp], 3
sar	edx, 3
add	edx, DWORD PTR _out_y$[ebp]
mov	DWORD PTR tv93[ebp], edx
mov	eax, DWORD PTR tv93[ebp]
mov	DWORD PTR _d_out$[ebp], eax
cmp	DWORD PTR _ax$[ebp], 0
jge	SHORT $LN15@ft_corner_
mov	ecx, DWORD PTR _ax$[ebp]
neg	ecx
mov	DWORD PTR tv128[ebp], ecx
jmp	SHORT $LN16@ft_corner_
mov	edx, DWORD PTR _ax$[ebp]
mov	DWORD PTR tv128[ebp], edx
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR _ax$[ebp], eax
cmp	DWORD PTR _ay$[ebp], 0
jge	SHORT $LN17@ft_corner_
mov	ecx, DWORD PTR _ay$[ebp]
neg	ecx
mov	DWORD PTR tv131[ebp], ecx
jmp	SHORT $LN18@ft_corner_
mov	edx, DWORD PTR _ay$[ebp]
mov	DWORD PTR tv131[ebp], edx
mov	eax, DWORD PTR tv131[ebp]
mov	DWORD PTR _ay$[ebp], eax
mov	ecx, DWORD PTR _ax$[ebp]
cmp	ecx, DWORD PTR _ay$[ebp]
jle	SHORT $LN19@ft_corner_
imul	edx, DWORD PTR _ay$[ebp], 3
sar	edx, 3
add	edx, DWORD PTR _ax$[ebp]
mov	DWORD PTR tv139[ebp], edx
jmp	SHORT $LN20@ft_corner_
imul	eax, DWORD PTR _ax$[ebp], 3
sar	eax, 3
add	eax, DWORD PTR _ay$[ebp]
mov	DWORD PTR tv139[ebp], eax
mov	ecx, DWORD PTR tv139[ebp]
mov	DWORD PTR _d_hypot$[ebp], ecx
mov	edx, DWORD PTR _d_in$[ebp]
add	edx, DWORD PTR _d_out$[ebp]
sub	edx, DWORD PTR _d_hypot$[ebp]
mov	eax, DWORD PTR _d_hypot$[ebp]
sar	eax, 4
cmp	edx, eax
jge	SHORT $LN21@ft_corner_
mov	DWORD PTR tv144[ebp], 1
jmp	SHORT $LN22@ft_corner_
mov	DWORD PTR tv144[ebp], 0
mov	eax, DWORD PTR tv144[ebp]
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_corner_orientation PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _in_y$[ebp], 0
jne	SHORT $LN24@ft_corner_
cmp	DWORD PTR _in_x$[ebp], 0
jl	SHORT $LN23@ft_corner_
mov	eax, DWORD PTR _out_y$[ebp]
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $LN22@ft_corner_
mov	ecx, DWORD PTR _out_y$[ebp]
neg	ecx
mov	DWORD PTR _result$[ebp], ecx
jmp	$LN21@ft_corner_
cmp	DWORD PTR _in_x$[ebp], 0
jne	SHORT $LN20@ft_corner_
cmp	DWORD PTR _in_y$[ebp], 0
jl	SHORT $LN19@ft_corner_
mov	edx, DWORD PTR _out_x$[ebp]
neg	edx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN18@ft_corner_
mov	eax, DWORD PTR _out_x$[ebp]
mov	DWORD PTR _result$[ebp], eax
jmp	$LN21@ft_corner_
cmp	DWORD PTR _out_y$[ebp], 0
jne	SHORT $LN16@ft_corner_
cmp	DWORD PTR _out_x$[ebp], 0
jl	SHORT $LN15@ft_corner_
mov	ecx, DWORD PTR _in_y$[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN14@ft_corner_
mov	edx, DWORD PTR _in_y$[ebp]
neg	edx
mov	DWORD PTR _result$[ebp], edx
jmp	$LN21@ft_corner_
cmp	DWORD PTR _out_x$[ebp], 0
jne	SHORT $LN12@ft_corner_
cmp	DWORD PTR _out_y$[ebp], 0
jl	SHORT $LN11@ft_corner_
mov	eax, DWORD PTR _in_x$[ebp]
neg	eax
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $LN10@ft_corner_
mov	ecx, DWORD PTR _in_x$[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN21@ft_corner_
lea	edx, DWORD PTR _z1$2[ebp]
push	edx
mov	eax, DWORD PTR _out_y$[ebp]
push	eax
mov	ecx, DWORD PTR _in_x$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
lea	edx, DWORD PTR _z2$1[ebp]
push	edx
mov	eax, DWORD PTR _out_x$[ebp]
push	eax
mov	ecx, DWORD PTR _in_y$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
mov	edx, DWORD PTR _z1$2[ebp+4]
cmp	edx, DWORD PTR _z2$1[ebp+4]
jbe	SHORT $LN8@ft_corner_
mov	DWORD PTR _result$[ebp], 1
jmp	SHORT $LN21@ft_corner_
mov	eax, DWORD PTR _z1$2[ebp+4]
cmp	eax, DWORD PTR _z2$1[ebp+4]
jae	SHORT $LN6@ft_corner_
mov	DWORD PTR _result$[ebp], -1
jmp	SHORT $LN21@ft_corner_
mov	ecx, DWORD PTR _z1$2[ebp]
cmp	ecx, DWORD PTR _z2$1[ebp]
jbe	SHORT $LN4@ft_corner_
mov	DWORD PTR _result$[ebp], 1
jmp	SHORT $LN21@ft_corner_
mov	edx, DWORD PTR _z1$2[ebp]
cmp	edx, DWORD PTR _z2$1[ebp]
jae	SHORT $LN2@ft_corner_
mov	DWORD PTR _result$[ebp], -1
jmp	SHORT $LN21@ft_corner_
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@ft_corner_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	2
DD	$LN29@ft_corner_
DD	-16					
DD	8
DD	$LN27@ft_corner_
DD	-32					
DD	8
DD	$LN28@ft_corner_
DB	122					
DB	50					
DB	0
DB	122					
DB	49					
DB	0
ENDP
_FT_Vector_Transform_Scaled PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _scaling$[ebp]
shl	eax, 16					
mov	DWORD PTR _val$[ebp], eax
cmp	DWORD PTR _vector$[ebp], 0
je	SHORT $LN1@FT_Vector_
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN2@FT_Vector_
jmp	$LN3@FT_Vector_
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _xz$[ebp], esi
mov	edx, DWORD PTR _val$[ebp]
push	edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _yz$[ebp], esi
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR _xz$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR _yz$[ebp]
mov	DWORD PTR [edx+4], eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Matrix_Multiply_Scaled PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _scaling$[ebp]
shl	eax, 16					
mov	DWORD PTR _val$[ebp], eax
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN1@FT_Matrix_
cmp	DWORD PTR _b$[ebp], 0
jne	SHORT $LN2@FT_Matrix_
jmp	$LN3@FT_Matrix_
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _xx$[ebp], esi
mov	edx, DWORD PTR _val$[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _xy$[ebp], esi
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _val$[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _yx$[ebp], esi
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _yy$[ebp], esi
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _xx$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR _xy$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _yx$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _yy$[ebp]
mov	DWORD PTR [edx+12], eax
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_MulDiv_No_Round PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN17@FT_MulDiv_
mov	eax, DWORD PTR _b$[ebp]
cmp	eax, DWORD PTR _c$[ebp]
jne	SHORT $LN16@FT_MulDiv_
mov	eax, DWORD PTR _a$[ebp]
jmp	$LN19@FT_MulDiv_
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN15@FT_MulDiv_
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN16@FT_MulDiv_
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN11@FT_MulDiv_
mov	ecx, DWORD PTR _b$[ebp]
neg	ecx
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN12@FT_MulDiv_
cmp	DWORD PTR _c$[ebp], 0
jge	SHORT $LN7@FT_MulDiv_
mov	ecx, DWORD PTR _c$[ebp]
neg	ecx
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN8@FT_MulDiv_
cmp	DWORD PTR _c$[ebp], 0
jne	SHORT $LN4@FT_MulDiv_
mov	DWORD PTR _a$[ebp], 2147483647		
jmp	SHORT $LN3@FT_MulDiv_
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
cmp	ecx, 131071				
ja	SHORT $LN2@FT_MulDiv_
mov	eax, DWORD PTR _a$[ebp]
imul	eax, DWORD PTR _b$[ebp]
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR _a$[ebp], eax
jmp	SHORT $LN3@FT_MulDiv_
lea	edx, DWORD PTR _temp$1[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
cmp	DWORD PTR _temp$1[ebp+4], 0
jne	SHORT $LN21@FT_MulDiv_
mov	eax, DWORD PTR _temp$1[ebp]
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR tv92[ebp], eax
jmp	SHORT $LN22@FT_MulDiv_
mov	edx, DWORD PTR _c$[ebp]
push	edx
mov	eax, DWORD PTR _temp$1[ebp]
push	eax
mov	ecx, DWORD PTR _temp$1[ebp+4]
push	ecx
call	_ft_div64by32
add	esp, 12					
mov	DWORD PTR tv92[ebp], eax
mov	edx, DWORD PTR tv92[ebp]
mov	DWORD PTR _a$[ebp], edx
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN23@FT_MulDiv_
mov	eax, DWORD PTR _a$[ebp]
neg	eax
mov	DWORD PTR tv95[ebp], eax
jmp	SHORT $LN24@FT_MulDiv_
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR tv95[ebp], ecx
mov	eax, DWORD PTR tv95[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN27@FT_MulDiv_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN26@FT_MulDiv_
DD	-16					
DD	8
DD	$LN25@FT_MulDiv_
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
_FT_MulFix_i386 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _b$[ebp]
imul	edx
mov	ecx, edx
sar	ecx, 31					
add	ecx, 32768				
add	eax, ecx
adc	edx, 0
shr	eax, 16					
shl	edx, 16					
add	eax, edx
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Vector_From_Polar PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN1@FT_Vector_
jmp	SHORT $LN2@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _angle$[ebp]
push	eax
mov	ecx, DWORD PTR _vec$[ebp]
push	ecx
call	_FT_Vector_Rotate
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Vector_Polarize PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _vec$[ebp], 0
je	SHORT $LN2@FT_Vector_
cmp	DWORD PTR _length$[ebp], 0
je	SHORT $LN2@FT_Vector_
cmp	DWORD PTR _angle$[ebp], 0
jne	SHORT $LN3@FT_Vector_
jmp	SHORT $LN4@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _v$[ebp], ecx
mov	DWORD PTR _v$[ebp+4], edx
cmp	DWORD PTR _v$[ebp], 0
jne	SHORT $LN1@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
jne	SHORT $LN1@FT_Vector_
jmp	SHORT $LN4@FT_Vector_
lea	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_prenorm
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_pseudo_polarize
add	esp, 4
mov	edx, DWORD PTR _v$[ebp]
push	edx
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp], eax
cmp	DWORD PTR _shift$[ebp], 0
jl	SHORT $LN6@FT_Vector_
mov	eax, DWORD PTR _v$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	eax, cl
mov	DWORD PTR tv79[ebp], eax
jmp	SHORT $LN7@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
neg	ecx
mov	edx, DWORD PTR _v$[ebp]
shl	edx, cl
mov	DWORD PTR tv79[ebp], edx
mov	eax, DWORD PTR _length$[ebp]
mov	ecx, DWORD PTR tv79[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _angle$[ebp]
mov	eax, DWORD PTR _v$[ebp+4]
mov	DWORD PTR [edx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@FT_Vector_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN9@FT_Vector_
DD	-16					
DD	8
DD	$LN8@FT_Vector_
DB	118					
DB	0
ENDP
_FT_Vector_Length PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN5@FT_Vector_
xor	eax, eax
jmp	$LN6@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _v$[ebp], ecx
mov	DWORD PTR _v$[ebp+4], edx
cmp	DWORD PTR _v$[ebp], 0
jne	SHORT $LN4@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
jge	SHORT $LN8@FT_Vector_
mov	eax, DWORD PTR _v$[ebp+4]
neg	eax
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN9@FT_Vector_
mov	ecx, DWORD PTR _v$[ebp+4]
mov	DWORD PTR tv69[ebp], ecx
mov	eax, DWORD PTR tv69[ebp]
jmp	SHORT $LN6@FT_Vector_
jmp	SHORT $LN3@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
jne	SHORT $LN3@FT_Vector_
cmp	DWORD PTR _v$[ebp], 0
jge	SHORT $LN10@FT_Vector_
mov	edx, DWORD PTR _v$[ebp]
neg	edx
mov	DWORD PTR tv73[ebp], edx
jmp	SHORT $LN11@FT_Vector_
mov	eax, DWORD PTR _v$[ebp]
mov	DWORD PTR tv73[ebp], eax
mov	eax, DWORD PTR tv73[ebp]
jmp	SHORT $LN6@FT_Vector_
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_prenorm
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
lea	edx, DWORD PTR _v$[ebp]
push	edx
call	_ft_trig_pseudo_polarize
add	esp, 4
mov	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp], eax
cmp	DWORD PTR _shift$[ebp], 0
jle	SHORT $LN1@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
sub	ecx, 1
mov	eax, 1
shl	eax, cl
add	eax, DWORD PTR _v$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	eax, cl
jmp	SHORT $LN6@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
neg	ecx
mov	eax, DWORD PTR _v$[ebp]
shl	eax, cl
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@FT_Vector_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN13@FT_Vector_
DD	-16					
DD	8
DD	$LN12@FT_Vector_
DB	118					
DB	0
ENDP
_FT_Vector_Rotate PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN5@FT_Vector_
jmp	$LN6@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _v$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _v$[ebp+4], eax
cmp	DWORD PTR _angle$[ebp], 0
je	$LN6@FT_Vector_
cmp	DWORD PTR _v$[ebp], 0
jne	SHORT $LN3@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
je	$LN6@FT_Vector_
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_prenorm
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
mov	edx, DWORD PTR _angle$[ebp]
push	edx
lea	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp], eax
mov	edx, DWORD PTR _v$[ebp+4]
push	edx
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp+4], eax
cmp	DWORD PTR _shift$[ebp], 0
jle	SHORT $LN2@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
sub	ecx, 1
mov	eax, 1
shl	eax, cl
mov	DWORD PTR _half$1[ebp], eax
mov	edx, DWORD PTR _v$[ebp]
add	edx, DWORD PTR _half$1[ebp]
mov	eax, DWORD PTR _v$[ebp]
sar	eax, 31					
add	edx, eax
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR _v$[ebp+4]
add	edx, DWORD PTR _half$1[ebp]
mov	eax, DWORD PTR _v$[ebp+4]
sar	eax, 31					
add	edx, eax
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx+4], edx
jmp	SHORT $LN6@FT_Vector_
mov	edx, DWORD PTR _shift$[ebp]
neg	edx
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _v$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _v$[ebp+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@FT_Vector_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN9@FT_Vector_
DD	-16					
DD	8
DD	$LN8@FT_Vector_
DB	118					
DB	0
ENDP
_FT_Vector_Unit PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN1@FT_Vector_
jmp	SHORT $LN2@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], 14408027		
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _angle$[ebp]
push	edx
mov	eax, DWORD PTR _vec$[ebp]
push	eax
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 128				
sar	edx, 8
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx+4]
add	edx, 128				
sar	edx, 8
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Angle_Diff PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _angle2$[ebp]
sub	eax, DWORD PTR _angle1$[ebp]
mov	DWORD PTR _delta$[ebp], eax
mov	eax, DWORD PTR _delta$[ebp]
cdq
mov	ecx, 23592960				
idiv	ecx
mov	DWORD PTR _delta$[ebp], edx
cmp	DWORD PTR _delta$[ebp], 0
jge	SHORT $LN2@FT_Angle_D
mov	edx, DWORD PTR _delta$[ebp]
add	edx, 23592960				
mov	DWORD PTR _delta$[ebp], edx
cmp	DWORD PTR _delta$[ebp], 11796480	
jle	SHORT $LN1@FT_Angle_D
mov	eax, DWORD PTR _delta$[ebp]
sub	eax, 23592960				
mov	DWORD PTR _delta$[ebp], eax
mov	eax, DWORD PTR _delta$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Atan2 PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _dx$[ebp], 0
jne	SHORT $LN1@FT_Atan2
cmp	DWORD PTR _dy$[ebp], 0
jne	SHORT $LN1@FT_Atan2
xor	eax, eax
jmp	SHORT $LN2@FT_Atan2
mov	eax, DWORD PTR _dx$[ebp]
mov	DWORD PTR _v$[ebp], eax
mov	ecx, DWORD PTR _dy$[ebp]
mov	DWORD PTR _v$[ebp+4], ecx
lea	edx, DWORD PTR _v$[ebp]
push	edx
call	_ft_trig_prenorm
add	esp, 4
lea	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_pseudo_polarize
add	esp, 4
mov	eax, DWORD PTR _v$[ebp+4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_Atan2
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@FT_Atan2
DD	-12					
DD	8
DD	$LN4@FT_Atan2
DB	118					
DB	0
ENDP
_FT_Tan	PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _v$[ebp], 14408027		
mov	DWORD PTR _v$[ebp+4], 0
mov	eax, DWORD PTR _angle$[ebp]
push	eax
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _v$[ebp+4]
push	eax
call	_FT_DivFix
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@FT_Tan
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN4@FT_Tan
DD	-12					
DD	8
DD	$LN3@FT_Tan
DB	118					
DB	0
ENDP
_FT_Cos	PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _v$[ebp], 14408027		
mov	DWORD PTR _v$[ebp+4], 0
mov	eax, DWORD PTR _angle$[ebp]
push	eax
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	eax, DWORD PTR _v$[ebp]
add	eax, 128				
sar	eax, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@FT_Cos
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@FT_Cos
DD	-12					
DD	8
DD	$LN3@FT_Cos
DB	118					
DB	0
ENDP
_FT_Sin	PROC
push	ebp
mov	ebp, esp
mov	eax, 5898240				
sub	eax, DWORD PTR _angle$[ebp]
push	eax
call	_FT_Cos
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
__ft_face_scale_advances PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _flags$[ebp]
and	eax, 1
je	SHORT $LN7@ft_face_sc
xor	eax, eax
jmp	$LN8@ft_face_sc
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+88], 0
jne	SHORT $LN6@ft_face_sc
push	OFFSET $SG7003
push	40					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	SHORT $LN8@ft_face_sc
mov	edx, DWORD PTR _flags$[ebp]
and	edx, 16					
je	SHORT $LN5@ft_face_sc
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _scale$[ebp], edx
jmp	SHORT $LN4@ft_face_sc
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _scale$[ebp], edx
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN3@ft_face_sc
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN1@ft_face_sc
push	64					
mov	edx, DWORD PTR _scale$[ebp]
push	edx
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _nn$[ebp]
mov	edx, DWORD PTR _advances$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN2@ft_face_sc
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Advances PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN14@FT_Get_Adv
push	OFFSET $SG7049
push	122					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN15@FT_Get_Adv
cmp	DWORD PTR _padvances$[ebp], 0
jne	SHORT $LN13@FT_Get_Adv
push	OFFSET $SG7051
push	125					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN15@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _num$[ebp], ecx
mov	edx, DWORD PTR _start$[ebp]
add	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR _end$[ebp], edx
mov	eax, DWORD PTR _start$[ebp]
cmp	eax, DWORD PTR _num$[ebp]
jae	SHORT $LN11@FT_Get_Adv
mov	ecx, DWORD PTR _end$[ebp]
cmp	ecx, DWORD PTR _start$[ebp]
jb	SHORT $LN11@FT_Get_Adv
mov	edx, DWORD PTR _end$[ebp]
cmp	edx, DWORD PTR _num$[ebp]
jbe	SHORT $LN12@FT_Get_Adv
push	OFFSET $SG7055
push	130					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
jmp	$LN15@FT_Get_Adv
cmp	DWORD PTR _count$[ebp], 0
jne	SHORT $LN10@FT_Get_Adv
xor	eax, eax
jmp	$LN15@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+84]
mov	DWORD PTR _func$[ebp], eax
cmp	DWORD PTR _func$[ebp], 0
je	SHORT $LN9@FT_Get_Adv
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 3
jne	SHORT $LN8@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
sar	edx, 16					
and	edx, 15					
cmp	edx, 1
jne	SHORT $LN9@FT_Get_Adv
mov	esi, esp
mov	eax, DWORD PTR _padvances$[ebp]
push	eax
mov	ecx, DWORD PTR _flags$[ebp]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	DWORD PTR _func$[ebp]
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _padvances$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	__ft_face_scale_advances
add	esp, 16					
jmp	$LN15@FT_Get_Adv
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 7
je	SHORT $LN9@FT_Get_Adv
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN15@FT_Get_Adv
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 536870912				
je	SHORT $LN5@FT_Get_Adv
push	OFFSET $SG7063
push	149					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN15@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
or	edx, 256				
mov	DWORD PTR _flags$[ebp], edx
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@FT_Get_Adv
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN2@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Load_Glyph
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_Get_Adv
jmp	SHORT $LN2@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
and	edx, 16					
je	SHORT $LN17@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	edx, DWORD PTR [ecx+68]
shl	edx, 10					
mov	DWORD PTR tv168[ebp], edx
jmp	SHORT $LN18@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	edx, DWORD PTR [ecx+64]
shl	edx, 10					
mov	DWORD PTR tv168[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _padvances$[ebp]
mov	edx, DWORD PTR tv168[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN3@FT_Get_Adv
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Advance PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@FT_Get_Adv
push	OFFSET $SG7020
push	81					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Get_Adv
cmp	DWORD PTR _padvance$[ebp], 0
jne	SHORT $LN6@FT_Get_Adv
push	OFFSET $SG7022
push	84					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _gindex$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jb	SHORT $LN5@FT_Get_Adv
push	OFFSET $SG7025
push	87					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
jmp	$LN8@FT_Get_Adv
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+84]
mov	DWORD PTR _func$[ebp], edx
cmp	DWORD PTR _func$[ebp], 0
je	SHORT $LN4@FT_Get_Adv
mov	eax, DWORD PTR _flags$[ebp]
and	eax, 3
jne	SHORT $LN3@FT_Get_Adv
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 16					
and	ecx, 15					
cmp	ecx, 1
jne	SHORT $LN4@FT_Get_Adv
mov	esi, esp
mov	edx, DWORD PTR _padvance$[ebp]
push	edx
mov	eax, DWORD PTR _flags$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _gindex$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	DWORD PTR _func$[ebp]
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
jne	SHORT $LN2@FT_Get_Adv
mov	eax, DWORD PTR _flags$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _padvance$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	__ft_face_scale_advances
add	esp, 16					
jmp	SHORT $LN8@FT_Get_Adv
mov	eax, DWORD PTR _error$1[ebp]
and	eax, 255				
cmp	eax, 7
je	SHORT $LN4@FT_Get_Adv
mov	eax, DWORD PTR _error$1[ebp]
jmp	SHORT $LN8@FT_Get_Adv
mov	ecx, DWORD PTR _padvance$[ebp]
push	ecx
mov	edx, DWORD PTR _flags$[ebp]
push	edx
push	1
mov	eax, DWORD PTR _gindex$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Get_Advances
add	esp, 20					
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Render_Glyph_Internal PROC
push	ebp
mov	ebp, esp
sub	esp, 256				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-256]
mov	ecx, 64					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+72]
mov	DWORD PTR tv65[ebp], ecx
cmp	DWORD PTR tv65[ebp], 1651078259		
je	SHORT $LN27@FT_Render_
jmp	SHORT $LN26@FT_Render_
jmp	$LN28@FT_Render_
mov	DWORD PTR _node$7[ebp], 0
mov	BYTE PTR _update$6[ebp], 0
mov	edx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [edx+72], 1869968492		
jne	SHORT $LN25@FT_Render_
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR _renderer$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+148]
mov	DWORD PTR _node$7[ebp], eax
jmp	SHORT $LN24@FT_Render_
lea	ecx, DWORD PTR _node$7[ebp]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+72]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	DWORD PTR _error$[ebp], 7
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN22@FT_Render_
mov	esi, esp
push	0
mov	edx, DWORD PTR _render_mode$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _renderer$[ebp]
push	ecx
mov	edx, DWORD PTR _renderer$[ebp]
mov	eax, DWORD PTR [edx+60]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@FT_Render_
mov	ecx, DWORD PTR _error$[ebp]
and	ecx, 255				
cmp	ecx, 19					
je	SHORT $LN21@FT_Render_
jmp	SHORT $LN22@FT_Render_
lea	edx, DWORD PTR _node$7[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+72]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	BYTE PTR _update$6[ebp], 1
jmp	SHORT $LN23@FT_Render_
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN28@FT_Render_
movzx	eax, BYTE PTR _update$6[ebp]
test	eax, eax
je	SHORT $LN28@FT_Render_
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN28@FT_Render_
push	0
push	0
mov	ecx, DWORD PTR _renderer$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Set_Renderer
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN17@FT_Render_
lea	eax, DWORD PTR _bitmap$5[ebp]
push	eax
call	_FT_Bitmap_New
add	esp, 4
push	1
lea	ecx, DWORD PTR _bitmap$5[ebp]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
add	edx, 76					
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Bitmap_Convert
add	esp, 16					
mov	DWORD PTR _err$4[ebp], eax
cmp	DWORD PTR _err$4[ebp], 0
jne	$LN16@FT_Render_
lea	ecx, DWORD PTR _ctx$3[ebp]
push	ecx
call	_MD5_Init
add	esp, 4
mov	edx, DWORD PTR _bitmap$5[ebp]
imul	edx, DWORD PTR _bitmap$5[ebp+8]
push	edx
mov	eax, DWORD PTR _bitmap$5[ebp+12]
push	eax
lea	ecx, DWORD PTR _ctx$3[ebp]
push	ecx
call	_MD5_Update
add	esp, 12					
lea	edx, DWORD PTR _ctx$3[ebp]
push	edx
lea	eax, DWORD PTR _md5$2[ebp]
push	eax
call	_MD5_Final
add	esp, 8
mov	ecx, 4
shl	ecx, 4
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN14@FT_Render_
mov	edx, DWORD PTR _bitmap$5[ebp+8]
push	edx
mov	eax, DWORD PTR _bitmap$5[ebp]
push	eax
push	OFFSET $SG11675
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN15@FT_Render_
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN11@FT_Render_
mov	edx, DWORD PTR _i$1[ebp]
add	edx, 1
mov	DWORD PTR _i$1[ebp], edx
cmp	DWORD PTR _i$1[ebp], 16			
jge	SHORT $LN4@FT_Render_
mov	eax, 4
shl	eax, 4
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN7@FT_Render_
mov	ecx, DWORD PTR _i$1[ebp]
movzx	edx, BYTE PTR _md5$2[ebp+ecx]
push	edx
push	OFFSET $SG11683
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN8@FT_Render_
jmp	SHORT $LN10@FT_Render_
mov	ecx, 4
shl	ecx, 4
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN3@FT_Render_
push	OFFSET $SG11688
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN4@FT_Render_
lea	eax, DWORD PTR _bitmap$5[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Bitmap_Done
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN37@FT_Render_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 256				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	4
DD	$LN36@FT_Render_
DD	-20					
DD	4
DD	$LN32@FT_Render_
DD	-56					
DD	24					
DD	$LN33@FT_Render_
DD	-220					
DD	152					
DD	$LN34@FT_Render_
DD	-244					
DD	16					
DD	$LN35@FT_Render_
DB	109					
DB	100					
DB	53					
DB	0
DB	99					
DB	116					
DB	120					
DB	0
DB	98					
DB	105					
DB	116					
DB	109					
DB	97					
DB	112					
DB	0
DB	110					
DB	111					
DB	100					
DB	101					
DB	0
ENDP
_FT_Lookup_Renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN7@FT_Lookup_
jmp	SHORT $Exit$10
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+148]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN4@FT_Lookup_
mov	edx, DWORD PTR _node$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN5@FT_Lookup_
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $Exit$10
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _renderer$1[ebp], edx
mov	eax, DWORD PTR _renderer$1[ebp]
mov	ecx, DWORD PTR [eax+16]
cmp	ecx, DWORD PTR _format$[ebp]
jne	SHORT $LN2@FT_Lookup_
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN1@FT_Lookup_
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _cur$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _renderer$1[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $Exit$10
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _cur$[ebp], eax
jmp	SHORT $LN4@FT_Lookup_
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_glyphslot_set_bitmap PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_ft_glyphslot_free_bitmap
add	esp, 4
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _buffer$[ebp]
mov	DWORD PTR [ecx+88], edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx+4]
and	edx, 1
je	SHORT $LN3@ft_glyphsl
push	OFFSET $SG9412
push	315					
push	OFFSET $SG9413
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@ft_glyphsl
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_glyphslot_alloc_bitmap PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx+4]
and	edx, 1
je	SHORT $LN5@ft_glyphsl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+88], 0
xor	ecx, ecx
jne	SHORT $LN4@ft_glyphsl
jmp	SHORT $LN1@ft_glyphsl
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	ecx, DWORD PTR [eax+4]
or	ecx, 1
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	DWORD PTR [eax+4], ecx
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+88], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@ft_glyphsl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN9@ft_glyphsl
DD	-12					
DD	4
DD	$LN8@ft_glyphsl
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_glyphslot_free_bitmap PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+156], 0
je	SHORT $LN5@ft_glyphsl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx+4]
and	eax, 1
je	SHORT $LN5@ft_glyphsl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+88]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+88], 0
xor	edx, edx
jne	SHORT $LN4@ft_glyphsl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx+4]
and	edx, -2					
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR [ecx+4], edx
jmp	SHORT $LN6@ft_glyphsl
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+88], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_synthesize_vertical_metrics PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _height$[ebp], ecx
mov	edx, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [edx+12], 0
jge	SHORT $LN5@ft_synthes
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _height$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jge	SHORT $LN4@ft_synthes
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _height$[ebp], eax
jmp	SHORT $LN3@ft_synthes
mov	ecx, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [ecx+12], 0
jle	SHORT $LN3@ft_synthes
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _height$[ebp]
sub	eax, DWORD PTR [edx+12]
mov	DWORD PTR _height$[ebp], eax
cmp	DWORD PTR _advance$[ebp], 0
jne	SHORT $LN1@ft_synthes
imul	eax, DWORD PTR _height$[ebp], 12
cdq
mov	ecx, 10					
idiv	ecx
mov	DWORD PTR _advance$[ebp], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+16]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
sub	edx, eax
mov	eax, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [eax+20], edx
mov	eax, DWORD PTR _advance$[ebp]
sub	eax, DWORD PTR _height$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+24], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _advance$[ebp]
mov	DWORD PTR [edx+28], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Match_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
jne	SHORT $LN16@FT_Match_S
push	OFFSET $SG10562
push	2562					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN17@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN15@FT_Match_S
push	OFFSET $SG10564
push	2566					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN17@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+12], 0
je	SHORT $LN19@FT_Match_S
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [ecx+4]
imul	eax, DWORD PTR [edx+12]
add	eax, 36					
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv87[ebp], eax
jmp	SHORT $LN20@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR tv87[ebp], eax
mov	ecx, DWORD PTR tv87[ebp]
mov	DWORD PTR _w$[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+16], 0
je	SHORT $LN21@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [eax+8]
imul	eax, DWORD PTR [ecx+16]
add	eax, 36					
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv128[ebp], eax
jmp	SHORT $LN22@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR tv128[ebp], eax
mov	ecx, DWORD PTR tv128[ebp]
mov	DWORD PTR _h$[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+4], 0
je	SHORT $LN14@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+8], 0
jne	SHORT $LN14@FT_Match_S
mov	ecx, DWORD PTR _w$[ebp]
mov	DWORD PTR _h$[ebp], ecx
jmp	SHORT $LN13@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN13@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN13@FT_Match_S
mov	ecx, DWORD PTR _h$[ebp]
mov	DWORD PTR _w$[ebp], ecx
mov	edx, DWORD PTR _w$[ebp]
add	edx, 32					
and	edx, -64				
mov	DWORD PTR _w$[ebp], edx
mov	eax, DWORD PTR _h$[ebp]
add	eax, 32					
and	eax, -64				
mov	DWORD PTR _h$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN11@FT_Match_S
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+28]
jge	SHORT $LN9@FT_Match_S
mov	ecx, DWORD PTR _i$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _face$[ebp]
add	ecx, DWORD PTR [edx+32]
mov	DWORD PTR _bsize$1[ebp], ecx
mov	eax, DWORD PTR _bsize$1[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32					
and	ecx, -64				
cmp	DWORD PTR _h$[ebp], ecx
je	SHORT $LN8@FT_Match_S
jmp	SHORT $LN10@FT_Match_S
mov	edx, DWORD PTR _bsize$1[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 32					
and	eax, -64				
cmp	DWORD PTR _w$[ebp], eax
je	SHORT $LN5@FT_Match_S
movzx	ecx, BYTE PTR _ignore_width$[ebp]
test	ecx, ecx
je	SHORT $LN7@FT_Match_S
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN4@FT_Match_S
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10581
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN5@FT_Match_S
cmp	DWORD PTR _size_index$[ebp], 0
je	SHORT $LN1@FT_Match_S
mov	eax, DWORD PTR _size_index$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
mov	DWORD PTR [eax], ecx
xor	eax, eax
jmp	SHORT $LN17@FT_Match_S
jmp	$LN10@FT_Match_S
push	OFFSET $SG10584
push	2598					
push	23					
call	_FT_Throw
add	esp, 12					
or	eax, 23					
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Request_Metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 12					
mov	DWORD PTR _metrics$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	$LN59@FT_Request
mov	DWORD PTR _w$4[ebp], 0
mov	DWORD PTR _h$3[ebp], 0
mov	DWORD PTR _scaled_w$2[ebp], 0
mov	DWORD PTR _scaled_h$1[ebp], 0
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR tv70[ebp], edx
cmp	DWORD PTR tv70[ebp], 4
ja	$LN57@FT_Request
mov	eax, DWORD PTR tv70[ebp]
jmp	DWORD PTR $LN66@FT_Request[eax*4]
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+68]
mov	DWORD PTR _h$3[ebp], edx
mov	eax, DWORD PTR _h$3[ebp]
mov	DWORD PTR _w$4[ebp], eax
jmp	$LN57@FT_Request
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+70]
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+72]
sub	edx, ecx
mov	DWORD PTR _h$3[ebp], edx
mov	edx, DWORD PTR _h$3[ebp]
mov	DWORD PTR _w$4[ebp], edx
jmp	$LN57@FT_Request
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [eax+60]
sub	edx, DWORD PTR [ecx+52]
mov	DWORD PTR _w$4[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [eax+64]
sub	edx, DWORD PTR [ecx+56]
mov	DWORD PTR _h$3[ebp], edx
jmp	SHORT $LN57@FT_Request
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+76]
mov	DWORD PTR _w$4[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+70]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+72]
sub	eax, edx
mov	DWORD PTR _h$3[ebp], eax
jmp	SHORT $LN57@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN51@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+4], eax
jmp	SHORT $LN49@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [ecx+8], 0
jne	SHORT $LN49@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+8], ecx
jmp	$Calculate_Ppem$67
cmp	DWORD PTR _w$4[ebp], 0
jge	SHORT $LN47@FT_Request
mov	edx, DWORD PTR _w$4[ebp]
neg	edx
mov	DWORD PTR _w$4[ebp], edx
cmp	DWORD PTR _h$3[ebp], 0
jge	SHORT $LN46@FT_Request
mov	eax, DWORD PTR _h$3[ebp]
neg	eax
mov	DWORD PTR _h$3[ebp], eax
mov	ecx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [ecx+12], 0
je	SHORT $LN62@FT_Request
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR _req$[ebp]
mov	ecx, DWORD PTR [edx+4]
imul	ecx, DWORD PTR [eax+12]
add	ecx, 36					
mov	eax, ecx
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv148[ebp], eax
jmp	SHORT $LN63@FT_Request
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR tv148[ebp], eax
mov	ecx, DWORD PTR tv148[ebp]
mov	DWORD PTR _scaled_w$2[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+16], 0
je	SHORT $LN64@FT_Request
mov	eax, DWORD PTR _req$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [eax+8]
imul	eax, DWORD PTR [ecx+16]
add	eax, 36					
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv157[ebp], eax
jmp	SHORT $LN65@FT_Request
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR tv157[ebp], eax
mov	ecx, DWORD PTR tv157[ebp]
mov	DWORD PTR _scaled_h$1[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+4], 0
je	$LN45@FT_Request
mov	eax, DWORD PTR _w$4[ebp]
push	eax
mov	ecx, DWORD PTR _scaled_w$2[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN44@FT_Request
mov	ecx, DWORD PTR _h$3[ebp]
push	ecx
mov	edx, DWORD PTR _scaled_h$1[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx], 3
jne	SHORT $LN41@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jle	SHORT $LN42@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+8], edx
jmp	SHORT $LN41@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+4], edx
jmp	SHORT $LN40@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _w$4[ebp]
push	eax
mov	ecx, DWORD PTR _h$3[ebp]
push	ecx
mov	edx, DWORD PTR _scaled_w$2[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _scaled_h$1[ebp], eax
jmp	SHORT $Calculate_Ppem$67
mov	eax, DWORD PTR _h$3[ebp]
push	eax
mov	ecx, DWORD PTR _scaled_h$1[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR tv187[ebp], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR tv187[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR tv187[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _h$3[ebp]
push	eax
mov	ecx, DWORD PTR _w$4[ebp]
push	ecx
mov	edx, DWORD PTR _scaled_h$1[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _scaled_w$2[ebp], eax
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN38@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
push	ecx
call	_FT_MulFix
add	esp, 8
mov	DWORD PTR _scaled_w$2[ebp], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+68]
push	edx
call	_FT_MulFix
add	esp, 8
mov	DWORD PTR _scaled_h$1[ebp], eax
mov	eax, DWORD PTR _scaled_w$2[ebp]
add	eax, 32					
sar	eax, 6
mov	ecx, DWORD PTR _metrics$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _scaled_h$1[ebp]
add	edx, 32					
sar	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	WORD PTR [eax+2], dx
mov	ecx, DWORD PTR _metrics$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_ft_recompute_scaled_metrics
add	esp, 8
jmp	SHORT $LN37@FT_Request
push	28					
push	0
mov	eax, DWORD PTR _metrics$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], 65536		
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+8], 65536		
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN33@FT_Request
push	OFFSET $SG10704
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN37@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN29@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
push	OFFSET $SG10709
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN34@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN25@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
push	OFFSET $SG10714
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN30@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN21@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10719
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN26@FT_Request
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN17@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10724
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN22@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN13@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10729
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN18@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN9@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10734
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@FT_Request
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG10739
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN10@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN1@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx+2]
push	eax
push	OFFSET $SG10744
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN6@FT_Request
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	$LN56@FT_Request
DD	$LN55@FT_Request
DD	$LN54@FT_Request
DD	$LN53@FT_Request
DD	$LN52@FT_Request
ENDP
_FT_Select_Metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 12					
mov	DWORD PTR _metrics$[ebp], ecx
mov	edx, DWORD PTR _strike_index$[ebp]
shl	edx, 4
mov	eax, DWORD PTR _face$[ebp]
add	edx, DWORD PTR [eax+32]
mov	DWORD PTR _bsize$[ebp], edx
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 32					
sar	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	WORD PTR [eax], dx
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32					
sar	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	WORD PTR [eax+2], dx
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 1
je	SHORT $LN38@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
push	ecx
mov	edx, DWORD PTR _bsize$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+68]
push	eax
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_ft_recompute_scaled_metrics
add	esp, 8
jmp	SHORT $LN37@FT_Select_
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], 65536		
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+8], 65536		
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [eax+16], 0
mov	ecx, DWORD PTR _bsize$[ebp]
movsx	edx, WORD PTR [ecx]
shl	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [eax+20], edx
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR _bsize$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+24], eax
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN33@FT_Select_
push	OFFSET $SG10617
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN37@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN29@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
push	OFFSET $SG10622
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN34@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN25@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
push	OFFSET $SG10627
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN30@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN21@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10632
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN26@FT_Select_
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN17@FT_Select_
mov	ecx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10637
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN22@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN13@FT_Select_
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10642
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN18@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN9@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10647
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN14@FT_Select_
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN5@FT_Select_
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx]
push	edx
push	OFFSET $SG10652
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN10@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN1@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
push	ecx
push	OFFSET $SG10657
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN6@FT_Select_
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Done_GlyphSlot PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _slot$[ebp], 0
je	$LN11@FT_Done_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$4[ebp], edx
mov	eax, DWORD PTR _driver$4[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$3[ebp], ecx
mov	DWORD PTR _prev$2[ebp], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _cur$1[ebp], ecx
cmp	DWORD PTR _cur$1[ebp], 0
je	$LN11@FT_Done_Gl
mov	edx, DWORD PTR _cur$1[ebp]
cmp	edx, DWORD PTR _slot$[ebp]
jne	SHORT $LN7@FT_Done_Gl
cmp	DWORD PTR _prev$2[ebp], 0
jne	SHORT $LN6@FT_Done_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _cur$1[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+84], eax
jmp	SHORT $LN5@FT_Done_Gl
mov	ecx, DWORD PTR _prev$2[ebp]
mov	edx, DWORD PTR _cur$1[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN4@FT_Done_Gl
mov	esi, esp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_done
add	esp, 4
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$3[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _slot$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_Done_Gl
jmp	SHORT $LN11@FT_Done_Gl
mov	eax, DWORD PTR _cur$1[ebp]
mov	DWORD PTR _prev$2[ebp], eax
mov	ecx, DWORD PTR _cur$1[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _cur$1[ebp], edx
jmp	$LN9@FT_Done_Gl
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_New_GlyphSlot PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _slot$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN18@FT_New_Gly
push	OFFSET $SG9461
push	412					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN19@FT_New_Gly
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+96], 0
jne	SHORT $LN17@FT_New_Gly
push	OFFSET $SG9463
push	415					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN19@FT_New_Gly
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN15@FT_New_Gly
push	OFFSET $SG9468
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN16@FT_New_Gly
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+44]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _slot$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN12@FT_New_Gly
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
call	_ft_glyphslot_init
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@FT_New_Gly
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_done
add	esp, 4
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _slot$[ebp], 0
xor	edx, edx
jne	SHORT $LN10@FT_New_Gly
jmp	SHORT $Exit$24
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+84], ecx
cmp	DWORD PTR _aslot$[ebp], 0
je	SHORT $LN7@FT_New_Gly
mov	edx, DWORD PTR _aslot$[ebp]
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $Exit$24
cmp	DWORD PTR _aslot$[ebp], 0
je	SHORT $Exit$24
mov	ecx, DWORD PTR _aslot$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@FT_New_Gly
mov	ecx, DWORD PTR _error$[ebp]
push	ecx
push	OFFSET $SG9484
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $Exit$24
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN23@FT_New_Gly
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN22@FT_New_Gly
DD	-8					
DD	4
DD	$LN21@FT_New_Gly
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_module_get_service PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _module$[ebp], 0
je	$LN18@ft_module_
mov	eax, DWORD PTR _module$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN13@ft_module_
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
jne	SHORT $LN16@ft_module_
push	OFFSET $SG11810
push	4433					
push	OFFSET $SG11811
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN17@ft_module_
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN12@ft_module_
mov	esi, esp
mov	eax, DWORD PTR _service_id$[ebp]
push	eax
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
jne	$LN18@ft_module_
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$3[ebp], eax
mov	ecx, DWORD PTR _library$3[ebp]
add	ecx, 20					
mov	DWORD PTR _cur$2[ebp], ecx
mov	edx, DWORD PTR _library$3[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _cur$2[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _limit$1[ebp], edx
jmp	SHORT $LN10@ft_module_
mov	eax, DWORD PTR _cur$2[ebp]
add	eax, 4
mov	DWORD PTR _cur$2[ebp], eax
mov	ecx, DWORD PTR _cur$2[ebp]
cmp	ecx, DWORD PTR _limit$1[ebp]
jae	$LN18@ft_module_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$2[ebp]
mov	edx, DWORD PTR [ecx+eax]
cmp	edx, DWORD PTR _module$[ebp]
je	$LN7@ft_module_
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$2[ebp]
mov	eax, DWORD PTR [edx+ecx]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN5@ft_module_
push	OFFSET $SG11826
push	4451					
push	OFFSET $SG11827
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@ft_module_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$2[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN7@ft_module_
mov	esi, esp
mov	ecx, DWORD PTR _service_id$[ebp]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$2[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$2[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+32]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN7@ft_module_
jmp	SHORT $LN18@ft_module_
jmp	$LN9@ft_module_
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Module_Interface PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _mod_name$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$[ebp], eax
cmp	DWORD PTR _module$[ebp], 0
je	SHORT $LN3@FT_Get_Mod
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR tv70[ebp], ecx
jmp	SHORT $LN4@FT_Get_Mod
mov	DWORD PTR tv70[ebp], 0
mov	eax, DWORD PTR tv70[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_CMap_Done PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _cmap$[ebp], 0
je	$LN13@FT_CMap_Do
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$6[ebp], ecx
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$5[ebp], eax
mov	DWORD PTR _i$3[ebp], 0
jmp	SHORT $LN11@FT_CMap_Do
mov	ecx, DWORD PTR _i$3[ebp]
add	ecx, 1
mov	DWORD PTR _i$3[ebp], ecx
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR _i$3[ebp]
cmp	eax, DWORD PTR [edx+36]
jge	$LN13@FT_CMap_Do
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	eax, DWORD PTR _i$3[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
cmp	ecx, DWORD PTR _cmap$[ebp]
jne	$LN8@FT_CMap_Do
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	eax, DWORD PTR [edx+eax*4-4]
mov	DWORD PTR _last_charmap$1[ebp], eax
lea	ecx, DWORD PTR _error$4[ebp]
push	ecx
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR [ecx+36]
sub	edx, 1
push	edx
mov	eax, DWORD PTR _face$6[ebp]
mov	ecx, DWORD PTR [eax+36]
push	ecx
push	4
mov	edx, DWORD PTR _memory$5[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _face$6[ebp]
mov	DWORD PTR [ecx+40], eax
cmp	DWORD PTR _error$4[ebp], 0
je	SHORT $LN7@FT_CMap_Do
jmp	$LN13@FT_CMap_Do
mov	edx, DWORD PTR _i$3[ebp]
add	edx, 1
mov	DWORD PTR _j$2[ebp], edx
jmp	SHORT $LN6@FT_CMap_Do
mov	eax, DWORD PTR _j$2[ebp]
add	eax, 1
mov	DWORD PTR _j$2[ebp], eax
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR _j$2[ebp]
cmp	edx, DWORD PTR [ecx+36]
jge	SHORT $LN4@FT_CMap_Do
mov	eax, DWORD PTR _face$6[ebp]
mov	ecx, DWORD PTR [eax+36]
sub	ecx, 1
cmp	DWORD PTR _j$2[ebp], ecx
jne	SHORT $LN3@FT_CMap_Do
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _j$2[ebp]
mov	edx, DWORD PTR _last_charmap$1[ebp]
mov	DWORD PTR [eax+ecx*4-4], edx
jmp	SHORT $LN2@FT_CMap_Do
mov	eax, DWORD PTR _face$6[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+40]
mov	edx, DWORD PTR _j$2[ebp]
mov	esi, DWORD PTR _j$2[ebp]
mov	ecx, DWORD PTR [ecx+esi*4]
mov	DWORD PTR [eax+edx*4-4], ecx
jmp	SHORT $LN5@FT_CMap_Do
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+36]
sub	eax, 1
mov	ecx, DWORD PTR _face$6[ebp]
mov	DWORD PTR [ecx+36], eax
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+92]
cmp	eax, DWORD PTR _cmap$[ebp]
jne	SHORT $LN1@FT_CMap_Do
mov	ecx, DWORD PTR _face$6[ebp]
mov	DWORD PTR [ecx+92], 0
mov	edx, DWORD PTR _cmap$[ebp]
push	edx
call	_ft_cmap_done_internal
add	esp, 4
jmp	SHORT $LN13@FT_CMap_Do
jmp	$LN10@FT_CMap_Do
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN17@FT_CMap_Do
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN16@FT_CMap_Do
DD	-16					
DD	4
DD	$LN15@FT_CMap_Do
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_CMap_New PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _cmap$[ebp], 0
cmp	DWORD PTR _clazz$[ebp], 0
je	SHORT $LN6@FT_CMap_Ne
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN6@FT_CMap_Ne
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN7@FT_CMap_Ne
push	OFFSET $SG11069
push	3299					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_CMap_Ne
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _cmap$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$13
mov	eax, DWORD PTR _charmap$[ebp]
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR _clazz$[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN4@FT_CMap_Ne
mov	esi, esp
mov	ecx, DWORD PTR _init_data$[ebp]
push	ecx
mov	edx, DWORD PTR _cmap$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+4]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@FT_CMap_Ne
jmp	SHORT $Fail$14
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+36]
push	edx
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+40], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_CMap_Ne
jmp	SHORT $Fail$14
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	ecx, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [edx+eax*4], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
add	eax, 1
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+36], eax
cmp	DWORD PTR _acmap$[ebp], 0
je	SHORT $LN1@FT_CMap_Ne
mov	edx, DWORD PTR _acmap$[ebp]
mov	eax, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN8@FT_CMap_Ne
mov	ecx, DWORD PTR _cmap$[ebp]
push	ecx
call	_ft_cmap_done_internal
add	esp, 4
mov	DWORD PTR _cmap$[ebp], 0
jmp	SHORT $Exit$13
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_CMap_Ne
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN11@FT_CMap_Ne
DD	-8					
DD	4
DD	$LN10@FT_CMap_Ne
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_service_list_lookup PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _service_descriptors$[ebp]
mov	DWORD PTR _desc$[ebp], eax
cmp	DWORD PTR _desc$[ebp], 0
je	SHORT $LN5@ft_service
cmp	DWORD PTR _service_id$[ebp], 0
je	SHORT $LN5@ft_service
jmp	SHORT $LN4@ft_service
mov	ecx, DWORD PTR _desc$[ebp]
add	ecx, 8
mov	DWORD PTR _desc$[ebp], ecx
mov	edx, DWORD PTR _desc$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN5@ft_service
mov	eax, DWORD PTR _service_id$[ebp]
push	eax
mov	ecx, DWORD PTR _desc$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN1@ft_service
mov	eax, DWORD PTR _desc$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN5@ft_service
jmp	SHORT $LN3@ft_service
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_CopyPoints PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+22]
mov	DWORD PTR _num_points$[ebp], ecx
mov	edx, DWORD PTR _source$[ebp]
movsx	eax, WORD PTR [edx+20]
mov	DWORD PTR _num_contours$[ebp], eax
mov	ecx, DWORD PTR _num_contours$[ebp]
push	ecx
mov	edx, DWORD PTR _num_points$[ebp]
push	edx
mov	eax, DWORD PTR _target$[ebp]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN2@FT_GlyphLo
mov	ecx, DWORD PTR _target$[ebp]
add	ecx, 20					
mov	DWORD PTR _out$2[ebp], ecx
mov	edx, DWORD PTR _source$[ebp]
add	edx, 20					
mov	DWORD PTR _in$1[ebp], edx
mov	eax, DWORD PTR _num_points$[ebp]
shl	eax, 3
push	eax
mov	ecx, DWORD PTR _in$1[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _out$2[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _num_points$[ebp]
push	edx
mov	eax, DWORD PTR _in$1[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _out$2[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _num_contours$[ebp]
shl	ecx, 1
push	ecx
mov	edx, DWORD PTR _in$1[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _out$2[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _target$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	SHORT $LN1@FT_GlyphLo
mov	edx, DWORD PTR _source$[ebp]
movzx	eax, BYTE PTR [edx+16]
test	eax, eax
je	SHORT $LN1@FT_GlyphLo
mov	ecx, DWORD PTR _num_points$[ebp]
shl	ecx, 3
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+40]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _num_points$[ebp]
shl	eax, 3
push	eax
mov	ecx, DWORD PTR _source$[ebp]
mov	edx, DWORD PTR [ecx+44]
push	edx
mov	eax, DWORD PTR _target$[ebp]
mov	ecx, DWORD PTR [eax+44]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _out$2[ebp]
mov	ax, WORD PTR _num_points$[ebp]
mov	WORD PTR [edx+2], ax
mov	ecx, DWORD PTR _out$2[ebp]
mov	dx, WORD PTR _num_contours$[ebp]
mov	WORD PTR [ecx], dx
mov	eax, DWORD PTR _target$[ebp]
push	eax
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Add PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _loader$[ebp], 0
jne	SHORT $LN4@FT_GlyphLo
jmp	$LN5@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx]
mov	DWORD PTR _n_curr_contours$[ebp], eax
mov	ecx, DWORD PTR _base$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	DWORD PTR _n_base_points$[ebp], edx
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx+2]
add	ecx, eax
mov	edx, DWORD PTR _base$[ebp]
mov	WORD PTR [edx+2], cx
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx]
add	ecx, eax
mov	edx, DWORD PTR _base$[ebp]
mov	WORD PTR [edx], cx
mov	eax, DWORD PTR _base$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _current$[ebp]
add	ecx, DWORD PTR [edx+28]
mov	eax, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax+28], ecx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN3@FT_GlyphLo
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _n_curr_contours$[ebp]
jae	SHORT $LN1@FT_GlyphLo
mov	eax, DWORD PTR _current$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR _n$[ebp]
movsx	eax, WORD PTR [ecx+edx*2]
add	eax, DWORD PTR _n_base_points$[ebp]
mov	ecx, DWORD PTR _current$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	ecx, DWORD PTR _n$[ebp]
mov	WORD PTR [edx+ecx*2], ax
jmp	SHORT $LN2@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Prepare
add	esp, 4
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Prepare PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 56					
mov	DWORD PTR _current$[ebp], eax
xor	ecx, ecx
mov	edx, DWORD PTR _current$[ebp]
mov	WORD PTR [edx+2], cx
xor	eax, eax
mov	ecx, DWORD PTR _current$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+28], 0
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_FT_GlyphLoader_Adjust_Subglyphs
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_CheckSubGlyphs PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _loader$[ebp]
add	edx, 20					
mov	DWORD PTR _base$[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 56					
mov	DWORD PTR _current$[ebp], eax
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _current$[ebp]
add	edx, DWORD PTR [eax+28]
add	edx, DWORD PTR _n_subs$[ebp]
mov	DWORD PTR _new_max$[ebp], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _old_max$[ebp], edx
mov	eax, DWORD PTR _new_max$[ebp]
cmp	eax, DWORD PTR _old_max$[ebp]
jbe	SHORT $Exit$8
mov	ecx, DWORD PTR _new_max$[ebp]
add	ecx, 1
and	ecx, -2					
mov	DWORD PTR _new_max$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base$[ebp]
mov	ecx, DWORD PTR [eax+32]
push	ecx
mov	edx, DWORD PTR _new_max$[ebp]
push	edx
mov	eax, DWORD PTR _old_max$[ebp]
push	eax
push	32					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _base$[ebp]
mov	DWORD PTR [edx+32], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_GlyphLo
jmp	SHORT $Exit$8
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Adjust_Subglyphs
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN6@FT_GlyphLo
DD	-12					
DD	4
DD	$LN5@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_GlyphLoader_CheckPoints PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _loader$[ebp]
add	edx, 20					
mov	DWORD PTR _base$[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 56					
mov	DWORD PTR _current$[ebp], eax
mov	BYTE PTR _adjust$[ebp], 0
mov	ecx, DWORD PTR _base$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _current$[ebp]
movsx	ecx, WORD PTR [eax+2]
add	edx, DWORD PTR _n_points$[ebp]
add	ecx, edx
mov	DWORD PTR _new_max$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _old_max$[ebp], eax
mov	ecx, DWORD PTR _new_max$[ebp]
cmp	ecx, DWORD PTR _old_max$[ebp]
jbe	$LN11@FT_GlyphLo
mov	edx, DWORD PTR _new_max$[ebp]
add	edx, 7
and	edx, -8					
mov	DWORD PTR _new_max$[ebp], edx
cmp	DWORD PTR _new_max$[ebp], 32767		
jbe	SHORT $LN10@FT_GlyphLo
push	OFFSET $SG7524
push	223					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	$LN12@FT_GlyphLo
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _new_max$[ebp]
push	eax
mov	ecx, DWORD PTR _old_max$[ebp]
push	ecx
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN8@FT_GlyphLo
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _new_max$[ebp]
push	edx
mov	eax, DWORD PTR _old_max$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _base$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@FT_GlyphLo
jmp	$Exit$17
mov	eax, DWORD PTR _loader$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	SHORT $LN7@FT_GlyphLo
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
mov	edx, DWORD PTR _new_max$[ebp]
shl	edx, 1
push	edx
mov	eax, DWORD PTR _old_max$[ebp]
shl	eax, 1
push	eax
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+40], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@FT_GlyphLo
jmp	$Exit$17
mov	eax, DWORD PTR _old_max$[ebp]
shl	eax, 3
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	eax, DWORD PTR _old_max$[ebp]
lea	ecx, DWORD PTR [edx+eax*8]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _new_max$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
push	edx
call	DWORD PTR __imp__memmove
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _new_max$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+44], eax
mov	BYTE PTR _adjust$[ebp], 1
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _old_max$[ebp], edx
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx]
add	ecx, DWORD PTR _n_contours$[ebp]
add	eax, ecx
mov	DWORD PTR _new_max$[ebp], eax
mov	ecx, DWORD PTR _new_max$[ebp]
cmp	ecx, DWORD PTR _old_max$[ebp]
jbe	SHORT $LN5@FT_GlyphLo
mov	edx, DWORD PTR _new_max$[ebp]
add	edx, 3
and	edx, -4					
mov	DWORD PTR _new_max$[ebp], edx
cmp	DWORD PTR _new_max$[ebp], 32767		
jbe	SHORT $LN4@FT_GlyphLo
push	OFFSET $SG7538
push	255					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	SHORT $LN12@FT_GlyphLo
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _new_max$[ebp]
push	eax
mov	ecx, DWORD PTR _old_max$[ebp]
push	ecx
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@FT_GlyphLo
jmp	SHORT $Exit$17
mov	BYTE PTR _adjust$[ebp], 1
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [edx+8], eax
movzx	ecx, BYTE PTR _adjust$[ebp]
test	ecx, ecx
je	SHORT $Exit$17
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_FT_GlyphLoader_Reset
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN15@FT_GlyphLo
DD	-12					
DD	4
DD	$LN14@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_GlyphLoader_Rewind PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
push	edi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
xor	edx, edx
mov	eax, DWORD PTR _base$[ebp]
mov	WORD PTR [eax+2], dx
xor	ecx, ecx
mov	edx, DWORD PTR _base$[ebp]
mov	WORD PTR [edx], cx
mov	eax, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax+28], 0
mov	ecx, 9
mov	esi, DWORD PTR _base$[ebp]
mov	edi, DWORD PTR _current$[ebp]
rep movsd
pop	edi
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Reset PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+24], 0
xor	eax, eax
jne	SHORT $LN15@FT_GlyphLo
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+28], 0
xor	edx, edx
jne	SHORT $LN12@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+32]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+32], 0
xor	ecx, ecx
jne	SHORT $LN9@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+40], 0
xor	eax, eax
jne	SHORT $LN6@FT_GlyphLo
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+52]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+52], 0
xor	edx, edx
jne	SHORT $LN3@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+44], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_FT_GlyphLoader_Rewind
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _loader$[ebp], 0
je	SHORT $LN5@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Reset
add	esp, 4
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _loader$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_GlyphLo
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_CreateExtra PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
shl	ecx, 1
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+40], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
mov	BYTE PTR [edx+16], 1
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+40]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN5@FT_GlyphLo
DD	-8					
DD	4
DD	$LN4@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_GlyphLoader_New PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _loader$[ebp], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	96					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _loader$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _aloader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN5@FT_GlyphLo
DD	-12					
DD	4
DD	$LN4@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_strcpyn PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _size$[ebp], 1
jbe	SHORT $LN1@ft_mem_str
mov	eax, DWORD PTR _src$[ebp]
movsx	ecx, BYTE PTR [eax]
test	ecx, ecx
je	SHORT $LN1@ft_mem_str
mov	edx, DWORD PTR _dst$[ebp]
mov	eax, DWORD PTR _src$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR [edx], cl
mov	edx, DWORD PTR _dst$[ebp]
add	edx, 1
mov	DWORD PTR _dst$[ebp], edx
mov	eax, DWORD PTR _src$[ebp]
add	eax, 1
mov	DWORD PTR _src$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
sub	ecx, 1
mov	DWORD PTR _size$[ebp], ecx
jmp	SHORT $LN2@ft_mem_str
mov	edx, DWORD PTR _dst$[ebp]
mov	BYTE PTR [edx], 0
mov	eax, DWORD PTR _src$[ebp]
movsx	ecx, BYTE PTR [eax]
test	ecx, ecx
je	SHORT $LN5@ft_mem_str
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN6@ft_mem_str
mov	DWORD PTR tv72[ebp], 0
mov	eax, DWORD PTR tv72[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_mem_dup PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_qalloc
add	esp, 12					
mov	DWORD PTR _p$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@ft_mem_dup
cmp	DWORD PTR _address$[ebp], 0
je	SHORT $LN1@ft_mem_dup
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _address$[ebp]
push	ecx
mov	edx, DWORD PTR _p$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _p_error$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _p$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@ft_mem_dup
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN5@ft_mem_dup
DD	-8					
DD	4
DD	$LN4@ft_mem_dup
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_strdup PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _str$[ebp], 0
je	SHORT $LN3@ft_mem_str
mov	eax, DWORD PTR _str$[ebp]
push	eax
call	_strlen
add	esp, 4
add	eax, 1
mov	DWORD PTR tv68[ebp], eax
jmp	SHORT $LN4@ft_mem_str
mov	DWORD PTR tv68[ebp], 0
mov	ecx, DWORD PTR tv68[ebp]
mov	DWORD PTR _len$[ebp], ecx
mov	edx, DWORD PTR _p_error$[ebp]
push	edx
mov	eax, DWORD PTR _len$[ebp]
push	eax
mov	ecx, DWORD PTR _str$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_dup
add	esp, 16					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_mem_free PROC
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR _P$[ebp], 0
je	SHORT $LN2@ft_mem_fre
mov	esi, esp
mov	eax, DWORD PTR _P$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_mem_qrealloc PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _cur_count$[ebp], 0
jl	SHORT $LN15@ft_mem_qre
cmp	DWORD PTR _new_count$[ebp], 0
jl	SHORT $LN15@ft_mem_qre
cmp	DWORD PTR _item_size$[ebp], 0
jge	SHORT $LN16@ft_mem_qre
push	OFFSET $SG13884
push	131					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$LN14@ft_mem_qre
cmp	DWORD PTR _new_count$[ebp], 0
je	SHORT $LN12@ft_mem_qre
cmp	DWORD PTR _item_size$[ebp], 0
jne	SHORT $LN13@ft_mem_qre
mov	eax, DWORD PTR _block$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _block$[ebp], 0
jmp	$LN14@ft_mem_qre
mov	eax, 2147483647				
cdq
idiv	DWORD PTR _item_size$[ebp]
cmp	DWORD PTR _new_count$[ebp], eax
jle	SHORT $LN10@ft_mem_qre
push	OFFSET $SG13891
push	140					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
mov	DWORD PTR _error$[ebp], eax
jmp	$LN14@ft_mem_qre
cmp	DWORD PTR _cur_count$[ebp], 0
jne	SHORT $LN8@ft_mem_qre
cmp	DWORD PTR _block$[ebp], 0
je	SHORT $LN6@ft_mem_qre
push	OFFSET $SG13899
push	144					
push	OFFSET $SG13900
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN7@ft_mem_qre
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _new_count$[ebp]
imul	ecx, DWORD PTR _item_size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _block$[ebp], eax
jmp	SHORT $LN14@ft_mem_qre
mov	eax, DWORD PTR _cur_count$[ebp]
imul	eax, DWORD PTR _item_size$[ebp]
mov	DWORD PTR _cur_size$2[ebp], eax
mov	ecx, DWORD PTR _new_count$[ebp]
imul	ecx, DWORD PTR _item_size$[ebp]
mov	DWORD PTR _new_size$1[ebp], ecx
mov	esi, esp
mov	edx, DWORD PTR _block$[ebp]
push	edx
mov	eax, DWORD PTR _new_size$1[ebp]
push	eax
mov	ecx, DWORD PTR _cur_size$2[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _block2$3[ebp], eax
cmp	DWORD PTR _block2$3[ebp], 0
jne	SHORT $LN2@ft_mem_qre
push	OFFSET $SG13907
push	157					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN14@ft_mem_qre
mov	edx, DWORD PTR _block2$3[ebp]
mov	DWORD PTR _block$[ebp], edx
mov	eax, DWORD PTR _p_error$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _block$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN21@ft_mem_qre
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN20@ft_mem_qre
DD	-8					
DD	4
DD	$LN19@ft_mem_qre
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_realloc PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _block$[ebp]
push	ecx
mov	edx, DWORD PTR _new_count$[ebp]
push	edx
mov	eax, DWORD PTR _cur_count$[ebp]
push	eax
mov	ecx, DWORD PTR _item_size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_qrealloc
add	esp, 24					
mov	DWORD PTR _block$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@ft_mem_rea
mov	eax, DWORD PTR _new_count$[ebp]
cmp	eax, DWORD PTR _cur_count$[ebp]
jle	SHORT $LN1@ft_mem_rea
mov	ecx, DWORD PTR _new_count$[ebp]
sub	ecx, DWORD PTR _cur_count$[ebp]
imul	ecx, DWORD PTR _item_size$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _cur_count$[ebp]
imul	edx, DWORD PTR _item_size$[ebp]
add	edx, DWORD PTR _block$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _p_error$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _block$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@ft_mem_rea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@ft_mem_rea
DD	-8					
DD	4
DD	$LN4@ft_mem_rea
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_qalloc PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _block$[ebp], 0
cmp	DWORD PTR _size$[ebp], 0
jle	SHORT $LN4@ft_mem_qal
mov	esi, esp
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _block$[ebp], eax
cmp	DWORD PTR _block$[ebp], 0
jne	SHORT $LN3@ft_mem_qal
push	OFFSET $SG13848
push	78					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN2@ft_mem_qal
cmp	DWORD PTR _size$[ebp], 0
jge	SHORT $LN2@ft_mem_qal
push	OFFSET $SG13851
push	83					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _p_error$[ebp]
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _block$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_mem_alloc PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_qalloc
add	esp, 12					
mov	DWORD PTR _block$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@ft_mem_all
cmp	DWORD PTR _size$[ebp], 0
jle	SHORT $LN1@ft_mem_all
mov	eax, DWORD PTR _size$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _block$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _p_error$[ebp]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _block$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@ft_mem_all
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN5@ft_mem_all
DD	-8					
DD	4
DD	$LN4@ft_mem_all
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Activate_Size PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN3@FT_Activat
push	OFFSET $SG11528
push	3822					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	SHORT $LN4@FT_Activat
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN1@FT_Activat
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+96], 0
jne	SHORT $LN2@FT_Activat
push	OFFSET $SG11531
push	3826					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN4@FT_Activat
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+88], ecx
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Done_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN10@FT_Done_Si
push	OFFSET $SG10534
push	2514					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN11@FT_Done_Si
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN9@FT_Done_Si
push	OFFSET $SG10536
push	2518					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN11@FT_Done_Si
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _driver$[ebp], eax
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN8@FT_Done_Si
push	OFFSET $SG10538
push	2522					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
jmp	$LN11@FT_Done_Si
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _memory$[ebp], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 108				
push	ecx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@FT_Done_Si
mov	edx, DWORD PTR _node$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
add	eax, 108				
push	eax
call	_FT_List_Remove
add	esp, 8
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	eax, eax
jne	SHORT $LN6@FT_Done_Si
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
cmp	edx, DWORD PTR _size$[ebp]
jne	SHORT $LN3@FT_Done_Si
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+88], 0
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+108], 0
je	SHORT $LN3@FT_Done_Si
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+108]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+88], edx
mov	eax, DWORD PTR _driver$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_destroy_size
add	esp, 12					
jmp	SHORT $LN1@FT_Done_Si
push	OFFSET $SG10548
push	2543					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_New_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _size$[ebp], 0
mov	DWORD PTR _node$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN14@FT_New_Siz
push	OFFSET $SG10504
push	2456					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN15@FT_New_Siz
cmp	DWORD PTR _asize$[ebp], 0
jne	SHORT $LN13@FT_New_Siz
push	OFFSET $SG10506
push	2459					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN15@FT_New_Siz
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+96], 0
jne	SHORT $LN12@FT_New_Siz
push	OFFSET $SG10508
push	2462					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
jmp	$LN15@FT_New_Siz
mov	ecx, DWORD PTR _asize$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _clazz$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _size$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@FT_New_Siz
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	12					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@FT_New_Siz
jmp	SHORT $Exit$20
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+40], 0
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+56], 0
je	SHORT $LN9@FT_New_Siz
mov	esi, esp
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+56]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $Exit$20
mov	eax, DWORD PTR _asize$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 108				
push	edx
call	_FT_List_Add
add	esp, 8
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@FT_New_Siz
mov	eax, DWORD PTR _node$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	edx, edx
jne	SHORT $LN6@FT_New_Siz
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _size$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_New_Siz
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@FT_New_Siz
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN18@FT_New_Siz
DD	-8					
DD	4
DD	$LN17@FT_New_Siz
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Set_Renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN9@FT_Set_Ren
push	OFFSET $SG11624
push	4027					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
cmp	DWORD PTR _renderer$[ebp], 0
jne	SHORT $LN8@FT_Set_Ren
push	OFFSET $SG11627
push	4033					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
cmp	DWORD PTR _num_params$[ebp], 0
jbe	SHORT $LN7@FT_Set_Ren
cmp	DWORD PTR _parameters$[ebp], 0
jne	SHORT $LN7@FT_Set_Ren
push	OFFSET $SG11629
push	4039					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
mov	eax, DWORD PTR _renderer$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
add	ecx, 148				
push	ecx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN6@FT_Set_Ren
push	OFFSET $SG11631
push	4046					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
mov	edx, DWORD PTR _node$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
add	eax, 148				
push	eax
call	_FT_List_Up
add	esp, 8
mov	ecx, DWORD PTR _renderer$[ebp]
cmp	DWORD PTR [ecx+16], 1869968492		
jne	SHORT $LN5@FT_Set_Ren
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _renderer$[ebp]
mov	DWORD PTR [edx+156], eax
mov	ecx, DWORD PTR _renderer$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR _set_mode$[ebp], eax
jmp	SHORT $LN4@FT_Set_Ren
mov	ecx, DWORD PTR _num_params$[ebp]
sub	ecx, 1
mov	DWORD PTR _num_params$[ebp], ecx
cmp	DWORD PTR _num_params$[ebp], 0
jbe	SHORT $Exit$12
mov	esi, esp
mov	edx, DWORD PTR _parameters$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _parameters$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _renderer$[ebp]
push	eax
call	DWORD PTR _set_mode$[ebp]
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_Set_Ren
jmp	SHORT $Exit$12
mov	ecx, DWORD PTR _parameters$[ebp]
add	ecx, 8
mov	DWORD PTR _parameters$[ebp], ecx
jmp	SHORT $LN3@FT_Set_Ren
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Renderer PROC
push	ebp
mov	ebp, esp
push	0
mov	eax, DWORD PTR _format$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Lookup_Renderer
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Matrix_Invert PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN2@FT_Matrix_
push	OFFSET $SG7351
push	662					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN3@FT_Matrix_
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix
add	esp, 8
sub	esi, eax
mov	DWORD PTR _delta$[ebp], esi
jne	SHORT $LN1@FT_Matrix_
push	OFFSET $SG7353
push	669					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN3@FT_Matrix_
mov	edx, DWORD PTR _delta$[ebp]
push	edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_DivFix
add	esp, 8
neg	eax
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _delta$[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
neg	eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _xx$[ebp], eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _yy$[ebp], edx
mov	eax, DWORD PTR _delta$[ebp]
push	eax
mov	ecx, DWORD PTR _yy$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _delta$[ebp]
push	eax
mov	ecx, DWORD PTR _xx$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx+12], eax
xor	eax, eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Matrix_Multiply PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN1@FT_Matrix_
cmp	DWORD PTR _b$[ebp], 0
jne	SHORT $LN2@FT_Matrix_
jmp	$LN3@FT_Matrix_
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _xx$[ebp], esi
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _xy$[ebp], esi
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _yx$[ebp], esi
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _yy$[ebp], esi
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _xx$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR _xy$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _yx$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _yy$[ebp]
mov	DWORD PTR [edx+12], eax
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_TrueType_Engine_Type PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN3@FT_Get_Tru
push	OFFSET $SG12025
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$2[ebp], eax
cmp	DWORD PTR _module$2[ebp], 0
je	SHORT $LN3@FT_Get_Tru
push	OFFSET $SG12029
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR _service$1[ebp], eax
cmp	DWORD PTR _service$1[ebp], 0
je	SHORT $LN3@FT_Get_Tru
mov	edx, DWORD PTR _service$1[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Debug_Hook PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN2@FT_Set_Deb
cmp	DWORD PTR _debug_hook$[ebp], 0
je	SHORT $LN2@FT_Set_Deb
cmp	DWORD PTR _hook_index$[ebp], 4
jae	SHORT $LN2@FT_Set_Deb
mov	eax, DWORD PTR _hook_index$[ebp]
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR _debug_hook$[ebp]
mov	DWORD PTR [ecx+eax*4+172], edx
pop	ebp
ret	0
ENDP
_FT_Done_Library PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN29@FT_Done_Li
push	OFFSET $SG11963
push	4747					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN30@FT_Done_Li
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+188]
sub	ecx, 1
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+188], ecx
mov	eax, DWORD PTR _library$[ebp]
cmp	DWORD PTR [eax+188], 0
jle	SHORT $LN28@FT_Done_Li
jmp	$Exit$35
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
mov	DWORD PTR _driver_name$4[ebp], OFFSET $SG11971
mov	DWORD PTR _driver_name$4[ebp+4], 0
mov	DWORD PTR _m$6[ebp], 0
jmp	SHORT $LN27@FT_Done_Li
mov	eax, DWORD PTR _m$6[ebp]
add	eax, 1
mov	DWORD PTR _m$6[ebp], eax
cmp	DWORD PTR _m$6[ebp], 2
jae	$LN8@FT_Done_Li
mov	DWORD PTR _n$5[ebp], 0
jmp	SHORT $LN24@FT_Done_Li
mov	ecx, DWORD PTR _n$5[ebp]
add	ecx, 1
mov	DWORD PTR _n$5[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _n$5[ebp]
cmp	eax, DWORD PTR [edx+16]
jae	$LN22@FT_Done_Li
mov	ecx, DWORD PTR _n$5[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+20]
mov	DWORD PTR _module$3[ebp], eax
mov	ecx, DWORD PTR _module$3[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _module_name$2[ebp], eax
mov	ecx, DWORD PTR _m$6[ebp]
cmp	DWORD PTR _driver_name$4[ebp+ecx*4], 0
je	SHORT $LN21@FT_Done_Li
mov	edx, DWORD PTR _m$6[ebp]
mov	eax, DWORD PTR _driver_name$4[ebp+edx*4]
push	eax
mov	ecx, DWORD PTR _module_name$2[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
je	SHORT $LN21@FT_Done_Li
jmp	SHORT $LN23@FT_Done_Li
mov	edx, DWORD PTR _module$3[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 1
jne	SHORT $LN19@FT_Done_Li
jmp	SHORT $LN23@FT_Done_Li
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 7
jl	SHORT $LN18@FT_Done_Li
mov	ecx, DWORD PTR _module_name$2[ebp]
push	ecx
push	OFFSET $SG11987
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN19@FT_Done_Li
mov	eax, DWORD PTR _module$3[ebp]
add	eax, 16					
mov	DWORD PTR _faces$1[ebp], eax
mov	ecx, DWORD PTR _faces$1[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $LN14@FT_Done_Li
mov	edx, DWORD PTR _faces$1[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_FT_Done_Face
add	esp, 4
mov	edx, DWORD PTR _faces$1[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN13@FT_Done_Li
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 0
jl	SHORT $LN11@FT_Done_Li
push	OFFSET $SG11998
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN12@FT_Done_Li
jmp	SHORT $LN15@FT_Done_Li
jmp	$LN23@FT_Done_Li
jmp	$LN26@FT_Done_Li
mov	eax, DWORD PTR _library$[ebp]
cmp	DWORD PTR [eax+16], 0
jbe	SHORT $LN6@FT_Done_Li
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+16]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Remove_Module
add	esp, 8
jmp	SHORT $LN8@FT_Done_Li
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+164]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR [eax+164], 0
xor	ecx, ecx
jne	SHORT $LN6@FT_Done_Li
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+168], 0
mov	eax, DWORD PTR _library$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _library$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_Done_Li
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN34@FT_Done_Li
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN33@FT_Done_Li
DD	-24					
DD	8
DD	$LN32@FT_Done_Li
DB	100					
DB	114					
DB	105					
DB	118					
DB	101					
DB	114					
DB	95					
DB	110					
DB	97					
DB	109					
DB	101					
DB	0
ENDP
_FT_New_Library PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _library$[ebp], 0
cmp	DWORD PTR _memory$[ebp], 0
je	SHORT $LN6@FT_New_Lib
cmp	DWORD PTR _alibrary$[ebp], 0
jne	SHORT $LN7@FT_New_Lib
push	OFFSET $SG11932
push	4660					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_New_Lib
call	_ft_debug_init
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	192					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _library$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@FT_New_Lib
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN8@FT_New_Lib
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+168], 16384		
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	16384					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+164], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@FT_New_Lib
jmp	SHORT $Fail$13
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+4], 2
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR [eax+8], 5
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+12], 5
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+188], 1
mov	eax, DWORD PTR _alibrary$[ebp]
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [eax], ecx
xor	eax, eax
jmp	SHORT $LN8@FT_New_Lib
mov	edx, DWORD PTR _library$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _library$[ebp], 0
xor	ecx, ecx
jne	SHORT $Fail$13
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_New_Lib
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN11@FT_New_Lib
DD	-12					
DD	4
DD	$LN10@FT_New_Lib
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Reference_Library PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@FT_Referen
push	OFFSET $SG11921
push	4641					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN2@FT_Referen
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+188]
add	ecx, 1
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+188], ecx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Property_Get PROC
push	ebp
mov	ebp, esp
push	0
mov	eax, DWORD PTR _value$[ebp]
push	eax
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_property_do
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Property_Set PROC
push	ebp
mov	ebp, esp
push	1
mov	eax, DWORD PTR _value$[ebp]
push	eax
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_property_do
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Remove_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN8@FT_Remove_
push	OFFSET $SG11837
push	4477					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN9@FT_Remove_
cmp	DWORD PTR _module$[ebp], 0
je	$LN7@FT_Remove_
mov	eax, DWORD PTR _library$[ebp]
add	eax, 20					
mov	DWORD PTR _cur$2[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _cur$2[ebp]
lea	ecx, DWORD PTR [eax+edx*4]
mov	DWORD PTR _limit$1[ebp], ecx
jmp	SHORT $LN6@FT_Remove_
mov	edx, DWORD PTR _cur$2[ebp]
add	edx, 4
mov	DWORD PTR _cur$2[ebp], edx
mov	eax, DWORD PTR _cur$2[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	$LN7@FT_Remove_
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$2[ebp]
mov	ecx, DWORD PTR [eax+edx]
cmp	ecx, DWORD PTR _module$[ebp]
jne	SHORT $LN3@FT_Remove_
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+16]
sub	eax, 1
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _limit$1[ebp]
sub	edx, 4
mov	DWORD PTR _limit$1[ebp], edx
mov	eax, DWORD PTR _cur$2[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	SHORT $LN1@FT_Remove_
mov	ecx, 4
shl	ecx, 0
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _cur$2[ebp]
mov	esi, DWORD PTR _cur$2[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [edx+eax], ecx
mov	edx, DWORD PTR _cur$2[ebp]
add	edx, 4
mov	DWORD PTR _cur$2[ebp], edx
jmp	SHORT $LN2@FT_Remove_
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _limit$1[ebp]
mov	DWORD PTR [edx+ecx], 0
mov	eax, DWORD PTR _module$[ebp]
push	eax
call	_Destroy_Module
add	esp, 4
xor	eax, eax
jmp	SHORT $LN9@FT_Remove_
jmp	$LN5@FT_Remove_
push	OFFSET $SG11848
push	4506					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN5@FT_Get_Mod
cmp	DWORD PTR _module_name$[ebp], 0
jne	SHORT $LN6@FT_Get_Mod
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN7@FT_Get_Mod
mov	eax, DWORD PTR _library$[ebp]
add	eax, 20					
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _cur$[ebp]
lea	ecx, DWORD PTR [eax+edx*4]
mov	DWORD PTR _limit$[ebp], ecx
jmp	SHORT $LN4@FT_Get_Mod
mov	edx, DWORD PTR _cur$[ebp]
add	edx, 4
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _cur$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	SHORT $LN2@FT_Get_Mod
mov	ecx, DWORD PTR _module_name$[ebp]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN1@FT_Get_Mod
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN2@FT_Get_Mod
jmp	SHORT $LN3@FT_Get_Mod
mov	eax, DWORD PTR _result$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Add_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN25@FT_Add_Mod
push	OFFSET $SG11727
push	4266					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN26@FT_Add_Mod
cmp	DWORD PTR _clazz$[ebp], 0
jne	SHORT $LN24@FT_Add_Mod
push	OFFSET $SG11729
push	4269					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN26@FT_Add_Mod
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+16], 131077		
jle	SHORT $LN23@FT_Add_Mod
push	OFFSET $SG11732
push	4273					
push	4
call	_FT_Throw
add	esp, 12					
or	eax, 4
jmp	$LN26@FT_Add_Mod
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN22@FT_Add_Mod
mov	ecx, DWORD PTR _nn$[ebp]
add	ecx, 1
mov	DWORD PTR _nn$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR [edx+16]
jae	SHORT $LN20@FT_Add_Mod
mov	ecx, DWORD PTR _nn$[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+20]
mov	DWORD PTR _module$[ebp], eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN19@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	eax, DWORD PTR [ecx+12]
jg	SHORT $LN18@FT_Add_Mod
push	OFFSET $SG11738
push	4283					
push	5
call	_FT_Throw
add	esp, 12					
or	eax, 5
jmp	$LN26@FT_Add_Mod
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Remove_Module
add	esp, 8
jmp	SHORT $LN20@FT_Add_Mod
jmp	SHORT $LN21@FT_Add_Mod
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _library$[ebp]
cmp	DWORD PTR [edx+16], 32			
jb	SHORT $LN17@FT_Add_Mod
push	OFFSET $SG11740
push	4297					
push	48					
call	_FT_Throw
add	esp, 12					
or	eax, 48					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$31
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _module$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@FT_Add_Mod
jmp	$Exit$31
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR _clazz$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 2
je	SHORT $LN15@FT_Add_Mod
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
call	_ft_add_renderer
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@FT_Add_Mod
jmp	$Fail$32
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 4
je	SHORT $LN13@FT_Add_Mod
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR [edx+160], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 1
je	SHORT $LN12@FT_Add_Mod
mov	ecx, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$3[ebp], ecx
mov	edx, DWORD PTR _driver$3[ebp]
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+12], ecx
mov	edx, DWORD PTR _driver$3[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 512				
jne	SHORT $LN12@FT_Add_Mod
mov	edx, DWORD PTR _driver$3[ebp]
add	edx, 24					
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_FT_GlyphLoader_New
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN12@FT_Add_Mod
jmp	SHORT $Fail$32
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+24], 0
je	SHORT $LN9@FT_Add_Mod
mov	esi, esp
mov	edx, DWORD PTR _module$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+24]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@FT_Add_Mod
jmp	SHORT $Fail$32
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR _module$[ebp]
mov	DWORD PTR [ecx+eax*4+20], edx
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+16]
add	ecx, 1
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN26@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 1
je	SHORT $LN7@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$2[ebp], eax
mov	ecx, DWORD PTR _driver$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	SHORT $LN7@FT_Add_Mod
mov	ecx, DWORD PTR _driver$2[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
call	_FT_GlyphLoader_Done
add	esp, 4
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 2
je	SHORT $LN3@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _renderer$1[ebp], eax
mov	ecx, DWORD PTR _renderer$1[ebp]
cmp	DWORD PTR [ecx+12], 0
je	SHORT $LN3@FT_Add_Mod
mov	edx, DWORD PTR _renderer$1[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	DWORD PTR [eax+36], 1869968492		
jne	SHORT $LN3@FT_Add_Mod
mov	ecx, DWORD PTR _renderer$1[ebp]
cmp	DWORD PTR [ecx+52], 0
je	SHORT $LN3@FT_Add_Mod
mov	esi, esp
mov	edx, DWORD PTR _renderer$1[ebp]
mov	eax, DWORD PTR [edx+52]
push	eax
mov	ecx, DWORD PTR _renderer$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+56]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _module$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _module$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@FT_Add_Mod
jmp	$Exit$31
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@FT_Add_Mod
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN29@FT_Add_Mod
DD	-8					
DD	4
DD	$LN28@FT_Add_Mod
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Library_Version PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _major$[ebp], 0
mov	DWORD PTR _minor$[ebp], 0
mov	DWORD PTR _patch$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN4@FT_Library
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _major$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _minor$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _patch$[ebp], edx
cmp	DWORD PTR _amajor$[ebp], 0
je	SHORT $LN3@FT_Library
mov	eax, DWORD PTR _amajor$[ebp]
mov	ecx, DWORD PTR _major$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _aminor$[ebp], 0
je	SHORT $LN2@FT_Library
mov	edx, DWORD PTR _aminor$[ebp]
mov	eax, DWORD PTR _minor$[ebp]
mov	DWORD PTR [edx], eax
cmp	DWORD PTR _apatch$[ebp], 0
je	SHORT $LN5@FT_Library
mov	ecx, DWORD PTR _apatch$[ebp]
mov	edx, DWORD PTR _patch$[ebp]
mov	DWORD PTR [ecx], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Vector_Transform PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _vector$[ebp], 0
je	SHORT $LN1@FT_Vector_
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN2@FT_Vector_
jmp	SHORT $LN3@FT_Vector_
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _xz$[ebp], esi
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _yz$[ebp], esi
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR _xz$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR _yz$[ebp]
mov	DWORD PTR [eax+4], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_FloorFix PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _a$[ebp], 0
jl	SHORT $LN3@FT_FloorFi
mov	eax, DWORD PTR _a$[ebp]
and	eax, -65536				
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@FT_FloorFi
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
and	ecx, -65536				
neg	ecx
mov	DWORD PTR tv69[ebp], ecx
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_CeilFix PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _a$[ebp], 0
jl	SHORT $LN3@FT_CeilFix
mov	eax, DWORD PTR _a$[ebp]
add	eax, 65535				
and	eax, -65536				
mov	DWORD PTR tv71[ebp], eax
jmp	SHORT $LN4@FT_CeilFix
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
add	ecx, 65535				
and	ecx, -65536				
neg	ecx
mov	DWORD PTR tv71[ebp], ecx
mov	eax, DWORD PTR tv71[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_RoundFix PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _a$[ebp], 0
jl	SHORT $LN3@FT_RoundFi
mov	eax, DWORD PTR _a$[ebp]
add	eax, 32768				
and	eax, -65536				
mov	DWORD PTR tv71[ebp], eax
jmp	SHORT $LN4@FT_RoundFi
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
add	ecx, 32768				
and	ecx, -65536				
neg	ecx
mov	DWORD PTR tv71[ebp], ecx
mov	eax, DWORD PTR tv71[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_DivFix PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN11@FT_DivFix
mov	eax, DWORD PTR _a$[ebp]
neg	eax
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _s$[ebp]
neg	ecx
mov	DWORD PTR _s$[ebp], ecx
xor	edx, edx
jne	SHORT $LN12@FT_DivFix
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN7@FT_DivFix
mov	eax, DWORD PTR _b$[ebp]
neg	eax
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _s$[ebp]
neg	ecx
mov	DWORD PTR _s$[ebp], ecx
xor	edx, edx
jne	SHORT $LN8@FT_DivFix
cmp	DWORD PTR _b$[ebp], 0
jne	SHORT $LN4@FT_DivFix
mov	DWORD PTR _q$[ebp], 2147483647		
jmp	SHORT $LN3@FT_DivFix
mov	eax, DWORD PTR _b$[ebp]
sar	eax, 17					
mov	ecx, 65535				
sub	ecx, eax
cmp	DWORD PTR _a$[ebp], ecx
jg	SHORT $LN2@FT_DivFix
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 16					
mov	edx, DWORD PTR _b$[ebp]
sar	edx, 1
add	eax, edx
xor	edx, edx
div	DWORD PTR _b$[ebp]
mov	DWORD PTR _q$[ebp], eax
jmp	SHORT $LN3@FT_DivFix
mov	eax, DWORD PTR _a$[ebp]
sar	eax, 16					
mov	DWORD PTR _temp$2[ebp+4], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 16					
mov	DWORD PTR _temp$2[ebp], ecx
mov	DWORD PTR _temp2$1[ebp+4], 0
mov	edx, DWORD PTR _b$[ebp]
sar	edx, 1
mov	DWORD PTR _temp2$1[ebp], edx
lea	eax, DWORD PTR _temp$2[ebp]
push	eax
lea	ecx, DWORD PTR _temp2$1[ebp]
push	ecx
lea	edx, DWORD PTR _temp$2[ebp]
push	edx
call	_FT_Add64
add	esp, 12					
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _temp$2[ebp]
push	ecx
mov	edx, DWORD PTR _temp$2[ebp+4]
push	edx
call	_ft_div64by32
add	esp, 12					
mov	DWORD PTR _q$[ebp], eax
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN15@FT_DivFix
mov	eax, DWORD PTR _q$[ebp]
neg	eax
mov	DWORD PTR tv92[ebp], eax
jmp	SHORT $LN16@FT_DivFix
mov	ecx, DWORD PTR _q$[ebp]
mov	DWORD PTR tv92[ebp], ecx
mov	eax, DWORD PTR tv92[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@FT_DivFix
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN19@FT_DivFix
DD	-20					
DD	8
DD	$LN17@FT_DivFix
DD	-36					
DD	8
DD	$LN18@FT_DivFix
DB	116					
DB	101					
DB	109					
DB	112					
DB	50					
DB	0
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
_FT_MulFix PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_MulDiv PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN17@FT_MulDiv
mov	eax, DWORD PTR _b$[ebp]
cmp	eax, DWORD PTR _c$[ebp]
jne	SHORT $LN16@FT_MulDiv
mov	eax, DWORD PTR _a$[ebp]
jmp	$LN19@FT_MulDiv
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN15@FT_MulDiv
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN16@FT_MulDiv
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN11@FT_MulDiv
mov	ecx, DWORD PTR _b$[ebp]
neg	ecx
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN12@FT_MulDiv
cmp	DWORD PTR _c$[ebp], 0
jge	SHORT $LN7@FT_MulDiv
mov	ecx, DWORD PTR _c$[ebp]
neg	ecx
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN8@FT_MulDiv
cmp	DWORD PTR _c$[ebp], 0
jne	SHORT $LN4@FT_MulDiv
mov	DWORD PTR _a$[ebp], 2147483647		
jmp	$LN3@FT_MulDiv
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR _c$[ebp]
sar	edx, 17					
mov	eax, 129894				
sub	eax, edx
cmp	ecx, eax
ja	SHORT $LN2@FT_MulDiv
mov	eax, DWORD PTR _a$[ebp]
imul	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _c$[ebp]
sar	ecx, 1
add	eax, ecx
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR _a$[ebp], eax
jmp	SHORT $LN3@FT_MulDiv
lea	edx, DWORD PTR _temp$2[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
mov	DWORD PTR _temp2$1[ebp+4], 0
mov	edx, DWORD PTR _c$[ebp]
sar	edx, 1
mov	DWORD PTR _temp2$1[ebp], edx
lea	eax, DWORD PTR _temp$2[ebp]
push	eax
lea	ecx, DWORD PTR _temp2$1[ebp]
push	ecx
lea	edx, DWORD PTR _temp$2[ebp]
push	edx
call	_FT_Add64
add	esp, 12					
cmp	DWORD PTR _temp$2[ebp+4], 0
jne	SHORT $LN21@FT_MulDiv
mov	eax, DWORD PTR _temp$2[ebp]
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR tv132[ebp], eax
jmp	SHORT $LN22@FT_MulDiv
mov	eax, DWORD PTR _c$[ebp]
push	eax
mov	ecx, DWORD PTR _temp$2[ebp]
push	ecx
mov	edx, DWORD PTR _temp$2[ebp+4]
push	edx
call	_ft_div64by32
add	esp, 12					
mov	DWORD PTR tv132[ebp], eax
mov	eax, DWORD PTR tv132[ebp]
mov	DWORD PTR _a$[ebp], eax
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN23@FT_MulDiv
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR tv135[ebp], ecx
jmp	SHORT $LN24@FT_MulDiv
mov	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR tv135[ebp], edx
mov	eax, DWORD PTR tv135[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN28@FT_MulDiv
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN27@FT_MulDiv
DD	-16					
DD	8
DD	$LN25@FT_MulDiv
DD	-32					
DD	8
DD	$LN26@FT_MulDiv
DB	116					
DB	101					
DB	109					
DB	112					
DB	50					
DB	0
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
_FT_Face_GetCharsOfVariant PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN11@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
cmp	DWORD PTR _charmap$3[ebp], 0
je	$LN11@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$2[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
cmp	DWORD PTR _variantSelector$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11273
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN8@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN3@FT_Face_Ge
mov	eax, DWORD PTR _variantSelector$[ebp]
push	eax
push	OFFSET $SG11278
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	edx, DWORD PTR _variantSelector$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$2[ebp]
push	ecx
mov	edx, DWORD PTR _vcmap$2[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+36]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetVariantsOfChar PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN11@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
cmp	DWORD PTR _charmap$3[ebp], 0
je	$LN11@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$2[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11246
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN8@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN3@FT_Face_Ge
mov	eax, DWORD PTR _charcode$[ebp]
push	eax
push	OFFSET $SG11251
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	edx, DWORD PTR _charcode$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$2[ebp]
push	ecx
mov	edx, DWORD PTR _vcmap$2[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetVariantSelectors PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN2@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
cmp	DWORD PTR _charmap$3[ebp], 0
je	SHORT $LN2@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$2[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
mov	edx, DWORD PTR _vcmap$2[ebp]
push	edx
mov	eax, DWORD PTR _vcmap$2[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+28]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetCharVariantIsDefault PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], -1
cmp	DWORD PTR _face$[ebp], 0
je	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$2[ebp], eax
cmp	DWORD PTR _charmap$2[ebp], 0
je	$LN20@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$2[ebp]
mov	DWORD PTR _vcmap$1[ebp], ecx
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN18@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN16@FT_Face_Ge
push	OFFSET $SG11194
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN17@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN12@FT_Face_Ge
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
push	OFFSET $SG11199
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN13@FT_Face_Ge
cmp	DWORD PTR _variantSelector$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11205
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@FT_Face_Ge
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN3@FT_Face_Ge
mov	edx, DWORD PTR _variantSelector$[ebp]
push	edx
push	OFFSET $SG11210
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	ecx, DWORD PTR _variantSelector$[ebp]
push	ecx
mov	edx, DWORD PTR _charcode$[ebp]
push	edx
mov	eax, DWORD PTR _vcmap$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+24]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, al
mov	DWORD PTR _result$[ebp], ecx
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetCharVariantIndex PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	$LN20@FT_Face_Ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+92]
cmp	DWORD PTR [edx+4], 1970170211		
jne	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+92]
mov	DWORD PTR _ucmap$2[ebp], edx
cmp	DWORD PTR _charmap$3[ebp], 0
je	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$1[ebp], eax
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN18@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN16@FT_Face_Ge
push	OFFSET $SG11156
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN17@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN12@FT_Face_Ge
mov	eax, DWORD PTR _charcode$[ebp]
push	eax
push	OFFSET $SG11161
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN13@FT_Face_Ge
cmp	DWORD PTR _variantSelector$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11167
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN8@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN3@FT_Face_Ge
mov	ecx, DWORD PTR _variantSelector$[ebp]
push	ecx
push	OFFSET $SG11172
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	eax, DWORD PTR _variantSelector$[ebp]
push	eax
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
mov	edx, DWORD PTR _ucmap$2[ebp]
push	edx
mov	eax, DWORD PTR _vcmap$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_SubGlyph_Info PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 6
cmp	DWORD PTR _glyph$[ebp], 0
je	$LN1@FT_Get_Sub
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+132], 0
je	SHORT $LN1@FT_Get_Sub
mov	ecx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [ecx+72], 1668246896		
jne	SHORT $LN1@FT_Get_Sub
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _sub_index$[ebp]
cmp	eax, DWORD PTR [edx+128]
jae	SHORT $LN1@FT_Get_Sub
mov	ecx, DWORD PTR _sub_index$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _glyph$[ebp]
add	ecx, DWORD PTR [edx+132]
mov	DWORD PTR _subg$1[ebp], ecx
mov	eax, DWORD PTR _p_index$[ebp]
mov	ecx, DWORD PTR _subg$1[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _subg$1[ebp]
movzx	ecx, WORD PTR [eax+4]
mov	edx, DWORD PTR _p_flags$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _p_arg1$[ebp]
mov	ecx, DWORD PTR _subg$1[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _p_arg2$[ebp]
mov	ecx, DWORD PTR _subg$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _subg$1[ebp]
add	eax, 16					
mov	ecx, DWORD PTR _p_transform$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Name_Index PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN12@FT_Get_Nam
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 512				
je	$LN12@FT_Get_Nam
cmp	DWORD PTR _glyph_name$[ebp], 0
je	$LN12@FT_Get_Nam
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+36]
mov	DWORD PTR _svc$3[ebp], ecx
cmp	DWORD PTR _svc$3[ebp], -2		
jne	SHORT $LN8@FT_Get_Nam
mov	DWORD PTR _svc$3[ebp], 0
jmp	SHORT $LN7@FT_Get_Nam
cmp	DWORD PTR _svc$3[ebp], 0
jne	SHORT $LN7@FT_Get_Nam
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Get_Nam
mov	esi, esp
push	OFFSET $SG11309
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _svc$3[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Get_Nam
cmp	DWORD PTR _svc$3[ebp], 0
je	SHORT $LN15@FT_Get_Nam
mov	eax, DWORD PTR _svc$3[ebp]
mov	DWORD PTR tv86[ebp], eax
jmp	SHORT $LN16@FT_Get_Nam
mov	DWORD PTR tv86[ebp], -2			
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR tv86[ebp]
mov	DWORD PTR [edx+36], eax
mov	ecx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR _service$4[ebp], ecx
xor	edx, edx
jne	$LN11@FT_Get_Nam
cmp	DWORD PTR _service$4[ebp], 0
je	SHORT $LN12@FT_Get_Nam
mov	eax, DWORD PTR _service$4[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN12@FT_Get_Nam
mov	esi, esp
mov	ecx, DWORD PTR _glyph_name$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _service$4[ebp]
mov	ecx, DWORD PTR [eax+4]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Next_Char PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
mov	DWORD PTR _gindex$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN5@FT_Get_Nex
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	SHORT $LN5@FT_Get_Nex
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+16], 0
je	SHORT $LN5@FT_Get_Nex
mov	edx, DWORD PTR _charcode$[ebp]
mov	DWORD PTR _code$2[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	DWORD PTR _cmap$1[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _code$2[ebp]
push	edx
mov	eax, DWORD PTR _cmap$1[ebp]
push	eax
mov	ecx, DWORD PTR _cmap$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+16]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _gindex$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _gindex$[ebp]
cmp	edx, DWORD PTR [ecx+16]
jae	SHORT $LN4@FT_Get_Nex
cmp	DWORD PTR _gindex$[ebp], 0
jne	SHORT $LN8@FT_Get_Nex
mov	DWORD PTR tv78[ebp], 0
jmp	SHORT $LN9@FT_Get_Nex
mov	eax, DWORD PTR _code$2[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR tv78[ebp]
mov	DWORD PTR _result$[ebp], ecx
cmp	DWORD PTR _agindex$[ebp], 0
je	SHORT $LN1@FT_Get_Nex
mov	edx, DWORD PTR _agindex$[ebp]
mov	eax, DWORD PTR _gindex$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Get_Nex
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN11@FT_Get_Nex
DD	-16					
DD	4
DD	$LN10@FT_Get_Nex
DB	99					
DB	111					
DB	100					
DB	101					
DB	0
ENDP
_FT_Get_First_Char PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
mov	DWORD PTR _gindex$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN4@FT_Get_Fir
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	SHORT $LN4@FT_Get_Fir
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+16], 0
je	SHORT $LN4@FT_Get_Fir
push	0
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Get_Char_Index
add	esp, 8
mov	DWORD PTR _gindex$[ebp], eax
cmp	DWORD PTR _gindex$[ebp], 0
je	SHORT $LN2@FT_Get_Fir
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _gindex$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jb	SHORT $LN4@FT_Get_Fir
lea	edx, DWORD PTR _gindex$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Get_Next_Char
add	esp, 12					
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _agindex$[ebp], 0
je	SHORT $LN1@FT_Get_Fir
mov	ecx, DWORD PTR _agindex$[ebp]
mov	edx, DWORD PTR _gindex$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@FT_Get_Fir
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN8@FT_Get_Fir
DD	-12					
DD	4
DD	$LN7@FT_Get_Fir
DB	103					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_FT_Get_Char_Index PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN10@FT_Get_Cha
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	SHORT $LN10@FT_Get_Cha
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+92]
mov	DWORD PTR _cmap$1[ebp], edx
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN9@FT_Get_Cha
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN7@FT_Get_Cha
push	OFFSET $SG11097
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@FT_Get_Cha
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN3@FT_Get_Cha
mov	edx, DWORD PTR _charcode$[ebp]
push	edx
push	OFFSET $SG11102
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN4@FT_Get_Cha
mov	esi, esp
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
mov	edx, DWORD PTR _cmap$1[ebp]
push	edx
mov	eax, DWORD PTR _cmap$1[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+12]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Charmap_Index PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN9@FT_Get_Cha
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN10@FT_Get_Cha
or	eax, -1
jmp	SHORT $LN11@FT_Get_Cha
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN8@FT_Get_Cha
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _charmap$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+36]
jge	SHORT $LN4@FT_Get_Cha
mov	edx, DWORD PTR _charmap$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
cmp	eax, DWORD PTR _charmap$[ebp]
jne	SHORT $LN5@FT_Get_Cha
jmp	SHORT $LN4@FT_Get_Cha
jmp	SHORT $LN7@FT_Get_Cha
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+36]
jl	SHORT $LN3@FT_Get_Cha
push	OFFSET $SG11009
push	3219					
push	OFFSET $SG11010
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@FT_Get_Cha
mov	eax, DWORD PTR _i$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Set_Cha
push	OFFSET $SG10984
push	3180					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN9@FT_Set_Cha
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN6@FT_Set_Cha
cmp	DWORD PTR _charmap$[ebp], 0
jne	SHORT $LN7@FT_Set_Cha
push	OFFSET $SG10987
push	3184					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
jmp	$LN9@FT_Set_Cha
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
call	_FT_Get_CMap_Format
add	esp, 4
cmp	eax, 14					
jne	SHORT $LN5@FT_Set_Cha
push	OFFSET $SG10989
push	3187					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN9@FT_Set_Cha
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _cur$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN4@FT_Set_Cha
mov	ecx, DWORD PTR _cur$[ebp]
add	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	SHORT $LN2@FT_Set_Cha
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
cmp	eax, DWORD PTR _charmap$[ebp]
jne	SHORT $LN1@FT_Set_Cha
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+edx]
mov	DWORD PTR [eax+92], edx
xor	eax, eax
jmp	SHORT $LN9@FT_Set_Cha
jmp	SHORT $LN3@FT_Set_Cha
push	OFFSET $SG10994
push	3200					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Select_Charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Select_
push	OFFSET $SG10965
push	3138					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN9@FT_Select_
cmp	DWORD PTR _encoding$[ebp], 0
jne	SHORT $LN7@FT_Select_
push	OFFSET $SG10967
push	3141					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN9@FT_Select_
cmp	DWORD PTR _encoding$[ebp], 1970170211	
jne	SHORT $LN6@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_unicode_charmap
add	esp, 4
jmp	$LN9@FT_Select_
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _cur$[ebp], edx
cmp	DWORD PTR _cur$[ebp], 0
jne	SHORT $LN5@FT_Select_
push	OFFSET $SG10970
push	3152					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
jmp	SHORT $LN9@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _cur$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN4@FT_Select_
mov	ecx, DWORD PTR _cur$[ebp]
add	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	SHORT $LN2@FT_Select_
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax+4]
cmp	ecx, DWORD PTR _encoding$[ebp]
jne	SHORT $LN1@FT_Select_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+92], eax
xor	eax, eax
jmp	SHORT $LN9@FT_Select_
jmp	SHORT $LN3@FT_Select_
push	OFFSET $SG10975
push	3165					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Postscript_Name PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN13@FT_Get_Pos
jmp	$Exit$18
cmp	DWORD PTR _result$[ebp], 0
jne	$Exit$18
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _svc$3[ebp], edx
cmp	DWORD PTR _svc$3[ebp], -2		
jne	SHORT $LN8@FT_Get_Pos
mov	DWORD PTR _svc$3[ebp], 0
jmp	SHORT $LN7@FT_Get_Pos
cmp	DWORD PTR _svc$3[ebp], 0
jne	SHORT $LN7@FT_Get_Pos
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN2@FT_Get_Pos
mov	esi, esp
push	OFFSET $SG11398
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _svc$3[ebp], edx
xor	eax, eax
jne	SHORT $LN5@FT_Get_Pos
cmp	DWORD PTR _svc$3[ebp], 0
je	SHORT $LN16@FT_Get_Pos
mov	ecx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR tv83[ebp], ecx
jmp	SHORT $LN17@FT_Get_Pos
mov	DWORD PTR tv83[ebp], -2			
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR tv83[ebp]
mov	DWORD PTR [eax+28], ecx
mov	edx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR _service$4[ebp], edx
xor	eax, eax
jne	$LN11@FT_Get_Pos
cmp	DWORD PTR _service$4[ebp], 0
je	SHORT $Exit$18
mov	ecx, DWORD PTR _service$4[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $Exit$18
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _service$4[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Glyph_Name PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN17@FT_Get_Gly
push	OFFSET $SG11328
push	3643					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN18@FT_Get_Gly
cmp	DWORD PTR _buffer$[ebp], 0
je	SHORT $LN15@FT_Get_Gly
cmp	DWORD PTR _buffer_max$[ebp], 0
jne	SHORT $LN16@FT_Get_Gly
push	OFFSET $SG11331
push	3646					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN18@FT_Get_Gly
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _buffer$[ebp]
mov	BYTE PTR [edx+ecx], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _glyph_index$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jl	SHORT $LN14@FT_Get_Gly
push	OFFSET $SG11335
push	3652					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
jmp	$LN18@FT_Get_Gly
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 512				
jne	SHORT $LN12@FT_Get_Gly
push	OFFSET $SG11337
push	3655					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN18@FT_Get_Gly
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+36]
mov	DWORD PTR _svc$3[ebp], eax
cmp	DWORD PTR _svc$3[ebp], -2		
jne	SHORT $LN9@FT_Get_Gly
mov	DWORD PTR _svc$3[ebp], 0
jmp	SHORT $LN8@FT_Get_Gly
cmp	DWORD PTR _svc$3[ebp], 0
jne	SHORT $LN8@FT_Get_Gly
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _module$2[ebp], edx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	eax, DWORD PTR _module$2[ebp]
mov	ecx, DWORD PTR [eax]
cmp	DWORD PTR [ecx+32], 0
je	SHORT $LN3@FT_Get_Gly
mov	esi, esp
push	OFFSET $SG11359
mov	edx, DWORD PTR _module$2[ebp]
push	edx
mov	eax, DWORD PTR _module$2[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+32]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	eax, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _svc$3[ebp], eax
xor	ecx, ecx
jne	SHORT $LN6@FT_Get_Gly
cmp	DWORD PTR _svc$3[ebp], 0
je	SHORT $LN20@FT_Get_Gly
mov	edx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR tv143[ebp], edx
jmp	SHORT $LN21@FT_Get_Gly
mov	DWORD PTR tv143[ebp], -2		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR tv143[ebp]
mov	DWORD PTR [ecx+36], edx
mov	eax, DWORD PTR _svc$3[ebp]
mov	DWORD PTR _service$[ebp], eax
xor	ecx, ecx
jne	$LN12@FT_Get_Gly
cmp	DWORD PTR _service$[ebp], 0
je	SHORT $LN2@FT_Get_Gly
mov	edx, DWORD PTR _service$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@FT_Get_Gly
mov	esi, esp
mov	eax, DWORD PTR _buffer_max$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _service$[ebp]
mov	edx, DWORD PTR [ecx]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN1@FT_Get_Gly
push	OFFSET $SG11367
push	3661					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Track_Kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@FT_Get_Tra
push	OFFSET $SG10942
push	3109					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Get_Tra
cmp	DWORD PTR _akerning$[ebp], 0
jne	SHORT $LN5@FT_Get_Tra
push	OFFSET $SG10944
push	3112					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Get_Tra
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN2@FT_Get_Tra
mov	esi, esp
push	OFFSET $SG10954
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], edx
xor	eax, eax
jne	SHORT $LN5@FT_Get_Tra
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN1@FT_Get_Tra
push	OFFSET $SG10956
push	3116					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN8@FT_Get_Tra
mov	esi, esp
mov	ecx, DWORD PTR _akerning$[ebp]
push	ecx
mov	edx, DWORD PTR _degree$[ebp]
push	edx
mov	eax, DWORD PTR _point_size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Get_Ker
push	OFFSET $SG10921
push	3050					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN9@FT_Get_Ker
cmp	DWORD PTR _akerning$[ebp], 0
jne	SHORT $LN7@FT_Get_Ker
push	OFFSET $SG10923
push	3053					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN9@FT_Get_Ker
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$[ebp], ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	DWORD PTR [edx+76], 0
je	$LN6@FT_Get_Ker
mov	esi, esp
mov	eax, DWORD PTR _akerning$[ebp]
push	eax
mov	ecx, DWORD PTR _right_glyph$[ebp]
push	ecx
mov	edx, DWORD PTR _left_glyph$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+76]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN6@FT_Get_Ker
cmp	DWORD PTR _kern_mode$[ebp], 2
je	$LN6@FT_Get_Ker
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _akerning$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulFix
add	esp, 8
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix
add	esp, 8
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _kern_mode$[ebp], 1
je	$LN6@FT_Get_Ker
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+12]
cmp	ecx, 25					
jge	SHORT $LN2@FT_Get_Ker
push	25					
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+14]
cmp	ecx, 25					
jge	SHORT $LN1@FT_Get_Ker
push	25					
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+14]
push	ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx+4]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Render_Glyph PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _slot$[ebp], 0
je	SHORT $LN1@FT_Render_
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN2@FT_Render_
push	OFFSET $SG11697
push	4186					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN3@FT_Render_
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
mov	edx, DWORD PTR _render_mode$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Render_Glyph_Internal
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Transform PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Set_Tra
jmp	$LN9@FT_Set_Tra
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR _internal$[ebp], ecx
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+24], 0
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN7@FT_Set_Tra
mov	eax, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax], 65536			
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+12], 65536		
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR _matrix$[ebp], ecx
jmp	SHORT $LN6@FT_Set_Tra
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR _internal$[ebp]
mov	ecx, DWORD PTR [edx]
mov	DWORD PTR [eax], ecx
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR [edx+8]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [eax+4]
or	edx, DWORD PTR [ecx+8]
jne	SHORT $LN4@FT_Set_Tra
mov	eax, DWORD PTR _matrix$[ebp]
cmp	DWORD PTR [eax], 65536			
jne	SHORT $LN4@FT_Set_Tra
mov	ecx, DWORD PTR _matrix$[ebp]
cmp	DWORD PTR [ecx+12], 65536		
je	SHORT $LN5@FT_Set_Tra
mov	edx, DWORD PTR _internal$[ebp]
mov	eax, DWORD PTR [edx+24]
or	eax, 1
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [ecx+24], eax
cmp	DWORD PTR _delta$[ebp], 0
jne	SHORT $LN3@FT_Set_Tra
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+16], 0
mov	eax, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _internal$[ebp]
add	ecx, 16					
mov	DWORD PTR _delta$[ebp], ecx
jmp	SHORT $LN2@FT_Set_Tra
mov	edx, DWORD PTR _delta$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+16], eax
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _delta$[ebp]
mov	ecx, DWORD PTR _delta$[ebp]
mov	edx, DWORD PTR [eax]
or	edx, DWORD PTR [ecx+4]
je	SHORT $LN9@FT_Set_Tra
mov	eax, DWORD PTR _internal$[ebp]
mov	ecx, DWORD PTR [eax+24]
or	ecx, 2
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Load_Char PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN2@FT_Load_Ch
push	OFFSET $SG9630
push	854					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN3@FT_Load_Ch
mov	eax, DWORD PTR _char_code$[ebp]
mov	DWORD PTR _glyph_index$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+92], 0
je	SHORT $LN1@FT_Load_Ch
mov	edx, DWORD PTR _char_code$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Get_Char_Index
add	esp, 8
mov	DWORD PTR _glyph_index$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Load_Glyph
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Load_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	BYTE PTR _autohint$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR _ttface$[ebp], eax
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN47@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+88], 0
je	SHORT $LN47@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+84], 0
jne	SHORT $LN48@FT_Load_Gl
push	OFFSET $SG9552
push	607					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN49@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _slot$[ebp], ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_clear
add	esp, 4
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	DWORD PTR _hinter$[ebp], edx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1024				
je	SHORT $LN46@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 2049				
mov	DWORD PTR _load_flags$[ebp], ecx
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1
je	SHORT $LN45@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 10					
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, -5					
mov	DWORD PTR _load_flags$[ebp], ecx
cmp	DWORD PTR _hinter$[ebp], 0
je	$LN44@FT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2
jne	$LN44@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 32768				
jne	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 256				
je	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 8192				
jne	$LN44@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 2048				
jne	SHORT $LN43@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+8], 0
jne	SHORT $LN42@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx], 0
jne	SHORT $LN43@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax], 0
jne	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+8], 0
je	$LN44@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 32					
jne	SHORT $LN40@FT_Load_Gl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 1024				
jne	SHORT $LN41@FT_Load_Gl
mov	BYTE PTR _autohint$[ebp], 1
jmp	SHORT $LN44@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
sar	ecx, 16					
and	ecx, 15					
mov	DWORD PTR _mode$8[ebp], ecx
cmp	DWORD PTR _mode$8[ebp], 1
je	SHORT $LN37@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
movzx	ecx, BYTE PTR [eax+52]
test	ecx, ecx
jne	SHORT $LN37@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 8
je	SHORT $LN44@FT_Load_Gl
mov	ecx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [ecx+696], 0
je	SHORT $LN44@FT_Load_Gl
mov	edx, DWORD PTR _ttface$[ebp]
movzx	eax, WORD PTR [edx+286]
test	eax, eax
jne	SHORT $LN44@FT_Load_Gl
mov	ecx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [ecx+628], 0
jne	SHORT $LN44@FT_Load_Gl
mov	edx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [edx+636], 0
jne	SHORT $LN44@FT_Load_Gl
mov	BYTE PTR _autohint$[ebp], 1
movzx	eax, BYTE PTR _autohint$[ebp]
test	eax, eax
je	$LN36@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 2
je	SHORT $LN35@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 8
jne	SHORT $LN35@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 16384				
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+72]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN35@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+72], 1651078259		
jne	SHORT $LN35@FT_Load_Gl
jmp	$Load_Ok$51
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	DWORD PTR _internal$6[ebp], edx
mov	eax, DWORD PTR _internal$6[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _transform_flags$5[ebp], ecx
mov	edx, DWORD PTR _internal$6[ebp]
mov	DWORD PTR [edx+24], 0
mov	eax, DWORD PTR _hinter$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _hinting$7[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
mov	edx, DWORD PTR _hinter$[ebp]
push	edx
mov	eax, DWORD PTR _hinting$7[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _internal$6[ebp]
mov	eax, DWORD PTR _transform_flags$5[ebp]
mov	DWORD PTR [edx+24], eax
jmp	SHORT $Load_Ok$51
mov	esi, esp
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+72]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN32@FT_Load_Gl
jmp	$Exit$52
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+72], 1869968492		
jne	SHORT $Load_Ok$51
mov	ecx, DWORD PTR _slot$[ebp]
add	ecx, 108				
push	ecx
call	_FT_Outline_Check
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN30@FT_Load_Gl
jmp	$Exit$52
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2
jne	SHORT $Load_Ok$51
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 16					
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
call	_ft_glyphslot_grid_fit_metrics
add	esp, 8
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 16					
je	SHORT $LN28@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+64], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR [ecx+68], eax
jmp	SHORT $LN27@FT_Load_Gl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	DWORD PTR [ecx+64], eax
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+68], 0
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 8192				
jne	SHORT $LN26@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 1
je	SHORT $LN26@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
add	eax, 12					
mov	DWORD PTR _metrics$4[ebp], eax
push	64					
mov	ecx, DWORD PTR _metrics$4[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+56]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+56], eax
push	64					
mov	eax, DWORD PTR _metrics$4[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+60]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+60], eax
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2048				
jne	$LN18@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR _internal$3[ebp], ecx
mov	edx, DWORD PTR _internal$3[ebp]
cmp	DWORD PTR [edx+24], 0
je	$LN18@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_ft_lookup_glyph_renderer
add	esp, 4
mov	DWORD PTR _renderer$2[ebp], eax
cmp	DWORD PTR _renderer$2[ebp], 0
je	SHORT $LN23@FT_Load_Gl
mov	ecx, DWORD PTR _internal$3[ebp]
add	ecx, 16					
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _internal$3[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _renderer$2[ebp]
push	ecx
mov	edx, DWORD PTR _renderer$2[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+44]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN22@FT_Load_Gl
mov	edx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [edx+72], 1869968492		
jne	SHORT $LN22@FT_Load_Gl
mov	eax, DWORD PTR _internal$3[ebp]
mov	ecx, DWORD PTR [eax+24]
and	ecx, 1
je	SHORT $LN20@FT_Load_Gl
mov	edx, DWORD PTR _internal$3[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Transform
add	esp, 8
mov	ecx, DWORD PTR _internal$3[ebp]
mov	edx, DWORD PTR [ecx+24]
and	edx, 2
je	SHORT $LN22@FT_Load_Gl
mov	eax, DWORD PTR _internal$3[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _internal$3[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
add	ecx, 108				
push	ecx
call	_FT_Outline_Translate
add	esp, 12					
mov	edx, DWORD PTR _internal$3[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
add	eax, 64					
push	eax
call	_FT_Vector_Transform
add	esp, 8
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN17@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+64]
push	ecx
push	OFFSET $SG9601
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN18@FT_Load_Gl
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN13@FT_Load_Gl
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+68]
push	eax
push	OFFSET $SG9606
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN14@FT_Load_Gl
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN9@FT_Load_Gl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+56]
push	edx
push	OFFSET $SG9611
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN10@FT_Load_Gl
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+60]
push	ecx
push	OFFSET $SG9616
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN6@FT_Load_Gl
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $Exit$52
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+72], 1651078259		
je	SHORT $Exit$52
mov	ecx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [ecx+72], 1668246896		
je	SHORT $Exit$52
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 4
je	SHORT $Exit$52
mov	eax, DWORD PTR _load_flags$[ebp]
sar	eax, 16					
and	eax, 15					
mov	DWORD PTR _mode$1[ebp], eax
jne	SHORT $LN1@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 4096				
je	SHORT $LN1@FT_Load_Gl
mov	DWORD PTR _mode$1[ebp], 2
mov	edx, DWORD PTR _mode$1[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_FT_Render_Glyph
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Pixel_Sizes PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _pixel_width$[ebp], 0
jne	SHORT $LN7@FT_Set_Pix
mov	eax, DWORD PTR _pixel_height$[ebp]
mov	DWORD PTR _pixel_width$[ebp], eax
jmp	SHORT $LN6@FT_Set_Pix
cmp	DWORD PTR _pixel_height$[ebp], 0
jne	SHORT $LN6@FT_Set_Pix
mov	ecx, DWORD PTR _pixel_width$[ebp]
mov	DWORD PTR _pixel_height$[ebp], ecx
cmp	DWORD PTR _pixel_width$[ebp], 1
jae	SHORT $LN4@FT_Set_Pix
mov	DWORD PTR _pixel_width$[ebp], 1
cmp	DWORD PTR _pixel_height$[ebp], 1
jae	SHORT $LN3@FT_Set_Pix
mov	DWORD PTR _pixel_height$[ebp], 1
cmp	DWORD PTR _pixel_width$[ebp], 65535	
jb	SHORT $LN2@FT_Set_Pix
mov	DWORD PTR _pixel_width$[ebp], 65535	
cmp	DWORD PTR _pixel_height$[ebp], 65535	
jb	SHORT $LN1@FT_Set_Pix
mov	DWORD PTR _pixel_height$[ebp], 65535	
mov	DWORD PTR _req$[ebp], 0
mov	edx, DWORD PTR _pixel_width$[ebp]
shl	edx, 6
mov	DWORD PTR _req$[ebp+4], edx
mov	eax, DWORD PTR _pixel_height$[ebp]
shl	eax, 6
mov	DWORD PTR _req$[ebp+8], eax
mov	DWORD PTR _req$[ebp+12], 0
mov	DWORD PTR _req$[ebp+16], 0
lea	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Request_Size
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Set_Pix
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN11@FT_Set_Pix
DD	-28					
DD	20					
DD	$LN10@FT_Set_Pix
DB	114					
DB	101					
DB	113					
DB	0
ENDP
_FT_Set_Char_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _char_width$[ebp], 0
jne	SHORT $LN9@FT_Set_Cha
mov	eax, DWORD PTR _char_height$[ebp]
mov	DWORD PTR _char_width$[ebp], eax
jmp	SHORT $LN8@FT_Set_Cha
cmp	DWORD PTR _char_height$[ebp], 0
jne	SHORT $LN8@FT_Set_Cha
mov	ecx, DWORD PTR _char_width$[ebp]
mov	DWORD PTR _char_height$[ebp], ecx
cmp	DWORD PTR _horz_resolution$[ebp], 0
jne	SHORT $LN6@FT_Set_Cha
mov	edx, DWORD PTR _vert_resolution$[ebp]
mov	DWORD PTR _horz_resolution$[ebp], edx
jmp	SHORT $LN5@FT_Set_Cha
cmp	DWORD PTR _vert_resolution$[ebp], 0
jne	SHORT $LN5@FT_Set_Cha
mov	eax, DWORD PTR _horz_resolution$[ebp]
mov	DWORD PTR _vert_resolution$[ebp], eax
cmp	DWORD PTR _char_width$[ebp], 64		
jge	SHORT $LN3@FT_Set_Cha
mov	DWORD PTR _char_width$[ebp], 64		
cmp	DWORD PTR _char_height$[ebp], 64	
jge	SHORT $LN2@FT_Set_Cha
mov	DWORD PTR _char_height$[ebp], 64	
cmp	DWORD PTR _horz_resolution$[ebp], 0
jne	SHORT $LN1@FT_Set_Cha
mov	DWORD PTR _vert_resolution$[ebp], 72	
mov	ecx, DWORD PTR _vert_resolution$[ebp]
mov	DWORD PTR _horz_resolution$[ebp], ecx
mov	DWORD PTR _req$[ebp], 0
mov	edx, DWORD PTR _char_width$[ebp]
mov	DWORD PTR _req$[ebp+4], edx
mov	eax, DWORD PTR _char_height$[ebp]
mov	DWORD PTR _req$[ebp+8], eax
mov	ecx, DWORD PTR _horz_resolution$[ebp]
mov	DWORD PTR _req$[ebp+12], ecx
mov	edx, DWORD PTR _vert_resolution$[ebp]
mov	DWORD PTR _req$[ebp+16], edx
lea	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Request_Size
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@FT_Set_Cha
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN13@FT_Set_Cha
DD	-28					
DD	20					
DD	$LN12@FT_Set_Cha
DB	114					
DB	101					
DB	113					
DB	0
ENDP
_FT_Request_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN42@FT_Request
push	OFFSET $SG10815
push	2894					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN43@FT_Request
cmp	DWORD PTR _req$[ebp], 0
je	SHORT $LN40@FT_Request
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+4], 0
jl	SHORT $LN40@FT_Request
mov	ecx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [ecx+8], 0
jl	SHORT $LN40@FT_Request
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx], 5
jl	SHORT $LN41@FT_Request
push	OFFSET $SG10818
push	2898					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN43@FT_Request
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _clazz$[ebp], edx
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+88], 0
je	$LN39@FT_Request
mov	esi, esp
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+88]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$3[ebp], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 12					
mov	DWORD PTR _metrics$2[ebp], ecx
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN35@FT_Request
push	OFFSET $SG10826
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN38@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN31@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
push	OFFSET $SG10831
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN36@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN27@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG10836
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN32@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN23@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10841
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN28@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN19@FT_Request
mov	edx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10846
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN24@FT_Request
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN15@FT_Request
mov	eax, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10851
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN20@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN11@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10856
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN16@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN7@FT_Request
mov	edx, DWORD PTR _metrics$2[ebp]
movzx	eax, WORD PTR [edx]
push	eax
push	OFFSET $SG10861
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN12@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN3@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
movzx	edx, WORD PTR [ecx+2]
push	edx
push	OFFSET $SG10866
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN8@FT_Request
mov	eax, DWORD PTR _error$3[ebp]
jmp	SHORT $LN43@FT_Request
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 1
jne	SHORT $LN2@FT_Request
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
je	SHORT $LN2@FT_Request
lea	edx, DWORD PTR _strike_index$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Match_Size
add	esp, 16					
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
je	SHORT $LN1@FT_Request
mov	eax, DWORD PTR _error$1[ebp]
jmp	SHORT $LN43@FT_Request
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Select_Size
add	esp, 8
jmp	SHORT $LN43@FT_Request
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Request_Metrics
add	esp, 8
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN47@FT_Request
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN46@FT_Request
DD	-12					
DD	4
DD	$LN45@FT_Request
DB	115					
DB	116					
DB	114					
DB	105					
DB	107					
DB	101					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_FT_Select_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN40@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
jne	SHORT $LN41@FT_Select_
push	OFFSET $SG10753
push	2841					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN42@FT_Select_
cmp	DWORD PTR _strike_index$[ebp], 0
jl	SHORT $LN38@FT_Select_
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _strike_index$[ebp]
cmp	eax, DWORD PTR [edx+28]
jl	SHORT $LN39@FT_Select_
push	OFFSET $SG10756
push	2844					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN42@FT_Select_
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _clazz$[ebp], eax
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+92], 0
je	$LN37@FT_Select_
mov	esi, esp
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+92]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$2[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
add	edx, 12					
mov	DWORD PTR _metrics$1[ebp], edx
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN33@FT_Select_
push	OFFSET $SG10765
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN36@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN29@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$1[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
push	OFFSET $SG10770
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN34@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN25@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$1[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
push	OFFSET $SG10775
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN30@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN21@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10780
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN26@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN17@FT_Select_
mov	eax, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10785
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN22@FT_Select_
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN13@FT_Select_
mov	ecx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10790
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN18@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN9@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10795
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Select_
mov	eax, DWORD PTR _metrics$1[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG10800
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN10@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN1@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
movzx	eax, WORD PTR [edx+2]
push	eax
push	OFFSET $SG10805
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN6@FT_Select_
mov	eax, DWORD PTR _error$2[ebp]
jmp	SHORT $LN42@FT_Select_
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Select_Metrics
add	esp, 8
xor	eax, eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Done_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 35		
cmp	DWORD PTR _face$[ebp], 0
je	$LN7@FT_Done_Fa
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+96], 0
je	$LN7@FT_Done_Fa
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+56]
sub	eax, 1
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	DWORD PTR [edx+56], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+56], 0
jle	SHORT $LN6@FT_Done_Fa
mov	DWORD PTR _error$[ebp], 0
jmp	SHORT $LN7@FT_Done_Fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
add	ecx, 16					
push	ecx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@FT_Done_Fa
mov	edx, DWORD PTR _node$[ebp]
push	edx
mov	eax, DWORD PTR _driver$[ebp]
add	eax, 16					
push	eax
call	_FT_List_Remove
add	esp, 8
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@FT_Done_Fa
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_destroy_face
add	esp, 12					
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Reference_Face PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN1@FT_Referen
push	OFFSET $SG10476
push	2391					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN2@FT_Referen
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+56]
add	edx, 1
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR [ecx+56], edx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Attach_Stream PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN4@FT_Attach_
push	OFFSET $SG10465
push	2357					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN5@FT_Attach_
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$[ebp], ecx
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN3@FT_Attach_
push	OFFSET $SG10467
push	2361					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
jmp	$LN5@FT_Attach_
lea	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _parameters$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_Attach_
jmp	SHORT $Exit$12
mov	DWORD PTR _error$[ebp], 7
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+80], 0
je	SHORT $LN1@FT_Attach_
mov	esi, esp
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+80]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _parameters$[ebp]
cmp	DWORD PTR [ecx+16], 0
je	SHORT $LN7@FT_Attach_
mov	edx, DWORD PTR _parameters$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 2
je	SHORT $LN7@FT_Attach_
mov	BYTE PTR tv95[ebp], 1
jmp	SHORT $LN8@FT_Attach_
mov	BYTE PTR tv95[ebp], 0
movzx	ecx, BYTE PTR tv95[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@FT_Attach_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN10@FT_Attach_
DD	-8					
DD	4
DD	$LN9@FT_Attach_
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
ENDP
_FT_Attach_File PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _filepathname$[ebp], 0
jne	SHORT $LN1@FT_Attach_
push	OFFSET $SG10452
push	2331					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN2@FT_Attach_
mov	DWORD PTR _open$[ebp+16], 0
mov	DWORD PTR _open$[ebp], 4
mov	eax, DWORD PTR _filepathname$[ebp]
mov	DWORD PTR _open$[ebp+12], eax
lea	ecx, DWORD PTR _open$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Attach_Stream
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_Attach_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@FT_Attach_
DD	-36					
DD	32					
DD	$LN4@FT_Attach_
DB	111					
DB	112					
DB	101					
DB	110					
DB	0
ENDP
_FT_Open_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 104				
push	edi
lea	edi, DWORD PTR [ebp-104]
mov	ecx, 26					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _driver$[ebp], 0
mov	DWORD PTR _memory$[ebp], 0
mov	DWORD PTR _stream$[ebp], 0
mov	DWORD PTR _face$[ebp], 0
mov	DWORD PTR _node$[ebp], 0
cmp	DWORD PTR _aface$[ebp], 0
jne	SHORT $LN56@FT_Open_Fa
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN57@FT_Open_Fa
cmp	DWORD PTR _args$[ebp], 0
jne	SHORT $LN58@FT_Open_Fa
push	OFFSET $SG10358
push	2084					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN59@FT_Open_Fa
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 2
je	SHORT $LN61@FT_Open_Fa
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+16], 0
je	SHORT $LN61@FT_Open_Fa
mov	BYTE PTR tv77[ebp], 1
jmp	SHORT $LN62@FT_Open_Fa
mov	BYTE PTR tv77[ebp], 0
mov	al, BYTE PTR tv77[ebp]
mov	BYTE PTR _external_stream$[ebp], al
lea	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _args$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN55@FT_Open_Fa
jmp	$Fail3$69
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 8
je	$LN54@FT_Open_Fa
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+20], 0
je	$LN54@FT_Open_Fa
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _driver$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 1
je	SHORT $LN53@FT_Open_Fa
mov	DWORD PTR _num_params$8[ebp], 0
mov	DWORD PTR _params$7[ebp], 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 16					
je	SHORT $LN52@FT_Open_Fa
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _num_params$8[ebp], edx
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _params$7[ebp], ecx
lea	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _params$7[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$8[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
lea	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _driver$[ebp]
push	edx
call	_open_face
add	esp, 28					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN51@FT_Open_Fa
jmp	$Success$70
jmp	SHORT $LN50@FT_Open_Fa
push	OFFSET $SG10372
push	2121					
push	32					
call	_FT_Throw
add	esp, 12					
or	eax, 32					
mov	DWORD PTR _error$[ebp], eax
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
jmp	$Fail$71
jmp	$Success$70
mov	DWORD PTR _error$[ebp], 11		
mov	edx, DWORD PTR _library$[ebp]
add	edx, 20					
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _cur$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN48@FT_Open_Fa
mov	ecx, DWORD PTR _cur$[ebp]
add	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	$Fail3$69
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 1
je	$LN45@FT_Open_Fa
mov	DWORD PTR _num_params$6[ebp], 0
mov	DWORD PTR _params$5[ebp], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 16					
je	SHORT $LN44@FT_Open_Fa
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _num_params$6[ebp], ecx
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _params$5[ebp], eax
lea	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _params$5[ebp]
push	edx
mov	eax, DWORD PTR _num_params$6[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
movzx	edx, BYTE PTR _external_stream$[ebp]
push	edx
lea	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
call	_open_face
add	esp, 28					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN43@FT_Open_Fa
jmp	$Success$70
push	OFFSET $SG10386
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN42@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 142				
jne	SHORT $LN42@FT_Open_Fa
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
test	eax, eax
je	SHORT $LN41@FT_Open_Fa
jmp	SHORT $Fail3$69
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _params$5[ebp]
push	edx
mov	eax, DWORD PTR _num_params$6[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_open_face_PS_from_sfnt_stream
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN42@FT_Open_Fa
movzx	ecx, BYTE PTR _external_stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN59@FT_Open_Fa
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 2
je	SHORT $LN45@FT_Open_Fa
jmp	SHORT $Fail3$69
jmp	$LN47@FT_Open_Fa
mov	ecx, DWORD PTR _error$[ebp]
and	ecx, 255				
cmp	ecx, 81					
je	SHORT $LN38@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
je	SHORT $LN38@FT_Open_Fa
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 85					
je	SHORT $LN38@FT_Open_Fa
jmp	SHORT $Fail2$72
mov	ecx, DWORD PTR _args$[ebp]
push	ecx
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_load_mac_face
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN37@FT_Open_Fa
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN59@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
je	SHORT $LN36@FT_Open_Fa
jmp	SHORT $Fail2$72
push	OFFSET $SG10394
push	2210					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
jmp	$Fail$71
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN34@FT_Open_Fa
push	OFFSET $SG10399
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $Success$70
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	12					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@FT_Open_Fa
jmp	$Fail$71
mov	ecx, DWORD PTR _node$[ebp]
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _node$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
add	edx, 16					
push	edx
call	_FT_List_Add
add	esp, 8
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN29@FT_Open_Fa
push	OFFSET $SG10406
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN30@FT_Open_Fa
cmp	DWORD PTR _face_index$[ebp], 0
jl	SHORT $LN26@FT_Open_Fa
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_New_GlyphSlot
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@FT_Open_Fa
jmp	$Fail$71
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN23@FT_Open_Fa
push	OFFSET $SG10415
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN24@FT_Open_Fa
lea	ecx, DWORD PTR _size$4[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_New_Size
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@FT_Open_Fa
jmp	$Fail$71
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _size$4[ebp]
mov	DWORD PTR [eax+88], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	SHORT $LN19@FT_Open_Fa
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+74]
test	edx, edx
jge	SHORT $LN18@FT_Open_Fa
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+74]
neg	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	WORD PTR [edx+74], cx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 32					
jne	SHORT $LN19@FT_Open_Fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	cx, WORD PTR [eax+74]
mov	WORD PTR [edx+78], cx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 2
je	SHORT $LN16@FT_Open_Fa
mov	DWORD PTR _i$3[ebp], 0
jmp	SHORT $LN15@FT_Open_Fa
mov	ecx, DWORD PTR _i$3[ebp]
add	ecx, 1
mov	DWORD PTR _i$3[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _i$3[ebp]
cmp	eax, DWORD PTR [edx+28]
jge	SHORT $LN16@FT_Open_Fa
mov	ecx, DWORD PTR _i$3[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _face$[ebp]
add	ecx, DWORD PTR [edx+32]
mov	DWORD PTR _bsize$2[ebp], ecx
mov	eax, DWORD PTR _bsize$2[ebp]
movsx	ecx, WORD PTR [eax]
test	ecx, ecx
jge	SHORT $LN12@FT_Open_Fa
mov	edx, DWORD PTR _bsize$2[ebp]
movsx	eax, WORD PTR [edx]
neg	eax
mov	ecx, DWORD PTR _bsize$2[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _bsize$2[ebp]
cmp	DWORD PTR [edx+8], 0
jge	SHORT $LN11@FT_Open_Fa
mov	eax, DWORD PTR _bsize$2[ebp]
mov	ecx, DWORD PTR [eax+8]
neg	ecx
movsx	edx, cx
mov	eax, DWORD PTR _bsize$2[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _bsize$2[ebp]
cmp	DWORD PTR [ecx+12], 0
jge	SHORT $LN10@FT_Open_Fa
mov	edx, DWORD PTR _bsize$2[ebp]
mov	eax, DWORD PTR [edx+12]
neg	eax
mov	ecx, DWORD PTR _bsize$2[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN14@FT_Open_Fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	DWORD PTR _internal$1[ebp], eax
mov	ecx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [ecx], 65536			
mov	edx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [ecx+12], 65536		
mov	edx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [edx+16], 0
mov	eax, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [ecx+56], 1
cmp	DWORD PTR _aface$[ebp], 0
je	SHORT $LN9@FT_Open_Fa
mov	edx, DWORD PTR _aface$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN8@FT_Open_Fa
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Done_Face
add	esp, 4
jmp	SHORT $Exit$73
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@FT_Open_Fa
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Done_Face
add	esp, 4
jmp	SHORT $Exit$73
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $Exit$73
mov	eax, DWORD PTR _driver$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_destroy_face
add	esp, 12					
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN3@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
push	edx
push	OFFSET $SG10444
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $Exit$73
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN68@FT_Open_Fa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 104				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN67@FT_Open_Fa
DD	-8					
DD	4
DD	$LN63@FT_Open_Fa
DD	-28					
DD	4
DD	$LN64@FT_Open_Fa
DD	-40					
DD	4
DD	$LN65@FT_Open_Fa
DD	-84					
DD	4
DD	$LN66@FT_Open_Fa
DB	115					
DB	105					
DB	122					
DB	101					
DB	0
DB	102					
DB	97					
DB	99					
DB	101					
DB	0
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_New_Memory_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _file_base$[ebp], 0
jne	SHORT $LN1@FT_New_Mem
push	OFFSET $SG9832
push	1253					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN2@FT_New_Mem
mov	DWORD PTR _args$[ebp], 1
mov	eax, DWORD PTR _file_base$[ebp]
mov	DWORD PTR _args$[ebp+4], eax
mov	ecx, DWORD PTR _file_size$[ebp]
mov	DWORD PTR _args$[ebp+8], ecx
mov	DWORD PTR _args$[ebp+16], 0
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
lea	ecx, DWORD PTR _args$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Open_Face
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_New_Mem
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN5@FT_New_Mem
DD	-36					
DD	32					
DD	$LN4@FT_New_Mem
DB	97					
DB	114					
DB	103					
DB	115					
DB	0
ENDP
_FT_New_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _pathname$[ebp], 0
jne	SHORT $LN1@FT_New_Fac
push	OFFSET $SG9816
push	1227					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN2@FT_New_Fac
mov	DWORD PTR _args$[ebp], 4
mov	eax, DWORD PTR _pathname$[ebp]
mov	DWORD PTR _args$[ebp+12], eax
mov	DWORD PTR _args$[ebp+16], 0
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
lea	eax, DWORD PTR _args$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Open_Face
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_New_Fac
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@FT_New_Fac
DD	-36					
DD	32					
DD	$LN4@FT_New_Fac
DB	97					
DB	114					
DB	103					
DB	115					
DB	0
ENDP
_ft_trig_pseudo_polarize PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
cmp	ecx, DWORD PTR _x$[ebp]
jle	SHORT $LN13@ft_trig_ps
mov	edx, DWORD PTR _x$[ebp]
neg	edx
cmp	DWORD PTR _y$[ebp], edx
jle	SHORT $LN12@ft_trig_ps
mov	DWORD PTR _theta$[ebp], 5898240		
mov	eax, DWORD PTR _y$[ebp]
mov	DWORD PTR _xtemp$[ebp], eax
mov	ecx, DWORD PTR _x$[ebp]
neg	ecx
mov	DWORD PTR _y$[ebp], ecx
mov	edx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], edx
jmp	SHORT $LN11@ft_trig_ps
cmp	DWORD PTR _y$[ebp], 0
jle	SHORT $LN16@ft_trig_ps
mov	DWORD PTR tv71[ebp], 11796480		
jmp	SHORT $LN17@ft_trig_ps
mov	DWORD PTR tv71[ebp], -11796480		
mov	eax, DWORD PTR tv71[ebp]
mov	DWORD PTR _theta$[ebp], eax
mov	ecx, DWORD PTR _x$[ebp]
neg	ecx
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _y$[ebp]
neg	edx
mov	DWORD PTR _y$[ebp], edx
jmp	SHORT $LN10@ft_trig_ps
mov	eax, DWORD PTR _x$[ebp]
neg	eax
cmp	DWORD PTR _y$[ebp], eax
jge	SHORT $LN9@ft_trig_ps
mov	DWORD PTR _theta$[ebp], -5898240	
mov	ecx, DWORD PTR _y$[ebp]
neg	ecx
mov	DWORD PTR _xtemp$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
jmp	SHORT $LN10@ft_trig_ps
mov	DWORD PTR _theta$[ebp], 0
mov	DWORD PTR _arctanptr$[ebp], OFFSET _ft_trig_arctan_table
mov	DWORD PTR _i$[ebp], 1
mov	DWORD PTR _b$[ebp], 1
jmp	SHORT $LN7@ft_trig_ps
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 1
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _i$[ebp], 23			
jge	$LN5@ft_trig_ps
cmp	DWORD PTR _y$[ebp], 0
jle	SHORT $LN4@ft_trig_ps
mov	eax, DWORD PTR _y$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	eax, cl
add	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR _xtemp$[ebp], eax
mov	edx, DWORD PTR _x$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _y$[ebp]
sub	eax, edx
mov	DWORD PTR _y$[ebp], eax
mov	ecx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _arctanptr$[ebp]
mov	eax, DWORD PTR _theta$[ebp]
add	eax, DWORD PTR [edx]
mov	DWORD PTR _theta$[ebp], eax
mov	ecx, DWORD PTR _arctanptr$[ebp]
add	ecx, 4
mov	DWORD PTR _arctanptr$[ebp], ecx
jmp	SHORT $LN3@ft_trig_ps
mov	edx, DWORD PTR _y$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _x$[ebp]
sub	eax, edx
mov	DWORD PTR _xtemp$[ebp], eax
mov	edx, DWORD PTR _x$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
add	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _arctanptr$[ebp]
mov	edx, DWORD PTR _theta$[ebp]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _theta$[ebp], edx
mov	eax, DWORD PTR _arctanptr$[ebp]
add	eax, 4
mov	DWORD PTR _arctanptr$[ebp], eax
jmp	$LN6@ft_trig_ps
cmp	DWORD PTR _theta$[ebp], 0
jl	SHORT $LN2@ft_trig_ps
mov	ecx, DWORD PTR _theta$[ebp]
add	ecx, 8
and	ecx, -16				
mov	DWORD PTR _theta$[ebp], ecx
jmp	SHORT $LN1@ft_trig_ps
mov	edx, DWORD PTR _theta$[ebp]
neg	edx
add	edx, 8
and	edx, -16				
neg	edx
mov	DWORD PTR _theta$[ebp], edx
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR _theta$[ebp]
mov	DWORD PTR [edx+4], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_trig_pseudo_rotate PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
cmp	DWORD PTR _theta$[ebp], -2949120	
jge	SHORT $LN7@ft_trig_ps
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR _xtemp$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
neg	edx
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _theta$[ebp]
add	ecx, 5898240				
mov	DWORD PTR _theta$[ebp], ecx
jmp	SHORT $LN9@ft_trig_ps
cmp	DWORD PTR _theta$[ebp], 2949120		
jle	SHORT $LN6@ft_trig_ps
mov	edx, DWORD PTR _y$[ebp]
neg	edx
mov	DWORD PTR _xtemp$[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR _y$[ebp], eax
mov	ecx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _theta$[ebp]
sub	edx, 5898240				
mov	DWORD PTR _theta$[ebp], edx
jmp	SHORT $LN7@ft_trig_ps
mov	DWORD PTR _arctanptr$[ebp], OFFSET _ft_trig_arctan_table
mov	DWORD PTR _i$[ebp], 1
mov	DWORD PTR _b$[ebp], 1
jmp	SHORT $LN5@ft_trig_ps
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 1
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _i$[ebp], 23			
jge	$LN3@ft_trig_ps
cmp	DWORD PTR _theta$[ebp], 0
jge	SHORT $LN2@ft_trig_ps
mov	edx, DWORD PTR _y$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
add	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR _xtemp$[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	eax, cl
mov	ecx, DWORD PTR _y$[ebp]
sub	ecx, eax
mov	DWORD PTR _y$[ebp], ecx
mov	edx, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], edx
mov	eax, DWORD PTR _arctanptr$[ebp]
mov	ecx, DWORD PTR _theta$[ebp]
add	ecx, DWORD PTR [eax]
mov	DWORD PTR _theta$[ebp], ecx
mov	edx, DWORD PTR _arctanptr$[ebp]
add	edx, 4
mov	DWORD PTR _arctanptr$[ebp], edx
jmp	SHORT $LN1@ft_trig_ps
mov	eax, DWORD PTR _y$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	eax, cl
mov	ecx, DWORD PTR _x$[ebp]
sub	ecx, eax
mov	DWORD PTR _xtemp$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
sar	edx, cl
add	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR _y$[ebp], edx
mov	eax, DWORD PTR _xtemp$[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _arctanptr$[ebp]
mov	edx, DWORD PTR _theta$[ebp]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _theta$[ebp], edx
mov	eax, DWORD PTR _arctanptr$[ebp]
add	eax, 4
mov	DWORD PTR _arctanptr$[ebp], eax
jmp	$LN4@ft_trig_ps
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_trig_prenorm PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
cmp	DWORD PTR _x$[ebp], 0
jge	SHORT $LN5@ft_trig_pr
mov	ecx, DWORD PTR _x$[ebp]
neg	ecx
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN6@ft_trig_pr
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR tv69[ebp], edx
cmp	DWORD PTR _y$[ebp], 0
jge	SHORT $LN7@ft_trig_pr
mov	eax, DWORD PTR _y$[ebp]
neg	eax
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN8@ft_trig_pr
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR tv72[ebp], ecx
mov	edx, DWORD PTR tv69[ebp]
or	edx, DWORD PTR tv72[ebp]
push	edx
call	_FT_MSB
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
cmp	DWORD PTR _shift$[ebp], 29		
jg	SHORT $LN2@ft_trig_pr
mov	eax, 29					
sub	eax, DWORD PTR _shift$[ebp]
mov	DWORD PTR _shift$[ebp], eax
mov	edx, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR _y$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
jmp	SHORT $LN1@ft_trig_pr
mov	ecx, DWORD PTR _shift$[ebp]
sub	ecx, 29					
mov	DWORD PTR _shift$[ebp], ecx
mov	edx, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR _y$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _shift$[ebp]
neg	ecx
mov	DWORD PTR _shift$[ebp], ecx
mov	eax, DWORD PTR _shift$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_trig_downscale PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _val$[ebp], 0
jge	SHORT $LN1@ft_trig_do
mov	eax, DWORD PTR _val$[ebp]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	DWORD PTR _s$[ebp], -1
mov	ecx, DWORD PTR _val$[ebp]
and	ecx, 65535				
mov	DWORD PTR _lo1$[ebp], ecx
mov	edx, DWORD PTR _val$[ebp]
sar	edx, 16					
mov	DWORD PTR _hi1$[ebp], edx
mov	DWORD PTR _lo2$[ebp], 23318		
mov	DWORD PTR _hi2$[ebp], 56281		
mov	eax, DWORD PTR _lo1$[ebp]
imul	eax, DWORD PTR _lo2$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo1$[ebp]
imul	ecx, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _i1$[ebp], ecx
mov	edx, DWORD PTR _lo2$[ebp]
imul	edx, DWORD PTR _hi1$[ebp]
mov	DWORD PTR _i2$[ebp], edx
mov	eax, DWORD PTR _hi1$[ebp]
imul	eax, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _i1$[ebp]
add	ecx, DWORD PTR _i2$[ebp]
mov	DWORD PTR _i1$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
cmp	edx, DWORD PTR _i2$[ebp]
jae	SHORT $LN4@ft_trig_do
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN5@ft_trig_do
mov	DWORD PTR tv74[ebp], 0
mov	eax, DWORD PTR tv74[ebp]
shl	eax, 16					
add	eax, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _i1$[ebp]
shr	ecx, 16					
add	ecx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
shl	edx, 16					
mov	DWORD PTR _i1$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
add	eax, DWORD PTR _i1$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR _i1$[ebp]
jae	SHORT $LN6@ft_trig_do
mov	DWORD PTR tv82[ebp], 1
jmp	SHORT $LN7@ft_trig_do
mov	DWORD PTR tv82[ebp], 0
mov	edx, DWORD PTR _hi$[ebp]
add	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
add	eax, 1073741824				
mov	DWORD PTR _lo$[ebp], eax
cmp	DWORD PTR _lo$[ebp], 1073741824		
jae	SHORT $LN8@ft_trig_do
mov	DWORD PTR tv86[ebp], 1
jmp	SHORT $LN9@ft_trig_do
mov	DWORD PTR tv86[ebp], 0
mov	ecx, DWORD PTR _hi$[ebp]
add	ecx, DWORD PTR tv86[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN10@ft_trig_do
mov	eax, DWORD PTR _val$[ebp]
neg	eax
mov	DWORD PTR tv90[ebp], eax
jmp	SHORT $LN11@ft_trig_do
mov	ecx, DWORD PTR _val$[ebp]
mov	DWORD PTR tv90[ebp], ecx
mov	eax, DWORD PTR tv90[ebp]
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Sfnt_Name PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 6
cmp	DWORD PTR _aname$[ebp], 0
je	$LN8@FT_Get_Sfn
cmp	DWORD PTR _face$[ebp], 0
je	$LN8@FT_Get_Sfn
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
je	$LN8@FT_Get_Sfn
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR _ttface$4[ebp], edx
mov	eax, DWORD PTR _ttface$4[ebp]
movzx	ecx, WORD PTR [eax+340]
cmp	DWORD PTR _idx$[ebp], ecx
jae	$LN8@FT_Get_Sfn
imul	edx, DWORD PTR _idx$[ebp], 20
mov	eax, DWORD PTR _ttface$4[ebp]
add	edx, DWORD PTR [eax+356]
mov	DWORD PTR _entry$3[ebp], edx
mov	ecx, DWORD PTR _entry$3[ebp]
movzx	edx, WORD PTR [ecx+8]
test	edx, edx
jle	$LN6@FT_Get_Sfn
mov	eax, DWORD PTR _entry$3[ebp]
cmp	DWORD PTR [eax+16], 0
jne	$LN6@FT_Get_Sfn
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$2[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$1[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _entry$3[ebp]
movzx	ecx, WORD PTR [eax+8]
push	ecx
push	0
push	1
mov	edx, DWORD PTR _memory$2[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _entry$3[ebp]
mov	DWORD PTR [ecx+16], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@FT_Get_Sfn
mov	edx, DWORD PTR _entry$3[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _stream$1[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@FT_Get_Sfn
mov	edx, DWORD PTR _entry$3[ebp]
movzx	eax, WORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _entry$3[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _stream$1[ebp]
push	eax
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@FT_Get_Sfn
mov	ecx, DWORD PTR _entry$3[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _memory$2[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _entry$3[ebp]
mov	DWORD PTR [ecx+16], 0
xor	edx, edx
jne	SHORT $LN3@FT_Get_Sfn
xor	eax, eax
mov	ecx, DWORD PTR _entry$3[ebp]
mov	WORD PTR [ecx+8], ax
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax]
mov	WORD PTR [edx], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax+2]
mov	WORD PTR [edx+2], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax+4]
mov	WORD PTR [edx+4], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	cx, WORD PTR [eax+6]
mov	WORD PTR [edx+6], cx
mov	edx, DWORD PTR _aname$[ebp]
mov	eax, DWORD PTR _entry$3[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _entry$3[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _aname$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Get_Sfn
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN12@FT_Get_Sfn
DD	-8					
DD	4
DD	$LN11@FT_Get_Sfn
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Get_Sfnt_Name_Count PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN3@FT_Get_Sfn
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
je	SHORT $LN3@FT_Get_Sfn
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+340]
mov	DWORD PTR tv70[ebp], eax
jmp	SHORT $LN4@FT_Get_Sfn
mov	DWORD PTR tv70[ebp], 0
mov	eax, DWORD PTR tv70[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_get_rule_type_from_rule_index PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
cmp	DWORD PTR _rule_index$[ebp], 9
jb	SHORT $LN1@raccess_ge
mov	eax, -2					
jmp	SHORT $LN2@raccess_ge
mov	ecx, DWORD PTR _rule_index$[ebp]
mov	eax, DWORD PTR _ft_raccess_guess_table[ecx*8+4]
pop	ebp
ret	0
ENDP
_raccess_make_file_name PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _new_name$[ebp], 0
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _original_name$[ebp]
push	ecx
call	_strlen
add	esp, 4
mov	esi, eax
mov	edx, DWORD PTR _insertion$[ebp]
push	edx
call	_strlen
add	esp, 4
add	esi, eax
mov	DWORD PTR _new_length$[ebp], esi
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _new_length$[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _new_name$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@raccess_ma
xor	eax, eax
jmp	$LN4@raccess_ma
mov	esi, esp
push	47					
mov	eax, DWORD PTR _original_name$[ebp]
push	eax
call	DWORD PTR __imp__strrchr
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _tmp$[ebp], eax
cmp	DWORD PTR _tmp$[ebp], 0
je	SHORT $LN2@raccess_ma
mov	ecx, DWORD PTR _tmp$[ebp]
sub	ecx, DWORD PTR _original_name$[ebp]
add	ecx, 1
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _original_name$[ebp]
push	edx
mov	eax, DWORD PTR _new_name$[ebp]
push	eax
call	DWORD PTR __imp__strncpy
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _tmp$[ebp]
sub	ecx, DWORD PTR _original_name$[ebp]
mov	edx, DWORD PTR _new_name$[ebp]
mov	BYTE PTR [edx+ecx+1], 0
mov	eax, DWORD PTR _tmp$[ebp]
add	eax, 1
mov	DWORD PTR _slash$[ebp], eax
jmp	SHORT $LN1@raccess_ma
mov	ecx, DWORD PTR _original_name$[ebp]
mov	DWORD PTR _slash$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _new_name$[ebp]
mov	BYTE PTR [ecx+eax], 0
mov	edx, DWORD PTR _insertion$[ebp]
push	edx
mov	eax, DWORD PTR _new_name$[ebp]
push	eax
call	_strcat
add	esp, 8
mov	ecx, DWORD PTR _slash$[ebp]
push	ecx
mov	edx, DWORD PTR _new_name$[ebp]
push	edx
call	_strcat
add	esp, 8
mov	eax, DWORD PTR _new_name$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@raccess_ma
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN7@raccess_ma
DD	-24					
DD	4
DD	$LN6@raccess_ma
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_linux_double_from_file_name PROC
push	ebp
mov	ebp, esp
sub	esp, 68					
push	edi
lea	edi, DWORD PTR [ebp-68]
mov	ecx, 17					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _nouse$[ebp], 0
mov	DWORD PTR _args2$[ebp], 4
mov	eax, DWORD PTR _file_name$[ebp]
mov	DWORD PTR _args2$[ebp+12], eax
lea	ecx, DWORD PTR _stream2$[ebp]
push	ecx
lea	edx, DWORD PTR _args2$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN2@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
push	ecx
lea	edx, DWORD PTR _nouse$[ebp]
push	edx
mov	eax, DWORD PTR _file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _stream2$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_raccess_guess_apple_double
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
push	0
mov	eax, DWORD PTR _stream2$[ebp]
push	eax
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 68					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN7@raccess_gu
DD	-36					
DD	32					
DD	$LN4@raccess_gu
DD	-48					
DD	4
DD	$LN5@raccess_gu
DD	-60					
DD	4
DD	$LN6@raccess_gu
DB	110					
DB	111					
DB	117					
DB	115					
DB	101					
DB	0
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	50					
DB	0
DB	97					
DB	114					
DB	103					
DB	115					
DB	50					
DB	0
ENDP
_raccess_guess_apple_generic PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _version_number$[ebp], 0
mov	DWORD PTR _entry_length$[ebp], 0
mov	DWORD PTR _resource_fork_entry_id$[ebp], 2
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _base_file_name$[ebp]
mov	DWORD PTR _base_file_name$[ebp], ecx
mov	edx, DWORD PTR _version_number$[ebp]
mov	DWORD PTR _version_number$[ebp], edx
mov	eax, DWORD PTR _entry_length$[ebp]
mov	DWORD PTR _entry_length$[ebp], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _magic_from_stream$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
mov	eax, DWORD PTR _magic_from_stream$[ebp]
cmp	eax, DWORD PTR _magic$[ebp]
je	SHORT $LN14@raccess_gu
push	OFFSET $SG13004
push	729					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@raccess_gu
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _version_number$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
push	16					
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN12@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _n_of_entries$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
movzx	eax, WORD PTR _n_of_entries$[ebp]
test	eax, eax
jne	SHORT $LN10@raccess_gu
push	OFFSET $SG13011
push	742					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@raccess_gu
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN9@raccess_gu
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
movzx	edx, WORD PTR _n_of_entries$[ebp]
cmp	DWORD PTR _i$[ebp], edx
jge	$LN7@raccess_gu
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _entry_id$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@raccess_gu
mov	edx, DWORD PTR _entry_id$[ebp]
cmp	edx, DWORD PTR _resource_fork_entry_id$[ebp]
jne	SHORT $LN5@raccess_gu
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _entry_offset$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _entry_length$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@raccess_gu
jmp	SHORT $LN8@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
mov	edx, DWORD PTR _entry_offset$[ebp]
mov	DWORD PTR [ecx], edx
xor	eax, eax
jmp	SHORT $LN16@raccess_gu
jmp	SHORT $LN2@raccess_gu
push	8
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN16@raccess_gu
jmp	$LN8@raccess_gu
push	OFFSET $SG13024
push	765					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN19@raccess_gu
DD	-12					
DD	4
DD	$LN18@raccess_gu
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_linux_netatalk PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12972
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN6@raccess_gu
push	OFFSET $SG12974
push	690					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN7@raccess_gu
mov	edx, DWORD PTR _result_offset$[ebp]
push	edx
mov	eax, DWORD PTR _newpath$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_guess_linux_double_from_file_name
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN4@raccess_gu
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _newpath$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_linux_double PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12949
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN6@raccess_gu
push	OFFSET $SG12951
push	658					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN7@raccess_gu
mov	edx, DWORD PTR _result_offset$[ebp]
push	edx
mov	eax, DWORD PTR _newpath$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_guess_linux_double_from_file_name
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN4@raccess_gu
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _newpath$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_linux_cap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12932
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12934
push	631					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN2@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [ecx], 0
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_vfat PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12916
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12918
push	605					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN2@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [ecx], 0
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_darwin_hfsplus PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _newpath$[ebp], 0
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
call	_strlen
add	esp, 4
mov	DWORD PTR _base_file_len$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _base_file_len$[ebp]
add	ecx, 6
cmp	ecx, 2147483647				
jle	SHORT $LN2@raccess_gu
push	OFFSET $SG12877
push	536					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	SHORT $LN3@raccess_gu
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_len$[ebp]
add	eax, 6
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _base_file_len$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
push	6
push	OFFSET $SG12880
mov	edx, DWORD PTR _newpath$[ebp]
add	edx, DWORD PTR _base_file_len$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	ecx, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [edx], 0
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN6@raccess_gu
DD	-8					
DD	4
DD	$LN5@raccess_gu
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_darwin_newvfs PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _newpath$[ebp], 0
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
call	_strlen
add	esp, 4
mov	DWORD PTR _base_file_len$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _base_file_len$[ebp]
add	ecx, 18					
cmp	ecx, 2147483647				
jle	SHORT $LN2@raccess_gu
push	OFFSET $SG12899
push	572					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	SHORT $LN3@raccess_gu
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_len$[ebp]
add	eax, 18					
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _base_file_len$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
push	18					
push	OFFSET $SG12902
mov	edx, DWORD PTR _newpath$[ebp]
add	edx, DWORD PTR _base_file_len$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	ecx, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _result_offset$[ebp]
mov	DWORD PTR [edx], 0
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@raccess_gu
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN6@raccess_gu
DD	-8					
DD	4
DD	$LN5@raccess_gu
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_raccess_guess_darwin_ufs_export PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _stream$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
push	OFFSET $SG12850
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_raccess_make_file_name
add	esp, 12					
mov	DWORD PTR _newpath$[ebp], eax
cmp	DWORD PTR _newpath$[ebp], 0
jne	SHORT $LN6@raccess_gu
push	OFFSET $SG12852
push	502					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	SHORT $LN7@raccess_gu
mov	edx, DWORD PTR _result_offset$[ebp]
push	edx
mov	eax, DWORD PTR _newpath$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_guess_linux_double_from_file_name
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@raccess_gu
mov	edx, DWORD PTR _result_file_name$[ebp]
mov	eax, DWORD PTR _newpath$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN4@raccess_gu
mov	ecx, DWORD PTR _newpath$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _newpath$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@raccess_gu
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_apple_single PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _magic$[ebp], 333312		
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12835
push	478					
push	81					
call	_FT_Throw
add	esp, 12					
or	eax, 81					
jmp	SHORT $LN2@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _magic$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_raccess_guess_apple_generic
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_raccess_guess_apple_double PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _magic$[ebp], 333319		
mov	eax, DWORD PTR _result_file_name$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN1@raccess_gu
push	OFFSET $SG12819
push	456					
push	81					
call	_FT_Throw
add	esp, 12					
or	eax, 81					
jmp	SHORT $LN2@raccess_gu
mov	ecx, DWORD PTR _result_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _magic$[ebp]
push	edx
mov	eax, DWORD PTR _base_file_name$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_raccess_guess_apple_generic
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_raccess_sort_ref_by_id PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _a$[ebp]
movzx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _b$[ebp]
movzx	eax, WORD PTR [edx]
cmp	ecx, eax
jge	SHORT $LN4@ft_raccess
or	eax, -1
jmp	SHORT $LN5@ft_raccess
jmp	SHORT $LN5@ft_raccess
mov	ecx, DWORD PTR _a$[ebp]
movzx	edx, WORD PTR [ecx]
mov	eax, DWORD PTR _b$[ebp]
movzx	ecx, WORD PTR [eax]
cmp	edx, ecx
jle	SHORT $LN2@ft_raccess
mov	eax, 1
jmp	SHORT $LN5@ft_raccess
jmp	SHORT $LN5@ft_raccess
xor	eax, eax
pop	ebp
ret	0
ENDP
_ft_property_do PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _set_name$[ebp], OFFSET $SG11866
mov	DWORD PTR _get_name$[ebp], OFFSET $SG11868
movzx	eax, BYTE PTR _set$[ebp]
test	eax, eax
je	SHORT $LN16@ft_propert
mov	ecx, DWORD PTR _set_name$[ebp]
mov	DWORD PTR tv66[ebp], ecx
jmp	SHORT $LN17@ft_propert
mov	edx, DWORD PTR _get_name$[ebp]
mov	DWORD PTR tv66[ebp], edx
mov	eax, DWORD PTR tv66[ebp]
mov	DWORD PTR _func_name$[ebp], eax
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN13@ft_propert
push	OFFSET $SG11872
push	4533					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN14@ft_propert
cmp	DWORD PTR _module_name$[ebp], 0
je	SHORT $LN11@ft_propert
cmp	DWORD PTR _property_name$[ebp], 0
je	SHORT $LN11@ft_propert
cmp	DWORD PTR _value$[ebp], 0
jne	SHORT $LN12@ft_propert
push	OFFSET $SG11875
push	4536					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN14@ft_propert
mov	ecx, DWORD PTR _library$[ebp]
add	ecx, 20					
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _cur$[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _limit$[ebp], edx
jmp	SHORT $LN10@ft_propert
mov	eax, DWORD PTR _cur$[ebp]
add	eax, 4
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jae	SHORT $LN8@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN7@ft_propert
jmp	SHORT $LN8@ft_propert
jmp	SHORT $LN9@ft_propert
mov	eax, DWORD PTR _cur$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jne	SHORT $LN6@ft_propert
mov	ecx, DWORD PTR _module_name$[ebp]
push	ecx
mov	edx, DWORD PTR _func_name$[ebp]
push	edx
push	OFFSET $SG11881
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11882
push	4550					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
jmp	$LN14@ft_propert
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
cmp	DWORD PTR [ecx+32], 0
jne	SHORT $LN5@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _func_name$[ebp]
push	eax
push	OFFSET $SG11884
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11885
push	4558					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN14@ft_propert
mov	esi, esp
push	OFFSET $SG11886
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _interface$[ebp], eax
cmp	DWORD PTR _interface$[ebp], 0
jne	SHORT $LN4@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _func_name$[ebp]
push	eax
push	OFFSET $SG11888
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11889
push	4568					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN14@ft_propert
mov	ecx, DWORD PTR _interface$[ebp]
mov	DWORD PTR _service$[ebp], ecx
movzx	edx, BYTE PTR _set$[ebp]
test	edx, edx
je	SHORT $LN3@ft_propert
mov	eax, DWORD PTR _service$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN18@ft_propert
mov	BYTE PTR tv171[ebp], 1
jmp	SHORT $LN19@ft_propert
mov	BYTE PTR tv171[ebp], 0
mov	cl, BYTE PTR tv171[ebp]
mov	BYTE PTR _missing_func$[ebp], cl
jmp	SHORT $LN2@ft_propert
mov	edx, DWORD PTR _service$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN20@ft_propert
mov	BYTE PTR tv174[ebp], 1
jmp	SHORT $LN21@ft_propert
mov	BYTE PTR tv174[ebp], 0
mov	al, BYTE PTR tv174[ebp]
mov	BYTE PTR _missing_func$[ebp], al
movzx	ecx, BYTE PTR _missing_func$[ebp]
test	ecx, ecx
je	SHORT $LN1@ft_propert
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _func_name$[ebp]
push	eax
push	OFFSET $SG11896
call	_FT_Message
add	esp, 12					
push	OFFSET $SG11897
push	4582					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN14@ft_propert
movzx	ecx, BYTE PTR _set$[ebp]
test	ecx, ecx
je	SHORT $LN22@ft_propert
mov	esi, esp
mov	edx, DWORD PTR _value$[ebp]
push	edx
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv201[ebp], eax
jmp	SHORT $LN23@ft_propert
mov	esi, esp
mov	ecx, DWORD PTR _value$[ebp]
push	ecx
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _service$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv201[ebp], eax
mov	eax, DWORD PTR tv201[ebp]
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Destroy_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _clazz$[ebp], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN7@Destroy_Mo
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+160]
cmp	ecx, DWORD PTR _module$[ebp]
jne	SHORT $LN7@Destroy_Mo
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+160], 0
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 2
je	SHORT $LN6@Destroy_Mo
mov	eax, DWORD PTR _module$[ebp]
push	eax
call	_ft_remove_renderer
add	esp, 4
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 1
je	SHORT $LN5@Destroy_Mo
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
call	_Destroy_Driver
add	esp, 4
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+28], 0
je	SHORT $LN3@Destroy_Mo
mov	esi, esp
mov	eax, DWORD PTR _module$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+28]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _module$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _module$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@Destroy_Mo
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_remove_renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN6@ft_remove_
jmp	$LN7@ft_remove_
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
add	edx, 148				
push	edx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@ft_remove_
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _render$1[ebp], eax
mov	ecx, DWORD PTR _render$1[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	DWORD PTR [edx+36], 1869968492		
jne	SHORT $LN4@ft_remove_
mov	eax, DWORD PTR _render$1[ebp]
cmp	DWORD PTR [eax+52], 0
je	SHORT $LN4@ft_remove_
mov	esi, esp
mov	ecx, DWORD PTR _render$1[ebp]
mov	edx, DWORD PTR [ecx+52]
push	edx
mov	eax, DWORD PTR _render$1[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+56]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
add	edx, 148				
push	edx
call	_FT_List_Remove
add	esp, 8
mov	eax, DWORD PTR _node$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@ft_remove_
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_set_current_renderer
add	esp, 4
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_add_renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _node$[ebp], 0
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	12					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@ft_add_ren
jmp	$Exit$13
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _render$2[ebp], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _clazz$1[ebp], edx
mov	eax, DWORD PTR _render$2[ebp]
mov	ecx, DWORD PTR _clazz$1[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _render$2[ebp]
mov	eax, DWORD PTR _clazz$1[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _clazz$1[ebp]
cmp	DWORD PTR [edx+36], 1869968492		
jne	SHORT $LN6@ft_add_ren
mov	eax, DWORD PTR _clazz$1[ebp]
mov	ecx, DWORD PTR [eax+56]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN6@ft_add_ren
mov	edx, DWORD PTR _render$2[ebp]
add	edx, 52					
mov	esi, esp
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$1[ebp]
mov	edx, DWORD PTR [ecx+56]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@ft_add_ren
jmp	SHORT $Fail$14
mov	ecx, DWORD PTR _clazz$1[ebp]
mov	edx, DWORD PTR [ecx+56]
mov	eax, DWORD PTR _render$2[ebp]
mov	ecx, DWORD PTR [edx+16]
mov	DWORD PTR [eax+56], ecx
mov	edx, DWORD PTR _render$2[ebp]
mov	eax, DWORD PTR _clazz$1[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR [edx+60], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
add	edx, 148				
push	edx
call	_FT_List_Add
add	esp, 8
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_set_current_renderer
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $Exit$13
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@ft_add_ren
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@ft_add_ren
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN11@ft_add_ren
DD	-16					
DD	4
DD	$LN10@ft_add_ren
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_set_current_renderer PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
push	0
push	1869968492				
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR _renderer$[ebp]
mov	DWORD PTR [ecx+156], edx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_recompute_scaled_metrics PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+70]
push	eax
call	_FT_MulFix
add	esp, 8
add	eax, 63					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+72]
push	edx
call	_FT_MulFix
add	esp, 8
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+74]
push	edx
call	_FT_MulFix
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+20], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+76]
push	edx
call	_FT_MulFix
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+24], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_load_mac_face PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], eax
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_IsMacBinary
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
jne	$LN11@load_mac_f
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN9@load_mac_f
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
push	OFFSET $SG10322
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN10@load_mac_f
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_IsMacResource
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN5@load_mac_f
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@load_mac_f
mov	DWORD PTR tv88[ebp], OFFSET $SG10327
jmp	SHORT $LN15@load_mac_f
mov	DWORD PTR tv88[ebp], OFFSET $SG10328
mov	edx, DWORD PTR tv88[ebp]
push	edx
push	OFFSET $SG10329
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN6@load_mac_f
mov	ecx, DWORD PTR _error$[ebp]
and	ecx, 255				
cmp	ecx, 2
je	SHORT $LN1@load_mac_f
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 85					
jne	SHORT $LN2@load_mac_f
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 4
je	SHORT $LN2@load_mac_f
mov	edx, DWORD PTR _args$[ebp]
push	edx
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_load_face_in_embedded_rfork
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_load_face_in_embedded_rfork PROC
push	ebp
mov	ebp, esp
sub	esp, 212				
push	edi
lea	edi, DWORD PTR [ebp-212]
mov	ecx, 53					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 2
mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 0
mov	DWORD PTR _stream2$[ebp], 0
lea	edx, DWORD PTR _errors$[ebp]
push	edx
lea	eax, DWORD PTR _offsets$[ebp]
push	eax
lea	ecx, DWORD PTR _file_names$[ebp]
push	ecx
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Raccess_Guess
add	esp, 24					
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN38@load_face_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _i$[ebp], 9
jge	$LN36@load_face_
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_ft_raccess_rule_by_darwin_vfs
add	esp, 8
mov	BYTE PTR _is_darwin_vfs$[ebp], al
movzx	eax, BYTE PTR _is_darwin_vfs$[ebp]
test	eax, eax
je	SHORT $LN35@load_face_
movzx	ecx, BYTE PTR _vfs_rfork_has_no_font$[ebp]
test	ecx, ecx
je	SHORT $LN35@load_face_
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN33@load_face_
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10266
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN34@load_face_
jmp	SHORT $LN37@load_face_
mov	eax, DWORD PTR _i$[ebp]
cmp	DWORD PTR _errors$[ebp+eax*4], 0
je	SHORT $LN30@load_face_
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN28@load_face_
mov	eax, DWORD PTR _i$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _errors$[ebp+ecx*4]
push	edx
push	OFFSET $SG10272
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN29@load_face_
jmp	$LN37@load_face_
mov	DWORD PTR _args2$[ebp], 4
mov	ecx, DWORD PTR _i$[ebp]
cmp	DWORD PTR _file_names$[ebp+ecx*4], 0
je	SHORT $LN41@load_face_
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _file_names$[ebp+edx*4]
mov	DWORD PTR tv137[ebp], eax
jmp	SHORT $LN42@load_face_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR tv137[ebp], edx
mov	eax, DWORD PTR tv137[ebp]
mov	DWORD PTR _args2$[ebp+12], eax
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN24@load_face_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _offsets$[ebp+eax*4]
push	ecx
mov	edx, DWORD PTR _args2$[ebp+12]
push	edx
mov	eax, DWORD PTR _i$[ebp]
push	eax
push	OFFSET $SG10277
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN25@load_face_
lea	edx, DWORD PTR _stream2$[ebp]
push	edx
lea	eax, DWORD PTR _args2$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
movzx	edx, BYTE PTR _is_darwin_vfs$[ebp]
test	edx, edx
je	SHORT $LN21@load_face_
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 81					
jne	SHORT $LN21@load_face_
mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 1
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@load_face_
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN18@load_face_
push	OFFSET $SG10284
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN19@load_face_
jmp	$LN37@load_face_
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _offsets$[ebp+eax*4]
push	ecx
mov	edx, DWORD PTR _stream2$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_IsMacResource
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
push	0
mov	ecx, DWORD PTR _stream2$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN14@load_face_
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@load_face_
mov	DWORD PTR tv176[ebp], OFFSET $SG10289
jmp	SHORT $LN44@load_face_
mov	DWORD PTR tv176[ebp], OFFSET $SG10290
mov	ecx, DWORD PTR tv176[ebp]
push	ecx
push	OFFSET $SG10291
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN15@load_face_
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN11@load_face_
jmp	SHORT $LN36@load_face_
jmp	SHORT $LN10@load_face_
movzx	eax, BYTE PTR _is_darwin_vfs$[ebp]
test	eax, eax
je	SHORT $LN10@load_face_
mov	BYTE PTR _vfs_rfork_has_no_font$[ebp], 1
jmp	$LN37@load_face_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN8@load_face_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _i$[ebp], 9
jge	SHORT $LN6@load_face_
mov	edx, DWORD PTR _i$[ebp]
cmp	DWORD PTR _file_names$[ebp+edx*4], 0
je	SHORT $LN5@load_face_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _file_names$[ebp+eax*4]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR _file_names$[ebp+eax*4], 0
xor	ecx, ecx
jne	SHORT $LN4@load_face_
jmp	SHORT $LN7@load_face_
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@load_face_
mov	DWORD PTR _error$[ebp], 2
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN51@load_face_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 212				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	5
DD	$LN50@load_face_
DD	-56					
DD	36					
DD	$LN45@load_face_
DD	-100					
DD	36					
DD	$LN46@load_face_
DD	-144					
DD	36					
DD	$LN47@load_face_
DD	-188					
DD	32					
DD	$LN48@load_face_
DD	-200					
DD	4
DD	$LN49@load_face_
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	50					
DB	0
DB	97					
DB	114					
DB	103					
DB	115					
DB	50					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	115					
DB	0
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	115					
DB	0
DB	102					
DB	105					
DB	108					
DB	101					
DB	95					
DB	110					
DB	97					
DB	109					
DB	101					
DB	115					
DB	0
ENDP
_IsMacBinary PROC
push	ebp
mov	ebp, esp
sub	esp, 152				
push	edi
lea	edi, DWORD PTR [ebp-152]
mov	ecx, 38					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN5@IsMacBinar
push	OFFSET $SG10228
push	1886					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
jmp	$LN6@IsMacBinar
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@IsMacBinar
jmp	$Exit$11
push	128					
lea	ecx, DWORD PTR _header$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@IsMacBinar
jmp	$Exit$11
mov	eax, 1
imul	ecx, eax, 0
movzx	edx, BYTE PTR _header$[ebp+ecx]
test	edx, edx
jne	$LN1@IsMacBinar
mov	eax, 1
imul	ecx, eax, 74
movzx	edx, BYTE PTR _header$[ebp+ecx]
test	edx, edx
jne	SHORT $LN1@IsMacBinar
mov	eax, 1
imul	ecx, eax, 82
movzx	edx, BYTE PTR _header$[ebp+ecx]
test	edx, edx
jne	SHORT $LN1@IsMacBinar
mov	eax, 1
shl	eax, 0
movzx	ecx, BYTE PTR _header$[ebp+eax]
test	ecx, ecx
je	SHORT $LN1@IsMacBinar
mov	edx, 1
shl	edx, 0
movzx	eax, BYTE PTR _header$[ebp+edx]
cmp	eax, 33					
jg	SHORT $LN1@IsMacBinar
mov	ecx, 1
imul	edx, ecx, 63
movzx	eax, BYTE PTR _header$[ebp+edx]
test	eax, eax
jne	SHORT $LN1@IsMacBinar
mov	ecx, 1
shl	ecx, 0
movzx	edx, BYTE PTR _header$[ebp+ecx]
movzx	eax, BYTE PTR _header$[ebp+edx+2]
test	eax, eax
je	SHORT $LN2@IsMacBinar
push	OFFSET $SG10235
push	1903					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN6@IsMacBinar
mov	ecx, 1
imul	edx, ecx, 83
movzx	eax, BYTE PTR _header$[ebp+edx]
shl	eax, 24					
mov	ecx, 1
imul	edx, ecx, 84
movzx	ecx, BYTE PTR _header$[ebp+edx]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
imul	ecx, edx, 85
movzx	edx, BYTE PTR _header$[ebp+ecx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 86
movzx	ecx, BYTE PTR _header$[ebp+edx]
or	eax, ecx
mov	DWORD PTR _dlen$[ebp], eax
mov	edx, DWORD PTR _dlen$[ebp]
add	edx, 127				
and	edx, -128				
add	edx, 128				
mov	DWORD PTR _offset$[ebp], edx
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_IsMacResource
add	esp, 20					
jmp	SHORT $LN6@IsMacBinar
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@IsMacBinar
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 152				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN9@IsMacBinar
DD	-136					
DD	128					
DD	$LN8@IsMacBinar
DB	104					
DB	101					
DB	97					
DB	100					
DB	101					
DB	114					
DB	0
ENDP
_IsMacResource PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _rdara_pos$[ebp]
push	edx
lea	eax, DWORD PTR _map_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _resource_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Raccess_Get_HeaderInfo
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@IsMacResou
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@IsMacResou
lea	ecx, DWORD PTR _count$[ebp]
push	ecx
lea	edx, DWORD PTR _data_offsets$[ebp]
push	edx
push	1
push	1347375956				
mov	eax, DWORD PTR _rdara_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _map_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Raccess_Get_DataOffsets
add	esp, 32					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@IsMacResou
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _data_offsets$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_Mac_Read_POST_Resource
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _data_offsets$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _data_offsets$[ebp], 0
xor	eax, eax
jne	SHORT $LN9@IsMacResou
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN6@IsMacResou
mov	ecx, DWORD PTR _aface$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [edx], 1
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@IsMacResou
lea	eax, DWORD PTR _count$[ebp]
push	eax
lea	ecx, DWORD PTR _data_offsets$[ebp]
push	ecx
push	0
push	1936092788				
mov	edx, DWORD PTR _rdara_pos$[ebp]
push	edx
mov	eax, DWORD PTR _map_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Raccess_Get_DataOffsets
add	esp, 32					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN5@IsMacResou
mov	eax, DWORD PTR _face_index$[ebp]
cdq
idiv	DWORD PTR _count$[ebp]
mov	DWORD PTR _face_index_internal$1[ebp], edx
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index_internal$1[ebp]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _data_offsets$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_Mac_Read_sfnt_Resource
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _data_offsets$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _data_offsets$[ebp], 0
xor	edx, edx
jne	SHORT $LN4@IsMacResou
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN5@IsMacResou
mov	eax, DWORD PTR _aface$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@IsMacResou
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN18@IsMacResou
DD	-16					
DD	4
DD	$LN14@IsMacResou
DD	-28					
DD	4
DD	$LN15@IsMacResou
DD	-40					
DD	4
DD	$LN16@IsMacResou
DD	-52					
DD	4
DD	$LN17@IsMacResou
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	100					
DB	97					
DB	116					
DB	97					
DB	95					
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	115					
DB	0
DB	114					
DB	100					
DB	97					
DB	114					
DB	97					
DB	95					
DB	112					
DB	111					
DB	115					
DB	0
DB	109					
DB	97					
DB	112					
DB	95					
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
ENDP
_Mac_Read_sfnt_Resource PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _sfnt_data$[ebp], 0
mov	DWORD PTR _face_index_in_resource$[ebp], 0
cmp	DWORD PTR _face_index$[ebp], -1
jne	SHORT $LN9@Mac_Read_s
mov	DWORD PTR _face_index$[ebp], 0
mov	edx, DWORD PTR _face_index$[ebp]
cmp	edx, DWORD PTR _resource_cnt$[ebp]
jl	SHORT $LN8@Mac_Read_s
push	OFFSET $SG10152
push	1766					
push	1
call	_FT_Throw
add	esp, 12					
or	eax, 1
jmp	$LN10@Mac_Read_s
mov	eax, DWORD PTR _face_index$[ebp]
mov	ecx, DWORD PTR _offsets$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _flag_offset$[ebp], edx
mov	eax, DWORD PTR _flag_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@Mac_Read_s
jmp	$Exit$19
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _rlen$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@Mac_Read_s
jmp	$Exit$19
cmp	DWORD PTR _rlen$[ebp], -1
jne	SHORT $LN5@Mac_Read_s
push	OFFSET $SG10158
push	1776					
push	1
call	_FT_Throw
add	esp, 12					
or	eax, 1
jmp	$LN10@Mac_Read_s
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
push	0
push	0
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_open_face_PS_from_sfnt_stream
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@Mac_Read_s
jmp	$Exit$19
mov	edx, DWORD PTR _flag_offset$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
test	eax, eax
je	SHORT $LN3@Mac_Read_s
jmp	$Exit$19
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _rlen$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _sfnt_data$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@Mac_Read_s
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN10@Mac_Read_s
mov	ecx, DWORD PTR _rlen$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt_data$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@Mac_Read_s
jmp	SHORT $Exit$19
cmp	DWORD PTR _rlen$[ebp], 4
jle	SHORT $LN12@Mac_Read_s
push	4
push	OFFSET $SG10167
mov	ecx, DWORD PTR _sfnt_data$[ebp]
push	ecx
call	_memcmp
add	esp, 12					
test	eax, eax
jne	SHORT $LN12@Mac_Read_s
mov	DWORD PTR tv149[ebp], 1
jmp	SHORT $LN13@Mac_Read_s
mov	DWORD PTR tv149[ebp], 0
mov	edx, DWORD PTR tv149[ebp]
mov	DWORD PTR _is_cff$[ebp], edx
cmp	DWORD PTR _is_cff$[ebp], 0
je	SHORT $LN14@Mac_Read_s
mov	DWORD PTR tv153[ebp], OFFSET $SG10168
jmp	SHORT $LN15@Mac_Read_s
mov	DWORD PTR tv153[ebp], OFFSET $SG10169
mov	eax, DWORD PTR _aface$[ebp]
push	eax
mov	ecx, DWORD PTR tv153[ebp]
push	ecx
mov	edx, DWORD PTR _face_index_in_resource$[ebp]
push	edx
mov	eax, DWORD PTR _rlen$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt_data$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_open_face_from_buffer
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@Mac_Read_s
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN17@Mac_Read_s
DD	-16					
DD	4
DD	$LN16@Mac_Read_s
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_Mac_Read_POST_Resource PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 1
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _pfb_data$[ebp], 0
cmp	DWORD PTR _face_index$[ebp], -1
jne	SHORT $LN82@Mac_Read_P
mov	DWORD PTR _face_index$[ebp], 0
cmp	DWORD PTR _face_index$[ebp], 0
je	SHORT $LN81@Mac_Read_P
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN83@Mac_Read_P
mov	DWORD PTR _pfb_len$[ebp], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN80@Mac_Read_P
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _resource_cnt$[ebp]
jge	$LN65@Mac_Read_P
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _offsets$[ebp]
mov	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN77@Mac_Read_P
jmp	$Exit$88
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _temp$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN75@Mac_Read_P
jmp	$Exit$88
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN74@Mac_Read_P
mov	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10026
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN75@Mac_Read_P
cmp	DWORD PTR _temp$[ebp], 2147483647	
ja	SHORT $LN69@Mac_Read_P
mov	eax, DWORD PTR _temp$[ebp]
mov	ecx, DWORD PTR _pfb_len$[ebp]
lea	edx, DWORD PTR [ecx+eax+6]
cmp	edx, DWORD PTR _pfb_len$[ebp]
jae	SHORT $LN71@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN68@Mac_Read_P
mov	edx, DWORD PTR _temp$[ebp]
push	edx
push	OFFSET $SG10033
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN69@Mac_Read_P
push	OFFSET $SG10034
push	1595					
push	9
call	_FT_Throw
add	esp, 12					
or	eax, 9
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$88
mov	ecx, DWORD PTR _temp$[ebp]
mov	edx, DWORD PTR _pfb_len$[ebp]
lea	eax, DWORD PTR [edx+ecx+6]
mov	DWORD PTR _pfb_len$[ebp], eax
jmp	$LN79@Mac_Read_P
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN64@Mac_Read_P
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _resource_cnt$[ebp]
push	ecx
push	OFFSET $SG10039
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN65@Mac_Read_P
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
cmp	eax, 6
jae	SHORT $LN61@Mac_Read_P
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN59@Mac_Read_P
mov	eax, DWORD PTR _pfb_len$[ebp]
push	eax
push	OFFSET $SG10045
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN60@Mac_Read_P
push	OFFSET $SG10046
push	1608					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$88
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _pfb_data$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN56@Mac_Read_P
jmp	$Exit$88
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [ecx+eax], 128			
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [eax+edx], 1
mov	ecx, 1
shl	ecx, 1
mov	edx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [edx+ecx], 0
mov	eax, 1
imul	ecx, eax, 3
mov	edx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [edx+ecx], 0
mov	eax, 1
shl	eax, 2
mov	ecx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [ecx+eax], 0
mov	edx, 1
imul	eax, edx, 5
mov	ecx, DWORD PTR _pfb_data$[ebp]
mov	BYTE PTR [ecx+eax], 0
mov	DWORD PTR _pfb_pos$[ebp], 6
mov	DWORD PTR _pfb_lenpos$[ebp], 2
mov	DWORD PTR _len$[ebp], 0
mov	DWORD PTR _type$[ebp], 1
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN55@Mac_Read_P
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _resource_cnt$[ebp]
jge	$LN53@Mac_Read_P
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _offsets$[ebp]
mov	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN52@Mac_Read_P
jmp	$Exit2$89
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _rlen$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN51@Mac_Read_P
jmp	$Exit2$89
cmp	DWORD PTR _rlen$[ebp], 2147483647	
jbe	SHORT $LN50@Mac_Read_P
push	OFFSET $SG10058
push	1638					
push	9
call	_FT_Throw
add	esp, 12					
or	eax, 9
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit2$89
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	eax, ax
mov	DWORD PTR _flags$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN48@Mac_Read_P
jmp	$Exit2$89
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN47@Mac_Read_P
mov	eax, DWORD PTR _flags$[ebp]
push	eax
mov	ecx, DWORD PTR _rlen$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _offsets$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
push	OFFSET $SG10065
call	_FT_Message
add	esp, 20					
xor	eax, eax
jne	SHORT $LN48@Mac_Read_P
mov	DWORD PTR _error$[ebp], 10		
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 8
test	ecx, ecx
jne	SHORT $LN44@Mac_Read_P
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN42@Mac_Read_P
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10071
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN43@Mac_Read_P
jmp	$LN54@Mac_Read_P
cmp	DWORD PTR _rlen$[ebp], 2
jbe	SHORT $LN39@Mac_Read_P
mov	eax, DWORD PTR _rlen$[ebp]
sub	eax, 2
mov	DWORD PTR _rlen$[ebp], eax
jmp	SHORT $LN38@Mac_Read_P
mov	DWORD PTR _rlen$[ebp], 0
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 8
cmp	ecx, DWORD PTR _type$[ebp]
jne	SHORT $LN35@Mac_Read_P
mov	edx, DWORD PTR _len$[ebp]
add	edx, DWORD PTR _rlen$[ebp]
mov	DWORD PTR _len$[ebp], edx
jmp	$LN36@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN34@Mac_Read_P
mov	edx, DWORD PTR _pfb_lenpos$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_data$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10080
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN35@Mac_Read_P
mov	eax, DWORD PTR _pfb_lenpos$[ebp]
add	eax, 3
mov	ecx, DWORD PTR _pfb_len$[ebp]
add	ecx, 2
cmp	eax, ecx
jbe	SHORT $LN31@Mac_Read_P
jmp	$Exit2$89
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	al, BYTE PTR _len$[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _len$[ebp]
shr	ecx, 8
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [edx+1], cl
mov	eax, DWORD PTR _len$[ebp]
shr	eax, 16					
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [ecx+2], al
mov	edx, DWORD PTR _len$[ebp]
shr	edx, 24					
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [eax+3], dl
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 8
cmp	ecx, 5
jne	SHORT $LN29@Mac_Read_P
jmp	$LN53@Mac_Read_P
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN28@Mac_Read_P
mov	ecx, DWORD PTR _pfb_pos$[ebp]
push	ecx
mov	edx, DWORD PTR _pfb_data$[ebp]
push	edx
mov	eax, DWORD PTR _i$[ebp]
push	eax
push	OFFSET $SG10091
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN29@Mac_Read_P
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 6
mov	eax, DWORD PTR _pfb_len$[ebp]
add	eax, 2
cmp	edx, eax
jbe	SHORT $LN25@Mac_Read_P
jmp	$Exit2$89
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [ecx], 128			
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 1
mov	DWORD PTR _pfb_pos$[ebp], edx
mov	eax, DWORD PTR _flags$[ebp]
sar	eax, 8
mov	DWORD PTR _type$[ebp], eax
mov	ecx, DWORD PTR _rlen$[ebp]
mov	DWORD PTR _len$[ebp], ecx
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_pos$[ebp]
mov	al, BYTE PTR _type$[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _pfb_pos$[ebp]
add	ecx, 1
mov	DWORD PTR _pfb_pos$[ebp], ecx
mov	edx, DWORD PTR _pfb_pos$[ebp]
mov	DWORD PTR _pfb_lenpos$[ebp], edx
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [eax], 0
mov	ecx, DWORD PTR _pfb_pos$[ebp]
add	ecx, 1
mov	DWORD PTR _pfb_pos$[ebp], ecx
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [edx], 0
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, 1
mov	DWORD PTR _pfb_pos$[ebp], eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [ecx], 0
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 1
mov	DWORD PTR _pfb_pos$[ebp], edx
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [eax], 0
mov	ecx, DWORD PTR _pfb_pos$[ebp]
add	ecx, 1
mov	DWORD PTR _pfb_pos$[ebp], ecx
mov	edx, DWORD PTR _pfb_pos$[ebp]
cmp	edx, DWORD PTR _pfb_len$[ebp]
ja	SHORT $LN23@Mac_Read_P
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, DWORD PTR _rlen$[ebp]
cmp	eax, DWORD PTR _pfb_len$[ebp]
jbe	SHORT $LN22@Mac_Read_P
jmp	$Exit2$89
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN21@Mac_Read_P
mov	eax, DWORD PTR _pfb_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
push	ecx
mov	edx, DWORD PTR _rlen$[ebp]
push	edx
mov	eax, DWORD PTR _i$[ebp]
push	eax
push	OFFSET $SG10100
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN22@Mac_Read_P
mov	edx, DWORD PTR _rlen$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@Mac_Read_P
jmp	$Exit2$89
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, DWORD PTR _rlen$[ebp]
mov	DWORD PTR _pfb_pos$[ebp], edx
jmp	$LN54@Mac_Read_P
mov	DWORD PTR _error$[ebp], 10		
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, 2
mov	ecx, DWORD PTR _pfb_len$[ebp]
add	ecx, 2
cmp	eax, ecx
jbe	SHORT $LN17@Mac_Read_P
jmp	$Exit2$89
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [edx], 128			
mov	eax, DWORD PTR _pfb_pos$[ebp]
add	eax, 1
mov	DWORD PTR _pfb_pos$[ebp], eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_pos$[ebp]
mov	BYTE PTR [ecx], 3
mov	edx, DWORD PTR _pfb_pos$[ebp]
add	edx, 1
mov	DWORD PTR _pfb_pos$[ebp], edx
mov	eax, DWORD PTR _pfb_lenpos$[ebp]
add	eax, 3
mov	ecx, DWORD PTR _pfb_len$[ebp]
add	ecx, 2
cmp	eax, ecx
jbe	SHORT $LN16@Mac_Read_P
jmp	SHORT $Exit2$89
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	al, BYTE PTR _len$[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _len$[ebp]
shr	ecx, 8
mov	edx, DWORD PTR _pfb_data$[ebp]
add	edx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [edx+1], cl
mov	eax, DWORD PTR _len$[ebp]
shr	eax, 16					
mov	ecx, DWORD PTR _pfb_data$[ebp]
add	ecx, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [ecx+2], al
mov	edx, DWORD PTR _len$[ebp]
shr	edx, 24					
mov	eax, DWORD PTR _pfb_data$[ebp]
add	eax, DWORD PTR _pfb_lenpos$[ebp]
mov	BYTE PTR [eax+3], dl
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
push	OFFSET $SG10109
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _pfb_pos$[ebp]
push	eax
mov	ecx, DWORD PTR _pfb_data$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_open_face_from_buffer
add	esp, 24					
jmp	SHORT $LN83@Mac_Read_P
cmp	DWORD PTR _error$[ebp], 10		
jne	SHORT $LN15@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN13@Mac_Read_P
push	OFFSET $SG10115
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN14@Mac_Read_P
jmp	SHORT $LN10@Mac_Read_P
cmp	DWORD PTR _error$[ebp], 9
jne	SHORT $LN10@Mac_Read_P
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN7@Mac_Read_P
push	OFFSET $SG10122
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@Mac_Read_P
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@Mac_Read_P
mov	DWORD PTR _error$[ebp], 1
mov	eax, DWORD PTR _pfb_data$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _pfb_data$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@Mac_Read_P
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN87@Mac_Read_P
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN86@Mac_Read_P
DD	-8					
DD	4
DD	$LN85@Mac_Read_P
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_lookup_PS_in_sfnt_stream PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _offset$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [edx], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _tag$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
cmp	DWORD PTR _tag$[ebp], 1954115633	
je	SHORT $LN14@ft_lookup_
push	OFFSET $SG9921
push	1442					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _numTables$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
push	6
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN12@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
mov	DWORD PTR _pstable_index$[ebp], -1
mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [edx], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN11@ft_lookup_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
movzx	ecx, WORD PTR _numTables$[ebp]
cmp	DWORD PTR _i$[ebp], ecx
jge	$LN9@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _tag$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_lookup_
push	4
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_lookup_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadULong
add	esp, 8
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@ft_lookup_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@ft_lookup_
cmp	DWORD PTR _tag$[ebp], 1128875040	
jne	SHORT $LN6@ft_lookup_
mov	edx, DWORD PTR _pstable_index$[ebp]
add	edx, 1
mov	DWORD PTR _pstable_index$[ebp], edx
mov	eax, DWORD PTR _offset$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, 22					
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _length$[ebp]
mov	ecx, DWORD PTR [eax]
sub	ecx, 22					
mov	edx, DWORD PTR _length$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [eax], 1
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN5@ft_lookup_
xor	eax, eax
jmp	SHORT $LN16@ft_lookup_
jmp	SHORT $LN4@ft_lookup_
cmp	DWORD PTR _tag$[ebp], 1415139377	
jne	SHORT $LN4@ft_lookup_
mov	ecx, DWORD PTR _pstable_index$[ebp]
add	ecx, 1
mov	DWORD PTR _pstable_index$[ebp], ecx
mov	edx, DWORD PTR _offset$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, 24					
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _length$[ebp]
mov	eax, DWORD PTR [edx]
sub	eax, 24					
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _is_sfnt_cid$[ebp]
mov	BYTE PTR [edx], 0
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN4@ft_lookup_
xor	eax, eax
jmp	SHORT $LN16@ft_lookup_
cmp	DWORD PTR _face_index$[ebp], 0
jl	SHORT $LN1@ft_lookup_
mov	eax, DWORD PTR _pstable_index$[ebp]
cmp	eax, DWORD PTR _face_index$[ebp]
jne	SHORT $LN1@ft_lookup_
xor	eax, eax
jmp	SHORT $LN16@ft_lookup_
jmp	$LN10@ft_lookup_
push	OFFSET $SG9951
push	1479					
push	142					
call	_FT_Throw
add	esp, 12					
or	eax, 142				
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@ft_lookup_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN19@ft_lookup_
DD	-8					
DD	4
DD	$LN18@ft_lookup_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_new_memory_stream PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _stream$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN3@new_memory
push	OFFSET $SG9860
push	1325					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN4@new_memory
cmp	DWORD PTR _base$[ebp], 0
jne	SHORT $LN2@new_memory
push	OFFSET $SG9862
push	1328					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN4@new_memory
mov	eax, DWORD PTR _astream$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	40					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _stream$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@new_memory
jmp	SHORT $Exit$9
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _base$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_OpenMemory
add	esp, 12					
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _close$[ebp]
mov	DWORD PTR [edx+24], eax
mov	ecx, DWORD PTR _astream$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@new_memory
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN7@new_memory
DD	-8					
DD	4
DD	$LN6@new_memory
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_memory_stream_close PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx], 0
xor	eax, eax
jne	SHORT $LN3@memory_str
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+24], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_open_face PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _face$[ebp], 0
mov	DWORD PTR _internal$[ebp], 0
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+36]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@open_face
jmp	$Fail$24
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+96], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx+100], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _astream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+104], edx
movzx	eax, BYTE PTR _external_stream$[ebp]
test	eax, eax
je	SHORT $LN17@open_face
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 1024				
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+8], edx
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	60					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@open_face
jmp	$Fail$24
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+128], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	DWORD PTR [eax+48], 0
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN15@open_face
mov	ecx, DWORD PTR _i$1[ebp]
add	ecx, 1
mov	DWORD PTR _i$1[ebp], ecx
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR _num_params$[ebp]
jge	SHORT $LN13@open_face
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
jne	SHORT $LN13@open_face
mov	edx, DWORD PTR _i$1[ebp]
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+edx*8], 1768842098	
jne	SHORT $LN12@open_face
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR _i$1[ebp]
mov	ecx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [ecx+eax*8+4]
mov	DWORD PTR [edx+48], eax
jmp	SHORT $LN14@open_face
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN11@open_face
mov	esi, esp
mov	edx, DWORD PTR _params$[ebp]
push	edx
mov	eax, DWORD PTR _num_params$[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _astream$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+48]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _astream$[ebp]
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+104]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@open_face
jmp	SHORT $Fail$24
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_find_unicode_charmap
add	esp, 4
mov	DWORD PTR _error2$[ebp], eax
cmp	DWORD PTR _error2$[ebp], 0
je	SHORT $LN9@open_face
mov	edx, DWORD PTR _error2$[ebp]
and	edx, 255				
cmp	edx, 38					
je	SHORT $LN9@open_face
mov	eax, DWORD PTR _error2$[ebp]
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$24
mov	ecx, DWORD PTR _aface$[ebp]
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@open_face
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_destroy_charmaps
add	esp, 8
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+52], 0
je	SHORT $LN6@open_face
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+52]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _internal$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _internal$[ebp], 0
xor	edx, edx
jne	SHORT $LN6@open_face
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _face$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@open_face
mov	eax, DWORD PTR _aface$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN23@open_face
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN22@open_face
DD	-24					
DD	4
DD	$LN21@open_face
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_find_variant_selector_charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@find_varia
push	OFFSET $SG9741
push	1089					
push	OFFSET $SG9742
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@find_varia
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _first$[ebp], edx
cmp	DWORD PTR _first$[ebp], 0
jne	SHORT $LN5@find_varia
xor	eax, eax
jmp	$LN10@find_varia
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _end$[ebp], eax
mov	ecx, DWORD PTR _first$[ebp]
mov	DWORD PTR _cur$[ebp], ecx
jmp	SHORT $LN4@find_varia
mov	edx, DWORD PTR _cur$[ebp]
add	edx, 4
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _cur$[ebp]
cmp	eax, DWORD PTR _end$[ebp]
jae	SHORT $LN2@find_varia
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
movzx	edx, WORD PTR [ecx+8]
test	edx, edx
jne	SHORT $LN1@find_varia
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
movzx	ecx, WORD PTR [eax+10]
cmp	ecx, 5
jne	SHORT $LN1@find_varia
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_FT_Get_CMap_Format
add	esp, 4
cmp	eax, 14					
jne	SHORT $LN1@find_varia
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
jmp	SHORT $LN10@find_varia
jmp	SHORT $LN3@find_varia
xor	eax, eax
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_find_unicode_charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN13@find_unico
push	OFFSET $SG9714
push	1000					
push	OFFSET $SG9715
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@find_unico
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _first$[ebp], edx
cmp	DWORD PTR _first$[ebp], 0
jne	SHORT $LN10@find_unico
push	OFFSET $SG9717
push	1005					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
jmp	$LN15@find_unico
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
sub	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _first$[ebp]
jb	$LN8@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
cmp	DWORD PTR [eax+4], 1970170211		
jne	SHORT $LN7@find_unico
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
movzx	edx, WORD PTR [ecx+8]
cmp	edx, 3
jne	SHORT $LN4@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
movzx	ecx, WORD PTR [eax+10]
cmp	ecx, 10					
je	SHORT $LN5@find_unico
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
movzx	eax, WORD PTR [edx+8]
test	eax, eax
jne	SHORT $LN7@find_unico
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+edx]
movzx	edx, WORD PTR [ecx+10]
cmp	edx, 4
jne	SHORT $LN7@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+92], ecx
xor	eax, eax
jmp	SHORT $LN15@find_unico
jmp	$LN9@find_unico
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _first$[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _cur$[ebp]
sub	eax, 4
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
cmp	ecx, DWORD PTR _first$[ebp]
jb	SHORT $LN2@find_unico
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
cmp	DWORD PTR [edx+4], 1970170211		
jne	SHORT $LN1@find_unico
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _cur$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+92], ecx
xor	eax, eax
jmp	SHORT $LN15@find_unico
jmp	SHORT $LN3@find_unico
push	OFFSET $SG9729
push	1067					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Destroy_Driver PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _driver$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
push	OFFSET _destroy_face
mov	eax, DWORD PTR _driver$[ebp]
add	eax, 16					
push	eax
call	_FT_List_Finalize
add	esp, 16					
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	SHORT $LN2@Destroy_Dr
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
call	_FT_GlyphLoader_Done
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_destroy_face PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+120], 0
je	SHORT $LN11@destroy_fa
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+116]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+120]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+84], 0
je	SHORT $LN10@destroy_fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+84]
push	eax
call	_FT_Done_GlyphSlot
add	esp, 4
jmp	SHORT $LN11@destroy_fa
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
push	OFFSET _destroy_size
mov	eax, DWORD PTR _face$[ebp]
add	eax, 108				
push	eax
call	_FT_List_Finalize
add	esp, 16					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+88], 0
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+48], 0
je	SHORT $LN9@destroy_fa
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+48]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_destroy_charmaps
add	esp, 8
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+52], 0
je	SHORT $LN8@destroy_fa
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+52]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 1024				
je	SHORT $LN15@destroy_fa
mov	DWORD PTR tv93[ebp], 1
jmp	SHORT $LN16@destroy_fa
mov	DWORD PTR tv93[ebp], 0
mov	edx, DWORD PTR tv93[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
push	ecx
call	_FT_Stream_Free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+104], 0
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+128], 0
je	SHORT $LN3@destroy_fa
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+128], 0
xor	edx, edx
jne	SHORT $LN6@destroy_fa
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _face$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@destroy_fa
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_destroy_charmaps PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@destroy_ch
jmp	SHORT $LN8@destroy_ch
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN6@destroy_ch
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR [ecx+36]
jge	SHORT $LN3@destroy_ch
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _n$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
mov	DWORD PTR _cmap$1[ebp], eax
mov	ecx, DWORD PTR _cmap$1[ebp]
push	ecx
call	_ft_cmap_done_internal
add	esp, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _n$[ebp]
mov	DWORD PTR [eax+ecx*4], 0
jmp	SHORT $LN5@destroy_ch
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+40], 0
xor	eax, eax
jne	SHORT $LN3@destroy_ch
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+36], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_cmap_done_internal PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _cmap$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN3@ft_cmap_do
mov	esi, esp
mov	ecx, DWORD PTR _cmap$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _cmap$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _cmap$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@ft_cmap_do
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_destroy_size PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN8@destroy_si
mov	esi, esp
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	DWORD PTR [edx+60], 0
je	SHORT $LN6@destroy_si
mov	esi, esp
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+60]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+40]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+40], 0
xor	edx, edx
jne	SHORT $LN6@destroy_si
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _size$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@destroy_si
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_glyphslot_grid_fit_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
add	eax, 24					
mov	DWORD PTR _metrics$[ebp], eax
movzx	ecx, BYTE PTR _vertical$[ebp]
test	ecx, ecx
je	$LN2@ft_glyphsl
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, 63					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx]
lea	eax, DWORD PTR [eax+edx+63]
and	eax, -64				
mov	DWORD PTR _right$[ebp], eax
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
lea	edx, DWORD PTR [edx+ecx+63]
and	edx, -64				
mov	DWORD PTR _bottom$[ebp], edx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+20]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+24]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _right$[ebp]
sub	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _bottom$[ebp]
sub	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+4], ecx
jmp	$LN1@ft_glyphsl
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+20]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+24]
and	ecx, -64				
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx]
lea	ecx, DWORD PTR [ecx+eax+63]
and	ecx, -64				
mov	DWORD PTR _right$[ebp], ecx
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
and	ecx, -64				
mov	DWORD PTR _bottom$[ebp], ecx
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, 63					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _right$[ebp]
sub	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
sub	eax, DWORD PTR _bottom$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+16]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+28]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_lookup_glyph_renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN1@ft_lookup_
mov	ecx, DWORD PTR _result$[ebp]
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [ecx+16]
cmp	eax, DWORD PTR [edx+72]
je	SHORT $LN2@ft_lookup_
push	0
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+72]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_glyphslot_done PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+68], 0
je	SHORT $LN6@ft_glyphsl
mov	esi, esp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+68]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_free_bitmap
add	esp, 4
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+156], 0
je	SHORT $LN7@ft_glyphsl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	SHORT $LN3@ft_glyphsl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_GlyphLoader_Done
add	esp, 4
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+156], 0
xor	ecx, ecx
jne	SHORT $LN3@ft_glyphsl
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_glyphslot_clear PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_ft_glyphslot_free_bitmap
add	esp, 4
push	32					
push	0
mov	ecx, DWORD PTR _slot$[ebp]
add	ecx, 24					
push	ecx
call	_memset
add	esp, 12					
push	20					
push	0
mov	edx, DWORD PTR _slot$[ebp]
add	edx, 108				
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+80], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+76], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+84], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	BYTE PTR [eax+94], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+100], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+104], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+128], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+132], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+136], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+140], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+152], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+72], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+56], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+60], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+144], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+148], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_glyphslot_init PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _internal$[ebp], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	40					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@ft_glyphsl
jmp	SHORT $Exit$9
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+156], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 512				
jne	SHORT $LN2@ft_glyphsl
mov	edx, DWORD PTR _internal$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_FT_GlyphLoader_New
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $Exit$9
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+64], 0
je	SHORT $Exit$9
mov	esi, esp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+64]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@ft_glyphsl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN7@ft_glyphsl
DD	-20					
DD	4
DD	$LN6@ft_glyphsl
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_body	PROC
push	ebp
mov	ebp, esp
sub	esp, 100				
push	edi
lea	edi, DWORD PTR [ebp-100]
mov	ecx, 25					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR _ptr$[ebp], eax
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _saved_a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _saved_b$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _saved_c$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _saved_d$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [eax+edx]
shl	edx, 8
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv91[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv91[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR tv91[ebp]
mov	eax, DWORD PTR _a$[ebp]
lea	ecx, DWORD PTR [eax+edx-680876936]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
shl	edx, 7
mov	eax, DWORD PTR _a$[ebp]
shr	eax, 25					
or	edx, eax
mov	DWORD PTR _a$[ebp], edx
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, 1
shl	edx, 2
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 5
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 6
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 7
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv154[ebp], ecx
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv154[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
and	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR tv154[ebp]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-389564586]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 12					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 20					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, 1
shl	ecx, 3
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 9
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 10
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 11
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv185[ebp], eax
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv185[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR tv185[ebp]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+eax+606105819]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 17					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 15					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, 1
imul	ecx, eax, 12
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 13
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 14
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 15
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv216[ebp], eax
mov	eax, 4
imul	ecx, eax, 3
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv216[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR tv216[ebp]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+ecx-1044525330]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 22					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 10					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, 1
shl	ecx, 4
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 17
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 18
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 19
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv247[ebp], eax
mov	eax, 4
shl	eax, 2
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv247[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR tv247[ebp]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax-176418897]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 7
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 25					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 21
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 22
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 23
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv278[ebp], eax
mov	eax, 4
imul	ecx, eax, 5
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv278[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
and	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR tv278[ebp]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx+1200080426]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 12					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 20					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 24
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 25
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 26
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 27
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv309[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 6
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv309[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
and	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR tv309[ebp]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+edx-1473231341]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 17					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 15					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, 1
imul	eax, edx, 28
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 29
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 30
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 31
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv340[ebp], edx
mov	edx, 4
imul	eax, edx, 7
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv340[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
and	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR tv340[ebp]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax-45705983]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 22					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 10					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, 1
shl	eax, 5
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 33
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 34
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 35
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv371[ebp], edx
mov	edx, 4
shl	edx, 3
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv371[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR tv371[ebp]
mov	eax, DWORD PTR _a$[ebp]
lea	ecx, DWORD PTR [eax+edx+1770035416]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
shl	edx, 7
mov	eax, DWORD PTR _a$[ebp]
shr	eax, 25					
or	edx, eax
mov	DWORD PTR _a$[ebp], edx
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, 1
imul	eax, edx, 36
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 37
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 38
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 39
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv402[ebp], edx
mov	edx, 4
imul	eax, edx, 9
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv402[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR tv402[ebp]
mov	ecx, DWORD PTR _d$[ebp]
lea	edx, DWORD PTR [ecx+eax-1958414417]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
shl	eax, 12					
mov	ecx, DWORD PTR _d$[ebp]
shr	ecx, 20					
or	eax, ecx
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], edx
mov	eax, 1
imul	ecx, eax, 40
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 41
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 42
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 43
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv433[ebp], eax
mov	eax, 4
imul	ecx, eax, 10
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv433[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR tv433[ebp]
mov	edx, DWORD PTR _c$[ebp]
lea	eax, DWORD PTR [edx+ecx-42063]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
shl	ecx, 17					
mov	edx, DWORD PTR _c$[ebp]
shr	edx, 15					
or	ecx, edx
mov	DWORD PTR _c$[ebp], ecx
mov	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 44
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 45
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 46
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 47
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv464[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 11
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv464[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
and	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR tv464[ebp]
mov	eax, DWORD PTR _b$[ebp]
lea	ecx, DWORD PTR [eax+edx-1990404162]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
shl	edx, 22					
mov	eax, DWORD PTR _b$[ebp]
shr	eax, 10					
or	edx, eax
mov	DWORD PTR _b$[ebp], edx
mov	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, 1
imul	eax, edx, 48
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 49
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 50
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 51
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv495[ebp], edx
mov	edx, 4
imul	eax, edx, 12
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv495[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR tv495[ebp]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax+1804603682]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 7
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 25					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, 1
imul	ecx, eax, 52
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, 1
imul	edx, ecx, 53
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 54
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 16					
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 55
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 24					
or	eax, edx
mov	DWORD PTR tv526[ebp], eax
mov	eax, 4
imul	ecx, eax, 13
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR tv526[ebp]
mov	DWORD PTR [edx+ecx+88], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
and	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR tv526[ebp]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-40341101]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 12					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 20					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 56
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
mov	edx, 1
imul	eax, edx, 57
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 58
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
imul	eax, edx, 59
mov	edx, DWORD PTR _ptr$[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 24					
or	ecx, eax
mov	DWORD PTR tv557[ebp], ecx
mov	ecx, 4
imul	edx, ecx, 14
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv557[ebp]
mov	DWORD PTR [eax+edx+88], ecx
mov	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
and	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR tv557[ebp]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+edx-1502002290]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 17					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 15					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, 1
imul	eax, edx, 60
mov	ecx, DWORD PTR _ptr$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, 1
imul	ecx, eax, 61
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 62
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 16					
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 63
mov	eax, DWORD PTR _ptr$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
shl	ecx, 24					
or	edx, ecx
mov	DWORD PTR tv588[ebp], edx
mov	edx, 4
imul	eax, edx, 15
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR tv588[ebp]
mov	DWORD PTR [ecx+eax+88], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
and	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR tv588[ebp]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax+1236535329]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 22					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 10					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax-165796510]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 5
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 27					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
and	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _b$[ebp]
mov	ecx, 4
imul	edx, ecx, 6
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+eax-1069501632]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 9
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 23					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
and	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
imul	eax, edx, 11
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx+643717713]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 14					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 18					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-373897302]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-701558691]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 27					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 10
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx+38016083]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 9
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 23					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 15
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-660478335]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 14					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 18					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax-405537848]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 9
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax+568446438]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 27					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 14
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-1019803690]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 9
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 23					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
and	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-187363961]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 14					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 18					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
and	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
shl	ecx, 3
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax+1163531501]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
and	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 13
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-1444681467]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 27					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
and	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-51403784]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 9
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 23					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
and	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1735328473]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 14					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 18					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
and	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 12
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-1926607734]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 20					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 12					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-378558]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 28					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
shl	edx, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+ecx-2022574463]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 11					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 21					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 11
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1839030562]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 16					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 16					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _c$[ebp]
mov	eax, 4
imul	ecx, eax, 14
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-35309556]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 23					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 9
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+eax-1530992060]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 28					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _d$[ebp]
lea	edx, DWORD PTR [ecx+eax+1272893353]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
shl	eax, 11					
mov	ecx, DWORD PTR _d$[ebp]
shr	ecx, 21					
or	eax, ecx
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
mov	ecx, 4
imul	edx, ecx, 7
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _c$[ebp]
lea	eax, DWORD PTR [edx+eax-155497632]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
shl	ecx, 16					
mov	edx, DWORD PTR _c$[ebp]
shr	edx, 16					
or	ecx, edx
mov	DWORD PTR _c$[ebp], ecx
mov	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
imul	eax, edx, 10
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _b$[ebp]
lea	ecx, DWORD PTR [eax+ecx-1094730640]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
shl	edx, 23					
mov	eax, DWORD PTR _b$[ebp]
shr	eax, 9
or	edx, eax
mov	DWORD PTR _b$[ebp], edx
mov	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
xor	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 13
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _a$[ebp]
lea	edx, DWORD PTR [ecx+edx+681279174]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _a$[ebp]
shr	ecx, 28					
or	eax, ecx
mov	DWORD PTR _a$[ebp], eax
mov	edx, DWORD PTR _a$[ebp]
add	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _a$[ebp]
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _d$[ebp]
lea	eax, DWORD PTR [edx+eax-358537222]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
shl	ecx, 11					
mov	edx, DWORD PTR _d$[ebp]
shr	edx, 21					
or	ecx, edx
mov	DWORD PTR _d$[ebp], ecx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 3
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+ecx-722521979]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 16					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 16					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _c$[ebp]
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx+76029189]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 23					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 9
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 9
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-640364487]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 28					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _a$[ebp]
mov	edx, 4
imul	eax, edx, 12
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-421815835]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 11					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 21					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
mov	eax, 4
imul	ecx, eax, 15
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx+530742520]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 16					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 16					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [edx+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+eax-995338651]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 23					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 9
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
not	eax
or	eax, DWORD PTR _b$[ebp]
xor	eax, DWORD PTR _c$[ebp]
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+eax-198630844]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 26					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
not	ecx
or	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1126891415]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 10					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 22					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
not	edx
or	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 14
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-1416354905]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 15					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 17					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
not	eax
or	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+eax-57434055]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 21					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 11					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
not	ecx
or	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
imul	eax, edx, 12
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _a$[ebp]
lea	ecx, DWORD PTR [eax+ecx+1700485571]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
shl	edx, 6
mov	eax, DWORD PTR _a$[ebp]
shr	eax, 26					
or	edx, eax
mov	DWORD PTR _a$[ebp], edx
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
not	edx
or	edx, DWORD PTR _a$[ebp]
xor	edx, DWORD PTR _b$[ebp]
mov	eax, 4
imul	ecx, eax, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _d$[ebp]
lea	edx, DWORD PTR [ecx+edx-1894986606]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
shl	eax, 10					
mov	ecx, DWORD PTR _d$[ebp]
shr	ecx, 22					
or	eax, ecx
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _d$[ebp]
add	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
not	eax
or	eax, DWORD PTR _d$[ebp]
xor	eax, DWORD PTR _a$[ebp]
mov	ecx, 4
imul	edx, ecx, 10
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _c$[ebp]
lea	eax, DWORD PTR [edx+eax-1051523]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
shl	ecx, 15					
mov	edx, DWORD PTR _c$[ebp]
shr	edx, 17					
or	ecx, edx
mov	DWORD PTR _c$[ebp], ecx
mov	eax, DWORD PTR _c$[ebp]
add	eax, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
not	ecx
or	ecx, DWORD PTR _c$[ebp]
xor	ecx, DWORD PTR _d$[ebp]
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+ecx-2054922799]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 21					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 11					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
not	ecx
or	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
shl	edx, 3
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+ecx+1873313359]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 26					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
not	ecx
or	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 15
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-30611744]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 10					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 22					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
not	edx
or	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _c$[ebp]
lea	edx, DWORD PTR [ecx+edx-1560198380]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _c$[ebp]
shl	eax, 15					
mov	ecx, DWORD PTR _c$[ebp]
shr	ecx, 17					
or	eax, ecx
mov	DWORD PTR _c$[ebp], eax
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
not	eax
or	eax, DWORD PTR _c$[ebp]
xor	eax, DWORD PTR _d$[ebp]
mov	ecx, 4
imul	edx, ecx, 13
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+edx+88]
mov	edx, DWORD PTR _b$[ebp]
lea	eax, DWORD PTR [edx+eax+1309151649]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
shl	ecx, 21					
mov	edx, DWORD PTR _b$[ebp]
shr	edx, 11					
or	ecx, edx
mov	DWORD PTR _b$[ebp], ecx
mov	eax, DWORD PTR _b$[ebp]
add	eax, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _d$[ebp]
not	ecx
or	ecx, DWORD PTR _b$[ebp]
xor	ecx, DWORD PTR _c$[ebp]
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [eax+edx+88]
mov	edx, DWORD PTR _a$[ebp]
lea	eax, DWORD PTR [edx+ecx-145523070]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _a$[ebp]
shr	edx, 26					
or	ecx, edx
mov	DWORD PTR _a$[ebp], ecx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _c$[ebp]
not	ecx
or	ecx, DWORD PTR _a$[ebp]
xor	ecx, DWORD PTR _b$[ebp]
mov	edx, 4
imul	eax, edx, 11
mov	edx, DWORD PTR _ctx$[ebp]
add	ecx, DWORD PTR [edx+eax+88]
mov	eax, DWORD PTR _d$[ebp]
lea	ecx, DWORD PTR [eax+ecx-1120210379]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _d$[ebp]
shl	edx, 10					
mov	eax, DWORD PTR _d$[ebp]
shr	eax, 22					
or	edx, eax
mov	DWORD PTR _d$[ebp], edx
mov	ecx, DWORD PTR _d$[ebp]
add	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR _d$[ebp], ecx
mov	edx, DWORD PTR _b$[ebp]
not	edx
or	edx, DWORD PTR _d$[ebp]
xor	edx, DWORD PTR _a$[ebp]
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [ecx+eax+88]
mov	eax, DWORD PTR _c$[ebp]
lea	ecx, DWORD PTR [eax+edx+718787259]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
shl	edx, 15					
mov	eax, DWORD PTR _c$[ebp]
shr	eax, 17					
or	edx, eax
mov	DWORD PTR _c$[ebp], edx
mov	ecx, DWORD PTR _c$[ebp]
add	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
not	edx
or	edx, DWORD PTR _c$[ebp]
xor	edx, DWORD PTR _d$[ebp]
mov	eax, 4
imul	ecx, eax, 9
mov	eax, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR [eax+ecx+88]
mov	ecx, DWORD PTR _b$[ebp]
lea	edx, DWORD PTR [ecx+edx-343485551]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _b$[ebp]
shl	eax, 21					
mov	ecx, DWORD PTR _b$[ebp]
shr	ecx, 11					
or	eax, ecx
mov	DWORD PTR _b$[ebp], eax
mov	edx, DWORD PTR _b$[ebp]
add	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
add	eax, DWORD PTR _saved_a$[ebp]
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _b$[ebp]
add	ecx, DWORD PTR _saved_b$[ebp]
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _c$[ebp]
add	edx, DWORD PTR _saved_c$[ebp]
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _d$[ebp]
add	eax, DWORD PTR _saved_d$[ebp]
mov	DWORD PTR _d$[ebp], eax
mov	ecx, DWORD PTR _ptr$[ebp]
add	ecx, 64					
mov	DWORD PTR _ptr$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
sub	edx, 64					
mov	DWORD PTR _size$[ebp], edx
jne	$LN3@body
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR _c$[ebp]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR _d$[ebp]
mov	DWORD PTR [eax+20], ecx
mov	eax, DWORD PTR _ptr$[ebp]
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_MD5_Final PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 63					
mov	DWORD PTR _used$[ebp], ecx
mov	edx, DWORD PTR _ctx$[ebp]
add	edx, DWORD PTR _used$[ebp]
mov	BYTE PTR [edx+24], 128			
mov	eax, DWORD PTR _used$[ebp]
add	eax, 1
mov	DWORD PTR _used$[ebp], eax
mov	ecx, 64					
sub	ecx, DWORD PTR _used$[ebp]
mov	DWORD PTR _available$[ebp], ecx
cmp	DWORD PTR _available$[ebp], 8
jae	SHORT $LN1@MD5_Final
mov	edx, DWORD PTR _available$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _used$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
lea	edx, DWORD PTR [ecx+eax+24]
push	edx
call	_memset
add	esp, 12					
push	64					
mov	eax, DWORD PTR _ctx$[ebp]
add	eax, 24					
push	eax
mov	ecx, DWORD PTR _ctx$[ebp]
push	ecx
call	_body
add	esp, 12					
mov	DWORD PTR _used$[ebp], 0
mov	DWORD PTR _available$[ebp], 64		
mov	edx, DWORD PTR _available$[ebp]
sub	edx, 8
push	edx
push	0
mov	eax, DWORD PTR _used$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
lea	edx, DWORD PTR [ecx+eax+24]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax]
shl	ecx, 3
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, 1
imul	ecx, eax, 56
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
mov	al, BYTE PTR [eax]
mov	BYTE PTR [edx+ecx+24], al
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx]
shr	edx, 8
mov	eax, 1
imul	ecx, eax, 57
mov	eax, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [eax+ecx+24], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx]
shr	edx, 16					
mov	eax, 1
imul	ecx, eax, 58
mov	eax, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [eax+ecx+24], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 59
mov	eax, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [eax+ecx+24], dl
mov	ecx, 1
imul	edx, ecx, 60
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
mov	cl, BYTE PTR [ecx+4]
mov	BYTE PTR [eax+edx+24], cl
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+4]
shr	eax, 8
mov	ecx, 1
imul	edx, ecx, 61
mov	ecx, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [ecx+edx+24], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+4]
shr	eax, 16					
mov	ecx, 1
imul	edx, ecx, 62
mov	ecx, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [ecx+edx+24], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+4]
shr	eax, 24					
mov	ecx, 1
imul	edx, ecx, 63
mov	ecx, DWORD PTR _ctx$[ebp]
mov	BYTE PTR [ecx+edx+24], al
push	64					
mov	edx, DWORD PTR _ctx$[ebp]
add	edx, 24					
push	edx
mov	eax, DWORD PTR _ctx$[ebp]
push	eax
call	_body
add	esp, 12					
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _result$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
mov	cl, BYTE PTR [ecx+8]
mov	BYTE PTR [eax+edx], cl
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+8]
shr	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _result$[ebp]
mov	BYTE PTR [edx+ecx], al
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax+8]
shr	ecx, 16					
mov	edx, 1
shl	edx, 1
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+edx], cl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+8]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 3
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, 1
shl	ecx, 2
mov	edx, DWORD PTR _result$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
mov	al, BYTE PTR [eax+12]
mov	BYTE PTR [edx+ecx], al
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+12]
shr	edx, 8
mov	eax, 1
imul	ecx, eax, 5
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+12]
shr	edx, 16					
mov	eax, 1
imul	ecx, eax, 6
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+12]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 7
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, 1
shl	ecx, 3
mov	edx, DWORD PTR _result$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
mov	al, BYTE PTR [eax+16]
mov	BYTE PTR [edx+ecx], al
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 8
mov	eax, 1
imul	ecx, eax, 9
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 16					
mov	eax, 1
imul	ecx, eax, 10
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, DWORD PTR _ctx$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 11
mov	eax, DWORD PTR _result$[ebp]
mov	BYTE PTR [eax+ecx], dl
mov	ecx, 1
imul	edx, ecx, 12
mov	eax, DWORD PTR _result$[ebp]
mov	ecx, DWORD PTR _ctx$[ebp]
mov	cl, BYTE PTR [ecx+20]
mov	BYTE PTR [eax+edx], cl
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+20]
shr	eax, 8
mov	ecx, 1
imul	edx, ecx, 13
mov	ecx, DWORD PTR _result$[ebp]
mov	BYTE PTR [ecx+edx], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+20]
shr	eax, 16					
mov	ecx, 1
imul	edx, ecx, 14
mov	ecx, DWORD PTR _result$[ebp]
mov	BYTE PTR [ecx+edx], al
mov	edx, DWORD PTR _ctx$[ebp]
mov	eax, DWORD PTR [edx+20]
shr	eax, 24					
mov	ecx, 1
imul	edx, ecx, 15
mov	ecx, DWORD PTR _result$[ebp]
mov	BYTE PTR [ecx+edx], al
push	152					
push	0
mov	edx, DWORD PTR _ctx$[ebp]
push	edx
call	_memset
add	esp, 12					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_MD5_Update PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _saved_lo$[ebp], ecx
mov	edx, DWORD PTR _saved_lo$[ebp]
add	edx, DWORD PTR _size$[ebp]
and	edx, 536870911				
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
cmp	edx, DWORD PTR _saved_lo$[ebp]
jae	SHORT $LN4@MD5_Update
mov	eax, DWORD PTR _ctx$[ebp]
mov	ecx, DWORD PTR [eax+4]
add	ecx, 1
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _size$[ebp]
shr	eax, 29					
mov	ecx, DWORD PTR _ctx$[ebp]
add	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _saved_lo$[ebp]
and	eax, 63					
mov	DWORD PTR _used$[ebp], eax
je	SHORT $LN3@MD5_Update
mov	ecx, 64					
sub	ecx, DWORD PTR _used$[ebp]
mov	DWORD PTR _available$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
cmp	edx, DWORD PTR _available$[ebp]
jae	SHORT $LN2@MD5_Update
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _data$[ebp]
push	ecx
mov	edx, DWORD PTR _used$[ebp]
mov	eax, DWORD PTR _ctx$[ebp]
lea	ecx, DWORD PTR [eax+edx+24]
push	ecx
call	_memcpy
add	esp, 12					
jmp	$LN5@MD5_Update
mov	edx, DWORD PTR _available$[ebp]
push	edx
mov	eax, DWORD PTR _data$[ebp]
push	eax
mov	ecx, DWORD PTR _used$[ebp]
mov	edx, DWORD PTR _ctx$[ebp]
lea	eax, DWORD PTR [edx+ecx+24]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, DWORD PTR _available$[ebp]
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
sub	edx, DWORD PTR _available$[ebp]
mov	DWORD PTR _size$[ebp], edx
push	64					
mov	eax, DWORD PTR _ctx$[ebp]
add	eax, 24					
push	eax
mov	ecx, DWORD PTR _ctx$[ebp]
push	ecx
call	_body
add	esp, 12					
cmp	DWORD PTR _size$[ebp], 64		
jb	SHORT $LN1@MD5_Update
mov	edx, DWORD PTR _size$[ebp]
and	edx, -64				
push	edx
mov	eax, DWORD PTR _data$[ebp]
push	eax
mov	ecx, DWORD PTR _ctx$[ebp]
push	ecx
call	_body
add	esp, 12					
mov	DWORD PTR _data$[ebp], eax
mov	edx, DWORD PTR _size$[ebp]
and	edx, 63					
mov	DWORD PTR _size$[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _data$[ebp]
push	ecx
mov	edx, DWORD PTR _ctx$[ebp]
add	edx, 24					
push	edx
call	_memcpy
add	esp, 12					
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_MD5_Init PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [eax+8], 1732584193		
mov	ecx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [ecx+12], -271733879		
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+16], -1732584194		
mov	eax, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [eax+20], 271733878		
mov	ecx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _ctx$[ebp]
mov	DWORD PTR [edx+4], 0
pop	ebp
ret	0
ENDP
_ft_raccess_rule_by_darwin_vfs PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _rule_index$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_raccess_get_rule_type_from_rule_index
add	esp, 8
mov	DWORD PTR tv67[ebp], eax
cmp	DWORD PTR tv67[ebp], 3
jl	SHORT $LN1@ft_raccess
cmp	DWORD PTR tv67[ebp], 4
jle	SHORT $LN2@ft_raccess
jmp	SHORT $LN1@ft_raccess
mov	al, 1
jmp	SHORT $LN5@ft_raccess
xor	al, al
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_open_face_from_buffer PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _stream$[ebp], 0
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _stream$[ebp]
push	edx
push	OFFSET _memory_stream_close
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _base$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_new_memory_stream
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@open_face_
mov	eax, DWORD PTR _base$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _base$[ebp], 0
xor	edx, edx
jne	SHORT $LN9@open_face_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN11@open_face_
mov	DWORD PTR _args$[ebp], 2
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR _args$[ebp+16], eax
cmp	DWORD PTR _driver_name$[ebp], 0
je	SHORT $LN6@open_face_
mov	ecx, DWORD PTR _args$[ebp]
or	ecx, 8
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _driver_name$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _args$[ebp+20], eax
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
lea	eax, DWORD PTR _args$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Open_Face
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN5@open_face_
mov	edx, DWORD PTR _aface$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
and	ecx, -1025				
mov	edx, DWORD PTR _aface$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [eax+8], ecx
jmp	SHORT $LN4@open_face_
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Close
add	esp, 4
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@open_face_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@open_face_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	2
DD	$LN15@open_face_
DD	-36					
DD	32					
DD	$LN13@open_face_
DD	-52					
DD	4
DD	$LN14@open_face_
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
DB	97					
DB	114					
DB	103					
DB	115					
DB	0
ENDP
_open_face_PS_from_sfnt_stream PROC
push	ebp
mov	ebp, esp
sub	esp, 72					
push	edi
lea	edi, DWORD PTR [ebp-72]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _sfnt_ps$[ebp], 0
mov	edx, DWORD PTR _num_params$[ebp]
mov	DWORD PTR _num_params$[ebp], edx
mov	eax, DWORD PTR _params$[ebp]
mov	DWORD PTR _params$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _pos$[ebp], eax
lea	edx, DWORD PTR _is_sfnt_cid$[ebp]
push	edx
lea	eax, DWORD PTR _length$[ebp]
push	eax
lea	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_ft_lookup_PS_in_sfnt_stream
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@open_face_
jmp	$Exit$19
mov	ecx, DWORD PTR _pos$[ebp]
add	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
test	eax, eax
je	SHORT $LN5@open_face_
jmp	$Exit$19
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _length$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _sfnt_ps$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@open_face_
jmp	SHORT $Exit$19
mov	eax, DWORD PTR _length$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt_ps$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@open_face_
jmp	SHORT $Exit$19
movzx	eax, BYTE PTR _is_sfnt_cid$[ebp]
test	eax, eax
je	SHORT $LN9@open_face_
mov	DWORD PTR tv93[ebp], OFFSET $SG9981
jmp	SHORT $LN10@open_face_
mov	DWORD PTR tv93[ebp], OFFSET $SG9982
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN11@open_face_
mov	ecx, DWORD PTR _face_index$[ebp]
mov	DWORD PTR tv128[ebp], ecx
jmp	SHORT $LN12@open_face_
mov	DWORD PTR tv128[ebp], 0
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR tv93[ebp]
push	eax
mov	ecx, DWORD PTR tv128[ebp]
push	ecx
mov	edx, DWORD PTR _length$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt_ps$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_open_face_from_buffer
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
jne	SHORT $LN2@open_face_
mov	eax, DWORD PTR _pos$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error1$1[ebp], eax
cmp	DWORD PTR _error1$1[ebp], 0
je	SHORT $LN2@open_face_
mov	eax, DWORD PTR _error1$1[ebp]
jmp	SHORT $LN7@open_face_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@open_face_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 72					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	4
DD	$LN17@open_face_
DD	-8					
DD	4
DD	$LN13@open_face_
DD	-24					
DD	4
DD	$LN14@open_face_
DD	-36					
DD	4
DD	$LN15@open_face_
DD	-49					
DD	1
DD	$LN16@open_face_
DB	105					
DB	115					
DB	95					
DB	115					
DB	102					
DB	110					
DB	116					
DB	95					
DB	99					
DB	105					
DB	100					
DB	0
DB	108					
DB	101					
DB	110					
DB	103					
DB	116					
DB	104					
DB	0
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Get_CMap_Format PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN7@FT_Get_CMa
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN8@FT_Get_CMa
or	eax, -1
jmp	$LN9@FT_Get_CMa
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN3@FT_Get_CMa
mov	esi, esp
push	OFFSET $SG11519
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], edx
xor	eax, eax
jne	SHORT $LN6@FT_Get_CMa
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN2@FT_Get_CMa
or	eax, -1
jmp	SHORT $LN9@FT_Get_CMa
mov	esi, esp
lea	ecx, DWORD PTR _cmap_info$[ebp]
push	ecx
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
mov	eax, DWORD PTR _service$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@FT_Get_CMa
or	eax, -1
jmp	SHORT $LN9@FT_Get_CMa
mov	eax, DWORD PTR _cmap_info$[ebp+4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Get_CMa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN12@FT_Get_CMa
DD	-20					
DD	8
DD	$LN11@FT_Get_CMa
DB	99					
DB	109					
DB	97					
DB	112					
DB	95					
DB	105					
DB	110					
DB	102					
DB	111					
DB	0
ENDP
_FT_Get_CMap_Language_ID PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN7@FT_Get_CMa
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN8@FT_Get_CMa
xor	eax, eax
jmp	SHORT $LN9@FT_Get_CMa
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN3@FT_Get_CMa
mov	esi, esp
push	OFFSET $SG11498
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], edx
xor	eax, eax
jne	SHORT $LN6@FT_Get_CMa
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN2@FT_Get_CMa
xor	eax, eax
jmp	SHORT $LN9@FT_Get_CMa
mov	esi, esp
lea	ecx, DWORD PTR _cmap_info$[ebp]
push	ecx
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
mov	eax, DWORD PTR _service$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@FT_Get_CMa
xor	eax, eax
jmp	SHORT $LN9@FT_Get_CMa
mov	eax, DWORD PTR _cmap_info$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Get_CMa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN12@FT_Get_CMa
DD	-20					
DD	8
DD	$LN11@FT_Get_CMa
DB	99					
DB	109					
DB	97					
DB	112					
DB	95					
DB	105					
DB	110					
DB	102					
DB	111					
DB	0
ENDP
_FT_Sfnt_Table_Info PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN6@FT_Sfnt_Ta
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
jne	SHORT $LN5@FT_Sfnt_Ta
push	OFFSET $SG11467
push	3755					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Sfnt_Ta
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Sfnt_Ta
mov	esi, esp
push	OFFSET $SG11477
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Sfnt_Ta
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN1@FT_Sfnt_Ta
push	OFFSET $SG11480
push	3759					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN8@FT_Sfnt_Ta
mov	esi, esp
mov	eax, DWORD PTR _length$[ebp]
push	eax
lea	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _tag$[ebp]
push	edx
mov	eax, DWORD PTR _table_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Sfnt_Ta
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN11@FT_Sfnt_Ta
DD	-12					
DD	4
DD	$LN10@FT_Sfnt_Ta
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
ENDP
_FT_Load_Sfnt_Table PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN6@FT_Load_Sf
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
jne	SHORT $LN5@FT_Load_Sf
push	OFFSET $SG11440
push	3730					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Load_Sf
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Load_Sf
mov	esi, esp
push	OFFSET $SG11450
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Load_Sf
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN1@FT_Load_Sf
push	OFFSET $SG11453
push	3734					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN8@FT_Load_Sf
mov	esi, esp
mov	eax, DWORD PTR _length$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _offset$[ebp]
push	edx
mov	eax, DWORD PTR _tag$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Sfnt_Table PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _table$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN6@FT_Get_Sfn
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8
je	SHORT $LN6@FT_Get_Sfn
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Get_Sfn
mov	esi, esp
push	OFFSET $SG11423
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Get_Sfn
cmp	DWORD PTR _service$[ebp], 0
je	SHORT $LN6@FT_Get_Sfn
mov	esi, esp
mov	eax, DWORD PTR _tag$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _table$[ebp], eax
mov	eax, DWORD PTR _table$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ReadFields PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	BYTE PTR _frame_accessed$[ebp], 0
cmp	DWORD PTR _fields$[ebp], 0
jne	SHORT $LN28@FT_Stream_
push	OFFSET $SG13562
push	732					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN29@FT_Stream_
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN27@FT_Stream_
push	OFFSET $SG13564
push	735					
push	40					
call	_FT_Throw
add	esp, 12					
or	eax, 40					
jmp	$LN29@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _cursor$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _fields$[ebp]
movzx	eax, BYTE PTR [edx]
mov	DWORD PTR tv79[ebp], eax
mov	ecx, DWORD PTR tv79[ebp]
sub	ecx, 4
mov	DWORD PTR tv79[ebp], ecx
cmp	DWORD PTR tv79[ebp], 21			
ja	$LN9@FT_Stream_
mov	edx, DWORD PTR tv79[ebp]
movzx	eax, BYTE PTR $LN31@FT_Stream_[edx]
jmp	DWORD PTR $LN32@FT_Stream_[eax*4]
mov	ecx, DWORD PTR _fields$[ebp]
movzx	edx, WORD PTR [ecx+2]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@FT_Stream_
jmp	$Exit$33
mov	BYTE PTR _frame_accessed$[ebp], 1
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+32]
mov	DWORD PTR _cursor$[ebp], edx
mov	eax, DWORD PTR _fields$[ebp]
add	eax, 4
mov	DWORD PTR _fields$[ebp], eax
jmp	$LN25@FT_Stream_
mov	ecx, DWORD PTR _fields$[ebp]
movzx	edx, BYTE PTR [ecx+1]
mov	DWORD PTR _len$1[ebp], edx
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, DWORD PTR _len$1[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+36]
jbe	SHORT $LN18@FT_Stream_
push	OFFSET $SG13581
push	767					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$33
mov	edx, DWORD PTR _fields$[ebp]
movzx	eax, BYTE PTR [edx]
cmp	eax, 24					
jne	SHORT $LN17@FT_Stream_
mov	ecx, DWORD PTR _fields$[ebp]
movzx	edx, WORD PTR [ecx+2]
add	edx, DWORD PTR _structure$[ebp]
mov	DWORD PTR _p$2[ebp], edx
mov	eax, DWORD PTR _len$1[ebp]
push	eax
mov	ecx, DWORD PTR _cursor$[ebp]
push	ecx
mov	edx, DWORD PTR _p$2[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, DWORD PTR _len$1[ebp]
mov	DWORD PTR _cursor$[ebp], eax
mov	ecx, DWORD PTR _fields$[ebp]
add	ecx, 4
mov	DWORD PTR _fields$[ebp], ecx
jmp	$LN25@FT_Stream_
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx]
mov	DWORD PTR _value$4[ebp], eax
mov	ecx, DWORD PTR _cursor$[ebp]
add	ecx, 1
mov	DWORD PTR _cursor$[ebp], ecx
mov	DWORD PTR _sign_shift$3[ebp], 24	
jmp	$LN22@FT_Stream_
mov	edx, DWORD PTR _cursor$[ebp]
add	edx, 2
mov	DWORD PTR _cursor$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	DWORD PTR _value$4[ebp], edx
mov	DWORD PTR _sign_shift$3[ebp], 16	
jmp	$LN22@FT_Stream_
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, 2
mov	DWORD PTR _cursor$[ebp], eax
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
imul	edx, ecx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+edx-2]
or	eax, edx
movzx	eax, ax
mov	DWORD PTR _value$4[ebp], eax
mov	DWORD PTR _sign_shift$3[ebp], 16	
jmp	$LN22@FT_Stream_
mov	ecx, DWORD PTR _cursor$[ebp]
add	ecx, 4
mov	DWORD PTR _cursor$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+eax-4]
shl	edx, 24					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [ecx+eax-4]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 3
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
or	edx, ecx
mov	DWORD PTR _value$4[ebp], edx
mov	DWORD PTR _sign_shift$3[ebp], 0
jmp	$LN22@FT_Stream_
mov	edx, DWORD PTR _cursor$[ebp]
add	edx, 4
mov	DWORD PTR _cursor$[ebp], edx
mov	eax, 1
imul	ecx, eax, 3
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+ecx-4]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 1
mov	edx, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-4]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 0
mov	ecx, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
or	eax, edx
mov	DWORD PTR _value$4[ebp], eax
mov	DWORD PTR _sign_shift$3[ebp], 0
jmp	$LN22@FT_Stream_
mov	eax, DWORD PTR _cursor$[ebp]
add	eax, 3
mov	DWORD PTR _cursor$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+edx-3]
shl	ecx, 16					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
shl	edx, 8
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _cursor$[ebp]
movzx	eax, BYTE PTR [edx+eax-3]
or	ecx, eax
mov	DWORD PTR _value$4[ebp], ecx
mov	DWORD PTR _sign_shift$3[ebp], 8
jmp	SHORT $LN22@FT_Stream_
mov	ecx, DWORD PTR _cursor$[ebp]
add	ecx, 3
mov	DWORD PTR _cursor$[ebp], ecx
mov	edx, 1
shl	edx, 1
mov	eax, DWORD PTR _cursor$[ebp]
movzx	ecx, BYTE PTR [eax+edx-3]
shl	ecx, 16					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
shl	edx, 8
or	ecx, edx
mov	eax, 1
imul	edx, eax, 0
mov	eax, DWORD PTR _cursor$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
or	ecx, edx
mov	DWORD PTR _value$4[ebp], ecx
mov	DWORD PTR _sign_shift$3[ebp], 8
jmp	SHORT $LN22@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _cursor$[ebp]
mov	DWORD PTR [eax+32], ecx
jmp	$Exit$33
mov	edx, DWORD PTR _fields$[ebp]
movzx	eax, BYTE PTR [edx]
and	eax, 1
je	SHORT $LN8@FT_Stream_
mov	edx, DWORD PTR _value$4[ebp]
mov	ecx, DWORD PTR _sign_shift$3[ebp]
shl	edx, cl
mov	ecx, DWORD PTR _sign_shift$3[ebp]
sar	edx, cl
mov	DWORD PTR _value$4[ebp], edx
mov	eax, DWORD PTR _fields$[ebp]
movzx	ecx, WORD PTR [eax+2]
add	ecx, DWORD PTR _structure$[ebp]
mov	DWORD PTR _p$2[ebp], ecx
mov	edx, DWORD PTR _fields$[ebp]
mov	al, BYTE PTR [edx+1]
mov	BYTE PTR tv263[ebp], al
cmp	BYTE PTR tv263[ebp], 1
je	SHORT $LN5@FT_Stream_
cmp	BYTE PTR tv263[ebp], 2
je	SHORT $LN4@FT_Stream_
cmp	BYTE PTR tv263[ebp], 4
je	SHORT $LN3@FT_Stream_
jmp	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$2[ebp]
mov	dl, BYTE PTR _value$4[ebp]
mov	BYTE PTR [ecx], dl
jmp	SHORT $LN6@FT_Stream_
mov	eax, DWORD PTR _p$2[ebp]
mov	cx, WORD PTR _value$4[ebp]
mov	WORD PTR [eax], cx
jmp	SHORT $LN6@FT_Stream_
mov	edx, DWORD PTR _p$2[ebp]
mov	eax, DWORD PTR _value$4[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN6@FT_Stream_
mov	ecx, DWORD PTR _p$2[ebp]
mov	edx, DWORD PTR _value$4[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _fields$[ebp]
add	eax, 4
mov	DWORD PTR _fields$[ebp], eax
mov	ecx, 1
test	ecx, ecx
jne	$LN26@FT_Stream_
movzx	edx, BYTE PTR _frame_accessed$[ebp]
test	edx, edx
je	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	$LN21@FT_Stream_
DD	$LN16@FT_Stream_
DD	$LN15@FT_Stream_
DD	$LN14@FT_Stream_
DD	$LN13@FT_Stream_
DD	$LN12@FT_Stream_
DD	$LN11@FT_Stream_
DD	$LN10@FT_Stream_
DD	$LN19@FT_Stream_
DD	$LN9@FT_Stream_
DB	0
DB	9
DB	9
DB	9
DB	1
DB	1
DB	9
DB	9
DB	2
DB	2
DB	3
DB	3
DB	4
DB	4
DB	5
DB	5
DB	6
DB	6
DB	7
DB	7
DB	8
DB	8
ENDP
_FT_Stream_ReadULongLE PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13530
push	683					
push	OFFSET $SG13531
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 3
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+4]
jae	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	4
lea	eax, DWORD PTR _reads$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 4
je	SHORT $LN4@FT_Stream_
jmp	$Fail$16
lea	eax, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _stream$[ebp]
add	edx, DWORD PTR [eax+8]
mov	DWORD PTR _p$[ebp], edx
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 4
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-4]
shl	edx, 24					
mov	eax, 1
shl	eax, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-4]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
shl	ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
or	edx, ecx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 4
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13549
push	712					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13550
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	4
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadUShortLE PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
xor	eax, eax
mov	WORD PTR _result$[ebp], ax
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13437
push	542					
push	OFFSET $SG13438
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@FT_Stream_
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 1
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+4]
jae	$LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	2
lea	ecx, DWORD PTR _reads$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 2
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$16
lea	ecx, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], ecx
jmp	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	DWORD PTR _p$[ebp], eax
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-2]
or	edx, ecx
mov	WORD PTR _result$[ebp], dx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 2
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	ax, WORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13452
push	571					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13453
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	2
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadULong PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13497
push	636					
push	OFFSET $SG13498
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 3
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+4]
jae	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	4
lea	eax, DWORD PTR _reads$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 4
je	SHORT $LN4@FT_Stream_
jmp	$Fail$16
lea	eax, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _stream$[ebp]
add	edx, DWORD PTR [eax+8]
mov	DWORD PTR _p$[ebp], edx
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 4
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-4]
shl	edx, 24					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-4]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 3
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-4]
or	edx, ecx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 4
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13516
push	665					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13517
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	4
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadUOffset PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13466
push	589					
push	OFFSET $SG13467
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 2
mov	ecx, DWORD PTR _stream$[ebp]
cmp	eax, DWORD PTR [ecx+4]
jae	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	3
lea	eax, DWORD PTR _reads$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 3
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$16
lea	eax, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _stream$[ebp]
add	edx, DWORD PTR [eax+8]
mov	DWORD PTR _p$[ebp], edx
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 3
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-3]
shl	edx, 16					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-3]
shl	eax, 8
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx-3]
or	edx, ecx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 3
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13483
push	618					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13484
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	3
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadUShort PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _p$[ebp], 0
xor	eax, eax
mov	WORD PTR _result$[ebp], ax
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN9@FT_Stream_
push	OFFSET $SG13408
push	495					
push	OFFSET $SG13409
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@FT_Stream_
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 1
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+4]
jae	$LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	2
lea	ecx, DWORD PTR _reads$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 2
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$16
lea	ecx, DWORD PTR _reads$[ebp]
mov	DWORD PTR _p$[ebp], ecx
jmp	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	DWORD PTR _p$[ebp], eax
cmp	DWORD PTR _p$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
mov	WORD PTR _result$[ebp], ax
jmp	SHORT $LN1@FT_Stream_
jmp	SHORT $Fail$16
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 2
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	ax, WORD PTR _result$[ebp]
jmp	SHORT $LN11@FT_Stream_
push	OFFSET $SG13423
push	524					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13424
call	_FT_Message
add	esp, 12					
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN14@FT_Stream_
DD	-8					
DD	2
DD	$LN13@FT_Stream_
DB	114					
DB	101					
DB	97					
DB	100					
DB	115					
DB	0
ENDP
_FT_Stream_ReadChar PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	BYTE PTR _result$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN8@FT_Stream_
push	OFFSET $SG13386
push	456					
push	OFFSET $SG13387
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@FT_Stream_
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	1
lea	eax, DWORD PTR _result$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
je	SHORT $LN4@FT_Stream_
jmp	SHORT $Fail$15
jmp	SHORT $LN3@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jae	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	cl, BYTE PTR [eax+ecx]
mov	BYTE PTR _result$[ebp], cl
jmp	SHORT $LN3@FT_Stream_
jmp	SHORT $Fail$15
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 1
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	al, BYTE PTR _result$[ebp]
jmp	SHORT $LN10@FT_Stream_
push	OFFSET $SG13394
push	477					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG13395
call	_FT_Message
add	esp, 12					
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN13@FT_Stream_
DD	-5					
DD	1
DD	$LN12@FT_Stream_
DB	114					
DB	101					
DB	115					
DB	117					
DB	108					
DB	116					
DB	0
ENDP
_FT_Stream_GetULongLE PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13363
push	438					
push	OFFSET $SG13364
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 3
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+36]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 3
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-4]
shl	ecx, 24					
mov	edx, 1
shl	edx, 1
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-4]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
or	ecx, eax
mov	DWORD PTR _result$[ebp], ecx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetUShortLE PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13300
push	383					
push	OFFSET $SG13301
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
xor	edx, edx
mov	WORD PTR _result$[ebp], dx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	eax, DWORD PTR _stream$[ebp]
cmp	edx, DWORD PTR [eax+36]
jae	SHORT $LN1@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-2]
or	ecx, eax
mov	WORD PTR _result$[ebp], cx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	ax, WORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetULong PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13340
push	420					
push	OFFSET $SG13341
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 3
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+36]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-4]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-4]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
or	ecx, eax
mov	DWORD PTR _result$[ebp], ecx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetUOffset PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13319
push	402					
push	OFFSET $SG13320
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	edx, DWORD PTR _stream$[ebp]
cmp	ecx, DWORD PTR [edx+36]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _p$[ebp]
add	eax, 3
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-3]
shl	ecx, 16					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-3]
shl	edx, 8
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-3]
or	ecx, eax
mov	DWORD PTR _result$[ebp], ecx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetUShort PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13281
push	364					
push	OFFSET $SG13282
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
xor	edx, edx
mov	WORD PTR _result$[ebp], dx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	eax, DWORD PTR _stream$[ebp]
cmp	edx, DWORD PTR [eax+36]
jae	SHORT $LN1@FT_Stream_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
mov	WORD PTR _result$[ebp], dx
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	ax, WORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_GetChar PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	SHORT $LN5@FT_Stream_
push	OFFSET $SG13268
push	347					
push	OFFSET $SG13269
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@FT_Stream_
mov	BYTE PTR _result$[ebp], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+32]
cmp	ecx, DWORD PTR [eax+36]
jae	SHORT $LN1@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR _result$[ebp], cl
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
add	eax, 1
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+32], eax
mov	al, BYTE PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ReleaseFrame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN4@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN4@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _memory$1[ebp], edx
mov	eax, DWORD PTR _pbytes$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _memory$1[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [eax], 0
xor	ecx, ecx
jne	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [edx], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ExtractFrame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Stream_
mov	edx, DWORD PTR _pbytes$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+36], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ExitFrame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
jne	SHORT $LN7@FT_Stream_
push	OFFSET $SG13251
push	323					
push	OFFSET $SG13252
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN8@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN4@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$1[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], 0
xor	edx, edx
jne	SHORT $LN3@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+32], 0
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+36], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_EnterFrame PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN11@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN14@FT_Stream_
push	OFFSET $SG13222
push	242					
push	OFFSET $SG13223
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN15@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	$LN10@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _count$[ebp]
cmp	eax, DWORD PTR [edx+4]
jbe	SHORT $LN9@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
push	OFFSET $SG13227
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13228
push	257					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$21
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_qalloc
add	esp, 12					
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@FT_Stream_
jmp	$Exit$21
mov	esi, esp
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _read_bytes$[ebp], eax
mov	ecx, DWORD PTR _read_bytes$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN7@FT_Stream_
mov	edx, DWORD PTR _read_bytes$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
push	OFFSET $SG13233
call	_FT_Message
add	esp, 12					
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], 0
xor	edx, edx
jne	SHORT $LN6@FT_Stream_
push	OFFSET $SG13238
push	280					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+32], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
add	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+36], ecx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _read_bytes$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+8], ecx
jmp	$Exit$21
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jae	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
push	OFFSET $SG13242
call	_FT_Message
add	esp, 16					
push	OFFSET $SG13243
push	296					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$21
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
add	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+36], ecx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN19@FT_Stream_
DD	-8					
DD	4
DD	$LN18@FT_Stream_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Stream_TryRead PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _read_bytes$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jb	SHORT $LN4@FT_Stream_
jmp	SHORT $Exit$7
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN3@FT_Stream_
mov	esi, esp
mov	ecx, DWORD PTR _count$[ebp]
push	ecx
mov	edx, DWORD PTR _buffer$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _read_bytes$[ebp], eax
jmp	SHORT $LN2@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _read_bytes$[ebp], ecx
mov	edx, DWORD PTR _read_bytes$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jbe	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _count$[ebp]
mov	DWORD PTR _read_bytes$[ebp], eax
mov	ecx, DWORD PTR _read_bytes$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _stream$[ebp]
add	eax, DWORD PTR [ecx+8]
push	eax
mov	edx, DWORD PTR _buffer$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _read_bytes$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _read_bytes$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_ReadAt PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _pos$[ebp]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN5@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
push	OFFSET $SG13168
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13169
push	134					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
jmp	$LN6@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [edx+20], 0
je	SHORT $LN4@FT_Stream_
mov	esi, esp
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _pos$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _read_bytes$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+4]
sub	ecx, DWORD PTR _pos$[ebp]
mov	DWORD PTR _read_bytes$[ebp], ecx
mov	edx, DWORD PTR _read_bytes$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jbe	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _count$[ebp]
mov	DWORD PTR _read_bytes$[ebp], eax
mov	ecx, DWORD PTR _read_bytes$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, DWORD PTR _pos$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _pos$[ebp]
add	edx, DWORD PTR _read_bytes$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _read_bytes$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN1@FT_Stream_
mov	edx, DWORD PTR _read_bytes$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
push	OFFSET $SG13174
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13175
push	156					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_Read PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadAt
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Stream_Pos PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [eax+8]
pop	ebp
ret	0
ENDP
_FT_Stream_Skip PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _distance$[ebp], 0
jge	SHORT $LN1@FT_Stream_
push	OFFSET $SG13144
push	96					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
jmp	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _distance$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Stream_Seek PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN5@FT_Stream_
mov	esi, esp
push	0
push	0
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN4@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
push	OFFSET $SG13131
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13132
push	71					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN3@FT_Stream_
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _pos$[ebp]
cmp	eax, DWORD PTR [edx+4]
jbe	SHORT $LN3@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _pos$[ebp]
push	eax
push	OFFSET $SG13135
call	_FT_Message
add	esp, 12					
push	OFFSET $SG13136
push	81					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _pos$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_Close PROC
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN2@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
cmp	DWORD PTR [eax+24], 0
je	SHORT $LN2@FT_Stream_
mov	esi, esp
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Stream_OpenMemory PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+24], 0
pop	ebp
ret	0
ENDP
_FT_Stream_Free PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Close
add	esp, 4
cmp	DWORD PTR _external$[ebp], 0
jne	SHORT $LN6@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_Stream_
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Stream_New PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _stream$[ebp], 0
mov	eax, DWORD PTR _astream$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN17@FT_Stream_
push	OFFSET $SG9339
push	164					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN18@FT_Stream_
cmp	DWORD PTR _args$[ebp], 0
jne	SHORT $LN16@FT_Stream_
push	OFFSET $SG9341
push	167					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN18@FT_Stream_
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	40					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _stream$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@FT_Stream_
jmp	$Exit$23
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx+28], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 1
je	SHORT $LN14@FT_Stream_
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_OpenMemory
add	esp, 12					
jmp	$LN13@FT_Stream_
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 4
je	SHORT $LN12@FT_Stream_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Open
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+16], eax
jmp	SHORT $LN13@FT_Stream_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 2
je	SHORT $LN10@FT_Stream_
mov	eax, DWORD PTR _args$[ebp]
cmp	DWORD PTR [eax+16], 0
je	SHORT $LN10@FT_Stream_
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	eax, eax
jne	SHORT $LN9@FT_Stream_
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _stream$[ebp], edx
jmp	SHORT $LN13@FT_Stream_
push	OFFSET $SG9356
push	205					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stream$[ebp], 0
xor	edx, edx
jne	SHORT $LN4@FT_Stream_
jmp	SHORT $LN1@FT_Stream_
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax+28], ecx
mov	edx, DWORD PTR _astream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@FT_Stream_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN21@FT_Stream_
DD	-8					
DD	4
DD	$LN20@FT_Stream_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Raccess_Get_DataOffsets PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _offsets_internal$[ebp], 0
mov	DWORD PTR _ref$[ebp], 0
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN51@FT_Raccess
push	OFFSET $SG12562
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN52@FT_Raccess
mov	edx, DWORD PTR _map_offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN48@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	eax, ax
mov	DWORD PTR _cnt$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN47@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
mov	ecx, DWORD PTR _cnt$[ebp]
add	ecx, 1
mov	DWORD PTR _cnt$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN46@FT_Raccess
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _cnt$[ebp]
jge	$LN44@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _tag_internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN42@FT_Raccess
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _subcnt$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN42@FT_Raccess
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _rpos$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN41@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN40@FT_Raccess
mov	edx, DWORD PTR _tag_internal$[ebp]
and	edx, 255				
movsx	eax, dl
push	eax
mov	ecx, DWORD PTR _tag_internal$[ebp]
sar	ecx, 8
and	ecx, 255				
movsx	edx, cl
push	edx
mov	eax, DWORD PTR _tag_internal$[ebp]
sar	eax, 16					
and	eax, 255				
movsx	ecx, al
push	ecx
mov	edx, DWORD PTR _tag_internal$[ebp]
sar	edx, 24					
and	edx, 255				
movsx	eax, dl
push	eax
push	OFFSET $SG12582
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN41@FT_Raccess
mov	edx, 4
imul	eax, edx, 14
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN36@FT_Raccess
mov	ecx, DWORD PTR _rpos$[ebp]
push	ecx
mov	edx, DWORD PTR _subcnt$[ebp]
push	edx
push	OFFSET $SG12587
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN37@FT_Raccess
mov	ecx, DWORD PTR _tag_internal$[ebp]
cmp	ecx, DWORD PTR _tag$[ebp]
jne	$LN33@FT_Raccess
mov	edx, DWORD PTR _subcnt$[ebp]
add	edx, 1
mov	eax, DWORD PTR _count$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _rpos$[ebp]
add	ecx, DWORD PTR _map_offset$[ebp]
mov	DWORD PTR _rpos$[ebp], ecx
mov	edx, DWORD PTR _rpos$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN32@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _count$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _ref$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN53@FT_Raccess
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN30@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _count$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax]
jge	$LN28@FT_Raccess
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _ref$[ebp]
mov	WORD PTR [edx+ecx*8], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@FT_Raccess
jmp	$Exit$58
push	2
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@FT_Raccess
jmp	$Exit$58
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadULong
add	esp, 8
mov	DWORD PTR _temp$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN25@FT_Raccess
jmp	$Exit$58
push	4
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@FT_Raccess
jmp	$Exit$58
mov	ecx, DWORD PTR _temp$[ebp]
and	ecx, 16777215				
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
mov	DWORD PTR [eax+edx*8+4], ecx
mov	ecx, 4
imul	edx, ecx, 14
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN22@FT_Raccess
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _ref$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+4]
push	edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _ref$[ebp]
movzx	edx, WORD PTR [ecx+eax*8]
push	edx
mov	eax, DWORD PTR _j$[ebp]
push	eax
push	OFFSET $SG12609
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN23@FT_Raccess
jmp	$LN29@FT_Raccess
movzx	edx, BYTE PTR _sort_by_res_id$[ebp]
test	edx, edx
je	$LN19@FT_Raccess
mov	esi, esp
push	OFFSET _ft_raccess_sort_ref_by_id
push	8
mov	eax, DWORD PTR _count$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _ref$[ebp]
push	edx
call	DWORD PTR __imp__qsort
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN17@FT_Raccess
push	OFFSET $SG12619
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN18@FT_Raccess
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN14@FT_Raccess
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _count$[ebp]
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR [ecx]
jge	SHORT $LN19@FT_Raccess
mov	eax, 4
imul	ecx, eax, 14
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN10@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
mov	ecx, DWORD PTR [eax+edx*8+4]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
movzx	ecx, WORD PTR [eax+edx*8]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
push	edx
push	OFFSET $SG12627
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN11@FT_Raccess
jmp	SHORT $LN13@FT_Raccess
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _count$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _offsets_internal$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@FT_Raccess
jmp	SHORT $Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN6@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _count$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax]
jge	SHORT $LN4@FT_Raccess
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _ref$[ebp]
mov	ecx, DWORD PTR _rdata_pos$[ebp]
add	ecx, DWORD PTR [eax+edx*8+4]
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _offsets_internal$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN5@FT_Raccess
mov	ecx, DWORD PTR _offsets$[ebp]
mov	edx, DWORD PTR _offsets_internal$[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _ref$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _ref$[ebp], 0
xor	edx, edx
jne	SHORT $Exit$58
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN53@FT_Raccess
jmp	$LN45@FT_Raccess
push	OFFSET $SG12638
push	254					
push	1
call	_FT_Throw
add	esp, 12					
or	eax, 1
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN57@FT_Raccess
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN56@FT_Raccess
DD	-8					
DD	4
DD	$LN55@FT_Raccess
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Raccess_Get_HeaderInfo PROC
push	ebp
mov	ebp, esp
sub	esp, 88					
push	edi
lea	edi, DWORD PTR [ebp-88]
mov	ecx, 22					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _rfork_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
push	16					
lea	eax, DWORD PTR _head$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
mov	edx, 1
imul	eax, edx, 0
movzx	ecx, BYTE PTR _head$[ebp+eax]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
movzx	eax, BYTE PTR _head$[ebp+edx]
shl	eax, 16					
or	ecx, eax
mov	edx, 1
shl	edx, 1
movzx	eax, BYTE PTR _head$[ebp+edx]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
movzx	edx, BYTE PTR _head$[ebp+eax]
or	ecx, edx
add	ecx, DWORD PTR _rfork_offset$[ebp]
mov	eax, DWORD PTR _rdata_pos$[ebp]
mov	DWORD PTR [eax], ecx
mov	ecx, 1
shl	ecx, 2
movzx	edx, BYTE PTR _head$[ebp+ecx]
shl	edx, 24					
mov	eax, 1
imul	ecx, eax, 5
movzx	eax, BYTE PTR _head$[ebp+ecx]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
imul	eax, ecx, 6
movzx	ecx, BYTE PTR _head$[ebp+eax]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 7
movzx	eax, BYTE PTR _head$[ebp+ecx]
or	edx, eax
add	edx, DWORD PTR _rfork_offset$[ebp]
mov	DWORD PTR _map_pos$[ebp], edx
mov	ecx, 1
shl	ecx, 3
movzx	edx, BYTE PTR _head$[ebp+ecx]
shl	edx, 24					
mov	eax, 1
imul	ecx, eax, 9
movzx	eax, BYTE PTR _head$[ebp+ecx]
shl	eax, 16					
or	edx, eax
mov	ecx, 1
imul	eax, ecx, 10
movzx	ecx, BYTE PTR _head$[ebp+eax]
shl	ecx, 8
or	edx, ecx
mov	eax, 1
imul	ecx, eax, 11
movzx	eax, BYTE PTR _head$[ebp+ecx]
or	edx, eax
mov	DWORD PTR _rdata_len$[ebp], edx
mov	ecx, DWORD PTR _rdata_pos$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, DWORD PTR _rdata_len$[ebp]
cmp	edx, DWORD PTR _map_pos$[ebp]
jne	SHORT $LN12@FT_Raccess
mov	eax, DWORD PTR _map_pos$[ebp]
cmp	eax, DWORD PTR _rfork_offset$[ebp]
jne	SHORT $LN13@FT_Raccess
push	OFFSET $SG12499
push	90					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	$LN16@FT_Raccess
mov	ecx, DWORD PTR _map_pos$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
mov	eax, 1
imul	ecx, eax, 15
movzx	edx, BYTE PTR _head$[ebp+ecx]
add	edx, 1
mov	eax, 1
imul	ecx, eax, 15
mov	BYTE PTR _head2$[ebp+ecx], dl
push	16					
lea	edx, DWORD PTR _head2$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@FT_Raccess
mov	DWORD PTR _allzeros$[ebp], 1
mov	DWORD PTR _allmatch$[ebp], 1
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN9@FT_Raccess
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _i$[ebp], 16			
jge	SHORT $LN7@FT_Raccess
mov	edx, DWORD PTR _i$[ebp]
movzx	eax, BYTE PTR _head2$[ebp+edx]
test	eax, eax
je	SHORT $LN6@FT_Raccess
mov	DWORD PTR _allzeros$[ebp], 0
mov	ecx, DWORD PTR _i$[ebp]
movzx	edx, BYTE PTR _head2$[ebp+ecx]
mov	eax, DWORD PTR _i$[ebp]
movzx	ecx, BYTE PTR _head$[ebp+eax]
cmp	edx, ecx
je	SHORT $LN5@FT_Raccess
mov	DWORD PTR _allmatch$[ebp], 0
jmp	SHORT $LN8@FT_Raccess
cmp	DWORD PTR _allzeros$[ebp], 0
jne	SHORT $LN4@FT_Raccess
cmp	DWORD PTR _allmatch$[ebp], 0
jne	SHORT $LN4@FT_Raccess
push	OFFSET $SG12510
push	112					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	SHORT $LN16@FT_Raccess
push	8
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _type_list$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN16@FT_Raccess
cmp	DWORD PTR _type_list$[ebp], -1
jne	SHORT $LN2@FT_Raccess
push	OFFSET $SG12516
push	125					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
jmp	SHORT $LN16@FT_Raccess
mov	eax, DWORD PTR _map_pos$[ebp]
add	eax, DWORD PTR _type_list$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_Raccess
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN16@FT_Raccess
mov	edx, DWORD PTR _map_pos$[ebp]
add	edx, DWORD PTR _type_list$[ebp]
mov	eax, DWORD PTR _map_offset$[ebp]
mov	DWORD PTR [eax], edx
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@FT_Raccess
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 88					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	3
DD	$LN21@FT_Raccess
DD	-12					
DD	4
DD	$LN18@FT_Raccess
DD	-36					
DD	16					
DD	$LN19@FT_Raccess
DD	-60					
DD	16					
DD	$LN20@FT_Raccess
DB	104					
DB	101					
DB	97					
DB	100					
DB	50					
DB	0
DB	104					
DB	101					
DB	97					
DB	100					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Raccess_Guess PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN6@FT_Raccess
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _i$[ebp], 9
jge	$LN7@FT_Raccess
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _new_names$[ebp]
mov	DWORD PTR [edx+ecx*4], 0
cmp	DWORD PTR _stream$[ebp], 0
je	SHORT $LN3@FT_Raccess
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _errors$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN2@FT_Raccess
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _errors$[ebp]
mov	DWORD PTR [ecx+eax*4], 0
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _errors$[ebp]
cmp	DWORD PTR [eax+edx*4], 0
je	SHORT $LN1@FT_Raccess
jmp	SHORT $LN5@FT_Raccess
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _offsets$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _new_names$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _base_name$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _ft_raccess_guess_table[ecx*8]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _errors$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	$LN5@FT_Raccess
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_validator_error PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _valid$[ebp]
mov	DWORD PTR _jump_buffer$[ebp], eax
mov	ecx, DWORD PTR _valid$[ebp]
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx+76], edx
mov	esi, esp
push	1
mov	eax, DWORD PTR _jump_buffer$[ebp]
push	eax
call	DWORD PTR __imp__longjmp
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_validator_run PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _valid$[ebp]
mov	DWORD PTR _valid$[ebp], eax
or	eax, -1
pop	ebp
ret	0
ENDP
_ft_validator_init PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _valid$[ebp]
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax+64], ecx
mov	edx, DWORD PTR _valid$[ebp]
mov	eax, DWORD PTR _limit$[ebp]
mov	DWORD PTR [edx+68], eax
mov	ecx, DWORD PTR _valid$[ebp]
mov	edx, DWORD PTR _level$[ebp]
mov	DWORD PTR [ecx+72], edx
mov	eax, DWORD PTR _valid$[ebp]
mov	DWORD PTR [eax+76], 0
pop	ebp
ret	0
ENDP
_FT_Outline_Get_Orientation PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _area$[ebp], 0
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN13@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
test	ecx, ecx
jg	SHORT $LN14@FT_Outline
xor	eax, eax
jmp	$LN15@FT_Outline
lea	edx, DWORD PTR _cbox$[ebp]
push	edx
mov	eax, DWORD PTR _outline$[ebp]
push	eax
call	_FT_Outline_Get_CBox
add	esp, 8
mov	ecx, DWORD PTR _cbox$[ebp]
cmp	ecx, DWORD PTR _cbox$[ebp+8]
je	SHORT $LN11@FT_Outline
mov	edx, DWORD PTR _cbox$[ebp+4]
cmp	edx, DWORD PTR _cbox$[ebp+12]
jne	SHORT $LN12@FT_Outline
mov	eax, 2
jmp	$LN15@FT_Outline
cmp	DWORD PTR _cbox$[ebp+8], 0
jge	SHORT $LN17@FT_Outline
mov	eax, DWORD PTR _cbox$[ebp+8]
neg	eax
mov	DWORD PTR tv75[ebp], eax
jmp	SHORT $LN18@FT_Outline
mov	ecx, DWORD PTR _cbox$[ebp+8]
mov	DWORD PTR tv75[ebp], ecx
cmp	DWORD PTR _cbox$[ebp], 0
jge	SHORT $LN19@FT_Outline
mov	edx, DWORD PTR _cbox$[ebp]
neg	edx
mov	DWORD PTR tv78[ebp], edx
jmp	SHORT $LN20@FT_Outline
mov	eax, DWORD PTR _cbox$[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR tv75[ebp]
or	ecx, DWORD PTR tv78[ebp]
push	ecx
call	_FT_MSB
add	esp, 4
sub	eax, 14					
mov	DWORD PTR _xshift$[ebp], eax
cmp	DWORD PTR _xshift$[ebp], 0
jle	SHORT $LN21@FT_Outline
mov	edx, DWORD PTR _xshift$[ebp]
mov	DWORD PTR tv83[ebp], edx
jmp	SHORT $LN22@FT_Outline
mov	DWORD PTR tv83[ebp], 0
mov	eax, DWORD PTR tv83[ebp]
mov	DWORD PTR _xshift$[ebp], eax
mov	ecx, DWORD PTR _cbox$[ebp+12]
sub	ecx, DWORD PTR _cbox$[ebp+4]
push	ecx
call	_FT_MSB
add	esp, 4
sub	eax, 14					
mov	DWORD PTR _yshift$[ebp], eax
cmp	DWORD PTR _yshift$[ebp], 0
jle	SHORT $LN23@FT_Outline
mov	edx, DWORD PTR _yshift$[ebp]
mov	DWORD PTR tv89[ebp], edx
jmp	SHORT $LN24@FT_Outline
mov	DWORD PTR tv89[ebp], 0
mov	eax, DWORD PTR tv89[ebp]
mov	DWORD PTR _yshift$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _points$[ebp], edx
mov	DWORD PTR _first$[ebp], 0
mov	DWORD PTR _c$[ebp], 0
jmp	SHORT $LN10@FT_Outline
mov	eax, DWORD PTR _c$[ebp]
add	eax, 1
mov	DWORD PTR _c$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
cmp	DWORD PTR _c$[ebp], edx
jge	$LN8@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR _c$[ebp]
movsx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _last$1[ebp], eax
mov	ecx, DWORD PTR _last$1[ebp]
mov	edx, DWORD PTR _points$[ebp]
mov	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR [edx+ecx*8+4]
mov	DWORD PTR _v_prev$[ebp], eax
mov	DWORD PTR _v_prev$[ebp+4], ecx
mov	edx, DWORD PTR _first$[ebp]
mov	DWORD PTR _n$[ebp], edx
jmp	SHORT $LN7@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR _last$1[ebp]
jg	SHORT $LN5@FT_Outline
mov	edx, DWORD PTR _n$[ebp]
mov	eax, DWORD PTR _points$[ebp]
mov	ecx, DWORD PTR [eax+edx*8]
mov	edx, DWORD PTR [eax+edx*8+4]
mov	DWORD PTR _v_cur$[ebp], ecx
mov	DWORD PTR _v_cur$[ebp+4], edx
mov	eax, DWORD PTR _v_cur$[ebp+4]
sub	eax, DWORD PTR _v_prev$[ebp+4]
mov	ecx, DWORD PTR _yshift$[ebp]
sar	eax, cl
mov	edx, DWORD PTR _v_cur$[ebp]
add	edx, DWORD PTR _v_prev$[ebp]
mov	ecx, DWORD PTR _xshift$[ebp]
sar	edx, cl
imul	eax, edx
add	eax, DWORD PTR _area$[ebp]
mov	DWORD PTR _area$[ebp], eax
mov	eax, DWORD PTR _v_cur$[ebp]
mov	DWORD PTR _v_prev$[ebp], eax
mov	ecx, DWORD PTR _v_cur$[ebp+4]
mov	DWORD PTR _v_prev$[ebp+4], ecx
jmp	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _last$1[ebp]
add	edx, 1
mov	DWORD PTR _first$[ebp], edx
jmp	$LN9@FT_Outline
cmp	DWORD PTR _area$[ebp], 0
jle	SHORT $LN4@FT_Outline
mov	eax, 1
jmp	SHORT $LN15@FT_Outline
jmp	SHORT $LN15@FT_Outline
cmp	DWORD PTR _area$[ebp], 0
jge	SHORT $LN2@FT_Outline
xor	eax, eax
jmp	SHORT $LN15@FT_Outline
jmp	SHORT $LN15@FT_Outline
mov	eax, 2
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN29@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	3
DD	$LN28@FT_Outline
DD	-24					
DD	16					
DD	$LN25@FT_Outline
DD	-52					
DD	8
DD	$LN26@FT_Outline
DD	-68					
DD	8
DD	$LN27@FT_Outline
DB	118					
DB	95					
DB	99					
DB	117					
DB	114					
DB	0
DB	118					
DB	95					
DB	112					
DB	114					
DB	101					
DB	118					
DB	0
DB	99					
DB	98					
DB	111					
DB	120					
DB	0
ENDP
_FT_Outline_Render PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	BYTE PTR _update$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN8@FT_Outline
push	OFFSET $SG12344
push	621					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN9@FT_Outline
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN7@FT_Outline
push	OFFSET $SG12346
push	624					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN9@FT_Outline
cmp	DWORD PTR _params$[ebp], 0
jne	SHORT $LN6@FT_Outline
push	OFFSET $SG12348
push	627					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN9@FT_Outline
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR _renderer$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+148]
mov	DWORD PTR _node$[ebp], eax
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	DWORD PTR _error$[ebp], 19		
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN4@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _renderer$[ebp]
mov	edx, DWORD PTR [ecx+52]
push	edx
mov	eax, DWORD PTR _renderer$[ebp]
mov	ecx, DWORD PTR [eax+56]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_Outline
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 19					
je	SHORT $LN3@FT_Outline
jmp	SHORT $LN4@FT_Outline
lea	eax, DWORD PTR _node$[ebp]
push	eax
push	1869968492				
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	BYTE PTR _update$[ebp], 1
jmp	SHORT $LN5@FT_Outline
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Outline
movzx	edx, BYTE PTR _update$[ebp]
test	edx, edx
je	SHORT $LN1@FT_Outline
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN1@FT_Outline
push	0
push	0
mov	eax, DWORD PTR _renderer$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Set_Renderer
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN12@FT_Outline
DD	-20					
DD	4
DD	$LN11@FT_Outline
DB	110					
DB	111					
DB	100					
DB	101					
DB	0
ENDP
_FT_Outline_Get_Bitmap PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _abitmap$[ebp], 0
jne	SHORT $LN3@FT_Outline
push	OFFSET $SG12365
push	672					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN4@FT_Outline
mov	eax, DWORD PTR _abitmap$[ebp]
mov	DWORD PTR _params$[ebp], eax
mov	DWORD PTR _params$[ebp+8], 0
mov	ecx, DWORD PTR _abitmap$[ebp]
movzx	edx, BYTE PTR [ecx+18]
cmp	edx, 2
je	SHORT $LN1@FT_Outline
mov	eax, DWORD PTR _abitmap$[ebp]
movzx	ecx, BYTE PTR [eax+18]
cmp	ecx, 5
je	SHORT $LN1@FT_Outline
mov	edx, DWORD PTR _abitmap$[ebp]
movzx	eax, BYTE PTR [edx+18]
cmp	eax, 6
jne	SHORT $LN2@FT_Outline
mov	ecx, DWORD PTR _params$[ebp+8]
or	ecx, 1
mov	DWORD PTR _params$[ebp+8], ecx
lea	edx, DWORD PTR _params$[ebp]
push	edx
mov	eax, DWORD PTR _outline$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Outline_Render
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN7@FT_Outline
DD	-56					
DD	48					
DD	$LN6@FT_Outline
DB	112					
DB	97					
DB	114					
DB	97					
DB	109					
DB	115					
DB	0
ENDP
_FT_Outline_Reverse PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN8@FT_Outline
jmp	$LN9@FT_Outline
mov	DWORD PTR _first$[ebp], 0
xor	eax, eax
mov	WORD PTR _n$[ebp], ax
jmp	SHORT $LN7@FT_Outline
mov	cx, WORD PTR _n$[ebp]
add	cx, 1
mov	WORD PTR _n$[ebp], cx
movzx	edx, WORD PTR _n$[ebp]
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax]
cmp	edx, ecx
jge	$LN5@FT_Outline
movzx	edx, WORD PTR _n$[ebp]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+edx*2]
mov	DWORD PTR _last$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _p$6[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _last$[ebp]
lea	ecx, DWORD PTR [edx+eax*8]
mov	DWORD PTR _q$5[ebp], ecx
mov	edx, DWORD PTR _p$6[ebp]
cmp	edx, DWORD PTR _q$5[ebp]
jae	SHORT $LN3@FT_Outline
mov	eax, DWORD PTR _p$6[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _swap$4[ebp], ecx
mov	DWORD PTR _swap$4[ebp+4], edx
mov	eax, DWORD PTR _q$5[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _p$6[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _q$5[ebp]
mov	edx, DWORD PTR _swap$4[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _swap$4[ebp+4]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _p$6[ebp]
add	ecx, 8
mov	DWORD PTR _p$6[ebp], ecx
mov	edx, DWORD PTR _q$5[ebp]
sub	edx, 8
mov	DWORD PTR _q$5[ebp], edx
jmp	SHORT $LN4@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _first$[ebp]
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, DWORD PTR _last$[ebp]
mov	DWORD PTR _q$2[ebp], eax
mov	ecx, DWORD PTR _p$3[ebp]
cmp	ecx, DWORD PTR _q$2[ebp]
jae	SHORT $LN1@FT_Outline
mov	edx, DWORD PTR _p$3[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR _swap$1[ebp], al
mov	ecx, DWORD PTR _p$3[ebp]
mov	edx, DWORD PTR _q$2[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR [ecx], al
mov	ecx, DWORD PTR _q$2[ebp]
mov	dl, BYTE PTR _swap$1[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _p$3[ebp]
add	eax, 1
mov	DWORD PTR _p$3[ebp], eax
mov	ecx, DWORD PTR _q$2[ebp]
sub	ecx, 1
mov	DWORD PTR _q$2[ebp], ecx
jmp	SHORT $LN2@FT_Outline
mov	edx, DWORD PTR _last$[ebp]
add	edx, 1
mov	DWORD PTR _first$[ebp], edx
jmp	$LN6@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+16]
xor	ecx, 4
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [edx+16], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN12@FT_Outline
DD	-32					
DD	8
DD	$LN11@FT_Outline
DB	115					
DB	119					
DB	97					
DB	112					
DB	0
ENDP
_FT_Outline_EmboldenXY PROC
push	ebp
mov	ebp, esp
sub	esp, 160				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-160]
mov	ecx, 40					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN24@FT_Outline
push	OFFSET $SG12411
push	923					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN25@FT_Outline
mov	eax, DWORD PTR _xstrength$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _xstrength$[ebp], eax
mov	eax, DWORD PTR _ystrength$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _ystrength$[ebp], eax
cmp	DWORD PTR _xstrength$[ebp], 0
jne	SHORT $LN23@FT_Outline
cmp	DWORD PTR _ystrength$[ebp], 0
jne	SHORT $LN23@FT_Outline
xor	eax, eax
jmp	$LN25@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
push	eax
call	_FT_Outline_Get_Orientation
add	esp, 4
mov	DWORD PTR _orientation$[ebp], eax
cmp	DWORD PTR _orientation$[ebp], 2
jne	SHORT $LN22@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
test	edx, edx
je	SHORT $LN21@FT_Outline
push	OFFSET $SG12415
push	934					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN25@FT_Outline
jmp	SHORT $LN22@FT_Outline
xor	eax, eax
jmp	$LN25@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _points$[ebp], ecx
mov	DWORD PTR _first$[ebp], 0
mov	DWORD PTR _c$[ebp], 0
jmp	SHORT $LN19@FT_Outline
mov	edx, DWORD PTR _c$[ebp]
add	edx, 1
mov	DWORD PTR _c$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax]
cmp	DWORD PTR _c$[ebp], ecx
jge	$LN17@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR _c$[ebp]
movsx	edx, WORD PTR [eax+ecx*2]
mov	DWORD PTR _last$1[ebp], edx
mov	eax, DWORD PTR _first$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	edx, DWORD PTR [ecx+eax*8]
mov	eax, DWORD PTR [ecx+eax*8+4]
mov	DWORD PTR _v_first$[ebp], edx
mov	DWORD PTR _v_first$[ebp+4], eax
mov	ecx, DWORD PTR _last$1[ebp]
mov	edx, DWORD PTR _points$[ebp]
mov	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR [edx+ecx*8+4]
mov	DWORD PTR _v_prev$[ebp], eax
mov	DWORD PTR _v_prev$[ebp+4], ecx
mov	edx, DWORD PTR _v_first$[ebp]
mov	DWORD PTR _v_cur$[ebp], edx
mov	eax, DWORD PTR _v_first$[ebp+4]
mov	DWORD PTR _v_cur$[ebp+4], eax
mov	ecx, DWORD PTR _v_cur$[ebp]
sub	ecx, DWORD PTR _v_prev$[ebp]
mov	DWORD PTR _in$9[ebp], ecx
mov	edx, DWORD PTR _v_cur$[ebp+4]
sub	edx, DWORD PTR _v_prev$[ebp+4]
mov	DWORD PTR _in$9[ebp+4], edx
lea	eax, DWORD PTR _in$9[ebp]
push	eax
call	_FT_Vector_Length
add	esp, 4
mov	DWORD PTR _l_in$6[ebp], eax
cmp	DWORD PTR _l_in$6[ebp], 0
je	SHORT $LN16@FT_Outline
mov	ecx, DWORD PTR _l_in$6[ebp]
push	ecx
mov	edx, DWORD PTR _in$9[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _in$9[ebp], eax
mov	eax, DWORD PTR _l_in$6[ebp]
push	eax
mov	ecx, DWORD PTR _in$9[ebp+4]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _in$9[ebp+4], eax
mov	edx, DWORD PTR _first$[ebp]
mov	DWORD PTR _n$[ebp], edx
jmp	SHORT $LN15@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR _last$1[ebp]
jg	$LN13@FT_Outline
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _last$1[ebp]
jge	SHORT $LN12@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+8]
mov	eax, DWORD PTR [ecx+eax*8+12]
mov	DWORD PTR _v_next$[ebp], edx
mov	DWORD PTR _v_next$[ebp+4], eax
jmp	SHORT $LN11@FT_Outline
mov	ecx, DWORD PTR _v_first$[ebp]
mov	DWORD PTR _v_next$[ebp], ecx
mov	edx, DWORD PTR _v_first$[ebp+4]
mov	DWORD PTR _v_next$[ebp+4], edx
mov	eax, DWORD PTR _v_next$[ebp]
sub	eax, DWORD PTR _v_cur$[ebp]
mov	DWORD PTR _out$8[ebp], eax
mov	ecx, DWORD PTR _v_next$[ebp+4]
sub	ecx, DWORD PTR _v_cur$[ebp+4]
mov	DWORD PTR _out$8[ebp+4], ecx
lea	edx, DWORD PTR _out$8[ebp]
push	edx
call	_FT_Vector_Length
add	esp, 4
mov	DWORD PTR _l_out$5[ebp], eax
cmp	DWORD PTR _l_out$5[ebp], 0
je	SHORT $LN10@FT_Outline
mov	eax, DWORD PTR _l_out$5[ebp]
push	eax
mov	ecx, DWORD PTR _out$8[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _out$8[ebp], eax
mov	edx, DWORD PTR _l_out$5[ebp]
push	edx
mov	eax, DWORD PTR _out$8[ebp+4]
push	eax
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _out$8[ebp+4], eax
mov	ecx, DWORD PTR _out$8[ebp]
push	ecx
mov	edx, DWORD PTR _in$9[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _out$8[ebp+4]
push	eax
mov	ecx, DWORD PTR _in$9[ebp+4]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _d$2[ebp], esi
cmp	DWORD PTR _d$2[ebp], -61440		
jle	$LN9@FT_Outline
mov	edx, DWORD PTR _d$2[ebp]
add	edx, 65536				
mov	DWORD PTR _d$2[ebp], edx
mov	eax, DWORD PTR _in$9[ebp+4]
add	eax, DWORD PTR _out$8[ebp+4]
mov	DWORD PTR _shift$7[ebp], eax
mov	ecx, DWORD PTR _in$9[ebp]
add	ecx, DWORD PTR _out$8[ebp]
mov	DWORD PTR _shift$7[ebp+4], ecx
cmp	DWORD PTR _orientation$[ebp], 0
jne	SHORT $LN8@FT_Outline
mov	edx, DWORD PTR _shift$7[ebp]
neg	edx
mov	DWORD PTR _shift$7[ebp], edx
jmp	SHORT $LN7@FT_Outline
mov	eax, DWORD PTR _shift$7[ebp+4]
neg	eax
mov	DWORD PTR _shift$7[ebp+4], eax
mov	ecx, DWORD PTR _in$9[ebp+4]
push	ecx
mov	edx, DWORD PTR _out$8[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _in$9[ebp]
push	eax
mov	ecx, DWORD PTR _out$8[ebp+4]
push	ecx
call	_FT_MulFix
add	esp, 8
sub	esi, eax
mov	DWORD PTR _q$3[ebp], esi
cmp	DWORD PTR _orientation$[ebp], 0
jne	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _q$3[ebp]
neg	edx
mov	DWORD PTR _q$3[ebp], edx
mov	eax, DWORD PTR _l_in$6[ebp]
cmp	eax, DWORD PTR _l_out$5[ebp]
jge	SHORT $LN27@FT_Outline
mov	ecx, DWORD PTR _l_in$6[ebp]
mov	DWORD PTR tv217[ebp], ecx
jmp	SHORT $LN28@FT_Outline
mov	edx, DWORD PTR _l_out$5[ebp]
mov	DWORD PTR tv217[ebp], edx
mov	eax, DWORD PTR tv217[ebp]
mov	DWORD PTR _l$4[ebp], eax
mov	ecx, DWORD PTR _q$3[ebp]
push	ecx
mov	edx, DWORD PTR _xstrength$[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _l$4[ebp]
push	eax
mov	ecx, DWORD PTR _d$2[ebp]
push	ecx
call	_FT_MulFix
add	esp, 8
cmp	esi, eax
jg	SHORT $LN5@FT_Outline
mov	edx, DWORD PTR _d$2[ebp]
push	edx
mov	eax, DWORD PTR _xstrength$[ebp]
push	eax
mov	ecx, DWORD PTR _shift$7[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp], eax
jmp	SHORT $LN4@FT_Outline
mov	edx, DWORD PTR _q$3[ebp]
push	edx
mov	eax, DWORD PTR _l$4[ebp]
push	eax
mov	ecx, DWORD PTR _shift$7[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp], eax
mov	edx, DWORD PTR _q$3[ebp]
push	edx
mov	eax, DWORD PTR _ystrength$[ebp]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _l$4[ebp]
push	ecx
mov	edx, DWORD PTR _d$2[ebp]
push	edx
call	_FT_MulFix
add	esp, 8
cmp	esi, eax
jg	SHORT $LN3@FT_Outline
mov	eax, DWORD PTR _d$2[ebp]
push	eax
mov	ecx, DWORD PTR _ystrength$[ebp]
push	ecx
mov	edx, DWORD PTR _shift$7[ebp+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp+4], eax
jmp	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _q$3[ebp]
push	eax
mov	ecx, DWORD PTR _l$4[ebp]
push	ecx
mov	edx, DWORD PTR _shift$7[ebp+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _shift$7[ebp+4], eax
jmp	SHORT $LN1@FT_Outline
mov	DWORD PTR _shift$7[ebp+4], 0
mov	eax, DWORD PTR _shift$7[ebp+4]
mov	DWORD PTR _shift$7[ebp], eax
mov	ecx, DWORD PTR _v_cur$[ebp]
add	ecx, DWORD PTR _xstrength$[ebp]
add	ecx, DWORD PTR _shift$7[ebp]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _n$[ebp]
mov	DWORD PTR [eax+edx*8], ecx
mov	eax, DWORD PTR _v_cur$[ebp+4]
add	eax, DWORD PTR _ystrength$[ebp]
add	eax, DWORD PTR _shift$7[ebp+4]
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _n$[ebp]
mov	DWORD PTR [edx+ecx*8+4], eax
mov	edx, DWORD PTR _out$8[ebp]
mov	DWORD PTR _in$9[ebp], edx
mov	eax, DWORD PTR _out$8[ebp+4]
mov	DWORD PTR _in$9[ebp+4], eax
mov	ecx, DWORD PTR _l_out$5[ebp]
mov	DWORD PTR _l_in$6[ebp], ecx
mov	edx, DWORD PTR _v_next$[ebp]
mov	DWORD PTR _v_cur$[ebp], edx
mov	eax, DWORD PTR _v_next$[ebp+4]
mov	DWORD PTR _v_cur$[ebp+4], eax
jmp	$LN14@FT_Outline
mov	ecx, DWORD PTR _last$1[ebp]
add	ecx, 1
mov	DWORD PTR _first$[ebp], ecx
jmp	$LN18@FT_Outline
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN37@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 160				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	7
DD	$LN36@FT_Outline
DD	-16					
DD	8
DD	$LN29@FT_Outline
DD	-32					
DD	8
DD	$LN30@FT_Outline
DD	-48					
DD	8
DD	$LN31@FT_Outline
DD	-64					
DD	8
DD	$LN32@FT_Outline
DD	-96					
DD	8
DD	$LN33@FT_Outline
DD	-112					
DD	8
DD	$LN34@FT_Outline
DD	-128					
DD	8
DD	$LN35@FT_Outline
DB	115					
DB	104					
DB	105					
DB	102					
DB	116					
DB	0
DB	111					
DB	117					
DB	116					
DB	0
DB	105					
DB	110					
DB	0
DB	118					
DB	95					
DB	99					
DB	117					
DB	114					
DB	0
DB	118					
DB	95					
DB	110					
DB	101					
DB	120					
DB	116					
DB	0
DB	118					
DB	95					
DB	102					
DB	105					
DB	114					
DB	115					
DB	116					
DB	0
DB	118					
DB	95					
DB	112					
DB	114					
DB	101					
DB	118					
DB	0
ENDP
_FT_Outline_Embolden PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _strength$[ebp]
push	eax
mov	ecx, DWORD PTR _strength$[ebp]
push	ecx
mov	edx, DWORD PTR _outline$[ebp]
push	edx
call	_FT_Outline_EmboldenXY
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_Transform PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN4@FT_Outline
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN5@FT_Outline
jmp	SHORT $LN6@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _vec$[ebp]
lea	edx, DWORD PTR [ecx+eax*8]
mov	DWORD PTR _limit$[ebp], edx
jmp	SHORT $LN3@FT_Outline
mov	eax, DWORD PTR _vec$[ebp]
add	eax, 8
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _vec$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jae	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _matrix$[ebp]
push	edx
mov	eax, DWORD PTR _vec$[ebp]
push	eax
call	_FT_Vector_Transform
add	esp, 8
jmp	SHORT $LN2@FT_Outline
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Copy PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _source$[ebp], 0
je	SHORT $LN4@FT_Outline
cmp	DWORD PTR _target$[ebp], 0
jne	SHORT $LN5@FT_Outline
push	OFFSET $SG12240
push	408					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN6@FT_Outline
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _target$[ebp]
movsx	eax, WORD PTR [edx+2]
cmp	ecx, eax
jne	SHORT $LN2@FT_Outline
mov	ecx, DWORD PTR _source$[ebp]
movsx	edx, WORD PTR [ecx]
mov	eax, DWORD PTR _target$[ebp]
movsx	ecx, WORD PTR [eax]
cmp	edx, ecx
je	SHORT $LN3@FT_Outline
push	OFFSET $SG12243
push	412					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN6@FT_Outline
mov	edx, DWORD PTR _source$[ebp]
cmp	edx, DWORD PTR _target$[ebp]
jne	SHORT $LN1@FT_Outline
xor	eax, eax
jmp	$LN6@FT_Outline
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+2]
shl	ecx, 3
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+2]
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax]
shl	ecx, 1
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _target$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
mov	DWORD PTR _is_owner$[ebp], ecx
mov	edx, DWORD PTR _target$[ebp]
mov	eax, DWORD PTR _source$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _target$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, -2					
mov	ecx, DWORD PTR _target$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _target$[ebp]
mov	eax, DWORD PTR [edx+16]
or	eax, DWORD PTR _is_owner$[ebp]
mov	ecx, DWORD PTR _target$[ebp]
mov	DWORD PTR [ecx+16], eax
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Translate PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN4@FT_Outline
jmp	SHORT $LN5@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$[ebp], ecx
xor	edx, edx
mov	WORD PTR _n$[ebp], dx
jmp	SHORT $LN3@FT_Outline
mov	ax, WORD PTR _n$[ebp]
add	ax, 1
mov	WORD PTR _n$[ebp], ax
movzx	ecx, WORD PTR _n$[ebp]
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
cmp	ecx, eax
jge	SHORT $LN5@FT_Outline
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, DWORD PTR _xOffset$[ebp]
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx+4]
add	edx, DWORD PTR _yOffset$[ebp]
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _vec$[ebp]
add	ecx, 8
mov	DWORD PTR _vec$[ebp], ecx
jmp	SHORT $LN2@FT_Outline
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Get_CBox PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _outline$[ebp], 0
je	$LN11@FT_Outline
cmp	DWORD PTR _acbox$[ebp], 0
je	$LN11@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
test	ecx, ecx
jne	SHORT $LN9@FT_Outline
mov	DWORD PTR _xMin$[ebp], 0
mov	DWORD PTR _yMin$[ebp], 0
mov	DWORD PTR _xMax$[ebp], 0
mov	DWORD PTR _yMax$[ebp], 0
jmp	$LN8@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _vec$4[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _vec$4[ebp]
lea	ecx, DWORD PTR [eax+edx*8]
mov	DWORD PTR _limit$3[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _xMax$[ebp], eax
mov	ecx, DWORD PTR _xMax$[ebp]
mov	DWORD PTR _xMin$[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _yMax$[ebp], eax
mov	ecx, DWORD PTR _yMax$[ebp]
mov	DWORD PTR _yMin$[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
add	edx, 8
mov	DWORD PTR _vec$4[ebp], edx
jmp	SHORT $LN7@FT_Outline
mov	eax, DWORD PTR _vec$4[ebp]
add	eax, 8
mov	DWORD PTR _vec$4[ebp], eax
mov	ecx, DWORD PTR _vec$4[ebp]
cmp	ecx, DWORD PTR _limit$3[ebp]
jae	SHORT $LN8@FT_Outline
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _x$2[ebp], eax
mov	ecx, DWORD PTR _x$2[ebp]
cmp	ecx, DWORD PTR _xMin$[ebp]
jge	SHORT $LN4@FT_Outline
mov	edx, DWORD PTR _x$2[ebp]
mov	DWORD PTR _xMin$[ebp], edx
mov	eax, DWORD PTR _x$2[ebp]
cmp	eax, DWORD PTR _xMax$[ebp]
jle	SHORT $LN3@FT_Outline
mov	ecx, DWORD PTR _x$2[ebp]
mov	DWORD PTR _xMax$[ebp], ecx
mov	edx, DWORD PTR _vec$4[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$1[ebp], eax
mov	ecx, DWORD PTR _y$1[ebp]
cmp	ecx, DWORD PTR _yMin$[ebp]
jge	SHORT $LN2@FT_Outline
mov	edx, DWORD PTR _y$1[ebp]
mov	DWORD PTR _yMin$[ebp], edx
mov	eax, DWORD PTR _y$1[ebp]
cmp	eax, DWORD PTR _yMax$[ebp]
jle	SHORT $LN1@FT_Outline
mov	ecx, DWORD PTR _y$1[ebp]
mov	DWORD PTR _yMax$[ebp], ecx
jmp	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _acbox$[ebp]
mov	eax, DWORD PTR _xMin$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _acbox$[ebp]
mov	edx, DWORD PTR _xMax$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _acbox$[ebp]
mov	ecx, DWORD PTR _yMin$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _acbox$[ebp]
mov	eax, DWORD PTR _yMax$[ebp]
mov	DWORD PTR [edx+12], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Check PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _outline$[ebp], 0
je	$Bad$13
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	DWORD PTR _n_points$5[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
mov	DWORD PTR _n_contours$4[ebp], eax
cmp	DWORD PTR _n_points$5[ebp], 0
jne	SHORT $LN9@FT_Outline
cmp	DWORD PTR _n_contours$4[ebp], 0
jne	SHORT $LN9@FT_Outline
xor	eax, eax
jmp	$LN11@FT_Outline
cmp	DWORD PTR _n_points$5[ebp], 0
jle	SHORT $LN7@FT_Outline
cmp	DWORD PTR _n_contours$4[ebp], 0
jg	SHORT $LN8@FT_Outline
jmp	SHORT $Bad$13
mov	DWORD PTR _end$2[ebp], -1
mov	ecx, DWORD PTR _end$2[ebp]
mov	DWORD PTR _end0$3[ebp], ecx
mov	DWORD PTR _n$1[ebp], 0
jmp	SHORT $LN6@FT_Outline
mov	edx, DWORD PTR _n$1[ebp]
add	edx, 1
mov	DWORD PTR _n$1[ebp], edx
mov	eax, DWORD PTR _n$1[ebp]
cmp	eax, DWORD PTR _n_contours$4[ebp]
jge	SHORT $LN4@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _n$1[ebp]
movsx	ecx, WORD PTR [edx+eax*2]
mov	DWORD PTR _end$2[ebp], ecx
mov	edx, DWORD PTR _end$2[ebp]
cmp	edx, DWORD PTR _end0$3[ebp]
jle	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _end$2[ebp]
cmp	eax, DWORD PTR _n_points$5[ebp]
jl	SHORT $LN3@FT_Outline
jmp	SHORT $Bad$13
mov	ecx, DWORD PTR _end$2[ebp]
mov	DWORD PTR _end0$3[ebp], ecx
jmp	SHORT $LN5@FT_Outline
mov	edx, DWORD PTR _n_points$5[ebp]
sub	edx, 1
cmp	DWORD PTR _end$2[ebp], edx
je	SHORT $LN1@FT_Outline
jmp	SHORT $Bad$13
xor	eax, eax
jmp	SHORT $LN11@FT_Outline
push	OFFSET $SG12231
push	394					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Outline_Done_Internal PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN12@FT_Outline
push	OFFSET $SG12251
push	439					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN13@FT_Outline
cmp	DWORD PTR _memory$[ebp], 0
jne	SHORT $LN11@FT_Outline
push	OFFSET $SG12253
push	442					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN13@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
je	SHORT $LN10@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [edx+4], 0
xor	eax, eax
jne	SHORT $LN9@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [ecx+8], 0
xor	edx, edx
jne	SHORT $LN6@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _outline$[ebp]
mov	DWORD PTR [eax+12], 0
xor	ecx, ecx
jne	SHORT $LN3@FT_Outline
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR _null_outline
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _null_outline+4
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _null_outline+8
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _null_outline+12
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _null_outline+16
mov	DWORD PTR [edx+16], eax
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_Done PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@FT_Outline
push	OFFSET $SG12273
push	465					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_Outline_Done_Internal
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_New_Internal PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _anoutline$[ebp], 0
je	SHORT $LN6@FT_Outline
cmp	DWORD PTR _memory$[ebp], 0
jne	SHORT $LN7@FT_Outline
push	OFFSET $SG12183
push	307					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Outline
mov	eax, DWORD PTR _anoutline$[ebp]
mov	ecx, DWORD PTR _null_outline
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _null_outline+4
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _null_outline+8
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _null_outline+12
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR _null_outline+16
mov	DWORD PTR [eax+16], ecx
cmp	DWORD PTR _numContours$[ebp], 0
jl	SHORT $LN4@FT_Outline
mov	edx, DWORD PTR _numContours$[ebp]
cmp	edx, DWORD PTR _numPoints$[ebp]
jbe	SHORT $LN5@FT_Outline
push	OFFSET $SG12187
push	313					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Outline
cmp	DWORD PTR _numPoints$[ebp], 32767	
jbe	SHORT $LN3@FT_Outline
push	OFFSET $SG12189
push	316					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	$LN8@FT_Outline
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _numPoints$[ebp]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Outline
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _numPoints$[ebp]
push	eax
push	0
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_Outline
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _numContours$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_Outline
jmp	SHORT $Fail$13
mov	edx, DWORD PTR _anoutline$[ebp]
mov	ax, WORD PTR _numPoints$[ebp]
mov	WORD PTR [edx+2], ax
mov	ecx, DWORD PTR _anoutline$[ebp]
mov	dx, WORD PTR _numContours$[ebp]
mov	WORD PTR [ecx], dx
mov	eax, DWORD PTR _anoutline$[ebp]
mov	ecx, DWORD PTR [eax+16]
or	ecx, 1
mov	edx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [edx+16], ecx
xor	eax, eax
jmp	SHORT $LN8@FT_Outline
mov	eax, DWORD PTR _anoutline$[ebp]
mov	ecx, DWORD PTR [eax+16]
or	ecx, 1
mov	edx, DWORD PTR _anoutline$[ebp]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR _anoutline$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_FT_Outline_Done_Internal
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN11@FT_Outline
DD	-8					
DD	4
DD	$LN10@FT_Outline
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Outline_New PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@FT_Outline
push	OFFSET $SG12211
push	346					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN2@FT_Outline
mov	eax, DWORD PTR _anoutline$[ebp]
push	eax
mov	ecx, DWORD PTR _numContours$[ebp]
push	ecx
mov	edx, DWORD PTR _numPoints$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_Outline_New_Internal
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Outline_Decompose PROC
push	ebp
mov	ebp, esp
sub	esp, 188				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-188]
mov	ecx, 47					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN73@FT_Outline
push	OFFSET $SG12071
push	77					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN74@FT_Outline
cmp	DWORD PTR _func_interface$[ebp], 0
jne	SHORT $LN72@FT_Outline
push	OFFSET $SG12073
push	80					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN74@FT_Outline
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _shift$[ebp], ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _delta$[ebp], eax
mov	DWORD PTR _first$[ebp], 0
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN71@FT_Outline
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
cmp	DWORD PTR _n$[ebp], eax
jge	$LN69@FT_Outline
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN65@FT_Outline
mov	edx, DWORD PTR _n$[ebp]
push	edx
push	OFFSET $SG12082
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN68@FT_Outline
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _n$[ebp]
movsx	ecx, WORD PTR [edx+eax*2]
mov	DWORD PTR _last$7[ebp], ecx
cmp	DWORD PTR _last$7[ebp], 0
jge	SHORT $LN64@FT_Outline
jmp	$Invalid_Outline$89
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _last$7[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _limit$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _first$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
mov	DWORD PTR _v_start$[ebp], eax
mov	DWORD PTR _v_start$[ebp+4], ecx
mov	edx, DWORD PTR _v_start$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_start$[ebp], edx
mov	eax, DWORD PTR _v_start$[ebp+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_start$[ebp+4], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _last$7[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
mov	edx, DWORD PTR [edx+eax*8+4]
mov	DWORD PTR _v_last$[ebp], ecx
mov	DWORD PTR _v_last$[ebp+4], edx
mov	eax, DWORD PTR _v_last$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_last$[ebp], eax
mov	edx, DWORD PTR _v_last$[ebp+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_last$[ebp+4], edx
mov	eax, DWORD PTR _v_start$[ebp]
mov	DWORD PTR _v_control$[ebp], eax
mov	ecx, DWORD PTR _v_start$[ebp+4]
mov	DWORD PTR _v_control$[ebp+4], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _first$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _point$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _first$[ebp]
mov	DWORD PTR _tags$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _tags$[ebp]
movsx	edx, BYTE PTR [ecx+eax]
and	edx, 3
mov	DWORD PTR _tag$[ebp], edx
cmp	DWORD PTR _tag$[ebp], 2
jne	SHORT $LN63@FT_Outline
jmp	$Invalid_Outline$89
cmp	DWORD PTR _tag$[ebp], 0
jne	SHORT $LN62@FT_Outline
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _last$7[ebp]
movsx	eax, BYTE PTR [ecx+edx]
and	eax, 3
cmp	eax, 1
jne	SHORT $LN61@FT_Outline
mov	ecx, DWORD PTR _v_last$[ebp]
mov	DWORD PTR _v_start$[ebp], ecx
mov	edx, DWORD PTR _v_last$[ebp+4]
mov	DWORD PTR _v_start$[ebp+4], edx
mov	eax, DWORD PTR _limit$[ebp]
sub	eax, 8
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN60@FT_Outline
mov	eax, DWORD PTR _v_start$[ebp]
add	eax, DWORD PTR _v_last$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_start$[ebp], eax
mov	eax, DWORD PTR _v_start$[ebp+4]
add	eax, DWORD PTR _v_last$[ebp+4]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_start$[ebp+4], eax
mov	ecx, DWORD PTR _point$[ebp]
sub	ecx, 8
mov	DWORD PTR _point$[ebp], ecx
mov	edx, DWORD PTR _tags$[ebp]
sub	edx, 1
mov	DWORD PTR _tags$[ebp], edx
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN56@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12093
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN62@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _v_start$[ebp]
push	eax
mov	ecx, DWORD PTR _func_interface$[ebp]
mov	edx, DWORD PTR [ecx]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN55@FT_Outline
jmp	$Exit$90
mov	eax, DWORD PTR _point$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	$LN53@FT_Outline
mov	ecx, DWORD PTR _point$[ebp]
add	ecx, 8
mov	DWORD PTR _point$[ebp], ecx
mov	edx, DWORD PTR _tags$[ebp]
add	edx, 1
mov	DWORD PTR _tags$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _tags$[ebp]
movsx	eax, BYTE PTR [edx+ecx]
and	eax, 3
mov	DWORD PTR _tag$[ebp], eax
mov	ecx, DWORD PTR _tag$[ebp]
mov	DWORD PTR tv191[ebp], ecx
cmp	DWORD PTR tv191[ebp], 0
je	$LN44@FT_Outline
cmp	DWORD PTR tv191[ebp], 1
je	SHORT $LN50@FT_Outline
jmp	$LN26@FT_Outline
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$6[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$6[ebp+4], edx
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN46@FT_Outline
cvtsi2sd xmm0, DWORD PTR _vec$6[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$6[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12109
call	_FT_Message
add	esp, 20					
xor	ecx, ecx
jne	SHORT $LN49@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _vec$6[ebp]
push	eax
mov	ecx, DWORD PTR _func_interface$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN45@FT_Outline
jmp	$Exit$90
jmp	$LN55@FT_Outline
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_control$[ebp], edx
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _v_control$[ebp+4], edx
mov	eax, DWORD PTR _point$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	$LN43@FT_Outline
mov	ecx, DWORD PTR _point$[ebp]
add	ecx, 8
mov	DWORD PTR _point$[ebp], ecx
mov	edx, DWORD PTR _tags$[ebp]
add	edx, 1
mov	DWORD PTR _tags$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _tags$[ebp]
movsx	eax, BYTE PTR [edx+ecx]
and	eax, 3
mov	DWORD PTR _tag$[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$5[ebp], edx
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$5[ebp+4], edx
cmp	DWORD PTR _tag$[ebp], 1
jne	$LN42@FT_Outline
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN38@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$5[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$5[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12121
call	_FT_Message
add	esp, 36					
xor	ecx, ecx
jne	SHORT $LN41@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _vec$5[ebp]
push	eax
lea	ecx, DWORD PTR _v_control$[ebp]
push	ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN37@FT_Outline
jmp	$Exit$90
jmp	$LN55@FT_Outline
cmp	DWORD PTR _tag$[ebp], 0
je	SHORT $LN36@FT_Outline
jmp	$Invalid_Outline$89
mov	eax, DWORD PTR _v_control$[ebp]
add	eax, DWORD PTR _vec$5[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_middle$4[ebp], eax
mov	eax, DWORD PTR _v_control$[ebp+4]
add	eax, DWORD PTR _vec$5[ebp+4]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _v_middle$4[ebp+4], eax
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN32@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_middle$4[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_middle$4[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12128
call	_FT_Message
add	esp, 36					
xor	edx, edx
jne	SHORT $LN35@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
lea	ecx, DWORD PTR _v_middle$4[ebp]
push	ecx
lea	edx, DWORD PTR _v_control$[ebp]
push	edx
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+8]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@FT_Outline
jmp	$Exit$90
mov	edx, DWORD PTR _vec$5[ebp]
mov	DWORD PTR _v_control$[ebp], edx
mov	eax, DWORD PTR _vec$5[ebp+4]
mov	DWORD PTR _v_control$[ebp+4], eax
jmp	$Do_Conic$91
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN27@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_control$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12134
call	_FT_Message
add	esp, 36					
xor	edx, edx
jne	SHORT $LN43@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
lea	ecx, DWORD PTR _v_start$[ebp]
push	ecx
lea	edx, DWORD PTR _v_control$[ebp]
push	edx
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+8]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	$Close$92
mov	edx, DWORD PTR _point$[ebp]
add	edx, 8
cmp	edx, DWORD PTR _limit$[ebp]
ja	SHORT $LN24@FT_Outline
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _tags$[ebp]
movsx	edx, BYTE PTR [ecx+eax]
and	edx, 3
cmp	edx, 2
je	SHORT $LN25@FT_Outline
jmp	$Invalid_Outline$89
mov	eax, DWORD PTR _point$[ebp]
add	eax, 16					
mov	DWORD PTR _point$[ebp], eax
mov	ecx, DWORD PTR _tags$[ebp]
add	ecx, 2
mov	DWORD PTR _tags$[ebp], ecx
mov	edx, 8
imul	eax, edx, -2
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec1$3[ebp], edx
mov	eax, 8
imul	ecx, eax, -2
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx+ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec1$3[ebp+4], eax
mov	ecx, 8
imul	edx, ecx, -1
mov	eax, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [eax+edx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec2$2[ebp], edx
mov	eax, 8
imul	ecx, eax, -1
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx+ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec2$2[ebp+4], eax
mov	ecx, DWORD PTR _point$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
ja	$LN23@FT_Outline
mov	edx, DWORD PTR _point$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
sub	eax, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$1[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
sub	edx, DWORD PTR _delta$[ebp]
mov	DWORD PTR _vec$1[ebp+4], edx
mov	eax, 4
shl	eax, 3
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	$LN19@FT_Outline
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$1[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec$1[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12147
call	_FT_Message
add	esp, 52					
xor	ecx, ecx
jne	$LN22@FT_Outline
mov	esi, esp
mov	edx, DWORD PTR _user$[ebp]
push	edx
lea	eax, DWORD PTR _vec$1[ebp]
push	eax
lea	ecx, DWORD PTR _vec2$2[ebp]
push	ecx
lea	edx, DWORD PTR _vec1$3[ebp]
push	edx
mov	eax, DWORD PTR _func_interface$[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@FT_Outline
jmp	$Exit$90
jmp	$LN55@FT_Outline
mov	edx, 4
shl	edx, 3
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	$LN14@FT_Outline
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec2$2[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _vec1$3[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12153
call	_FT_Message
add	esp, 52					
xor	eax, eax
jne	$LN23@FT_Outline
mov	esi, esp
mov	ecx, DWORD PTR _user$[ebp]
push	ecx
lea	edx, DWORD PTR _v_start$[ebp]
push	edx
lea	eax, DWORD PTR _vec2$2[ebp]
push	eax
lea	ecx, DWORD PTR _vec1$3[ebp]
push	ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Close$92
jmp	$LN55@FT_Outline
mov	ecx, 4
shl	ecx, 3
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN10@FT_Outline
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp+4]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
cvtsi2sd xmm0, DWORD PTR _v_start$[ebp]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG12158
call	_FT_Message
add	esp, 20					
xor	edx, edx
jne	SHORT $LN53@FT_Outline
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
lea	ecx, DWORD PTR _v_start$[ebp]
push	ecx
mov	edx, DWORD PTR _func_interface$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@FT_Outline
jmp	SHORT $Exit$90
mov	ecx, DWORD PTR _last$7[ebp]
add	ecx, 1
mov	DWORD PTR _first$[ebp], ecx
jmp	$LN70@FT_Outline
mov	edx, 4
shl	edx, 3
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Outline
mov	eax, DWORD PTR _n$[ebp]
push	eax
push	OFFSET $SG12164
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN69@FT_Outline
xor	eax, eax
jmp	SHORT $LN74@FT_Outline
mov	edx, 4
shl	edx, 3
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN1@FT_Outline
mov	eax, DWORD PTR _error$[ebp]
push	eax
push	OFFSET $SG12169
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $Exit$90
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN74@FT_Outline
push	OFFSET $SG12170
push	293					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN88@FT_Outline
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 188				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	9
DD	$LN87@FT_Outline
DD	-12					
DD	8
DD	$LN78@FT_Outline
DD	-28					
DD	8
DD	$LN79@FT_Outline
DD	-44					
DD	8
DD	$LN80@FT_Outline
DD	-100					
DD	8
DD	$LN81@FT_Outline
DD	-116					
DD	8
DD	$LN82@FT_Outline
DD	-132					
DD	8
DD	$LN83@FT_Outline
DD	-148					
DD	8
DD	$LN84@FT_Outline
DD	-164					
DD	8
DD	$LN85@FT_Outline
DD	-180					
DD	8
DD	$LN86@FT_Outline
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	101					
DB	99					
DB	50					
DB	0
DB	118					
DB	101					
DB	99					
DB	49					
DB	0
DB	118					
DB	95					
DB	109					
DB	105					
DB	100					
DB	100					
DB	108					
DB	101					
DB	0
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	95					
DB	115					
DB	116					
DB	97					
DB	114					
DB	116					
DB	0
DB	118					
DB	95					
DB	99					
DB	111					
DB	110					
DB	116					
DB	114					
DB	111					
DB	108					
DB	0
DB	118					
DB	95					
DB	108					
DB	97					
DB	115					
DB	116					
DB	0
ENDP
_FT_List_Finalize PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN7@FT_List_Fi
cmp	DWORD PTR _memory$[ebp], 0
jne	SHORT $LN8@FT_List_Fi
jmp	SHORT $LN9@FT_List_Fi
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN5@FT_List_Fi
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _next$2[ebp], eax
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _data$1[ebp], edx
cmp	DWORD PTR _destroy$[ebp], 0
je	SHORT $LN3@FT_List_Fi
mov	esi, esp
mov	eax, DWORD PTR _user$[ebp]
push	eax
mov	ecx, DWORD PTR _data$1[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	DWORD PTR _destroy$[ebp]
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _cur$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _cur$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_List_Fi
mov	eax, DWORD PTR _next$2[ebp]
mov	DWORD PTR _cur$[ebp], eax
jmp	SHORT $LN6@FT_List_Fi
mov	ecx, DWORD PTR _list$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _list$[ebp]
mov	DWORD PTR [edx+4], 0
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Iterate PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN4@FT_List_It
cmp	DWORD PTR _iterator$[ebp], 0
jne	SHORT $LN5@FT_List_It
push	OFFSET $SG14016
push	388					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN6@FT_List_It
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN2@FT_List_It
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _next$1[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _user$[ebp]
push	ecx
mov	edx, DWORD PTR _cur$[ebp]
push	edx
call	DWORD PTR _iterator$[ebp]
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_List_It
jmp	SHORT $LN2@FT_List_It
mov	eax, DWORD PTR _next$1[ebp]
mov	DWORD PTR _cur$[ebp], eax
jmp	SHORT $LN3@FT_List_It
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Up PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN4@FT_List_Up
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN5@FT_List_Up
jmp	SHORT $LN6@FT_List_Up
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _before$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _after$[ebp], eax
cmp	DWORD PTR _before$[ebp], 0
jne	SHORT $LN3@FT_List_Up
jmp	SHORT $LN6@FT_List_Up
mov	ecx, DWORD PTR _before$[ebp]
mov	edx, DWORD PTR _after$[ebp]
mov	DWORD PTR [ecx+4], edx
cmp	DWORD PTR _after$[ebp], 0
je	SHORT $LN2@FT_List_Up
mov	eax, DWORD PTR _after$[ebp]
mov	ecx, DWORD PTR _before$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN1@FT_List_Up
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR _before$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+4], ecx
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Remove PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN5@FT_List_Re
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN6@FT_List_Re
jmp	SHORT $LN7@FT_List_Re
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _before$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _after$[ebp], eax
cmp	DWORD PTR _before$[ebp], 0
je	SHORT $LN4@FT_List_Re
mov	ecx, DWORD PTR _before$[ebp]
mov	edx, DWORD PTR _after$[ebp]
mov	DWORD PTR [ecx+4], edx
jmp	SHORT $LN3@FT_List_Re
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR _after$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _after$[ebp], 0
je	SHORT $LN2@FT_List_Re
mov	edx, DWORD PTR _after$[ebp]
mov	eax, DWORD PTR _before$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN7@FT_List_Re
mov	ecx, DWORD PTR _list$[ebp]
mov	edx, DWORD PTR _before$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Insert PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN3@FT_List_In
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN4@FT_List_In
jmp	SHORT $LN5@FT_List_In
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _after$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _after$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], 0
cmp	DWORD PTR _after$[ebp], 0
jne	SHORT $LN2@FT_List_In
mov	edx, DWORD PTR _list$[ebp]
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx+4], eax
jmp	SHORT $LN1@FT_List_In
mov	ecx, DWORD PTR _after$[ebp]
mov	edx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Add PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
je	SHORT $LN3@FT_List_Ad
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN4@FT_List_Ad
jmp	SHORT $LN5@FT_List_Ad
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _before$[ebp], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR _before$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _before$[ebp], 0
je	SHORT $LN2@FT_List_Ad
mov	edx, DWORD PTR _before$[ebp]
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [edx+4], eax
jmp	SHORT $LN1@FT_List_Ad
mov	ecx, DWORD PTR _list$[ebp]
mov	edx, DWORD PTR _node$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_List_Find PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _list$[ebp], 0
jne	SHORT $LN4@FT_List_Fi
xor	eax, eax
jmp	SHORT $LN5@FT_List_Fi
mov	eax, DWORD PTR _list$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN2@FT_List_Fi
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR _data$[ebp]
jne	SHORT $LN1@FT_List_Fi
mov	eax, DWORD PTR _cur$[ebp]
jmp	SHORT $LN5@FT_List_Fi
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _cur$[ebp], edx
jmp	SHORT $LN3@FT_List_Fi
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Adjust_Subglyphs PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
mov	edx, DWORD PTR _base$[ebp]
mov	eax, DWORD PTR [edx+28]
shl	eax, 5
mov	ecx, DWORD PTR _base$[ebp]
add	eax, DWORD PTR [ecx+32]
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+32], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Adjust_Points PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+4]
lea	eax, DWORD PTR [edx+eax*8]
mov	ecx, DWORD PTR _current$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _base$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _base$[ebp]
mov	eax, DWORD PTR [edx+12]
lea	ecx, DWORD PTR [eax+ecx*2]
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _loader$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	SHORT $LN2@FT_GlyphLo
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+40]
lea	eax, DWORD PTR [edx+eax*8]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+76], eax
mov	edx, DWORD PTR _base$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+44]
lea	eax, DWORD PTR [edx+eax*8]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+80], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Add64 PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _y$[ebp]
add	ecx, DWORD PTR [edx]
mov	DWORD PTR _lo$[ebp], ecx
mov	eax, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR [eax]
jae	SHORT $LN3@FT_Add64
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN4@FT_Add64
mov	DWORD PTR tv72[ebp], 0
mov	edx, DWORD PTR _x$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _y$[ebp]
add	eax, DWORD PTR [ecx+4]
add	eax, DWORD PTR tv72[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	edx, DWORD PTR _z$[ebp]
mov	eax, DWORD PTR _lo$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _z$[ebp]
mov	edx, DWORD PTR _hi$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_div64by32 PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hi$[ebp]
cmp	eax, DWORD PTR _y$[ebp]
jb	SHORT $LN5@ft_div64by
mov	eax, 2147483647				
jmp	$LN6@ft_div64by
mov	ecx, DWORD PTR _hi$[ebp]
push	ecx
call	_FT_MSB
add	esp, 4
mov	edx, 31					
sub	edx, eax
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _hi$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
shl	eax, cl
mov	ecx, 32					
sub	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _lo$[ebp]
shr	edx, cl
or	eax, edx
mov	DWORD PTR _r$[ebp], eax
mov	eax, DWORD PTR _lo$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
shl	eax, cl
mov	DWORD PTR _lo$[ebp], eax
mov	eax, DWORD PTR _r$[ebp]
xor	edx, edx
div	DWORD PTR _y$[ebp]
mov	DWORD PTR _q$[ebp], eax
mov	ecx, DWORD PTR _q$[ebp]
imul	ecx, DWORD PTR _y$[ebp]
mov	edx, DWORD PTR _r$[ebp]
sub	edx, ecx
mov	DWORD PTR _r$[ebp], edx
mov	eax, 32					
sub	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _q$[ebp]
shl	ecx, 1
mov	DWORD PTR _q$[ebp], ecx
mov	edx, DWORD PTR _r$[ebp]
shl	edx, 1
mov	eax, DWORD PTR _lo$[ebp]
shr	eax, 31					
or	edx, eax
mov	DWORD PTR _r$[ebp], edx
mov	ecx, DWORD PTR _lo$[ebp]
shl	ecx, 1
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _r$[ebp]
cmp	edx, DWORD PTR _y$[ebp]
jb	SHORT $LN3@ft_div64by
mov	eax, DWORD PTR _r$[ebp]
sub	eax, DWORD PTR _y$[ebp]
mov	DWORD PTR _r$[ebp], eax
mov	ecx, DWORD PTR _q$[ebp]
or	ecx, 1
mov	DWORD PTR _q$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _i$[ebp], edx
jne	SHORT $LN4@ft_div64by
mov	eax, DWORD PTR _q$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_multo64 PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _x$[ebp]
and	eax, 65535				
mov	DWORD PTR _lo1$[ebp], eax
mov	ecx, DWORD PTR _x$[ebp]
shr	ecx, 16					
mov	DWORD PTR _hi1$[ebp], ecx
mov	edx, DWORD PTR _y$[ebp]
and	edx, 65535				
mov	DWORD PTR _lo2$[ebp], edx
mov	eax, DWORD PTR _y$[ebp]
shr	eax, 16					
mov	DWORD PTR _hi2$[ebp], eax
mov	ecx, DWORD PTR _lo1$[ebp]
imul	ecx, DWORD PTR _lo2$[ebp]
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _lo1$[ebp]
imul	edx, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _i1$[ebp], edx
mov	eax, DWORD PTR _lo2$[ebp]
imul	eax, DWORD PTR _hi1$[ebp]
mov	DWORD PTR _i2$[ebp], eax
mov	ecx, DWORD PTR _hi1$[ebp]
imul	ecx, DWORD PTR _hi2$[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
add	edx, DWORD PTR _i2$[ebp]
mov	DWORD PTR _i1$[ebp], edx
mov	eax, DWORD PTR _i1$[ebp]
cmp	eax, DWORD PTR _i2$[ebp]
jae	SHORT $LN3@ft_multo64
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN4@ft_multo64
mov	DWORD PTR tv74[ebp], 0
mov	ecx, DWORD PTR tv74[ebp]
shl	ecx, 16					
add	ecx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _i1$[ebp]
shr	edx, 16					
add	edx, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _i1$[ebp]
shl	eax, 16					
mov	DWORD PTR _i1$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
add	ecx, DWORD PTR _i1$[ebp]
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _lo$[ebp]
cmp	edx, DWORD PTR _i1$[ebp]
jae	SHORT $LN5@ft_multo64
mov	DWORD PTR tv82[ebp], 1
jmp	SHORT $LN6@ft_multo64
mov	DWORD PTR tv82[ebp], 0
mov	eax, DWORD PTR _hi$[ebp]
add	eax, DWORD PTR tv82[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _z$[ebp]
mov	edx, DWORD PTR _lo$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _z$[ebp]
mov	ecx, DWORD PTR _hi$[ebp]
mov	DWORD PTR [eax+4], ecx
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Hypot PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR _v$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR _v$[ebp+4], ecx
lea	edx, DWORD PTR _v$[ebp]
push	edx
call	_FT_Vector_Length
add	esp, 4
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@FT_Hypot
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN4@FT_Hypot
DD	-12					
DD	8
DD	$LN3@FT_Hypot
DB	118					
DB	0
ENDP
_FT_MSB	PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _shift$[ebp], 0
mov	eax, DWORD PTR _z$[ebp]
and	eax, -65536				
je	SHORT $LN5@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 16					
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 16					
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 65280				
je	SHORT $LN4@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 8
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 8
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 240				
je	SHORT $LN3@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 4
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 4
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 12					
je	SHORT $LN2@FT_MSB
mov	ecx, DWORD PTR _z$[ebp]
shr	ecx, 2
mov	DWORD PTR _z$[ebp], ecx
mov	edx, DWORD PTR _shift$[ebp]
add	edx, 2
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _z$[ebp]
and	eax, 2
je	SHORT $LN1@FT_MSB
mov	ecx, DWORD PTR _shift$[ebp]
add	ecx, 1
mov	DWORD PTR _shift$[ebp], ecx
mov	eax, DWORD PTR _shift$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_corner_is_flat PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _in_x$[ebp]
add	eax, DWORD PTR _out_x$[ebp]
mov	DWORD PTR _ax$[ebp], eax
mov	ecx, DWORD PTR _in_y$[ebp]
add	ecx, DWORD PTR _out_y$[ebp]
mov	DWORD PTR _ay$[ebp], ecx
cmp	DWORD PTR _in_x$[ebp], 0
jge	SHORT $LN3@ft_corner_
mov	edx, DWORD PTR _in_x$[ebp]
neg	edx
mov	DWORD PTR tv68[ebp], edx
jmp	SHORT $LN4@ft_corner_
mov	eax, DWORD PTR _in_x$[ebp]
mov	DWORD PTR tv68[ebp], eax
mov	ecx, DWORD PTR tv68[ebp]
mov	DWORD PTR _in_x$[ebp], ecx
cmp	DWORD PTR _in_y$[ebp], 0
jge	SHORT $LN5@ft_corner_
mov	edx, DWORD PTR _in_y$[ebp]
neg	edx
mov	DWORD PTR tv71[ebp], edx
jmp	SHORT $LN6@ft_corner_
mov	eax, DWORD PTR _in_y$[ebp]
mov	DWORD PTR tv71[ebp], eax
mov	ecx, DWORD PTR tv71[ebp]
mov	DWORD PTR _in_y$[ebp], ecx
mov	edx, DWORD PTR _in_x$[ebp]
cmp	edx, DWORD PTR _in_y$[ebp]
jle	SHORT $LN7@ft_corner_
imul	eax, DWORD PTR _in_y$[ebp], 3
sar	eax, 3
add	eax, DWORD PTR _in_x$[ebp]
mov	DWORD PTR tv79[ebp], eax
jmp	SHORT $LN8@ft_corner_
imul	ecx, DWORD PTR _in_x$[ebp], 3
sar	ecx, 3
add	ecx, DWORD PTR _in_y$[ebp]
mov	DWORD PTR tv79[ebp], ecx
mov	edx, DWORD PTR tv79[ebp]
mov	DWORD PTR _d_in$[ebp], edx
cmp	DWORD PTR _out_x$[ebp], 0
jge	SHORT $LN9@ft_corner_
mov	eax, DWORD PTR _out_x$[ebp]
neg	eax
mov	DWORD PTR tv82[ebp], eax
jmp	SHORT $LN10@ft_corner_
mov	ecx, DWORD PTR _out_x$[ebp]
mov	DWORD PTR tv82[ebp], ecx
mov	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR _out_x$[ebp], edx
cmp	DWORD PTR _out_y$[ebp], 0
jge	SHORT $LN11@ft_corner_
mov	eax, DWORD PTR _out_y$[ebp]
neg	eax
mov	DWORD PTR tv85[ebp], eax
jmp	SHORT $LN12@ft_corner_
mov	ecx, DWORD PTR _out_y$[ebp]
mov	DWORD PTR tv85[ebp], ecx
mov	edx, DWORD PTR tv85[ebp]
mov	DWORD PTR _out_y$[ebp], edx
mov	eax, DWORD PTR _out_x$[ebp]
cmp	eax, DWORD PTR _out_y$[ebp]
jle	SHORT $LN13@ft_corner_
imul	ecx, DWORD PTR _out_y$[ebp], 3
sar	ecx, 3
add	ecx, DWORD PTR _out_x$[ebp]
mov	DWORD PTR tv93[ebp], ecx
jmp	SHORT $LN14@ft_corner_
imul	edx, DWORD PTR _out_x$[ebp], 3
sar	edx, 3
add	edx, DWORD PTR _out_y$[ebp]
mov	DWORD PTR tv93[ebp], edx
mov	eax, DWORD PTR tv93[ebp]
mov	DWORD PTR _d_out$[ebp], eax
cmp	DWORD PTR _ax$[ebp], 0
jge	SHORT $LN15@ft_corner_
mov	ecx, DWORD PTR _ax$[ebp]
neg	ecx
mov	DWORD PTR tv128[ebp], ecx
jmp	SHORT $LN16@ft_corner_
mov	edx, DWORD PTR _ax$[ebp]
mov	DWORD PTR tv128[ebp], edx
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR _ax$[ebp], eax
cmp	DWORD PTR _ay$[ebp], 0
jge	SHORT $LN17@ft_corner_
mov	ecx, DWORD PTR _ay$[ebp]
neg	ecx
mov	DWORD PTR tv131[ebp], ecx
jmp	SHORT $LN18@ft_corner_
mov	edx, DWORD PTR _ay$[ebp]
mov	DWORD PTR tv131[ebp], edx
mov	eax, DWORD PTR tv131[ebp]
mov	DWORD PTR _ay$[ebp], eax
mov	ecx, DWORD PTR _ax$[ebp]
cmp	ecx, DWORD PTR _ay$[ebp]
jle	SHORT $LN19@ft_corner_
imul	edx, DWORD PTR _ay$[ebp], 3
sar	edx, 3
add	edx, DWORD PTR _ax$[ebp]
mov	DWORD PTR tv139[ebp], edx
jmp	SHORT $LN20@ft_corner_
imul	eax, DWORD PTR _ax$[ebp], 3
sar	eax, 3
add	eax, DWORD PTR _ay$[ebp]
mov	DWORD PTR tv139[ebp], eax
mov	ecx, DWORD PTR tv139[ebp]
mov	DWORD PTR _d_hypot$[ebp], ecx
mov	edx, DWORD PTR _d_in$[ebp]
add	edx, DWORD PTR _d_out$[ebp]
sub	edx, DWORD PTR _d_hypot$[ebp]
mov	eax, DWORD PTR _d_hypot$[ebp]
sar	eax, 4
cmp	edx, eax
jge	SHORT $LN21@ft_corner_
mov	DWORD PTR tv144[ebp], 1
jmp	SHORT $LN22@ft_corner_
mov	DWORD PTR tv144[ebp], 0
mov	eax, DWORD PTR tv144[ebp]
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_corner_orientation PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _in_y$[ebp], 0
jne	SHORT $LN24@ft_corner_
cmp	DWORD PTR _in_x$[ebp], 0
jl	SHORT $LN23@ft_corner_
mov	eax, DWORD PTR _out_y$[ebp]
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $LN22@ft_corner_
mov	ecx, DWORD PTR _out_y$[ebp]
neg	ecx
mov	DWORD PTR _result$[ebp], ecx
jmp	$LN21@ft_corner_
cmp	DWORD PTR _in_x$[ebp], 0
jne	SHORT $LN20@ft_corner_
cmp	DWORD PTR _in_y$[ebp], 0
jl	SHORT $LN19@ft_corner_
mov	edx, DWORD PTR _out_x$[ebp]
neg	edx
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN18@ft_corner_
mov	eax, DWORD PTR _out_x$[ebp]
mov	DWORD PTR _result$[ebp], eax
jmp	$LN21@ft_corner_
cmp	DWORD PTR _out_y$[ebp], 0
jne	SHORT $LN16@ft_corner_
cmp	DWORD PTR _out_x$[ebp], 0
jl	SHORT $LN15@ft_corner_
mov	ecx, DWORD PTR _in_y$[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN14@ft_corner_
mov	edx, DWORD PTR _in_y$[ebp]
neg	edx
mov	DWORD PTR _result$[ebp], edx
jmp	$LN21@ft_corner_
cmp	DWORD PTR _out_x$[ebp], 0
jne	SHORT $LN12@ft_corner_
cmp	DWORD PTR _out_y$[ebp], 0
jl	SHORT $LN11@ft_corner_
mov	eax, DWORD PTR _in_x$[ebp]
neg	eax
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $LN10@ft_corner_
mov	ecx, DWORD PTR _in_x$[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN21@ft_corner_
lea	edx, DWORD PTR _z1$2[ebp]
push	edx
mov	eax, DWORD PTR _out_y$[ebp]
push	eax
mov	ecx, DWORD PTR _in_x$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
lea	edx, DWORD PTR _z2$1[ebp]
push	edx
mov	eax, DWORD PTR _out_x$[ebp]
push	eax
mov	ecx, DWORD PTR _in_y$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
mov	edx, DWORD PTR _z1$2[ebp+4]
cmp	edx, DWORD PTR _z2$1[ebp+4]
jbe	SHORT $LN8@ft_corner_
mov	DWORD PTR _result$[ebp], 1
jmp	SHORT $LN21@ft_corner_
mov	eax, DWORD PTR _z1$2[ebp+4]
cmp	eax, DWORD PTR _z2$1[ebp+4]
jae	SHORT $LN6@ft_corner_
mov	DWORD PTR _result$[ebp], -1
jmp	SHORT $LN21@ft_corner_
mov	ecx, DWORD PTR _z1$2[ebp]
cmp	ecx, DWORD PTR _z2$1[ebp]
jbe	SHORT $LN4@ft_corner_
mov	DWORD PTR _result$[ebp], 1
jmp	SHORT $LN21@ft_corner_
mov	edx, DWORD PTR _z1$2[ebp]
cmp	edx, DWORD PTR _z2$1[ebp]
jae	SHORT $LN2@ft_corner_
mov	DWORD PTR _result$[ebp], -1
jmp	SHORT $LN21@ft_corner_
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@ft_corner_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	2
DD	$LN29@ft_corner_
DD	-16					
DD	8
DD	$LN27@ft_corner_
DD	-32					
DD	8
DD	$LN28@ft_corner_
DB	122					
DB	50					
DB	0
DB	122					
DB	49					
DB	0
ENDP
_FT_Vector_Transform_Scaled PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _scaling$[ebp]
shl	eax, 16					
mov	DWORD PTR _val$[ebp], eax
cmp	DWORD PTR _vector$[ebp], 0
je	SHORT $LN1@FT_Vector_
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN2@FT_Vector_
jmp	$LN3@FT_Vector_
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _xz$[ebp], esi
mov	edx, DWORD PTR _val$[ebp]
push	edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _yz$[ebp], esi
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR _xz$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR _yz$[ebp]
mov	DWORD PTR [edx+4], eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Matrix_Multiply_Scaled PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _scaling$[ebp]
shl	eax, 16					
mov	DWORD PTR _val$[ebp], eax
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN1@FT_Matrix_
cmp	DWORD PTR _b$[ebp], 0
jne	SHORT $LN2@FT_Matrix_
jmp	$LN3@FT_Matrix_
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _xx$[ebp], esi
mov	edx, DWORD PTR _val$[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _xy$[ebp], esi
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _val$[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _yx$[ebp], esi
mov	ecx, DWORD PTR _val$[ebp]
push	ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	eax, DWORD PTR _val$[ebp]
push	eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _yy$[ebp], esi
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _xx$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR _xy$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _yx$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _yy$[ebp]
mov	DWORD PTR [edx+12], eax
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_MulDiv_No_Round PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN17@FT_MulDiv_
mov	eax, DWORD PTR _b$[ebp]
cmp	eax, DWORD PTR _c$[ebp]
jne	SHORT $LN16@FT_MulDiv_
mov	eax, DWORD PTR _a$[ebp]
jmp	$LN19@FT_MulDiv_
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN15@FT_MulDiv_
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN16@FT_MulDiv_
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN11@FT_MulDiv_
mov	ecx, DWORD PTR _b$[ebp]
neg	ecx
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN12@FT_MulDiv_
cmp	DWORD PTR _c$[ebp], 0
jge	SHORT $LN7@FT_MulDiv_
mov	ecx, DWORD PTR _c$[ebp]
neg	ecx
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN8@FT_MulDiv_
cmp	DWORD PTR _c$[ebp], 0
jne	SHORT $LN4@FT_MulDiv_
mov	DWORD PTR _a$[ebp], 2147483647		
jmp	SHORT $LN3@FT_MulDiv_
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
cmp	ecx, 131071				
ja	SHORT $LN2@FT_MulDiv_
mov	eax, DWORD PTR _a$[ebp]
imul	eax, DWORD PTR _b$[ebp]
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR _a$[ebp], eax
jmp	SHORT $LN3@FT_MulDiv_
lea	edx, DWORD PTR _temp$1[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
cmp	DWORD PTR _temp$1[ebp+4], 0
jne	SHORT $LN21@FT_MulDiv_
mov	eax, DWORD PTR _temp$1[ebp]
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR tv92[ebp], eax
jmp	SHORT $LN22@FT_MulDiv_
mov	edx, DWORD PTR _c$[ebp]
push	edx
mov	eax, DWORD PTR _temp$1[ebp]
push	eax
mov	ecx, DWORD PTR _temp$1[ebp+4]
push	ecx
call	_ft_div64by32
add	esp, 12					
mov	DWORD PTR tv92[ebp], eax
mov	edx, DWORD PTR tv92[ebp]
mov	DWORD PTR _a$[ebp], edx
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN23@FT_MulDiv_
mov	eax, DWORD PTR _a$[ebp]
neg	eax
mov	DWORD PTR tv95[ebp], eax
jmp	SHORT $LN24@FT_MulDiv_
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR tv95[ebp], ecx
mov	eax, DWORD PTR tv95[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN27@FT_MulDiv_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN26@FT_MulDiv_
DD	-16					
DD	8
DD	$LN25@FT_MulDiv_
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
_FT_MulFix_i386 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _b$[ebp]
imul	edx
mov	ecx, edx
sar	ecx, 31					
add	ecx, 32768				
add	eax, ecx
adc	edx, 0
shr	eax, 16					
shl	edx, 16					
add	eax, edx
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Vector_From_Polar PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN1@FT_Vector_
jmp	SHORT $LN2@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _angle$[ebp]
push	eax
mov	ecx, DWORD PTR _vec$[ebp]
push	ecx
call	_FT_Vector_Rotate
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Vector_Polarize PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _vec$[ebp], 0
je	SHORT $LN2@FT_Vector_
cmp	DWORD PTR _length$[ebp], 0
je	SHORT $LN2@FT_Vector_
cmp	DWORD PTR _angle$[ebp], 0
jne	SHORT $LN3@FT_Vector_
jmp	SHORT $LN4@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _v$[ebp], ecx
mov	DWORD PTR _v$[ebp+4], edx
cmp	DWORD PTR _v$[ebp], 0
jne	SHORT $LN1@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
jne	SHORT $LN1@FT_Vector_
jmp	SHORT $LN4@FT_Vector_
lea	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_prenorm
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_pseudo_polarize
add	esp, 4
mov	edx, DWORD PTR _v$[ebp]
push	edx
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp], eax
cmp	DWORD PTR _shift$[ebp], 0
jl	SHORT $LN6@FT_Vector_
mov	eax, DWORD PTR _v$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	eax, cl
mov	DWORD PTR tv79[ebp], eax
jmp	SHORT $LN7@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
neg	ecx
mov	edx, DWORD PTR _v$[ebp]
shl	edx, cl
mov	DWORD PTR tv79[ebp], edx
mov	eax, DWORD PTR _length$[ebp]
mov	ecx, DWORD PTR tv79[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _angle$[ebp]
mov	eax, DWORD PTR _v$[ebp+4]
mov	DWORD PTR [edx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@FT_Vector_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN9@FT_Vector_
DD	-16					
DD	8
DD	$LN8@FT_Vector_
DB	118					
DB	0
ENDP
_FT_Vector_Length PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN5@FT_Vector_
xor	eax, eax
jmp	$LN6@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _v$[ebp], ecx
mov	DWORD PTR _v$[ebp+4], edx
cmp	DWORD PTR _v$[ebp], 0
jne	SHORT $LN4@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
jge	SHORT $LN8@FT_Vector_
mov	eax, DWORD PTR _v$[ebp+4]
neg	eax
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN9@FT_Vector_
mov	ecx, DWORD PTR _v$[ebp+4]
mov	DWORD PTR tv69[ebp], ecx
mov	eax, DWORD PTR tv69[ebp]
jmp	SHORT $LN6@FT_Vector_
jmp	SHORT $LN3@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
jne	SHORT $LN3@FT_Vector_
cmp	DWORD PTR _v$[ebp], 0
jge	SHORT $LN10@FT_Vector_
mov	edx, DWORD PTR _v$[ebp]
neg	edx
mov	DWORD PTR tv73[ebp], edx
jmp	SHORT $LN11@FT_Vector_
mov	eax, DWORD PTR _v$[ebp]
mov	DWORD PTR tv73[ebp], eax
mov	eax, DWORD PTR tv73[ebp]
jmp	SHORT $LN6@FT_Vector_
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_prenorm
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
lea	edx, DWORD PTR _v$[ebp]
push	edx
call	_ft_trig_pseudo_polarize
add	esp, 4
mov	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp], eax
cmp	DWORD PTR _shift$[ebp], 0
jle	SHORT $LN1@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
sub	ecx, 1
mov	eax, 1
shl	eax, cl
add	eax, DWORD PTR _v$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
sar	eax, cl
jmp	SHORT $LN6@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
neg	ecx
mov	eax, DWORD PTR _v$[ebp]
shl	eax, cl
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@FT_Vector_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN13@FT_Vector_
DD	-16					
DD	8
DD	$LN12@FT_Vector_
DB	118					
DB	0
ENDP
_FT_Vector_Rotate PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN5@FT_Vector_
jmp	$LN6@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _v$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _v$[ebp+4], eax
cmp	DWORD PTR _angle$[ebp], 0
je	$LN6@FT_Vector_
cmp	DWORD PTR _v$[ebp], 0
jne	SHORT $LN3@FT_Vector_
cmp	DWORD PTR _v$[ebp+4], 0
je	$LN6@FT_Vector_
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_prenorm
add	esp, 4
mov	DWORD PTR _shift$[ebp], eax
mov	edx, DWORD PTR _angle$[ebp]
push	edx
lea	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp], eax
mov	edx, DWORD PTR _v$[ebp+4]
push	edx
call	_ft_trig_downscale
add	esp, 4
mov	DWORD PTR _v$[ebp+4], eax
cmp	DWORD PTR _shift$[ebp], 0
jle	SHORT $LN2@FT_Vector_
mov	ecx, DWORD PTR _shift$[ebp]
sub	ecx, 1
mov	eax, 1
shl	eax, cl
mov	DWORD PTR _half$1[ebp], eax
mov	edx, DWORD PTR _v$[ebp]
add	edx, DWORD PTR _half$1[ebp]
mov	eax, DWORD PTR _v$[ebp]
sar	eax, 31					
add	edx, eax
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR _v$[ebp+4]
add	edx, DWORD PTR _half$1[ebp]
mov	eax, DWORD PTR _v$[ebp+4]
sar	eax, 31					
add	edx, eax
mov	ecx, DWORD PTR _shift$[ebp]
sar	edx, cl
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx+4], edx
jmp	SHORT $LN6@FT_Vector_
mov	edx, DWORD PTR _shift$[ebp]
neg	edx
mov	DWORD PTR _shift$[ebp], edx
mov	eax, DWORD PTR _v$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _v$[ebp+4]
mov	ecx, DWORD PTR _shift$[ebp]
shl	edx, cl
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@FT_Vector_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN9@FT_Vector_
DD	-16					
DD	8
DD	$LN8@FT_Vector_
DB	118					
DB	0
ENDP
_FT_Vector_Unit PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _vec$[ebp], 0
jne	SHORT $LN1@FT_Vector_
jmp	SHORT $LN2@FT_Vector_
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], 14408027		
mov	ecx, DWORD PTR _vec$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _angle$[ebp]
push	edx
mov	eax, DWORD PTR _vec$[ebp]
push	eax
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 128				
sar	edx, 8
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR [ecx+4]
add	edx, 128				
sar	edx, 8
mov	eax, DWORD PTR _vec$[ebp]
mov	DWORD PTR [eax+4], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Angle_Diff PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _angle2$[ebp]
sub	eax, DWORD PTR _angle1$[ebp]
mov	DWORD PTR _delta$[ebp], eax
mov	eax, DWORD PTR _delta$[ebp]
cdq
mov	ecx, 23592960				
idiv	ecx
mov	DWORD PTR _delta$[ebp], edx
cmp	DWORD PTR _delta$[ebp], 0
jge	SHORT $LN2@FT_Angle_D
mov	edx, DWORD PTR _delta$[ebp]
add	edx, 23592960				
mov	DWORD PTR _delta$[ebp], edx
cmp	DWORD PTR _delta$[ebp], 11796480	
jle	SHORT $LN1@FT_Angle_D
mov	eax, DWORD PTR _delta$[ebp]
sub	eax, 23592960				
mov	DWORD PTR _delta$[ebp], eax
mov	eax, DWORD PTR _delta$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Atan2 PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _dx$[ebp], 0
jne	SHORT $LN1@FT_Atan2
cmp	DWORD PTR _dy$[ebp], 0
jne	SHORT $LN1@FT_Atan2
xor	eax, eax
jmp	SHORT $LN2@FT_Atan2
mov	eax, DWORD PTR _dx$[ebp]
mov	DWORD PTR _v$[ebp], eax
mov	ecx, DWORD PTR _dy$[ebp]
mov	DWORD PTR _v$[ebp+4], ecx
lea	edx, DWORD PTR _v$[ebp]
push	edx
call	_ft_trig_prenorm
add	esp, 4
lea	eax, DWORD PTR _v$[ebp]
push	eax
call	_ft_trig_pseudo_polarize
add	esp, 4
mov	eax, DWORD PTR _v$[ebp+4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_Atan2
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@FT_Atan2
DD	-12					
DD	8
DD	$LN4@FT_Atan2
DB	118					
DB	0
ENDP
_FT_Tan	PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _v$[ebp], 14408027		
mov	DWORD PTR _v$[ebp+4], 0
mov	eax, DWORD PTR _angle$[ebp]
push	eax
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _v$[ebp+4]
push	eax
call	_FT_DivFix
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@FT_Tan
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN4@FT_Tan
DD	-12					
DD	8
DD	$LN3@FT_Tan
DB	118					
DB	0
ENDP
_FT_Cos	PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _v$[ebp], 14408027		
mov	DWORD PTR _v$[ebp+4], 0
mov	eax, DWORD PTR _angle$[ebp]
push	eax
lea	ecx, DWORD PTR _v$[ebp]
push	ecx
call	_ft_trig_pseudo_rotate
add	esp, 8
mov	eax, DWORD PTR _v$[ebp]
add	eax, 128				
sar	eax, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@FT_Cos
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@FT_Cos
DD	-12					
DD	8
DD	$LN3@FT_Cos
DB	118					
DB	0
ENDP
_FT_Sin	PROC
push	ebp
mov	ebp, esp
mov	eax, 5898240				
sub	eax, DWORD PTR _angle$[ebp]
push	eax
call	_FT_Cos
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
__ft_face_scale_advances PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _flags$[ebp]
and	eax, 1
je	SHORT $LN7@ft_face_sc
xor	eax, eax
jmp	$LN8@ft_face_sc
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+88], 0
jne	SHORT $LN6@ft_face_sc
push	OFFSET $SG7003
push	40					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	SHORT $LN8@ft_face_sc
mov	edx, DWORD PTR _flags$[ebp]
and	edx, 16					
je	SHORT $LN5@ft_face_sc
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _scale$[ebp], edx
jmp	SHORT $LN4@ft_face_sc
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _scale$[ebp], edx
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN3@ft_face_sc
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN1@ft_face_sc
push	64					
mov	edx, DWORD PTR _scale$[ebp]
push	edx
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _nn$[ebp]
mov	edx, DWORD PTR _advances$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN2@ft_face_sc
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Advances PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN14@FT_Get_Adv
push	OFFSET $SG7049
push	122					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN15@FT_Get_Adv
cmp	DWORD PTR _padvances$[ebp], 0
jne	SHORT $LN13@FT_Get_Adv
push	OFFSET $SG7051
push	125					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN15@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _num$[ebp], ecx
mov	edx, DWORD PTR _start$[ebp]
add	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR _end$[ebp], edx
mov	eax, DWORD PTR _start$[ebp]
cmp	eax, DWORD PTR _num$[ebp]
jae	SHORT $LN11@FT_Get_Adv
mov	ecx, DWORD PTR _end$[ebp]
cmp	ecx, DWORD PTR _start$[ebp]
jb	SHORT $LN11@FT_Get_Adv
mov	edx, DWORD PTR _end$[ebp]
cmp	edx, DWORD PTR _num$[ebp]
jbe	SHORT $LN12@FT_Get_Adv
push	OFFSET $SG7055
push	130					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
jmp	$LN15@FT_Get_Adv
cmp	DWORD PTR _count$[ebp], 0
jne	SHORT $LN10@FT_Get_Adv
xor	eax, eax
jmp	$LN15@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+84]
mov	DWORD PTR _func$[ebp], eax
cmp	DWORD PTR _func$[ebp], 0
je	SHORT $LN9@FT_Get_Adv
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 3
jne	SHORT $LN8@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
sar	edx, 16					
and	edx, 15					
cmp	edx, 1
jne	SHORT $LN9@FT_Get_Adv
mov	esi, esp
mov	eax, DWORD PTR _padvances$[ebp]
push	eax
mov	ecx, DWORD PTR _flags$[ebp]
push	ecx
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	DWORD PTR _func$[ebp]
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _padvances$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	__ft_face_scale_advances
add	esp, 16					
jmp	$LN15@FT_Get_Adv
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 7
je	SHORT $LN9@FT_Get_Adv
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN15@FT_Get_Adv
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 536870912				
je	SHORT $LN5@FT_Get_Adv
push	OFFSET $SG7063
push	149					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN15@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
or	edx, 256				
mov	DWORD PTR _flags$[ebp], edx
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@FT_Get_Adv
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN2@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Load_Glyph
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_Get_Adv
jmp	SHORT $LN2@FT_Get_Adv
mov	edx, DWORD PTR _flags$[ebp]
and	edx, 16					
je	SHORT $LN17@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	edx, DWORD PTR [ecx+68]
shl	edx, 10					
mov	DWORD PTR tv168[ebp], edx
jmp	SHORT $LN18@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	edx, DWORD PTR [ecx+64]
shl	edx, 10					
mov	DWORD PTR tv168[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _padvances$[ebp]
mov	edx, DWORD PTR tv168[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN3@FT_Get_Adv
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Advance PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@FT_Get_Adv
push	OFFSET $SG7020
push	81					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Get_Adv
cmp	DWORD PTR _padvance$[ebp], 0
jne	SHORT $LN6@FT_Get_Adv
push	OFFSET $SG7022
push	84					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Get_Adv
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _gindex$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jb	SHORT $LN5@FT_Get_Adv
push	OFFSET $SG7025
push	87					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
jmp	$LN8@FT_Get_Adv
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+84]
mov	DWORD PTR _func$[ebp], edx
cmp	DWORD PTR _func$[ebp], 0
je	SHORT $LN4@FT_Get_Adv
mov	eax, DWORD PTR _flags$[ebp]
and	eax, 3
jne	SHORT $LN3@FT_Get_Adv
mov	ecx, DWORD PTR _flags$[ebp]
sar	ecx, 16					
and	ecx, 15					
cmp	ecx, 1
jne	SHORT $LN4@FT_Get_Adv
mov	esi, esp
mov	edx, DWORD PTR _padvance$[ebp]
push	edx
mov	eax, DWORD PTR _flags$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _gindex$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	DWORD PTR _func$[ebp]
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
jne	SHORT $LN2@FT_Get_Adv
mov	eax, DWORD PTR _flags$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _padvance$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	__ft_face_scale_advances
add	esp, 16					
jmp	SHORT $LN8@FT_Get_Adv
mov	eax, DWORD PTR _error$1[ebp]
and	eax, 255				
cmp	eax, 7
je	SHORT $LN4@FT_Get_Adv
mov	eax, DWORD PTR _error$1[ebp]
jmp	SHORT $LN8@FT_Get_Adv
mov	ecx, DWORD PTR _padvance$[ebp]
push	ecx
mov	edx, DWORD PTR _flags$[ebp]
push	edx
push	1
mov	eax, DWORD PTR _gindex$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Get_Advances
add	esp, 20					
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Render_Glyph_Internal PROC
push	ebp
mov	ebp, esp
sub	esp, 256				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-256]
mov	ecx, 64					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+72]
mov	DWORD PTR tv65[ebp], ecx
cmp	DWORD PTR tv65[ebp], 1651078259		
je	SHORT $LN27@FT_Render_
jmp	SHORT $LN26@FT_Render_
jmp	$LN28@FT_Render_
mov	DWORD PTR _node$7[ebp], 0
mov	BYTE PTR _update$6[ebp], 0
mov	edx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [edx+72], 1869968492		
jne	SHORT $LN25@FT_Render_
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR _renderer$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+148]
mov	DWORD PTR _node$7[ebp], eax
jmp	SHORT $LN24@FT_Render_
lea	ecx, DWORD PTR _node$7[ebp]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+72]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	DWORD PTR _error$[ebp], 7
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN22@FT_Render_
mov	esi, esp
push	0
mov	edx, DWORD PTR _render_mode$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _renderer$[ebp]
push	ecx
mov	edx, DWORD PTR _renderer$[ebp]
mov	eax, DWORD PTR [edx+60]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@FT_Render_
mov	ecx, DWORD PTR _error$[ebp]
and	ecx, 255				
cmp	ecx, 19					
je	SHORT $LN21@FT_Render_
jmp	SHORT $LN22@FT_Render_
lea	edx, DWORD PTR _node$7[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+72]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Lookup_Renderer
add	esp, 12					
mov	DWORD PTR _renderer$[ebp], eax
mov	BYTE PTR _update$6[ebp], 1
jmp	SHORT $LN23@FT_Render_
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN28@FT_Render_
movzx	eax, BYTE PTR _update$6[ebp]
test	eax, eax
je	SHORT $LN28@FT_Render_
cmp	DWORD PTR _renderer$[ebp], 0
je	SHORT $LN28@FT_Render_
push	0
push	0
mov	ecx, DWORD PTR _renderer$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Set_Renderer
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN17@FT_Render_
lea	eax, DWORD PTR _bitmap$5[ebp]
push	eax
call	_FT_Bitmap_New
add	esp, 4
push	1
lea	ecx, DWORD PTR _bitmap$5[ebp]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
add	edx, 76					
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Bitmap_Convert
add	esp, 16					
mov	DWORD PTR _err$4[ebp], eax
cmp	DWORD PTR _err$4[ebp], 0
jne	$LN16@FT_Render_
lea	ecx, DWORD PTR _ctx$3[ebp]
push	ecx
call	_MD5_Init
add	esp, 4
mov	edx, DWORD PTR _bitmap$5[ebp]
imul	edx, DWORD PTR _bitmap$5[ebp+8]
push	edx
mov	eax, DWORD PTR _bitmap$5[ebp+12]
push	eax
lea	ecx, DWORD PTR _ctx$3[ebp]
push	ecx
call	_MD5_Update
add	esp, 12					
lea	edx, DWORD PTR _ctx$3[ebp]
push	edx
lea	eax, DWORD PTR _md5$2[ebp]
push	eax
call	_MD5_Final
add	esp, 8
mov	ecx, 4
shl	ecx, 4
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN14@FT_Render_
mov	edx, DWORD PTR _bitmap$5[ebp+8]
push	edx
mov	eax, DWORD PTR _bitmap$5[ebp]
push	eax
push	OFFSET $SG11675
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN15@FT_Render_
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN11@FT_Render_
mov	edx, DWORD PTR _i$1[ebp]
add	edx, 1
mov	DWORD PTR _i$1[ebp], edx
cmp	DWORD PTR _i$1[ebp], 16			
jge	SHORT $LN4@FT_Render_
mov	eax, 4
shl	eax, 4
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN7@FT_Render_
mov	ecx, DWORD PTR _i$1[ebp]
movzx	edx, BYTE PTR _md5$2[ebp+ecx]
push	edx
push	OFFSET $SG11683
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN8@FT_Render_
jmp	SHORT $LN10@FT_Render_
mov	ecx, 4
shl	ecx, 4
cmp	DWORD PTR _ft_trace_levels[ecx], 3
jl	SHORT $LN3@FT_Render_
push	OFFSET $SG11688
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN4@FT_Render_
lea	eax, DWORD PTR _bitmap$5[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Bitmap_Done
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN37@FT_Render_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 256				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	4
DD	$LN36@FT_Render_
DD	-20					
DD	4
DD	$LN32@FT_Render_
DD	-56					
DD	24					
DD	$LN33@FT_Render_
DD	-220					
DD	152					
DD	$LN34@FT_Render_
DD	-244					
DD	16					
DD	$LN35@FT_Render_
DB	109					
DB	100					
DB	53					
DB	0
DB	99					
DB	116					
DB	120					
DB	0
DB	98					
DB	105					
DB	116					
DB	109					
DB	97					
DB	112					
DB	0
DB	110					
DB	111					
DB	100					
DB	101					
DB	0
ENDP
_FT_Lookup_Renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN7@FT_Lookup_
jmp	SHORT $Exit$10
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+148]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN4@FT_Lookup_
mov	edx, DWORD PTR _node$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN5@FT_Lookup_
mov	eax, DWORD PTR _node$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _node$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $Exit$10
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _renderer$1[ebp], edx
mov	eax, DWORD PTR _renderer$1[ebp]
mov	ecx, DWORD PTR [eax+16]
cmp	ecx, DWORD PTR _format$[ebp]
jne	SHORT $LN2@FT_Lookup_
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN1@FT_Lookup_
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _cur$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _renderer$1[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $Exit$10
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _cur$[ebp], eax
jmp	SHORT $LN4@FT_Lookup_
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_glyphslot_set_bitmap PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_ft_glyphslot_free_bitmap
add	esp, 4
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _buffer$[ebp]
mov	DWORD PTR [ecx+88], edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx+4]
and	edx, 1
je	SHORT $LN3@ft_glyphsl
push	OFFSET $SG9412
push	315					
push	OFFSET $SG9413
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@ft_glyphsl
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_glyphslot_alloc_bitmap PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx+4]
and	edx, 1
je	SHORT $LN5@ft_glyphsl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+88], 0
xor	ecx, ecx
jne	SHORT $LN4@ft_glyphsl
jmp	SHORT $LN1@ft_glyphsl
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	ecx, DWORD PTR [eax+4]
or	ecx, 1
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	DWORD PTR [eax+4], ecx
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+88], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@ft_glyphsl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN9@ft_glyphsl
DD	-12					
DD	4
DD	$LN8@ft_glyphsl
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_glyphslot_free_bitmap PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+156], 0
je	SHORT $LN5@ft_glyphsl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx+4]
and	eax, 1
je	SHORT $LN5@ft_glyphsl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+88]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+88], 0
xor	edx, edx
jne	SHORT $LN4@ft_glyphsl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx+4]
and	edx, -2					
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR [ecx+4], edx
jmp	SHORT $LN6@ft_glyphsl
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+88], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_synthesize_vertical_metrics PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _height$[ebp], ecx
mov	edx, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [edx+12], 0
jge	SHORT $LN5@ft_synthes
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _height$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jge	SHORT $LN4@ft_synthes
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _height$[ebp], eax
jmp	SHORT $LN3@ft_synthes
mov	ecx, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [ecx+12], 0
jle	SHORT $LN3@ft_synthes
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _height$[ebp]
sub	eax, DWORD PTR [edx+12]
mov	DWORD PTR _height$[ebp], eax
cmp	DWORD PTR _advance$[ebp], 0
jne	SHORT $LN1@ft_synthes
imul	eax, DWORD PTR _height$[ebp], 12
cdq
mov	ecx, 10					
idiv	ecx
mov	DWORD PTR _advance$[ebp], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+16]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
sub	edx, eax
mov	eax, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [eax+20], edx
mov	eax, DWORD PTR _advance$[ebp]
sub	eax, DWORD PTR _height$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+24], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _advance$[ebp]
mov	DWORD PTR [edx+28], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Match_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
jne	SHORT $LN16@FT_Match_S
push	OFFSET $SG10562
push	2562					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN17@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN15@FT_Match_S
push	OFFSET $SG10564
push	2566					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	$LN17@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+12], 0
je	SHORT $LN19@FT_Match_S
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [ecx+4]
imul	eax, DWORD PTR [edx+12]
add	eax, 36					
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv87[ebp], eax
jmp	SHORT $LN20@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR tv87[ebp], eax
mov	ecx, DWORD PTR tv87[ebp]
mov	DWORD PTR _w$[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+16], 0
je	SHORT $LN21@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [eax+8]
imul	eax, DWORD PTR [ecx+16]
add	eax, 36					
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv128[ebp], eax
jmp	SHORT $LN22@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR tv128[ebp], eax
mov	ecx, DWORD PTR tv128[ebp]
mov	DWORD PTR _h$[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+4], 0
je	SHORT $LN14@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+8], 0
jne	SHORT $LN14@FT_Match_S
mov	ecx, DWORD PTR _w$[ebp]
mov	DWORD PTR _h$[ebp], ecx
jmp	SHORT $LN13@FT_Match_S
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN13@FT_Match_S
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN13@FT_Match_S
mov	ecx, DWORD PTR _h$[ebp]
mov	DWORD PTR _w$[ebp], ecx
mov	edx, DWORD PTR _w$[ebp]
add	edx, 32					
and	edx, -64				
mov	DWORD PTR _w$[ebp], edx
mov	eax, DWORD PTR _h$[ebp]
add	eax, 32					
and	eax, -64				
mov	DWORD PTR _h$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN11@FT_Match_S
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+28]
jge	SHORT $LN9@FT_Match_S
mov	ecx, DWORD PTR _i$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _face$[ebp]
add	ecx, DWORD PTR [edx+32]
mov	DWORD PTR _bsize$1[ebp], ecx
mov	eax, DWORD PTR _bsize$1[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32					
and	ecx, -64				
cmp	DWORD PTR _h$[ebp], ecx
je	SHORT $LN8@FT_Match_S
jmp	SHORT $LN10@FT_Match_S
mov	edx, DWORD PTR _bsize$1[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 32					
and	eax, -64				
cmp	DWORD PTR _w$[ebp], eax
je	SHORT $LN5@FT_Match_S
movzx	ecx, BYTE PTR _ignore_width$[ebp]
test	ecx, ecx
je	SHORT $LN7@FT_Match_S
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 3
jl	SHORT $LN4@FT_Match_S
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	OFFSET $SG10581
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN5@FT_Match_S
cmp	DWORD PTR _size_index$[ebp], 0
je	SHORT $LN1@FT_Match_S
mov	eax, DWORD PTR _size_index$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
mov	DWORD PTR [eax], ecx
xor	eax, eax
jmp	SHORT $LN17@FT_Match_S
jmp	$LN10@FT_Match_S
push	OFFSET $SG10584
push	2598					
push	23					
call	_FT_Throw
add	esp, 12					
or	eax, 23					
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Request_Metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 12					
mov	DWORD PTR _metrics$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	$LN59@FT_Request
mov	DWORD PTR _w$4[ebp], 0
mov	DWORD PTR _h$3[ebp], 0
mov	DWORD PTR _scaled_w$2[ebp], 0
mov	DWORD PTR _scaled_h$1[ebp], 0
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR tv70[ebp], edx
cmp	DWORD PTR tv70[ebp], 4
ja	$LN57@FT_Request
mov	eax, DWORD PTR tv70[ebp]
jmp	DWORD PTR $LN66@FT_Request[eax*4]
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+68]
mov	DWORD PTR _h$3[ebp], edx
mov	eax, DWORD PTR _h$3[ebp]
mov	DWORD PTR _w$4[ebp], eax
jmp	$LN57@FT_Request
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+70]
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+72]
sub	edx, ecx
mov	DWORD PTR _h$3[ebp], edx
mov	edx, DWORD PTR _h$3[ebp]
mov	DWORD PTR _w$4[ebp], edx
jmp	$LN57@FT_Request
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [eax+60]
sub	edx, DWORD PTR [ecx+52]
mov	DWORD PTR _w$4[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [eax+64]
sub	edx, DWORD PTR [ecx+56]
mov	DWORD PTR _h$3[ebp], edx
jmp	SHORT $LN57@FT_Request
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+76]
mov	DWORD PTR _w$4[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+70]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+72]
sub	eax, edx
mov	DWORD PTR _h$3[ebp], eax
jmp	SHORT $LN57@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN51@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+4], eax
jmp	SHORT $LN49@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
cmp	DWORD PTR [ecx+8], 0
jne	SHORT $LN49@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+8], ecx
jmp	$Calculate_Ppem$67
cmp	DWORD PTR _w$4[ebp], 0
jge	SHORT $LN47@FT_Request
mov	edx, DWORD PTR _w$4[ebp]
neg	edx
mov	DWORD PTR _w$4[ebp], edx
cmp	DWORD PTR _h$3[ebp], 0
jge	SHORT $LN46@FT_Request
mov	eax, DWORD PTR _h$3[ebp]
neg	eax
mov	DWORD PTR _h$3[ebp], eax
mov	ecx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [ecx+12], 0
je	SHORT $LN62@FT_Request
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR _req$[ebp]
mov	ecx, DWORD PTR [edx+4]
imul	ecx, DWORD PTR [eax+12]
add	ecx, 36					
mov	eax, ecx
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv148[ebp], eax
jmp	SHORT $LN63@FT_Request
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR tv148[ebp], eax
mov	ecx, DWORD PTR tv148[ebp]
mov	DWORD PTR _scaled_w$2[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+16], 0
je	SHORT $LN64@FT_Request
mov	eax, DWORD PTR _req$[ebp]
mov	ecx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [eax+8]
imul	eax, DWORD PTR [ecx+16]
add	eax, 36					
cdq
mov	ecx, 72					
idiv	ecx
mov	DWORD PTR tv157[ebp], eax
jmp	SHORT $LN65@FT_Request
mov	edx, DWORD PTR _req$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR tv157[ebp], eax
mov	ecx, DWORD PTR tv157[ebp]
mov	DWORD PTR _scaled_h$1[ebp], ecx
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx+4], 0
je	$LN45@FT_Request
mov	eax, DWORD PTR _w$4[ebp]
push	eax
mov	ecx, DWORD PTR _scaled_w$2[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN44@FT_Request
mov	ecx, DWORD PTR _h$3[ebp]
push	ecx
mov	edx, DWORD PTR _scaled_h$1[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx], 3
jne	SHORT $LN41@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+4]
jle	SHORT $LN42@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+8], edx
jmp	SHORT $LN41@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+4], edx
jmp	SHORT $LN40@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _w$4[ebp]
push	eax
mov	ecx, DWORD PTR _h$3[ebp]
push	ecx
mov	edx, DWORD PTR _scaled_w$2[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _scaled_h$1[ebp], eax
jmp	SHORT $Calculate_Ppem$67
mov	eax, DWORD PTR _h$3[ebp]
push	eax
mov	ecx, DWORD PTR _scaled_h$1[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR tv187[ebp], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR tv187[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR tv187[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _h$3[ebp]
push	eax
mov	ecx, DWORD PTR _w$4[ebp]
push	ecx
mov	edx, DWORD PTR _scaled_h$1[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _scaled_w$2[ebp], eax
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN38@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
push	ecx
call	_FT_MulFix
add	esp, 8
mov	DWORD PTR _scaled_w$2[ebp], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+68]
push	edx
call	_FT_MulFix
add	esp, 8
mov	DWORD PTR _scaled_h$1[ebp], eax
mov	eax, DWORD PTR _scaled_w$2[ebp]
add	eax, 32					
sar	eax, 6
mov	ecx, DWORD PTR _metrics$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _scaled_h$1[ebp]
add	edx, 32					
sar	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	WORD PTR [eax+2], dx
mov	ecx, DWORD PTR _metrics$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_ft_recompute_scaled_metrics
add	esp, 8
jmp	SHORT $LN37@FT_Request
push	28					
push	0
mov	eax, DWORD PTR _metrics$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], 65536		
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+8], 65536		
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN33@FT_Request
push	OFFSET $SG10704
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN37@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN29@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
push	OFFSET $SG10709
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN34@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN25@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
push	OFFSET $SG10714
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN30@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN21@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10719
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN26@FT_Request
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN17@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10724
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN22@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN13@FT_Request
mov	ecx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10729
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN18@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN9@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10734
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@FT_Request
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Request
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG10739
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN10@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN1@FT_Request
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx+2]
push	eax
push	OFFSET $SG10744
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN6@FT_Request
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	$LN56@FT_Request
DD	$LN55@FT_Request
DD	$LN54@FT_Request
DD	$LN53@FT_Request
DD	$LN52@FT_Request
ENDP
_FT_Select_Metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 12					
mov	DWORD PTR _metrics$[ebp], ecx
mov	edx, DWORD PTR _strike_index$[ebp]
shl	edx, 4
mov	eax, DWORD PTR _face$[ebp]
add	edx, DWORD PTR [eax+32]
mov	DWORD PTR _bsize$[ebp], edx
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 32					
sar	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	WORD PTR [eax], dx
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32					
sar	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	WORD PTR [eax+2], dx
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 1
je	SHORT $LN38@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
push	ecx
mov	edx, DWORD PTR _bsize$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+68]
push	eax
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_ft_recompute_scaled_metrics
add	esp, 8
jmp	SHORT $LN37@FT_Select_
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+4], 65536		
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+8], 65536		
mov	eax, DWORD PTR _metrics$[ebp]
mov	ecx, DWORD PTR _bsize$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [eax+16], 0
mov	ecx, DWORD PTR _bsize$[ebp]
movsx	edx, WORD PTR [ecx]
shl	edx, 6
mov	eax, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [eax+20], edx
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR _bsize$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+24], eax
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN33@FT_Select_
push	OFFSET $SG10617
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN37@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN29@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
push	OFFSET $SG10622
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN34@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN25@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
push	OFFSET $SG10627
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN30@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN21@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10632
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN26@FT_Select_
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN17@FT_Select_
mov	ecx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10637
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN22@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN13@FT_Select_
mov	edx, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10642
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN18@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN9@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10647
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN14@FT_Select_
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN5@FT_Select_
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx]
push	edx
push	OFFSET $SG10652
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN10@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN1@FT_Select_
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
push	ecx
push	OFFSET $SG10657
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN6@FT_Select_
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Done_GlyphSlot PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _slot$[ebp], 0
je	$LN11@FT_Done_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$4[ebp], edx
mov	eax, DWORD PTR _driver$4[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$3[ebp], ecx
mov	DWORD PTR _prev$2[ebp], 0
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _cur$1[ebp], ecx
cmp	DWORD PTR _cur$1[ebp], 0
je	$LN11@FT_Done_Gl
mov	edx, DWORD PTR _cur$1[ebp]
cmp	edx, DWORD PTR _slot$[ebp]
jne	SHORT $LN7@FT_Done_Gl
cmp	DWORD PTR _prev$2[ebp], 0
jne	SHORT $LN6@FT_Done_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _cur$1[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+84], eax
jmp	SHORT $LN5@FT_Done_Gl
mov	ecx, DWORD PTR _prev$2[ebp]
mov	edx, DWORD PTR _cur$1[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN4@FT_Done_Gl
mov	esi, esp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_done
add	esp, 4
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$3[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _slot$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_Done_Gl
jmp	SHORT $LN11@FT_Done_Gl
mov	eax, DWORD PTR _cur$1[ebp]
mov	DWORD PTR _prev$2[ebp], eax
mov	ecx, DWORD PTR _cur$1[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _cur$1[ebp], edx
jmp	$LN9@FT_Done_Gl
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_New_GlyphSlot PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _slot$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN18@FT_New_Gly
push	OFFSET $SG9461
push	412					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN19@FT_New_Gly
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+96], 0
jne	SHORT $LN17@FT_New_Gly
push	OFFSET $SG9463
push	415					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN19@FT_New_Gly
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _driver$[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN15@FT_New_Gly
push	OFFSET $SG9468
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN16@FT_New_Gly
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+44]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _slot$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN12@FT_New_Gly
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
call	_ft_glyphslot_init
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@FT_New_Gly
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_done
add	esp, 4
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _slot$[ebp], 0
xor	edx, edx
jne	SHORT $LN10@FT_New_Gly
jmp	SHORT $Exit$24
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+84], ecx
cmp	DWORD PTR _aslot$[ebp], 0
je	SHORT $LN7@FT_New_Gly
mov	edx, DWORD PTR _aslot$[ebp]
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $Exit$24
cmp	DWORD PTR _aslot$[ebp], 0
je	SHORT $Exit$24
mov	ecx, DWORD PTR _aslot$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@FT_New_Gly
mov	ecx, DWORD PTR _error$[ebp]
push	ecx
push	OFFSET $SG9484
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $Exit$24
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN23@FT_New_Gly
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN22@FT_New_Gly
DD	-8					
DD	4
DD	$LN21@FT_New_Gly
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_module_get_service PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _module$[ebp], 0
je	$LN18@ft_module_
mov	eax, DWORD PTR _module$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN13@ft_module_
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
jne	SHORT $LN16@ft_module_
push	OFFSET $SG11810
push	4433					
push	OFFSET $SG11811
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN17@ft_module_
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN12@ft_module_
mov	esi, esp
mov	eax, DWORD PTR _service_id$[ebp]
push	eax
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
jne	$LN18@ft_module_
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$3[ebp], eax
mov	ecx, DWORD PTR _library$3[ebp]
add	ecx, 20					
mov	DWORD PTR _cur$2[ebp], ecx
mov	edx, DWORD PTR _library$3[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _cur$2[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR _limit$1[ebp], edx
jmp	SHORT $LN10@ft_module_
mov	eax, DWORD PTR _cur$2[ebp]
add	eax, 4
mov	DWORD PTR _cur$2[ebp], eax
mov	ecx, DWORD PTR _cur$2[ebp]
cmp	ecx, DWORD PTR _limit$1[ebp]
jae	$LN18@ft_module_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$2[ebp]
mov	edx, DWORD PTR [ecx+eax]
cmp	edx, DWORD PTR _module$[ebp]
je	$LN7@ft_module_
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$2[ebp]
mov	eax, DWORD PTR [edx+ecx]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN5@ft_module_
push	OFFSET $SG11826
push	4451					
push	OFFSET $SG11827
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN6@ft_module_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$2[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN7@ft_module_
mov	esi, esp
mov	ecx, DWORD PTR _service_id$[ebp]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$2[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$2[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+32]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN7@ft_module_
jmp	SHORT $LN18@ft_module_
jmp	$LN9@ft_module_
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Module_Interface PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _mod_name$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$[ebp], eax
cmp	DWORD PTR _module$[ebp], 0
je	SHORT $LN3@FT_Get_Mod
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR tv70[ebp], ecx
jmp	SHORT $LN4@FT_Get_Mod
mov	DWORD PTR tv70[ebp], 0
mov	eax, DWORD PTR tv70[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_CMap_Done PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _cmap$[ebp], 0
je	$LN13@FT_CMap_Do
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$6[ebp], ecx
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$5[ebp], eax
mov	DWORD PTR _i$3[ebp], 0
jmp	SHORT $LN11@FT_CMap_Do
mov	ecx, DWORD PTR _i$3[ebp]
add	ecx, 1
mov	DWORD PTR _i$3[ebp], ecx
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR _i$3[ebp]
cmp	eax, DWORD PTR [edx+36]
jge	$LN13@FT_CMap_Do
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	eax, DWORD PTR _i$3[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
cmp	ecx, DWORD PTR _cmap$[ebp]
jne	$LN8@FT_CMap_Do
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	eax, DWORD PTR [edx+eax*4-4]
mov	DWORD PTR _last_charmap$1[ebp], eax
lea	ecx, DWORD PTR _error$4[ebp]
push	ecx
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR [ecx+36]
sub	edx, 1
push	edx
mov	eax, DWORD PTR _face$6[ebp]
mov	ecx, DWORD PTR [eax+36]
push	ecx
push	4
mov	edx, DWORD PTR _memory$5[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _face$6[ebp]
mov	DWORD PTR [ecx+40], eax
cmp	DWORD PTR _error$4[ebp], 0
je	SHORT $LN7@FT_CMap_Do
jmp	$LN13@FT_CMap_Do
mov	edx, DWORD PTR _i$3[ebp]
add	edx, 1
mov	DWORD PTR _j$2[ebp], edx
jmp	SHORT $LN6@FT_CMap_Do
mov	eax, DWORD PTR _j$2[ebp]
add	eax, 1
mov	DWORD PTR _j$2[ebp], eax
mov	ecx, DWORD PTR _face$6[ebp]
mov	edx, DWORD PTR _j$2[ebp]
cmp	edx, DWORD PTR [ecx+36]
jge	SHORT $LN4@FT_CMap_Do
mov	eax, DWORD PTR _face$6[ebp]
mov	ecx, DWORD PTR [eax+36]
sub	ecx, 1
cmp	DWORD PTR _j$2[ebp], ecx
jne	SHORT $LN3@FT_CMap_Do
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _j$2[ebp]
mov	edx, DWORD PTR _last_charmap$1[ebp]
mov	DWORD PTR [eax+ecx*4-4], edx
jmp	SHORT $LN2@FT_CMap_Do
mov	eax, DWORD PTR _face$6[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+40]
mov	edx, DWORD PTR _j$2[ebp]
mov	esi, DWORD PTR _j$2[ebp]
mov	ecx, DWORD PTR [ecx+esi*4]
mov	DWORD PTR [eax+edx*4-4], ecx
jmp	SHORT $LN5@FT_CMap_Do
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+36]
sub	eax, 1
mov	ecx, DWORD PTR _face$6[ebp]
mov	DWORD PTR [ecx+36], eax
mov	edx, DWORD PTR _face$6[ebp]
mov	eax, DWORD PTR [edx+92]
cmp	eax, DWORD PTR _cmap$[ebp]
jne	SHORT $LN1@FT_CMap_Do
mov	ecx, DWORD PTR _face$6[ebp]
mov	DWORD PTR [ecx+92], 0
mov	edx, DWORD PTR _cmap$[ebp]
push	edx
call	_ft_cmap_done_internal
add	esp, 4
jmp	SHORT $LN13@FT_CMap_Do
jmp	$LN10@FT_CMap_Do
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN17@FT_CMap_Do
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN16@FT_CMap_Do
DD	-16					
DD	4
DD	$LN15@FT_CMap_Do
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_CMap_New PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _cmap$[ebp], 0
cmp	DWORD PTR _clazz$[ebp], 0
je	SHORT $LN6@FT_CMap_Ne
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN6@FT_CMap_Ne
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN7@FT_CMap_Ne
push	OFFSET $SG11069
push	3299					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_CMap_Ne
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _cmap$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$13
mov	eax, DWORD PTR _charmap$[ebp]
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR _clazz$[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN4@FT_CMap_Ne
mov	esi, esp
mov	ecx, DWORD PTR _init_data$[ebp]
push	ecx
mov	edx, DWORD PTR _cmap$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+4]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@FT_CMap_Ne
jmp	SHORT $Fail$14
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+36]
push	edx
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+40], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_CMap_Ne
jmp	SHORT $Fail$14
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	ecx, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [edx+eax*4], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+36]
add	eax, 1
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+36], eax
cmp	DWORD PTR _acmap$[ebp], 0
je	SHORT $LN1@FT_CMap_Ne
mov	edx, DWORD PTR _acmap$[ebp]
mov	eax, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN8@FT_CMap_Ne
mov	ecx, DWORD PTR _cmap$[ebp]
push	ecx
call	_ft_cmap_done_internal
add	esp, 4
mov	DWORD PTR _cmap$[ebp], 0
jmp	SHORT $Exit$13
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_CMap_Ne
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN11@FT_CMap_Ne
DD	-8					
DD	4
DD	$LN10@FT_CMap_Ne
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_service_list_lookup PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _service_descriptors$[ebp]
mov	DWORD PTR _desc$[ebp], eax
cmp	DWORD PTR _desc$[ebp], 0
je	SHORT $LN5@ft_service
cmp	DWORD PTR _service_id$[ebp], 0
je	SHORT $LN5@ft_service
jmp	SHORT $LN4@ft_service
mov	ecx, DWORD PTR _desc$[ebp]
add	ecx, 8
mov	DWORD PTR _desc$[ebp], ecx
mov	edx, DWORD PTR _desc$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN5@ft_service
mov	eax, DWORD PTR _service_id$[ebp]
push	eax
mov	ecx, DWORD PTR _desc$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN1@ft_service
mov	eax, DWORD PTR _desc$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN5@ft_service
jmp	SHORT $LN3@ft_service
mov	eax, DWORD PTR _result$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_CopyPoints PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _source$[ebp]
movsx	ecx, WORD PTR [eax+22]
mov	DWORD PTR _num_points$[ebp], ecx
mov	edx, DWORD PTR _source$[ebp]
movsx	eax, WORD PTR [edx+20]
mov	DWORD PTR _num_contours$[ebp], eax
mov	ecx, DWORD PTR _num_contours$[ebp]
push	ecx
mov	edx, DWORD PTR _num_points$[ebp]
push	edx
mov	eax, DWORD PTR _target$[ebp]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN2@FT_GlyphLo
mov	ecx, DWORD PTR _target$[ebp]
add	ecx, 20					
mov	DWORD PTR _out$2[ebp], ecx
mov	edx, DWORD PTR _source$[ebp]
add	edx, 20					
mov	DWORD PTR _in$1[ebp], edx
mov	eax, DWORD PTR _num_points$[ebp]
shl	eax, 3
push	eax
mov	ecx, DWORD PTR _in$1[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _out$2[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _num_points$[ebp]
push	edx
mov	eax, DWORD PTR _in$1[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _out$2[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _num_contours$[ebp]
shl	ecx, 1
push	ecx
mov	edx, DWORD PTR _in$1[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _out$2[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _target$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	SHORT $LN1@FT_GlyphLo
mov	edx, DWORD PTR _source$[ebp]
movzx	eax, BYTE PTR [edx+16]
test	eax, eax
je	SHORT $LN1@FT_GlyphLo
mov	ecx, DWORD PTR _num_points$[ebp]
shl	ecx, 3
push	ecx
mov	edx, DWORD PTR _source$[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _target$[ebp]
mov	edx, DWORD PTR [ecx+40]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _num_points$[ebp]
shl	eax, 3
push	eax
mov	ecx, DWORD PTR _source$[ebp]
mov	edx, DWORD PTR [ecx+44]
push	edx
mov	eax, DWORD PTR _target$[ebp]
mov	ecx, DWORD PTR [eax+44]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _out$2[ebp]
mov	ax, WORD PTR _num_points$[ebp]
mov	WORD PTR [edx+2], ax
mov	ecx, DWORD PTR _out$2[ebp]
mov	dx, WORD PTR _num_contours$[ebp]
mov	WORD PTR [ecx], dx
mov	eax, DWORD PTR _target$[ebp]
push	eax
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Add PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _loader$[ebp], 0
jne	SHORT $LN4@FT_GlyphLo
jmp	$LN5@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx]
mov	DWORD PTR _n_curr_contours$[ebp], eax
mov	ecx, DWORD PTR _base$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	DWORD PTR _n_base_points$[ebp], edx
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx+2]
add	ecx, eax
mov	edx, DWORD PTR _base$[ebp]
mov	WORD PTR [edx+2], cx
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx]
add	ecx, eax
mov	edx, DWORD PTR _base$[ebp]
mov	WORD PTR [edx], cx
mov	eax, DWORD PTR _base$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _current$[ebp]
add	ecx, DWORD PTR [edx+28]
mov	eax, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax+28], ecx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN3@FT_GlyphLo
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _n_curr_contours$[ebp]
jae	SHORT $LN1@FT_GlyphLo
mov	eax, DWORD PTR _current$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR _n$[ebp]
movsx	eax, WORD PTR [ecx+edx*2]
add	eax, DWORD PTR _n_base_points$[ebp]
mov	ecx, DWORD PTR _current$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	ecx, DWORD PTR _n$[ebp]
mov	WORD PTR [edx+ecx*2], ax
jmp	SHORT $LN2@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Prepare
add	esp, 4
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Prepare PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 56					
mov	DWORD PTR _current$[ebp], eax
xor	ecx, ecx
mov	edx, DWORD PTR _current$[ebp]
mov	WORD PTR [edx+2], cx
xor	eax, eax
mov	ecx, DWORD PTR _current$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _current$[ebp]
mov	DWORD PTR [edx+28], 0
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_FT_GlyphLoader_Adjust_Subglyphs
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_CheckSubGlyphs PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _loader$[ebp]
add	edx, 20					
mov	DWORD PTR _base$[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 56					
mov	DWORD PTR _current$[ebp], eax
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _current$[ebp]
add	edx, DWORD PTR [eax+28]
add	edx, DWORD PTR _n_subs$[ebp]
mov	DWORD PTR _new_max$[ebp], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _old_max$[ebp], edx
mov	eax, DWORD PTR _new_max$[ebp]
cmp	eax, DWORD PTR _old_max$[ebp]
jbe	SHORT $Exit$8
mov	ecx, DWORD PTR _new_max$[ebp]
add	ecx, 1
and	ecx, -2					
mov	DWORD PTR _new_max$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base$[ebp]
mov	ecx, DWORD PTR [eax+32]
push	ecx
mov	edx, DWORD PTR _new_max$[ebp]
push	edx
mov	eax, DWORD PTR _old_max$[ebp]
push	eax
push	32					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _base$[ebp]
mov	DWORD PTR [edx+32], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_GlyphLo
jmp	SHORT $Exit$8
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Adjust_Subglyphs
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN6@FT_GlyphLo
DD	-12					
DD	4
DD	$LN5@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_GlyphLoader_CheckPoints PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _loader$[ebp]
add	edx, 20					
mov	DWORD PTR _base$[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 56					
mov	DWORD PTR _current$[ebp], eax
mov	BYTE PTR _adjust$[ebp], 0
mov	ecx, DWORD PTR _base$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _current$[ebp]
movsx	ecx, WORD PTR [eax+2]
add	edx, DWORD PTR _n_points$[ebp]
add	ecx, edx
mov	DWORD PTR _new_max$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _old_max$[ebp], eax
mov	ecx, DWORD PTR _new_max$[ebp]
cmp	ecx, DWORD PTR _old_max$[ebp]
jbe	$LN11@FT_GlyphLo
mov	edx, DWORD PTR _new_max$[ebp]
add	edx, 7
and	edx, -8					
mov	DWORD PTR _new_max$[ebp], edx
cmp	DWORD PTR _new_max$[ebp], 32767		
jbe	SHORT $LN10@FT_GlyphLo
push	OFFSET $SG7524
push	223					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	$LN12@FT_GlyphLo
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _new_max$[ebp]
push	eax
mov	ecx, DWORD PTR _old_max$[ebp]
push	ecx
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN8@FT_GlyphLo
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _base$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _new_max$[ebp]
push	edx
mov	eax, DWORD PTR _old_max$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _base$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@FT_GlyphLo
jmp	$Exit$17
mov	eax, DWORD PTR _loader$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	SHORT $LN7@FT_GlyphLo
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
mov	edx, DWORD PTR _new_max$[ebp]
shl	edx, 1
push	edx
mov	eax, DWORD PTR _old_max$[ebp]
shl	eax, 1
push	eax
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+40], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@FT_GlyphLo
jmp	$Exit$17
mov	eax, DWORD PTR _old_max$[ebp]
shl	eax, 3
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	eax, DWORD PTR _old_max$[ebp]
lea	ecx, DWORD PTR [edx+eax*8]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _new_max$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
push	edx
call	DWORD PTR __imp__memmove
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _new_max$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+44], eax
mov	BYTE PTR _adjust$[ebp], 1
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _old_max$[ebp], edx
mov	eax, DWORD PTR _base$[ebp]
movsx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR _current$[ebp]
movsx	eax, WORD PTR [edx]
add	ecx, DWORD PTR _n_contours$[ebp]
add	eax, ecx
mov	DWORD PTR _new_max$[ebp], eax
mov	ecx, DWORD PTR _new_max$[ebp]
cmp	ecx, DWORD PTR _old_max$[ebp]
jbe	SHORT $LN5@FT_GlyphLo
mov	edx, DWORD PTR _new_max$[ebp]
add	edx, 3
and	edx, -4					
mov	DWORD PTR _new_max$[ebp], edx
cmp	DWORD PTR _new_max$[ebp], 32767		
jbe	SHORT $LN4@FT_GlyphLo
push	OFFSET $SG7538
push	255					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
jmp	SHORT $LN12@FT_GlyphLo
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _base$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _new_max$[ebp]
push	eax
mov	ecx, DWORD PTR _old_max$[ebp]
push	ecx
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@FT_GlyphLo
jmp	SHORT $Exit$17
mov	BYTE PTR _adjust$[ebp], 1
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [edx+8], eax
movzx	ecx, BYTE PTR _adjust$[ebp]
test	ecx, ecx
je	SHORT $Exit$17
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_FT_GlyphLoader_Reset
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN15@FT_GlyphLo
DD	-12					
DD	4
DD	$LN14@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_GlyphLoader_Rewind PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
push	edi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 20					
mov	DWORD PTR _base$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 56					
mov	DWORD PTR _current$[ebp], ecx
xor	edx, edx
mov	eax, DWORD PTR _base$[ebp]
mov	WORD PTR [eax+2], dx
xor	ecx, ecx
mov	edx, DWORD PTR _base$[ebp]
mov	WORD PTR [edx], cx
mov	eax, DWORD PTR _base$[ebp]
mov	DWORD PTR [eax+28], 0
mov	ecx, 9
mov	esi, DWORD PTR _base$[ebp]
mov	edi, DWORD PTR _current$[ebp]
rep movsd
pop	edi
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Reset PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+24], 0
xor	eax, eax
jne	SHORT $LN15@FT_GlyphLo
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+28], 0
xor	edx, edx
jne	SHORT $LN12@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+32]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+32], 0
xor	ecx, ecx
jne	SHORT $LN9@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+40]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+40], 0
xor	eax, eax
jne	SHORT $LN6@FT_GlyphLo
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+52]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+52], 0
xor	edx, edx
jne	SHORT $LN3@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+44], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_FT_GlyphLoader_Rewind
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_Done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _loader$[ebp], 0
je	SHORT $LN5@FT_GlyphLo
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_FT_GlyphLoader_Reset
add	esp, 4
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _loader$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_GlyphLo
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_GlyphLoader_CreateExtra PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
shl	ecx, 1
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+40], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
mov	BYTE PTR [edx+16], 1
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+40]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_FT_GlyphLoader_Adjust_Points
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN5@FT_GlyphLo
DD	-8					
DD	4
DD	$LN4@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_GlyphLoader_New PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _loader$[ebp], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	96					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _loader$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@FT_GlyphLo
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _aloader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_GlyphLo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN5@FT_GlyphLo
DD	-12					
DD	4
DD	$LN4@FT_GlyphLo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_strcpyn PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _size$[ebp], 1
jbe	SHORT $LN1@ft_mem_str
mov	eax, DWORD PTR _src$[ebp]
movsx	ecx, BYTE PTR [eax]
test	ecx, ecx
je	SHORT $LN1@ft_mem_str
mov	edx, DWORD PTR _dst$[ebp]
mov	eax, DWORD PTR _src$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR [edx], cl
mov	edx, DWORD PTR _dst$[ebp]
add	edx, 1
mov	DWORD PTR _dst$[ebp], edx
mov	eax, DWORD PTR _src$[ebp]
add	eax, 1
mov	DWORD PTR _src$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
sub	ecx, 1
mov	DWORD PTR _size$[ebp], ecx
jmp	SHORT $LN2@ft_mem_str
mov	edx, DWORD PTR _dst$[ebp]
mov	BYTE PTR [edx], 0
mov	eax, DWORD PTR _src$[ebp]
movsx	ecx, BYTE PTR [eax]
test	ecx, ecx
je	SHORT $LN5@ft_mem_str
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN6@ft_mem_str
mov	DWORD PTR tv72[ebp], 0
mov	eax, DWORD PTR tv72[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_mem_dup PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_qalloc
add	esp, 12					
mov	DWORD PTR _p$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@ft_mem_dup
cmp	DWORD PTR _address$[ebp], 0
je	SHORT $LN1@ft_mem_dup
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _address$[ebp]
push	ecx
mov	edx, DWORD PTR _p$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _p_error$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _p$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@ft_mem_dup
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN5@ft_mem_dup
DD	-8					
DD	4
DD	$LN4@ft_mem_dup
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_strdup PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _str$[ebp], 0
je	SHORT $LN3@ft_mem_str
mov	eax, DWORD PTR _str$[ebp]
push	eax
call	_strlen
add	esp, 4
add	eax, 1
mov	DWORD PTR tv68[ebp], eax
jmp	SHORT $LN4@ft_mem_str
mov	DWORD PTR tv68[ebp], 0
mov	ecx, DWORD PTR tv68[ebp]
mov	DWORD PTR _len$[ebp], ecx
mov	edx, DWORD PTR _p_error$[ebp]
push	edx
mov	eax, DWORD PTR _len$[ebp]
push	eax
mov	ecx, DWORD PTR _str$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_dup
add	esp, 16					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_mem_free PROC
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR _P$[ebp], 0
je	SHORT $LN2@ft_mem_fre
mov	esi, esp
mov	eax, DWORD PTR _P$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_ft_mem_qrealloc PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _cur_count$[ebp], 0
jl	SHORT $LN15@ft_mem_qre
cmp	DWORD PTR _new_count$[ebp], 0
jl	SHORT $LN15@ft_mem_qre
cmp	DWORD PTR _item_size$[ebp], 0
jge	SHORT $LN16@ft_mem_qre
push	OFFSET $SG13884
push	131					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$LN14@ft_mem_qre
cmp	DWORD PTR _new_count$[ebp], 0
je	SHORT $LN12@ft_mem_qre
cmp	DWORD PTR _item_size$[ebp], 0
jne	SHORT $LN13@ft_mem_qre
mov	eax, DWORD PTR _block$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _block$[ebp], 0
jmp	$LN14@ft_mem_qre
mov	eax, 2147483647				
cdq
idiv	DWORD PTR _item_size$[ebp]
cmp	DWORD PTR _new_count$[ebp], eax
jle	SHORT $LN10@ft_mem_qre
push	OFFSET $SG13891
push	140					
push	10					
call	_FT_Throw
add	esp, 12					
or	eax, 10					
mov	DWORD PTR _error$[ebp], eax
jmp	$LN14@ft_mem_qre
cmp	DWORD PTR _cur_count$[ebp], 0
jne	SHORT $LN8@ft_mem_qre
cmp	DWORD PTR _block$[ebp], 0
je	SHORT $LN6@ft_mem_qre
push	OFFSET $SG13899
push	144					
push	OFFSET $SG13900
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN7@ft_mem_qre
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _new_count$[ebp]
imul	ecx, DWORD PTR _item_size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _block$[ebp], eax
jmp	SHORT $LN14@ft_mem_qre
mov	eax, DWORD PTR _cur_count$[ebp]
imul	eax, DWORD PTR _item_size$[ebp]
mov	DWORD PTR _cur_size$2[ebp], eax
mov	ecx, DWORD PTR _new_count$[ebp]
imul	ecx, DWORD PTR _item_size$[ebp]
mov	DWORD PTR _new_size$1[ebp], ecx
mov	esi, esp
mov	edx, DWORD PTR _block$[ebp]
push	edx
mov	eax, DWORD PTR _new_size$1[ebp]
push	eax
mov	ecx, DWORD PTR _cur_size$2[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _block2$3[ebp], eax
cmp	DWORD PTR _block2$3[ebp], 0
jne	SHORT $LN2@ft_mem_qre
push	OFFSET $SG13907
push	157					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN14@ft_mem_qre
mov	edx, DWORD PTR _block2$3[ebp]
mov	DWORD PTR _block$[ebp], edx
mov	eax, DWORD PTR _p_error$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _block$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN21@ft_mem_qre
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN20@ft_mem_qre
DD	-8					
DD	4
DD	$LN19@ft_mem_qre
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_realloc PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _block$[ebp]
push	ecx
mov	edx, DWORD PTR _new_count$[ebp]
push	edx
mov	eax, DWORD PTR _cur_count$[ebp]
push	eax
mov	ecx, DWORD PTR _item_size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_qrealloc
add	esp, 24					
mov	DWORD PTR _block$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@ft_mem_rea
mov	eax, DWORD PTR _new_count$[ebp]
cmp	eax, DWORD PTR _cur_count$[ebp]
jle	SHORT $LN1@ft_mem_rea
mov	ecx, DWORD PTR _new_count$[ebp]
sub	ecx, DWORD PTR _cur_count$[ebp]
imul	ecx, DWORD PTR _item_size$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _cur_count$[ebp]
imul	edx, DWORD PTR _item_size$[ebp]
add	edx, DWORD PTR _block$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _p_error$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _block$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@ft_mem_rea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@ft_mem_rea
DD	-8					
DD	4
DD	$LN4@ft_mem_rea
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_mem_qalloc PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _block$[ebp], 0
cmp	DWORD PTR _size$[ebp], 0
jle	SHORT $LN4@ft_mem_qal
mov	esi, esp
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _block$[ebp], eax
cmp	DWORD PTR _block$[ebp], 0
jne	SHORT $LN3@ft_mem_qal
push	OFFSET $SG13848
push	78					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN2@ft_mem_qal
cmp	DWORD PTR _size$[ebp], 0
jge	SHORT $LN2@ft_mem_qal
push	OFFSET $SG13851
push	83					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _p_error$[ebp]
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _block$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_mem_alloc PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_qalloc
add	esp, 12					
mov	DWORD PTR _block$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@ft_mem_all
cmp	DWORD PTR _size$[ebp], 0
jle	SHORT $LN1@ft_mem_all
mov	eax, DWORD PTR _size$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _block$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _p_error$[ebp]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _block$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@ft_mem_all
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN5@ft_mem_all
DD	-8					
DD	4
DD	$LN4@ft_mem_all
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Activate_Size PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN3@FT_Activat
push	OFFSET $SG11528
push	3822					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	SHORT $LN4@FT_Activat
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN1@FT_Activat
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+96], 0
jne	SHORT $LN2@FT_Activat
push	OFFSET $SG11531
push	3826					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN4@FT_Activat
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+88], ecx
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Done_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN10@FT_Done_Si
push	OFFSET $SG10534
push	2514					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN11@FT_Done_Si
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN9@FT_Done_Si
push	OFFSET $SG10536
push	2518					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN11@FT_Done_Si
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _driver$[ebp], eax
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN8@FT_Done_Si
push	OFFSET $SG10538
push	2522					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
jmp	$LN11@FT_Done_Si
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _memory$[ebp], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 108				
push	ecx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@FT_Done_Si
mov	edx, DWORD PTR _node$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
add	eax, 108				
push	eax
call	_FT_List_Remove
add	esp, 8
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	eax, eax
jne	SHORT $LN6@FT_Done_Si
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
cmp	edx, DWORD PTR _size$[ebp]
jne	SHORT $LN3@FT_Done_Si
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+88], 0
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+108], 0
je	SHORT $LN3@FT_Done_Si
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+108]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+88], edx
mov	eax, DWORD PTR _driver$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_destroy_size
add	esp, 12					
jmp	SHORT $LN1@FT_Done_Si
push	OFFSET $SG10548
push	2543					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_New_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _size$[ebp], 0
mov	DWORD PTR _node$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN14@FT_New_Siz
push	OFFSET $SG10504
push	2456					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN15@FT_New_Siz
cmp	DWORD PTR _asize$[ebp], 0
jne	SHORT $LN13@FT_New_Siz
push	OFFSET $SG10506
push	2459					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN15@FT_New_Siz
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+96], 0
jne	SHORT $LN12@FT_New_Siz
push	OFFSET $SG10508
push	2462					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
jmp	$LN15@FT_New_Siz
mov	ecx, DWORD PTR _asize$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _clazz$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _size$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@FT_New_Siz
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	12					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@FT_New_Siz
jmp	SHORT $Exit$20
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+40], 0
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+56], 0
je	SHORT $LN9@FT_New_Siz
mov	esi, esp
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+56]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $Exit$20
mov	eax, DWORD PTR _asize$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _node$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 108				
push	edx
call	_FT_List_Add
add	esp, 8
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@FT_New_Siz
mov	eax, DWORD PTR _node$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	edx, edx
jne	SHORT $LN6@FT_New_Siz
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _size$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_New_Siz
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@FT_New_Siz
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN18@FT_New_Siz
DD	-8					
DD	4
DD	$LN17@FT_New_Siz
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Set_Renderer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN9@FT_Set_Ren
push	OFFSET $SG11624
push	4027					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
cmp	DWORD PTR _renderer$[ebp], 0
jne	SHORT $LN8@FT_Set_Ren
push	OFFSET $SG11627
push	4033					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
cmp	DWORD PTR _num_params$[ebp], 0
jbe	SHORT $LN7@FT_Set_Ren
cmp	DWORD PTR _parameters$[ebp], 0
jne	SHORT $LN7@FT_Set_Ren
push	OFFSET $SG11629
push	4039					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
mov	eax, DWORD PTR _renderer$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
add	ecx, 148				
push	ecx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
jne	SHORT $LN6@FT_Set_Ren
push	OFFSET $SG11631
push	4046					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$12
mov	edx, DWORD PTR _node$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
add	eax, 148				
push	eax
call	_FT_List_Up
add	esp, 8
mov	ecx, DWORD PTR _renderer$[ebp]
cmp	DWORD PTR [ecx+16], 1869968492		
jne	SHORT $LN5@FT_Set_Ren
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _renderer$[ebp]
mov	DWORD PTR [edx+156], eax
mov	ecx, DWORD PTR _renderer$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR _set_mode$[ebp], eax
jmp	SHORT $LN4@FT_Set_Ren
mov	ecx, DWORD PTR _num_params$[ebp]
sub	ecx, 1
mov	DWORD PTR _num_params$[ebp], ecx
cmp	DWORD PTR _num_params$[ebp], 0
jbe	SHORT $Exit$12
mov	esi, esp
mov	edx, DWORD PTR _parameters$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _parameters$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _renderer$[ebp]
push	eax
call	DWORD PTR _set_mode$[ebp]
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@FT_Set_Ren
jmp	SHORT $Exit$12
mov	ecx, DWORD PTR _parameters$[ebp]
add	ecx, 8
mov	DWORD PTR _parameters$[ebp], ecx
jmp	SHORT $LN3@FT_Set_Ren
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Renderer PROC
push	ebp
mov	ebp, esp
push	0
mov	eax, DWORD PTR _format$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Lookup_Renderer
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Matrix_Invert PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN2@FT_Matrix_
push	OFFSET $SG7351
push	662					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN3@FT_Matrix_
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix
add	esp, 8
sub	esi, eax
mov	DWORD PTR _delta$[ebp], esi
jne	SHORT $LN1@FT_Matrix_
push	OFFSET $SG7353
push	669					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN3@FT_Matrix_
mov	edx, DWORD PTR _delta$[ebp]
push	edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_DivFix
add	esp, 8
neg	eax
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _delta$[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
neg	eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _xx$[ebp], eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _yy$[ebp], edx
mov	eax, DWORD PTR _delta$[ebp]
push	eax
mov	ecx, DWORD PTR _yy$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _delta$[ebp]
push	eax
mov	ecx, DWORD PTR _xx$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx+12], eax
xor	eax, eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Matrix_Multiply PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN1@FT_Matrix_
cmp	DWORD PTR _b$[ebp], 0
jne	SHORT $LN2@FT_Matrix_
jmp	$LN3@FT_Matrix_
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _xx$[ebp], esi
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _xy$[ebp], esi
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _yx$[ebp], esi
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _yy$[ebp], esi
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _xx$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR _xy$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _yx$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _b$[ebp]
mov	eax, DWORD PTR _yy$[ebp]
mov	DWORD PTR [edx+12], eax
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_TrueType_Engine_Type PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN3@FT_Get_Tru
push	OFFSET $SG12025
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$2[ebp], eax
cmp	DWORD PTR _module$2[ebp], 0
je	SHORT $LN3@FT_Get_Tru
push	OFFSET $SG12029
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR _service$1[ebp], eax
cmp	DWORD PTR _service$1[ebp], 0
je	SHORT $LN3@FT_Get_Tru
mov	edx, DWORD PTR _service$1[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Debug_Hook PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN2@FT_Set_Deb
cmp	DWORD PTR _debug_hook$[ebp], 0
je	SHORT $LN2@FT_Set_Deb
cmp	DWORD PTR _hook_index$[ebp], 4
jae	SHORT $LN2@FT_Set_Deb
mov	eax, DWORD PTR _hook_index$[ebp]
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR _debug_hook$[ebp]
mov	DWORD PTR [ecx+eax*4+172], edx
pop	ebp
ret	0
ENDP
_FT_Done_Library PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN29@FT_Done_Li
push	OFFSET $SG11963
push	4747					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN30@FT_Done_Li
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+188]
sub	ecx, 1
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+188], ecx
mov	eax, DWORD PTR _library$[ebp]
cmp	DWORD PTR [eax+188], 0
jle	SHORT $LN28@FT_Done_Li
jmp	$Exit$35
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
mov	DWORD PTR _driver_name$4[ebp], OFFSET $SG11971
mov	DWORD PTR _driver_name$4[ebp+4], 0
mov	DWORD PTR _m$6[ebp], 0
jmp	SHORT $LN27@FT_Done_Li
mov	eax, DWORD PTR _m$6[ebp]
add	eax, 1
mov	DWORD PTR _m$6[ebp], eax
cmp	DWORD PTR _m$6[ebp], 2
jae	$LN8@FT_Done_Li
mov	DWORD PTR _n$5[ebp], 0
jmp	SHORT $LN24@FT_Done_Li
mov	ecx, DWORD PTR _n$5[ebp]
add	ecx, 1
mov	DWORD PTR _n$5[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _n$5[ebp]
cmp	eax, DWORD PTR [edx+16]
jae	$LN22@FT_Done_Li
mov	ecx, DWORD PTR _n$5[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+20]
mov	DWORD PTR _module$3[ebp], eax
mov	ecx, DWORD PTR _module$3[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _module_name$2[ebp], eax
mov	ecx, DWORD PTR _m$6[ebp]
cmp	DWORD PTR _driver_name$4[ebp+ecx*4], 0
je	SHORT $LN21@FT_Done_Li
mov	edx, DWORD PTR _m$6[ebp]
mov	eax, DWORD PTR _driver_name$4[ebp+edx*4]
push	eax
mov	ecx, DWORD PTR _module_name$2[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
je	SHORT $LN21@FT_Done_Li
jmp	SHORT $LN23@FT_Done_Li
mov	edx, DWORD PTR _module$3[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 1
jne	SHORT $LN19@FT_Done_Li
jmp	SHORT $LN23@FT_Done_Li
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 7
jl	SHORT $LN18@FT_Done_Li
mov	ecx, DWORD PTR _module_name$2[ebp]
push	ecx
push	OFFSET $SG11987
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN19@FT_Done_Li
mov	eax, DWORD PTR _module$3[ebp]
add	eax, 16					
mov	DWORD PTR _faces$1[ebp], eax
mov	ecx, DWORD PTR _faces$1[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $LN14@FT_Done_Li
mov	edx, DWORD PTR _faces$1[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_FT_Done_Face
add	esp, 4
mov	edx, DWORD PTR _faces$1[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN13@FT_Done_Li
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 0
jl	SHORT $LN11@FT_Done_Li
push	OFFSET $SG11998
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN12@FT_Done_Li
jmp	SHORT $LN15@FT_Done_Li
jmp	$LN23@FT_Done_Li
jmp	$LN26@FT_Done_Li
mov	eax, DWORD PTR _library$[ebp]
cmp	DWORD PTR [eax+16], 0
jbe	SHORT $LN6@FT_Done_Li
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+16]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Remove_Module
add	esp, 8
jmp	SHORT $LN8@FT_Done_Li
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+164]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR [eax+164], 0
xor	ecx, ecx
jne	SHORT $LN6@FT_Done_Li
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+168], 0
mov	eax, DWORD PTR _library$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _library$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@FT_Done_Li
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN34@FT_Done_Li
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN33@FT_Done_Li
DD	-24					
DD	8
DD	$LN32@FT_Done_Li
DB	100					
DB	114					
DB	105					
DB	118					
DB	101					
DB	114					
DB	95					
DB	110					
DB	97					
DB	109					
DB	101					
DB	0
ENDP
_FT_New_Library PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _library$[ebp], 0
cmp	DWORD PTR _memory$[ebp], 0
je	SHORT $LN6@FT_New_Lib
cmp	DWORD PTR _alibrary$[ebp], 0
jne	SHORT $LN7@FT_New_Lib
push	OFFSET $SG11932
push	4660					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_New_Lib
call	_ft_debug_init
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	192					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _library$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@FT_New_Lib
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN8@FT_New_Lib
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+168], 16384		
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	16384					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+164], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@FT_New_Lib
jmp	SHORT $Fail$13
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+4], 2
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR [eax+8], 5
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+12], 5
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+188], 1
mov	eax, DWORD PTR _alibrary$[ebp]
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [eax], ecx
xor	eax, eax
jmp	SHORT $LN8@FT_New_Lib
mov	edx, DWORD PTR _library$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _library$[ebp], 0
xor	ecx, ecx
jne	SHORT $Fail$13
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_New_Lib
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN11@FT_New_Lib
DD	-12					
DD	4
DD	$LN10@FT_New_Lib
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Reference_Library PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@FT_Referen
push	OFFSET $SG11921
push	4641					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	SHORT $LN2@FT_Referen
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+188]
add	ecx, 1
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+188], ecx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Property_Get PROC
push	ebp
mov	ebp, esp
push	0
mov	eax, DWORD PTR _value$[ebp]
push	eax
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_property_do
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Property_Set PROC
push	ebp
mov	ebp, esp
push	1
mov	eax, DWORD PTR _value$[ebp]
push	eax
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
mov	edx, DWORD PTR _module_name$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_ft_property_do
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Remove_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN8@FT_Remove_
push	OFFSET $SG11837
push	4477					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN9@FT_Remove_
cmp	DWORD PTR _module$[ebp], 0
je	$LN7@FT_Remove_
mov	eax, DWORD PTR _library$[ebp]
add	eax, 20					
mov	DWORD PTR _cur$2[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _cur$2[ebp]
lea	ecx, DWORD PTR [eax+edx*4]
mov	DWORD PTR _limit$1[ebp], ecx
jmp	SHORT $LN6@FT_Remove_
mov	edx, DWORD PTR _cur$2[ebp]
add	edx, 4
mov	DWORD PTR _cur$2[ebp], edx
mov	eax, DWORD PTR _cur$2[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	$LN7@FT_Remove_
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _cur$2[ebp]
mov	ecx, DWORD PTR [eax+edx]
cmp	ecx, DWORD PTR _module$[ebp]
jne	SHORT $LN3@FT_Remove_
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+16]
sub	eax, 1
mov	ecx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _limit$1[ebp]
sub	edx, 4
mov	DWORD PTR _limit$1[ebp], edx
mov	eax, DWORD PTR _cur$2[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	SHORT $LN1@FT_Remove_
mov	ecx, 4
shl	ecx, 0
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _cur$2[ebp]
mov	esi, DWORD PTR _cur$2[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [edx+eax], ecx
mov	edx, DWORD PTR _cur$2[ebp]
add	edx, 4
mov	DWORD PTR _cur$2[ebp], edx
jmp	SHORT $LN2@FT_Remove_
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _limit$1[ebp]
mov	DWORD PTR [edx+ecx], 0
mov	eax, DWORD PTR _module$[ebp]
push	eax
call	_Destroy_Module
add	esp, 4
xor	eax, eax
jmp	SHORT $LN9@FT_Remove_
jmp	$LN5@FT_Remove_
push	OFFSET $SG11848
push	4506					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN5@FT_Get_Mod
cmp	DWORD PTR _module_name$[ebp], 0
jne	SHORT $LN6@FT_Get_Mod
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN7@FT_Get_Mod
mov	eax, DWORD PTR _library$[ebp]
add	eax, 20					
mov	DWORD PTR _cur$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _cur$[ebp]
lea	ecx, DWORD PTR [eax+edx*4]
mov	DWORD PTR _limit$[ebp], ecx
jmp	SHORT $LN4@FT_Get_Mod
mov	edx, DWORD PTR _cur$[ebp]
add	edx, 4
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _cur$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	SHORT $LN2@FT_Get_Mod
mov	ecx, DWORD PTR _module_name$[ebp]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN1@FT_Get_Mod
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _result$[ebp], edx
jmp	SHORT $LN2@FT_Get_Mod
jmp	SHORT $LN3@FT_Get_Mod
mov	eax, DWORD PTR _result$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Add_Module PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN25@FT_Add_Mod
push	OFFSET $SG11727
push	4266					
push	33					
call	_FT_Throw
add	esp, 12					
or	eax, 33					
jmp	$LN26@FT_Add_Mod
cmp	DWORD PTR _clazz$[ebp], 0
jne	SHORT $LN24@FT_Add_Mod
push	OFFSET $SG11729
push	4269					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN26@FT_Add_Mod
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+16], 131077		
jle	SHORT $LN23@FT_Add_Mod
push	OFFSET $SG11732
push	4273					
push	4
call	_FT_Throw
add	esp, 12					
or	eax, 4
jmp	$LN26@FT_Add_Mod
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN22@FT_Add_Mod
mov	ecx, DWORD PTR _nn$[ebp]
add	ecx, 1
mov	DWORD PTR _nn$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR [edx+16]
jae	SHORT $LN20@FT_Add_Mod
mov	ecx, DWORD PTR _nn$[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+20]
mov	DWORD PTR _module$[ebp], eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN19@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	eax, DWORD PTR [ecx+12]
jg	SHORT $LN18@FT_Add_Mod
push	OFFSET $SG11738
push	4283					
push	5
call	_FT_Throw
add	esp, 12					
or	eax, 5
jmp	$LN26@FT_Add_Mod
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Remove_Module
add	esp, 8
jmp	SHORT $LN20@FT_Add_Mod
jmp	SHORT $LN21@FT_Add_Mod
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _library$[ebp]
cmp	DWORD PTR [edx+16], 32			
jb	SHORT $LN17@FT_Add_Mod
push	OFFSET $SG11740
push	4297					
push	48					
call	_FT_Throw
add	esp, 12					
or	eax, 48					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$31
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _module$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@FT_Add_Mod
jmp	$Exit$31
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR _clazz$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 2
je	SHORT $LN15@FT_Add_Mod
mov	ecx, DWORD PTR _module$[ebp]
push	ecx
call	_ft_add_renderer
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@FT_Add_Mod
jmp	$Fail$32
mov	edx, DWORD PTR _module$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 4
je	SHORT $LN13@FT_Add_Mod
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR [edx+160], eax
mov	ecx, DWORD PTR _module$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 1
je	SHORT $LN12@FT_Add_Mod
mov	ecx, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$3[ebp], ecx
mov	edx, DWORD PTR _driver$3[ebp]
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+12], ecx
mov	edx, DWORD PTR _driver$3[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 512				
jne	SHORT $LN12@FT_Add_Mod
mov	edx, DWORD PTR _driver$3[ebp]
add	edx, 24					
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_FT_GlyphLoader_New
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN12@FT_Add_Mod
jmp	SHORT $Fail$32
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+24], 0
je	SHORT $LN9@FT_Add_Mod
mov	esi, esp
mov	edx, DWORD PTR _module$[ebp]
push	edx
mov	eax, DWORD PTR _clazz$[ebp]
mov	ecx, DWORD PTR [eax+24]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@FT_Add_Mod
jmp	SHORT $Fail$32
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR _module$[ebp]
mov	DWORD PTR [ecx+eax*4+20], edx
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+16]
add	ecx, 1
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN26@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 1
je	SHORT $LN7@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$2[ebp], eax
mov	ecx, DWORD PTR _driver$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	SHORT $LN7@FT_Add_Mod
mov	ecx, DWORD PTR _driver$2[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
call	_FT_GlyphLoader_Done
add	esp, 4
mov	eax, DWORD PTR _module$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 2
je	SHORT $LN3@FT_Add_Mod
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _renderer$1[ebp], eax
mov	ecx, DWORD PTR _renderer$1[ebp]
cmp	DWORD PTR [ecx+12], 0
je	SHORT $LN3@FT_Add_Mod
mov	edx, DWORD PTR _renderer$1[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	DWORD PTR [eax+36], 1869968492		
jne	SHORT $LN3@FT_Add_Mod
mov	ecx, DWORD PTR _renderer$1[ebp]
cmp	DWORD PTR [ecx+52], 0
je	SHORT $LN3@FT_Add_Mod
mov	esi, esp
mov	edx, DWORD PTR _renderer$1[ebp]
mov	eax, DWORD PTR [edx+52]
push	eax
mov	ecx, DWORD PTR _renderer$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+56]
mov	ecx, DWORD PTR [eax+20]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _module$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _module$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@FT_Add_Mod
jmp	$Exit$31
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@FT_Add_Mod
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN29@FT_Add_Mod
DD	-8					
DD	4
DD	$LN28@FT_Add_Mod
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_Library_Version PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _major$[ebp], 0
mov	DWORD PTR _minor$[ebp], 0
mov	DWORD PTR _patch$[ebp], 0
cmp	DWORD PTR _library$[ebp], 0
je	SHORT $LN4@FT_Library
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _major$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _minor$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _patch$[ebp], edx
cmp	DWORD PTR _amajor$[ebp], 0
je	SHORT $LN3@FT_Library
mov	eax, DWORD PTR _amajor$[ebp]
mov	ecx, DWORD PTR _major$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _aminor$[ebp], 0
je	SHORT $LN2@FT_Library
mov	edx, DWORD PTR _aminor$[ebp]
mov	eax, DWORD PTR _minor$[ebp]
mov	DWORD PTR [edx], eax
cmp	DWORD PTR _apatch$[ebp], 0
je	SHORT $LN5@FT_Library
mov	ecx, DWORD PTR _apatch$[ebp]
mov	edx, DWORD PTR _patch$[ebp]
mov	DWORD PTR [ecx], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Vector_Transform PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _vector$[ebp], 0
je	SHORT $LN1@FT_Vector_
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN2@FT_Vector_
jmp	SHORT $LN3@FT_Vector_
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _xz$[ebp], esi
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulFix
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _vector$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix
add	esp, 8
add	esi, eax
mov	DWORD PTR _yz$[ebp], esi
mov	ecx, DWORD PTR _vector$[ebp]
mov	edx, DWORD PTR _xz$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _vector$[ebp]
mov	ecx, DWORD PTR _yz$[ebp]
mov	DWORD PTR [eax+4], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_FloorFix PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _a$[ebp], 0
jl	SHORT $LN3@FT_FloorFi
mov	eax, DWORD PTR _a$[ebp]
and	eax, -65536				
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@FT_FloorFi
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
and	ecx, -65536				
neg	ecx
mov	DWORD PTR tv69[ebp], ecx
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_CeilFix PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _a$[ebp], 0
jl	SHORT $LN3@FT_CeilFix
mov	eax, DWORD PTR _a$[ebp]
add	eax, 65535				
and	eax, -65536				
mov	DWORD PTR tv71[ebp], eax
jmp	SHORT $LN4@FT_CeilFix
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
add	ecx, 65535				
and	ecx, -65536				
neg	ecx
mov	DWORD PTR tv71[ebp], ecx
mov	eax, DWORD PTR tv71[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_RoundFix PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _a$[ebp], 0
jl	SHORT $LN3@FT_RoundFi
mov	eax, DWORD PTR _a$[ebp]
add	eax, 32768				
and	eax, -65536				
mov	DWORD PTR tv71[ebp], eax
jmp	SHORT $LN4@FT_RoundFi
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
add	ecx, 32768				
and	ecx, -65536				
neg	ecx
mov	DWORD PTR tv71[ebp], ecx
mov	eax, DWORD PTR tv71[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_DivFix PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN11@FT_DivFix
mov	eax, DWORD PTR _a$[ebp]
neg	eax
mov	DWORD PTR _a$[ebp], eax
mov	ecx, DWORD PTR _s$[ebp]
neg	ecx
mov	DWORD PTR _s$[ebp], ecx
xor	edx, edx
jne	SHORT $LN12@FT_DivFix
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN7@FT_DivFix
mov	eax, DWORD PTR _b$[ebp]
neg	eax
mov	DWORD PTR _b$[ebp], eax
mov	ecx, DWORD PTR _s$[ebp]
neg	ecx
mov	DWORD PTR _s$[ebp], ecx
xor	edx, edx
jne	SHORT $LN8@FT_DivFix
cmp	DWORD PTR _b$[ebp], 0
jne	SHORT $LN4@FT_DivFix
mov	DWORD PTR _q$[ebp], 2147483647		
jmp	SHORT $LN3@FT_DivFix
mov	eax, DWORD PTR _b$[ebp]
sar	eax, 17					
mov	ecx, 65535				
sub	ecx, eax
cmp	DWORD PTR _a$[ebp], ecx
jg	SHORT $LN2@FT_DivFix
mov	eax, DWORD PTR _a$[ebp]
shl	eax, 16					
mov	edx, DWORD PTR _b$[ebp]
sar	edx, 1
add	eax, edx
xor	edx, edx
div	DWORD PTR _b$[ebp]
mov	DWORD PTR _q$[ebp], eax
jmp	SHORT $LN3@FT_DivFix
mov	eax, DWORD PTR _a$[ebp]
sar	eax, 16					
mov	DWORD PTR _temp$2[ebp+4], eax
mov	ecx, DWORD PTR _a$[ebp]
shl	ecx, 16					
mov	DWORD PTR _temp$2[ebp], ecx
mov	DWORD PTR _temp2$1[ebp+4], 0
mov	edx, DWORD PTR _b$[ebp]
sar	edx, 1
mov	DWORD PTR _temp2$1[ebp], edx
lea	eax, DWORD PTR _temp$2[ebp]
push	eax
lea	ecx, DWORD PTR _temp2$1[ebp]
push	ecx
lea	edx, DWORD PTR _temp$2[ebp]
push	edx
call	_FT_Add64
add	esp, 12					
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _temp$2[ebp]
push	ecx
mov	edx, DWORD PTR _temp$2[ebp+4]
push	edx
call	_ft_div64by32
add	esp, 12					
mov	DWORD PTR _q$[ebp], eax
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN15@FT_DivFix
mov	eax, DWORD PTR _q$[ebp]
neg	eax
mov	DWORD PTR tv92[ebp], eax
jmp	SHORT $LN16@FT_DivFix
mov	ecx, DWORD PTR _q$[ebp]
mov	DWORD PTR tv92[ebp], ecx
mov	eax, DWORD PTR tv92[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@FT_DivFix
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN19@FT_DivFix
DD	-20					
DD	8
DD	$LN17@FT_DivFix
DD	-36					
DD	8
DD	$LN18@FT_DivFix
DB	116					
DB	101					
DB	109					
DB	112					
DB	50					
DB	0
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
_FT_MulFix PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_MulDiv PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _s$[ebp], 1
cmp	DWORD PTR _a$[ebp], 0
je	SHORT $LN17@FT_MulDiv
mov	eax, DWORD PTR _b$[ebp]
cmp	eax, DWORD PTR _c$[ebp]
jne	SHORT $LN16@FT_MulDiv
mov	eax, DWORD PTR _a$[ebp]
jmp	$LN19@FT_MulDiv
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN15@FT_MulDiv
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR _a$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN16@FT_MulDiv
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN11@FT_MulDiv
mov	ecx, DWORD PTR _b$[ebp]
neg	ecx
mov	DWORD PTR _b$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN12@FT_MulDiv
cmp	DWORD PTR _c$[ebp], 0
jge	SHORT $LN7@FT_MulDiv
mov	ecx, DWORD PTR _c$[ebp]
neg	ecx
mov	DWORD PTR _c$[ebp], ecx
mov	edx, DWORD PTR _s$[ebp]
neg	edx
mov	DWORD PTR _s$[ebp], edx
xor	eax, eax
jne	SHORT $LN8@FT_MulDiv
cmp	DWORD PTR _c$[ebp], 0
jne	SHORT $LN4@FT_MulDiv
mov	DWORD PTR _a$[ebp], 2147483647		
jmp	$LN3@FT_MulDiv
mov	ecx, DWORD PTR _a$[ebp]
add	ecx, DWORD PTR _b$[ebp]
mov	edx, DWORD PTR _c$[ebp]
sar	edx, 17					
mov	eax, 129894				
sub	eax, edx
cmp	ecx, eax
ja	SHORT $LN2@FT_MulDiv
mov	eax, DWORD PTR _a$[ebp]
imul	eax, DWORD PTR _b$[ebp]
mov	ecx, DWORD PTR _c$[ebp]
sar	ecx, 1
add	eax, ecx
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR _a$[ebp], eax
jmp	SHORT $LN3@FT_MulDiv
lea	edx, DWORD PTR _temp$2[ebp]
push	edx
mov	eax, DWORD PTR _b$[ebp]
push	eax
mov	ecx, DWORD PTR _a$[ebp]
push	ecx
call	_ft_multo64
add	esp, 12					
mov	DWORD PTR _temp2$1[ebp+4], 0
mov	edx, DWORD PTR _c$[ebp]
sar	edx, 1
mov	DWORD PTR _temp2$1[ebp], edx
lea	eax, DWORD PTR _temp$2[ebp]
push	eax
lea	ecx, DWORD PTR _temp2$1[ebp]
push	ecx
lea	edx, DWORD PTR _temp$2[ebp]
push	edx
call	_FT_Add64
add	esp, 12					
cmp	DWORD PTR _temp$2[ebp+4], 0
jne	SHORT $LN21@FT_MulDiv
mov	eax, DWORD PTR _temp$2[ebp]
xor	edx, edx
div	DWORD PTR _c$[ebp]
mov	DWORD PTR tv132[ebp], eax
jmp	SHORT $LN22@FT_MulDiv
mov	eax, DWORD PTR _c$[ebp]
push	eax
mov	ecx, DWORD PTR _temp$2[ebp]
push	ecx
mov	edx, DWORD PTR _temp$2[ebp+4]
push	edx
call	_ft_div64by32
add	esp, 12					
mov	DWORD PTR tv132[ebp], eax
mov	eax, DWORD PTR tv132[ebp]
mov	DWORD PTR _a$[ebp], eax
cmp	DWORD PTR _s$[ebp], 0
jge	SHORT $LN23@FT_MulDiv
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR tv135[ebp], ecx
jmp	SHORT $LN24@FT_MulDiv
mov	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR tv135[ebp], edx
mov	eax, DWORD PTR tv135[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN28@FT_MulDiv
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN27@FT_MulDiv
DD	-16					
DD	8
DD	$LN25@FT_MulDiv
DD	-32					
DD	8
DD	$LN26@FT_MulDiv
DB	116					
DB	101					
DB	109					
DB	112					
DB	50					
DB	0
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
_FT_Face_GetCharsOfVariant PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN11@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
cmp	DWORD PTR _charmap$3[ebp], 0
je	$LN11@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$2[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
cmp	DWORD PTR _variantSelector$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11273
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN8@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN3@FT_Face_Ge
mov	eax, DWORD PTR _variantSelector$[ebp]
push	eax
push	OFFSET $SG11278
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	edx, DWORD PTR _variantSelector$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$2[ebp]
push	ecx
mov	edx, DWORD PTR _vcmap$2[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+36]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetVariantsOfChar PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN11@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
cmp	DWORD PTR _charmap$3[ebp], 0
je	$LN11@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$2[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11246
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN8@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN3@FT_Face_Ge
mov	eax, DWORD PTR _charcode$[ebp]
push	eax
push	OFFSET $SG11251
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	edx, DWORD PTR _charcode$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$2[ebp]
push	ecx
mov	edx, DWORD PTR _vcmap$2[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetVariantSelectors PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN2@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
cmp	DWORD PTR _charmap$3[ebp], 0
je	SHORT $LN2@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$2[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$1[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
mov	edx, DWORD PTR _vcmap$2[ebp]
push	edx
mov	eax, DWORD PTR _vcmap$2[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+28]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetCharVariantIsDefault PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], -1
cmp	DWORD PTR _face$[ebp], 0
je	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$2[ebp], eax
cmp	DWORD PTR _charmap$2[ebp], 0
je	$LN20@FT_Face_Ge
mov	ecx, DWORD PTR _charmap$2[ebp]
mov	DWORD PTR _vcmap$1[ebp], ecx
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN18@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN16@FT_Face_Ge
push	OFFSET $SG11194
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN17@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN12@FT_Face_Ge
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
push	OFFSET $SG11199
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN13@FT_Face_Ge
cmp	DWORD PTR _variantSelector$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11205
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@FT_Face_Ge
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN3@FT_Face_Ge
mov	edx, DWORD PTR _variantSelector$[ebp]
push	edx
push	OFFSET $SG11210
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	ecx, DWORD PTR _variantSelector$[ebp]
push	ecx
mov	edx, DWORD PTR _charcode$[ebp]
push	edx
mov	eax, DWORD PTR _vcmap$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+24]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, al
mov	DWORD PTR _result$[ebp], ecx
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Face_GetCharVariantIndex PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	$LN20@FT_Face_Ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+92]
cmp	DWORD PTR [edx+4], 1970170211		
jne	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_variant_selector_charmap
add	esp, 4
mov	DWORD PTR _charmap$3[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+92]
mov	DWORD PTR _ucmap$2[ebp], edx
cmp	DWORD PTR _charmap$3[ebp], 0
je	$LN20@FT_Face_Ge
mov	eax, DWORD PTR _charmap$3[ebp]
mov	DWORD PTR _vcmap$1[ebp], eax
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN18@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN16@FT_Face_Ge
push	OFFSET $SG11156
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN17@FT_Face_Ge
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN12@FT_Face_Ge
mov	eax, DWORD PTR _charcode$[ebp]
push	eax
push	OFFSET $SG11161
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN13@FT_Face_Ge
cmp	DWORD PTR _variantSelector$[ebp], -1
jbe	SHORT $LN9@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN7@FT_Face_Ge
push	OFFSET $SG11167
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN8@FT_Face_Ge
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN3@FT_Face_Ge
mov	ecx, DWORD PTR _variantSelector$[ebp]
push	ecx
push	OFFSET $SG11172
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@FT_Face_Ge
mov	esi, esp
mov	eax, DWORD PTR _variantSelector$[ebp]
push	eax
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
mov	edx, DWORD PTR _ucmap$2[ebp]
push	edx
mov	eax, DWORD PTR _vcmap$1[ebp]
push	eax
mov	ecx, DWORD PTR _vcmap$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_SubGlyph_Info PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 6
cmp	DWORD PTR _glyph$[ebp], 0
je	$LN1@FT_Get_Sub
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+132], 0
je	SHORT $LN1@FT_Get_Sub
mov	ecx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [ecx+72], 1668246896		
jne	SHORT $LN1@FT_Get_Sub
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _sub_index$[ebp]
cmp	eax, DWORD PTR [edx+128]
jae	SHORT $LN1@FT_Get_Sub
mov	ecx, DWORD PTR _sub_index$[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _glyph$[ebp]
add	ecx, DWORD PTR [edx+132]
mov	DWORD PTR _subg$1[ebp], ecx
mov	eax, DWORD PTR _p_index$[ebp]
mov	ecx, DWORD PTR _subg$1[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _subg$1[ebp]
movzx	ecx, WORD PTR [eax+4]
mov	edx, DWORD PTR _p_flags$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _p_arg1$[ebp]
mov	ecx, DWORD PTR _subg$1[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _p_arg2$[ebp]
mov	ecx, DWORD PTR _subg$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _subg$1[ebp]
add	eax, 16					
mov	ecx, DWORD PTR _p_transform$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Name_Index PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN12@FT_Get_Nam
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 512				
je	$LN12@FT_Get_Nam
cmp	DWORD PTR _glyph_name$[ebp], 0
je	$LN12@FT_Get_Nam
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+36]
mov	DWORD PTR _svc$3[ebp], ecx
cmp	DWORD PTR _svc$3[ebp], -2		
jne	SHORT $LN8@FT_Get_Nam
mov	DWORD PTR _svc$3[ebp], 0
jmp	SHORT $LN7@FT_Get_Nam
cmp	DWORD PTR _svc$3[ebp], 0
jne	SHORT $LN7@FT_Get_Nam
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$2[ebp], eax
mov	DWORD PTR __tmp_$1[ebp], 0
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+32], 0
je	SHORT $LN2@FT_Get_Nam
mov	esi, esp
push	OFFSET $SG11309
mov	eax, DWORD PTR _module$2[ebp]
push	eax
mov	ecx, DWORD PTR _module$2[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+32]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	ecx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _svc$3[ebp], ecx
xor	edx, edx
jne	SHORT $LN5@FT_Get_Nam
cmp	DWORD PTR _svc$3[ebp], 0
je	SHORT $LN15@FT_Get_Nam
mov	eax, DWORD PTR _svc$3[ebp]
mov	DWORD PTR tv86[ebp], eax
jmp	SHORT $LN16@FT_Get_Nam
mov	DWORD PTR tv86[ebp], -2			
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR tv86[ebp]
mov	DWORD PTR [edx+36], eax
mov	ecx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR _service$4[ebp], ecx
xor	edx, edx
jne	$LN11@FT_Get_Nam
cmp	DWORD PTR _service$4[ebp], 0
je	SHORT $LN12@FT_Get_Nam
mov	eax, DWORD PTR _service$4[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN12@FT_Get_Nam
mov	esi, esp
mov	ecx, DWORD PTR _glyph_name$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _service$4[ebp]
mov	ecx, DWORD PTR [eax+4]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Next_Char PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
mov	DWORD PTR _gindex$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN5@FT_Get_Nex
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	SHORT $LN5@FT_Get_Nex
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+16], 0
je	SHORT $LN5@FT_Get_Nex
mov	edx, DWORD PTR _charcode$[ebp]
mov	DWORD PTR _code$2[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	DWORD PTR _cmap$1[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _code$2[ebp]
push	edx
mov	eax, DWORD PTR _cmap$1[ebp]
push	eax
mov	ecx, DWORD PTR _cmap$1[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+16]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _gindex$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _gindex$[ebp]
cmp	edx, DWORD PTR [ecx+16]
jae	SHORT $LN4@FT_Get_Nex
cmp	DWORD PTR _gindex$[ebp], 0
jne	SHORT $LN8@FT_Get_Nex
mov	DWORD PTR tv78[ebp], 0
jmp	SHORT $LN9@FT_Get_Nex
mov	eax, DWORD PTR _code$2[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR tv78[ebp]
mov	DWORD PTR _result$[ebp], ecx
cmp	DWORD PTR _agindex$[ebp], 0
je	SHORT $LN1@FT_Get_Nex
mov	edx, DWORD PTR _agindex$[ebp]
mov	eax, DWORD PTR _gindex$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Get_Nex
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN11@FT_Get_Nex
DD	-16					
DD	4
DD	$LN10@FT_Get_Nex
DB	99					
DB	111					
DB	100					
DB	101					
DB	0
ENDP
_FT_Get_First_Char PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
mov	DWORD PTR _gindex$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN4@FT_Get_Fir
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	SHORT $LN4@FT_Get_Fir
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+16], 0
je	SHORT $LN4@FT_Get_Fir
push	0
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Get_Char_Index
add	esp, 8
mov	DWORD PTR _gindex$[ebp], eax
cmp	DWORD PTR _gindex$[ebp], 0
je	SHORT $LN2@FT_Get_Fir
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _gindex$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jb	SHORT $LN4@FT_Get_Fir
lea	edx, DWORD PTR _gindex$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Get_Next_Char
add	esp, 12					
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _agindex$[ebp], 0
je	SHORT $LN1@FT_Get_Fir
mov	ecx, DWORD PTR _agindex$[ebp]
mov	edx, DWORD PTR _gindex$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@FT_Get_Fir
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN8@FT_Get_Fir
DD	-12					
DD	4
DD	$LN7@FT_Get_Fir
DB	103					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_FT_Get_Char_Index PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
je	$LN10@FT_Get_Cha
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+92], 0
je	SHORT $LN10@FT_Get_Cha
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+92]
mov	DWORD PTR _cmap$1[ebp], edx
cmp	DWORD PTR _charcode$[ebp], -1
jbe	SHORT $LN9@FT_Get_Cha
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN7@FT_Get_Cha
push	OFFSET $SG11097
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@FT_Get_Cha
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN3@FT_Get_Cha
mov	edx, DWORD PTR _charcode$[ebp]
push	edx
push	OFFSET $SG11102
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN4@FT_Get_Cha
mov	esi, esp
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
mov	edx, DWORD PTR _cmap$1[ebp]
push	edx
mov	eax, DWORD PTR _cmap$1[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+12]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Charmap_Index PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _charmap$[ebp], 0
je	SHORT $LN9@FT_Get_Cha
mov	eax, DWORD PTR _charmap$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN10@FT_Get_Cha
or	eax, -1
jmp	SHORT $LN11@FT_Get_Cha
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN8@FT_Get_Cha
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _charmap$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+36]
jge	SHORT $LN4@FT_Get_Cha
mov	edx, DWORD PTR _charmap$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
cmp	eax, DWORD PTR _charmap$[ebp]
jne	SHORT $LN5@FT_Get_Cha
jmp	SHORT $LN4@FT_Get_Cha
jmp	SHORT $LN7@FT_Get_Cha
mov	ecx, DWORD PTR _charmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+36]
jl	SHORT $LN3@FT_Get_Cha
push	OFFSET $SG11009
push	3219					
push	OFFSET $SG11010
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@FT_Get_Cha
mov	eax, DWORD PTR _i$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Set_Cha
push	OFFSET $SG10984
push	3180					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN9@FT_Set_Cha
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR _cur$[ebp], ecx
cmp	DWORD PTR _cur$[ebp], 0
je	SHORT $LN6@FT_Set_Cha
cmp	DWORD PTR _charmap$[ebp], 0
jne	SHORT $LN7@FT_Set_Cha
push	OFFSET $SG10987
push	3184					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
jmp	$LN9@FT_Set_Cha
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
call	_FT_Get_CMap_Format
add	esp, 4
cmp	eax, 14					
jne	SHORT $LN5@FT_Set_Cha
push	OFFSET $SG10989
push	3187					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN9@FT_Set_Cha
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _cur$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN4@FT_Set_Cha
mov	ecx, DWORD PTR _cur$[ebp]
add	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	SHORT $LN2@FT_Set_Cha
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
cmp	eax, DWORD PTR _charmap$[ebp]
jne	SHORT $LN1@FT_Set_Cha
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+edx]
mov	DWORD PTR [eax+92], edx
xor	eax, eax
jmp	SHORT $LN9@FT_Set_Cha
jmp	SHORT $LN3@FT_Set_Cha
push	OFFSET $SG10994
push	3200					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Select_Charmap PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Select_
push	OFFSET $SG10965
push	3138					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN9@FT_Select_
cmp	DWORD PTR _encoding$[ebp], 0
jne	SHORT $LN7@FT_Select_
push	OFFSET $SG10967
push	3141					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN9@FT_Select_
cmp	DWORD PTR _encoding$[ebp], 1970170211	
jne	SHORT $LN6@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_find_unicode_charmap
add	esp, 4
jmp	$LN9@FT_Select_
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _cur$[ebp], edx
cmp	DWORD PTR _cur$[ebp], 0
jne	SHORT $LN5@FT_Select_
push	OFFSET $SG10970
push	3152					
push	38					
call	_FT_Throw
add	esp, 12					
or	eax, 38					
jmp	SHORT $LN9@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _cur$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN4@FT_Select_
mov	ecx, DWORD PTR _cur$[ebp]
add	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	SHORT $LN2@FT_Select_
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax+4]
cmp	ecx, DWORD PTR _encoding$[ebp]
jne	SHORT $LN1@FT_Select_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+92], eax
xor	eax, eax
jmp	SHORT $LN9@FT_Select_
jmp	SHORT $LN3@FT_Select_
push	OFFSET $SG10975
push	3165					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Postscript_Name PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN13@FT_Get_Pos
jmp	$Exit$18
cmp	DWORD PTR _result$[ebp], 0
jne	$Exit$18
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _svc$3[ebp], edx
cmp	DWORD PTR _svc$3[ebp], -2		
jne	SHORT $LN8@FT_Get_Pos
mov	DWORD PTR _svc$3[ebp], 0
jmp	SHORT $LN7@FT_Get_Pos
cmp	DWORD PTR _svc$3[ebp], 0
jne	SHORT $LN7@FT_Get_Pos
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN2@FT_Get_Pos
mov	esi, esp
push	OFFSET $SG11398
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _svc$3[ebp], edx
xor	eax, eax
jne	SHORT $LN5@FT_Get_Pos
cmp	DWORD PTR _svc$3[ebp], 0
je	SHORT $LN16@FT_Get_Pos
mov	ecx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR tv83[ebp], ecx
jmp	SHORT $LN17@FT_Get_Pos
mov	DWORD PTR tv83[ebp], -2			
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR tv83[ebp]
mov	DWORD PTR [eax+28], ecx
mov	edx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR _service$4[ebp], edx
xor	eax, eax
jne	$LN11@FT_Get_Pos
cmp	DWORD PTR _service$4[ebp], 0
je	SHORT $Exit$18
mov	ecx, DWORD PTR _service$4[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $Exit$18
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _service$4[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Glyph_Name PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN17@FT_Get_Gly
push	OFFSET $SG11328
push	3643					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN18@FT_Get_Gly
cmp	DWORD PTR _buffer$[ebp], 0
je	SHORT $LN15@FT_Get_Gly
cmp	DWORD PTR _buffer_max$[ebp], 0
jne	SHORT $LN16@FT_Get_Gly
push	OFFSET $SG11331
push	3646					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN18@FT_Get_Gly
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _buffer$[ebp]
mov	BYTE PTR [edx+ecx], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _glyph_index$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jl	SHORT $LN14@FT_Get_Gly
push	OFFSET $SG11335
push	3652					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
jmp	$LN18@FT_Get_Gly
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 512				
jne	SHORT $LN12@FT_Get_Gly
push	OFFSET $SG11337
push	3655					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN18@FT_Get_Gly
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+36]
mov	DWORD PTR _svc$3[ebp], eax
cmp	DWORD PTR _svc$3[ebp], -2		
jne	SHORT $LN9@FT_Get_Gly
mov	DWORD PTR _svc$3[ebp], 0
jmp	SHORT $LN8@FT_Get_Gly
cmp	DWORD PTR _svc$3[ebp], 0
jne	SHORT $LN8@FT_Get_Gly
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _module$2[ebp], edx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	eax, DWORD PTR _module$2[ebp]
mov	ecx, DWORD PTR [eax]
cmp	DWORD PTR [ecx+32], 0
je	SHORT $LN3@FT_Get_Gly
mov	esi, esp
push	OFFSET $SG11359
mov	edx, DWORD PTR _module$2[ebp]
push	edx
mov	eax, DWORD PTR _module$2[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+32]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	eax, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _svc$3[ebp], eax
xor	ecx, ecx
jne	SHORT $LN6@FT_Get_Gly
cmp	DWORD PTR _svc$3[ebp], 0
je	SHORT $LN20@FT_Get_Gly
mov	edx, DWORD PTR _svc$3[ebp]
mov	DWORD PTR tv143[ebp], edx
jmp	SHORT $LN21@FT_Get_Gly
mov	DWORD PTR tv143[ebp], -2		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR tv143[ebp]
mov	DWORD PTR [ecx+36], edx
mov	eax, DWORD PTR _svc$3[ebp]
mov	DWORD PTR _service$[ebp], eax
xor	ecx, ecx
jne	$LN12@FT_Get_Gly
cmp	DWORD PTR _service$[ebp], 0
je	SHORT $LN2@FT_Get_Gly
mov	edx, DWORD PTR _service$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@FT_Get_Gly
mov	esi, esp
mov	eax, DWORD PTR _buffer_max$[ebp]
push	eax
mov	ecx, DWORD PTR _buffer$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _service$[ebp]
mov	edx, DWORD PTR [ecx]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN1@FT_Get_Gly
push	OFFSET $SG11367
push	3661					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Track_Kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@FT_Get_Tra
push	OFFSET $SG10942
push	3109					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN8@FT_Get_Tra
cmp	DWORD PTR _akerning$[ebp], 0
jne	SHORT $LN5@FT_Get_Tra
push	OFFSET $SG10944
push	3112					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN8@FT_Get_Tra
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
mov	DWORD PTR __tmp_$1[ebp], 0
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+32], 0
je	SHORT $LN2@FT_Get_Tra
mov	esi, esp
push	OFFSET $SG10954
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _module$2[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __tmp_$1[ebp], eax
mov	edx, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _service$[ebp], edx
xor	eax, eax
jne	SHORT $LN5@FT_Get_Tra
cmp	DWORD PTR _service$[ebp], 0
jne	SHORT $LN1@FT_Get_Tra
push	OFFSET $SG10956
push	3116					
push	7
call	_FT_Throw
add	esp, 12					
or	eax, 7
jmp	SHORT $LN8@FT_Get_Tra
mov	esi, esp
mov	ecx, DWORD PTR _akerning$[ebp]
push	ecx
mov	edx, DWORD PTR _degree$[ebp]
push	edx
mov	eax, DWORD PTR _point_size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _service$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Get_Kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Get_Ker
push	OFFSET $SG10921
push	3050					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN9@FT_Get_Ker
cmp	DWORD PTR _akerning$[ebp], 0
jne	SHORT $LN7@FT_Get_Ker
push	OFFSET $SG10923
push	3053					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN9@FT_Get_Ker
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$[ebp], ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	DWORD PTR [edx+76], 0
je	$LN6@FT_Get_Ker
mov	esi, esp
mov	eax, DWORD PTR _akerning$[ebp]
push	eax
mov	ecx, DWORD PTR _right_glyph$[ebp]
push	ecx
mov	edx, DWORD PTR _left_glyph$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR [edx+76]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN6@FT_Get_Ker
cmp	DWORD PTR _kern_mode$[ebp], 2
je	$LN6@FT_Get_Ker
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _akerning$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_MulFix
add	esp, 8
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix
add	esp, 8
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _kern_mode$[ebp], 1
je	$LN6@FT_Get_Ker
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+12]
cmp	ecx, 25					
jge	SHORT $LN2@FT_Get_Ker
push	25					
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+14]
cmp	ecx, 25					
jge	SHORT $LN1@FT_Get_Ker
push	25					
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	ecx, WORD PTR [eax+14]
push	ecx
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _akerning$[ebp]
mov	eax, DWORD PTR [edx+4]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _akerning$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Render_Glyph PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _slot$[ebp], 0
je	SHORT $LN1@FT_Render_
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN2@FT_Render_
push	OFFSET $SG11697
push	4186					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN3@FT_Render_
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _library$[ebp], ecx
mov	edx, DWORD PTR _render_mode$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Render_Glyph_Internal
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Transform PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN8@FT_Set_Tra
jmp	$LN9@FT_Set_Tra
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR _internal$[ebp], ecx
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+24], 0
cmp	DWORD PTR _matrix$[ebp], 0
jne	SHORT $LN7@FT_Set_Tra
mov	eax, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax], 65536			
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+12], 65536		
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR _matrix$[ebp], ecx
jmp	SHORT $LN6@FT_Set_Tra
mov	edx, DWORD PTR _matrix$[ebp]
mov	eax, DWORD PTR _internal$[ebp]
mov	ecx, DWORD PTR [edx]
mov	DWORD PTR [eax], ecx
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR [edx+8]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _matrix$[ebp]
mov	ecx, DWORD PTR _matrix$[ebp]
mov	edx, DWORD PTR [eax+4]
or	edx, DWORD PTR [ecx+8]
jne	SHORT $LN4@FT_Set_Tra
mov	eax, DWORD PTR _matrix$[ebp]
cmp	DWORD PTR [eax], 65536			
jne	SHORT $LN4@FT_Set_Tra
mov	ecx, DWORD PTR _matrix$[ebp]
cmp	DWORD PTR [ecx+12], 65536		
je	SHORT $LN5@FT_Set_Tra
mov	edx, DWORD PTR _internal$[ebp]
mov	eax, DWORD PTR [edx+24]
or	eax, 1
mov	ecx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [ecx+24], eax
cmp	DWORD PTR _delta$[ebp], 0
jne	SHORT $LN3@FT_Set_Tra
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+16], 0
mov	eax, DWORD PTR _internal$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _internal$[ebp]
add	ecx, 16					
mov	DWORD PTR _delta$[ebp], ecx
jmp	SHORT $LN2@FT_Set_Tra
mov	edx, DWORD PTR _delta$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+16], eax
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _delta$[ebp]
mov	ecx, DWORD PTR _delta$[ebp]
mov	edx, DWORD PTR [eax]
or	edx, DWORD PTR [ecx+4]
je	SHORT $LN9@FT_Set_Tra
mov	eax, DWORD PTR _internal$[ebp]
mov	ecx, DWORD PTR [eax+24]
or	ecx, 2
mov	edx, DWORD PTR _internal$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Load_Char PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN2@FT_Load_Ch
push	OFFSET $SG9630
push	854					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN3@FT_Load_Ch
mov	eax, DWORD PTR _char_code$[ebp]
mov	DWORD PTR _glyph_index$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+92], 0
je	SHORT $LN1@FT_Load_Ch
mov	edx, DWORD PTR _char_code$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Get_Char_Index
add	esp, 8
mov	DWORD PTR _glyph_index$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Load_Glyph
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Load_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	BYTE PTR _autohint$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR _ttface$[ebp], eax
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN47@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+88], 0
je	SHORT $LN47@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+84], 0
jne	SHORT $LN48@FT_Load_Gl
push	OFFSET $SG9552
push	607					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN49@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _slot$[ebp], ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_ft_glyphslot_clear
add	esp, 4
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	DWORD PTR _hinter$[ebp], edx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1024				
je	SHORT $LN46@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 2049				
mov	DWORD PTR _load_flags$[ebp], ecx
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1
je	SHORT $LN45@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 10					
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, -5					
mov	DWORD PTR _load_flags$[ebp], ecx
cmp	DWORD PTR _hinter$[ebp], 0
je	$LN44@FT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2
jne	$LN44@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 32768				
jne	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 256				
je	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 512				
jne	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 8192				
jne	$LN44@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 2048				
jne	SHORT $LN43@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+8], 0
jne	SHORT $LN42@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx], 0
jne	SHORT $LN43@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax], 0
jne	$LN44@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+8], 0
je	$LN44@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 32					
jne	SHORT $LN40@FT_Load_Gl
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
and	eax, 1024				
jne	SHORT $LN41@FT_Load_Gl
mov	BYTE PTR _autohint$[ebp], 1
jmp	SHORT $LN44@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
sar	ecx, 16					
and	ecx, 15					
mov	DWORD PTR _mode$8[ebp], ecx
cmp	DWORD PTR _mode$8[ebp], 1
je	SHORT $LN37@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
movzx	ecx, BYTE PTR [eax+52]
test	ecx, ecx
jne	SHORT $LN37@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 8
je	SHORT $LN44@FT_Load_Gl
mov	ecx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [ecx+696], 0
je	SHORT $LN44@FT_Load_Gl
mov	edx, DWORD PTR _ttface$[ebp]
movzx	eax, WORD PTR [edx+286]
test	eax, eax
jne	SHORT $LN44@FT_Load_Gl
mov	ecx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [ecx+628], 0
jne	SHORT $LN44@FT_Load_Gl
mov	edx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [edx+636], 0
jne	SHORT $LN44@FT_Load_Gl
mov	BYTE PTR _autohint$[ebp], 1
movzx	eax, BYTE PTR _autohint$[ebp]
test	eax, eax
je	$LN36@FT_Load_Gl
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 2
je	SHORT $LN35@FT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 8
jne	SHORT $LN35@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 16384				
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+72]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN35@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+72], 1651078259		
jne	SHORT $LN35@FT_Load_Gl
jmp	$Load_Ok$51
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	DWORD PTR _internal$6[ebp], edx
mov	eax, DWORD PTR _internal$6[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _transform_flags$5[ebp], ecx
mov	edx, DWORD PTR _internal$6[ebp]
mov	DWORD PTR [edx+24], 0
mov	eax, DWORD PTR _hinter$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _hinting$7[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
mov	edx, DWORD PTR _hinter$[ebp]
push	edx
mov	eax, DWORD PTR _hinting$7[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _internal$6[ebp]
mov	eax, DWORD PTR _transform_flags$5[ebp]
mov	DWORD PTR [edx+24], eax
jmp	SHORT $Load_Ok$51
mov	esi, esp
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR [ecx+72]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN32@FT_Load_Gl
jmp	$Exit$52
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+72], 1869968492		
jne	SHORT $Load_Ok$51
mov	ecx, DWORD PTR _slot$[ebp]
add	ecx, 108				
push	ecx
call	_FT_Outline_Check
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN30@FT_Load_Gl
jmp	$Exit$52
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2
jne	SHORT $Load_Ok$51
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 16					
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
call	_ft_glyphslot_grid_fit_metrics
add	esp, 8
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 16					
je	SHORT $LN28@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	DWORD PTR [eax+64], 0
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR [ecx+68], eax
jmp	SHORT $LN27@FT_Load_Gl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	DWORD PTR [ecx+64], eax
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+68], 0
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 8192				
jne	SHORT $LN26@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 1
je	SHORT $LN26@FT_Load_Gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
add	eax, 12					
mov	DWORD PTR _metrics$4[ebp], eax
push	64					
mov	ecx, DWORD PTR _metrics$4[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+56]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	edx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [edx+56], eax
push	64					
mov	eax, DWORD PTR _metrics$4[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+60]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _slot$[ebp]
mov	DWORD PTR [ecx+60], eax
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2048				
jne	$LN18@FT_Load_Gl
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR _internal$3[ebp], ecx
mov	edx, DWORD PTR _internal$3[ebp]
cmp	DWORD PTR [edx+24], 0
je	$LN18@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_ft_lookup_glyph_renderer
add	esp, 4
mov	DWORD PTR _renderer$2[ebp], eax
cmp	DWORD PTR _renderer$2[ebp], 0
je	SHORT $LN23@FT_Load_Gl
mov	ecx, DWORD PTR _internal$3[ebp]
add	ecx, 16					
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _internal$3[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _renderer$2[ebp]
push	ecx
mov	edx, DWORD PTR _renderer$2[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+44]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN22@FT_Load_Gl
mov	edx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [edx+72], 1869968492		
jne	SHORT $LN22@FT_Load_Gl
mov	eax, DWORD PTR _internal$3[ebp]
mov	ecx, DWORD PTR [eax+24]
and	ecx, 1
je	SHORT $LN20@FT_Load_Gl
mov	edx, DWORD PTR _internal$3[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Transform
add	esp, 8
mov	ecx, DWORD PTR _internal$3[ebp]
mov	edx, DWORD PTR [ecx+24]
and	edx, 2
je	SHORT $LN22@FT_Load_Gl
mov	eax, DWORD PTR _internal$3[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _internal$3[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
add	ecx, 108				
push	ecx
call	_FT_Outline_Translate
add	esp, 12					
mov	edx, DWORD PTR _internal$3[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
add	eax, 64					
push	eax
call	_FT_Vector_Transform
add	esp, 8
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN17@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+64]
push	ecx
push	OFFSET $SG9601
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN18@FT_Load_Gl
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN13@FT_Load_Gl
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+68]
push	eax
push	OFFSET $SG9606
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN14@FT_Load_Gl
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN9@FT_Load_Gl
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+56]
push	edx
push	OFFSET $SG9611
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN10@FT_Load_Gl
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Load_Gl
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+60]
push	ecx
push	OFFSET $SG9616
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN6@FT_Load_Gl
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $Exit$52
mov	eax, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [eax+72], 1651078259		
je	SHORT $Exit$52
mov	ecx, DWORD PTR _slot$[ebp]
cmp	DWORD PTR [ecx+72], 1668246896		
je	SHORT $Exit$52
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 4
je	SHORT $Exit$52
mov	eax, DWORD PTR _load_flags$[ebp]
sar	eax, 16					
and	eax, 15					
mov	DWORD PTR _mode$1[ebp], eax
jne	SHORT $LN1@FT_Load_Gl
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 4096				
je	SHORT $LN1@FT_Load_Gl
mov	DWORD PTR _mode$1[ebp], 2
mov	edx, DWORD PTR _mode$1[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_FT_Render_Glyph
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Set_Pixel_Sizes PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _pixel_width$[ebp], 0
jne	SHORT $LN7@FT_Set_Pix
mov	eax, DWORD PTR _pixel_height$[ebp]
mov	DWORD PTR _pixel_width$[ebp], eax
jmp	SHORT $LN6@FT_Set_Pix
cmp	DWORD PTR _pixel_height$[ebp], 0
jne	SHORT $LN6@FT_Set_Pix
mov	ecx, DWORD PTR _pixel_width$[ebp]
mov	DWORD PTR _pixel_height$[ebp], ecx
cmp	DWORD PTR _pixel_width$[ebp], 1
jae	SHORT $LN4@FT_Set_Pix
mov	DWORD PTR _pixel_width$[ebp], 1
cmp	DWORD PTR _pixel_height$[ebp], 1
jae	SHORT $LN3@FT_Set_Pix
mov	DWORD PTR _pixel_height$[ebp], 1
cmp	DWORD PTR _pixel_width$[ebp], 65535	
jb	SHORT $LN2@FT_Set_Pix
mov	DWORD PTR _pixel_width$[ebp], 65535	
cmp	DWORD PTR _pixel_height$[ebp], 65535	
jb	SHORT $LN1@FT_Set_Pix
mov	DWORD PTR _pixel_height$[ebp], 65535	
mov	DWORD PTR _req$[ebp], 0
mov	edx, DWORD PTR _pixel_width$[ebp]
shl	edx, 6
mov	DWORD PTR _req$[ebp+4], edx
mov	eax, DWORD PTR _pixel_height$[ebp]
shl	eax, 6
mov	DWORD PTR _req$[ebp+8], eax
mov	DWORD PTR _req$[ebp+12], 0
mov	DWORD PTR _req$[ebp+16], 0
lea	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Request_Size
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@FT_Set_Pix
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN11@FT_Set_Pix
DD	-28					
DD	20					
DD	$LN10@FT_Set_Pix
DB	114					
DB	101					
DB	113					
DB	0
ENDP
_FT_Set_Char_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
cmp	DWORD PTR _char_width$[ebp], 0
jne	SHORT $LN9@FT_Set_Cha
mov	eax, DWORD PTR _char_height$[ebp]
mov	DWORD PTR _char_width$[ebp], eax
jmp	SHORT $LN8@FT_Set_Cha
cmp	DWORD PTR _char_height$[ebp], 0
jne	SHORT $LN8@FT_Set_Cha
mov	ecx, DWORD PTR _char_width$[ebp]
mov	DWORD PTR _char_height$[ebp], ecx
cmp	DWORD PTR _horz_resolution$[ebp], 0
jne	SHORT $LN6@FT_Set_Cha
mov	edx, DWORD PTR _vert_resolution$[ebp]
mov	DWORD PTR _horz_resolution$[ebp], edx
jmp	SHORT $LN5@FT_Set_Cha
cmp	DWORD PTR _vert_resolution$[ebp], 0
jne	SHORT $LN5@FT_Set_Cha
mov	eax, DWORD PTR _horz_resolution$[ebp]
mov	DWORD PTR _vert_resolution$[ebp], eax
cmp	DWORD PTR _char_width$[ebp], 64		
jge	SHORT $LN3@FT_Set_Cha
mov	DWORD PTR _char_width$[ebp], 64		
cmp	DWORD PTR _char_height$[ebp], 64	
jge	SHORT $LN2@FT_Set_Cha
mov	DWORD PTR _char_height$[ebp], 64	
cmp	DWORD PTR _horz_resolution$[ebp], 0
jne	SHORT $LN1@FT_Set_Cha
mov	DWORD PTR _vert_resolution$[ebp], 72	
mov	ecx, DWORD PTR _vert_resolution$[ebp]
mov	DWORD PTR _horz_resolution$[ebp], ecx
mov	DWORD PTR _req$[ebp], 0
mov	edx, DWORD PTR _char_width$[ebp]
mov	DWORD PTR _req$[ebp+4], edx
mov	eax, DWORD PTR _char_height$[ebp]
mov	DWORD PTR _req$[ebp+8], eax
mov	ecx, DWORD PTR _horz_resolution$[ebp]
mov	DWORD PTR _req$[ebp+12], ecx
mov	edx, DWORD PTR _vert_resolution$[ebp]
mov	DWORD PTR _req$[ebp+16], edx
lea	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Request_Size
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@FT_Set_Cha
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN13@FT_Set_Cha
DD	-28					
DD	20					
DD	$LN12@FT_Set_Cha
DB	114					
DB	101					
DB	113					
DB	0
ENDP
_FT_Request_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN42@FT_Request
push	OFFSET $SG10815
push	2894					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN43@FT_Request
cmp	DWORD PTR _req$[ebp], 0
je	SHORT $LN40@FT_Request
mov	eax, DWORD PTR _req$[ebp]
cmp	DWORD PTR [eax+4], 0
jl	SHORT $LN40@FT_Request
mov	ecx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [ecx+8], 0
jl	SHORT $LN40@FT_Request
mov	edx, DWORD PTR _req$[ebp]
cmp	DWORD PTR [edx], 5
jl	SHORT $LN41@FT_Request
push	OFFSET $SG10818
push	2898					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN43@FT_Request
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _clazz$[ebp], edx
mov	eax, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [eax+88], 0
je	$LN39@FT_Request
mov	esi, esp
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+88]
push	eax
mov	ecx, DWORD PTR _clazz$[ebp]
mov	edx, DWORD PTR [ecx+88]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$3[ebp], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 12					
mov	DWORD PTR _metrics$2[ebp], ecx
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN35@FT_Request
push	OFFSET $SG10826
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN38@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN31@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
push	OFFSET $SG10831
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN36@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN27@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	OFFSET $SG10836
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN32@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN23@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10841
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN28@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN19@FT_Request
mov	edx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10846
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN24@FT_Request
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN15@FT_Request
mov	eax, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10851
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN20@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN11@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10856
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN16@FT_Request
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN7@FT_Request
mov	edx, DWORD PTR _metrics$2[ebp]
movzx	eax, WORD PTR [edx]
push	eax
push	OFFSET $SG10861
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN12@FT_Request
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN3@FT_Request
mov	ecx, DWORD PTR _metrics$2[ebp]
movzx	edx, WORD PTR [ecx+2]
push	edx
push	OFFSET $SG10866
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN8@FT_Request
mov	eax, DWORD PTR _error$3[ebp]
jmp	SHORT $LN43@FT_Request
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 1
jne	SHORT $LN2@FT_Request
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
je	SHORT $LN2@FT_Request
lea	edx, DWORD PTR _strike_index$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Match_Size
add	esp, 16					
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
je	SHORT $LN1@FT_Request
mov	eax, DWORD PTR _error$1[ebp]
jmp	SHORT $LN43@FT_Request
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Select_Size
add	esp, 8
jmp	SHORT $LN43@FT_Request
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Request_Metrics
add	esp, 8
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN47@FT_Request
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN46@FT_Request
DD	-12					
DD	4
DD	$LN45@FT_Request
DB	115					
DB	116					
DB	114					
DB	105					
DB	107					
DB	101					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_FT_Select_Size PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $LN40@FT_Select_
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
jne	SHORT $LN41@FT_Select_
push	OFFSET $SG10753
push	2841					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN42@FT_Select_
cmp	DWORD PTR _strike_index$[ebp], 0
jl	SHORT $LN38@FT_Select_
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _strike_index$[ebp]
cmp	eax, DWORD PTR [edx+28]
jl	SHORT $LN39@FT_Select_
push	OFFSET $SG10756
push	2844					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN42@FT_Select_
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _clazz$[ebp], eax
mov	ecx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [ecx+92], 0
je	$LN37@FT_Select_
mov	esi, esp
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+92]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$2[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
add	edx, 12					
mov	DWORD PTR _metrics$1[ebp], edx
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN33@FT_Select_
push	OFFSET $SG10765
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN36@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN29@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+4]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$1[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
push	OFFSET $SG10770
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN34@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN25@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+8]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _metrics$1[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
push	OFFSET $SG10775
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN30@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN21@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+12]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10780
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN26@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN17@FT_Select_
mov	eax, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+16]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10785
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN22@FT_Select_
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN13@FT_Select_
mov	ecx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+20]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10790
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN18@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN9@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+24]
divsd	xmm0, QWORD PTR __real@4050000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10795
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@FT_Select_
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN5@FT_Select_
mov	eax, DWORD PTR _metrics$1[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG10800
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN10@FT_Select_
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN1@FT_Select_
mov	edx, DWORD PTR _metrics$1[ebp]
movzx	eax, WORD PTR [edx+2]
push	eax
push	OFFSET $SG10805
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN6@FT_Select_
mov	eax, DWORD PTR _error$2[ebp]
jmp	SHORT $LN42@FT_Select_
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_Select_Metrics
add	esp, 8
xor	eax, eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Done_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 35		
cmp	DWORD PTR _face$[ebp], 0
je	$LN7@FT_Done_Fa
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+96], 0
je	$LN7@FT_Done_Fa
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+56]
sub	eax, 1
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	DWORD PTR [edx+56], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+56], 0
jle	SHORT $LN6@FT_Done_Fa
mov	DWORD PTR _error$[ebp], 0
jmp	SHORT $LN7@FT_Done_Fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
add	ecx, 16					
push	ecx
call	_FT_List_Find
add	esp, 8
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@FT_Done_Fa
mov	edx, DWORD PTR _node$[ebp]
push	edx
mov	eax, DWORD PTR _driver$[ebp]
add	eax, 16					
push	eax
call	_FT_List_Remove
add	esp, 8
mov	ecx, DWORD PTR _node$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _node$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@FT_Done_Fa
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_destroy_face
add	esp, 12					
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_Reference_Face PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN1@FT_Referen
push	OFFSET $SG10476
push	2391					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN2@FT_Referen
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+56]
add	edx, 1
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR [ecx+56], edx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_FT_Attach_Stream PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN4@FT_Attach_
push	OFFSET $SG10465
push	2357					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN5@FT_Attach_
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$[ebp], ecx
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN3@FT_Attach_
push	OFFSET $SG10467
push	2361					
push	34					
call	_FT_Throw
add	esp, 12					
or	eax, 34					
jmp	$LN5@FT_Attach_
lea	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _parameters$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@FT_Attach_
jmp	SHORT $Exit$12
mov	DWORD PTR _error$[ebp], 7
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _clazz$[ebp], ecx
mov	edx, DWORD PTR _clazz$[ebp]
cmp	DWORD PTR [edx+80], 0
je	SHORT $LN1@FT_Attach_
mov	esi, esp
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _clazz$[ebp]
mov	eax, DWORD PTR [edx+80]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _parameters$[ebp]
cmp	DWORD PTR [ecx+16], 0
je	SHORT $LN7@FT_Attach_
mov	edx, DWORD PTR _parameters$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 2
je	SHORT $LN7@FT_Attach_
mov	BYTE PTR tv95[ebp], 1
jmp	SHORT $LN8@FT_Attach_
mov	BYTE PTR tv95[ebp], 0
movzx	ecx, BYTE PTR tv95[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@FT_Attach_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN10@FT_Attach_
DD	-8					
DD	4
DD	$LN9@FT_Attach_
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
ENDP
_FT_Attach_File PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _filepathname$[ebp], 0
jne	SHORT $LN1@FT_Attach_
push	OFFSET $SG10452
push	2331					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN2@FT_Attach_
mov	DWORD PTR _open$[ebp+16], 0
mov	DWORD PTR _open$[ebp], 4
mov	eax, DWORD PTR _filepathname$[ebp]
mov	DWORD PTR _open$[ebp+12], eax
lea	ecx, DWORD PTR _open$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Attach_Stream
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_Attach_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@FT_Attach_
DD	-36					
DD	32					
DD	$LN4@FT_Attach_
DB	111					
DB	112					
DB	101					
DB	110					
DB	0
ENDP
_FT_Open_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 104				
push	edi
lea	edi, DWORD PTR [ebp-104]
mov	ecx, 26					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _driver$[ebp], 0
mov	DWORD PTR _memory$[ebp], 0
mov	DWORD PTR _stream$[ebp], 0
mov	DWORD PTR _face$[ebp], 0
mov	DWORD PTR _node$[ebp], 0
cmp	DWORD PTR _aface$[ebp], 0
jne	SHORT $LN56@FT_Open_Fa
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN57@FT_Open_Fa
cmp	DWORD PTR _args$[ebp], 0
jne	SHORT $LN58@FT_Open_Fa
push	OFFSET $SG10358
push	2084					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN59@FT_Open_Fa
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 2
je	SHORT $LN61@FT_Open_Fa
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+16], 0
je	SHORT $LN61@FT_Open_Fa
mov	BYTE PTR tv77[ebp], 1
jmp	SHORT $LN62@FT_Open_Fa
mov	BYTE PTR tv77[ebp], 0
mov	al, BYTE PTR tv77[ebp]
mov	BYTE PTR _external_stream$[ebp], al
lea	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _args$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Stream_New
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN55@FT_Open_Fa
jmp	$Fail3$69
mov	ecx, DWORD PTR _library$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 8
je	$LN54@FT_Open_Fa
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+20], 0
je	$LN54@FT_Open_Fa
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _driver$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax]
and	ecx, 1
je	SHORT $LN53@FT_Open_Fa
mov	DWORD PTR _num_params$8[ebp], 0
mov	DWORD PTR _params$7[ebp], 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 16					
je	SHORT $LN52@FT_Open_Fa
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _num_params$8[ebp], edx
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _params$7[ebp], ecx
lea	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _params$7[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$8[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
lea	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _driver$[ebp]
push	edx
call	_open_face
add	esp, 28					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN51@FT_Open_Fa
jmp	$Success$70
jmp	SHORT $LN50@FT_Open_Fa
push	OFFSET $SG10372
push	2121					
push	32					
call	_FT_Throw
add	esp, 12					
or	eax, 32					
mov	DWORD PTR _error$[ebp], eax
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
jmp	$Fail$71
jmp	$Success$70
mov	DWORD PTR _error$[ebp], 11		
mov	edx, DWORD PTR _library$[ebp]
add	edx, 20					
mov	DWORD PTR _cur$[ebp], edx
mov	eax, DWORD PTR _library$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _cur$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN48@FT_Open_Fa
mov	ecx, DWORD PTR _cur$[ebp]
add	ecx, 4
mov	DWORD PTR _cur$[ebp], ecx
mov	edx, DWORD PTR _cur$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	$Fail3$69
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx]
and	edx, 1
je	$LN45@FT_Open_Fa
mov	DWORD PTR _num_params$6[ebp], 0
mov	DWORD PTR _params$5[ebp], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _cur$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 16					
je	SHORT $LN44@FT_Open_Fa
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _num_params$6[ebp], ecx
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _params$5[ebp], eax
lea	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _params$5[ebp]
push	edx
mov	eax, DWORD PTR _num_params$6[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
movzx	edx, BYTE PTR _external_stream$[ebp]
push	edx
lea	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
call	_open_face
add	esp, 28					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN43@FT_Open_Fa
jmp	$Success$70
push	OFFSET $SG10386
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _cur$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN42@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 142				
jne	SHORT $LN42@FT_Open_Fa
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
test	eax, eax
je	SHORT $LN41@FT_Open_Fa
jmp	SHORT $Fail3$69
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _params$5[ebp]
push	edx
mov	eax, DWORD PTR _num_params$6[ebp]
push	eax
mov	ecx, DWORD PTR _face_index$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_open_face_PS_from_sfnt_stream
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN42@FT_Open_Fa
movzx	ecx, BYTE PTR _external_stream$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN59@FT_Open_Fa
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 2
je	SHORT $LN45@FT_Open_Fa
jmp	SHORT $Fail3$69
jmp	$LN47@FT_Open_Fa
mov	ecx, DWORD PTR _error$[ebp]
and	ecx, 255				
cmp	ecx, 81					
je	SHORT $LN38@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
je	SHORT $LN38@FT_Open_Fa
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 85					
je	SHORT $LN38@FT_Open_Fa
jmp	SHORT $Fail2$72
mov	ecx, DWORD PTR _args$[ebp]
push	ecx
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_load_mac_face
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN37@FT_Open_Fa
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN59@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 2
je	SHORT $LN36@FT_Open_Fa
jmp	SHORT $Fail2$72
push	OFFSET $SG10394
push	2210					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
movzx	eax, BYTE PTR _external_stream$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Free
add	esp, 8
jmp	$Fail$71
mov	edx, 4
imul	eax, edx, 7
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN34@FT_Open_Fa
push	OFFSET $SG10399
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $Success$70
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	12					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _node$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@FT_Open_Fa
jmp	$Fail$71
mov	ecx, DWORD PTR _node$[ebp]
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _node$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
add	edx, 16					
push	edx
call	_FT_List_Add
add	esp, 8
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN29@FT_Open_Fa
push	OFFSET $SG10406
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN30@FT_Open_Fa
cmp	DWORD PTR _face_index$[ebp], 0
jl	SHORT $LN26@FT_Open_Fa
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_FT_New_GlyphSlot
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@FT_Open_Fa
jmp	$Fail$71
mov	ecx, 4
imul	edx, ecx, 7
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN23@FT_Open_Fa
push	OFFSET $SG10415
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN24@FT_Open_Fa
lea	ecx, DWORD PTR _size$4[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_New_Size
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@FT_Open_Fa
jmp	$Fail$71
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _size$4[ebp]
mov	DWORD PTR [eax+88], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	SHORT $LN19@FT_Open_Fa
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+74]
test	edx, edx
jge	SHORT $LN18@FT_Open_Fa
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+74]
neg	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	WORD PTR [edx+74], cx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 32					
jne	SHORT $LN19@FT_Open_Fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	cx, WORD PTR [eax+74]
mov	WORD PTR [edx+78], cx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 2
je	SHORT $LN16@FT_Open_Fa
mov	DWORD PTR _i$3[ebp], 0
jmp	SHORT $LN15@FT_Open_Fa
mov	ecx, DWORD PTR _i$3[ebp]
add	ecx, 1
mov	DWORD PTR _i$3[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _i$3[ebp]
cmp	eax, DWORD PTR [edx+28]
jge	SHORT $LN16@FT_Open_Fa
mov	ecx, DWORD PTR _i$3[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _face$[ebp]
add	ecx, DWORD PTR [edx+32]
mov	DWORD PTR _bsize$2[ebp], ecx
mov	eax, DWORD PTR _bsize$2[ebp]
movsx	ecx, WORD PTR [eax]
test	ecx, ecx
jge	SHORT $LN12@FT_Open_Fa
mov	edx, DWORD PTR _bsize$2[ebp]
movsx	eax, WORD PTR [edx]
neg	eax
mov	ecx, DWORD PTR _bsize$2[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _bsize$2[ebp]
cmp	DWORD PTR [edx+8], 0
jge	SHORT $LN11@FT_Open_Fa
mov	eax, DWORD PTR _bsize$2[ebp]
mov	ecx, DWORD PTR [eax+8]
neg	ecx
movsx	edx, cx
mov	eax, DWORD PTR _bsize$2[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _bsize$2[ebp]
cmp	DWORD PTR [ecx+12], 0
jge	SHORT $LN10@FT_Open_Fa
mov	edx, DWORD PTR _bsize$2[ebp]
mov	eax, DWORD PTR [edx+12]
neg	eax
mov	ecx, DWORD PTR _bsize$2[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN14@FT_Open_Fa
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	DWORD PTR _internal$1[ebp], eax
mov	ecx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [ecx], 65536			
mov	edx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [ecx+12], 65536		
mov	edx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [edx+16], 0
mov	eax, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _internal$1[ebp]
mov	DWORD PTR [ecx+56], 1
cmp	DWORD PTR _aface$[ebp], 0
je	SHORT $LN9@FT_Open_Fa
mov	edx, DWORD PTR _aface$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN8@FT_Open_Fa
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_FT_Done_Face
add	esp, 4
jmp	SHORT $Exit$73
cmp	DWORD PTR _node$[ebp], 0
je	SHORT $LN7@FT_Open_Fa
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_FT_Done_Face
add	esp, 4
jmp	SHORT $Exit$73
cmp	DWORD PTR _face$[ebp], 0
je	SHORT $Exit$73
mov	eax, DWORD PTR _driver$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_destroy_face
add	esp, 12					
mov	eax, 4
imul	ecx, eax, 7
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN3@FT_Open_Fa
mov	edx, DWORD PTR _error$[ebp]
push	edx
push	OFFSET $SG10444
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $Exit$73
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN68@FT_Open_Fa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 104				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN67@FT_Open_Fa
DD	-8					
DD	4
DD	$LN63@FT_Open_Fa
DD	-28					
DD	4
DD	$LN64@FT_Open_Fa
DD	-40					
DD	4
DD	$LN65@FT_Open_Fa
DD	-84					
DD	4
DD	$LN66@FT_Open_Fa
DB	115					
DB	105					
DB	122					
DB	101					
DB	0
DB	102					
DB	97					
DB	99					
DB	101					
DB	0
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_FT_New_Memory_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _file_base$[ebp], 0
jne	SHORT $LN1@FT_New_Mem
push	OFFSET $SG9832
push	1253					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN2@FT_New_Mem
mov	DWORD PTR _args$[ebp], 1
mov	eax, DWORD PTR _file_base$[ebp]
mov	DWORD PTR _args$[ebp+4], eax
mov	ecx, DWORD PTR _file_size$[ebp]
mov	DWORD PTR _args$[ebp+8], ecx
mov	DWORD PTR _args$[ebp+16], 0
mov	edx, DWORD PTR _aface$[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
lea	ecx, DWORD PTR _args$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_FT_Open_Face
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_New_Mem
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN5@FT_New_Mem
DD	-36					
DD	32					
DD	$LN4@FT_New_Mem
DB	97					
DB	114					
DB	103					
DB	115					
DB	0
ENDP
_FT_New_Face PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
cmp	DWORD PTR _pathname$[ebp], 0
jne	SHORT $LN1@FT_New_Fac
push	OFFSET $SG9816
push	1227					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN2@FT_New_Fac
mov	DWORD PTR _args$[ebp], 4
mov	eax, DWORD PTR _pathname$[ebp]
mov	DWORD PTR _args$[ebp+12], eax
mov	DWORD PTR _args$[ebp+16], 0
mov	ecx, DWORD PTR _aface$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
lea	eax, DWORD PTR _args$[ebp]
push	eax
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Open_Face
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@FT_New_Fac
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN5@FT_New_Fac
DD	-36					
DD	32					
DD	$LN4@FT_New_Fac
DB	97					
DB	114					
DB	103					
DB	115					
DB	0
ENDP
