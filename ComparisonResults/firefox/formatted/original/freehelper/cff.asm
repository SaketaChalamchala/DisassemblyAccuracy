_cf2_doFlex PROC
push	ebp
mov	ebp, esp
sub	esp, 124				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 31					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _vals$[ebp+ecx], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _curY$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _vals$[ebp+ecx], eax
mov	DWORD PTR _index$[ebp], 0
mov	ecx, 1
imul	edx, ecx, 9
mov	eax, DWORD PTR _readFromStack$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
test	ecx, ecx
jne	SHORT $LN19@cf2_doFlex
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN20@cf2_doFlex
mov	DWORD PTR tv72[ebp], 0
mov	dl, BYTE PTR tv72[ebp]
mov	BYTE PTR _isHFlex$[ebp], dl
movzx	eax, BYTE PTR _isHFlex$[ebp]
test	eax, eax
je	SHORT $LN21@cf2_doFlex
mov	DWORD PTR tv76[ebp], 9
jmp	SHORT $LN22@cf2_doFlex
mov	DWORD PTR tv76[ebp], 10			
mov	ecx, DWORD PTR tv76[ebp]
mov	DWORD PTR _top$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN16@cf2_doFlex
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _top$[ebp]
jge	SHORT $LN14@cf2_doFlex
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _vals$[ebp+edx*4]
mov	DWORD PTR _vals$[ebp+ecx*4+8], eax
mov	ecx, DWORD PTR _readFromStack$[ebp]
add	ecx, DWORD PTR _i$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN13@cf2_doFlex
mov	eax, DWORD PTR _index$[ebp]
mov	DWORD PTR tv93[ebp], eax
mov	ecx, DWORD PTR _index$[ebp]
add	ecx, 1
mov	DWORD PTR _index$[ebp], ecx
mov	edx, DWORD PTR tv93[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
add	eax, DWORD PTR _vals$[ebp+ecx*4+8]
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR _vals$[ebp+edx*4+8], eax
jmp	SHORT $LN15@cf2_doFlex
movzx	eax, BYTE PTR _isHFlex$[ebp]
test	eax, eax
je	SHORT $LN12@cf2_doFlex
mov	ecx, 4
imul	edx, ecx, 11
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _vals$[ebp+edx], ecx
movzx	edx, BYTE PTR _doConditionalLastRead$[ebp]
test	edx, edx
je	$LN11@cf2_doFlex
mov	eax, 4
imul	ecx, eax, 10
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR _vals$[ebp+ecx]
sub	eax, DWORD PTR [edx]
jns	SHORT $LN23@cf2_doFlex
mov	ecx, 4
imul	edx, ecx, 10
mov	eax, DWORD PTR _curX$[ebp]
mov	ecx, DWORD PTR _vals$[ebp+edx]
sub	ecx, DWORD PTR [eax]
neg	ecx
mov	DWORD PTR tv149[ebp], ecx
jmp	SHORT $LN24@cf2_doFlex
mov	edx, 4
imul	eax, edx, 10
mov	ecx, DWORD PTR _curX$[ebp]
mov	edx, DWORD PTR _vals$[ebp+eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR tv149[ebp], edx
mov	eax, 4
imul	ecx, eax, 11
mov	edx, DWORD PTR _curY$[ebp]
mov	eax, DWORD PTR _vals$[ebp+ecx]
sub	eax, DWORD PTR [edx]
jns	SHORT $LN25@cf2_doFlex
mov	ecx, 4
imul	edx, ecx, 11
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR _vals$[ebp+edx]
sub	ecx, DWORD PTR [eax]
neg	ecx
mov	DWORD PTR tv161[ebp], ecx
jmp	SHORT $LN26@cf2_doFlex
mov	edx, 4
imul	eax, edx, 11
mov	ecx, DWORD PTR _curY$[ebp]
mov	edx, DWORD PTR _vals$[ebp+eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR tv161[ebp], edx
mov	eax, DWORD PTR tv149[ebp]
cmp	eax, DWORD PTR tv161[ebp]
jle	SHORT $LN27@cf2_doFlex
mov	BYTE PTR tv163[ebp], 1
jmp	SHORT $LN28@cf2_doFlex
mov	BYTE PTR tv163[ebp], 0
mov	cl, BYTE PTR tv163[ebp]
mov	BYTE PTR _lastIsX$2[ebp], cl
mov	edx, DWORD PTR _index$[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	DWORD PTR _lastVal$1[ebp], eax
movzx	ecx, BYTE PTR _lastIsX$2[ebp]
test	ecx, ecx
je	SHORT $LN10@cf2_doFlex
mov	edx, 4
imul	eax, edx, 10
mov	ecx, DWORD PTR _vals$[ebp+eax]
add	ecx, DWORD PTR _lastVal$1[ebp]
mov	edx, 4
imul	eax, edx, 12
mov	DWORD PTR _vals$[ebp+eax], ecx
mov	ecx, 4
imul	edx, ecx, 13
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _vals$[ebp+edx], ecx
jmp	SHORT $LN9@cf2_doFlex
mov	edx, 4
imul	eax, edx, 12
mov	ecx, DWORD PTR _curX$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _vals$[ebp+eax], edx
mov	eax, 4
imul	ecx, eax, 11
mov	edx, DWORD PTR _vals$[ebp+ecx]
add	edx, DWORD PTR _lastVal$1[ebp]
mov	eax, 4
imul	ecx, eax, 13
mov	DWORD PTR _vals$[ebp+ecx], edx
jmp	$LN8@cf2_doFlex
mov	edx, 1
imul	eax, edx, 10
mov	ecx, DWORD PTR _readFromStack$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
test	edx, edx
je	SHORT $LN7@cf2_doFlex
mov	eax, DWORD PTR _index$[ebp]
mov	DWORD PTR tv193[ebp], eax
mov	ecx, DWORD PTR _index$[ebp]
add	ecx, 1
mov	DWORD PTR _index$[ebp], ecx
mov	edx, DWORD PTR tv193[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	ecx, 4
imul	edx, ecx, 10
add	eax, DWORD PTR _vals$[ebp+edx]
mov	ecx, 4
imul	edx, ecx, 12
mov	DWORD PTR _vals$[ebp+edx], eax
jmp	SHORT $LN6@cf2_doFlex
mov	eax, 4
imul	ecx, eax, 12
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _vals$[ebp+ecx], eax
mov	ecx, 1
imul	edx, ecx, 11
mov	eax, DWORD PTR _readFromStack$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
test	ecx, ecx
je	SHORT $LN5@cf2_doFlex
mov	edx, 4
imul	esi, edx, 11
mov	eax, DWORD PTR _index$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _vals$[ebp+esi]
mov	edx, 4
imul	ecx, edx, 13
mov	DWORD PTR _vals$[ebp+ecx], eax
jmp	SHORT $LN8@cf2_doFlex
mov	edx, 4
imul	eax, edx, 13
mov	ecx, DWORD PTR _curY$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _vals$[ebp+eax], edx
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@cf2_doFlex
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
cmp	DWORD PTR _j$[ebp], 2
jge	SHORT $LN1@cf2_doFlex
imul	ecx, DWORD PTR _j$[ebp], 6
mov	edx, DWORD PTR _vals$[ebp+ecx*4+28]
push	edx
imul	eax, DWORD PTR _j$[ebp], 6
mov	ecx, DWORD PTR _vals$[ebp+eax*4+24]
push	ecx
imul	edx, DWORD PTR _j$[ebp], 6
mov	eax, DWORD PTR _vals$[ebp+edx*4+20]
push	eax
imul	ecx, DWORD PTR _j$[ebp], 6
mov	edx, DWORD PTR _vals$[ebp+ecx*4+16]
push	edx
imul	eax, DWORD PTR _j$[ebp], 6
mov	ecx, DWORD PTR _vals$[ebp+eax*4+12]
push	ecx
imul	edx, DWORD PTR _j$[ebp], 6
mov	eax, DWORD PTR _vals$[ebp+edx*4+8]
push	eax
mov	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
call	_cf2_glyphpath_curveTo
add	esp, 28					
jmp	SHORT $LN2@cf2_doFlex
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_clear
add	esp, 4
mov	eax, 4
imul	ecx, eax, 12
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR _vals$[ebp+ecx]
mov	DWORD PTR [edx], eax
mov	ecx, 4
imul	edx, ecx, 13
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR _vals$[ebp+edx]
mov	DWORD PTR [eax], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN31@cf2_doFlex
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN30@cf2_doFlex
DD	-64					
DD	56					
DD	$LN29@cf2_doFlex
DB	118					
DB	97					
DB	108					
DB	115					
DB	0
ENDP
_cf2_doStems PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$[ebp], eax
mov	ecx, DWORD PTR _count$[ebp]
and	ecx, 1
mov	BYTE PTR _hasWidthArg$[ebp], cl
mov	edx, DWORD PTR _hintOffset$[ebp]
mov	DWORD PTR _position$[ebp], edx
movzx	eax, BYTE PTR _hasWidthArg$[ebp]
test	eax, eax
je	SHORT $LN5@cf2_doStem
mov	ecx, DWORD PTR _haveWidth$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
jne	SHORT $LN5@cf2_doStem
push	0
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+132]
push	edx
call	_cf2_getNominalWidthX
add	esp, 4
add	esi, eax
mov	eax, DWORD PTR _width$[ebp]
mov	DWORD PTR [eax], esi
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+753]
test	eax, eax
je	SHORT $LN4@cf2_doStem
jmp	$exit$13
movzx	ecx, BYTE PTR _hasWidthArg$[ebp]
test	ecx, ecx
je	SHORT $LN8@cf2_doStem
mov	DWORD PTR tv85[ebp], 1
jmp	SHORT $LN9@cf2_doStem
mov	DWORD PTR tv85[ebp], 0
mov	edx, DWORD PTR tv85[ebp]
mov	DWORD PTR _i$[ebp], edx
jmp	SHORT $LN3@cf2_doStem
mov	eax, DWORD PTR _i$[ebp]
add	eax, 2
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN1@cf2_doStem
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _position$[ebp]
mov	DWORD PTR _position$[ebp], eax
mov	ecx, DWORD PTR _position$[ebp]
mov	DWORD PTR _stemhint$1[ebp+4], ecx
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _position$[ebp]
mov	DWORD PTR _position$[ebp], eax
mov	ecx, DWORD PTR _position$[ebp]
mov	DWORD PTR _stemhint$1[ebp+8], ecx
mov	BYTE PTR _stemhint$1[ebp], 0
mov	DWORD PTR _stemhint$1[ebp+12], 0
mov	edx, DWORD PTR _stemhint$1[ebp+12]
mov	DWORD PTR _stemhint$1[ebp+16], edx
lea	eax, DWORD PTR _stemhint$1[ebp]
push	eax
mov	ecx, DWORD PTR _stemHintArray$[ebp]
push	ecx
call	_cf2_arrstack_push
add	esp, 8
jmp	SHORT $LN2@cf2_doStem
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_clear
add	esp, 4
mov	eax, DWORD PTR _haveWidth$[ebp]
mov	BYTE PTR [eax], 1
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@cf2_doStem
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN11@cf2_doStem
DD	-44					
DD	20					
DD	$LN10@cf2_doStem
DB	115					
DB	116					
DB	101					
DB	109					
DB	104					
DB	105					
DB	110					
DB	116					
DB	0
ENDP
_cf2_hintmask_read PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _bitCount$[ebp]
push	eax
mov	ecx, DWORD PTR _hintmask$[ebp]
push	ecx
call	_cf2_hintmask_setCounts
add	esp, 8
test	eax, eax
jne	SHORT $LN19@cf2_hintma
jmp	$LN21@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
cmp	DWORD PTR [edx+12], 0
ja	SHORT $LN18@cf2_hintma
push	OFFSET $SG14497
push	150					
push	OFFSET $SG14498
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN19@cf2_hintma
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN14@cf2_hintma
push	OFFSET $SG14503
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN15@cf2_hintma
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN11@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+12]
jae	SHORT $LN4@cf2_hintma
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
call	_cf2_buf_readByte
add	esp, 4
mov	edx, DWORD PTR _hintmask$[ebp]
add	edx, DWORD PTR _i$[ebp]
mov	BYTE PTR [edx+16], al
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN7@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
add	edx, DWORD PTR _i$[ebp]
movzx	eax, BYTE PTR [edx+16]
push	eax
push	OFFSET $SG14512
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN8@cf2_hintma
jmp	SHORT $LN10@cf2_hintma
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cf2_hintma
push	OFFSET $SG14517
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN4@cf2_hintma
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmask_setCounts PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _bitCount$[ebp], 96		
jbe	SHORT $LN1@cf2_hintma
push	OFFSET $SG14482
push	115					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
push	eax
mov	eax, DWORD PTR _hintmask$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN2@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR _bitCount$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 7
shr	edx, 3
mov	eax, DWORD PTR _hintmask$[ebp]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	BYTE PTR [ecx+4], 1
mov	edx, DWORD PTR _hintmask$[ebp]
mov	BYTE PTR [edx+5], 1
mov	eax, DWORD PTR _bitCount$[ebp]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_clear PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [ecx+392], eax
pop	ebp
ret	0
ENDP
_cf2_stack_getReal PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 48					
jbe	SHORT $LN9@cf2_stack_
push	OFFSET $SG15410
push	178					
push	OFFSET $SG15411
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
cmp	DWORD PTR _idx$[ebp], eax
jb	SHORT $LN6@cf2_stack_
push	OFFSET $SG15413
push	182					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN11@cf2_stack_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+edx*8+12]
mov	DWORD PTR tv86[ebp], ecx
cmp	DWORD PTR tv86[ebp], 1
je	SHORT $LN2@cf2_stack_
cmp	DWORD PTR tv86[ebp], 2
je	SHORT $LN3@cf2_stack_
jmp	SHORT $LN1@cf2_stack_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [eax+edx*8+8]
shl	eax, 16					
jmp	SHORT $LN11@cf2_stack_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [edx+ecx*8+8], 0
jge	SHORT $LN13@cf2_stack_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+8]
neg	edx
add	edx, 8192				
sar	edx, 14					
neg	edx
mov	DWORD PTR tv143[ebp], edx
jmp	SHORT $LN14@cf2_stack_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+8]
add	edx, 8192				
sar	edx, 14					
mov	DWORD PTR tv143[ebp], edx
mov	eax, DWORD PTR tv143[ebp]
jmp	SHORT $LN11@cf2_stack_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [ecx+eax*8+8]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_stack_popFixed PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN6@cf2_stack_
push	OFFSET $SG15389
push	154					
push	161					
call	_FT_Throw
add	esp, 12					
or	eax, 161				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	$LN7@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
sub	edx, 8
mov	eax, DWORD PTR _stack$[ebp]
mov	DWORD PTR [eax+392], edx
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR tv82[ebp], eax
cmp	DWORD PTR tv82[ebp], 1
je	SHORT $LN2@cf2_stack_
cmp	DWORD PTR tv82[ebp], 2
je	SHORT $LN3@cf2_stack_
jmp	SHORT $LN1@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR [edx]
shl	eax, 16					
jmp	SHORT $LN7@cf2_stack_
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
cmp	DWORD PTR [ecx], 0
jge	SHORT $LN9@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+392]
mov	ecx, DWORD PTR [eax]
neg	ecx
add	ecx, 8192				
sar	ecx, 14					
neg	ecx
mov	DWORD PTR tv131[ebp], ecx
jmp	SHORT $LN10@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+392]
mov	ecx, DWORD PTR [eax]
add	ecx, 8192				
sar	ecx, 14					
mov	DWORD PTR tv131[ebp], ecx
mov	eax, DWORD PTR tv131[ebp]
jmp	SHORT $LN7@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+392]
mov	eax, DWORD PTR [eax]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_stack_popInt PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN2@cf2_stack_
push	OFFSET $SG15382
push	132					
push	161					
call	_FT_Throw
add	esp, 12					
or	eax, 161				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN3@cf2_stack_
mov	ecx, 8
imul	edx, ecx, -1
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
cmp	DWORD PTR [ecx+edx+4], 2
je	SHORT $LN1@cf2_stack_
push	OFFSET $SG15384
push	137					
push	160					
call	_FT_Throw
add	esp, 12					
or	eax, 160				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN3@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
sub	edx, 8
mov	eax, DWORD PTR _stack$[ebp]
mov	DWORD PTR [eax+392], edx
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR [edx]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_pushFixed PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 48
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN1@cf2_stack_
push	OFFSET $SG15377
push	116					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
jmp	SHORT $LN2@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR _val$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
add	ecx, 8
mov	edx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [edx+392], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_pushInt PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 48
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN1@cf2_stack_
push	OFFSET $SG15370
push	100					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
jmp	SHORT $LN2@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR _val$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	DWORD PTR [edx+4], 2
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
add	ecx, 8
mov	edx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [edx+392], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_count PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
sub	edx, eax
sar	edx, 3
mov	eax, edx
pop	ebp
ret	0
ENDP
_cf2_stack_free PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stack$[ebp], 0
je	SHORT $LN5@cf2_stack_
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _stack$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stack$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@cf2_stack_
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_stack_init PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _stack$[ebp], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	396					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_qalloc
add	esp, 12					
mov	DWORD PTR _stack$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR _e$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [ecx+392], eax
mov	eax, DWORD PTR _stack$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@cf2_stack_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN5@cf2_stack_
DD	-8					
DD	4
DD	$LN4@cf2_stack_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cf2_glyphpath_computeOffset PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _x2$[ebp]
sub	eax, DWORD PTR _x1$[ebp]
mov	DWORD PTR _dx$[ebp], eax
mov	ecx, DWORD PTR _y2$[ebp]
sub	ecx, DWORD PTR _y1$[ebp]
mov	DWORD PTR _dy$[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx]
movzx	ecx, BYTE PTR [eax+192]
test	ecx, ecx
je	SHORT $LN24@cf2_glyphp
mov	edx, DWORD PTR _dx$[ebp]
neg	edx
mov	DWORD PTR _dx$[ebp], edx
mov	eax, DWORD PTR _dy$[ebp]
neg	eax
mov	DWORD PTR _dy$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11666]
test	ecx, ecx
jne	SHORT $LN23@cf2_glyphp
jmp	$LN25@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	esi, DWORD PTR [edx+4]
mov	eax, DWORD PTR _y2$[ebp]
push	eax
mov	ecx, DWORD PTR _x2$[ebp]
push	ecx
mov	edx, DWORD PTR _y1$[ebp]
push	edx
mov	eax, DWORD PTR _x1$[ebp]
push	eax
call	_cf2_getWindingMomentum
add	esp, 16					
add	eax, DWORD PTR [esi+16]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+16], eax
cmp	DWORD PTR _dx$[ebp], 0
jl	$LN22@cf2_glyphp
cmp	DWORD PTR _dy$[ebp], 0
jl	$LN21@cf2_glyphp
mov	eax, DWORD PTR _dy$[ebp]
shl	eax, 1
cmp	DWORD PTR _dx$[ebp], eax
jle	SHORT $LN20@cf2_glyphp
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx], 0
jmp	SHORT $LN19@cf2_glyphp
mov	eax, DWORD PTR _dx$[ebp]
shl	eax, 1
cmp	DWORD PTR _dy$[ebp], eax
jle	SHORT $LN18@cf2_glyphp
mov	ecx, DWORD PTR _x$[ebp]
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
mov	DWORD PTR [ecx], eax
mov	ecx, DWORD PTR _y$[ebp]
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN19@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
push	edx
push	45875					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
push	eax
push	19661					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
jmp	$LN16@cf2_glyphp
imul	edx, DWORD PTR _dy$[ebp], -2
cmp	DWORD PTR _dx$[ebp], edx
jle	SHORT $LN15@cf2_glyphp
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], 0
jmp	SHORT $LN16@cf2_glyphp
mov	edx, DWORD PTR _dy$[ebp]
neg	edx
mov	eax, DWORD PTR _dx$[ebp]
shl	eax, 1
cmp	edx, eax
jle	SHORT $LN13@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
neg	edx
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _y$[ebp]
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN16@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
push	edx
push	-45874					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
push	eax
push	19661					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
jmp	$LN25@cf2_glyphp
cmp	DWORD PTR _dy$[ebp], 0
jl	$LN10@cf2_glyphp
mov	edx, DWORD PTR _dx$[ebp]
neg	edx
mov	eax, DWORD PTR _dy$[ebp]
shl	eax, 1
cmp	edx, eax
jle	SHORT $LN9@cf2_glyphp
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
shl	eax, 1
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN8@cf2_glyphp
imul	edx, DWORD PTR _dx$[ebp], -2
cmp	DWORD PTR _dy$[ebp], edx
jle	SHORT $LN7@cf2_glyphp
mov	eax, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _y$[ebp]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11692]
mov	DWORD PTR [eax], edx
jmp	SHORT $LN8@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11688]
push	ecx
push	45875					
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11692]
push	ecx
push	111411					
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx], eax
jmp	$LN25@cf2_glyphp
mov	eax, DWORD PTR _dx$[ebp]
neg	eax
imul	ecx, DWORD PTR _dy$[ebp], -2
cmp	eax, ecx
jle	SHORT $LN4@cf2_glyphp
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11692]
shl	ecx, 1
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN25@cf2_glyphp
mov	eax, DWORD PTR _dy$[ebp]
neg	eax
imul	ecx, DWORD PTR _dx$[ebp], -2
cmp	eax, ecx
jle	SHORT $LN2@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
neg	eax
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _y$[ebp]
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11692]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN25@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
push	eax
push	-45874					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
push	eax
push	111411					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_pushMove PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _params$[ebp+32], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11728]
mov	edx, DWORD PTR [eax+11732]
mov	DWORD PTR _params$[ebp], ecx
mov	DWORD PTR _params$[ebp+4], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 8
push	eax
call	_cf2_hintmap_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN1@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11740]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11736]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_moveTo
add	esp, 12					
mov	ecx, DWORD PTR _start$[ebp+4]
push	ecx
mov	edx, DWORD PTR _start$[ebp]
push	edx
lea	eax, DWORD PTR _params$[ebp+8]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	esi, esp
lea	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _params$[ebp+8]
mov	DWORD PTR [eax+11728], ecx
mov	edx, DWORD PTR _params$[ebp+12]
mov	DWORD PTR [eax+11732], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _start$[ebp]
mov	DWORD PTR [eax+11704], ecx
mov	edx, DWORD PTR _start$[ebp+4]
mov	DWORD PTR [eax+11708], edx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN5@cf2_glyphp
DD	-44					
DD	36					
DD	$LN4@cf2_glyphp
DB	112					
DB	97					
DB	114					
DB	97					
DB	109					
DB	115					
DB	0
ENDP
_cf2_glyphpath_pushPrevElem PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _intersection$[ebp], 0
mov	DWORD PTR _intersection$[ebp+4], 0
mov	BYTE PTR _useIntersection$[ebp], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [eax+11748], 2
je	SHORT $LN23@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11748], 4
je	SHORT $LN23@cf2_glyphp
push	OFFSET $SG14238
push	1247					
push	OFFSET $SG14239
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN24@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [eax+11748], 2
jne	SHORT $LN20@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11752				
mov	DWORD PTR _prevP0$[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 11760				
mov	DWORD PTR _prevP1$[ebp], edx
jmp	SHORT $LN19@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 11768				
mov	DWORD PTR _prevP0$[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11776				
mov	DWORD PTR _prevP1$[ebp], ecx
mov	edx, DWORD PTR _prevP1$[ebp]
mov	eax, DWORD PTR _nextP0$[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax]
jne	SHORT $LN17@cf2_glyphp
mov	edx, DWORD PTR _prevP1$[ebp]
mov	eax, DWORD PTR _nextP0$[ebp]
mov	ecx, DWORD PTR [edx+4]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN18@cf2_glyphp
lea	edx, DWORD PTR _intersection$[ebp]
push	edx
lea	eax, DWORD PTR _nextP1$[ebp]
push	eax
mov	ecx, DWORD PTR _nextP0$[ebp]
push	ecx
mov	edx, DWORD PTR _prevP1$[ebp]
push	edx
mov	eax, DWORD PTR _prevP0$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_computeIntersection
add	esp, 24					
mov	BYTE PTR _useIntersection$[ebp], al
movzx	edx, BYTE PTR _useIntersection$[ebp]
test	edx, edx
je	SHORT $LN18@cf2_glyphp
mov	eax, DWORD PTR _prevP1$[ebp]
mov	ecx, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _intersection$[ebp+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11728]
mov	edx, DWORD PTR [eax+11732]
mov	DWORD PTR _params$[ebp], ecx
mov	DWORD PTR _params$[ebp+4], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11748]
mov	DWORD PTR tv128[ebp], ecx
cmp	DWORD PTR tv128[ebp], 2
je	SHORT $LN13@cf2_glyphp
cmp	DWORD PTR tv128[ebp], 4
je	$LN8@cf2_glyphp
jmp	$LN14@cf2_glyphp
mov	DWORD PTR _params$[ebp+32], 2
movzx	edx, BYTE PTR _close$[ebp]
test	edx, edx
je	SHORT $LN12@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11764]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11760]
push	eax
lea	ecx, DWORD PTR _params$[ebp+8]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 3876				
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_hintPoint
add	esp, 20					
jmp	SHORT $LN11@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11764]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11760]
push	ecx
lea	edx, DWORD PTR _params$[ebp+8]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	edx, DWORD PTR _params$[ebp]
cmp	edx, DWORD PTR _params$[ebp+8]
jne	SHORT $LN9@cf2_glyphp
mov	eax, DWORD PTR _params$[ebp+4]
cmp	eax, DWORD PTR _params$[ebp+12]
je	SHORT $LN10@cf2_glyphp
mov	esi, esp
lea	ecx, DWORD PTR _params$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _params$[ebp+8]
mov	DWORD PTR [ecx+11728], edx
mov	eax, DWORD PTR _params$[ebp+12]
mov	DWORD PTR [ecx+11732], eax
jmp	$LN14@cf2_glyphp
mov	DWORD PTR _params$[ebp+32], 4
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11764]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11760]
push	ecx
lea	edx, DWORD PTR _params$[ebp+8]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11772]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11768]
push	edx
lea	eax, DWORD PTR _params$[ebp+16]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11780]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11776]
push	eax
lea	ecx, DWORD PTR _params$[ebp+24]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	esi, esp
lea	ecx, DWORD PTR _params$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+12]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _params$[ebp+24]
mov	DWORD PTR [ecx+11728], edx
mov	eax, DWORD PTR _params$[ebp+28]
mov	DWORD PTR [ecx+11732], eax
movzx	ecx, BYTE PTR _useIntersection$[ebp]
test	ecx, ecx
je	SHORT $LN6@cf2_glyphp
movzx	edx, BYTE PTR _close$[ebp]
test	edx, edx
je	$LN7@cf2_glyphp
movzx	eax, BYTE PTR _close$[ebp]
test	eax, eax
je	SHORT $LN5@cf2_glyphp
mov	ecx, DWORD PTR _nextP0$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _nextP0$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	edx, DWORD PTR _params$[ebp+8]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 3876				
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
jmp	SHORT $LN4@cf2_glyphp
mov	edx, DWORD PTR _nextP0$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _nextP0$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
lea	eax, DWORD PTR _params$[ebp+8]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _params$[ebp+8]
cmp	ecx, DWORD PTR [eax+11728]
jne	SHORT $LN2@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _params$[ebp+12]
cmp	eax, DWORD PTR [edx+11732]
je	SHORT $LN7@cf2_glyphp
mov	DWORD PTR _params$[ebp+32], 2
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11728]
mov	eax, DWORD PTR [ecx+11732]
mov	DWORD PTR _params$[ebp], edx
mov	DWORD PTR _params$[ebp+4], eax
mov	esi, esp
lea	ecx, DWORD PTR _params$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _params$[ebp+8]
mov	DWORD PTR [ecx+11728], edx
mov	eax, DWORD PTR _params$[ebp+12]
mov	DWORD PTR [ecx+11732], eax
movzx	ecx, BYTE PTR _useIntersection$[ebp]
test	ecx, ecx
je	SHORT $LN25@cf2_glyphp
mov	edx, DWORD PTR _nextP0$[ebp]
mov	eax, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _intersection$[ebp+4]
mov	DWORD PTR [edx+4], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN29@cf2_glyphp
DD	-44					
DD	36					
DD	$LN27@cf2_glyphp
DD	-68					
DD	8
DD	$LN28@cf2_glyphp
DB	105					
DB	110					
DB	116					
DB	101					
DB	114					
DB	115					
DB	101					
DB	99					
DB	116					
DB	105					
DB	111					
DB	110					
DB	0
DB	112					
DB	97					
DB	114					
DB	97					
DB	109					
DB	115					
DB	0
ENDP
_cf2_glyphpath_computeIntersection PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _u$[ebp], edx
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _u$[ebp+4], edx
mov	eax, DWORD PTR _v2$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _v$[ebp], edx
mov	eax, DWORD PTR _v2$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _v$[ebp+4], edx
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _w$[ebp], edx
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _w$[ebp+4], edx
mov	eax, DWORD PTR _v$[ebp+4]
push	eax
mov	ecx, DWORD PTR _u$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _u$[ebp+4]
push	eax
call	_FT_MulFix_i386
add	esp, 8
sub	esi, eax
mov	DWORD PTR _denominator$[ebp], esi
jne	SHORT $LN7@cf2_glyphp
xor	al, al
jmp	$LN8@cf2_glyphp
mov	ecx, DWORD PTR _denominator$[ebp]
push	ecx
mov	edx, DWORD PTR _v$[ebp+4]
push	edx
mov	eax, DWORD PTR _w$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _v$[ebp]
push	ecx
mov	edx, DWORD PTR _w$[ebp+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
sub	esi, eax
push	esi
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _s$[ebp], eax
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _s$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _u1$[ebp]
add	eax, DWORD PTR [ecx]
mov	edx, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _s$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _u1$[ebp]
add	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR _u2$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN6@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
jns	SHORT $LN10@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
neg	edx
mov	DWORD PTR tv176[ebp], edx
jmp	SHORT $LN11@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR tv176[ebp], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR tv176[ebp]
cmp	ecx, DWORD PTR [eax+11700]
jge	SHORT $LN6@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _u1$[ebp]
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR [edx+4]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN5@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
jns	SHORT $LN12@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
neg	ecx
mov	DWORD PTR tv195[ebp], ecx
jmp	SHORT $LN13@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
mov	DWORD PTR tv195[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR tv195[ebp]
cmp	eax, DWORD PTR [edx+11700]
jge	SHORT $LN5@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _u1$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR _v2$[ebp]
mov	eax, DWORD PTR [ecx]
cmp	eax, DWORD PTR [edx]
jne	SHORT $LN4@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _v1$[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
jns	SHORT $LN14@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _v1$[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
neg	eax
mov	DWORD PTR tv214[ebp], eax
jmp	SHORT $LN15@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _v1$[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
mov	DWORD PTR tv214[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR tv214[ebp]
cmp	edx, DWORD PTR [ecx+11700]
jge	SHORT $LN4@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR _v2$[ebp]
mov	edx, DWORD PTR [eax+4]
cmp	edx, DWORD PTR [ecx+4]
jne	SHORT $LN3@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
jns	SHORT $LN16@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
neg	edx
mov	DWORD PTR tv233[ebp], edx
jmp	SHORT $LN17@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	DWORD PTR tv233[ebp], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR tv233[ebp]
cmp	ecx, DWORD PTR [eax+11700]
jge	SHORT $LN3@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, eax
jns	SHORT $LN18@cf2_glyphp
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, eax
neg	ecx
mov	DWORD PTR tv258[ebp], ecx
jmp	SHORT $LN19@cf2_glyphp
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, eax
mov	DWORD PTR tv258[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR tv258[ebp]
cmp	eax, DWORD PTR [edx+11696]
jg	SHORT $LN1@cf2_glyphp
mov	ecx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [edx+4]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR [ecx+4]
sub	edx, eax
jns	SHORT $LN20@cf2_glyphp
mov	eax, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx+4]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, eax
neg	ecx
mov	DWORD PTR tv281[ebp], ecx
jmp	SHORT $LN21@cf2_glyphp
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx+4]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, eax
mov	DWORD PTR tv281[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR tv281[ebp]
cmp	eax, DWORD PTR [edx+11696]
jle	SHORT $LN2@cf2_glyphp
xor	al, al
jmp	SHORT $LN8@cf2_glyphp
mov	al, 1
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	3
DD	$LN25@cf2_glyphp
DD	-12					
DD	8
DD	$LN22@cf2_glyphp
DD	-28					
DD	8
DD	$LN23@cf2_glyphp
DD	-44					
DD	8
DD	$LN24@cf2_glyphp
DB	119					
DB	0
DB	118					
DB	0
DB	117					
DB	0
ENDP
_cf2_glyphpath_hintPoint PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _x$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11644]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _y$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11648]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	DWORD PTR _pt$[ebp], esi
mov	eax, DWORD PTR _y$[ebp]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
call	_cf2_hintmap_map
add	esp, 8
mov	DWORD PTR _pt$[ebp+4], eax
mov	edx, DWORD PTR _pt$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+60]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _pt$[ebp+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+68]
push	eax
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	esi, DWORD PTR [ecx+11656]
mov	edx, DWORD PTR _ppt$[ebp]
mov	DWORD PTR [edx], esi
mov	eax, DWORD PTR _pt$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+64]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _pt$[ebp+4]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+72]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	edx, DWORD PTR _glyphpath$[ebp]
add	esi, DWORD PTR [edx+11660]
mov	eax, DWORD PTR _ppt$[ebp]
mov	DWORD PTR [eax+4], esi
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@cf2_glyphp
DD	-12					
DD	8
DD	$LN3@cf2_glyphp
DB	112					
DB	116					
DB	0
ENDP
_cf2_hintmap_insertHint PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	BYTE PTR _isPair$[ebp], 1
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	DWORD PTR _firstHintEdge$[ebp], eax
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	DWORD PTR _secondHintEdge$[ebp], ecx
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
push	edx
call	_cf2_hint_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN36@cf2_hintma
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN36@cf2_hintma
push	OFFSET $SG14024
push	574					
push	OFFSET $SG14025
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN37@cf2_hintma
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN33@cf2_hintma
mov	eax, DWORD PTR _topHintEdge$[ebp]
mov	DWORD PTR _firstHintEdge$[ebp], eax
mov	BYTE PTR _isPair$[ebp], 0
jmp	SHORT $LN30@cf2_hintma
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN30@cf2_hintma
mov	BYTE PTR _isPair$[ebp], 0
movzx	eax, BYTE PTR _isPair$[ebp]
test	eax, eax
je	SHORT $LN29@cf2_hintma
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jge	SHORT $LN29@cf2_hintma
push	OFFSET $SG14033
push	591					
push	OFFSET $SG14034
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN30@cf2_hintma
mov	DWORD PTR _indexInsert$[ebp], 0
jmp	SHORT $LN26@cf2_hintma
mov	edx, DWORD PTR _indexInsert$[ebp]
add	edx, 1
mov	DWORD PTR _indexInsert$[ebp], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _indexInsert$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	SHORT $LN24@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	edx, DWORD PTR [eax+edx+36]
cmp	edx, DWORD PTR [ecx+8]
jl	SHORT $LN23@cf2_hintma
jmp	SHORT $LN24@cf2_hintma
jmp	SHORT $LN25@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _indexInsert$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	SHORT $LN22@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	edx, DWORD PTR [eax+edx+36]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN21@cf2_hintma
jmp	$LN38@cf2_hintma
movzx	eax, BYTE PTR _isPair$[ebp]
test	eax, eax
je	SHORT $LN20@cf2_hintma
imul	ecx, DWORD PTR _indexInsert$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	ecx, DWORD PTR [edx+ecx+36]
cmp	ecx, DWORD PTR [eax+8]
jg	SHORT $LN20@cf2_hintma
jmp	$LN38@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
push	ecx
call	_cf2_hint_isPairTop
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN22@cf2_hintma
jmp	$LN38@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
je	$LN18@cf2_hintma
mov	eax, DWORD PTR _firstHintEdge$[ebp]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	$LN18@cf2_hintma
movzx	edx, BYTE PTR _isPair$[ebp]
test	edx, edx
je	SHORT $LN17@cf2_hintma
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
add	eax, DWORD PTR [ecx+8]
cdq
sub	eax, edx
sar	eax, 1
push	eax
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_hintmap_map
add	esp, 8
mov	DWORD PTR _midpoint$5[ebp], eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+8]
cdq
sub	eax, edx
sar	eax, 1
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _halfWidth$4[ebp], eax
mov	edx, DWORD PTR _midpoint$5[ebp]
sub	edx, DWORD PTR _halfWidth$4[ebp]
mov	eax, DWORD PTR _firstHintEdge$[ebp]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR _midpoint$5[ebp]
add	ecx, DWORD PTR _halfWidth$4[ebp]
mov	edx, DWORD PTR _secondHintEdge$[ebp]
mov	DWORD PTR [edx+12], ecx
jmp	SHORT $LN18@cf2_hintma
mov	eax, DWORD PTR _firstHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_hintmap_map
add	esp, 8
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _indexInsert$[ebp], 0
jbe	SHORT $LN15@cf2_hintma
mov	edx, DWORD PTR _indexInsert$[ebp]
sub	edx, 1
imul	eax, edx, 20
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [ecx+12]
cmp	ecx, DWORD PTR [edx+eax+40]
jge	SHORT $LN15@cf2_hintma
jmp	$LN38@cf2_hintma
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _indexInsert$[ebp]
cmp	eax, DWORD PTR [edx+20]
jae	SHORT $LN13@cf2_hintma
movzx	ecx, BYTE PTR _isPair$[ebp]
test	ecx, ecx
je	SHORT $LN12@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [eax+12]
cmp	eax, DWORD PTR [ecx+edx+40]
jle	SHORT $LN11@cf2_hintma
jmp	$LN38@cf2_hintma
jmp	SHORT $LN13@cf2_hintma
imul	ecx, DWORD PTR _indexInsert$[ebp], 20
mov	edx, DWORD PTR _firstHintEdge$[ebp]
mov	eax, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [edx+12]
cmp	edx, DWORD PTR [eax+ecx+40]
jle	SHORT $LN13@cf2_hintma
jmp	$LN38@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
sub	ecx, 1
mov	DWORD PTR _iSrc$3[ebp], ecx
movzx	edx, BYTE PTR _isPair$[ebp]
test	edx, edx
je	SHORT $LN40@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	DWORD PTR tv225[ebp], ecx
jmp	SHORT $LN41@cf2_hintma
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR tv225[ebp], eax
mov	ecx, DWORD PTR tv225[ebp]
mov	DWORD PTR _iDst$2[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR _indexInsert$[ebp]
mov	DWORD PTR _count$1[ebp], eax
cmp	DWORD PTR _iDst$2[ebp], 192		
jl	SHORT $LN3@cf2_hintma
mov	ecx, 4
imul	edx, ecx, 52
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN6@cf2_hintma
push	OFFSET $SG14065
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN7@cf2_hintma
jmp	$LN38@cf2_hintma
mov	ecx, DWORD PTR _count$1[ebp]
mov	DWORD PTR tv235[ebp], ecx
mov	edx, DWORD PTR _count$1[ebp]
sub	edx, 1
mov	DWORD PTR _count$1[ebp], edx
cmp	DWORD PTR tv235[ebp], 0
je	SHORT $LN2@cf2_hintma
imul	eax, DWORD PTR _iSrc$3[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
imul	eax, DWORD PTR _iDst$2[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [ecx+eax+28]
mov	ecx, DWORD PTR [edx]
mov	DWORD PTR [eax], ecx
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR [edx+8]
mov	DWORD PTR [eax+8], ecx
mov	ecx, DWORD PTR [edx+12]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [eax+16], edx
mov	eax, DWORD PTR _iDst$2[ebp]
sub	eax, 1
mov	DWORD PTR _iDst$2[ebp], eax
mov	ecx, DWORD PTR _iSrc$3[ebp]
sub	ecx, 1
mov	DWORD PTR _iSrc$3[ebp], ecx
jmp	SHORT $LN3@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
mov	edx, DWORD PTR _firstHintEdge$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+20], ecx
movzx	eax, BYTE PTR _isPair$[ebp]
test	eax, eax
je	SHORT $LN38@cf2_hintma
mov	ecx, DWORD PTR _indexInsert$[ebp]
add	ecx, 1
imul	edx, ecx, 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
mov	edx, DWORD PTR _secondHintEdge$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+20], ecx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmap_adjustHints PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_cf2_arrstack_clear
add	esp, 4
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN56@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	$LN54@cf2_hintma
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
push	ecx
call	_cf2_hint_isPair
add	esp, 4
mov	BYTE PTR _isPair$15[ebp], al
movzx	edx, BYTE PTR _isPair$15[ebp]
test	edx, edx
je	SHORT $LN59@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR tv77[ebp], eax
jmp	SHORT $LN60@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
mov	DWORD PTR tv77[ebp], ecx
mov	edx, DWORD PTR tv77[ebp]
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jb	SHORT $LN52@cf2_hintma
push	OFFSET $SG13918
push	389					
push	OFFSET $SG13919
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN53@cf2_hintma
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
push	edx
call	_cf2_hint_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN48@cf2_hintma
push	OFFSET $SG13924
push	390					
push	OFFSET $SG13925
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN49@cf2_hintma
imul	edx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN44@cf2_hintma
push	OFFSET $SG13930
push	391					
push	OFFSET $SG13931
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN45@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	esi, al
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	ecx, al
cmp	esi, ecx
je	SHORT $LN40@cf2_hintma
push	OFFSET $SG13936
push	393					
push	OFFSET $SG13937
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN41@cf2_hintma
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
push	edx
call	_cf2_hint_isLocked
add	esp, 4
movzx	eax, al
test	eax, eax
jne	$LN25@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [eax+edx+40]
and	edx, -65536				
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
sub	ecx, edx
mov	DWORD PTR _fracDown$14[ebp], ecx
imul	edx, DWORD PTR _j$[ebp], 20
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+40]
and	eax, -65536				
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+edx+40]
sub	edx, eax
mov	DWORD PTR _fracUp$13[ebp], edx
xor	eax, eax
sub	eax, DWORD PTR _fracDown$14[ebp]
mov	DWORD PTR _downMoveDown$12[ebp], eax
xor	ecx, ecx
sub	ecx, DWORD PTR _fracUp$13[ebp]
mov	DWORD PTR _upMoveDown$11[ebp], ecx
cmp	DWORD PTR _fracDown$14[ebp], 0
jne	SHORT $LN61@cf2_hintma
mov	DWORD PTR tv186[ebp], 0
jmp	SHORT $LN62@cf2_hintma
mov	edx, 65536				
sub	edx, DWORD PTR _fracDown$14[ebp]
mov	DWORD PTR tv186[ebp], edx
mov	eax, DWORD PTR tv186[ebp]
mov	DWORD PTR _downMoveUp$10[ebp], eax
cmp	DWORD PTR _fracUp$13[ebp], 0
jne	SHORT $LN63@cf2_hintma
mov	DWORD PTR tv189[ebp], 0
jmp	SHORT $LN64@cf2_hintma
mov	ecx, 65536				
sub	ecx, DWORD PTR _fracUp$13[ebp]
mov	DWORD PTR tv189[ebp], ecx
mov	edx, DWORD PTR tv189[ebp]
mov	DWORD PTR _upMoveUp$9[ebp], edx
mov	eax, DWORD PTR _downMoveUp$10[ebp]
cmp	eax, DWORD PTR _upMoveUp$9[ebp]
jge	SHORT $LN65@cf2_hintma
mov	ecx, DWORD PTR _downMoveUp$10[ebp]
mov	DWORD PTR tv191[ebp], ecx
jmp	SHORT $LN66@cf2_hintma
mov	edx, DWORD PTR _upMoveUp$9[ebp]
mov	DWORD PTR tv191[ebp], edx
mov	eax, DWORD PTR tv191[ebp]
mov	DWORD PTR _moveUp$8[ebp], eax
mov	ecx, DWORD PTR _downMoveDown$12[ebp]
cmp	ecx, DWORD PTR _upMoveDown$11[ebp]
jle	SHORT $LN67@cf2_hintma
mov	edx, DWORD PTR _downMoveDown$12[ebp]
mov	DWORD PTR tv193[ebp], edx
jmp	SHORT $LN68@cf2_hintma
mov	eax, DWORD PTR _upMoveDown$11[ebp]
mov	DWORD PTR tv193[ebp], eax
mov	ecx, DWORD PTR tv193[ebp]
mov	DWORD PTR _moveDown$7[ebp], ecx
mov	DWORD PTR _downMinCounter$5[ebp], 32768	
mov	DWORD PTR _upMinCounter$4[ebp], 32768	
mov	BYTE PTR _saveEdge$3[ebp], 0
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, 1
cmp	DWORD PTR _j$[ebp], eax
jae	SHORT $LN35@cf2_hintma
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
imul	edx, ecx, 20
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+40]
add	eax, DWORD PTR _moveUp$8[ebp]
add	eax, DWORD PTR _upMinCounter$4[ebp]
mov	ecx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [ecx+edx+40], eax
jl	SHORT $LN36@cf2_hintma
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN33@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
imul	eax, edx, 20
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+40]
add	ecx, DWORD PTR _moveDown$7[ebp]
sub	ecx, DWORD PTR _downMinCounter$5[ebp]
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+eax+40], ecx
jg	SHORT $LN34@cf2_hintma
mov	eax, DWORD PTR _moveDown$7[ebp]
neg	eax
cmp	eax, DWORD PTR _moveUp$8[ebp]
jge	SHORT $LN69@cf2_hintma
mov	ecx, DWORD PTR _moveDown$7[ebp]
mov	DWORD PTR tv224[ebp], ecx
jmp	SHORT $LN70@cf2_hintma
mov	edx, DWORD PTR _moveUp$8[ebp]
mov	DWORD PTR tv224[ebp], edx
mov	eax, DWORD PTR tv224[ebp]
mov	DWORD PTR _move$6[ebp], eax
jmp	SHORT $LN32@cf2_hintma
mov	ecx, DWORD PTR _moveUp$8[ebp]
mov	DWORD PTR _move$6[ebp], ecx
jmp	SHORT $LN31@cf2_hintma
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN29@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
imul	eax, edx, 20
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+40]
add	ecx, DWORD PTR _moveDown$7[ebp]
sub	ecx, DWORD PTR _downMinCounter$5[ebp]
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+eax+40], ecx
jg	SHORT $LN30@cf2_hintma
mov	eax, DWORD PTR _moveDown$7[ebp]
mov	DWORD PTR _move$6[ebp], eax
mov	ecx, DWORD PTR _moveDown$7[ebp]
neg	ecx
cmp	DWORD PTR _moveUp$8[ebp], ecx
jge	SHORT $LN71@cf2_hintma
mov	BYTE PTR tv240[ebp], 1
jmp	SHORT $LN72@cf2_hintma
mov	BYTE PTR tv240[ebp], 0
mov	dl, BYTE PTR tv240[ebp]
mov	BYTE PTR _saveEdge$3[ebp], dl
jmp	SHORT $LN31@cf2_hintma
mov	DWORD PTR _move$6[ebp], 0
mov	BYTE PTR _saveEdge$3[ebp], 1
movzx	eax, BYTE PTR _saveEdge$3[ebp]
test	eax, eax
je	SHORT $LN27@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, 1
cmp	DWORD PTR _j$[ebp], edx
jae	SHORT $LN27@cf2_hintma
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN27@cf2_hintma
mov	edx, DWORD PTR _j$[ebp]
mov	DWORD PTR _savedMove$2[ebp], edx
mov	eax, DWORD PTR _moveUp$8[ebp]
sub	eax, DWORD PTR _move$6[ebp]
mov	DWORD PTR _savedMove$2[ebp+4], eax
lea	ecx, DWORD PTR _savedMove$2[ebp]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_cf2_arrstack_push
add	esp, 8
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+ecx+40]
add	eax, DWORD PTR _move$6[ebp]
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+ecx+40], eax
movzx	eax, BYTE PTR _isPair$15[ebp]
test	eax, eax
je	SHORT $LN25@cf2_hintma
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+ecx+40]
add	eax, DWORD PTR _move$6[ebp]
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+ecx+40], eax
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN24@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
sub	eax, 1
imul	ecx, eax, 20
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
cmp	ecx, DWORD PTR [esi+edx+40]
jle	SHORT $LN24@cf2_hintma
push	OFFSET $SG13976
push	501					
push	OFFSET $SG13977
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN25@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _j$[ebp]
jb	SHORT $LN20@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
imul	edx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
cmp	ecx, DWORD PTR [esi+edx+40]
jle	SHORT $LN20@cf2_hintma
push	OFFSET $SG13982
push	503					
push	OFFSET $SG13983
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN21@cf2_hintma
cmp	DWORD PTR _i$[ebp], 0
jbe	SHORT $LN17@cf2_hintma
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _i$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+36]
cmp	eax, DWORD PTR [esi+edx+36]
je	SHORT $LN17@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
imul	eax, edx, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+36]
sub	ecx, DWORD PTR [esi+eax+36]
push	ecx
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _i$[ebp]
sub	eax, 1
imul	ecx, eax, 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [eax+edx+40]
sub	edx, DWORD PTR [esi+ecx+40]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [ecx+edx+44], eax
movzx	edx, BYTE PTR _isPair$15[ebp]
test	edx, edx
je	SHORT $LN15@cf2_hintma
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _j$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+36]
cmp	eax, DWORD PTR [esi+edx+36]
je	SHORT $LN14@cf2_hintma
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _j$[ebp]
sub	edx, 1
imul	eax, edx, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+36]
sub	ecx, DWORD PTR [esi+eax+36]
push	ecx
imul	edx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
imul	ecx, eax, 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [eax+edx+40]
sub	edx, DWORD PTR [esi+ecx+40]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _j$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [ecx+edx+44], eax
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
jmp	$LN55@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_cf2_arrstack_size
add	esp, 4
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN13@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _i$[ebp], 0
jbe	$LN57@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
sub	eax, 1
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _hintMove$1[ebp], eax
mov	eax, DWORD PTR _hintMove$1[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, 1
cmp	DWORD PTR _j$[ebp], eax
jb	SHORT $LN9@cf2_hintma
push	OFFSET $SG13997
push	538					
push	OFFSET $SG13998
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@cf2_hintma
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
imul	eax, edx, 20
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+40]
mov	edx, DWORD PTR _hintMove$1[ebp]
mov	edx, DWORD PTR [edx+4]
lea	ecx, DWORD PTR [ecx+edx+32768]
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+eax+40], ecx
jl	SHORT $LN6@cf2_hintma
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+eax+40]
mov	eax, DWORD PTR _hintMove$1[ebp]
add	edx, DWORD PTR [eax+4]
imul	ecx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [eax+ecx+40], edx
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isPair
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN6@cf2_hintma
cmp	DWORD PTR _j$[ebp], 0
ja	SHORT $LN3@cf2_hintma
push	OFFSET $SG14006
push	549					
push	OFFSET $SG14007
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_hintma
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+ecx+40]
mov	ecx, DWORD PTR _hintMove$1[ebp]
add	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _j$[ebp]
sub	edx, 1
imul	ecx, edx, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+ecx+40], eax
jmp	$LN12@cf2_hintma
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN75@cf2_hintma
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN74@cf2_hintma
DD	-72					
DD	8
DD	$LN73@cf2_hintma
DB	115					
DB	97					
DB	118					
DB	101					
DB	100					
DB	77					
DB	111					
DB	118					
DB	101					
DB	0
ENDP
_cf2_hintmap_map PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN12@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
movzx	edx, BYTE PTR [ecx+13]
test	edx, edx
jne	SHORT $LN13@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _csCoord$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
jmp	$LN14@cf2_hintma
jmp	$LN14@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _i$1[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+24], 192			
jb	SHORT $LN9@cf2_hintma
push	OFFSET $SG13890
push	317					
push	OFFSET $SG13891
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, 1
cmp	DWORD PTR _i$1[ebp], edx
jae	SHORT $LN4@cf2_hintma
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _csCoord$[ebp]
cmp	eax, DWORD PTR [edx+ecx+36]
jl	SHORT $LN4@cf2_hintma
mov	ecx, DWORD PTR _i$1[ebp]
add	ecx, 1
mov	DWORD PTR _i$1[ebp], ecx
jmp	SHORT $LN6@cf2_hintma
cmp	DWORD PTR _i$1[ebp], 0
jbe	SHORT $LN3@cf2_hintma
imul	edx, DWORD PTR _i$1[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _csCoord$[ebp]
cmp	ecx, DWORD PTR [eax+edx+36]
jge	SHORT $LN3@cf2_hintma
mov	edx, DWORD PTR _i$1[ebp]
sub	edx, 1
mov	DWORD PTR _i$1[ebp], edx
jmp	SHORT $LN4@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _i$1[ebp]
mov	DWORD PTR [eax+24], ecx
cmp	DWORD PTR _i$1[ebp], 0
jne	SHORT $LN2@cf2_hintma
mov	edx, 20					
imul	eax, edx, 0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _csCoord$[ebp]
cmp	edx, DWORD PTR [ecx+eax+36]
jge	SHORT $LN2@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, 20					
imul	eax, edx, 0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _csCoord$[ebp]
sub	edx, DWORD PTR [ecx+eax+36]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, 20					
imul	edx, ecx, 0
mov	ecx, DWORD PTR _hintmap$[ebp]
add	eax, DWORD PTR [ecx+edx+40]
jmp	SHORT $LN14@cf2_hintma
jmp	SHORT $LN14@cf2_hintma
imul	edx, DWORD PTR _i$1[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+edx+44]
push	ecx
imul	edx, DWORD PTR _i$1[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _csCoord$[ebp]
sub	ecx, DWORD PTR [eax+edx+36]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
imul	edx, DWORD PTR _i$1[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
add	eax, DWORD PTR [ecx+edx+40]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmap_isValid PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmap$[ebp]
mov	al, BYTE PTR [eax+12]
pop	ebp
ret	0
ENDP
_cf2_hint_isSynthetic PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 32					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isLocked PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 16					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isPairTop PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 8
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isPair PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 12					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_initZero PROC
push	ebp
mov	ebp, esp
push	20					
push	0
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_memset
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_hint_init PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
push	20					
push	0
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _indexStemHint$[ebp]
push	ecx
mov	edx, DWORD PTR _stemHintArray$[ebp]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _stemHint$[ebp], eax
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR _stemHint$[ebp]
mov	edx, DWORD PTR [eax+8]
sub	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _width$[ebp], edx
cmp	DWORD PTR _width$[ebp], -1376256	
jne	SHORT $LN19@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN18@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _stemHint$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 1
jmp	SHORT $LN17@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 0
jmp	$LN16@cf2_hint_i
cmp	DWORD PTR _width$[ebp], -1310720	
jne	SHORT $LN15@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN14@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 0
jmp	SHORT $LN13@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 2
jmp	SHORT $LN16@cf2_hint_i
cmp	DWORD PTR _width$[ebp], 0
jge	SHORT $LN11@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN10@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _stemHint$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 4
jmp	SHORT $LN9@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 8
jmp	SHORT $LN16@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN7@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _stemHint$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 4
jmp	SHORT $LN16@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 8
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_cf2_hint_isTop
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN5@cf2_hint_i
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+188]
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR [ecx+8]
lea	eax, DWORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, DWORD PTR _hintOrigin$[ebp]
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _scale$[ebp]
mov	DWORD PTR [edx+16], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _indexStemHint$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _hint$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN4@cf2_hint_i
mov	ecx, DWORD PTR _stemHint$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN4@cf2_hint_i
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_cf2_hint_isTop
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN3@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+12], ecx
jmp	SHORT $LN2@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], ecx
mov	edx, DWORD PTR _hint$[ebp]
push	edx
call	_cf2_hint_lock
add	esp, 4
jmp	SHORT $LN20@cf2_hint_i
mov	eax, DWORD PTR _scale$[ebp]
push	eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx+12], eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_getWindingMomentum PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _x1$[ebp]
sar	eax, 16					
mov	ecx, DWORD PTR _y2$[ebp]
sub	ecx, DWORD PTR _y1$[ebp]
sar	ecx, 16					
imul	eax, ecx
mov	edx, DWORD PTR _y1$[ebp]
sar	edx, 16					
mov	ecx, DWORD PTR _x2$[ebp]
sub	ecx, DWORD PTR _x1$[ebp]
sar	ecx, 16					
imul	edx, ecx
sub	eax, edx
pop	ebp
ret	0
ENDP
_cf2_getUnitsPerEm PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN5@cf2_getUni
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN8@cf2_getUni
push	OFFSET $SG13443
push	288					
push	OFFSET $SG13444
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN9@cf2_getUni
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+4]
movzx	ecx, WORD PTR [eax+68]
test	ecx, ecx
jne	SHORT $LN3@cf2_getUni
push	OFFSET $SG13449
push	289					
push	OFFSET $SG13450
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_getUni
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	ax, WORD PTR [ecx+68]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getScaleAndHintFlag PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN3@cf2_getSca
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+8], 0
jne	SHORT $LN6@cf2_getSca
push	OFFSET $SG13430
push	261					
push	OFFSET $SG13431
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN7@cf2_getSca
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _hinted$[ebp]
mov	dl, BYTE PTR [eax+160]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _scaled$[ebp]
mov	al, BYTE PTR [ecx+161]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _hinted$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN2@cf2_getSca
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	eax, DWORD PTR [ecx+164]
add	eax, 32					
cdq
and	edx, 63					
add	eax, edx
sar	eax, 6
mov	edx, DWORD PTR _x_scale$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	eax, DWORD PTR [ecx+168]
add	eax, 32					
cdq
and	edx, 63					
add	eax, edx
sar	eax, 6
mov	edx, DWORD PTR _y_scale$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN8@cf2_getSca
mov	eax, DWORD PTR _x_scale$[ebp]
mov	DWORD PTR [eax], 1024			
mov	ecx, DWORD PTR _y_scale$[ebp]
mov	DWORD PTR [ecx], 1024			
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_outline_init PROC
push	ebp
mov	ebp, esp
push	32					
push	0
mov	eax, DWORD PTR _outline$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+24], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [edx], OFFSET _cf2_builder_moveTo
mov	eax, DWORD PTR _outline$[ebp]
mov	DWORD PTR [eax+4], OFFSET _cf2_builder_lineTo
mov	ecx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [ecx+12], OFFSET _cf2_builder_cubeTo
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_builder_cubeTo PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR _outline$[ebp], eax
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN10@cf2_builde
mov	ecx, DWORD PTR _outline$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN13@cf2_builde
push	OFFSET $SG13391
push	196					
push	OFFSET $SG13392
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN14@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+32], 4
je	SHORT $LN8@cf2_builde
push	OFFSET $SG13397
push	197					
push	OFFSET $SG13398
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN9@cf2_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
movzx	edx, BYTE PTR [ecx+64]
test	edx, edx
jne	SHORT $LN5@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_start_point
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN3@cf2_builde
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
jmp	$LN15@cf2_builde
push	3
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_check_points
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN1@cf2_builde
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN15@cf2_builde
push	0
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _builder$[ebp]
push	edx
call	_cff_builder_add_point
add	esp, 16					
push	0
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_add_point
add	esp, 16					
push	1
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_point
add	esp, 16					
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_builder_lineTo PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR _outline$[ebp], eax
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN10@cf2_builde
mov	ecx, DWORD PTR _outline$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN13@cf2_builde
push	OFFSET $SG13363
push	152					
push	OFFSET $SG13364
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN14@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+32], 2
je	SHORT $LN8@cf2_builde
push	OFFSET $SG13369
push	153					
push	OFFSET $SG13370
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN9@cf2_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
movzx	edx, BYTE PTR [ecx+64]
test	edx, edx
jne	SHORT $LN5@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_start_point
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN3@cf2_builde
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN15@cf2_builde
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _builder$[ebp]
push	edx
call	_cff_builder_add_point1
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@cf2_builde
mov	eax, DWORD PTR _callbacks$[ebp]
mov	ecx, DWORD PTR [eax+24]
cmp	DWORD PTR [ecx], 0
jne	SHORT $LN15@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_builder_moveTo PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR _outline$[ebp], eax
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN5@cf2_builde
mov	ecx, DWORD PTR _outline$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN8@cf2_builde
push	OFFSET $SG13340
push	130					
push	OFFSET $SG13341
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN9@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+32], 1
je	SHORT $LN3@cf2_builde
push	OFFSET $SG13346
push	131					
push	OFFSET $SG13347
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@cf2_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_close_contour
add	esp, 4
mov	edx, DWORD PTR _builder$[ebp]
mov	BYTE PTR [edx+64], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_free_instance PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ptr$[ebp]
mov	DWORD PTR _font$[ebp], eax
cmp	DWORD PTR _font$[ebp], 0
je	SHORT $LN2@cf2_free_i
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$1[ebp], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_setGlyphWidth PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _decoder$[ebp], ecx
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_setGly
push	OFFSET $SG13312
push	89					
push	OFFSET $SG13313
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_setGly
mov	eax, DWORD PTR _width$[ebp]
add	eax, 32768				
shr	eax, 16					
movsx	ecx, ax
mov	edx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+744], ecx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_checkTransform PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _unitsPerEm$[ebp], 0
jg	SHORT $LN18@cf2_checkT
push	OFFSET $SG13273
push	62					
push	OFFSET $SG13274
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN19@cf2_checkT
mov	ecx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [ecx], 0
jle	SHORT $LN14@cf2_checkT
mov	edx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [edx+12], 0
jg	SHORT $LN13@cf2_checkT
push	OFFSET $SG13277
push	65					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN20@cf2_checkT
mov	eax, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN9@cf2_checkT
mov	ecx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [ecx+8], 0
je	SHORT $LN12@cf2_checkT
push	OFFSET $SG13283
push	67					
push	OFFSET $SG13284
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN13@cf2_checkT
mov	eax, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [eax+16], 0
jne	SHORT $LN4@cf2_checkT
mov	ecx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN7@cf2_checkT
push	OFFSET $SG13290
push	68					
push	OFFSET $SG13291
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN8@cf2_checkT
cmp	DWORD PTR _unitsPerEm$[ebp], 32767	
jle	SHORT $LN3@cf2_checkT
push	OFFSET $SG13293
push	71					
push	164					
call	_FT_Throw
add	esp, 12					
or	eax, 164				
jmp	SHORT $LN20@cf2_checkT
mov	eax, DWORD PTR _unitsPerEm$[ebp]
shl	eax, 16					
push	eax
push	131072000				
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _maxScale$[ebp], eax
mov	ecx, DWORD PTR _transform$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	edx, DWORD PTR _maxScale$[ebp]
jg	SHORT $LN1@cf2_checkT
mov	eax, DWORD PTR _transform$[ebp]
mov	ecx, DWORD PTR [eax+12]
cmp	ecx, DWORD PTR _maxScale$[ebp]
jle	SHORT $LN2@cf2_checkT
push	OFFSET $SG13300
push	76					
push	164					
call	_FT_Throw
add	esp, 12					
or	eax, 164				
jmp	SHORT $LN20@cf2_checkT
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_font_setup PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR _decoder$[ebp], ecx
mov	BYTE PTR _needExtraSetup$[ebp], 0
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+92]
mov	DWORD PTR _boldenX$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _boldenY$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getSubfont
add	esp, 4
mov	DWORD PTR _subFont$[ebp], eax
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+136]
cmp	eax, DWORD PTR _subFont$[ebp]
je	SHORT $LN14@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _subFont$[ebp]
mov	DWORD PTR [ecx+136], edx
mov	BYTE PTR _needExtraSetup$[ebp], 1
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getPpemY
add	esp, 4
mov	DWORD PTR _ppem$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+84]
cmp	edx, DWORD PTR _ppem$[ebp]
je	SHORT $LN13@cf2_font_s
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _ppem$[ebp]
mov	DWORD PTR [eax+84], ecx
mov	BYTE PTR _needExtraSetup$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
mov	ecx, DWORD PTR _font$[ebp]
mov	BYTE PTR [ecx+140], al
push	16					
mov	edx, DWORD PTR _font$[ebp]
add	edx, 12					
push	edx
mov	eax, DWORD PTR _transform$[ebp]
push	eax
call	_memcmp
add	esp, 12					
test	eax, eax
je	$LN12@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 12					
mov	edx, DWORD PTR _transform$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR [edx+20]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+32], 0
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+28], 0
mov	edx, DWORD PTR _font$[ebp]
add	edx, 36					
mov	eax, DWORD PTR _transform$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], ecx
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR [eax+20]
mov	DWORD PTR [edx+20], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+72], 65536		
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+60], 65536		
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+68], 0
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+64], 0
mov	BYTE PTR _needExtraSetup$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+142]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 2
cmp	eax, edx
je	SHORT $LN11@cf2_font_s
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
mov	edx, DWORD PTR _font$[ebp]
mov	BYTE PTR [edx+142], cl
mov	BYTE PTR _needExtraSetup$[ebp], 1
movzx	eax, BYTE PTR _needExtraSetup$[ebp]
test	eax, eax
je	$LN15@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	DWORD PTR _unitsPerEm$1[ebp], edx
cmp	DWORD PTR _unitsPerEm$1[ebp], 0
jne	SHORT $LN9@cf2_font_s
mov	DWORD PTR _unitsPerEm$1[ebp], 1000	
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+84], 262144		
jge	SHORT $LN17@cf2_font_s
mov	DWORD PTR tv146[ebp], 262144		
jmp	SHORT $LN18@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	DWORD PTR tv146[ebp], edx
mov	eax, DWORD PTR tv146[ebp]
mov	DWORD PTR _ppem$[ebp], eax
mov	eax, 65536000				
cdq
idiv	DWORD PTR _unitsPerEm$1[ebp]
mov	DWORD PTR _emRatio$3[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getStdVW
add	esp, 4
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+176], eax
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+176], 0
jg	SHORT $LN8@cf2_font_s
mov	ecx, DWORD PTR _emRatio$3[ebp]
push	ecx
push	4915200					
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+176], eax
cmp	DWORD PTR _boldenX$[ebp], 0
jle	SHORT $LN7@cf2_font_s
mov	eax, DWORD PTR _ppem$[ebp]
push	eax
mov	ecx, DWORD PTR _unitsPerEm$1[ebp]
shl	ecx, 16					
push	ecx
call	_FT_DivFix
add	esp, 8
cmp	DWORD PTR _boldenX$[ebp], eax
jle	SHORT $LN19@cf2_font_s
mov	edx, DWORD PTR _boldenX$[ebp]
mov	DWORD PTR tv167[ebp], edx
jmp	SHORT $LN20@cf2_font_s
mov	eax, DWORD PTR _ppem$[ebp]
push	eax
mov	ecx, DWORD PTR _unitsPerEm$1[ebp]
shl	ecx, 16					
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR tv167[ebp], eax
mov	edx, DWORD PTR tv167[ebp]
mov	DWORD PTR _boldenX$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 144				
push	eax
push	0
mov	ecx, DWORD PTR _boldenX$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 184				
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+176]
push	ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _emRatio$3[ebp]
push	eax
call	_cf2_computeDarkening
add	esp, 28					
jmp	SHORT $LN6@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 144				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+142]
push	eax
push	0
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 184				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+176]
push	eax
mov	ecx, DWORD PTR _ppem$[ebp]
push	ecx
mov	edx, DWORD PTR _emRatio$3[ebp]
push	edx
call	_cf2_computeDarkening
add	esp, 28					
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getStdHW
add	esp, 4
mov	DWORD PTR _stdHW$2[ebp], eax
cmp	DWORD PTR _stdHW$2[ebp], 0
jle	SHORT $LN5@cf2_font_s
mov	ecx, DWORD PTR _stdHW$2[ebp]
shl	ecx, 1
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+176], ecx
jle	SHORT $LN5@cf2_font_s
mov	eax, DWORD PTR _emRatio$3[ebp]
push	eax
push	4915200					
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+180], eax
jmp	SHORT $LN4@cf2_font_s
mov	edx, DWORD PTR _emRatio$3[ebp]
push	edx
push	7208960					
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+180], eax
mov	edx, DWORD PTR _font$[ebp]
add	edx, 144				
push	edx
mov	eax, DWORD PTR _font$[ebp]
movzx	ecx, BYTE PTR [eax+142]
push	ecx
mov	edx, DWORD PTR _boldenY$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 188				
push	eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+180]
push	edx
mov	eax, DWORD PTR _ppem$[ebp]
push	eax
mov	ecx, DWORD PTR _emRatio$3[ebp]
push	ecx
call	_cf2_computeDarkening
add	esp, 28					
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+184], 0
jne	SHORT $LN2@cf2_font_s
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+188], 0
je	SHORT $LN3@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	BYTE PTR [ecx+141], 1
jmp	SHORT $LN1@cf2_font_s
mov	edx, DWORD PTR _font$[ebp]
mov	BYTE PTR [edx+141], 0
mov	eax, DWORD PTR _font$[ebp]
mov	BYTE PTR [eax+192], 0
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 196				
push	edx
call	_cf2_blues_init
add	esp, 8
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_computeDarkening PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _boldenAmount$[ebp], 0
jne	SHORT $LN16@cf2_comput
movzx	ecx, BYTE PTR _stemDarkened$[ebp]
test	ecx, ecx
jne	SHORT $LN16@cf2_comput
jmp	$LN17@cf2_comput
cmp	DWORD PTR _emRatio$[ebp], 655		
jge	SHORT $LN15@cf2_comput
jmp	$LN17@cf2_comput
movzx	edx, BYTE PTR _stemDarkened$[ebp]
test	edx, edx
je	$LN14@cf2_comput
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x1$17[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _y1$16[ebp], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x2$15[ebp], eax
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _darkenParams$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y2$14[ebp], ecx
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _darkenParams$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _x3$13[ebp], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, DWORD PTR _darkenParams$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _y3$12[ebp], edx
mov	eax, 4
imul	ecx, eax, 6
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x4$11[ebp], eax
mov	ecx, 4
imul	edx, ecx, 7
mov	eax, DWORD PTR _darkenParams$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y4$10[ebp], ecx
mov	edx, DWORD PTR _emRatio$[ebp]
push	edx
mov	eax, DWORD PTR _stemWidth$[ebp]
add	eax, DWORD PTR _boldenAmount$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _stemWidthPer1000$[ebp], eax
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
push	ecx
call	_FT_MSB
add	esp, 4
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
call	_FT_MSB
add	esp, 4
add	esi, eax
mov	DWORD PTR _logBase2$[ebp], esi
cmp	DWORD PTR _logBase2$[ebp], 46		
jl	SHORT $LN13@cf2_comput
mov	eax, DWORD PTR _x4$11[ebp]
shl	eax, 16					
mov	DWORD PTR _scaledStem$[ebp], eax
jmp	SHORT $LN12@cf2_comput
mov	ecx, DWORD PTR _ppem$[ebp]
push	ecx
mov	edx, DWORD PTR _stemWidthPer1000$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _scaledStem$[ebp], eax
mov	eax, DWORD PTR _x1$17[ebp]
shl	eax, 16					
cmp	DWORD PTR _scaledStem$[ebp], eax
jge	SHORT $LN11@cf2_comput
mov	ecx, DWORD PTR _ppem$[ebp]
push	ecx
mov	edx, DWORD PTR _y1$16[ebp]
shl	edx, 16					
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], eax
jmp	$LN10@cf2_comput
mov	edx, DWORD PTR _x2$15[ebp]
shl	edx, 16					
cmp	DWORD PTR _scaledStem$[ebp], edx
jge	SHORT $LN9@cf2_comput
mov	eax, DWORD PTR _x2$15[ebp]
sub	eax, DWORD PTR _x1$17[ebp]
mov	DWORD PTR _xdelta$9[ebp], eax
mov	ecx, DWORD PTR _y2$14[ebp]
sub	ecx, DWORD PTR _y1$16[ebp]
mov	DWORD PTR _ydelta$8[ebp], ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _x1$17[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
sub	ecx, eax
mov	DWORD PTR _x$7[ebp], ecx
cmp	DWORD PTR _xdelta$9[ebp], 0
jne	SHORT $LN8@cf2_comput
jmp	SHORT $Try_x3$19
mov	edx, DWORD PTR _xdelta$9[ebp]
push	edx
mov	eax, DWORD PTR _ydelta$8[ebp]
push	eax
mov	ecx, DWORD PTR _x$7[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y1$16[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], esi
jmp	$LN10@cf2_comput
mov	edx, DWORD PTR _x3$13[ebp]
shl	edx, 16					
cmp	DWORD PTR _scaledStem$[ebp], edx
jge	SHORT $LN6@cf2_comput
mov	eax, DWORD PTR _x3$13[ebp]
sub	eax, DWORD PTR _x2$15[ebp]
mov	DWORD PTR _xdelta$6[ebp], eax
mov	ecx, DWORD PTR _y3$12[ebp]
sub	ecx, DWORD PTR _y2$14[ebp]
mov	DWORD PTR _ydelta$5[ebp], ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _x2$15[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
sub	ecx, eax
mov	DWORD PTR _x$4[ebp], ecx
cmp	DWORD PTR _xdelta$6[ebp], 0
jne	SHORT $LN5@cf2_comput
jmp	SHORT $Try_x4$20
mov	edx, DWORD PTR _xdelta$6[ebp]
push	edx
mov	eax, DWORD PTR _ydelta$5[ebp]
push	eax
mov	ecx, DWORD PTR _x$4[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y2$14[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], esi
jmp	$LN10@cf2_comput
mov	edx, DWORD PTR _x4$11[ebp]
shl	edx, 16					
cmp	DWORD PTR _scaledStem$[ebp], edx
jge	SHORT $Use_y4$21
mov	eax, DWORD PTR _x4$11[ebp]
sub	eax, DWORD PTR _x3$13[ebp]
mov	DWORD PTR _xdelta$3[ebp], eax
mov	ecx, DWORD PTR _y4$10[ebp]
sub	ecx, DWORD PTR _y3$12[ebp]
mov	DWORD PTR _ydelta$2[ebp], ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _x3$13[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
sub	ecx, eax
mov	DWORD PTR _x$1[ebp], ecx
cmp	DWORD PTR _xdelta$3[ebp], 0
jne	SHORT $LN2@cf2_comput
jmp	SHORT $Use_y4$21
mov	edx, DWORD PTR _xdelta$3[ebp]
push	edx
mov	eax, DWORD PTR _ydelta$2[ebp]
push	eax
mov	ecx, DWORD PTR _x$1[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y3$12[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], esi
jmp	SHORT $LN10@cf2_comput
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y4$10[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _emRatio$[ebp]
shl	edx, 1
push	edx
mov	eax, DWORD PTR _darkenAmount$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _boldenAmount$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _darkenAmount$[ebp]
add	eax, DWORD PTR [ecx]
mov	edx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [edx], eax
pop	edi
pop	esi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_interpT2CharString PROC
push	ebp
mov	ebp, esp
mov	eax, 16240				
call	__chkstk
push	esi
push	edi
lea	edi, DWORD PTR [ebp-16240]
mov	ecx, 4060				
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _lastError$[ebp], 0
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR _decoder$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 4
mov	DWORD PTR _error$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _scaleY$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getNominalWidthX
add	esp, 4
mov	DWORD PTR _nominalWidthX$[ebp], eax
mov	edx, DWORD PTR _curY$[ebp]
mov	DWORD PTR _hintOriginY$[ebp], edx
mov	DWORD PTR _opStack$[ebp], 0
mov	DWORD PTR _instructionLimit$[ebp], 20000000 
mov	DWORD PTR _charstring$[ebp], 0
mov	DWORD PTR _charstringIndex$[ebp], -1
push	16					
mov	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
lea	edx, DWORD PTR _subrStack$[ebp]
push	edx
call	_cf2_arrstack_init
add	esp, 16					
push	20					
mov	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
lea	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_init
add	esp, 16					
push	20					
mov	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
lea	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_init
add	esp, 16					
mov	eax, DWORD PTR _error$[ebp]
push	eax
lea	ecx, DWORD PTR _hintMask$[ebp]
push	ecx
call	_cf2_hintmask_init
add	esp, 8
mov	edx, DWORD PTR _translation$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 196				
push	eax
mov	ecx, DWORD PTR _hintOriginY$[ebp]
push	ecx
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
mov	edx, DWORD PTR _scaleY$[ebp]
push	edx
mov	eax, DWORD PTR _callbacks$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_init
add	esp, 40					
mov	BYTE PTR _haveWidth$[ebp], 0
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getDefaultWidthX
add	esp, 4
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_cf2_stack_init
add	esp, 8
mov	DWORD PTR _opStack$[ebp], eax
cmp	DWORD PTR _opStack$[ebp], 0
jne	SHORT $LN427@cf2_interp
push	OFFSET $SG14720
push	532					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
push	11					
lea	ecx, DWORD PTR _subrStack$[ebp]
push	ecx
call	_cf2_arrstack_setCount
add	esp, 8
lea	edx, DWORD PTR _subrStack$[ebp]
push	edx
call	_cf2_arrstack_getBuffer
add	esp, 4
mov	DWORD PTR _charstring$[ebp], eax
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _charstring$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _charstringIndex$[ebp], 0
mov	ecx, DWORD PTR _error$[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $LN426@cf2_interp
jmp	$exit$480
mov	edx, 1
test	edx, edx
je	$LN424@cf2_interp
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_isEnd
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN423@cf2_interp
cmp	DWORD PTR _charstringIndex$[ebp], 0
je	SHORT $LN422@cf2_interp
mov	BYTE PTR _op1$[ebp], 11			
jmp	SHORT $LN421@cf2_interp
mov	BYTE PTR _op1$[ebp], 14			
jmp	SHORT $LN420@cf2_interp
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
mov	BYTE PTR _op1$[ebp], al
mov	eax, DWORD PTR _error$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN419@cf2_interp
jmp	$exit$480
mov	ecx, DWORD PTR _instructionLimit$[ebp]
sub	ecx, 1
mov	DWORD PTR _instructionLimit$[ebp], ecx
jne	SHORT $LN418@cf2_interp
push	OFFSET $SG14734
push	573					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
movzx	edx, BYTE PTR _op1$[ebp]
mov	DWORD PTR tv162[ebp], edx
cmp	DWORD PTR tv162[ebp], 31		
ja	$LN31@cf2_interp
mov	eax, DWORD PTR tv162[ebp]
movzx	ecx, BYTE PTR $LN464@cf2_interp[eax]
jmp	DWORD PTR $LN478@cf2_interp[ecx*4]
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN411@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
push	ecx
push	OFFSET $SG14744
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN415@cf2_interp
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN406@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 18					
jne	SHORT $LN430@cf2_interp
mov	DWORD PTR tv175[ebp], OFFSET $SG14750
jmp	SHORT $LN431@cf2_interp
mov	DWORD PTR tv175[ebp], OFFSET $SG14751
mov	eax, DWORD PTR tv175[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN410@cf2_interp
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN405@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN401@cf2_interp
push	OFFSET $SG14757
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN404@cf2_interp
jmp	$LN416@cf2_interp
push	0
lea	ecx, DWORD PTR _haveWidth$[ebp]
push	ecx
mov	edx, DWORD PTR _width$[ebp]
push	edx
lea	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cf2_doStems
add	esp, 24					
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
movzx	edx, BYTE PTR [ecx+753]
test	edx, edx
je	SHORT $LN400@cf2_interp
jmp	$exit$480
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN395@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 23					
jne	SHORT $LN432@cf2_interp
mov	DWORD PTR tv202[ebp], OFFSET $SG14764
jmp	SHORT $LN433@cf2_interp
mov	DWORD PTR tv202[ebp], OFFSET $SG14765
mov	eax, DWORD PTR tv202[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN399@cf2_interp
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN394@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN390@cf2_interp
push	OFFSET $SG14771
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN393@cf2_interp
jmp	$LN416@cf2_interp
push	0
lea	ecx, DWORD PTR _haveWidth$[ebp]
push	ecx
mov	edx, DWORD PTR _width$[ebp]
push	edx
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cf2_doStems
add	esp, 24					
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
movzx	edx, BYTE PTR [ecx+753]
test	edx, edx
je	SHORT $LN389@cf2_interp
jmp	$exit$480
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN384@cf2_interp
push	OFFSET $SG14778
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN388@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	SHORT $LN383@cf2_interp
movzx	ecx, BYTE PTR _haveWidth$[ebp]
test	ecx, ecx
jne	SHORT $LN383@cf2_interp
push	0
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN382@cf2_interp
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_moveTo
add	esp, 12					
jmp	$LN416@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$60[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN377@cf2_interp
push	OFFSET $SG14788
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN380@cf2_interp
mov	DWORD PTR _index$61[ebp], 0
jmp	SHORT $LN376@cf2_interp
mov	ecx, DWORD PTR _index$61[ebp]
add	ecx, 2
mov	DWORD PTR _index$61[ebp], ecx
mov	edx, DWORD PTR _index$61[ebp]
cmp	edx, DWORD PTR _count$60[ebp]
jae	SHORT $LN374@cf2_interp
mov	eax, DWORD PTR _index$61[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	edx, DWORD PTR _index$61[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	ecx, DWORD PTR _curY$[ebp]
push	ecx
mov	edx, DWORD PTR _curX$[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_lineTo
add	esp, 12					
jmp	SHORT $LN375@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$58[ebp], eax
movzx	eax, BYTE PTR _op1$[ebp]
cmp	eax, 6
jne	SHORT $LN434@cf2_interp
mov	DWORD PTR tv274[ebp], 1
jmp	SHORT $LN435@cf2_interp
mov	DWORD PTR tv274[ebp], 0
mov	cl, BYTE PTR tv274[ebp]
mov	BYTE PTR _isX$57[ebp], cl
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN369@cf2_interp
movzx	ecx, BYTE PTR _isX$57[ebp]
test	ecx, ecx
je	SHORT $LN436@cf2_interp
mov	DWORD PTR tv281[ebp], OFFSET $SG14800
jmp	SHORT $LN437@cf2_interp
mov	DWORD PTR tv281[ebp], OFFSET $SG14801
mov	edx, DWORD PTR tv281[ebp]
push	edx
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN372@cf2_interp
mov	DWORD PTR _index$59[ebp], 0
jmp	SHORT $LN368@cf2_interp
mov	ecx, DWORD PTR _index$59[ebp]
add	ecx, 1
mov	DWORD PTR _index$59[ebp], ecx
mov	edx, DWORD PTR _index$59[ebp]
cmp	edx, DWORD PTR _count$58[ebp]
jae	$LN366@cf2_interp
mov	eax, DWORD PTR _index$59[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
mov	DWORD PTR _v$56[ebp], eax
movzx	edx, BYTE PTR _isX$57[ebp]
test	edx, edx
je	SHORT $LN365@cf2_interp
mov	eax, DWORD PTR _curX$[ebp]
add	eax, DWORD PTR _v$56[ebp]
mov	DWORD PTR _curX$[ebp], eax
jmp	SHORT $LN364@cf2_interp
mov	ecx, DWORD PTR _curY$[ebp]
add	ecx, DWORD PTR _v$56[ebp]
mov	DWORD PTR _curY$[ebp], ecx
movzx	edx, BYTE PTR _isX$57[ebp]
test	edx, edx
jne	SHORT $LN438@cf2_interp
mov	DWORD PTR tv327[ebp], 1
jmp	SHORT $LN439@cf2_interp
mov	DWORD PTR tv327[ebp], 0
mov	al, BYTE PTR tv327[ebp]
mov	BYTE PTR _isX$57[ebp], al
mov	ecx, DWORD PTR _curY$[ebp]
push	ecx
mov	edx, DWORD PTR _curX$[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_lineTo
add	esp, 12					
jmp	$LN367@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$55[ebp], eax
mov	DWORD PTR _index$54[ebp], 0
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN359@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 24					
jne	SHORT $LN440@cf2_interp
mov	DWORD PTR tv340[ebp], OFFSET $SG14815
jmp	SHORT $LN441@cf2_interp
mov	DWORD PTR tv340[ebp], OFFSET $SG14816
mov	eax, DWORD PTR tv340[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN362@cf2_interp
mov	edx, DWORD PTR _index$54[ebp]
add	edx, 6
cmp	edx, DWORD PTR _count$55[ebp]
ja	$LN357@cf2_interp
mov	eax, DWORD PTR _index$54[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$53[ebp], eax
mov	edx, DWORD PTR _index$54[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$52[ebp], eax
mov	ecx, DWORD PTR _index$54[ebp]
add	ecx, 2
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$53[ebp]
mov	DWORD PTR _x2$51[ebp], eax
mov	eax, DWORD PTR _index$54[ebp]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$52[ebp]
mov	DWORD PTR _y2$50[ebp], eax
mov	edx, DWORD PTR _index$54[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$51[ebp]
mov	DWORD PTR _x3$49[ebp], eax
mov	ecx, DWORD PTR _index$54[ebp]
add	ecx, 5
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$50[ebp]
mov	DWORD PTR _y3$48[ebp], eax
mov	eax, DWORD PTR _y3$48[ebp]
push	eax
mov	ecx, DWORD PTR _x3$49[ebp]
push	ecx
mov	edx, DWORD PTR _y2$50[ebp]
push	edx
mov	eax, DWORD PTR _x2$51[ebp]
push	eax
mov	ecx, DWORD PTR _y1$52[ebp]
push	ecx
mov	edx, DWORD PTR _x1$53[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	ecx, DWORD PTR _x3$49[ebp]
mov	DWORD PTR _curX$[ebp], ecx
mov	edx, DWORD PTR _y3$48[ebp]
mov	DWORD PTR _curY$[ebp], edx
mov	eax, DWORD PTR _index$54[ebp]
add	eax, 6
mov	DWORD PTR _index$54[ebp], eax
jmp	$LN360@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 24					
jne	SHORT $LN356@cf2_interp
mov	edx, DWORD PTR _index$54[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _index$54[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_lineTo
add	esp, 12					
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN351@cf2_interp
movzx	eax, BYTE PTR _op1$[ebp]
cmp	eax, 29					
jne	SHORT $LN442@cf2_interp
mov	DWORD PTR tv402[ebp], OFFSET $SG14833
jmp	SHORT $LN443@cf2_interp
mov	DWORD PTR tv402[ebp], OFFSET $SG14834
mov	ecx, DWORD PTR tv402[ebp]
push	ecx
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN355@cf2_interp
cmp	DWORD PTR _charstringIndex$[ebp], 10	
jle	SHORT $LN350@cf2_interp
push	OFFSET $SG14836
push	757					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	eax, DWORD PTR _charstringIndex$[ebp]
add	eax, 1
push	eax
lea	ecx, DWORD PTR _subrStack$[ebp]
push	ecx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _charstring$[ebp], eax
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popInt
add	esp, 4
mov	DWORD PTR _subrIndex$47[ebp], eax
mov	al, BYTE PTR _op1$[ebp]
mov	BYTE PTR tv418[ebp], al
cmp	BYTE PTR tv418[ebp], 29			
je	SHORT $LN347@cf2_interp
jmp	SHORT $LN341@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN343@cf2_interp
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _subrIndex$47[ebp]
add	ecx, DWORD PTR [eax+900]
push	ecx
push	OFFSET $SG14847
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN347@cf2_interp
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
mov	ecx, DWORD PTR _subrIndex$47[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_initGlobalRegionBuffer
add	esp, 12					
test	eax, eax
je	SHORT $LN342@cf2_interp
push	OFFSET $SG14849
push	778					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
jmp	SHORT $LN348@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN337@cf2_interp
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _subrIndex$47[ebp]
add	eax, DWORD PTR [edx+896]
push	eax
push	OFFSET $SG14855
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN341@cf2_interp
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
mov	eax, DWORD PTR _subrIndex$47[ebp]
push	eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_initLocalRegionBuffer
add	esp, 12					
test	eax, eax
je	SHORT $LN336@cf2_interp
push	OFFSET $SG14857
push	791					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	edx, DWORD PTR _charstringIndex$[ebp]
add	edx, 1
mov	DWORD PTR _charstringIndex$[ebp], edx
jmp	$LN426@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN331@cf2_interp
push	OFFSET $SG14863
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN335@cf2_interp
cmp	DWORD PTR _charstringIndex$[ebp], 1
jge	SHORT $LN330@cf2_interp
push	OFFSET $SG14865
push	806					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	eax, DWORD PTR _charstringIndex$[ebp]
sub	eax, 1
mov	DWORD PTR _charstringIndex$[ebp], eax
mov	ecx, DWORD PTR _charstringIndex$[ebp]
push	ecx
lea	edx, DWORD PTR _subrStack$[ebp]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _charstring$[ebp], eax
jmp	$LN426@cf2_interp
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_readByte
add	esp, 4
mov	BYTE PTR _op2$46[ebp], al
movzx	ecx, BYTE PTR _op2$46[ebp]
mov	DWORD PTR tv478[ebp], ecx
cmp	DWORD PTR tv478[ebp], 37		
ja	$LN121@cf2_interp
mov	edx, DWORD PTR tv478[ebp]
movzx	eax, BYTE PTR $LN465@cf2_interp[edx]
jmp	DWORD PTR $LN479@cf2_interp[eax*4]
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN322@cf2_interp
push	OFFSET $SG14879
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN326@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN317@cf2_interp
push	OFFSET $SG14885
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN321@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN313@cf2_interp
push	OFFSET $SG14890
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN318@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN308@cf2_interp
push	OFFSET $SG14896
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN312@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN304@cf2_interp
push	OFFSET $SG14901
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN309@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN299@cf2_interp
push	OFFSET $SG14907
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN303@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN295@cf2_interp
push	OFFSET $SG14912
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN300@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN290@cf2_interp
push	OFFSET $SG14918
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN294@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN286@cf2_interp
push	OFFSET $SG14923
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN291@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN281@cf2_interp
push	OFFSET $SG14929
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN285@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN277@cf2_interp
push	OFFSET $SG14934
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN282@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN272@cf2_interp
push	OFFSET $SG14940
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN276@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN268@cf2_interp
push	OFFSET $SG14945
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN273@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN263@cf2_interp
push	OFFSET $SG14951
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN267@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN259@cf2_interp
push	OFFSET $SG14956
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN264@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN254@cf2_interp
push	OFFSET $SG14962
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN258@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN250@cf2_interp
push	OFFSET $SG14967
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN255@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN245@cf2_interp
push	OFFSET $SG14973
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN249@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN241@cf2_interp
push	OFFSET $SG14978
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN246@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN236@cf2_interp
push	OFFSET $SG14984
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN240@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN232@cf2_interp
push	OFFSET $SG14989
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN237@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN227@cf2_interp
push	OFFSET $SG14995
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN231@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN223@cf2_interp
push	OFFSET $SG15000
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN228@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN218@cf2_interp
push	OFFSET $SG15006
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN222@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN214@cf2_interp
push	OFFSET $SG15011
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN219@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN209@cf2_interp
push	OFFSET $SG15017
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN213@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN205@cf2_interp
push	OFFSET $SG15022
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN210@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN200@cf2_interp
push	OFFSET $SG15028
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN204@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN196@cf2_interp
push	OFFSET $SG15033
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN201@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN191@cf2_interp
push	OFFSET $SG15039
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN195@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN187@cf2_interp
push	OFFSET $SG15044
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN192@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN182@cf2_interp
push	OFFSET $SG15050
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN186@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN178@cf2_interp
push	OFFSET $SG15055
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN183@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN173@cf2_interp
push	OFFSET $SG15061
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN177@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN169@cf2_interp
push	OFFSET $SG15066
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN174@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN164@cf2_interp
push	OFFSET $SG15072
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN168@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN160@cf2_interp
push	OFFSET $SG15077
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN165@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN155@cf2_interp
push	OFFSET $SG15083
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN159@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN151@cf2_interp
push	OFFSET $SG15088
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN156@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN146@cf2_interp
push	OFFSET $SG15094
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN150@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN142@cf2_interp
push	OFFSET $SG15099
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN147@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN137@cf2_interp
push	OFFSET $SG15107
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN141@cf2_interp
push	0
push	OFFSET ?readFromStack@?FB@??cf2_interpT2CharString@@9@9
lea	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
lea	edx, DWORD PTR _curY$[ebp]
push	edx
lea	eax, DWORD PTR _curX$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_doFlex
add	esp, 24					
jmp	$LN426@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN132@cf2_interp
push	OFFSET $SG15115
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN136@cf2_interp
push	0
push	OFFSET ?readFromStack@?FD@??cf2_interpT2CharString@@9@9
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
lea	eax, DWORD PTR _curY$[ebp]
push	eax
lea	ecx, DWORD PTR _curX$[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_doFlex
add	esp, 24					
jmp	$LN327@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN127@cf2_interp
push	OFFSET $SG15123
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN131@cf2_interp
push	0
push	OFFSET ?readFromStack@?FF@??cf2_interpT2CharString@@9@9
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
lea	ecx, DWORD PTR _curY$[ebp]
push	ecx
lea	edx, DWORD PTR _curX$[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_doFlex
add	esp, 24					
jmp	$LN426@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN122@cf2_interp
push	OFFSET $SG15131
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN126@cf2_interp
push	1
push	OFFSET ?readFromStack@?FH@??cf2_interpT2CharString@@9@9
lea	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
lea	edx, DWORD PTR _curY$[ebp]
push	edx
lea	eax, DWORD PTR _curX$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_doFlex
add	esp, 24					
jmp	$LN426@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN117@cf2_interp
movzx	ecx, BYTE PTR _op2$46[ebp]
push	ecx
push	OFFSET $SG15137
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN121@cf2_interp
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN112@cf2_interp
push	OFFSET $SG15143
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN116@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
je	SHORT $LN110@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
cmp	eax, 5
jne	SHORT $LN109@cf2_interp
movzx	edx, BYTE PTR _haveWidth$[ebp]
test	edx, edx
jne	SHORT $LN109@cf2_interp
push	0
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN108@cf2_interp
jmp	$exit$480
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_closeOpenPath
add	esp, 4
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	$LN107@cf2_interp
movzx	ecx, BYTE PTR _doingSeac$[ebp]
test	ecx, ecx
je	SHORT $LN106@cf2_interp
push	OFFSET $SG15155
push	1100					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popInt
add	esp, 4
mov	DWORD PTR _achar$45[ebp], eax
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_popInt
add	esp, 4
mov	DWORD PTR _bchar$44[ebp], eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_popFixed
add	esp, 4
mov	DWORD PTR _curY$[ebp], eax
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
mov	DWORD PTR _curX$[ebp], eax
lea	eax, DWORD PTR _component$43[ebp]
push	eax
mov	ecx, DWORD PTR _achar$45[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_getSeacComponent
add	esp, 12					
mov	DWORD PTR _error2$41[ebp], eax
cmp	DWORD PTR _error2$41[ebp], 0
je	SHORT $LN105@cf2_interp
mov	eax, DWORD PTR _error2$41[ebp]
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
lea	ecx, DWORD PTR _dummyWidth$42[ebp]
push	ecx
mov	edx, DWORD PTR _curY$[ebp]
push	edx
mov	eax, DWORD PTR _curX$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _translation$[ebp]
push	ecx
mov	edx, DWORD PTR _callbacks$[ebp]
push	edx
lea	eax, DWORD PTR _component$43[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cf2_interpT2CharString
add	esp, 32					
lea	edx, DWORD PTR _component$43[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_freeSeacComponent
add	esp, 8
lea	ecx, DWORD PTR _component$43[ebp]
push	ecx
mov	edx, DWORD PTR _bchar$44[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getSeacComponent
add	esp, 12					
mov	DWORD PTR _error2$41[ebp], eax
cmp	DWORD PTR _error2$41[ebp], 0
je	SHORT $LN104@cf2_interp
mov	ecx, DWORD PTR _error2$41[ebp]
mov	DWORD PTR _lastError$[ebp], ecx
jmp	$exit$480
lea	edx, DWORD PTR _dummyWidth$42[ebp]
push	edx
push	0
push	0
push	1
mov	eax, DWORD PTR _translation$[ebp]
push	eax
mov	ecx, DWORD PTR _callbacks$[ebp]
push	ecx
lea	edx, DWORD PTR _component$43[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
call	_cf2_interpT2CharString
add	esp, 32					
lea	ecx, DWORD PTR _component$43[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_freeSeacComponent
add	esp, 8
jmp	$exit$480
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN99@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 20					
jne	SHORT $LN444@cf2_interp
mov	DWORD PTR tv875[ebp], OFFSET $SG15163
jmp	SHORT $LN445@cf2_interp
mov	DWORD PTR tv875[ebp], OFFSET $SG15164
mov	eax, DWORD PTR tv875[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN103@cf2_interp
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	SHORT $LN98@cf2_interp
lea	eax, DWORD PTR _hintMask$[ebp]
push	eax
call	_cf2_hintmask_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN98@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN94@cf2_interp
push	OFFSET $SG15170
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN97@cf2_interp
jmp	$LN416@cf2_interp
push	0
lea	edx, DWORD PTR _haveWidth$[ebp]
push	edx
mov	eax, DWORD PTR _width$[ebp]
push	eax
lea	ecx, DWORD PTR _vStemHintArray$[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
call	_cf2_doStems
add	esp, 24					
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+753]
test	eax, eax
je	SHORT $LN93@cf2_interp
jmp	$exit$480
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 19					
jne	SHORT $LN92@cf2_interp
lea	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_size
add	esp, 4
mov	esi, eax
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
call	_cf2_arrstack_size
add	esp, 4
add	esi, eax
push	esi
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_read
add	esp, 12					
jmp	$LN91@cf2_interp
mov	eax, DWORD PTR _scaleY$[ebp]
push	eax
lea	ecx, DWORD PTR _glyphPath$[ebp+11612]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp+7744]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
lea	ecx, DWORD PTR _counterHintMap$40[ebp]
push	ecx
call	_cf2_hintmap_init
add	esp, 20					
mov	edx, DWORD PTR _error$[ebp]
push	edx
lea	eax, DWORD PTR _counterMask$39[ebp]
push	eax
call	_cf2_hintmask_init
add	esp, 8
lea	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
call	_cf2_arrstack_size
add	esp, 4
mov	esi, eax
lea	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_size
add	esp, 4
add	esi, eax
push	esi
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
lea	ecx, DWORD PTR _counterMask$39[ebp]
push	ecx
call	_cf2_hintmask_read
add	esp, 12					
push	0
push	0
lea	edx, DWORD PTR _counterMask$39[ebp]
push	edx
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
lea	edx, DWORD PTR _counterHintMap$40[ebp]
push	edx
call	_cf2_hintmap_build
add	esp, 24					
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN86@cf2_interp
push	OFFSET $SG15181
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN90@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 2
jbe	SHORT $LN85@cf2_interp
movzx	ecx, BYTE PTR _haveWidth$[ebp]
test	ecx, ecx
jne	SHORT $LN85@cf2_interp
push	0
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN84@cf2_interp
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _curY$[ebp]
push	ecx
mov	edx, DWORD PTR _curX$[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_moveTo
add	esp, 12					
jmp	$LN416@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN79@cf2_interp
push	OFFSET $SG15189
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN83@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	SHORT $LN78@cf2_interp
movzx	edx, BYTE PTR _haveWidth$[ebp]
test	edx, edx
jne	SHORT $LN78@cf2_interp
push	0
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN77@cf2_interp
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_moveTo
add	esp, 12					
jmp	$LN416@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$38[ebp], eax
mov	DWORD PTR _index$37[ebp], 0
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN72@cf2_interp
push	OFFSET $SG15199
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN75@cf2_interp
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 6
cmp	ecx, DWORD PTR _count$38[ebp]
jae	SHORT $LN70@cf2_interp
mov	edx, DWORD PTR _index$37[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_lineTo
add	esp, 12					
mov	eax, DWORD PTR _index$37[ebp]
add	eax, 2
mov	DWORD PTR _index$37[ebp], eax
jmp	SHORT $LN73@cf2_interp
mov	ecx, DWORD PTR _index$37[ebp]
cmp	ecx, DWORD PTR _count$38[ebp]
jae	$LN68@cf2_interp
mov	edx, DWORD PTR _index$37[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$36[ebp], eax
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$35[ebp], eax
mov	eax, DWORD PTR _index$37[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$36[ebp]
mov	DWORD PTR _x2$34[ebp], eax
mov	edx, DWORD PTR _index$37[ebp]
add	edx, 3
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$35[ebp]
mov	DWORD PTR _y2$33[ebp], eax
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 4
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$34[ebp]
mov	DWORD PTR _x3$32[ebp], eax
mov	eax, DWORD PTR _index$37[ebp]
add	eax, 5
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$33[ebp]
mov	DWORD PTR _y3$31[ebp], eax
mov	edx, DWORD PTR _y3$31[ebp]
push	edx
mov	eax, DWORD PTR _x3$32[ebp]
push	eax
mov	ecx, DWORD PTR _y2$33[ebp]
push	ecx
mov	edx, DWORD PTR _x2$34[ebp]
push	edx
mov	eax, DWORD PTR _y1$35[ebp]
push	eax
mov	ecx, DWORD PTR _x1$36[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	eax, DWORD PTR _x3$32[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _y3$31[ebp]
mov	DWORD PTR _curY$[ebp], ecx
mov	edx, DWORD PTR _index$37[ebp]
add	edx, 6
mov	DWORD PTR _index$37[ebp], edx
jmp	$LN70@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$30[ebp], eax
mov	DWORD PTR _index$29[ebp], 0
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN63@cf2_interp
push	OFFSET $SG15219
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN66@cf2_interp
mov	edx, DWORD PTR _index$29[ebp]
cmp	edx, DWORD PTR _count$30[ebp]
jae	$LN61@cf2_interp
mov	eax, DWORD PTR _count$30[ebp]
sub	eax, DWORD PTR _index$29[ebp]
and	eax, 1
je	SHORT $LN60@cf2_interp
mov	ecx, DWORD PTR _index$29[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$28[ebp], eax
mov	eax, DWORD PTR _index$29[ebp]
add	eax, 1
mov	DWORD PTR _index$29[ebp], eax
jmp	SHORT $LN59@cf2_interp
mov	ecx, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$28[ebp], ecx
mov	edx, DWORD PTR _index$29[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$27[ebp], eax
mov	ecx, DWORD PTR _index$29[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$28[ebp]
mov	DWORD PTR _x2$26[ebp], eax
mov	eax, DWORD PTR _index$29[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$27[ebp]
mov	DWORD PTR _y2$25[ebp], eax
mov	edx, DWORD PTR _x2$26[ebp]
mov	DWORD PTR _x3$24[ebp], edx
mov	eax, DWORD PTR _index$29[ebp]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$25[ebp]
mov	DWORD PTR _y3$23[ebp], eax
mov	edx, DWORD PTR _y3$23[ebp]
push	edx
mov	eax, DWORD PTR _x3$24[ebp]
push	eax
mov	ecx, DWORD PTR _y2$25[ebp]
push	ecx
mov	edx, DWORD PTR _x2$26[ebp]
push	edx
mov	eax, DWORD PTR _y1$27[ebp]
push	eax
mov	ecx, DWORD PTR _x1$28[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	eax, DWORD PTR _x3$24[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _y3$23[ebp]
mov	DWORD PTR _curY$[ebp], ecx
mov	edx, DWORD PTR _index$29[ebp]
add	edx, 4
mov	DWORD PTR _index$29[ebp], edx
jmp	$LN64@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$22[ebp], eax
mov	DWORD PTR _index$21[ebp], 0
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN54@cf2_interp
push	OFFSET $SG15238
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN57@cf2_interp
mov	edx, DWORD PTR _index$21[ebp]
cmp	edx, DWORD PTR _count$22[ebp]
jae	$LN52@cf2_interp
mov	eax, DWORD PTR _count$22[ebp]
sub	eax, DWORD PTR _index$21[ebp]
and	eax, 1
je	SHORT $LN51@cf2_interp
mov	ecx, DWORD PTR _index$21[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$19[ebp], eax
mov	eax, DWORD PTR _index$21[ebp]
add	eax, 1
mov	DWORD PTR _index$21[ebp], eax
jmp	SHORT $LN50@cf2_interp
mov	ecx, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$19[ebp], ecx
mov	edx, DWORD PTR _index$21[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$20[ebp], eax
mov	ecx, DWORD PTR _index$21[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$20[ebp]
mov	DWORD PTR _x2$18[ebp], eax
mov	eax, DWORD PTR _index$21[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$19[ebp]
mov	DWORD PTR _y2$17[ebp], eax
mov	edx, DWORD PTR _index$21[ebp]
add	edx, 3
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$18[ebp]
mov	DWORD PTR _x3$16[ebp], eax
mov	ecx, DWORD PTR _y2$17[ebp]
mov	DWORD PTR _y3$15[ebp], ecx
mov	edx, DWORD PTR _y3$15[ebp]
push	edx
mov	eax, DWORD PTR _x3$16[ebp]
push	eax
mov	ecx, DWORD PTR _y2$17[ebp]
push	ecx
mov	edx, DWORD PTR _x2$18[ebp]
push	edx
mov	eax, DWORD PTR _y1$19[ebp]
push	eax
mov	ecx, DWORD PTR _x1$20[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	eax, DWORD PTR _x3$16[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _y3$15[ebp]
mov	DWORD PTR _curY$[ebp], ecx
mov	edx, DWORD PTR _index$21[ebp]
add	edx, 4
mov	DWORD PTR _index$21[ebp], edx
jmp	$LN55@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$14[ebp], eax
mov	DWORD PTR _index$13[ebp], 0
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 31					
jne	SHORT $LN446@cf2_interp
mov	DWORD PTR tv1167[ebp], 1
jmp	SHORT $LN447@cf2_interp
mov	DWORD PTR tv1167[ebp], 0
mov	al, BYTE PTR tv1167[ebp]
mov	BYTE PTR _alternate$12[ebp], al
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN45@cf2_interp
movzx	eax, BYTE PTR _alternate$12[ebp]
test	eax, eax
je	SHORT $LN448@cf2_interp
mov	DWORD PTR tv1174[ebp], OFFSET $SG15258
jmp	SHORT $LN449@cf2_interp
mov	DWORD PTR tv1174[ebp], OFFSET $SG15259
mov	ecx, DWORD PTR tv1174[ebp]
push	ecx
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN48@cf2_interp
mov	eax, DWORD PTR _index$13[ebp]
cmp	eax, DWORD PTR _count$14[ebp]
jae	$LN43@cf2_interp
movzx	ecx, BYTE PTR _alternate$12[ebp]
test	ecx, ecx
je	$LN42@cf2_interp
mov	edx, DWORD PTR _index$13[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$11[ebp], eax
mov	ecx, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$8[ebp], ecx
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$11[ebp]
mov	DWORD PTR _x2$10[ebp], eax
mov	ecx, DWORD PTR _index$13[ebp]
add	ecx, 2
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$8[ebp]
mov	DWORD PTR _y2$7[ebp], eax
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$7[ebp]
mov	DWORD PTR _y3$6[ebp], eax
mov	edx, DWORD PTR _count$14[ebp]
sub	edx, DWORD PTR _index$13[ebp]
cmp	edx, 5
jne	SHORT $LN41@cf2_interp
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 4
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$10[ebp]
mov	DWORD PTR _x3$9[ebp], eax
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 1
mov	DWORD PTR _index$13[ebp], edx
jmp	SHORT $LN40@cf2_interp
mov	eax, DWORD PTR _x2$10[ebp]
mov	DWORD PTR _x3$9[ebp], eax
mov	BYTE PTR _alternate$12[ebp], 0
jmp	$LN39@cf2_interp
mov	ecx, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$11[ebp], ecx
mov	edx, DWORD PTR _index$13[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$8[ebp], eax
mov	ecx, DWORD PTR _index$13[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$11[ebp]
mov	DWORD PTR _x2$10[ebp], eax
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$8[ebp]
mov	DWORD PTR _y2$7[ebp], eax
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 3
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$10[ebp]
mov	DWORD PTR _x3$9[ebp], eax
mov	ecx, DWORD PTR _count$14[ebp]
sub	ecx, DWORD PTR _index$13[ebp]
cmp	ecx, 5
jne	SHORT $LN38@cf2_interp
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$7[ebp]
mov	DWORD PTR _y3$6[ebp], eax
mov	ecx, DWORD PTR _index$13[ebp]
add	ecx, 1
mov	DWORD PTR _index$13[ebp], ecx
jmp	SHORT $LN37@cf2_interp
mov	edx, DWORD PTR _y2$7[ebp]
mov	DWORD PTR _y3$6[ebp], edx
mov	BYTE PTR _alternate$12[ebp], 1
mov	eax, DWORD PTR _y3$6[ebp]
push	eax
mov	ecx, DWORD PTR _x3$9[ebp]
push	ecx
mov	edx, DWORD PTR _y2$7[ebp]
push	edx
mov	eax, DWORD PTR _x2$10[ebp]
push	eax
mov	ecx, DWORD PTR _y1$8[ebp]
push	ecx
mov	edx, DWORD PTR _x1$11[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	ecx, DWORD PTR _x3$9[ebp]
mov	DWORD PTR _curX$[ebp], ecx
mov	edx, DWORD PTR _y3$6[ebp]
mov	DWORD PTR _curY$[ebp], edx
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 4
mov	DWORD PTR _index$13[ebp], eax
jmp	$LN46@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
mov	esi, eax
shl	esi, 8
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_readByte
add	esp, 4
or	esi, eax
movsx	ecx, si
mov	DWORD PTR _v$5[ebp], ecx
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN32@cf2_interp
mov	ecx, DWORD PTR _v$5[ebp]
push	ecx
push	OFFSET $SG15282
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN35@cf2_interp
mov	eax, DWORD PTR _v$5[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN426@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 246				
jg	SHORT $LN30@cf2_interp
movzx	eax, BYTE PTR _op1$[ebp]
sub	eax, 139				
mov	DWORD PTR _v$4[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN26@cf2_interp
mov	eax, DWORD PTR _v$4[ebp]
push	eax
push	OFFSET $SG15290
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN29@cf2_interp
mov	edx, DWORD PTR _v$4[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN13@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 250				
jg	$LN24@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
mov	DWORD PTR _v$3[ebp], edx
mov	eax, DWORD PTR _v$3[ebp]
sub	eax, 247				
mov	DWORD PTR _v$3[ebp], eax
mov	ecx, DWORD PTR _v$3[ebp]
shl	ecx, 8
mov	DWORD PTR _v$3[ebp], ecx
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
add	eax, DWORD PTR _v$3[ebp]
mov	DWORD PTR _v$3[ebp], eax
mov	eax, DWORD PTR _v$3[ebp]
add	eax, 108				
mov	DWORD PTR _v$3[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN20@cf2_interp
mov	eax, DWORD PTR _v$3[ebp]
push	eax
push	OFFSET $SG15298
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN23@cf2_interp
mov	edx, DWORD PTR _v$3[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN13@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 254				
jg	$LN18@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
mov	DWORD PTR _v$2[ebp], edx
mov	eax, DWORD PTR _v$2[ebp]
sub	eax, 251				
mov	DWORD PTR _v$2[ebp], eax
mov	ecx, DWORD PTR _v$2[ebp]
shl	ecx, 8
mov	DWORD PTR _v$2[ebp], ecx
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
add	eax, DWORD PTR _v$2[ebp]
mov	DWORD PTR _v$2[ebp], eax
mov	eax, DWORD PTR _v$2[ebp]
neg	eax
sub	eax, 108				
mov	DWORD PTR _v$2[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN14@cf2_interp
mov	eax, DWORD PTR _v$2[ebp]
push	eax
push	OFFSET $SG15306
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN17@cf2_interp
mov	edx, DWORD PTR _v$2[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN13@cf2_interp
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
call	_cf2_buf_readByte
add	esp, 4
mov	esi, eax
shl	esi, 24					
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
shl	eax, 16					
or	esi, eax
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_readByte
add	esp, 4
shl	eax, 8
or	esi, eax
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
call	_cf2_buf_readByte
add	esp, 4
or	esi, eax
mov	DWORD PTR _v$1[ebp], esi
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN9@cf2_interp
cvtsi2sd xmm0, DWORD PTR _v$1[ebp]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG15318
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN12@cf2_interp
mov	edx, DWORD PTR _v$1[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushFixed
add	esp, 8
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN5@cf2_interp
push	OFFSET $SG15323
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN424@cf2_interp
mov	edx, DWORD PTR _lastError$[ebp]
push	edx
mov	eax, DWORD PTR _error$[ebp]
push	eax
call	_cf2_setError
add	esp, 8
lea	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
call	_cf2_glyphpath_finalize
add	esp, 4
lea	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_finalize
add	esp, 4
lea	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
call	_cf2_arrstack_finalize
add	esp, 4
lea	ecx, DWORD PTR _subrStack$[ebp]
push	ecx
call	_cf2_arrstack_finalize
add	esp, 4
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_free
add	esp, 4
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN1@cf2_interp
push	OFFSET $SG15328
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN4@cf2_interp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN477@cf2_interp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 16240				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	10					
DD	$LN476@cf2_interp
DD	-80					
DD	32					
DD	$LN466@cf2_interp
DD	-89					
DD	1
DD	$LN467@cf2_interp
DD	-140					
DD	32					
DD	$LN468@cf2_interp
DD	-180					
DD	32					
DD	$LN469@cf2_interp
DD	-216					
DD	28					
DD	$LN470@cf2_interp
DD	-12008					
DD	11784					
DD	$LN471@cf2_interp
DD	-12104					
DD	16					
DD	$LN472@cf2_interp
DD	-12116					
DD	4
DD	$LN473@cf2_interp
DD	-15996					
DD	3868					
DD	$LN474@cf2_interp
DD	-16032					
DD	28					
DD	$LN475@cf2_interp
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	101					
DB	114					
DB	77					
DB	97					
DB	115					
DB	107					
DB	0
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	101					
DB	114					
DB	72					
DB	105					
DB	110					
DB	116					
DB	77					
DB	97					
DB	112					
DB	0
DB	100					
DB	117					
DB	109					
DB	109					
DB	121					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	99					
DB	111					
DB	109					
DB	112					
DB	111					
DB	110					
DB	101					
DB	110					
DB	116					
DB	0
DB	103					
DB	108					
DB	121					
DB	112					
DB	104					
DB	80					
DB	97					
DB	116					
DB	104					
DB	0
DB	104					
DB	105					
DB	110					
DB	116					
DB	77					
DB	97					
DB	115					
DB	107					
DB	0
DB	118					
DB	83					
DB	116					
DB	101					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	65					
DB	114					
DB	114					
DB	97					
DB	121					
DB	0
DB	104					
DB	83					
DB	116					
DB	101					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	65					
DB	114					
DB	114					
DB	97					
DB	121					
DB	0
DB	104					
DB	97					
DB	118					
DB	101					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	115					
DB	117					
DB	98					
DB	114					
DB	83					
DB	116					
DB	97					
DB	99					
DB	107					
DB	0
npad	3
DD	$LN415@cf2_interp
DD	$LN410@cf2_interp
DD	$LN399@cf2_interp
DD	$LN388@cf2_interp
DD	$LN381@cf2_interp
DD	$LN373@cf2_interp
DD	$LN363@cf2_interp
DD	$LN355@cf2_interp
DD	$LN335@cf2_interp
DD	$LN329@cf2_interp
DD	$LN116@cf2_interp
DD	$LN103@cf2_interp
DD	$LN90@cf2_interp
DD	$LN83@cf2_interp
DD	$LN76@cf2_interp
DD	$LN67@cf2_interp
DD	$LN58@cf2_interp
DD	$LN36@cf2_interp
DD	$LN49@cf2_interp
DB	0
DB	1
DB	0
DB	2
DB	3
DB	4
DB	5
DB	5
DB	6
DB	0
DB	7
DB	8
DB	9
DB	0
DB	10					
DB	0
DB	0
DB	0
DB	1
DB	11					
DB	11					
DB	12					
DB	13					
DB	2
DB	6
DB	14					
DB	15					
DB	16					
DB	17					
DB	7
DB	18					
DB	18					
DD	$LN326@cf2_interp
DD	$LN321@cf2_interp
DD	$LN312@cf2_interp
DD	$LN303@cf2_interp
DD	$LN294@cf2_interp
DD	$LN285@cf2_interp
DD	$LN276@cf2_interp
DD	$LN267@cf2_interp
DD	$LN258@cf2_interp
DD	$LN249@cf2_interp
DD	$LN240@cf2_interp
DD	$LN231@cf2_interp
DD	$LN222@cf2_interp
DD	$LN213@cf2_interp
DD	$LN204@cf2_interp
DD	$LN195@cf2_interp
DD	$LN186@cf2_interp
DD	$LN177@cf2_interp
DD	$LN168@cf2_interp
DD	$LN159@cf2_interp
DD	$LN150@cf2_interp
DD	$LN141@cf2_interp
DD	$LN136@cf2_interp
DD	$LN131@cf2_interp
DD	$LN126@cf2_interp
DD	$LN121@cf2_interp
DB	0
DB	25					
DB	25					
DB	1
DB	2
DB	3
DB	25					
DB	25					
DB	25					
DB	4
DB	5
DB	6
DB	7
DB	25					
DB	8
DB	9
DB	25					
DB	25					
DB	10					
DB	25					
DB	11					
DB	12					
DB	13					
DB	14					
DB	15					
DB	25					
DB	16					
DB	17					
DB	18					
DB	19					
DB	20					
DB	25					
DB	25					
DB	25					
DB	21					
DB	22					
DB	23					
DB	24					
ENDP
_cf2_hintmask_setAll PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	ecx, DWORD PTR _bitCount$[ebp]
neg	ecx
and	ecx, 7
mov	eax, 1
shl	eax, cl
sub	eax, 1
mov	DWORD PTR _mask$[ebp], eax
mov	ecx, DWORD PTR _bitCount$[ebp]
push	ecx
mov	edx, DWORD PTR _hintmask$[ebp]
push	edx
call	_cf2_hintmask_setCounts
add	esp, 8
test	eax, eax
jne	SHORT $LN11@cf2_hintma
jmp	$LN13@cf2_hintma
mov	eax, DWORD PTR _hintmask$[ebp]
cmp	DWORD PTR [eax+12], 0
ja	SHORT $LN10@cf2_hintma
push	OFFSET $SG14531
push	185					
push	OFFSET $SG14532
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN11@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
cmp	DWORD PTR [edx+12], 12			
jb	SHORT $LN6@cf2_hintma
push	OFFSET $SG14537
push	187					
push	OFFSET $SG14538
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN7@cf2_hintma
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN3@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+12]
jae	SHORT $LN1@cf2_hintma
mov	ecx, DWORD PTR _hintmask$[ebp]
add	ecx, DWORD PTR _i$[ebp]
mov	BYTE PTR [ecx+16], 255			
jmp	SHORT $LN2@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR _mask$[ebp]
not	ecx
mov	edx, DWORD PTR _hintmask$[ebp]
movzx	eax, BYTE PTR [edx+eax+15]
and	eax, ecx
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	BYTE PTR [ecx+edx+15], al
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmask_getMaskPtr PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
add	eax, 16					
pop	ebp
ret	0
ENDP
_cf2_hintmask_setNew PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
mov	cl, BYTE PTR _val$[ebp]
mov	BYTE PTR [eax+5], cl
pop	ebp
ret	0
ENDP
_cf2_hintmask_isNew PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
mov	al, BYTE PTR [eax+5]
pop	ebp
ret	0
ENDP
_cf2_hintmask_isValid PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
mov	al, BYTE PTR [eax+4]
pop	ebp
ret	0
ENDP
_cf2_hintmask_init PROC
push	ebp
mov	ebp, esp
push	28					
push	0
mov	eax, DWORD PTR _hintmask$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getGlyphOutline PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _lastError$[ebp], 0
mov	DWORD PTR _advWidth$[ebp], 0
mov	eax, DWORD PTR _transform$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _translation$[ebp], ecx
mov	edx, DWORD PTR _transform$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _translation$[ebp+4], eax
mov	ecx, DWORD PTR _transform$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cf2_font_setup
add	esp, 8
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN6@cf2_getGly
jmp	$exit$13
mov	ecx, DWORD PTR _font$[ebp]
mov	BYTE PTR [ecx+192], 0
mov	edx, DWORD PTR _font$[ebp]
mov	al, BYTE PTR [edx+141]
mov	BYTE PTR _needWinding$[ebp], al
mov	ecx, 1
test	ecx, ecx
je	SHORT $LN4@cf2_getGly
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
call	_cf2_outline_reset
add	esp, 4
lea	eax, DWORD PTR _advWidth$[ebp]
push	eax
push	0
push	0
push	0
lea	ecx, DWORD PTR _translation$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cf2_interpT2CharString
add	esp, 32					
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+4], 0
je	SHORT $LN3@cf2_getGly
jmp	SHORT $exit$13
movzx	eax, BYTE PTR _needWinding$[ebp]
test	eax, eax
jne	SHORT $LN2@cf2_getGly
jmp	SHORT $LN4@cf2_getGly
mov	ecx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [ecx+116], 0
jl	SHORT $LN1@cf2_getGly
jmp	SHORT $LN4@cf2_getGly
mov	edx, DWORD PTR _font$[ebp]
mov	BYTE PTR [edx+192], 1
mov	BYTE PTR _needWinding$[ebp], 0
jmp	SHORT $LN5@cf2_getGly
mov	eax, DWORD PTR _font$[ebp]
add	eax, 100				
push	eax
call	_cf2_outline_close
add	esp, 4
mov	ecx, DWORD PTR _glyphWidth$[ebp]
mov	edx, DWORD PTR _advWidth$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _lastError$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 4
push	ecx
call	_cf2_setError
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@cf2_getGly
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN11@cf2_getGly
DD	-16					
DD	8
DD	$LN9@cf2_getGly
DD	-28					
DD	4
DD	$LN10@cf2_getGly
DB	97					
DB	100					
DB	118					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	116					
DB	114					
DB	97					
DB	110					
DB	115					
DB	108					
DB	97					
DB	116					
DB	105					
DB	111					
DB	110					
DB	0
ENDP
_cf2_glyphpath_closeOpenPath PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11664]
test	ecx, ecx
je	$LN3@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11665], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11740]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11736]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_lineTo
add	esp, 12					
mov	edx, DWORD PTR _glyphpath$[ebp]
movzx	eax, BYTE PTR [edx+11744]
test	eax, eax
je	SHORT $LN1@cf2_glyphp
push	1
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11716]
push	edx
mov	eax, DWORD PTR [ecx+11712]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11704				
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_pushPrevElem
add	esp, 24					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11667], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11664], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11665], 0
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11744], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_curveTo PROC
push	ebp
mov	ebp, esp
sub	esp, 112				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-112]
mov	ecx, 28					
mov	eax, -858993460				
rep stosd
lea	eax, DWORD PTR _yOffset1$[ebp]
push	eax
lea	ecx, DWORD PTR _xOffset1$[ebp]
push	ecx
mov	edx, DWORD PTR _y1$[ebp]
push	edx
mov	eax, DWORD PTR _x1$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11724]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11720]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_computeOffset
add	esp, 28					
lea	eax, DWORD PTR _yOffset3$[ebp]
push	eax
lea	ecx, DWORD PTR _xOffset3$[ebp]
push	ecx
mov	edx, DWORD PTR _y3$[ebp]
push	edx
mov	eax, DWORD PTR _x3$[ebp]
push	eax
mov	ecx, DWORD PTR _y2$[ebp]
push	ecx
mov	edx, DWORD PTR _x2$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_computeOffset
add	esp, 28					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	esi, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _y2$[ebp]
push	edx
mov	eax, DWORD PTR _x2$[ebp]
push	eax
mov	ecx, DWORD PTR _y1$[ebp]
push	ecx
mov	edx, DWORD PTR _x1$[ebp]
push	edx
call	_cf2_getWindingMomentum
add	esp, 16					
add	eax, DWORD PTR [esi+16]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11720]
add	ecx, DWORD PTR _xOffset1$[ebp]
mov	DWORD PTR _P0$[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11724]
add	eax, DWORD PTR _yOffset1$[ebp]
mov	DWORD PTR _P0$[ebp+4], eax
mov	ecx, DWORD PTR _x1$[ebp]
add	ecx, DWORD PTR _xOffset1$[ebp]
mov	DWORD PTR _P1$[ebp], ecx
mov	edx, DWORD PTR _y1$[ebp]
add	edx, DWORD PTR _yOffset1$[ebp]
mov	DWORD PTR _P1$[ebp+4], edx
mov	eax, DWORD PTR _x2$[ebp]
add	eax, DWORD PTR _xOffset3$[ebp]
mov	DWORD PTR _P2$[ebp], eax
mov	ecx, DWORD PTR _y2$[ebp]
add	ecx, DWORD PTR _yOffset3$[ebp]
mov	DWORD PTR _P2$[ebp+4], ecx
mov	edx, DWORD PTR _x3$[ebp]
add	edx, DWORD PTR _xOffset3$[ebp]
mov	DWORD PTR _P3$[ebp], edx
mov	eax, DWORD PTR _y3$[ebp]
add	eax, DWORD PTR _yOffset3$[ebp]
mov	DWORD PTR _P3$[ebp+4], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
movzx	edx, BYTE PTR [ecx+11667]
test	edx, edx
je	SHORT $LN7@cf2_glyphp
mov	eax, DWORD PTR _P0$[ebp+4]
push	eax
mov	ecx, DWORD PTR _P0$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_pushMove
add	esp, 12					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11667], 0
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11664], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _P1$[ebp]
mov	DWORD PTR [edx+11712], eax
mov	ecx, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [edx+11716], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
movzx	eax, BYTE PTR [edx+11744]
test	eax, eax
je	SHORT $LN6@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN4@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [eax+28], 0
je	SHORT $LN4@cf2_glyphp
push	OFFSET $SG14396
push	1783					
push	OFFSET $SG14397
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_glyphp
push	0
mov	edx, DWORD PTR _P1$[ebp+4]
push	edx
mov	eax, DWORD PTR _P1$[ebp]
push	eax
lea	ecx, DWORD PTR _P0$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_pushPrevElem
add	esp, 24					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11744], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [edx+11748], 4
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P0$[ebp]
mov	DWORD PTR [eax+11752], ecx
mov	edx, DWORD PTR _P0$[ebp+4]
mov	DWORD PTR [eax+11756], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P1$[ebp]
mov	DWORD PTR [eax+11760], ecx
mov	edx, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [eax+11764], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P2$[ebp]
mov	DWORD PTR [eax+11768], ecx
mov	edx, DWORD PTR _P2$[ebp+4]
mov	DWORD PTR [eax+11772], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P3$[ebp]
mov	DWORD PTR [eax+11776], ecx
mov	edx, DWORD PTR _P3$[ebp+4]
mov	DWORD PTR [eax+11780], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11676]
push	ecx
call	_cf2_hintmask_isNew
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN1@cf2_glyphp
push	0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11680]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11676]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11672]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11668]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_build
add	esp, 24					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _x3$[ebp]
mov	DWORD PTR [eax+11720], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _y3$[ebp]
mov	DWORD PTR [edx+11724], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 112				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	8
DD	$LN18@cf2_glyphp
DD	-8					
DD	4
DD	$LN10@cf2_glyphp
DD	-20					
DD	4
DD	$LN11@cf2_glyphp
DD	-32					
DD	4
DD	$LN12@cf2_glyphp
DD	-44					
DD	4
DD	$LN13@cf2_glyphp
DD	-60					
DD	8
DD	$LN14@cf2_glyphp
DD	-76					
DD	8
DD	$LN15@cf2_glyphp
DD	-92					
DD	8
DD	$LN16@cf2_glyphp
DD	-108					
DD	8
DD	$LN17@cf2_glyphp
DB	80					
DB	51					
DB	0
DB	80					
DB	50					
DB	0
DB	80					
DB	49					
DB	0
DB	80					
DB	48					
DB	0
DB	121					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	51					
DB	0
DB	120					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	51					
DB	0
DB	121					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	49					
DB	0
DB	120					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	49					
DB	0
ENDP
_cf2_glyphpath_lineTo PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11676]
push	ecx
call	_cf2_hintmask_isNew
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN11@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11665]
test	ecx, ecx
jne	SHORT $LN11@cf2_glyphp
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN12@cf2_glyphp
mov	DWORD PTR tv72[ebp], 0
mov	dl, BYTE PTR tv72[ebp]
mov	BYTE PTR _newHintMap$[ebp], dl
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11720]
cmp	ecx, DWORD PTR _x$[ebp]
jne	SHORT $LN8@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11724]
cmp	eax, DWORD PTR _y$[ebp]
jne	SHORT $LN8@cf2_glyphp
movzx	ecx, BYTE PTR _newHintMap$[ebp]
test	ecx, ecx
jne	SHORT $LN8@cf2_glyphp
jmp	$LN9@cf2_glyphp
lea	edx, DWORD PTR _yOffset$[ebp]
push	edx
lea	eax, DWORD PTR _xOffset$[ebp]
push	eax
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11724]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11720]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_computeOffset
add	esp, 28					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11720]
add	eax, DWORD PTR _xOffset$[ebp]
mov	DWORD PTR _P0$[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11724]
add	edx, DWORD PTR _yOffset$[ebp]
mov	DWORD PTR _P0$[ebp+4], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _xOffset$[ebp]
mov	DWORD PTR _P1$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
add	ecx, DWORD PTR _yOffset$[ebp]
mov	DWORD PTR _P1$[ebp+4], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
movzx	eax, BYTE PTR [edx+11667]
test	eax, eax
je	SHORT $LN7@cf2_glyphp
mov	ecx, DWORD PTR _P0$[ebp+4]
push	ecx
mov	edx, DWORD PTR _P0$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_pushMove
add	esp, 12					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11667], 0
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11664], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P1$[ebp]
mov	DWORD PTR [eax+11712], ecx
mov	edx, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [eax+11716], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11744]
test	ecx, ecx
je	SHORT $LN6@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN4@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+28], 0
je	SHORT $LN4@cf2_glyphp
push	OFFSET $SG14364
push	1696					
push	OFFSET $SG14365
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN5@cf2_glyphp
push	0
mov	eax, DWORD PTR _P1$[ebp+4]
push	eax
mov	ecx, DWORD PTR _P1$[ebp]
push	ecx
lea	edx, DWORD PTR _P0$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 8
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_pushPrevElem
add	esp, 24					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11744], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [eax+11748], 2
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _P0$[ebp]
mov	DWORD PTR [ecx+11752], edx
mov	eax, DWORD PTR _P0$[ebp+4]
mov	DWORD PTR [ecx+11756], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _P1$[ebp]
mov	DWORD PTR [ecx+11760], edx
mov	eax, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [ecx+11764], eax
movzx	ecx, BYTE PTR _newHintMap$[ebp]
test	ecx, ecx
je	SHORT $LN1@cf2_glyphp
push	0
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11680]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11676]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11672]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11668]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
call	_cf2_hintmap_build
add	esp, 24					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx+11720], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx+11724], edx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	4
DD	$LN17@cf2_glyphp
DD	-8					
DD	4
DD	$LN13@cf2_glyphp
DD	-20					
DD	4
DD	$LN14@cf2_glyphp
DD	-36					
DD	8
DD	$LN15@cf2_glyphp
DD	-52					
DD	8
DD	$LN16@cf2_glyphp
DB	80					
DB	49					
DB	0
DB	80					
DB	48					
DB	0
DB	121					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
DB	120					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
ENDP
_cf2_glyphpath_moveTo PROC
push	ebp
mov	ebp, esp
push	esi
push	edi
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_closeOpenPath
add	esp, 4
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx+11736], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax+11720], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx+11740], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx+11724], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11667], 1
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN1@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11676]
push	ecx
call	_cf2_hintmask_isNew
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN2@cf2_glyphp
push	0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11680]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11676]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11672]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11668]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_build
add	esp, 24					
mov	esi, DWORD PTR _glyphpath$[ebp]
add	esi, 8
mov	edi, DWORD PTR _glyphpath$[ebp]
add	edi, 3876				
mov	ecx, 967				
rep movsd
pop	edi
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_finalize PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 11612				
push	eax
call	_cf2_arrstack_finalize
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_init PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
push	11784					
push	0
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR [eax+4], ecx
push	8
mov	edx, DWORD PTR _font$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 11612				
push	edx
call	_cf2_arrstack_init
add	esp, 16					
mov	eax, DWORD PTR _scaleY$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11612				
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 7744				
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 7744				
push	ecx
call	_cf2_hintmap_init
add	esp, 20					
mov	edx, DWORD PTR _scaleY$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 11612				
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 7744				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 3876				
push	eax
call	_cf2_hintmap_init
add	esp, 20					
mov	ecx, DWORD PTR _scaleY$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 11612				
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 7744				
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_init
add	esp, 20					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	DWORD PTR [eax+11644], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+44]
mov	DWORD PTR [eax+11648], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+48]
mov	DWORD PTR [eax+11652], edx
mov	eax, DWORD PTR _fractionalTranslation$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [eax+11656], ecx
mov	DWORD PTR [eax+11660], edx
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _hStemHintArray$[ebp]
mov	DWORD PTR [ecx+11668], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _vStemHintArray$[ebp]
mov	DWORD PTR [eax+11672], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _hintMask$[ebp]
mov	DWORD PTR [edx+11676], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _hintOriginY$[ebp]
mov	DWORD PTR [ecx+11680], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+11684], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	cl, BYTE PTR [eax+141]
mov	BYTE PTR [edx+11666], cl
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+184]
mov	DWORD PTR [edx+11688], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	DWORD PTR [edx+11692], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [edx+11688], 0
jge	SHORT $LN3@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11688]
neg	ecx
mov	DWORD PTR tv157[ebp], ecx
jmp	SHORT $LN4@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
mov	DWORD PTR tv157[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11692], 0
jge	SHORT $LN5@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
neg	eax
mov	DWORD PTR tv163[ebp], eax
jmp	SHORT $LN6@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11692]
mov	DWORD PTR tv163[ebp], edx
mov	eax, DWORD PTR tv157[ebp]
cmp	eax, DWORD PTR tv163[ebp]
jle	SHORT $LN11@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11688], 0
jge	SHORT $LN7@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
neg	eax
mov	DWORD PTR tv170[ebp], eax
jmp	SHORT $LN8@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
mov	DWORD PTR tv170[ebp], edx
mov	eax, DWORD PTR tv170[ebp]
mov	DWORD PTR tv177[ebp], eax
jmp	SHORT $LN12@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11692], 0
jge	SHORT $LN9@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
neg	eax
mov	DWORD PTR tv176[ebp], eax
jmp	SHORT $LN10@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11692]
mov	DWORD PTR tv176[ebp], edx
mov	eax, DWORD PTR tv176[ebp]
mov	DWORD PTR tv177[ebp], eax
mov	ecx, DWORD PTR tv177[ebp]
shl	ecx, 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [edx+11696], ecx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [eax+11700], 6554		
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11667], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11664], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11665], 0
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11744], 0
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmap_build PROC
push	ebp
mov	ebp, esp
sub	esp, 260				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-260]
mov	ecx, 65					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _font$[ebp], ecx
movzx	edx, BYTE PTR _initialMap$[ebp]
test	edx, edx
jne	SHORT $LN30@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN30@cf2_hintma
mov	eax, DWORD PTR _hintMask$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	edx, DWORD PTR _tempHintMask$[ebp]
push	edx
call	_cf2_hintmask_init
add	esp, 8
push	1
mov	eax, DWORD PTR _hintOrigin$[ebp]
push	eax
lea	ecx, DWORD PTR _tempHintMask$[ebp]
push	ecx
mov	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
mov	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_cf2_hintmap_build
add	esp, 24					
mov	eax, DWORD PTR _hintMask$[ebp]
push	eax
call	_cf2_hintmask_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN29@cf2_hintma
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_size
add	esp, 4
mov	esi, eax
mov	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
call	_cf2_arrstack_size
add	esp, 4
add	esi, eax
push	esi
mov	ecx, DWORD PTR _hintMask$[ebp]
push	ecx
call	_cf2_hintmask_setAll
add	esp, 8
mov	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN29@cf2_hintma
jmp	$LN31@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+24], 0
mov	ecx, 7
mov	esi, DWORD PTR _hintMask$[ebp]
lea	edi, DWORD PTR _tempHintMask$[ebp]
rep movsd
lea	eax, DWORD PTR _tempHintMask$[ebp]
push	eax
call	_cf2_hintmask_getMaskPtr
add	esp, 4
mov	DWORD PTR _maskPtr$[ebp], eax
mov	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
call	_cf2_arrstack_size
add	esp, 4
mov	DWORD PTR _bitCount$[ebp], eax
mov	edx, DWORD PTR _hintMask$[ebp]
mov	eax, DWORD PTR _bitCount$[ebp]
cmp	eax, DWORD PTR [edx+8]
jbe	SHORT $LN27@cf2_hintma
jmp	$LN31@cf2_hintma
mov	ecx, DWORD PTR _font$[ebp]
movzx	edx, BYTE PTR [ecx+205]
test	edx, edx
je	SHORT $LN26@cf2_hintma
lea	eax, DWORD PTR _dummy$8[ebp]
push	eax
call	_cf2_hint_initZero
add	esp, 4
lea	ecx, DWORD PTR _dummy$8[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 244				
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_cf2_hintmap_insertHint
add	esp, 12					
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 224				
push	ecx
lea	edx, DWORD PTR _dummy$8[ebp]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_cf2_hintmap_insertHint
add	esp, 12					
mov	DWORD PTR _i$[ebp], 0
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN25@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _bitCount$[ebp]
jae	$LN23@cf2_hintma
movzx	eax, BYTE PTR _maskByte$[ebp]
mov	ecx, DWORD PTR _maskPtr$[ebp]
movzx	edx, BYTE PTR [ecx]
and	eax, edx
je	$LN22@cf2_hintma
push	1
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _hintOrigin$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
lea	eax, DWORD PTR _bottomHintEdge$7[ebp]
push	eax
call	_cf2_hint_init
add	esp, 28					
push	0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _hintOrigin$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _topHintEdge$6[ebp]
push	ecx
call	_cf2_hint_init
add	esp, 28					
lea	edx, DWORD PTR _bottomHintEdge$7[ebp]
push	edx
call	_cf2_hint_isLocked
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN20@cf2_hintma
lea	ecx, DWORD PTR _topHintEdge$6[ebp]
push	ecx
call	_cf2_hint_isLocked
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN20@cf2_hintma
lea	eax, DWORD PTR _topHintEdge$6[ebp]
push	eax
lea	ecx, DWORD PTR _bottomHintEdge$7[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 196				
push	edx
call	_cf2_blues_capture
add	esp, 12					
movzx	eax, al
test	eax, eax
je	SHORT $LN22@cf2_hintma
lea	ecx, DWORD PTR _topHintEdge$6[ebp]
push	ecx
lea	edx, DWORD PTR _bottomHintEdge$7[ebp]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_cf2_hintmap_insertHint
add	esp, 12					
movzx	ecx, BYTE PTR _maskByte$[ebp]
not	ecx
mov	edx, DWORD PTR _maskPtr$[ebp]
movzx	eax, BYTE PTR [edx]
and	eax, ecx
mov	ecx, DWORD PTR _maskPtr$[ebp]
mov	BYTE PTR [ecx], al
mov	edx, DWORD PTR _i$[ebp]
and	edx, 7
cmp	edx, 7
jne	SHORT $LN19@cf2_hintma
mov	eax, DWORD PTR _maskPtr$[ebp]
add	eax, 1
mov	DWORD PTR _maskPtr$[ebp], eax
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN18@cf2_hintma
mov	cl, BYTE PTR _maskByte$[ebp]
shr	cl, 1
mov	BYTE PTR _maskByte$[ebp], cl
jmp	$LN24@cf2_hintma
movzx	edx, BYTE PTR _initialMap$[ebp]
test	edx, edx
je	$LN17@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN15@cf2_hintma
mov	ecx, 20					
imul	edx, ecx, 0
mov	eax, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [eax+edx+36], 0
jg	SHORT $LN15@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, 1
imul	eax, edx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [ecx+eax+36], 0
jge	SHORT $LN16@cf2_hintma
lea	edx, DWORD PTR _edge$5[ebp]
push	edx
call	_cf2_hint_initZero
add	esp, 4
mov	DWORD PTR _edge$5[ebp], 49		
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _edge$5[ebp+16], ecx
lea	edx, DWORD PTR _invalid$4[ebp]
push	edx
call	_cf2_hint_initZero
add	esp, 4
lea	eax, DWORD PTR _invalid$4[ebp]
push	eax
lea	ecx, DWORD PTR _edge$5[ebp]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
push	edx
call	_cf2_hintmap_insertHint
add	esp, 12					
jmp	$LN14@cf2_hintma
lea	eax, DWORD PTR _tempHintMask$[ebp]
push	eax
call	_cf2_hintmask_getMaskPtr
add	esp, 4
mov	DWORD PTR _maskPtr$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN13@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _bitCount$[ebp]
jae	$LN14@cf2_hintma
movzx	eax, BYTE PTR _maskByte$[ebp]
mov	ecx, DWORD PTR _maskPtr$[ebp]
movzx	edx, BYTE PTR [ecx]
and	eax, edx
je	SHORT $LN10@cf2_hintma
push	1
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _hintOrigin$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
lea	eax, DWORD PTR _bottomHintEdge$3[ebp]
push	eax
call	_cf2_hint_init
add	esp, 28					
push	0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _hintOrigin$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _topHintEdge$2[ebp]
push	ecx
call	_cf2_hint_init
add	esp, 28					
lea	edx, DWORD PTR _topHintEdge$2[ebp]
push	edx
lea	eax, DWORD PTR _bottomHintEdge$3[ebp]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
call	_cf2_hintmap_insertHint
add	esp, 12					
mov	edx, DWORD PTR _i$[ebp]
and	edx, 7
cmp	edx, 7
jne	SHORT $LN9@cf2_hintma
mov	eax, DWORD PTR _maskPtr$[ebp]
add	eax, 1
mov	DWORD PTR _maskPtr$[ebp], eax
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN8@cf2_hintma
mov	cl, BYTE PTR _maskByte$[ebp]
shr	cl, 1
mov	BYTE PTR _maskByte$[ebp], cl
jmp	$LN12@cf2_hintma
mov	edx, DWORD PTR _hintmap$[ebp]
push	edx
call	_cf2_hintmap_adjustHints
add	esp, 4
movzx	eax, BYTE PTR _initialMap$[ebp]
test	eax, eax
jne	$LN7@cf2_hintma
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN6@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+20]
jae	$LN7@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isSynthetic
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@cf2_hintma
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+edx+32]
push	ecx
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _stemhint$1[ebp], eax
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
push	edx
call	_cf2_hint_isTop
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN2@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _stemhint$1[ebp]
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
mov	DWORD PTR [edx+16], ecx
jmp	SHORT $LN1@cf2_hintma
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _stemhint$1[ebp]
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+edx+40]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _stemhint$1[ebp]
mov	BYTE PTR [eax], 1
jmp	$LN5@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	BYTE PTR [ecx+12], 1
push	0
mov	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_setNew
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN42@cf2_hintma
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 260				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	8
DD	$LN41@cf2_hintma
DD	-44					
DD	28					
DD	$LN33@cf2_hintma
DD	-84					
DD	20					
DD	$LN34@cf2_hintma
DD	-112					
DD	20					
DD	$LN35@cf2_hintma
DD	-140					
DD	20					
DD	$LN36@cf2_hintma
DD	-168					
DD	20					
DD	$LN37@cf2_hintma
DD	-196					
DD	20					
DD	$LN38@cf2_hintma
DD	-224					
DD	20					
DD	$LN39@cf2_hintma
DD	-252					
DD	20					
DD	$LN40@cf2_hintma
DB	116					
DB	111					
DB	112					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	98					
DB	111					
DB	116					
DB	116					
DB	111					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	105					
DB	110					
DB	118					
DB	97					
DB	108					
DB	105					
DB	100					
DB	0
DB	101					
DB	100					
DB	103					
DB	101					
DB	0
DB	116					
DB	111					
DB	112					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	98					
DB	111					
DB	116					
DB	116					
DB	111					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	100					
DB	117					
DB	109					
DB	109					
DB	121					
DB	0
DB	116					
DB	101					
DB	109					
DB	112					
DB	72					
DB	105					
DB	110					
DB	116					
DB	77					
DB	97					
DB	115					
DB	107					
DB	0
ENDP
_cf2_hintmap_init PROC
push	ebp
mov	ebp, esp
push	3868					
push	0
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	al, BYTE PTR [edx+140]
mov	BYTE PTR [ecx+13], al
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _scale$[ebp]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _initialMap$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _hintMoves$[ebp]
mov	DWORD PTR [ecx+8], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_hint_lock PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
or	ecx, 16					
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], ecx
pop	ebp
ret	0
ENDP
_cf2_hint_isBottom PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 5
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isTop PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 10					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isValid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv66[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv66[ebp], 0
mov	al, BYTE PTR tv66[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_blues_capture PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _csFuzz$[ebp], ecx
mov	DWORD PTR _dsMove$[ebp], 0
mov	BYTE PTR _captured$[ebp], 0
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
push	edx
call	_cf2_hint_isTop
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN19@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isBottom
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN22@cf2_blues_
push	OFFSET $SG13013
push	484					
push	OFFSET $SG13014
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN23@cf2_blues_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN18@cf2_blues_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+4]
jae	$LN16@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+ecx+84]
test	eax, eax
je	$LN15@cf2_blues_
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
push	ecx
call	_cf2_hint_isBottom
add	esp, 4
movzx	edx, al
test	edx, edx
je	$LN15@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+68]
sub	edx, DWORD PTR _csFuzz$[ebp]
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
cmp	edx, DWORD PTR [eax+8]
jg	$LN15@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+72]
add	eax, DWORD PTR _csFuzz$[ebp]
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
cmp	DWORD PTR [ecx+8], eax
jg	$LN15@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+8]
test	eax, eax
je	SHORT $LN13@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+80]
mov	DWORD PTR _dsNew$[ebp], eax
jmp	$LN12@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [edx+ecx+72]
sub	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _blues$[ebp]
cmp	ecx, DWORD PTR [edx+16]
jl	SHORT $LN11@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32768				
and	ecx, -65536				
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [eax+edx+80]
sub	edx, 65536				
cmp	ecx, edx
jge	SHORT $LN26@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32768				
and	ecx, -65536				
mov	DWORD PTR tv168[ebp], ecx
jmp	SHORT $LN27@cf2_blues_
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+edx+80]
sub	ecx, 65536				
mov	DWORD PTR tv168[ebp], ecx
mov	edx, DWORD PTR tv168[ebp]
mov	DWORD PTR _dsNew$[ebp], edx
jmp	SHORT $LN12@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32768				
and	ecx, -65536				
mov	DWORD PTR _dsNew$[ebp], ecx
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
mov	eax, DWORD PTR _dsNew$[ebp]
sub	eax, DWORD PTR [edx+12]
mov	DWORD PTR _dsMove$[ebp], eax
mov	BYTE PTR _captured$[ebp], 1
jmp	$LN16@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+ecx+84]
test	eax, eax
jne	$LN9@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isTop
add	esp, 4
movzx	edx, al
test	edx, edx
je	$LN9@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+68]
sub	edx, DWORD PTR _csFuzz$[ebp]
mov	eax, DWORD PTR _topHintEdge$[ebp]
cmp	edx, DWORD PTR [eax+8]
jg	$LN9@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+72]
add	eax, DWORD PTR _csFuzz$[ebp]
mov	ecx, DWORD PTR _topHintEdge$[ebp]
cmp	DWORD PTR [ecx+8], eax
jg	$LN9@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+8]
test	eax, eax
je	SHORT $LN7@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+80]
mov	DWORD PTR _dsNew$[ebp], eax
jmp	$LN6@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _topHintEdge$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [edx+8]
sub	edx, DWORD PTR [eax+ecx+68]
mov	eax, DWORD PTR _blues$[ebp]
cmp	edx, DWORD PTR [eax+16]
jl	SHORT $LN5@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32768				
and	edx, -65536				
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [ecx+eax+80]
add	eax, 65536				
cmp	edx, eax
jle	SHORT $LN28@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32768				
and	edx, -65536				
mov	DWORD PTR tv230[ebp], edx
jmp	SHORT $LN29@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+80]
add	edx, 65536				
mov	DWORD PTR tv230[ebp], edx
mov	eax, DWORD PTR tv230[ebp]
mov	DWORD PTR _dsNew$[ebp], eax
jmp	SHORT $LN6@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32768				
and	edx, -65536				
mov	DWORD PTR _dsNew$[ebp], edx
mov	eax, DWORD PTR _topHintEdge$[ebp]
mov	ecx, DWORD PTR _dsNew$[ebp]
sub	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _dsMove$[ebp], ecx
mov	BYTE PTR _captured$[ebp], 1
jmp	SHORT $LN16@cf2_blues_
jmp	$LN17@cf2_blues_
movzx	edx, BYTE PTR _captured$[ebp]
test	edx, edx
je	SHORT $LN3@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
push	eax
call	_cf2_hint_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN2@cf2_blues_
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, DWORD PTR _dsMove$[ebp]
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
push	edx
call	_cf2_hint_lock
add	esp, 4
mov	eax, DWORD PTR _topHintEdge$[ebp]
push	eax
call	_cf2_hint_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN3@cf2_blues_
mov	edx, DWORD PTR _topHintEdge$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, DWORD PTR _dsMove$[ebp]
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _topHintEdge$[ebp]
push	edx
call	_cf2_hint_lock
add	esp, 4
mov	al, BYTE PTR _captured$[ebp]
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_blues_init PROC
push	ebp
mov	ebp, esp
sub	esp, 156				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-156]
mov	ecx, 39					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR _decoder$[ebp], ecx
mov	DWORD PTR _maxZoneHeight$[ebp], 0
push	308					
push	0
mov	edx, DWORD PTR _blues$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+48]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _blues$[ebp]
add	eax, 20					
push	eax
mov	ecx, DWORD PTR _blues$[ebp]
add	ecx, 16					
push	ecx
mov	edx, DWORD PTR _blues$[ebp]
add	edx, 12					
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getBlueMetrics
add	esp, 16					
lea	ecx, DWORD PTR _blueValues$[ebp]
push	ecx
lea	edx, DWORD PTR _numBlueValues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getBlueValues
add	esp, 12					
lea	ecx, DWORD PTR _otherBlues$[ebp]
push	ecx
lea	edx, DWORD PTR _numOtherBlues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getOtherBlues
add	esp, 12					
lea	ecx, DWORD PTR _familyBlues$[ebp]
push	ecx
lea	edx, DWORD PTR _numFamilyBlues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getFamilyBlues
add	esp, 12					
lea	ecx, DWORD PTR _familyOtherBlues$[ebp]
push	ecx
lea	edx, DWORD PTR _numFamilyOtherBlues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getFamilyOtherBlues
add	esp, 12					
mov	DWORD PTR _emBoxBottom$[ebp], -7864320	
mov	DWORD PTR _emBoxTop$[ebp], 57671680	
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getLanguageGroup
add	esp, 4
cmp	eax, 1
jne	$LN50@cf2_blues_
cmp	DWORD PTR _numBlueValues$[ebp], 0
je	SHORT $LN49@cf2_blues_
cmp	DWORD PTR _numBlueValues$[ebp], 4
jne	$LN50@cf2_blues_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
cmp	edx, DWORD PTR _emBoxBottom$[ebp]
jge	$LN50@cf2_blues_
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
cmp	edx, DWORD PTR _emBoxBottom$[ebp]
jge	$LN50@cf2_blues_
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
cmp	edx, DWORD PTR _emBoxTop$[ebp]
jle	$LN50@cf2_blues_
mov	eax, 4
imul	ecx, eax, 3
mov	edx, DWORD PTR _blueValues$[ebp]
mov	eax, DWORD PTR [edx+ecx]
shl	eax, 16					
cmp	eax, DWORD PTR _emBoxTop$[ebp]
jle	$LN50@cf2_blues_
mov	ecx, DWORD PTR _emBoxBottom$[ebp]
sub	ecx, 1
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+56], ecx
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+56]
push	eax
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32768				
and	eax, -65536				
sub	eax, 32768				
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+60], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+64], ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+48], 49			
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	edx, DWORD PTR _emBoxTop$[ebp]
lea	eax, DWORD PTR [edx+ecx*2+1]
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+36], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+36]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32768				
and	eax, -65536				
add	eax, 32768				
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+40], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+44], ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+28], 50			
mov	eax, DWORD PTR _blues$[ebp]
mov	BYTE PTR [eax+9], 1
jmp	$LN51@cf2_blues_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN48@cf2_blues_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 2
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _numBlueValues$[ebp]
jae	$LN46@cf2_blues_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
shl	edx, 16					
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+ecx+68], edx
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _blueValues$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+4]
shl	eax, 16					
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+edx+72], eax
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [ecx+eax+72]
sub	eax, DWORD PTR [esi+edx+68]
mov	DWORD PTR _zoneHeight$[ebp], eax
jns	SHORT $LN45@cf2_blues_
mov	ecx, 4
imul	edx, ecx, 51
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN43@cf2_blues_
push	OFFSET $SG12923
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN44@cf2_blues_
jmp	$LN47@cf2_blues_
mov	ecx, DWORD PTR _zoneHeight$[ebp]
cmp	ecx, DWORD PTR _maxZoneHeight$[ebp]
jle	SHORT $LN40@cf2_blues_
mov	edx, DWORD PTR _zoneHeight$[ebp]
mov	DWORD PTR _maxZoneHeight$[ebp], edx
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN39@cf2_blues_
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+188]
mov	edx, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [edx+ecx+72]
lea	edx, DWORD PTR [ecx+eax*2]
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+ecx+72], edx
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	eax, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [eax+edx+68]
lea	eax, DWORD PTR [edx+ecx*2]
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+edx+68], eax
cmp	DWORD PTR _i$[ebp], 0
jne	SHORT $LN38@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	BYTE PTR [ecx+eax+84], 1
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [esi+eax+72]
mov	DWORD PTR [ecx+edx+76], eax
jmp	SHORT $LN37@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	BYTE PTR [eax+edx+84], 0
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [esi+edx+68]
mov	DWORD PTR [eax+ecx+76], edx
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+4]
add	ecx, 1
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+4], ecx
jmp	$LN47@cf2_blues_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN36@cf2_blues_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 2
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _numOtherBlues$[ebp]
jae	$LN34@cf2_blues_
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _otherBlues$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
shl	ecx, 16					
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+eax+68], ecx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _otherBlues$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+4]
shl	edx, 16					
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+ecx+72], edx
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [eax+edx+72]
sub	edx, DWORD PTR [esi+ecx+68]
mov	DWORD PTR _zoneHeight$[ebp], edx
jns	SHORT $LN33@cf2_blues_
mov	eax, 4
imul	ecx, eax, 51
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN31@cf2_blues_
push	OFFSET $SG12940
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN32@cf2_blues_
jmp	$LN35@cf2_blues_
mov	eax, DWORD PTR _zoneHeight$[ebp]
cmp	eax, DWORD PTR _maxZoneHeight$[ebp]
jle	SHORT $LN28@cf2_blues_
mov	ecx, DWORD PTR _zoneHeight$[ebp]
mov	DWORD PTR _maxZoneHeight$[ebp], ecx
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	BYTE PTR [ecx+eax+84], 1
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [esi+eax+72]
mov	DWORD PTR [ecx+edx+76], eax
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+4]
add	edx, 1
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+4], edx
jmp	$LN35@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	65536					
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _csUnitsPerPixel$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN27@cf2_blues_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR [ecx+4]
jae	$LN25@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+76]
mov	DWORD PTR _flatEdge$1[ebp], edx
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
movzx	edx, BYTE PTR [ecx+eax+84]
test	edx, edx
je	$LN24@cf2_blues_
mov	DWORD PTR _minDiff$4[ebp], 2147483647	
mov	DWORD PTR _j$5[ebp], 0
jmp	SHORT $LN23@cf2_blues_
mov	eax, DWORD PTR _j$5[ebp]
add	eax, 2
mov	DWORD PTR _j$5[ebp], eax
mov	ecx, DWORD PTR _j$5[ebp]
cmp	ecx, DWORD PTR _numFamilyOtherBlues$[ebp]
jae	$LN21@cf2_blues_
mov	edx, DWORD PTR _j$5[ebp]
mov	eax, DWORD PTR _familyOtherBlues$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+4]
shl	ecx, 16					
mov	DWORD PTR _flatFamilyEdge$3[ebp], ecx
mov	edx, DWORD PTR _flatEdge$1[ebp]
sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
jns	SHORT $LN53@cf2_blues_
mov	eax, DWORD PTR _flatEdge$1[ebp]
sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
neg	eax
mov	DWORD PTR tv355[ebp], eax
jmp	SHORT $LN54@cf2_blues_
mov	ecx, DWORD PTR _flatEdge$1[ebp]
sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR tv355[ebp], ecx
mov	edx, DWORD PTR tv355[ebp]
mov	DWORD PTR _diff$2[ebp], edx
mov	eax, DWORD PTR _diff$2[ebp]
cmp	eax, DWORD PTR _minDiff$4[ebp]
jge	SHORT $LN20@cf2_blues_
mov	ecx, DWORD PTR _diff$2[ebp]
cmp	ecx, DWORD PTR _csUnitsPerPixel$[ebp]
jge	SHORT $LN20@cf2_blues_
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR [eax+edx+76], ecx
mov	edx, DWORD PTR _diff$2[ebp]
mov	DWORD PTR _minDiff$4[ebp], edx
cmp	DWORD PTR _diff$2[ebp], 0
jne	SHORT $LN20@cf2_blues_
jmp	SHORT $LN21@cf2_blues_
jmp	$LN22@cf2_blues_
cmp	DWORD PTR _numFamilyBlues$[ebp], 2
jb	$LN18@cf2_blues_
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _familyBlues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
mov	DWORD PTR _flatFamilyEdge$3[ebp], edx
mov	eax, DWORD PTR _flatEdge$1[ebp]
sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
jns	SHORT $LN55@cf2_blues_
mov	ecx, DWORD PTR _flatEdge$1[ebp]
sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
neg	ecx
mov	DWORD PTR tv372[ebp], ecx
jmp	SHORT $LN56@cf2_blues_
mov	edx, DWORD PTR _flatEdge$1[ebp]
sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR tv372[ebp], edx
mov	eax, DWORD PTR tv372[ebp]
mov	DWORD PTR _diff$2[ebp], eax
mov	ecx, DWORD PTR _diff$2[ebp]
cmp	ecx, DWORD PTR _minDiff$4[ebp]
jge	SHORT $LN18@cf2_blues_
mov	edx, DWORD PTR _diff$2[ebp]
cmp	edx, DWORD PTR _csUnitsPerPixel$[ebp]
jge	SHORT $LN18@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR [ecx+eax+76], edx
jmp	$LN16@cf2_blues_
mov	DWORD PTR _minDiff$4[ebp], 2147483647	
mov	DWORD PTR _j$5[ebp], 2
jmp	SHORT $LN15@cf2_blues_
mov	eax, DWORD PTR _j$5[ebp]
add	eax, 2
mov	DWORD PTR _j$5[ebp], eax
mov	ecx, DWORD PTR _j$5[ebp]
cmp	ecx, DWORD PTR _numFamilyBlues$[ebp]
jae	$LN16@cf2_blues_
mov	edx, DWORD PTR _j$5[ebp]
mov	eax, DWORD PTR _familyBlues$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
shl	ecx, 16					
mov	DWORD PTR _flatFamilyEdge$3[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+188]
mov	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
lea	edx, DWORD PTR [ecx+eax*2]
mov	DWORD PTR _flatFamilyEdge$3[ebp], edx
mov	eax, DWORD PTR _flatEdge$1[ebp]
sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
jns	SHORT $LN57@cf2_blues_
mov	ecx, DWORD PTR _flatEdge$1[ebp]
sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
neg	ecx
mov	DWORD PTR tv392[ebp], ecx
jmp	SHORT $LN58@cf2_blues_
mov	edx, DWORD PTR _flatEdge$1[ebp]
sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR tv392[ebp], edx
mov	eax, DWORD PTR tv392[ebp]
mov	DWORD PTR _diff$2[ebp], eax
mov	ecx, DWORD PTR _diff$2[ebp]
cmp	ecx, DWORD PTR _minDiff$4[ebp]
jge	SHORT $LN12@cf2_blues_
mov	edx, DWORD PTR _diff$2[ebp]
cmp	edx, DWORD PTR _csUnitsPerPixel$[ebp]
jge	SHORT $LN12@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR [ecx+eax+76], edx
mov	eax, DWORD PTR _diff$2[ebp]
mov	DWORD PTR _minDiff$4[ebp], eax
cmp	DWORD PTR _diff$2[ebp], 0
jne	SHORT $LN12@cf2_blues_
jmp	SHORT $LN16@cf2_blues_
jmp	$LN14@cf2_blues_
jmp	$LN26@cf2_blues_
cmp	DWORD PTR _maxZoneHeight$[ebp], 0
jle	SHORT $LN10@cf2_blues_
mov	ecx, DWORD PTR _maxZoneHeight$[ebp]
push	ecx
push	65536					
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _blues$[ebp]
cmp	DWORD PTR [edx+12], eax
jle	SHORT $LN10@cf2_blues_
mov	eax, DWORD PTR _maxZoneHeight$[ebp]
push	eax
push	65536					
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax+12]
jge	SHORT $LN8@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
mov	BYTE PTR [edx+8], 1
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	39322					
call	_FT_MulDiv
add	esp, 12					
mov	ecx, 39322				
sub	ecx, eax
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _blues$[ebp]
cmp	DWORD PTR [eax+24], 32767		
jle	SHORT $LN8@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+24], 32767		
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+142]
test	eax, eax
je	SHORT $LN6@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN5@cf2_blues_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+4]
jae	$LN51@cf2_blues_
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
movzx	ecx, BYTE PTR [eax+edx+84]
test	ecx, ecx
je	SHORT $LN2@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+76]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _blues$[ebp]
sub	eax, DWORD PTR [ecx+24]
add	eax, 32768				
and	eax, -65536				
imul	edx, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+edx+80], eax
jmp	SHORT $LN1@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+76]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+24]
lea	eax, DWORD PTR [eax+edx+32768]
and	eax, -65536				
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+ecx+80], eax
jmp	$LN4@cf2_blues_
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN68@cf2_blues_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 156				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	8
DD	$LN67@cf2_blues_
DD	-24					
DD	4
DD	$LN59@cf2_blues_
DD	-36					
DD	4
DD	$LN60@cf2_blues_
DD	-48					
DD	4
DD	$LN61@cf2_blues_
DD	-60					
DD	4
DD	$LN62@cf2_blues_
DD	-72					
DD	4
DD	$LN63@cf2_blues_
DD	-84					
DD	4
DD	$LN64@cf2_blues_
DD	-96					
DD	4
DD	$LN65@cf2_blues_
DD	-108					
DD	4
DD	$LN66@cf2_blues_
DB	102					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	79					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	102					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	111					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	98					
DB	108					
DB	117					
DB	101					
DB	86					
DB	97					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	70					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	79					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	70					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	79					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	66					
DB	108					
DB	117					
DB	101					
DB	86					
DB	97					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
ENDP
_cf2_arrstack_setNumElements PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN10@cf2_arrsta
push	OFFSET $SG12516
push	98					
push	OFFSET $SG12517
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN11@cf2_arrsta
mov	DWORD PTR _error$3[ebp], 0
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$2[ebp], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR _numElements$[ebp]
imul	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _newSize$1[ebp], ecx
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	eax, 2147483647				
xor	edx, edx
div	DWORD PTR [ecx+8]
cmp	DWORD PTR _numElements$[ebp], eax
jbe	SHORT $LN6@cf2_arrsta
jmp	$exit$17
cmp	DWORD PTR _newSize$1[ebp], 0
jg	SHORT $LN5@cf2_arrsta
push	OFFSET $SG12528
push	111					
push	OFFSET $SG12529
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN6@cf2_arrsta
lea	eax, DWORD PTR _error$3[ebp]
push	eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _newSize$1[ebp]
push	eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
push	1
mov	eax, DWORD PTR _memory$2[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+28], eax
cmp	DWORD PTR _error$3[ebp], 0
jne	SHORT $exit$17
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR _numElements$[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _newSize$1[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR _numElements$[ebp]
jbe	SHORT $LN1@cf2_arrsta
push	OFFSET $SG12534
push	121					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _numElements$[ebp]
mov	DWORD PTR [ecx+20], edx
xor	al, al
jmp	SHORT $LN12@cf2_arrsta
mov	al, 1
jmp	SHORT $LN12@cf2_arrsta
push	OFFSET $SG12535
push	132					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
push	eax
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_setError
add	esp, 8
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@cf2_arrsta
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN15@cf2_arrsta
DD	-8					
DD	4
DD	$LN14@cf2_arrsta
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_cmap_unicode_char_next PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	DWORD PTR _psnames$[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _pchar_code$[ebp]
push	eax
mov	ecx, DWORD PTR _unicodes$[ebp]
push	ecx
mov	edx, DWORD PTR _psnames$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_unicode_char_index PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	DWORD PTR _psnames$[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _char_code$[ebp]
push	eax
mov	ecx, DWORD PTR _unicodes$[ebp]
push	ecx
mov	edx, DWORD PTR _psnames$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_unicode_done PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _unicodes$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _unicodes$[ebp]
mov	DWORD PTR [ecx+20], 0
xor	edx, edx
jne	SHORT $LN3@cff_cmap_u
mov	eax, DWORD PTR _unicodes$[ebp]
mov	DWORD PTR [eax+16], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_unicode_init PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+656]
mov	DWORD PTR _cff$[ebp], edx
mov	eax, DWORD PTR _cff$[ebp]
add	eax, 1152				
mov	DWORD PTR _charset$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	DWORD PTR _psnames$[ebp], edx
mov	eax, DWORD PTR _pointer$[ebp]
mov	DWORD PTR _pointer$[ebp], eax
mov	ecx, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [ecx+8], 0
jne	SHORT $LN1@cff_cmap_u
push	OFFSET $SG12419
push	156					
push	163					
call	_FT_Throw
add	esp, 12					
or	eax, 163				
jmp	SHORT $LN2@cff_cmap_u
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
push	edx
push	0
push	OFFSET _cff_sid_to_glyph_name
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _unicodes$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _psnames$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_sid_to_glyph_name PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1152				
mov	DWORD PTR _charset$[ebp], edx
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _idx$[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _sid$[ebp], eax
mov	ecx, DWORD PTR _sid$[ebp]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_char_next PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _pchar_code$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _char_code$[ebp], ecx
mov	edx, DWORD PTR _pchar_code$[ebp]
mov	DWORD PTR [edx], 0
cmp	DWORD PTR _char_code$[ebp], 255		
jae	SHORT $LN5@cff_cmap_e
mov	eax, DWORD PTR _char_code$[ebp]
add	eax, 1
mov	DWORD PTR _code$1[ebp], eax
cmp	DWORD PTR _code$1[ebp], 256		
jb	SHORT $LN2@cff_cmap_e
jmp	SHORT $LN5@cff_cmap_e
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _code$1[ebp]
movzx	ecx, WORD PTR [edx+eax*2]
mov	DWORD PTR _result$[ebp], ecx
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN1@cff_cmap_e
mov	edx, DWORD PTR _pchar_code$[ebp]
mov	eax, DWORD PTR _code$1[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN5@cff_cmap_e
mov	ecx, DWORD PTR _code$1[ebp]
add	ecx, 1
mov	DWORD PTR _code$1[ebp], ecx
jmp	SHORT $LN4@cff_cmap_e
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_char_index PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _char_code$[ebp], 256		
jae	SHORT $LN1@cff_cmap_e
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _char_code$[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [eax+16], 0
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_init PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 116				
mov	DWORD PTR _encoding$[ebp], ecx
mov	edx, DWORD PTR _pointer$[ebp]
mov	DWORD PTR _pointer$[ebp], edx
mov	eax, DWORD PTR _encoding$[ebp]
add	eax, 524				
mov	ecx, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [ecx+16], eax
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_add_contour PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _builder$[ebp]
movzx	eax, BYTE PTR [edx+65]
test	eax, eax
jne	SHORT $LN3@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR [ecx]
add	dx, 1
mov	eax, DWORD PTR _outline$[ebp]
mov	WORD PTR [eax], dx
xor	eax, eax
jmp	$LN4@cff_builde
mov	ecx, 1
test	ecx, ecx
je	SHORT $LN7@cff_builde
xor	edx, edx
jne	SHORT $LN6@cff_builde
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+20]
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	eax, WORD PTR [ecx+56]
lea	ecx, DWORD PTR [edx+eax+1]
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	ecx, DWORD PTR [eax+8]
ja	SHORT $LN7@cff_builde
mov	DWORD PTR tv90[ebp], 0
jmp	SHORT $LN8@cff_builde
push	1
push	0
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv90[ebp], eax
mov	eax, DWORD PTR tv90[ebp]
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
test	edx, edx
jle	SHORT $LN1@cff_builde
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
sub	ecx, 1
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
mov	edx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [edx+12]
mov	WORD PTR [edx+eax*2-2], cx
mov	eax, DWORD PTR _outline$[ebp]
mov	cx, WORD PTR [eax]
add	cx, 1
mov	edx, DWORD PTR _outline$[ebp]
mov	WORD PTR [edx], cx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_compute_bias PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _in_charstring_type$[ebp], 1
jne	SHORT $LN6@cff_comput
mov	DWORD PTR _result$[ebp], 0
jmp	SHORT $LN5@cff_comput
cmp	DWORD PTR _num_subrs$[ebp], 1240	
jae	SHORT $LN4@cff_comput
mov	DWORD PTR _result$[ebp], 107		
jmp	SHORT $LN5@cff_comput
cmp	DWORD PTR _num_subrs$[ebp], 33900	
jae	SHORT $LN2@cff_comput
mov	DWORD PTR _result$[ebp], 1131		
jmp	SHORT $LN5@cff_comput
mov	DWORD PTR _result$[ebp], 32768		
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _glyph$[ebp], ecx
cmp	DWORD PTR _glyph$[ebp], 0
je	SHORT $LN2@cff_builde
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
mov	ecx, DWORD PTR [edx+16]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+16], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_init PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _builder$[ebp]
mov	BYTE PTR [eax+64], 0
mov	ecx, DWORD PTR _builder$[ebp]
mov	BYTE PTR [ecx+65], 1
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR [eax], edx
cmp	DWORD PTR _glyph$[ebp], 0
je	$LN2@cff_builde
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _loader$2[ebp], edx
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _loader$2[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _loader$2[ebp]
add	edx, 20					
mov	eax, DWORD PTR _builder$[ebp]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR _loader$2[ebp]
add	ecx, 56					
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _loader$2[ebp]
push	eax
call	_FT_GlyphLoader_Rewind
add	esp, 4
mov	ecx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [ecx+72], 0
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+68], 0
movzx	eax, BYTE PTR _hinting$[ebp]
test	eax, eax
je	SHORT $LN2@cff_builde
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN2@cff_builde
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _internal$1[ebp], edx
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _internal$1[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+72], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR [ecx+36]
mov	DWORD PTR [edx+68], eax
mov	ecx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+28], 0
mov	eax, DWORD PTR _builder$[ebp]
mov	DWORD PTR [eax+32], 0
mov	ecx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [ecx+36], 0
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+40], 0
mov	eax, DWORD PTR _builder$[ebp]
mov	DWORD PTR [eax+44], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_outline_close PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _decoder$[ebp], ecx
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_outlin
push	OFFSET $SG13758
push	683					
push	OFFSET $SG13759
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_outlin
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cff_builder_close_contour
add	esp, 4
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_outline_reset PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _decoder$[ebp], ecx
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_outlin
push	OFFSET $SG13748
push	669					
push	OFFSET $SG13749
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_outlin
mov	eax, DWORD PTR _outline$[ebp]
mov	DWORD PTR [eax+16], 0
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_GlyphLoader_Rewind
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_getNominalWidthX PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getNom
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getNom
push	OFFSET $SG13736
push	656					
push	OFFSET $SG13737
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getNom
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+532]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getDefaultWidthX PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getDef
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getDef
push	OFFSET $SG13724
push	646					
push	OFFSET $SG13725
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getDef
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+528]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_initLocalRegionBuffer PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN8@cf2_initLo
push	OFFSET $SG13707
push	625					
push	OFFSET $SG13708
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@cf2_initLo
push	16					
push	0
mov	ecx, DWORD PTR _buf$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
add	eax, DWORD PTR [edx+896]
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
cmp	edx, DWORD PTR [ecx+888]
jb	SHORT $LN4@cf2_initLo
mov	eax, 1
jmp	SHORT $LN10@cf2_initLo
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+904], 0
jne	SHORT $LN3@cf2_initLo
push	OFFSET $SG13714
push	633					
push	OFFSET $SG13715
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@cf2_initLo
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+904]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [eax+edx*4]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+904]
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [edx+ecx*4+4]
mov	DWORD PTR [eax+8], edx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_freeSeacComponent PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_freeSe
push	OFFSET $SG13692
push	612					
push	OFFSET $SG13693
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_freeSe
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [ecx+8]
sub	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _buf$[ebp]
add	ecx, 4
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cff_free_glyph_data
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getSeacComponent PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN9@cf2_getSea
push	OFFSET $SG13672
push	581					
push	OFFSET $SG13673
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@cf2_getSea
push	16					
push	0
mov	ecx, DWORD PTR _buf$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _code$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+76]
push	ecx
call	_cff_lookup_glyph_by_stdcharcode
add	esp, 8
mov	DWORD PTR _gid$[ebp], eax
cmp	DWORD PTR _gid$[ebp], 0
jge	SHORT $LN6@cf2_getSea
push	OFFSET $SG13675
push	587					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
jmp	SHORT $LN11@cf2_getSea
lea	edx, DWORD PTR _len$[ebp]
push	edx
lea	eax, DWORD PTR _charstring$[ebp]
push	eax
mov	ecx, DWORD PTR _gid$[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cff_get_glyph_data
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cf2_getSea
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN11@cf2_getSea
mov	ecx, DWORD PTR _charstring$[ebp]
add	ecx, DWORD PTR _len$[ebp]
cmp	ecx, DWORD PTR _charstring$[ebp]
jae	SHORT $LN3@cf2_getSea
push	OFFSET $SG13681
push	598					
push	OFFSET $SG13682
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_getSea
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _charstring$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _charstring$[ebp]
add	edx, DWORD PTR _len$[ebp]
mov	eax, DWORD PTR _buf$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+12], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@cf2_getSea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN15@cf2_getSea
DD	-12					
DD	4
DD	$LN13@cf2_getSea
DD	-24					
DD	4
DD	$LN14@cf2_getSea
DB	108					
DB	101					
DB	110					
DB	0
DB	99					
DB	104					
DB	97					
DB	114					
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
_cf2_initGlobalRegionBuffer PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN8@cf2_initGl
push	OFFSET $SG13648
push	550					
push	OFFSET $SG13649
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@cf2_initGl
push	16					
push	0
mov	ecx, DWORD PTR _buf$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
add	eax, DWORD PTR [edx+900]
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
cmp	edx, DWORD PTR [ecx+892]
jb	SHORT $LN4@cf2_initGl
mov	eax, 1
jmp	SHORT $LN10@cf2_initGl
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+908], 0
jne	SHORT $LN3@cf2_initGl
push	OFFSET $SG13655
push	558					
push	OFFSET $SG13656
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@cf2_initGl
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+908]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [eax+edx*4]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+908]
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [edx+ecx*4+4]
mov	DWORD PTR [eax+8], edx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getLanguageGroup PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getLan
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getLan
push	OFFSET $SG13635
push	537					
push	OFFSET $SG13636
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getLan
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+512]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getFamilyOtherBlues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getFam
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getFam
push	OFFSET $SG13624
push	526					
push	OFFSET $SG13625
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getFam
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+179]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 332				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getFamilyBlues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getFam
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getFam
push	OFFSET $SG13609
push	513					
push	OFFSET $SG13610
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getFam
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+178]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 276				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getOtherBlues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getOth
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getOth
push	OFFSET $SG13594
push	500					
push	OFFSET $SG13595
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getOth
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+177]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 236				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getBlueValues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getBlu
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getBlu
push	OFFSET $SG13579
push	487					
push	OFFSET $SG13580
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getBlu
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+176]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 180				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getBlueMetrics PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getBlu
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getBlu
push	OFFSET $SG13559
push	468					
push	OFFSET $SG13560
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getBlu
push	65536000				
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	ecx, DWORD PTR [eax+372]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _blueScale$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
mov	edx, DWORD PTR [ecx+376]
shl	edx, 16					
mov	eax, DWORD PTR _blueShift$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+928]
mov	eax, DWORD PTR [edx+380]
shl	eax, 16					
mov	ecx, DWORD PTR _blueFuzz$[ebp]
mov	DWORD PTR [ecx], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getStdHW PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getStd
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getStd
push	OFFSET $SG13541
push	454					
push	OFFSET $SG13542
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getStd
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+384]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getStdVW PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getStd
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getStd
push	OFFSET $SG13529
push	444					
push	OFFSET $SG13530
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getStd
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+388]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getPpemY PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getPpe
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN1@cf2_getPpe
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+4]
cmp	DWORD PTR [edx+88], 0
jne	SHORT $LN4@cf2_getPpe
push	OFFSET $SG13517
push	422					
push	OFFSET $SG13518
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@cf2_getPpe
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+88]
movzx	eax, WORD PTR [eax+14]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getSubfont PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getSub
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getSub
push	OFFSET $SG13507
push	410					
push	OFFSET $SG13508
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getSub
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_decoder_parse_charstrings PROC
push	ebp
mov	ebp, esp
sub	esp, 128				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-128]
mov	ecx, 32					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN12@cf2_decode
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+76], 0
jne	SHORT $LN15@cf2_decode
push	OFFSET $SG13466
push	306					
push	OFFSET $SG13467
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN16@cf2_decode
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	eax, DWORD PTR [edx+2972]
mov	DWORD PTR _font$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+76]
cmp	DWORD PTR [edx+2972], 0
jne	$LN11@cf2_decode
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	DWORD PTR [ecx+2976], OFFSET _cf2_free_instance
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	504					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	DWORD PTR [edx+2972], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@cf2_decode
push	OFFSET $SG13475
push	321					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	$LN17@cf2_decode
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	edx, DWORD PTR [ecx+2972]
mov	DWORD PTR _font$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
call	_cf2_outline_init
add	esp, 12					
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [eax+132], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+128], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR _builder$8[ebp], ecx
mov	edx, DWORD PTR _builder$8[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$7[ebp], ecx
mov	DWORD PTR _error2$6[ebp], 0
mov	edx, DWORD PTR _charstring_base$[ebp]
add	edx, DWORD PTR _charstring_len$[ebp]
cmp	edx, DWORD PTR _charstring_base$[ebp]
jae	SHORT $LN8@cf2_decode
push	OFFSET $SG13491
push	354					
push	OFFSET $SG13492
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@cf2_decode
push	16					
push	0
lea	ecx, DWORD PTR _buf$5[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _charstring_base$[ebp]
mov	DWORD PTR _buf$5[ebp+12], edx
mov	eax, DWORD PTR _buf$5[ebp+12]
mov	DWORD PTR _buf$5[ebp+4], eax
mov	ecx, DWORD PTR _charstring_base$[ebp]
add	ecx, DWORD PTR _charstring_len$[ebp]
mov	DWORD PTR _buf$5[ebp+8], ecx
push	24					
push	0
lea	edx, DWORD PTR _transform$4[ebp]
push	edx
call	_memset
add	esp, 12					
lea	eax, DWORD PTR _scaled$1[ebp]
push	eax
lea	ecx, DWORD PTR _hinted$2[ebp]
push	ecx
lea	edx, DWORD PTR _transform$4[ebp+12]
push	edx
lea	eax, DWORD PTR _transform$4[ebp]
push	eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getScaleAndHintFlag
add	esp, 20					
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+8], 0
movzx	eax, BYTE PTR _hinted$2[ebp]
test	eax, eax
je	SHORT $LN5@cf2_decode
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 1
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+8], edx
movzx	ecx, BYTE PTR _scaled$1[ebp]
test	ecx, ecx
je	SHORT $LN4@cf2_decode
mov	edx, DWORD PTR _driver$7[ebp]
movzx	eax, BYTE PTR [edx+32]
test	eax, eax
jne	SHORT $LN4@cf2_decode
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 2
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	edx, DWORD PTR [esi+edx+36]
mov	DWORD PTR [eax+ecx+144], edx
mov	eax, 4
shl	eax, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	eax, DWORD PTR [esi+eax+36]
mov	DWORD PTR [edx+ecx+144], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	ecx, DWORD PTR [esi+ecx+36]
mov	DWORD PTR [eax+edx+144], ecx
mov	edx, 4
imul	eax, edx, 3
mov	ecx, 4
imul	edx, ecx, 3
mov	ecx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	eax, DWORD PTR [esi+eax+36]
mov	DWORD PTR [ecx+edx+144], eax
mov	ecx, 4
shl	ecx, 2
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	ecx, DWORD PTR [esi+ecx+36]
mov	DWORD PTR [eax+edx+144], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	eax, DWORD PTR [esi+eax+36]
mov	DWORD PTR [ecx+edx+144], eax
mov	ecx, 4
imul	edx, ecx, 6
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	edx, DWORD PTR [esi+edx+36]
mov	DWORD PTR [eax+ecx+144], edx
mov	eax, 4
imul	ecx, eax, 7
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	ecx, DWORD PTR [esi+ecx+36]
mov	DWORD PTR [edx+eax+144], ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_getUnitsPerEm
add	esp, 4
movzx	eax, ax
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+88], eax
movzx	edx, BYTE PTR _scaled$1[ebp]
test	edx, edx
je	SHORT $LN3@cf2_decode
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
lea	edx, DWORD PTR _transform$4[ebp]
push	edx
call	_cf2_checkTransform
add	esp, 8
mov	DWORD PTR _error2$6[ebp], eax
cmp	DWORD PTR _error2$6[ebp], 0
je	SHORT $LN3@cf2_decode
mov	eax, DWORD PTR _error2$6[ebp]
jmp	SHORT $LN17@cf2_decode
lea	eax, DWORD PTR _glyphWidth$3[ebp]
push	eax
lea	ecx, DWORD PTR _transform$4[ebp]
push	ecx
lea	edx, DWORD PTR _buf$5[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
call	_cf2_getGlyphOutline
add	esp, 16					
mov	DWORD PTR _error2$6[ebp], eax
cmp	DWORD PTR _error2$6[ebp], 0
je	SHORT $LN1@cf2_decode
mov	eax, 3
jmp	SHORT $LN17@cf2_decode
mov	ecx, DWORD PTR _glyphWidth$3[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
call	_cf2_setGlyphWidth
add	esp, 8
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cf2_decode
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 128				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	6
DD	$LN25@cf2_decode
DD	-16					
DD	4
DD	$LN19@cf2_decode
DD	-56					
DD	16					
DD	$LN20@cf2_decode
DD	-88					
DD	24					
DD	$LN21@cf2_decode
DD	-100					
DD	4
DD	$LN22@cf2_decode
DD	-109					
DD	1
DD	$LN23@cf2_decode
DD	-121					
DD	1
DD	$LN24@cf2_decode
DB	115					
DB	99					
DB	97					
DB	108					
DB	101					
DB	100					
DB	0
DB	104					
DB	105					
DB	110					
DB	116					
DB	101					
DB	100					
DB	0
DB	103					
DB	108					
DB	121					
DB	112					
DB	104					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	116					
DB	114					
DB	97					
DB	110					
DB	115					
DB	102					
DB	111					
DB	114					
DB	109					
DB	0
DB	98					
DB	117					
DB	102					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cf2_buf_isEnd PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+8]
jb	SHORT $LN3@cf2_buf_is
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_buf_is
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_buf_readByte PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+8]
jae	SHORT $LN2@cf2_buf_re
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR tv72[ebp], dl
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 1
mov	edx, DWORD PTR _buf$[ebp]
mov	DWORD PTR [edx+12], ecx
movzx	eax, BYTE PTR tv72[ebp]
jmp	SHORT $LN3@cf2_buf_re
jmp	SHORT $LN3@cf2_buf_re
push	OFFSET $SG15335
push	98					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
push	eax
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_cf2_setError
add	esp, 8
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_push PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN9@cf2_arrsta
push	OFFSET $SG12606
push	215					
push	OFFSET $SG12607
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+20]
cmp	eax, DWORD PTR [edx+12]
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _arrstack$[ebp]
add	edx, DWORD PTR [eax+16]
push	edx
mov	ecx, DWORD PTR _arrstack$[ebp]
push	ecx
call	_cf2_arrstack_setNumElements
add	esp, 8
movzx	edx, al
test	edx, edx
jne	SHORT $LN4@cf2_arrsta
jmp	SHORT $LN11@cf2_arrsta
cmp	DWORD PTR _ptr$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12615
push	228					
push	OFFSET $SG12616
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+20]
imul	eax, DWORD PTR [edx+8]
mov	DWORD PTR _offset$2[ebp], eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+28]
add	edx, DWORD PTR _offset$2[ebp]
mov	DWORD PTR _newPtr$1[ebp], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _ptr$[ebp]
push	edx
mov	eax, DWORD PTR _newPtr$1[ebp]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+20]
add	edx, 1
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+20], edx
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_getPointer PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN4@cf2_arrsta
push	OFFSET $SG12591
push	193					
push	OFFSET $SG12592
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
cmp	edx, DWORD PTR [ecx+20]
jb	SHORT $LN1@cf2_arrsta
push	OFFSET $SG12594
push	198					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_setError
add	esp, 8
mov	DWORD PTR _idx$[ebp], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
imul	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _arrstack$[ebp]
add	eax, DWORD PTR [ecx+28]
mov	DWORD PTR _newPtr$[ebp], eax
mov	eax, DWORD PTR _newPtr$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_getBuffer PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12578
push	179					
push	OFFSET $SG12579
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+28]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_size PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12568
push	170					
push	OFFSET $SG12569
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+20]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_clear PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12558
push	160					
push	OFFSET $SG12559
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+20], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_setCount PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN5@cf2_arrsta
push	OFFSET $SG12546
push	143					
push	OFFSET $SG12547
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN6@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _numElements$[ebp]
cmp	edx, DWORD PTR [ecx+12]
jbe	SHORT $LN2@cf2_arrsta
mov	eax, DWORD PTR _numElements$[ebp]
push	eax
mov	ecx, DWORD PTR _arrstack$[ebp]
push	ecx
call	_cf2_arrstack_setNumElements
add	esp, 8
movzx	edx, al
test	edx, edx
jne	SHORT $LN2@cf2_arrsta
jmp	SHORT $LN7@cf2_arrsta
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR _numElements$[ebp]
mov	DWORD PTR [eax+20], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_finalize PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN6@cf2_arrsta
push	OFFSET $SG12499
push	81					
push	OFFSET $SG12500
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN7@cf2_arrsta
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [edx+24], 0
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+28]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+28], 0
xor	ecx, ecx
jne	SHORT $LN3@cf2_arrsta
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_init PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12487
push	61					
push	OFFSET $SG12488
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR _sizeItem$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [edx+16], 10			
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [edx+28], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_setError PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cf2_setErr
mov	eax, DWORD PTR _error$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN2@cf2_setErr
mov	ecx, DWORD PTR _error$[ebp]
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR [ecx], edx
pop	ebp
ret	0
ENDP
_remove_style PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _family_name$[ebp]
push	eax
call	_strlen
add	esp, 4
mov	DWORD PTR _family_name_length$[ebp], eax
mov	ecx, DWORD PTR _style_name$[ebp]
push	ecx
call	_strlen
add	esp, 4
mov	DWORD PTR _style_name_length$[ebp], eax
mov	edx, DWORD PTR _family_name_length$[ebp]
cmp	edx, DWORD PTR _style_name_length$[ebp]
jle	$LN11@remove_sty
mov	DWORD PTR _idx$1[ebp], 1
jmp	SHORT $LN9@remove_sty
mov	eax, DWORD PTR _idx$1[ebp]
add	eax, 1
mov	DWORD PTR _idx$1[ebp], eax
mov	ecx, DWORD PTR _idx$1[ebp]
cmp	ecx, DWORD PTR _style_name_length$[ebp]
jg	SHORT $LN7@remove_sty
mov	edx, DWORD PTR _family_name_length$[ebp]
sub	edx, DWORD PTR _idx$1[ebp]
mov	eax, DWORD PTR _family_name$[ebp]
movsx	ecx, BYTE PTR [eax+edx]
mov	edx, DWORD PTR _style_name_length$[ebp]
sub	edx, DWORD PTR _idx$1[ebp]
mov	eax, DWORD PTR _style_name$[ebp]
movsx	edx, BYTE PTR [eax+edx]
cmp	ecx, edx
je	SHORT $LN6@remove_sty
jmp	SHORT $LN7@remove_sty
jmp	SHORT $LN8@remove_sty
mov	eax, DWORD PTR _idx$1[ebp]
cmp	eax, DWORD PTR _style_name_length$[ebp]
jle	SHORT $LN11@remove_sty
mov	ecx, DWORD PTR _family_name_length$[ebp]
sub	ecx, DWORD PTR _style_name_length$[ebp]
sub	ecx, 1
mov	DWORD PTR _idx$1[ebp], ecx
cmp	DWORD PTR _idx$1[ebp], 0
jle	SHORT $LN3@remove_sty
mov	edx, DWORD PTR _family_name$[ebp]
add	edx, DWORD PTR _idx$1[ebp]
movsx	eax, BYTE PTR [edx]
cmp	eax, 45					
je	SHORT $LN2@remove_sty
mov	ecx, DWORD PTR _family_name$[ebp]
add	ecx, DWORD PTR _idx$1[ebp]
movsx	edx, BYTE PTR [ecx]
cmp	edx, 32					
je	SHORT $LN2@remove_sty
mov	eax, DWORD PTR _family_name$[ebp]
add	eax, DWORD PTR _idx$1[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 95					
je	SHORT $LN2@remove_sty
mov	edx, DWORD PTR _family_name$[ebp]
add	edx, DWORD PTR _idx$1[ebp]
movsx	eax, BYTE PTR [edx]
cmp	eax, 43					
jne	SHORT $LN3@remove_sty
mov	ecx, DWORD PTR _idx$1[ebp]
sub	ecx, 1
mov	DWORD PTR _idx$1[ebp], ecx
jmp	SHORT $LN4@remove_sty
cmp	DWORD PTR _idx$1[ebp], 0
jle	SHORT $LN11@remove_sty
mov	edx, DWORD PTR _family_name$[ebp]
add	edx, DWORD PTR _idx$1[ebp]
mov	BYTE PTR [edx+1], 0
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_remove_subset_prefix PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _idx$[ebp], 0
mov	eax, DWORD PTR _name$[ebp]
push	eax
call	_strlen
add	esp, 4
add	eax, 1
mov	DWORD PTR _length$[ebp], eax
mov	BYTE PTR _continue_search$[ebp], 1
movzx	ecx, BYTE PTR _continue_search$[ebp]
test	ecx, ecx
je	$LN14@remove_sub
cmp	DWORD PTR _length$[ebp], 7
jl	$LN11@remove_sub
mov	edx, 1
imul	eax, edx, 6
mov	ecx, DWORD PTR _name$[ebp]
movsx	edx, BYTE PTR [ecx+eax]
cmp	edx, 43					
jne	SHORT $LN11@remove_sub
mov	DWORD PTR _idx$[ebp], 0
jmp	SHORT $LN10@remove_sub
mov	eax, DWORD PTR _idx$[ebp]
add	eax, 1
mov	DWORD PTR _idx$[ebp], eax
cmp	DWORD PTR _idx$[ebp], 6
jge	SHORT $LN8@remove_sub
mov	ecx, DWORD PTR _name$[ebp]
add	ecx, DWORD PTR _idx$[ebp]
movsx	edx, BYTE PTR [ecx]
cmp	edx, 65					
jl	SHORT $LN6@remove_sub
mov	eax, DWORD PTR _name$[ebp]
add	eax, DWORD PTR _idx$[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 90					
jle	SHORT $LN7@remove_sub
mov	BYTE PTR _continue_search$[ebp], 0
jmp	SHORT $LN9@remove_sub
movzx	edx, BYTE PTR _continue_search$[ebp]
test	edx, edx
je	SHORT $LN5@remove_sub
mov	DWORD PTR _idx$[ebp], 7
jmp	SHORT $LN4@remove_sub
mov	eax, DWORD PTR _idx$[ebp]
add	eax, 1
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
cmp	ecx, DWORD PTR _length$[ebp]
jge	SHORT $LN2@remove_sub
mov	edx, DWORD PTR _name$[ebp]
add	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _name$[ebp]
add	eax, DWORD PTR _idx$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR [edx-7], cl
jmp	SHORT $LN3@remove_sub
mov	edx, DWORD PTR _length$[ebp]
sub	edx, 7
mov	DWORD PTR _length$[ebp], edx
jmp	SHORT $LN1@remove_sub
mov	BYTE PTR _continue_search$[ebp], 0
jmp	$LN13@remove_sub
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_strcpy PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _source$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_strdup
add	esp, 12					
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@cff_strcpy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN4@cff_strcpy
DD	-8					
DD	4
DD	$LN3@cff_strcpy
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_make_private_dict PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _subfont$[ebp]
add	eax, 176				
mov	DWORD PTR _cpriv$[ebp], eax
push	196					
push	0
mov	ecx, DWORD PTR _priv$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR [edx+8], cl
mov	edx, DWORD PTR _priv$[ebp]
movzx	eax, BYTE PTR [edx+8]
mov	DWORD PTR _count$[ebp], eax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN18@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN16@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	dx, WORD PTR [esi+edx*4+4]
mov	WORD PTR [ecx+eax*2+12], dx
jmp	SHORT $LN17@cff_make_p
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	dl, BYTE PTR [ecx+1]
mov	BYTE PTR [eax+9], dl
mov	eax, DWORD PTR _priv$[ebp]
movzx	ecx, BYTE PTR [eax+9]
mov	DWORD PTR _count$[ebp], ecx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN15@cff_make_p
mov	edx, DWORD PTR _n$[ebp]
add	edx, 1
mov	DWORD PTR _n$[ebp], edx
mov	eax, DWORD PTR _n$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN13@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	ax, WORD PTR [esi+eax*4+60]
mov	WORD PTR [edx+ecx*2+40], ax
jmp	SHORT $LN14@cff_make_p
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	al, BYTE PTR [edx+2]
mov	BYTE PTR [ecx+10], al
mov	ecx, DWORD PTR _priv$[ebp]
movzx	edx, BYTE PTR [ecx+10]
mov	DWORD PTR _count$[ebp], edx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN12@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN10@cff_make_p
mov	edx, DWORD PTR _n$[ebp]
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	cx, WORD PTR [esi+ecx*4+100]
mov	WORD PTR [eax+edx*2+60], cx
jmp	SHORT $LN11@cff_make_p
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	cl, BYTE PTR [eax+3]
mov	BYTE PTR [edx+11], cl
mov	edx, DWORD PTR _priv$[ebp]
movzx	eax, BYTE PTR [edx+11]
mov	DWORD PTR _count$[ebp], eax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN9@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN7@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	dx, WORD PTR [esi+edx*4+156]
mov	WORD PTR [ecx+eax*2+88], dx
jmp	SHORT $LN8@cff_make_p
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	edx, DWORD PTR [ecx+196]
mov	DWORD PTR [eax+108], edx
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	edx, DWORD PTR [ecx+200]
mov	DWORD PTR [eax+112], edx
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	edx, DWORD PTR [ecx+204]
mov	DWORD PTR [eax+116], edx
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	ax, WORD PTR [eax+208]
mov	WORD PTR [edx+ecx+120], ax
mov	ecx, 2
imul	edx, ecx, 0
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	cx, WORD PTR [ecx+212]
mov	WORD PTR [eax+edx+122], cx
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	cl, BYTE PTR [eax+216]
mov	BYTE PTR [edx+124], cl
mov	edx, DWORD PTR _priv$[ebp]
movzx	eax, BYTE PTR [edx+124]
mov	DWORD PTR _count$[ebp], eax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN6@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN4@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	dx, WORD PTR [esi+edx*4+220]
mov	WORD PTR [ecx+eax*2+128], dx
jmp	SHORT $LN5@cff_make_p
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	dl, BYTE PTR [ecx+217]
mov	BYTE PTR [eax+125], dl
mov	eax, DWORD PTR _priv$[ebp]
movzx	ecx, BYTE PTR [eax+125]
mov	DWORD PTR _count$[ebp], ecx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN3@cff_make_p
mov	edx, DWORD PTR _n$[ebp]
add	edx, 1
mov	DWORD PTR _n$[ebp], edx
mov	eax, DWORD PTR _n$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN1@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	ax, WORD PTR [esi+eax*4+272]
mov	WORD PTR [edx+ecx*2+154], ax
jmp	SHORT $LN2@cff_make_p
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	al, BYTE PTR [edx+324]
mov	BYTE PTR [ecx+126], al
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	eax, DWORD PTR [edx+336]
mov	DWORD PTR [ecx+184], eax
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	eax, DWORD PTR [edx+332]
mov	DWORD PTR [ecx+4], eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_size_get_globals_funcs PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _font$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2952]
mov	DWORD PTR _pshinter$[ebp], edx
push	OFFSET $SG11139
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$[ebp], eax
cmp	DWORD PTR _module$[ebp], 0
je	SHORT $LN3@cff_size_g
cmp	DWORD PTR _pshinter$[ebp], 0
je	SHORT $LN3@cff_size_g
mov	ecx, DWORD PTR _pshinter$[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $LN3@cff_size_g
mov	esi, esp
mov	edx, DWORD PTR _module$[ebp]
push	edx
mov	eax, DWORD PTR _pshinter$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv80[ebp], eax
jmp	SHORT $LN4@cff_size_g
mov	DWORD PTR tv80[ebp], 0
mov	eax, DWORD PTR tv80[ebp]
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_MulFix_i386 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _b$[ebp]
imul	edx
mov	ecx, edx
sar	ecx, 31					
add	ecx, 32768				
add	eax, ecx
adc	edx, 0
shr	eax, 16					
shl	edx, 16					
add	eax, edx
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_subfont_done PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _subfont$[ebp], 0
je	SHORT $LN5@cff_subfon
mov	eax, DWORD PTR _subfont$[ebp]
add	eax, 536				
push	eax
call	_cff_index_done
add	esp, 4
mov	ecx, DWORD PTR _subfont$[ebp]
mov	edx, DWORD PTR [ecx+568]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _subfont$[ebp]
mov	DWORD PTR [ecx+568], 0
xor	edx, edx
jne	SHORT $LN3@cff_subfon
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_subfont_load PROC
push	ebp
mov	ebp, esp
sub	esp, 460				
push	edi
lea	edi, DWORD PTR [ebp-460]
mov	ecx, 115				
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _dict$[ebp], 0
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR _top$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 176				
mov	DWORD PTR _priv$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
push	4096					
lea	ecx, DWORD PTR _parser$[ebp]
push	ecx
call	_cff_parser_init
add	esp, 16					
push	176					
push	0
mov	edx, DWORD PTR _top$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+32], -6553600		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+36], 3276800		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+44], 2
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+48], 65536		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+60], 65536		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+156], 8720		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax], 65535			
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+4], 65535		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+8], 65535		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+12], 65535		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+16], 65535		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+20], 65535		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+128], 65535		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+132], 65535		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+136], 65535		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+172], 65535		
lea	ecx, DWORD PTR _dict_len$[ebp]
push	ecx
lea	edx, DWORD PTR _dict$[ebp]
push	edx
mov	eax, DWORD PTR _font_index$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_access_element
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN19@cff_subfon
mov	edx, 4
imul	eax, edx, 48
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN17@cff_subfon
push	OFFSET $SG10883
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN18@cff_subfon
mov	edx, DWORD PTR _dict$[ebp]
add	edx, DWORD PTR _dict_len$[ebp]
push	edx
mov	eax, DWORD PTR _dict$[ebp]
push	eax
lea	ecx, DWORD PTR _parser$[ebp]
push	ecx
call	_cff_parser_run
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
lea	edx, DWORD PTR _dict$[ebp]
push	edx
mov	eax, DWORD PTR _idx$[ebp]
push	eax
call	_cff_index_forget_element
add	esp, 8
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@cff_subfon
jmp	$Exit$27
mov	ecx, DWORD PTR _top$[ebp]
cmp	DWORD PTR [ecx+132], 65535		
je	SHORT $LN13@cff_subfon
jmp	$Exit$27
mov	edx, DWORD PTR _top$[ebp]
cmp	DWORD PTR [edx+116], 0
je	$LN12@cff_subfon
mov	eax, DWORD PTR _top$[ebp]
cmp	DWORD PTR [eax+120], 0
je	$LN12@cff_subfon
push	360					
push	0
mov	ecx, DWORD PTR _priv$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _priv$[ebp]
mov	DWORD PTR [edx+200], 7
mov	eax, DWORD PTR _priv$[ebp]
mov	DWORD PTR [eax+204], 1
mov	ecx, DWORD PTR _priv$[ebp]
mov	DWORD PTR [ecx+332], -1
mov	edx, DWORD PTR _priv$[ebp]
mov	DWORD PTR [edx+340], 3932		
mov	eax, DWORD PTR _priv$[ebp]
mov	DWORD PTR [eax+196], 2596864		
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
mov	edx, DWORD PTR _priv$[ebp]
push	edx
push	8192					
lea	eax, DWORD PTR _parser$[ebp]
push	eax
call	_cff_parser_init
add	esp, 16					
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+116]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@cff_subfon
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+120]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@cff_subfon
jmp	$Exit$27
mov	ecx, 4
imul	edx, ecx, 48
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN8@cff_subfon
push	OFFSET $SG10898
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN9@cff_subfon
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+36]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
push	ecx
lea	edx, DWORD PTR _parser$[ebp]
push	edx
call	_cff_parser_run
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_subfon
jmp	$Exit$27
mov	ecx, DWORD PTR _priv$[ebp]
movzx	edx, BYTE PTR [ecx]
and	edx, -2					
mov	eax, DWORD PTR _priv$[ebp]
mov	BYTE PTR [eax], dl
mov	ecx, DWORD PTR _priv$[ebp]
cmp	DWORD PTR [ecx+348], 0
je	SHORT $Exit$27
mov	edx, DWORD PTR _top$[ebp]
mov	eax, DWORD PTR _base_offset$[ebp]
add	eax, DWORD PTR [edx+116]
mov	ecx, DWORD PTR _priv$[ebp]
add	eax, DWORD PTR [ecx+348]
push	eax
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@cff_subfon
jmp	SHORT $Exit$27
push	1
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 536				
push	ecx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cff_subfon
jmp	SHORT $Exit$27
push	0
mov	edx, DWORD PTR _font$[ebp]
add	edx, 568				
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 536				
push	eax
call	_cff_index_get_pointers
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cff_subfon
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 460				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN25@cff_subfon
DD	-424					
DD	416					
DD	$LN22@cff_subfon
DD	-436					
DD	4
DD	$LN23@cff_subfon
DD	-448					
DD	4
DD	$LN24@cff_subfon
DB	100					
DB	105					
DB	99					
DB	116					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	100					
DB	105					
DB	99					
DB	116					
DB	0
DB	112					
DB	97					
DB	114					
DB	115					
DB	101					
DB	114					
DB	0
ENDP
_cff_encoding_load PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [eax+8], 0
jne	SHORT $LN52@cff_encodi
push	OFFSET $SG10772
push	1078					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN51@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
cmp	DWORD PTR _j$[ebp], 256			
jae	SHORT $LN49@cff_encodi
xor	edx, edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [ecx+eax*2+12], dx
xor	edx, edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [ecx+eax*2+524], dx
jmp	SHORT $LN50@cff_encodi
cmp	DWORD PTR _offset$[ebp], 1
jbe	$LN48@cff_encodi
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR _offset$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _encoding$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN46@cff_encodi
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadChar
add	esp, 8
movzx	eax, al
mov	ecx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN46@cff_encodi
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _count$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN47@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _encoding$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 127				
mov	DWORD PTR tv132[ebp], eax
je	SHORT $LN43@cff_encodi
cmp	DWORD PTR tv132[ebp], 1
je	$LN37@cff_encodi
jmp	$LN25@cff_encodi
mov	ecx, DWORD PTR _count$[ebp]
add	ecx, 1
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN42@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$7[ebp], eax
mov	DWORD PTR _j$[ebp], 1
jmp	SHORT $LN41@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
ja	SHORT $LN39@cff_encodi
mov	eax, DWORD PTR _p$7[ebp]
movzx	ecx, BYTE PTR [eax]
mov	DWORD PTR _glyph_code$[ebp], ecx
mov	edx, DWORD PTR _p$7[ebp]
add	edx, 1
mov	DWORD PTR _p$7[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN38@cff_encodi
mov	ecx, DWORD PTR _glyph_code$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	ax, WORD PTR _j$[ebp]
mov	WORD PTR [edx+ecx*2+524], ax
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _glyph_code$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	dx, WORD PTR [edx+esi*2]
mov	WORD PTR [ecx+eax*2+12], dx
jmp	SHORT $LN40@cff_encodi
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	$LN44@cff_encodi
mov	DWORD PTR _i$5[ebp], 1
mov	ecx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN36@cff_encodi
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _i$5[ebp]
add	eax, DWORD PTR _nleft$6[ebp]
mov	DWORD PTR _i$5[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	$LN34@cff_encodi
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _glyph_code$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN33@cff_encodi
jmp	$Exit$58
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _nleft$6[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN32@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _nleft$6[ebp]
add	edx, 1
mov	DWORD PTR _nleft$6[ebp], edx
mov	eax, DWORD PTR _encoding$[ebp]
mov	ecx, DWORD PTR _nleft$6[ebp]
cmp	ecx, DWORD PTR [eax+8]
jbe	SHORT $LN31@cff_encodi
mov	edx, DWORD PTR _encoding$[ebp]
mov	eax, DWORD PTR _nleft$6[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _i$5[ebp]
mov	DWORD PTR _k$4[ebp], ecx
jmp	SHORT $LN30@cff_encodi
mov	edx, DWORD PTR _k$4[ebp]
add	edx, 1
mov	DWORD PTR _k$4[ebp], edx
mov	eax, DWORD PTR _glyph_code$[ebp]
add	eax, 1
mov	DWORD PTR _glyph_code$[ebp], eax
mov	ecx, DWORD PTR _nleft$6[ebp]
add	ecx, DWORD PTR _i$5[ebp]
cmp	DWORD PTR _k$4[ebp], ecx
jae	SHORT $LN28@cff_encodi
mov	edx, DWORD PTR _k$4[ebp]
cmp	edx, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN27@cff_encodi
cmp	DWORD PTR _glyph_code$[ebp], 256	
jae	SHORT $LN27@cff_encodi
mov	eax, DWORD PTR _glyph_code$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	dx, WORD PTR _k$4[ebp]
mov	WORD PTR [ecx+eax*2+524], dx
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _glyph_code$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
mov	esi, DWORD PTR _k$4[ebp]
mov	cx, WORD PTR [ecx+esi*2]
mov	WORD PTR [eax+edx*2+12], cx
jmp	SHORT $LN29@cff_encodi
jmp	$LN35@cff_encodi
mov	edx, DWORD PTR _encoding$[ebp]
cmp	DWORD PTR [edx+8], 256			
jbe	SHORT $LN26@cff_encodi
mov	eax, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [eax+8], 256			
jmp	SHORT $LN44@cff_encodi
push	OFFSET $SG10817
call	_FT_Message
add	esp, 4
push	OFFSET $SG10818
push	1198					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$58
mov	ecx, DWORD PTR _encoding$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 128				
je	$LN24@cff_encodi
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadChar
add	esp, 8
movzx	edx, al
mov	DWORD PTR _count$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN23@cff_encodi
jmp	$Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN22@cff_encodi
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	$LN24@cff_encodi
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _glyph_code$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN19@cff_encodi
jmp	$Exit$58
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _glyph_sid$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@cff_encodi
jmp	$Exit$58
mov	ecx, DWORD PTR _glyph_code$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	ax, WORD PTR _glyph_sid$[ebp]
mov	WORD PTR [edx+ecx*2+12], ax
mov	DWORD PTR _gindex$3[ebp], 0
jmp	SHORT $LN17@cff_encodi
mov	ecx, DWORD PTR _gindex$3[ebp]
add	ecx, 1
mov	DWORD PTR _gindex$3[ebp], ecx
mov	edx, DWORD PTR _gindex$3[ebp]
cmp	edx, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN15@cff_encodi
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _gindex$3[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
movzx	ecx, WORD PTR _glyph_sid$[ebp]
cmp	eax, ecx
jne	SHORT $LN14@cff_encodi
mov	edx, DWORD PTR _glyph_code$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
mov	cx, WORD PTR _gindex$3[ebp]
mov	WORD PTR [eax+edx*2+524], cx
jmp	SHORT $LN15@cff_encodi
jmp	SHORT $LN16@cff_encodi
jmp	$LN21@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR tv232[ebp], edx
cmp	DWORD PTR tv232[ebp], 0
je	SHORT $LN10@cff_encodi
cmp	DWORD PTR tv232[ebp], 1
je	SHORT $LN9@cff_encodi
jmp	$LN1@cff_encodi
push	512					
push	OFFSET _cff_standard_encoding
mov	eax, DWORD PTR _encoding$[ebp]
add	eax, 12					
push	eax
call	_memcpy
add	esp, 12					
jmp	SHORT $Populate$59
push	512					
push	OFFSET _cff_expert_encoding
mov	ecx, DWORD PTR _encoding$[ebp]
add	ecx, 12					
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
push	ecx
mov	edx, DWORD PTR _num_glyphs$[ebp]
push	edx
mov	eax, DWORD PTR _charset$[ebp]
push	eax
call	_cff_charset_compute_cids
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@cff_encodi
jmp	$Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN7@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
cmp	DWORD PTR _j$[ebp], 256			
jae	SHORT $LN5@cff_encodi
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
movzx	ecx, WORD PTR [eax+edx*2+12]
mov	DWORD PTR _sid$2[ebp], ecx
mov	DWORD PTR _gid$1[ebp], 0
cmp	DWORD PTR _sid$2[ebp], 0
je	SHORT $LN4@cff_encodi
mov	edx, DWORD PTR _sid$2[ebp]
push	edx
mov	eax, DWORD PTR _charset$[ebp]
push	eax
call	_cff_charset_cid_to_gindex
add	esp, 8
mov	DWORD PTR _gid$1[ebp], eax
cmp	DWORD PTR _gid$1[ebp], 0
je	SHORT $LN3@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	ax, WORD PTR _gid$1[ebp]
mov	WORD PTR [edx+ecx*2+524], ax
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], ecx
jmp	SHORT $LN2@cff_encodi
xor	eax, eax
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [edx+ecx*2+524], ax
xor	eax, eax
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [edx+ecx*2+12], ax
jmp	$LN6@cff_encodi
jmp	SHORT $Exit$58
push	OFFSET $SG10855
call	_FT_Message
add	esp, 4
push	OFFSET $SG10856
push	1291					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN57@cff_encodi
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN56@cff_encodi
DD	-8					
DD	4
DD	$LN55@cff_encodi
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_encoding_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], 0
pop	ebp
ret	0
ENDP
_cff_charset_load PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _offset$[ebp], 2
jbe	$LN46@cff_charse
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR _offset$[ebp]
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN44@cff_charse
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadChar
add	esp, 8
movzx	eax, al
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN45@cff_charse
jmp	$Exit$52
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_glyphs$[ebp]
push	eax
push	0
push	2
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@cff_charse
jmp	$Exit$52
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+8]
xor	edx, edx
mov	WORD PTR [ecx+eax], dx
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv92[ebp], ecx
cmp	DWORD PTR tv92[ebp], 0
je	SHORT $LN40@cff_charse
cmp	DWORD PTR tv92[ebp], 0
jbe	$LN22@cff_charse
cmp	DWORD PTR tv92[ebp], 2
jbe	SHORT $LN34@cff_charse
jmp	$LN22@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 0
jbe	SHORT $LN39@cff_charse
mov	edx, DWORD PTR _num_glyphs$[ebp]
lea	eax, DWORD PTR [edx+edx-2]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN38@cff_charse
jmp	$Exit$52
mov	DWORD PTR _j$3[ebp], 1
jmp	SHORT $LN37@cff_charse
mov	edx, DWORD PTR _j$3[ebp]
add	edx, 1
mov	DWORD PTR _j$3[ebp], edx
mov	eax, DWORD PTR _j$3[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN35@cff_charse
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
mov	edx, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [edx+8]
mov	edx, DWORD PTR _j$3[ebp]
mov	WORD PTR [ecx+edx*2], ax
jmp	SHORT $LN36@cff_charse
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	$LN41@cff_charse
mov	DWORD PTR _j$3[ebp], 1
mov	ecx, DWORD PTR _j$3[ebp]
cmp	ecx, DWORD PTR _num_glyphs$[ebp]
jae	$LN32@cff_charse
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _glyph_sid$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@cff_charse
jmp	$Exit$52
mov	ecx, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [ecx], 2
jne	SHORT $LN30@cff_charse
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	ecx, ax
mov	DWORD PTR _nleft$2[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN29@cff_charse
jmp	$Exit$52
jmp	SHORT $LN28@cff_charse
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _nleft$2[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN28@cff_charse
jmp	$Exit$52
movzx	edx, WORD PTR _glyph_sid$[ebp]
mov	eax, 65535				
sub	eax, DWORD PTR _nleft$2[ebp]
cmp	edx, eax
jbe	SHORT $LN26@cff_charse
movzx	ecx, WORD PTR _glyph_sid$[ebp]
mov	edx, 65535				
sub	edx, ecx
push	edx
mov	eax, DWORD PTR _nleft$2[ebp]
push	eax
push	OFFSET $SG10701
call	_FT_Message
add	esp, 12					
movzx	ecx, WORD PTR _glyph_sid$[ebp]
mov	edx, 65535				
sub	edx, ecx
mov	DWORD PTR _nleft$2[ebp], edx
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN25@cff_charse
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _j$3[ebp]
add	ecx, 1
mov	DWORD PTR _j$3[ebp], ecx
mov	dx, WORD PTR _glyph_sid$[ebp]
add	dx, 1
mov	WORD PTR _glyph_sid$[ebp], dx
mov	eax, DWORD PTR _j$3[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN23@cff_charse
mov	ecx, DWORD PTR _i$1[ebp]
cmp	ecx, DWORD PTR _nleft$2[ebp]
ja	SHORT $LN23@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _j$3[ebp]
mov	dx, WORD PTR _glyph_sid$[ebp]
mov	WORD PTR [eax+ecx*2], dx
jmp	SHORT $LN24@cff_charse
jmp	$LN33@cff_charse
jmp	SHORT $LN41@cff_charse
push	OFFSET $SG10707
call	_FT_Message
add	esp, 4
push	OFFSET $SG10708
push	954					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$52
jmp	$LN21@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR tv185[ebp], edx
cmp	DWORD PTR tv185[ebp], 0
je	SHORT $LN18@cff_charse
cmp	DWORD PTR tv185[ebp], 1
je	$LN15@cff_charse
cmp	DWORD PTR tv185[ebp], 2
je	$LN12@cff_charse
jmp	$LN9@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 229	
jbe	SHORT $LN17@cff_charse
push	OFFSET $SG10717
call	_FT_Message
add	esp, 4
push	OFFSET $SG10718
push	977					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$52
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _num_glyphs$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@cff_charse
jmp	$Exit$52
mov	edx, DWORD PTR _num_glyphs$[ebp]
shl	edx, 1
push	edx
push	OFFSET _cff_isoadobe_charset
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_memcpy
add	esp, 12					
jmp	$LN21@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 166	
jbe	SHORT $LN14@cff_charse
push	OFFSET $SG10724
call	_FT_Message
add	esp, 4
push	OFFSET $SG10725
push	995					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$52
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_glyphs$[ebp]
push	eax
push	0
push	2
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@cff_charse
jmp	$Exit$52
mov	eax, DWORD PTR _num_glyphs$[ebp]
shl	eax, 1
push	eax
push	OFFSET _cff_expert_charset
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_memcpy
add	esp, 12					
jmp	$LN21@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 87		
jbe	SHORT $LN11@cff_charse
push	OFFSET $SG10731
call	_FT_Message
add	esp, 4
push	OFFSET $SG10732
push	1013					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$52
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _num_glyphs$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@cff_charse
jmp	SHORT $Exit$52
mov	edx, DWORD PTR _num_glyphs$[ebp]
shl	edx, 1
push	edx
push	OFFSET _cff_expertsubset_charset
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_memcpy
add	esp, 12					
jmp	SHORT $LN21@cff_charse
push	OFFSET $SG10737
push	1027					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$52
movzx	edx, BYTE PTR _invert$[ebp]
test	edx, edx
je	SHORT $Exit$52
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _num_glyphs$[ebp]
push	ecx
mov	edx, DWORD PTR _charset$[ebp]
push	edx
call	_cff_charset_compute_cids
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+8], 0
xor	ecx, ecx
jne	SHORT $LN6@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+12], 0
xor	eax, eax
jne	SHORT $LN3@cff_charse
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+8], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN51@cff_charse
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN50@cff_charse
DD	-12					
DD	4
DD	$LN49@cff_charse
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_charset_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
mov	eax, DWORD PTR _charset$[ebp]
push	eax
call	_cff_charset_free_cids
add	esp, 8
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+8], 0
xor	edx, edx
jne	SHORT $LN3@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+4], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_charset_free_cids PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+12], 0
xor	ecx, ecx
jne	SHORT $LN3@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+16], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_charset_compute_cids PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
xor	eax, eax
mov	WORD PTR _max_cid$[ebp], ax
mov	ecx, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [ecx+16], 0
jbe	SHORT $LN9@cff_charse
jmp	$Exit$15
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN8@cff_charse
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN6@cff_charse
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _i$[ebp]
movzx	ecx, WORD PTR [edx+eax*2]
movzx	edx, WORD PTR _max_cid$[ebp]
cmp	ecx, edx
jle	SHORT $LN5@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _i$[ebp]
mov	ax, WORD PTR [ecx+edx*2]
mov	WORD PTR _max_cid$[ebp], ax
jmp	SHORT $LN7@cff_charse
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
movzx	edx, WORD PTR _max_cid$[ebp]
add	edx, 1
push	edx
push	0
push	2
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_charse
jmp	SHORT $Exit$15
mov	edx, DWORD PTR _num_glyphs$[ebp]
sub	edx, 1
mov	DWORD PTR _j$[ebp], edx
jmp	SHORT $LN3@cff_charse
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
mov	DWORD PTR _j$[ebp], eax
cmp	DWORD PTR _j$[ebp], 0
jl	SHORT $LN1@cff_charse
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _j$[ebp]
movzx	ecx, WORD PTR [edx+eax*2]
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	dx, WORD PTR _j$[ebp]
mov	WORD PTR [eax+ecx*2], dx
jmp	SHORT $LN2@cff_charse
movzx	eax, WORD PTR _max_cid$[ebp]
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR _num_glyphs$[ebp]
mov	DWORD PTR [edx+20], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@cff_charse
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN13@cff_charse
DD	-8					
DD	4
DD	$LN12@cff_charse
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_CFF_Load_FD_Select PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN13@CFF_Load_F
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
mov	BYTE PTR _format$[ebp], al
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@CFF_Load_F
jmp	$Exit$20
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	dl, BYTE PTR _format$[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [eax+20], 0
mov	cl, BYTE PTR _format$[ebp]
mov	BYTE PTR tv75[ebp], cl
cmp	BYTE PTR tv75[ebp], 0
je	SHORT $LN10@CFF_Load_F
cmp	BYTE PTR tv75[ebp], 3
je	SHORT $LN9@CFF_Load_F
jmp	$LN1@CFF_Load_F
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR _num_glyphs$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $Load_Data$21
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	eax, ax
mov	DWORD PTR _num_ranges$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@CFF_Load_F
jmp	$Exit$20
cmp	DWORD PTR _num_ranges$[ebp], 0
jne	SHORT $LN7@CFF_Load_F
mov	ecx, 4
imul	edx, ecx, 48
cmp	DWORD PTR _ft_trace_levels[edx], 0
jl	SHORT $LN5@CFF_Load_F
push	OFFSET $SG10549
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN6@CFF_Load_F
push	OFFSET $SG10550
push	695					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$20
imul	ecx, DWORD PTR _num_ranges$[ebp], 3
add	ecx, 2
mov	edx, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _fdselect$[ebp]
add	eax, 8
push	eax
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@CFF_Load_F
jmp	SHORT $Exit$20
jmp	SHORT $Exit$20
push	OFFSET $SG10555
push	707					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@CFF_Load_F
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN18@CFF_Load_F
DD	-8					
DD	4
DD	$LN17@CFF_Load_F
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_CFF_Done_FD_Select PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _fdselect$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@CFF_Done_F
mov	ecx, DWORD PTR _fdselect$[ebp]
add	ecx, 8
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	eax, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	BYTE PTR [ecx], 0
mov	edx, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [edx+4], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_index_get_pointers PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _memory$[ebp], edx
mov	DWORD PTR _t$[ebp], 0
mov	DWORD PTR _new_bytes$[ebp], 0
mov	eax, DWORD PTR _table$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+24], 0
jne	SHORT $LN21@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
push	edx
call	_cff_index_load_offsets
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@cff_index_
jmp	$Exit$27
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax+8], 0
jbe	$Exit$27
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 1
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _t$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$27
cmp	DWORD PTR _pool$[ebp], 0
je	SHORT $LN18@cff_index_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _idx$[ebp]
add	ecx, DWORD PTR [edx+8]
push	ecx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _new_bytes$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$27
mov	DWORD PTR _extra$3[ebp], 0
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _org_bytes$2[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR [eax+ecx]
sub	ecx, 1
mov	DWORD PTR _cur_offset$4[ebp], ecx
je	SHORT $LN17@cff_index_
mov	edx, 4
imul	eax, edx, 48
cmp	DWORD PTR _ft_trace_levels[eax], 0
jl	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _cur_offset$4[ebp]
push	ecx
push	OFFSET $SG10409
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN16@cff_index_
mov	DWORD PTR _cur_offset$4[ebp], 0
cmp	DWORD PTR _pool$[ebp], 0
jne	SHORT $LN12@cff_index_
mov	eax, DWORD PTR _org_bytes$2[ebp]
add	eax, DWORD PTR _cur_offset$4[ebp]
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	SHORT $LN11@cff_index_
mov	edx, DWORD PTR _new_bytes$[ebp]
add	edx, DWORD PTR _cur_offset$4[ebp]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _t$[ebp]
mov	DWORD PTR [eax+ecx], edx
mov	DWORD PTR _n$5[ebp], 1
jmp	SHORT $LN10@cff_index_
mov	ecx, DWORD PTR _n$5[ebp]
add	ecx, 1
mov	DWORD PTR _n$5[ebp], ecx
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _n$5[ebp]
cmp	eax, DWORD PTR [edx+8]
ja	$LN8@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
sub	ecx, 1
mov	DWORD PTR _next_offset$1[ebp], ecx
mov	edx, DWORD PTR _next_offset$1[ebp]
cmp	edx, DWORD PTR _cur_offset$4[ebp]
jae	SHORT $LN7@cff_index_
mov	eax, DWORD PTR _cur_offset$4[ebp]
mov	DWORD PTR _next_offset$1[ebp], eax
jmp	SHORT $LN6@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _next_offset$1[ebp]
cmp	edx, DWORD PTR [ecx+20]
jbe	SHORT $LN6@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _next_offset$1[ebp], ecx
cmp	DWORD PTR _pool$[ebp], 0
jne	SHORT $LN4@cff_index_
mov	edx, DWORD PTR _org_bytes$2[ebp]
add	edx, DWORD PTR _next_offset$1[ebp]
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN3@cff_index_
mov	edx, DWORD PTR _new_bytes$[ebp]
add	edx, DWORD PTR _next_offset$1[ebp]
add	edx, DWORD PTR _extra$3[ebp]
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
mov	edx, DWORD PTR _next_offset$1[ebp]
cmp	edx, DWORD PTR _cur_offset$4[ebp]
je	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	edx, DWORD PTR _n$5[ebp]
mov	esi, DWORD PTR _t$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
sub	eax, DWORD PTR [esi+edx*4-4]
push	eax
mov	ecx, DWORD PTR _org_bytes$2[ebp]
add	ecx, DWORD PTR _cur_offset$4[ebp]
push	ecx
mov	edx, DWORD PTR _n$5[ebp]
mov	eax, DWORD PTR _t$[ebp]
mov	ecx, DWORD PTR [eax+edx*4-4]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _n$5[ebp]
mov	edx, DWORD PTR _t$[ebp]
mov	ecx, DWORD PTR [edx+ecx*4]
mov	BYTE PTR [eax+ecx], 0
mov	edx, DWORD PTR _n$5[ebp]
mov	eax, DWORD PTR _t$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
add	ecx, 1
mov	edx, DWORD PTR _n$5[ebp]
mov	eax, DWORD PTR _t$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
mov	ecx, DWORD PTR _extra$3[ebp]
add	ecx, 1
mov	DWORD PTR _extra$3[ebp], ecx
mov	edx, DWORD PTR _next_offset$1[ebp]
mov	DWORD PTR _cur_offset$4[ebp], edx
jmp	$LN9@cff_index_
mov	eax, DWORD PTR _table$[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _pool$[ebp], 0
je	SHORT $Exit$27
mov	edx, DWORD PTR _pool$[ebp]
mov	eax, DWORD PTR _new_bytes$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN25@cff_index_
DD	-8					
DD	4
DD	$LN24@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_load_offsets PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+8], 0
jbe	$Exit$31
mov	edx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [edx+24], 0
jne	$Exit$31
mov	eax, DWORD PTR _idx$[ebp]
mov	cl, BYTE PTR [eax+12]
mov	BYTE PTR _offsize$5[ebp], cl
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 1
movzx	ecx, BYTE PTR _offsize$5[ebp]
imul	eax, ecx
mov	DWORD PTR _data_size$4[ebp], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 1
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+24], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN23@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+4]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN23@cff_index_
mov	edx, DWORD PTR _data_size$4[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@cff_index_
jmp	$Exit$31
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _p$3[ebp]
add	edx, DWORD PTR _data_size$4[ebp]
mov	DWORD PTR _p_end$2[ebp], edx
mov	al, BYTE PTR _offsize$5[ebp]
mov	BYTE PTR tv132[ebp], al
cmp	BYTE PTR tv132[ebp], 1
je	SHORT $LN20@cff_index_
cmp	BYTE PTR tv132[ebp], 2
je	SHORT $LN16@cff_index_
cmp	BYTE PTR tv132[ebp], 3
je	$LN12@cff_index_
jmp	$LN8@cff_index_
jmp	SHORT $LN19@cff_index_
mov	ecx, DWORD PTR _p$3[ebp]
add	ecx, 1
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _poff$1[ebp]
add	edx, 4
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _p$3[ebp]
cmp	eax, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN17@cff_index_
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [eax+edx]
mov	eax, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	SHORT $LN18@cff_index_
jmp	$LN21@cff_index_
jmp	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _p$3[ebp]
add	ecx, 2
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _poff$1[ebp]
add	edx, 4
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _p$3[ebp]
cmp	eax, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN13@cff_index_
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	ecx, BYTE PTR [eax+edx]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [eax+edx]
or	ecx, edx
mov	eax, 4
imul	edx, eax, 0
movzx	eax, cx
mov	ecx, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	SHORT $LN14@cff_index_
jmp	$LN21@cff_index_
jmp	SHORT $LN11@cff_index_
mov	edx, DWORD PTR _p$3[ebp]
add	edx, 3
mov	DWORD PTR _p$3[ebp], edx
mov	eax, DWORD PTR _poff$1[ebp]
add	eax, 4
mov	DWORD PTR _poff$1[ebp], eax
mov	ecx, DWORD PTR _p$3[ebp]
cmp	ecx, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN9@cff_index_
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [ecx+eax]
shl	edx, 16					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$3[ebp]
movzx	eax, BYTE PTR [ecx+eax]
shl	eax, 8
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _p$3[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
or	edx, ecx
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	SHORT $LN10@cff_index_
jmp	SHORT $LN21@cff_index_
jmp	SHORT $LN7@cff_index_
mov	ecx, DWORD PTR _p$3[ebp]
add	ecx, 4
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _poff$1[ebp]
add	edx, 4
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _p$3[ebp]
cmp	eax, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN21@cff_index_
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	ecx, BYTE PTR [eax+edx]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [eax+edx]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$3[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _p$3[ebp]
movzx	eax, BYTE PTR [edx+eax]
or	ecx, eax
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [edx+eax], ecx
jmp	SHORT $LN6@cff_index_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+24], 0
xor	edx, edx
jne	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN29@cff_index_
DD	-8					
DD	4
DD	$LN28@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_done PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _stream$2[ebp], edx
mov	eax, DWORD PTR _stream$2[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [edx+28], 0
je	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
add	eax, 28					
push	eax
mov	ecx, DWORD PTR _stream$2[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [edx+24], 0
xor	eax, eax
jne	SHORT $LN3@cff_index_
push	32					
push	0
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_memset
add	esp, 12					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_index_init PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
push	32					
push	0
mov	edx, DWORD PTR _idx$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+4], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _count$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$21
movzx	ecx, WORD PTR _count$[ebp]
test	ecx, ecx
jle	$Exit$21
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
mov	BYTE PTR _offsize$2[ebp], al
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@cff_index_
jmp	$Exit$21
movzx	ecx, BYTE PTR _offsize$2[ebp]
cmp	ecx, 1
jl	SHORT $LN12@cff_index_
movzx	edx, BYTE PTR _offsize$2[ebp]
cmp	edx, 4
jle	SHORT $LN13@cff_index_
push	OFFSET $SG10275
push	253					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$21
movzx	eax, WORD PTR _count$[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _idx$[ebp]
mov	al, BYTE PTR _offsize$2[ebp]
mov	BYTE PTR [edx+12], al
movzx	ecx, WORD PTR _count$[ebp]
add	ecx, 1
movzx	edx, BYTE PTR _offsize$2[ebp]
imul	ecx, edx
mov	DWORD PTR _size$1[ebp], ecx
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _size$1[ebp]
lea	eax, DWORD PTR [ecx+edx+3]
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+16], eax
movzx	edx, BYTE PTR _offsize$2[ebp]
mov	eax, DWORD PTR _size$1[ebp]
sub	eax, edx
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@cff_index_
jmp	$Exit$21
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _idx$[ebp]
push	eax
call	_cff_index_read_offset
add	esp, 8
mov	DWORD PTR _size$1[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@cff_index_
jmp	SHORT $Exit$21
cmp	DWORD PTR _size$1[ebp], 0
jne	SHORT $LN9@cff_index_
push	OFFSET $SG10281
push	272					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$21
mov	ecx, DWORD PTR _size$1[ebp]
sub	ecx, 1
mov	DWORD PTR _size$1[ebp], ecx
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _size$1[ebp]
mov	DWORD PTR [edx+20], eax
movzx	ecx, BYTE PTR _load$[ebp]
test	ecx, ecx
je	SHORT $LN8@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
add	edx, 28					
push	edx
mov	eax, DWORD PTR _size$1[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@cff_index_
jmp	SHORT $Exit$21
jmp	SHORT $Exit$21
mov	edx, DWORD PTR _size$1[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+24], 0
xor	edx, edx
jne	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN19@cff_index_
DD	-8					
DD	4
DD	$LN18@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_read_offset PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _stream$[ebp], ecx
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _idx$[ebp]
movzx	eax, BYTE PTR [edx+12]
push	eax
lea	ecx, DWORD PTR _tmp$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@cff_index_
mov	DWORD PTR _nn$1[ebp], 0
jmp	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _nn$1[ebp]
add	eax, 1
mov	DWORD PTR _nn$1[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
movzx	edx, BYTE PTR [ecx+12]
cmp	DWORD PTR _nn$1[ebp], edx
jge	SHORT $LN4@cff_index_
mov	eax, DWORD PTR _result$[ebp]
shl	eax, 8
mov	ecx, DWORD PTR _nn$1[ebp]
movzx	edx, BYTE PTR _tmp$[ebp+ecx]
or	eax, edx
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $LN2@cff_index_
mov	eax, DWORD PTR _errorp$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN8@cff_index_
DD	-16					
DD	4
DD	$LN7@cff_index_
DB	116					
DB	109					
DB	112					
DB	0
ENDP
_cff_parse_cid_ros PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	DWORD PTR _data$[ebp], edx
mov	DWORD PTR _error$[ebp], 161		
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 28					
mov	ecx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [ecx+404], eax
jb	$LN15@cff_parse_
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR tv73[ebp]
push	ecx
call	_cff_parse_num
add	esp, 4
mov	edx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [edx+132], eax
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR tv78[ebp]
push	edx
call	_cff_parse_num
add	esp, 4
mov	ecx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [ecx+136], eax
mov	edx, DWORD PTR _data$[ebp]
mov	eax, DWORD PTR [edx]
movzx	ecx, BYTE PTR [eax]
cmp	ecx, 30					
jne	SHORT $LN14@cff_parse_
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN12@cff_parse_
push	OFFSET $SG9748
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN13@cff_parse_
mov	edx, DWORD PTR _data$[ebp]
push	edx
call	_cff_parse_num
add	esp, 4
mov	ecx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [ecx+140], eax
mov	edx, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [edx+140], 0
jge	SHORT $LN9@cff_parse_
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN7@cff_parse_
mov	edx, DWORD PTR _dict$[ebp]
mov	eax, DWORD PTR [edx+140]
push	eax
push	OFFSET $SG9754
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN8@cff_parse_
mov	DWORD PTR _error$[ebp], 0
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cff_parse_
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR [ecx+140]
push	edx
mov	eax, DWORD PTR _dict$[ebp]
mov	ecx, DWORD PTR [eax+136]
push	ecx
mov	edx, DWORD PTR _dict$[ebp]
mov	eax, DWORD PTR [edx+132]
push	eax
push	OFFSET $SG9759
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN4@cff_parse_
mov	eax, DWORD PTR _error$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_private_dict PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	DWORD PTR _data$[ebp], edx
mov	DWORD PTR _error$[ebp], 161		
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 24					
mov	ecx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [ecx+404], eax
jb	SHORT $LN5@cff_parse_
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR tv73[ebp]
push	ecx
call	_cff_parse_num
add	esp, 4
mov	edx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [edx+120], eax
mov	eax, DWORD PTR _data$[ebp]
push	eax
call	_cff_parse_num
add	esp, 4
mov	ecx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [ecx+116], eax
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cff_parse_
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR [ecx+116]
push	edx
mov	eax, DWORD PTR _dict$[ebp]
mov	ecx, DWORD PTR [eax+120]
push	ecx
push	OFFSET $SG9731
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cff_parse_
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_font_bbox PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _dict$[ebp]
add	edx, 84					
mov	DWORD PTR _bbox$[ebp], edx
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	DWORD PTR _data$[ebp], eax
mov	DWORD PTR _error$[ebp], 161		
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 32					
mov	edx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [edx+404], ecx
jb	$LN5@cff_parse_
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv75[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR tv75[ebp]
push	edx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	ecx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv82[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR tv82[ebp]
push	ecx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	edx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv89[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR tv89[ebp]
push	edx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	ecx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _data$[ebp]
push	edx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	ecx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _error$[ebp], 0
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cff_parse_
mov	ecx, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [ecx+12]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
mov	edx, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [edx+8]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
mov	eax, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [eax+4]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
mov	ecx, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [ecx]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
push	OFFSET $SG9717
call	_FT_Message
add	esp, 20					
xor	edx, edx
jne	SHORT $LN4@cff_parse_
mov	eax, DWORD PTR _error$[ebp]
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_font_matrix PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _dict$[ebp]
add	edx, 48					
mov	DWORD PTR _matrix$[ebp], edx
mov	eax, DWORD PTR _dict$[ebp]
add	eax, 72					
mov	DWORD PTR _offset$[ebp], eax
mov	ecx, DWORD PTR _dict$[ebp]
add	ecx, 68					
mov	DWORD PTR _upm$[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	DWORD PTR _data$[ebp], edx
mov	DWORD PTR _error$[ebp], 161		
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 40					
mov	ecx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [ecx+404], eax
jb	$Exit$17
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _dict$[ebp]
mov	BYTE PTR [edx+64], 1
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
lea	edx, DWORD PTR _scaling$1[ebp]
push	edx
mov	eax, DWORD PTR tv78[ebp]
push	eax
call	_cff_parse_fixed_dynamic
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _scaling$1[ebp]
neg	edx
mov	DWORD PTR _scaling$1[ebp], edx
js	SHORT $LN9@cff_parse_
cmp	DWORD PTR _scaling$1[ebp], 9
jle	SHORT $LN10@cff_parse_
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN5@cff_parse_
mov	edx, DWORD PTR _scaling$1[ebp]
push	edx
push	OFFSET $SG9690
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN9@cff_parse_
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx], 65536			
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+12], 65536		
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _offset$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _upm$[ebp]
mov	DWORD PTR [ecx], 1
jmp	$Exit$17
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv131[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv131[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv137[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv137[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv143[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv143[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv149[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv149[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _scaling$1[ebp]
push	edx
mov	eax, DWORD PTR _data$[ebp]
push	eax
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _upm$[ebp]
mov	eax, DWORD PTR _scaling$1[ebp]
mov	ecx, DWORD PTR _power_tens[eax*4]
mov	DWORD PTR [edx], ecx
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	$LN1@cff_parse_
mov	ecx, DWORD PTR _offset$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _upm$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv258[ebp], eax
cvtsi2sd xmm1, DWORD PTR tv258[ebp]
mov	ecx, DWORD PTR tv258[ebp]
shr	ecx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _offset$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx]
mov	eax, DWORD PTR _upm$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv265[ebp], ecx
cvtsi2sd xmm1, DWORD PTR tv265[ebp]
mov	edx, DWORD PTR tv265[ebp]
shr	edx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+12]
mov	ecx, DWORD PTR _upm$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR tv272[ebp], edx
cvtsi2sd xmm1, DWORD PTR tv272[ebp]
mov	eax, DWORD PTR tv272[ebp]
shr	eax, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _upm$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv279[ebp], eax
cvtsi2sd xmm1, DWORD PTR tv279[ebp]
mov	ecx, DWORD PTR tv279[ebp]
shr	ecx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+4]
mov	eax, DWORD PTR _upm$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv286[ebp], ecx
cvtsi2sd xmm1, DWORD PTR tv286[ebp]
mov	edx, DWORD PTR tv286[ebp]
shr	edx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax]
mov	ecx, DWORD PTR _upm$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR tv293[ebp], edx
cvtsi2sd xmm1, DWORD PTR tv293[ebp]
mov	eax, DWORD PTR tv293[ebp]
shr	eax, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG9702
call	_FT_Message
add	esp, 52					
xor	ecx, ecx
jne	$LN4@cff_parse_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@cff_parse_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN15@cff_parse_
DD	-32					
DD	4
DD	$LN14@cff_parse_
DB	115					
DB	99					
DB	97					
DB	108					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
_cff_parse_fixed_dynamic PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _scaling$[ebp], 0
jne	SHORT $LN13@cff_parse_
push	OFFSET $SG9655
push	468					
push	OFFSET $SG9656
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@cff_parse_
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx]
movzx	eax, BYTE PTR [edx]
cmp	eax, 30					
jne	SHORT $LN10@cff_parse_
mov	ecx, DWORD PTR _scaling$[ebp]
push	ecx
push	0
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_cff_parse_real
add	esp, 16					
jmp	$LN15@cff_parse_
jmp	$LN15@cff_parse_
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_cff_parse_integer
add	esp, 8
mov	DWORD PTR _number$2[ebp], eax
cmp	DWORD PTR _number$2[ebp], 32767		
jle	$LN8@cff_parse_
mov	DWORD PTR _integer_length$1[ebp], 5
jmp	SHORT $LN7@cff_parse_
mov	ecx, DWORD PTR _integer_length$1[ebp]
add	ecx, 1
mov	DWORD PTR _integer_length$1[ebp], ecx
cmp	DWORD PTR _integer_length$1[ebp], 10	
jge	SHORT $LN5@cff_parse_
mov	edx, DWORD PTR _integer_length$1[ebp]
mov	eax, DWORD PTR _number$2[ebp]
cmp	eax, DWORD PTR _power_tens[edx*4]
jge	SHORT $LN4@cff_parse_
jmp	SHORT $LN5@cff_parse_
jmp	SHORT $LN6@cff_parse_
mov	ecx, DWORD PTR _integer_length$1[ebp]
mov	eax, DWORD PTR _number$2[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4-20]
cmp	eax, 32767				
jle	SHORT $LN3@cff_parse_
mov	edx, DWORD PTR _integer_length$1[ebp]
sub	edx, 4
mov	eax, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _integer_length$1[ebp]
mov	edx, DWORD PTR _power_tens[ecx*4-16]
push	edx
mov	eax, DWORD PTR _number$2[ebp]
push	eax
call	_FT_DivFix
add	esp, 8
jmp	SHORT $LN15@cff_parse_
jmp	SHORT $LN2@cff_parse_
mov	ecx, DWORD PTR _integer_length$1[ebp]
sub	ecx, 5
mov	edx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _integer_length$1[ebp]
mov	ecx, DWORD PTR _power_tens[eax*4-20]
push	ecx
mov	edx, DWORD PTR _number$2[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
jmp	SHORT $LN15@cff_parse_
jmp	SHORT $LN15@cff_parse_
mov	eax, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _number$2[ebp]
shl	eax, 16					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_fixed_scaled PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _scaling$[ebp]
push	eax
mov	ecx, DWORD PTR _d$[ebp]
push	ecx
call	_do_fixed
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_parse_fixed PROC
push	ebp
mov	ebp, esp
push	0
mov	eax, DWORD PTR _d$[ebp]
push	eax
call	_do_fixed
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_do_fixed PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax]
movzx	edx, BYTE PTR [ecx]
cmp	edx, 30					
jne	SHORT $LN10@do_fixed
push	0
mov	eax, DWORD PTR _scaling$[ebp]
push	eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
call	_cff_parse_real
add	esp, 16					
jmp	$LN11@do_fixed
jmp	$LN11@do_fixed
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_cff_parse_integer
add	esp, 8
mov	DWORD PTR _val$1[ebp], eax
cmp	DWORD PTR _scaling$[ebp], 0
je	SHORT $LN8@do_fixed
mov	eax, DWORD PTR _scaling$[ebp]
mov	ecx, DWORD PTR _val$1[ebp]
imul	ecx, DWORD PTR _power_tens[eax*4]
mov	DWORD PTR _val$1[ebp], ecx
cmp	DWORD PTR _val$1[ebp], 32767		
jle	SHORT $LN7@do_fixed
mov	DWORD PTR _val$1[ebp], 2147483647	
jmp	SHORT $Overflow$13
jmp	SHORT $LN6@do_fixed
cmp	DWORD PTR _val$1[ebp], -32767		
jge	SHORT $LN6@do_fixed
mov	DWORD PTR _val$1[ebp], -2147483647	
jmp	SHORT $Overflow$13
mov	eax, DWORD PTR _val$1[ebp]
shl	eax, 16					
jmp	SHORT $LN11@do_fixed
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@do_fixed
push	OFFSET $SG9634
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $Overflow$13
mov	eax, DWORD PTR _val$1[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_num PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax]
movzx	edx, BYTE PTR [ecx]
cmp	edx, 30					
jne	SHORT $LN3@cff_parse_
push	0
push	0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_cff_parse_real
add	esp, 16					
sar	eax, 16					
mov	DWORD PTR tv84[ebp], eax
jmp	SHORT $LN4@cff_parse_
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
call	_cff_parse_integer
add	esp, 8
mov	DWORD PTR tv84[ebp], eax
mov	eax, DWORD PTR tv84[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_real PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _start$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _sign$[ebp], 0
mov	DWORD PTR _exponent_sign$[ebp], 0
mov	DWORD PTR _have_overflow$[ebp], 0
cmp	DWORD PTR _scaling$[ebp], 0
je	SHORT $LN70@cff_parse_
mov	ecx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [ecx], 0
mov	DWORD PTR _result$[ebp], 0
mov	DWORD PTR _number$[ebp], 0
mov	DWORD PTR _exponent$[ebp], 0
mov	DWORD PTR _exponent_add$[ebp], 0
mov	DWORD PTR _integer_length$[ebp], 0
mov	DWORD PTR _fraction_length$[ebp], 0
mov	DWORD PTR _phase$[ebp], 4
cmp	DWORD PTR _phase$[ebp], 0
je	SHORT $LN67@cff_parse_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jb	SHORT $LN67@cff_parse_
jmp	$Bad$75
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx]
mov	ecx, DWORD PTR _phase$[ebp]
sar	edx, cl
and	edx, 15					
mov	DWORD PTR _nib$[ebp], edx
mov	eax, 4
sub	eax, DWORD PTR _phase$[ebp]
mov	DWORD PTR _phase$[ebp], eax
cmp	DWORD PTR _nib$[ebp], 14		
jne	SHORT $LN65@cff_parse_
mov	DWORD PTR _sign$[ebp], 1
jmp	SHORT $LN64@cff_parse_
cmp	DWORD PTR _nib$[ebp], 9
jbe	SHORT $LN63@cff_parse_
jmp	SHORT $LN68@cff_parse_
jmp	SHORT $LN64@cff_parse_
cmp	DWORD PTR _number$[ebp], 214748364	
jl	SHORT $LN61@cff_parse_
mov	ecx, DWORD PTR _exponent_add$[ebp]
add	ecx, 1
mov	DWORD PTR _exponent_add$[ebp], ecx
jmp	SHORT $LN64@cff_parse_
cmp	DWORD PTR _nib$[ebp], 0
jne	SHORT $LN58@cff_parse_
cmp	DWORD PTR _number$[ebp], 0
je	SHORT $LN64@cff_parse_
mov	edx, DWORD PTR _integer_length$[ebp]
add	edx, 1
mov	DWORD PTR _integer_length$[ebp], edx
imul	eax, DWORD PTR _number$[ebp], 10
add	eax, DWORD PTR _nib$[ebp]
mov	DWORD PTR _number$[ebp], eax
jmp	$LN69@cff_parse_
cmp	DWORD PTR _nib$[ebp], 10		
jne	$LN57@cff_parse_
cmp	DWORD PTR _phase$[ebp], 0
je	SHORT $LN54@cff_parse_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jb	SHORT $LN54@cff_parse_
jmp	$Bad$75
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, DWORD PTR _phase$[ebp]
sar	eax, cl
and	eax, 15					
mov	DWORD PTR _nib$[ebp], eax
mov	ecx, 4
sub	ecx, DWORD PTR _phase$[ebp]
mov	DWORD PTR _phase$[ebp], ecx
cmp	DWORD PTR _nib$[ebp], 10		
jb	SHORT $LN52@cff_parse_
jmp	SHORT $LN57@cff_parse_
cmp	DWORD PTR _nib$[ebp], 0
jne	SHORT $LN51@cff_parse_
cmp	DWORD PTR _number$[ebp], 0
jne	SHORT $LN51@cff_parse_
mov	edx, DWORD PTR _exponent_add$[ebp]
sub	edx, 1
mov	DWORD PTR _exponent_add$[ebp], edx
jmp	SHORT $LN50@cff_parse_
cmp	DWORD PTR _number$[ebp], 214748364	
jge	SHORT $LN50@cff_parse_
cmp	DWORD PTR _fraction_length$[ebp], 9
jge	SHORT $LN50@cff_parse_
mov	eax, DWORD PTR _fraction_length$[ebp]
add	eax, 1
mov	DWORD PTR _fraction_length$[ebp], eax
imul	ecx, DWORD PTR _number$[ebp], 10
add	ecx, DWORD PTR _nib$[ebp]
mov	DWORD PTR _number$[ebp], ecx
jmp	$LN56@cff_parse_
cmp	DWORD PTR _nib$[ebp], 12		
jne	SHORT $LN48@cff_parse_
mov	DWORD PTR _exponent_sign$[ebp], 1
mov	DWORD PTR _nib$[ebp], 11		
cmp	DWORD PTR _nib$[ebp], 11		
jne	SHORT $LN47@cff_parse_
cmp	DWORD PTR _phase$[ebp], 0
je	SHORT $LN44@cff_parse_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jb	SHORT $LN44@cff_parse_
jmp	$Bad$75
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx]
mov	ecx, DWORD PTR _phase$[ebp]
sar	edx, cl
and	edx, 15					
mov	DWORD PTR _nib$[ebp], edx
mov	eax, 4
sub	eax, DWORD PTR _phase$[ebp]
mov	DWORD PTR _phase$[ebp], eax
cmp	DWORD PTR _nib$[ebp], 10		
jb	SHORT $LN42@cff_parse_
jmp	SHORT $LN45@cff_parse_
cmp	DWORD PTR _exponent$[ebp], 1000		
jle	SHORT $LN41@cff_parse_
mov	DWORD PTR _have_overflow$[ebp], 1
jmp	SHORT $LN40@cff_parse_
imul	ecx, DWORD PTR _exponent$[ebp], 10
add	ecx, DWORD PTR _nib$[ebp]
mov	DWORD PTR _exponent$[ebp], ecx
jmp	SHORT $LN46@cff_parse_
cmp	DWORD PTR _exponent_sign$[ebp], 0
je	SHORT $LN47@cff_parse_
mov	edx, DWORD PTR _exponent$[ebp]
neg	edx
mov	DWORD PTR _exponent$[ebp], edx
cmp	DWORD PTR _number$[ebp], 0
jne	SHORT $LN38@cff_parse_
jmp	$Exit$76
cmp	DWORD PTR _have_overflow$[ebp], 0
je	SHORT $LN37@cff_parse_
cmp	DWORD PTR _exponent_sign$[ebp], 0
je	SHORT $LN36@cff_parse_
jmp	$Underflow$77
jmp	SHORT $LN37@cff_parse_
jmp	$Overflow$78
mov	eax, DWORD PTR _power_ten$[ebp]
add	eax, DWORD PTR _exponent_add$[ebp]
add	eax, DWORD PTR _exponent$[ebp]
mov	DWORD PTR _exponent$[ebp], eax
cmp	DWORD PTR _scaling$[ebp], 0
je	$LN34@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
add	ecx, DWORD PTR _integer_length$[ebp]
mov	DWORD PTR _fraction_length$[ebp], ecx
mov	edx, DWORD PTR _exponent$[ebp]
add	edx, DWORD PTR _integer_length$[ebp]
mov	DWORD PTR _exponent$[ebp], edx
cmp	DWORD PTR _fraction_length$[ebp], 5
jg	$LN33@cff_parse_
cmp	DWORD PTR _number$[ebp], 32767		
jle	SHORT $LN32@cff_parse_
push	10					
mov	eax, DWORD PTR _number$[ebp]
push	eax
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
mov	ecx, DWORD PTR _exponent$[ebp]
sub	ecx, DWORD PTR _fraction_length$[ebp]
add	ecx, 1
mov	edx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [edx], ecx
jmp	$LN31@cff_parse_
cmp	DWORD PTR _exponent$[ebp], 0
jle	SHORT $LN30@cff_parse_
cmp	DWORD PTR _exponent$[ebp], 5
jge	SHORT $LN73@cff_parse_
mov	eax, DWORD PTR _exponent$[ebp]
mov	DWORD PTR tv168[ebp], eax
jmp	SHORT $LN74@cff_parse_
mov	DWORD PTR tv168[ebp], 5
mov	ecx, DWORD PTR tv168[ebp]
mov	DWORD PTR _new_fraction_length$2[ebp], ecx
mov	edx, DWORD PTR _new_fraction_length$2[ebp]
sub	edx, DWORD PTR _fraction_length$[ebp]
mov	DWORD PTR _shift$1[ebp], edx
cmp	DWORD PTR _shift$1[ebp], 0
jle	SHORT $LN29@cff_parse_
mov	eax, DWORD PTR _exponent$[ebp]
sub	eax, DWORD PTR _new_fraction_length$2[ebp]
mov	DWORD PTR _exponent$[ebp], eax
mov	ecx, DWORD PTR _shift$1[ebp]
mov	edx, DWORD PTR _number$[ebp]
imul	edx, DWORD PTR _power_tens[ecx*4]
mov	DWORD PTR _number$[ebp], edx
cmp	DWORD PTR _number$[ebp], 32767		
jle	SHORT $LN28@cff_parse_
mov	eax, DWORD PTR _number$[ebp]
cdq
mov	ecx, 10					
idiv	ecx
mov	DWORD PTR _number$[ebp], eax
mov	edx, DWORD PTR _exponent$[ebp]
add	edx, 1
mov	DWORD PTR _exponent$[ebp], edx
jmp	SHORT $LN27@cff_parse_
mov	eax, DWORD PTR _exponent$[ebp]
sub	eax, DWORD PTR _fraction_length$[ebp]
mov	DWORD PTR _exponent$[ebp], eax
jmp	SHORT $LN26@cff_parse_
mov	ecx, DWORD PTR _exponent$[ebp]
sub	ecx, DWORD PTR _fraction_length$[ebp]
mov	DWORD PTR _exponent$[ebp], ecx
mov	edx, DWORD PTR _number$[ebp]
shl	edx, 16					
mov	DWORD PTR _result$[ebp], edx
mov	eax, DWORD PTR _scaling$[ebp]
mov	ecx, DWORD PTR _exponent$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN25@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _number$[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4-20]
cmp	eax, 32767				
jle	SHORT $LN24@cff_parse_
mov	edx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _power_tens[edx*4-16]
push	eax
mov	ecx, DWORD PTR _number$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
mov	edx, DWORD PTR _exponent$[ebp]
sub	edx, 4
mov	eax, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [eax], edx
jmp	SHORT $LN25@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
mov	edx, DWORD PTR _power_tens[ecx*4-20]
push	edx
mov	eax, DWORD PTR _number$[ebp]
push	eax
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
mov	ecx, DWORD PTR _exponent$[ebp]
sub	ecx, 5
mov	edx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [edx], ecx
jmp	$Exit$76
mov	eax, DWORD PTR _integer_length$[ebp]
add	eax, DWORD PTR _exponent$[ebp]
mov	DWORD PTR _integer_length$[ebp], eax
mov	ecx, DWORD PTR _fraction_length$[ebp]
sub	ecx, DWORD PTR _exponent$[ebp]
mov	DWORD PTR _fraction_length$[ebp], ecx
cmp	DWORD PTR _integer_length$[ebp], 5
jle	SHORT $LN21@cff_parse_
jmp	$Overflow$78
cmp	DWORD PTR _integer_length$[ebp], -5	
jge	SHORT $LN20@cff_parse_
jmp	$Underflow$77
cmp	DWORD PTR _integer_length$[ebp], 0
jge	SHORT $LN19@cff_parse_
mov	ecx, DWORD PTR _integer_length$[ebp]
neg	ecx
mov	eax, DWORD PTR _number$[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4]
mov	DWORD PTR _number$[ebp], eax
mov	edx, DWORD PTR _fraction_length$[ebp]
add	edx, DWORD PTR _integer_length$[ebp]
mov	DWORD PTR _fraction_length$[ebp], edx
cmp	DWORD PTR _fraction_length$[ebp], 10	
jne	SHORT $LN18@cff_parse_
mov	eax, DWORD PTR _number$[ebp]
cdq
mov	ecx, 10					
idiv	ecx
mov	DWORD PTR _number$[ebp], eax
mov	edx, DWORD PTR _fraction_length$[ebp]
sub	edx, 1
mov	DWORD PTR _fraction_length$[ebp], edx
cmp	DWORD PTR _fraction_length$[ebp], 0
jle	SHORT $LN17@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _number$[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4]
cmp	eax, 32767				
jle	SHORT $LN16@cff_parse_
jmp	SHORT $Exit$76
mov	edx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _power_tens[edx*4]
push	eax
mov	ecx, DWORD PTR _number$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $Exit$76
mov	edx, DWORD PTR _fraction_length$[ebp]
neg	edx
mov	eax, DWORD PTR _number$[ebp]
imul	eax, DWORD PTR _power_tens[edx*4]
mov	DWORD PTR _number$[ebp], eax
cmp	DWORD PTR _number$[ebp], 32767		
jle	SHORT $LN14@cff_parse_
jmp	SHORT $Overflow$78
mov	ecx, DWORD PTR _number$[ebp]
shl	ecx, 16					
mov	DWORD PTR _result$[ebp], ecx
cmp	DWORD PTR _sign$[ebp], 0
je	SHORT $LN13@cff_parse_
mov	edx, DWORD PTR _result$[ebp]
neg	edx
mov	DWORD PTR _result$[ebp], edx
mov	eax, DWORD PTR _result$[ebp]
jmp	$LN71@cff_parse_
mov	DWORD PTR _result$[ebp], 2147483647	
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN11@cff_parse_
push	OFFSET $SG9597
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN12@cff_parse_
jmp	SHORT $Exit$76
mov	DWORD PTR _result$[ebp], 0
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN7@cff_parse_
push	OFFSET $SG9602
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@cff_parse_
jmp	SHORT $Exit$76
mov	DWORD PTR _result$[ebp], 0
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN3@cff_parse_
push	OFFSET $SG9607
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN4@cff_parse_
jmp	$Exit$76
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_integer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _start$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _v$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _val$[ebp], 0
cmp	DWORD PTR _v$[ebp], 28			
jne	SHORT $LN16@cff_parse_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN15@cff_parse_
jmp	$Bad$19
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax]
or	edx, eax
movsx	ecx, dx
mov	DWORD PTR _val$[ebp], ecx
jmp	$Exit$20
cmp	DWORD PTR _v$[ebp], 29			
jne	SHORT $LN13@cff_parse_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN12@cff_parse_
jmp	$Bad$19
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
or	eax, edx
mov	DWORD PTR _val$[ebp], eax
jmp	$Exit$20
cmp	DWORD PTR _v$[ebp], 247			
jge	SHORT $LN10@cff_parse_
mov	eax, DWORD PTR _v$[ebp]
sub	eax, 139				
mov	DWORD PTR _val$[ebp], eax
jmp	SHORT $Exit$20
cmp	DWORD PTR _v$[ebp], 251			
jge	SHORT $LN8@cff_parse_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN7@cff_parse_
jmp	SHORT $Bad$19
mov	edx, DWORD PTR _v$[ebp]
sub	edx, 247				
shl	edx, 8
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
lea	edx, DWORD PTR [edx+ecx+108]
mov	DWORD PTR _val$[ebp], edx
jmp	SHORT $Exit$20
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN5@cff_parse_
jmp	SHORT $Bad$19
mov	ecx, DWORD PTR _v$[ebp]
sub	ecx, 251				
neg	ecx
shl	ecx, 8
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax]
sub	ecx, eax
sub	ecx, 108				
mov	DWORD PTR _val$[ebp], ecx
mov	eax, DWORD PTR _val$[ebp]
jmp	SHORT $LN17@cff_parse_
mov	DWORD PTR _val$[ebp], 0
mov	ecx, 4
imul	edx, ecx, 50
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN3@cff_parse_
push	OFFSET $SG9498
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN4@cff_parse_
jmp	SHORT $Exit$20
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_interface PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _module_interface$[ebp]
push	eax
push	OFFSET _cff_services
call	_ft_service_list_lookup
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN3@cff_get_in
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN4@cff_get_in
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN2@cff_get_in
xor	eax, eax
jmp	SHORT $LN4@cff_get_in
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@cff_get_in
xor	eax, eax
jmp	SHORT $LN4@cff_get_in
push	OFFSET $SG9448
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN6@cff_get_in
mov	esi, esp
mov	ecx, DWORD PTR _module_interface$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+32]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv80[ebp], eax
jmp	SHORT $LN7@cff_get_in
mov	DWORD PTR tv80[ebp], 0
mov	eax, DWORD PTR tv80[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_property_get PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
push	OFFSET $SG9397
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	$LN9@cff_proper
mov	edx, DWORD PTR _driver$[ebp]
add	edx, 36					
mov	DWORD PTR _darken_params$6[ebp], edx
mov	eax, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$5[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [eax+ecx], edx
mov	eax, 4
shl	eax, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [edx+ecx], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
imul	eax, edx, 3
mov	ecx, 4
imul	edx, ecx, 3
mov	ecx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
mov	ecx, 4
shl	ecx, 2
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
mov	ecx, 4
imul	edx, ecx, 6
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [eax+ecx], edx
mov	eax, 4
imul	ecx, eax, 7
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [edx+eax], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN10@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9403
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN7@cff_proper
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _hinting_engine$4[ebp], ecx
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$3[ebp], edx
mov	eax, DWORD PTR _val$3[ebp]
mov	ecx, DWORD PTR _hinting_engine$4[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN10@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9409
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@cff_proper
mov	eax, DWORD PTR _driver$[ebp]
mov	cl, BYTE PTR [eax+32]
mov	BYTE PTR _no_stem_darkening$2[ebp], cl
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$1[ebp], edx
mov	eax, DWORD PTR _val$1[ebp]
mov	cl, BYTE PTR _no_stem_darkening$2[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN10@cff_proper
mov	edx, 4
imul	eax, edx, 46
cmp	DWORD PTR _ft_trace_levels[eax], 0
jl	SHORT $LN3@cff_proper
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
push	OFFSET $SG9417
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@cff_proper
push	OFFSET $SG9418
push	701					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_property_set PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
push	OFFSET $SG9353
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	$LN13@cff_proper
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _darken_params$11[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x1$10[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _y1$9[ebp], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x2$8[ebp], eax
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _darken_params$11[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y2$7[ebp], ecx
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _darken_params$11[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _x3$6[ebp], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, DWORD PTR _darken_params$11[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _y3$5[ebp], edx
mov	eax, 4
imul	ecx, eax, 6
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x4$4[ebp], eax
mov	ecx, 4
imul	edx, ecx, 7
mov	eax, DWORD PTR _darken_params$11[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y4$3[ebp], ecx
cmp	DWORD PTR _x1$10[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _x2$8[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _x3$6[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _x4$4[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y1$9[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y2$7[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y3$5[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y4$3[ebp], 0
jl	SHORT $LN11@cff_proper
mov	edx, DWORD PTR _x1$10[ebp]
cmp	edx, DWORD PTR _x2$8[ebp]
jg	SHORT $LN11@cff_proper
mov	eax, DWORD PTR _x2$8[ebp]
cmp	eax, DWORD PTR _x3$6[ebp]
jg	SHORT $LN11@cff_proper
mov	ecx, DWORD PTR _x3$6[ebp]
cmp	ecx, DWORD PTR _x4$4[ebp]
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y1$9[ebp], 500		
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y2$7[ebp], 500		
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y3$5[ebp], 500		
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y4$3[ebp], 500		
jle	SHORT $LN12@cff_proper
push	OFFSET $SG9366
push	609					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN14@cff_proper
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _x1$10[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _y1$9[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _x2$8[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
imul	ecx, eax, 3
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR _y2$7[ebp]
mov	DWORD PTR [edx+ecx+36], eax
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR _x3$6[ebp]
mov	DWORD PTR [edx+ecx+36], eax
mov	ecx, 4
imul	edx, ecx, 5
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR _y3$5[ebp]
mov	DWORD PTR [eax+edx+36], ecx
mov	edx, 4
imul	eax, edx, 6
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _x4$4[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
imul	ecx, eax, 7
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR _y4$3[ebp]
mov	DWORD PTR [edx+ecx+36], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN14@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9369
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN9@cff_proper
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _hinting_engine$2[ebp], edx
mov	eax, DWORD PTR _hinting_engine$2[ebp]
cmp	DWORD PTR [eax], 1
je	SHORT $LN8@cff_proper
mov	DWORD PTR _error$[ebp], 7
jmp	SHORT $LN7@cff_proper
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _hinting_engine$2[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx+28], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN14@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9376
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@cff_proper
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _no_stem_darkening$1[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR _no_stem_darkening$1[ebp]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR [eax+32], dl
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN14@cff_proper
mov	eax, 4
imul	ecx, eax, 46
cmp	DWORD PTR _ft_trace_levels[ecx], 0
jl	SHORT $LN3@cff_proper
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
push	OFFSET $SG9383
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN4@cff_proper
push	OFFSET $SG9384
push	648					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
pop	edi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_cid_from_glyph_index PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
cmp	DWORD PTR _cff$[ebp], 0
je	SHORT $Fail$7
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1324				
mov	DWORD PTR _dict$1[ebp], edx
mov	eax, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [eax+132], 65535		
jne	SHORT $LN3@cff_get_ci
push	OFFSET $SG9332
push	549					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$7
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR _glyph_index$[ebp]
cmp	edx, DWORD PTR [ecx+12]
jbe	SHORT $LN2@cff_get_ci
push	OFFSET $SG9335
push	555					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$7
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+1160]
mov	edx, DWORD PTR _glyph_index$[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _c$2[ebp], eax
cmp	DWORD PTR _cid$[ebp], 0
je	SHORT $Fail$7
mov	ecx, DWORD PTR _cid$[ebp]
mov	edx, DWORD PTR _c$2[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_is_cid PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _is_cid$[ebp]
mov	BYTE PTR [edx], 0
cmp	DWORD PTR _cff$[ebp], 0
je	SHORT $LN2@cff_get_is
mov	eax, DWORD PTR _cff$[ebp]
add	eax, 1324				
mov	DWORD PTR _dict$1[ebp], eax
mov	ecx, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [ecx+132], 65535		
je	SHORT $LN2@cff_get_is
mov	edx, DWORD PTR _is_cid$[ebp]
mov	BYTE PTR [edx], 1
mov	eax, DWORD PTR _error$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_ros PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
cmp	DWORD PTR _cff$[ebp], 0
je	$Fail$16
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1324				
mov	DWORD PTR _dict$1[ebp], edx
mov	eax, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [eax+132], 65535		
jne	SHORT $LN12@cff_get_ro
push	OFFSET $SG9288
push	467					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail$16
cmp	DWORD PTR _registry$[ebp], 0
je	SHORT $LN11@cff_get_ro
mov	ecx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [ecx+2964], 0
jne	SHORT $LN10@cff_get_ro
mov	edx, DWORD PTR _dict$1[ebp]
mov	eax, DWORD PTR [edx+132]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _cff$[ebp]
mov	DWORD PTR [edx+2964], eax
mov	eax, DWORD PTR _registry$[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2964]
mov	DWORD PTR [eax], edx
cmp	DWORD PTR _ordering$[ebp], 0
je	SHORT $LN9@cff_get_ro
mov	eax, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [eax+2968], 0
jne	SHORT $LN8@cff_get_ro
mov	ecx, DWORD PTR _dict$1[ebp]
mov	edx, DWORD PTR [ecx+136]
push	edx
mov	eax, DWORD PTR _cff$[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	ecx, DWORD PTR _cff$[ebp]
mov	DWORD PTR [ecx+2968], eax
mov	edx, DWORD PTR _ordering$[ebp]
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+2968]
mov	DWORD PTR [edx], ecx
cmp	DWORD PTR _supplement$[ebp], 0
je	SHORT $Fail$16
mov	edx, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [edx+140], -2147483648	
jl	SHORT $LN4@cff_get_ro
mov	eax, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [eax+140], 2147483647		
jle	SHORT $LN6@cff_get_ro
mov	ecx, 4
imul	edx, ecx, 46
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN3@cff_get_ro
mov	eax, DWORD PTR _dict$1[ebp]
mov	ecx, DWORD PTR [eax+140]
push	ecx
push	OFFSET $SG9303
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@cff_get_ro
mov	eax, DWORD PTR _supplement$[ebp]
mov	ecx, DWORD PTR _dict$1[ebp]
mov	edx, DWORD PTR [ecx+140]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_cmap_info PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _charmap$[ebp]
mov	DWORD PTR _cmap$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
mov	eax, DWORD PTR _cmap_info$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _cmap_info$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _cmap$[ebp]
cmp	DWORD PTR [edx+12], OFFSET _cff_cmap_encoding_class_rec
je	SHORT $LN2@cff_get_cm
mov	eax, DWORD PTR _cmap$[ebp]
cmp	DWORD PTR [eax+12], OFFSET _cff_cmap_unicode_class_rec
je	SHORT $LN2@cff_get_cm
push	OFFSET $SG9265
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _sfnt$2[ebp], eax
push	OFFSET $SG9268
mov	edx, DWORD PTR _sfnt$2[ebp]
push	edx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR _service$1[ebp], eax
cmp	DWORD PTR _service$1[ebp], 0
je	SHORT $LN2@cff_get_cm
mov	eax, DWORD PTR _service$1[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@cff_get_cm
mov	esi, esp
mov	ecx, DWORD PTR _cmap_info$[ebp]
push	ecx
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
mov	eax, DWORD PTR _service$1[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_ps_name PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1304]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_ps_get_font_info PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _cff$[ebp], 0
je	$LN3@cff_ps_get
mov	edx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [edx+2960], 0
jne	$LN3@cff_ps_get
mov	eax, DWORD PTR _cff$[ebp]
add	eax, 1324				
mov	DWORD PTR _dict$3[ebp], eax
mov	DWORD PTR _font_info$2[ebp], 0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$1[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	32					
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _font_info$2[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cff_ps_get
jmp	$Fail$9
mov	edx, DWORD PTR _dict$3[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _dict$3[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
mov	ecx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _dict$3[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _dict$3[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
mov	ecx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _dict$3[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+20], edx
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	dl, BYTE PTR [ecx+24]
mov	BYTE PTR [eax+24], dl
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	dx, WORD PTR [ecx+32]
mov	WORD PTR [eax+26], dx
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	dx, WORD PTR [ecx+36]
mov	WORD PTR [eax+28], dx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [eax+2960], ecx
cmp	DWORD PTR _cff$[ebp], 0
je	SHORT $Fail$9
mov	edx, DWORD PTR _cff$[ebp]
mov	ecx, 8
mov	esi, DWORD PTR [edx+2960]
mov	edi, DWORD PTR _afont_info$[ebp]
rep movsd
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@cff_ps_get
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN7@cff_ps_get
DD	-12					
DD	4
DD	$LN6@cff_ps_get
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_ps_has_glyph_names PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 512				
jle	SHORT $LN3@cff_ps_has
mov	DWORD PTR tv67[ebp], 1
jmp	SHORT $LN4@cff_ps_has
mov	DWORD PTR tv67[ebp], 0
mov	eax, DWORD PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_name_index PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1152				
mov	DWORD PTR _charset$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
push	OFFSET $SG9194
mov	edx, DWORD PTR _module$2[ebp]
push	edx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR __tmp_$1[ebp], eax
mov	eax, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _psnames$[ebp], eax
xor	ecx, ecx
jne	SHORT $LN11@cff_get_na
cmp	DWORD PTR _psnames$[ebp], 0
jne	SHORT $LN8@cff_get_na
xor	eax, eax
jmp	$LN12@cff_get_na
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN7@cff_get_na
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jae	SHORT $LN5@cff_get_na
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _i$[ebp]
mov	dx, WORD PTR [eax+ecx*2]
mov	WORD PTR _sid$[ebp], dx
movzx	eax, WORD PTR _sid$[ebp]
cmp	eax, 390				
jle	SHORT $LN4@cff_get_na
movzx	ecx, WORD PTR _sid$[ebp]
sub	ecx, 391				
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_string
add	esp, 8
mov	DWORD PTR _name$[ebp], eax
jmp	SHORT $LN3@cff_get_na
movzx	eax, WORD PTR _sid$[ebp]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _psnames$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _name$[ebp], eax
cmp	DWORD PTR _name$[ebp], 0
jne	SHORT $LN2@cff_get_na
jmp	SHORT $LN6@cff_get_na
mov	eax, DWORD PTR _name$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN1@cff_get_na
mov	eax, DWORD PTR _i$[ebp]
jmp	SHORT $LN12@cff_get_na
jmp	$LN6@cff_get_na
xor	eax, eax
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_glyph_name PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _font$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+2956], 0
jne	SHORT $LN2@cff_get_gl
push	OFFSET $SG9167
call	_FT_Message
add	esp, 4
push	OFFSET $SG9168
push	246					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$5
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+1160]
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	ax, WORD PTR [ecx+edx*2]
mov	WORD PTR _sid$[ebp], ax
movzx	ecx, WORD PTR _sid$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _gname$[ebp], eax
cmp	DWORD PTR _gname$[ebp], 0
je	SHORT $LN1@cff_get_gl
mov	eax, DWORD PTR _buffer_max$[ebp]
push	eax
mov	ecx, DWORD PTR _gname$[ebp]
push	ecx
mov	edx, DWORD PTR _buffer$[ebp]
push	edx
call	_ft_mem_strcpyn
add	esp, 12					
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_advances PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _slot$[ebp], ecx
mov	edx, DWORD PTR _flags$[ebp]
or	edx, 256				
mov	DWORD PTR _flags$[ebp], edx
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@cff_get_ad
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN2@cff_get_ad
mov	edx, DWORD PTR _flags$[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_cff_glyph_load
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@cff_get_ad
jmp	SHORT $LN2@cff_get_ad
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 16					
je	SHORT $LN7@cff_get_ad
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+60]
mov	DWORD PTR tv82[ebp], eax
jmp	SHORT $LN8@cff_get_ad
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+56]
mov	DWORD PTR tv82[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN3@cff_get_ad
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_glyph_load PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cffslot$[ebp]
mov	DWORD PTR _slot$[ebp], eax
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR _size$[ebp], ecx
cmp	DWORD PTR _slot$[ebp], 0
jne	SHORT $LN8@cff_glyph_
push	OFFSET $SG9119
push	165					
push	37					
call	_FT_Throw
add	esp, 12					
or	eax, 37					
jmp	$LN10@cff_glyph_
mov	edx, 4
imul	eax, edx, 46
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN7@cff_glyph_
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
push	OFFSET $SG9124
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN8@cff_glyph_
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN4@cff_glyph_
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 3
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 1
je	SHORT $LN3@cff_glyph_
mov	DWORD PTR _size$[ebp], 0
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN2@cff_glyph_
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR _cffslot$[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN2@cff_glyph_
push	OFFSET $SG9130
push	181					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN10@cff_glyph_
mov	edx, DWORD PTR _load_flags$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_cff_slot_load
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR _sfnt$[ebp], edx
mov	eax, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx+4], 0
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN1@cff_get_ke
mov	esi, esp
mov	edx, DWORD PTR _right_glyph$[ebp]
push	edx
mov	eax, DWORD PTR _left_glyph$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+84]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx], eax
xor	eax, eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parser_run PROC
push	ebp
mov	ebp, esp
sub	esp, 68					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-68]
mov	ecx, 17					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _start$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _library$[ebp], edx
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 16					
mov	edx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [edx+404], ecx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR _start$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _parser$[ebp]
mov	eax, DWORD PTR _limit$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR _start$[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _p$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	$Exit$98
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _v$8[ebp], edx
cmp	DWORD PTR _v$8[ebp], 27			
jb	$LN89@cff_parser
cmp	DWORD PTR _v$8[ebp], 31			
je	$LN89@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR [ecx+404]
sub	edx, eax
sar	edx, 2
cmp	edx, 96					
jl	SHORT $LN88@cff_parser
jmp	$Stack_Overflow$99
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+404]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+404]
add	ecx, 4
mov	edx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [edx+404], ecx
cmp	DWORD PTR _v$8[ebp], 30			
jne	SHORT $LN87@cff_parser
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jb	SHORT $LN84@cff_parser
jmp	$Exit$98
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
sar	edx, 4
mov	DWORD PTR _v$8[ebp], edx
cmp	DWORD PTR _v$8[ebp], 15			
jne	SHORT $LN83@cff_parser
jmp	SHORT $LN85@cff_parser
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
and	eax, 15					
mov	DWORD PTR _v$8[ebp], eax
cmp	DWORD PTR _v$8[ebp], 15			
jne	SHORT $LN82@cff_parser
jmp	SHORT $LN85@cff_parser
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
jmp	SHORT $LN86@cff_parser
jmp	SHORT $LN76@cff_parser
cmp	DWORD PTR _v$8[ebp], 28			
jne	SHORT $LN80@cff_parser
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
jmp	SHORT $LN76@cff_parser
cmp	DWORD PTR _v$8[ebp], 29			
jne	SHORT $LN78@cff_parser
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN76@cff_parser
cmp	DWORD PTR _v$8[ebp], 246		
jbe	SHORT $LN76@cff_parser
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
jmp	$LN75@cff_parser
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+404]
sub	ecx, edx
sar	ecx, 2
mov	DWORD PTR _num_args$6[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
mov	eax, DWORD PTR [edx+404]
mov	ecx, DWORD PTR _p$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _v$8[ebp]
mov	DWORD PTR _code$7[ebp], edx
cmp	DWORD PTR _v$8[ebp], 12			
jne	SHORT $LN74@cff_parser
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jb	SHORT $LN73@cff_parser
jmp	$Syntax_Error$100
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
or	edx, 256				
mov	DWORD PTR _code$7[ebp], edx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR _code$7[ebp]
or	ecx, DWORD PTR [eax+408]
mov	DWORD PTR _code$7[ebp], ecx
mov	DWORD PTR _field$5[ebp], OFFSET _cff_field_handlers
jmp	SHORT $LN72@cff_parser
mov	edx, DWORD PTR _field$5[ebp]
add	edx, 32					
mov	DWORD PTR _field$5[ebp], edx
mov	eax, DWORD PTR _field$5[ebp]
cmp	DWORD PTR [eax], 0
je	$Found$101
mov	ecx, DWORD PTR _field$5[ebp]
mov	edx, DWORD PTR [ecx+4]
cmp	edx, DWORD PTR _code$7[ebp]
jne	$LN69@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	edx, DWORD PTR _field$5[ebp]
add	ecx, DWORD PTR [edx+8]
mov	DWORD PTR _q$3[ebp], ecx
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN65@cff_parser
mov	edx, DWORD PTR _field$5[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
push	OFFSET $SG10117
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN68@cff_parser
mov	edx, DWORD PTR _field$5[ebp]
cmp	DWORD PTR [edx], 6
je	SHORT $LN64@cff_parser
cmp	DWORD PTR _num_args$6[ebp], 1
jae	SHORT $LN64@cff_parser
jmp	$Stack_Underflow$102
mov	eax, DWORD PTR _field$5[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv170[ebp], ecx
mov	edx, DWORD PTR tv170[ebp]
sub	edx, 1
mov	DWORD PTR tv170[ebp], edx
cmp	DWORD PTR tv170[ebp], 5
ja	$LN2@cff_parser
mov	eax, DWORD PTR tv170[ebp]
jmp	DWORD PTR $LN96@cff_parser[eax*4]
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 16					
push	ecx
call	_cff_parse_num
add	esp, 4
mov	DWORD PTR _val$4[ebp], eax
jmp	SHORT $Store_Number$103
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
push	edx
call	_cff_parse_fixed
add	esp, 4
mov	DWORD PTR _val$4[ebp], eax
jmp	SHORT $Store_Number$103
push	3
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
push	eax
call	_cff_parse_fixed_scaled
add	esp, 8
mov	DWORD PTR _val$4[ebp], eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	dl, BYTE PTR [ecx+12]
mov	BYTE PTR tv183[ebp], dl
cmp	BYTE PTR tv183[ebp], 1
je	SHORT $LN56@cff_parser
cmp	BYTE PTR tv183[ebp], 2
je	SHORT $LN55@cff_parser
cmp	BYTE PTR tv183[ebp], 4
je	SHORT $LN54@cff_parser
jmp	SHORT $LN53@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	cl, BYTE PTR _val$4[ebp]
mov	BYTE PTR [eax], cl
jmp	SHORT $LN57@cff_parser
mov	edx, DWORD PTR _q$3[ebp]
mov	ax, WORD PTR _val$4[ebp]
mov	WORD PTR [edx], ax
jmp	SHORT $LN57@cff_parser
mov	ecx, DWORD PTR _q$3[ebp]
mov	edx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN57@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	ecx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _field$5[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv190[ebp], eax
mov	ecx, DWORD PTR tv190[ebp]
sub	ecx, 1
mov	DWORD PTR tv190[ebp], ecx
cmp	DWORD PTR tv190[ebp], 4
ja	$LN27@cff_parser
mov	edx, DWORD PTR tv190[ebp]
jmp	DWORD PTR $LN97@cff_parser[edx*4]
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN46@cff_parser
cmp	DWORD PTR _val$4[ebp], 0
je	SHORT $LN94@cff_parser
mov	DWORD PTR tv195[ebp], OFFSET $SG10152
jmp	SHORT $LN95@cff_parser
mov	DWORD PTR tv195[ebp], OFFSET $SG10153
mov	edx, DWORD PTR tv195[ebp]
push	edx
push	OFFSET $SG10154
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN50@cff_parser
jmp	$LN51@cff_parser
mov	ecx, 4
imul	edx, ecx, 50
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN41@cff_parser
mov	eax, DWORD PTR _val$4[ebp]
push	eax
push	OFFSET $SG10160
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN45@cff_parser
jmp	$LN51@cff_parser
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN36@cff_parser
mov	ecx, DWORD PTR _val$4[ebp]
push	ecx
push	OFFSET $SG10166
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN40@cff_parser
jmp	SHORT $LN51@cff_parser
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN31@cff_parser
cvtsi2sd xmm0, DWORD PTR _val$4[ebp]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10173
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN35@cff_parser
jmp	SHORT $LN51@cff_parser
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN26@cff_parser
cvtsi2sd xmm0, DWORD PTR _val$4[ebp]
divsd	xmm0, QWORD PTR __real@40f0000000000000
divsd	xmm0, QWORD PTR __real@408f400000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10180
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN30@cff_parser
jmp	$LN62@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	edx, DWORD PTR _field$5[ebp]
add	ecx, DWORD PTR [edx+24]
mov	DWORD PTR _qcount$2[ebp], ecx
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	DWORD PTR _data$1[ebp], eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	edx, DWORD PTR _num_args$6[ebp]
cmp	edx, DWORD PTR [ecx+20]
jbe	SHORT $LN23@cff_parser
mov	eax, DWORD PTR _field$5[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _num_args$6[ebp], ecx
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN19@cff_parser
push	OFFSET $SG10191
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN23@cff_parser
mov	edx, DWORD PTR _qcount$2[ebp]
mov	al, BYTE PTR _num_args$6[ebp]
mov	BYTE PTR [edx], al
mov	DWORD PTR _val$4[ebp], 0
cmp	DWORD PTR _num_args$6[ebp], 0
jbe	$LN17@cff_parser
mov	ecx, DWORD PTR _data$1[ebp]
mov	DWORD PTR tv245[ebp], ecx
mov	edx, DWORD PTR _data$1[ebp]
add	edx, 4
mov	DWORD PTR _data$1[ebp], edx
mov	eax, DWORD PTR tv245[ebp]
push	eax
call	_cff_parse_num
add	esp, 4
add	eax, DWORD PTR _val$4[ebp]
mov	DWORD PTR _val$4[ebp], eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	dl, BYTE PTR [ecx+12]
mov	BYTE PTR tv250[ebp], dl
cmp	BYTE PTR tv250[ebp], 1
je	SHORT $LN14@cff_parser
cmp	BYTE PTR tv250[ebp], 2
je	SHORT $LN13@cff_parser
cmp	BYTE PTR tv250[ebp], 4
je	SHORT $LN12@cff_parser
jmp	SHORT $LN11@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	cl, BYTE PTR _val$4[ebp]
mov	BYTE PTR [eax], cl
jmp	SHORT $LN15@cff_parser
mov	edx, DWORD PTR _q$3[ebp]
mov	ax, WORD PTR _val$4[ebp]
mov	WORD PTR [edx], ax
jmp	SHORT $LN15@cff_parser
mov	ecx, DWORD PTR _q$3[ebp]
mov	edx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN15@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	ecx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN7@cff_parser
mov	ecx, DWORD PTR _val$4[ebp]
push	ecx
push	OFFSET $SG10215
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN15@cff_parser
mov	eax, DWORD PTR _field$5[ebp]
movzx	ecx, BYTE PTR [eax+12]
add	ecx, DWORD PTR _q$3[ebp]
mov	DWORD PTR _q$3[ebp], ecx
mov	edx, DWORD PTR _num_args$6[ebp]
sub	edx, 1
mov	DWORD PTR _num_args$6[ebp], edx
jmp	$LN18@cff_parser
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN3@cff_parser
push	OFFSET $SG10220
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN17@cff_parser
jmp	SHORT $LN62@cff_parser
mov	esi, esp
mov	eax, DWORD PTR _parser$[ebp]
push	eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	edx, DWORD PTR [ecx+16]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@cff_parser
jmp	SHORT $Exit$98
jmp	SHORT $Found$101
jmp	$LN71@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	ecx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [ecx+404], eax
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
jmp	$LN91@cff_parser
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN92@cff_parser
push	OFFSET $SG10224
push	1160					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$98
push	OFFSET $SG10225
push	1164					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$98
push	OFFSET $SG10226
push	1168					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$98
pop	edi
pop	esi
add	esp, 68					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	$LN61@cff_parser
DD	$LN60@cff_parser
DD	$LN59@cff_parser
DD	$LN61@cff_parser
DD	$LN61@cff_parser
DD	$LN24@cff_parser
DD	$LN40@cff_parser
DD	$LN35@cff_parser
DD	$LN30@cff_parser
DD	$LN45@cff_parser
DD	$LN50@cff_parser
ENDP
_cff_parser_init PROC
push	ebp
mov	ebp, esp
push	416					
push	0
mov	eax, DWORD PTR _parser$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 16					
mov	edx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [edx+404], ecx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR _code$[ebp]
mov	DWORD PTR [eax+408], ecx
mov	edx, DWORD PTR _parser$[ebp]
mov	eax, DWORD PTR _object$[ebp]
mov	DWORD PTR [edx+412], eax
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_fd_select_get PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	BYTE PTR _fd$[ebp], 0
mov	eax, DWORD PTR _fdselect$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR tv66[ebp], cl
cmp	BYTE PTR tv66[ebp], 0
je	SHORT $LN9@cff_fd_sel
cmp	BYTE PTR tv66[ebp], 3
je	SHORT $LN8@cff_fd_sel
jmp	$LN10@cff_fd_sel
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _glyph_index$[ebp]
mov	dl, BYTE PTR [eax+ecx]
mov	BYTE PTR _fd$[ebp], dl
jmp	$LN10@cff_fd_sel
mov	eax, DWORD PTR _fdselect$[ebp]
mov	ecx, DWORD PTR _glyph_index$[ebp]
sub	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _fdselect$[ebp]
cmp	ecx, DWORD PTR [edx+20]
jae	SHORT $LN7@cff_fd_sel
mov	eax, DWORD PTR _fdselect$[ebp]
mov	cl, BYTE PTR [eax+24]
mov	BYTE PTR _fd$[ebp], cl
jmp	$LN10@cff_fd_sel
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _p$5[ebp], eax
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	edx, DWORD PTR _p$5[ebp]
add	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _p_limit$4[ebp], edx
mov	eax, DWORD PTR _p$5[ebp]
add	eax, 2
mov	DWORD PTR _p$5[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$5[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$5[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movzx	eax, cx
mov	DWORD PTR _first$2[ebp], eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
cmp	ecx, DWORD PTR _first$2[ebp]
jae	SHORT $LN3@cff_fd_sel
jmp	$LN10@cff_fd_sel
mov	edx, DWORD PTR _p$5[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR _fd2$3[ebp], al
mov	ecx, DWORD PTR _p$5[ebp]
add	ecx, 1
mov	DWORD PTR _p$5[ebp], ecx
mov	edx, DWORD PTR _p$5[ebp]
add	edx, 2
mov	DWORD PTR _p$5[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$5[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$5[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	DWORD PTR _limit$1[ebp], edx
mov	eax, DWORD PTR _glyph_index$[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	SHORT $LN2@cff_fd_sel
mov	cl, BYTE PTR _fd2$3[ebp]
mov	BYTE PTR _fd$[ebp], cl
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR _first$2[ebp]
mov	DWORD PTR [edx+16], eax
mov	ecx, DWORD PTR _limit$1[ebp]
sub	ecx, DWORD PTR _first$2[ebp]
mov	edx, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _fdselect$[ebp]
mov	cl, BYTE PTR _fd2$3[ebp]
mov	BYTE PTR [eax+24], cl
jmp	SHORT $LN10@cff_fd_sel
mov	edx, DWORD PTR _limit$1[ebp]
mov	DWORD PTR _first$2[ebp], edx
mov	eax, DWORD PTR _p$5[ebp]
cmp	eax, DWORD PTR _p_limit$4[ebp]
jb	$LN6@cff_fd_sel
mov	al, BYTE PTR _fd$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_font_done PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 84					
push	edx
call	_cff_index_done
add	esp, 4
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1208				
push	eax
call	_cff_index_done
add	esp, 4
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 20					
push	ecx
call	_cff_index_done
add	esp, 4
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1176				
push	edx
call	_cff_index_done
add	esp, 4
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+1896], 0
jbe	SHORT $LN26@cff_font_d
mov	DWORD PTR _idx$[ebp], 0
jmp	SHORT $LN25@cff_font_d
mov	ecx, DWORD PTR _idx$[ebp]
add	ecx, 1
mov	DWORD PTR _idx$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
cmp	eax, DWORD PTR [edx+1896]
jae	SHORT $LN22@cff_font_d
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+1900]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_cff_subfont_done
add	esp, 8
jmp	SHORT $LN24@cff_font_d
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+eax+1900]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+edx+1900], 0
xor	ecx, ecx
jne	SHORT $LN22@cff_font_d
mov	edx, DWORD PTR _font$[ebp]
add	edx, 116				
push	edx
call	_cff_encoding_done
add	esp, 4
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1152				
push	edx
call	_cff_charset_done
add	esp, 8
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1324				
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_cff_subfont_done
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 2924				
push	ecx
call	_CFF_Done_FD_Select
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+2960]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+2960], 0
xor	eax, eax
jne	SHORT $LN19@cff_font_d
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+1304]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+1304], 0
xor	edx, edx
jne	SHORT $LN16@cff_font_d
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+1308]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+1308], 0
xor	ecx, ecx
jne	SHORT $LN13@cff_font_d
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+1316]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+1316], 0
xor	eax, eax
jne	SHORT $LN10@cff_font_d
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+1320]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+1320], 0
xor	edx, edx
jne	SHORT $LN7@cff_font_d
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+2976], 0
je	SHORT $LN27@cff_font_d
mov	esi, esp
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2972]
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+2976]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+2972]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+2972], 0
xor	eax, eax
jne	SHORT $LN3@cff_font_d
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_font_load PROC
push	ebp
mov	ebp, esp
sub	esp, 120				
push	edi
lea	edi, DWORD PTR [ebp-120]
mov	ecx, 30					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
push	2980					
push	0
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_memset
add	esp, 12					
push	32					
push	0
lea	eax, DWORD PTR _string_index$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1324				
mov	DWORD PTR _dict$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _base_offset$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
push	OFFSET ?cff_header_fields@?1??cff_font_load@@9@9
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN50@cff_font_l
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
movzx	ecx, BYTE PTR [eax+16]
cmp	ecx, 1
jne	SHORT $LN47@cff_font_l
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+18]
cmp	eax, 4
jl	SHORT $LN47@cff_font_l
mov	ecx, DWORD PTR _font$[ebp]
movzx	edx, BYTE PTR [ecx+19]
cmp	edx, 4
jle	SHORT $LN49@cff_font_l
mov	eax, 4
imul	ecx, eax, 48
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN46@cff_font_l
push	OFFSET $SG10966
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN47@cff_font_l
push	OFFSET $SG10967
push	1471					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
movzx	ecx, BYTE PTR [eax+18]
sub	ecx, 4
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@cff_font_l
jmp	$Exit$60
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 20					
push	ecx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN41@cff_font_l
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1208				
push	eax
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN41@cff_font_l
push	1
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
lea	edx, DWORD PTR _string_index$[ebp]
push	edx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN41@cff_font_l
push	1
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 84					
push	ecx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN41@cff_font_l
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1320				
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1316				
push	eax
lea	ecx, DWORD PTR _string_index$[ebp]
push	ecx
call	_cff_index_get_pointers
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN42@cff_font_l
jmp	$Exit$60
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR _string_index$[ebp+8]
mov	DWORD PTR [edx+1312], eax
movzx	ecx, BYTE PTR _pure_cff$[ebp]
test	ecx, ecx
je	SHORT $LN40@cff_font_l
mov	edx, DWORD PTR _face_index$[ebp]
mov	DWORD PTR _subfont_index$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _subfont_index$[ebp]
cmp	ecx, DWORD PTR [eax+28]
jl	SHORT $LN39@cff_font_l
mov	edx, DWORD PTR _subfont_index$[ebp]
push	edx
push	OFFSET $SG10975
call	_FT_Message
add	esp, 8
push	OFFSET $SG10976
push	1505					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+8], edx
jmp	SHORT $LN38@cff_font_l
mov	DWORD PTR _subfont_index$[ebp], 0
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+28], 1
jbe	SHORT $LN38@cff_font_l
push	OFFSET $SG10979
call	_FT_Message
add	esp, 4
push	OFFSET $SG10980
push	1521					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN35@cff_font_l
jmp	$Exit$60
mov	ecx, 4
imul	edx, ecx, 48
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN34@cff_font_l
push	OFFSET $SG10986
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN35@cff_font_l
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
mov	edx, DWORD PTR _base_offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _subfont_index$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1208				
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1324				
push	eax
call	_cff_subfont_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@cff_font_l
jmp	$Exit$60
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+112]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN30@cff_font_l
jmp	$Exit$60
push	0
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1176				
push	edx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN29@cff_font_l
jmp	$Exit$60
mov	eax, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [eax+132], 65535		
je	$LN28@cff_font_l
mov	DWORD PTR _sub$3[ebp], 0
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+164]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@cff_font_l
jmp	$Exit$60
push	0
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
lea	edx, DWORD PTR _fd_index$4[ebp]
push	edx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@cff_font_l
jmp	$Exit$60
cmp	DWORD PTR _fd_index$4[ebp+8], 256	
jbe	SHORT $LN25@cff_font_l
mov	eax, 4
imul	ecx, eax, 48
cmp	DWORD PTR _ft_trace_levels[ecx], 0
jl	SHORT $LN23@cff_font_l
push	OFFSET $SG11004
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN24@cff_font_l
jmp	$Fail_CID$61
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _fd_index$4[ebp+8]
mov	DWORD PTR [eax+1896], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _fd_index$4[ebp+8]
push	eax
push	0
push	572					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _sub$3[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@cff_font_l
jmp	$Fail_CID$61
mov	DWORD PTR _idx$2[ebp], 0
jmp	SHORT $LN19@cff_font_l
mov	edx, DWORD PTR _idx$2[ebp]
add	edx, 1
mov	DWORD PTR _idx$2[ebp], edx
mov	eax, DWORD PTR _idx$2[ebp]
cmp	eax, DWORD PTR _fd_index$4[ebp+8]
jae	SHORT $LN17@cff_font_l
imul	ecx, DWORD PTR _idx$2[ebp], 572
add	ecx, DWORD PTR _sub$3[ebp]
mov	edx, DWORD PTR _idx$2[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+edx*4+1900], ecx
jmp	SHORT $LN18@cff_font_l
mov	DWORD PTR _idx$2[ebp], 0
jmp	SHORT $LN16@cff_font_l
mov	ecx, DWORD PTR _idx$2[ebp]
add	ecx, 1
mov	DWORD PTR _idx$2[ebp], ecx
mov	edx, DWORD PTR _idx$2[ebp]
cmp	edx, DWORD PTR _fd_index$4[ebp+8]
jae	SHORT $LN14@cff_font_l
mov	eax, DWORD PTR _idx$2[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1900]
mov	DWORD PTR _sub$3[ebp], edx
mov	eax, 4
imul	ecx, eax, 48
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN12@cff_font_l
mov	edx, DWORD PTR _idx$2[ebp]
push	edx
push	OFFSET $SG11019
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN13@cff_font_l
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
mov	edx, DWORD PTR _base_offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$2[ebp]
push	ecx
lea	edx, DWORD PTR _fd_index$4[ebp]
push	edx
mov	eax, DWORD PTR _sub$3[ebp]
push	eax
call	_cff_subfont_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@cff_font_l
jmp	SHORT $Fail_CID$61
jmp	SHORT $LN15@cff_font_l
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+168]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+1184]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 2924				
push	eax
call	_CFF_Load_FD_Select
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
lea	ecx, DWORD PTR _fd_index$4[ebp]
push	ecx
call	_cff_index_done
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@cff_font_l
jmp	$Exit$60
jmp	SHORT $LN7@cff_font_l
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+1896], 0
mov	eax, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [eax+112], 0
jne	SHORT $LN6@cff_font_l
push	OFFSET $SG11024
call	_FT_Message
add	esp, 4
push	OFFSET $SG11025
push	1610					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+1184]
mov	DWORD PTR [ecx+12], eax
push	0
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 1308				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 84					
push	edx
call	_cff_index_get_pointers
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_font_l
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+12], 0
jbe	$LN4@cff_font_l
mov	ecx, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [ecx+132], 65535		
je	SHORT $LN53@cff_font_l
movzx	edx, BYTE PTR _pure_cff$[ebp]
test	edx, edx
je	SHORT $LN53@cff_font_l
mov	BYTE PTR tv308[ebp], 1
jmp	SHORT $LN54@cff_font_l
mov	BYTE PTR tv308[ebp], 0
mov	al, BYTE PTR tv308[ebp]
mov	BYTE PTR _invert$1[ebp], al
movzx	ecx, BYTE PTR _invert$1[ebp]
push	ecx
mov	edx, DWORD PTR _dict$[ebp]
mov	eax, DWORD PTR [edx+104]
push	eax
mov	ecx, DWORD PTR _base_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1152				
push	edx
call	_cff_charset_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@cff_font_l
jmp	SHORT $Exit$60
mov	eax, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [eax+132], 65535		
jne	SHORT $LN4@cff_font_l
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR [ecx+108]
push	edx
mov	eax, DWORD PTR _base_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 1152				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 116				
push	edx
call	_cff_encoding_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_font_l
jmp	SHORT $Exit$60
mov	eax, DWORD PTR _subfont_index$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cff_index_get_name
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+1304], eax
lea	eax, DWORD PTR _string_index$[ebp]
push	eax
call	_cff_index_done
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN59@cff_font_l
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 120				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	3
DD	$LN58@cff_font_l
DD	-8					
DD	4
DD	$LN55@cff_font_l
DD	-60					
DD	32					
DD	$LN56@cff_font_l
DD	-104					
DD	32					
DD	$LN57@cff_font_l
DB	102					
DB	100					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_charset_cid_to_gindex PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR _cid$[ebp]
cmp	ecx, DWORD PTR [eax+16]
ja	SHORT $LN1@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR _cid$[ebp]
movzx	edx, WORD PTR [eax+ecx*2]
mov	DWORD PTR _result$[ebp], edx
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_index_get_name PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _font$[ebp]
add	eax, 20					
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _name$[ebp], 0
lea	ecx, DWORD PTR _byte_len$[ebp]
push	ecx
lea	edx, DWORD PTR _bytes$[ebp]
push	edx
mov	eax, DWORD PTR _element$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_access_element
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cff_index_
jmp	SHORT $Exit$10
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _byte_len$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _name$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@cff_index_
mov	edx, DWORD PTR _byte_len$[ebp]
push	edx
mov	eax, DWORD PTR _bytes$[ebp]
push	eax
mov	ecx, DWORD PTR _name$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _name$[ebp]
add	edx, DWORD PTR _byte_len$[ebp]
mov	BYTE PTR [edx], 0
lea	eax, DWORD PTR _bytes$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_forget_element
add	esp, 8
mov	eax, DWORD PTR _name$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN8@cff_index_
DD	-16					
DD	4
DD	$LN5@cff_index_
DD	-28					
DD	4
DD	$LN6@cff_index_
DD	-40					
DD	4
DD	$LN7@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
DB	98					
DB	121					
DB	116					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	98					
DB	121					
DB	116					
DB	101					
DB	115					
DB	0
ENDP
_cff_index_forget_element PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax+28], 0
jne	SHORT $LN2@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _stream$1[ebp], edx
mov	eax, DWORD PTR _pbytes$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$1[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_index_access_element PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _idx$[ebp], 0
je	$LN24@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+8]
cmp	ecx, DWORD PTR _element$[ebp]
jbe	$LN24@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _stream$4[ebp], eax
mov	DWORD PTR _off2$2[ebp], 0
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+24], 0
jne	$LN23@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
movzx	eax, BYTE PTR [edx+12]
imul	eax, DWORD PTR _element$[ebp]
mov	DWORD PTR _pos$1[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _pos$1[ebp]
lea	ecx, DWORD PTR [edx+eax+3]
push	ecx
mov	edx, DWORD PTR _stream$4[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN22@cff_index_
jmp	$Exit$30
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_read_offset
add	esp, 8
mov	DWORD PTR _off1$3[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@cff_index_
jmp	$Exit$30
cmp	DWORD PTR _off1$3[ebp], 0
je	SHORT $LN20@cff_index_
mov	edx, DWORD PTR _element$[ebp]
add	edx, 1
mov	DWORD PTR _element$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_read_offset
add	esp, 8
mov	DWORD PTR _off2$2[ebp], eax
cmp	DWORD PTR _off2$2[ebp], 0
jne	SHORT $LN20@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _element$[ebp]
cmp	eax, DWORD PTR [edx+8]
jb	SHORT $LN19@cff_index_
jmp	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _element$[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
mov	DWORD PTR _off1$3[ebp], ecx
cmp	DWORD PTR _off1$3[ebp], 0
je	SHORT $LN15@cff_index_
mov	edx, DWORD PTR _element$[ebp]
add	edx, 1
mov	DWORD PTR _element$[ebp], edx
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _element$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
mov	DWORD PTR _off2$2[ebp], eax
cmp	DWORD PTR _off2$2[ebp], 0
jne	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _element$[ebp]
cmp	edx, DWORD PTR [ecx+8]
jb	SHORT $LN13@cff_index_
mov	eax, DWORD PTR _stream$4[ebp]
mov	ecx, DWORD PTR [eax+4]
add	ecx, 1
cmp	DWORD PTR _off2$2[ebp], ecx
ja	SHORT $LN8@cff_index_
mov	edx, DWORD PTR _stream$4[ebp]
mov	eax, DWORD PTR [edx+4]
sub	eax, DWORD PTR _off2$2[ebp]
add	eax, 1
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+16], eax
jbe	SHORT $LN9@cff_index_
mov	edx, DWORD PTR _stream$4[ebp]
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+16]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _off2$2[ebp]
push	edx
push	OFFSET $SG10456
call	_FT_Message
add	esp, 12					
mov	eax, DWORD PTR _stream$4[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+16]
add	edx, 1
mov	DWORD PTR _off2$2[ebp], edx
cmp	DWORD PTR _off1$3[ebp], 0
je	SHORT $LN7@cff_index_
mov	eax, DWORD PTR _off2$2[ebp]
cmp	eax, DWORD PTR _off1$3[ebp]
jbe	SHORT $LN7@cff_index_
mov	ecx, DWORD PTR _off2$2[ebp]
sub	ecx, DWORD PTR _off1$3[ebp]
mov	edx, DWORD PTR _pbyte_len$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax+28], 0
je	SHORT $LN6@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _off1$3[ebp]
lea	ecx, DWORD PTR [edx+eax-1]
mov	edx, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN5@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _off1$3[ebp]
lea	eax, DWORD PTR [ecx+edx-1]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@cff_index_
mov	edx, DWORD PTR _pbytes$[ebp]
push	edx
mov	eax, DWORD PTR _off2$2[ebp]
sub	eax, DWORD PTR _off1$3[ebp]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_index_
jmp	SHORT $Exit$30
jmp	SHORT $LN2@cff_index_
mov	edx, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _pbyte_len$[ebp]
mov	DWORD PTR [eax], 0
jmp	SHORT $Exit$30
push	OFFSET $SG10467
push	560					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN29@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN28@cff_index_
DD	-8					
DD	4
DD	$LN27@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_get_sid_string PROC
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR _sid$[ebp], 65535		
jne	SHORT $LN3@cff_index_
xor	eax, eax
jmp	SHORT $LN4@cff_index_
cmp	DWORD PTR _sid$[ebp], 390		
jbe	SHORT $LN2@cff_index_
mov	eax, DWORD PTR _sid$[ebp]
sub	eax, 391				
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cff_index_get_string
add	esp, 8
jmp	SHORT $LN4@cff_index_
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+2956], 0
jne	SHORT $LN1@cff_index_
xor	eax, eax
jmp	SHORT $LN4@cff_index_
mov	esi, esp
mov	eax, DWORD PTR _sid$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_index_get_string PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _element$[ebp]
cmp	ecx, DWORD PTR [eax+1312]
jae	SHORT $LN3@cff_index_
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+1316]
mov	ecx, DWORD PTR _element$[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR tv69[ebp], edx
jmp	SHORT $LN4@cff_index_
mov	DWORD PTR tv69[ebp], 0
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_standard_encoding PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _charcode$[ebp], 256		
jae	SHORT $LN3@cff_get_st
mov	eax, DWORD PTR _charcode$[ebp]
movzx	ecx, WORD PTR _cff_standard_encoding[eax*2]
mov	DWORD PTR tv68[ebp], ecx
jmp	SHORT $LN4@cff_get_st
mov	DWORD PTR tv68[ebp], 0
mov	ax, WORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_slot_load PROC
push	ebp
mov	ebp, esp
sub	esp, 1228				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-1228]
mov	ecx, 307				
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	BYTE PTR _force_scaling$[ebp], 0
mov	ecx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [ecx+1456], 65535		
je	SHORT $LN53@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [edx+1164], 0
je	SHORT $LN53@cff_slot_l
cmp	DWORD PTR _glyph_index$[ebp], 0
je	SHORT $LN52@cff_slot_l
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 1152				
push	ecx
call	_cff_charset_cid_to_gindex
add	esp, 8
mov	DWORD PTR _glyph_index$[ebp], eax
cmp	DWORD PTR _glyph_index$[ebp], 0
jne	SHORT $LN52@cff_slot_l
push	OFFSET $SG12224
push	2632					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN54@cff_slot_l
jmp	SHORT $LN50@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR _glyph_index$[ebp]
cmp	eax, DWORD PTR [edx+12]
jb	SHORT $LN50@cff_slot_l
push	OFFSET $SG12227
push	2636					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN54@cff_slot_l
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 1024				
je	SHORT $LN48@cff_slot_l
mov	edx, DWORD PTR _load_flags$[ebp]
or	edx, 3
mov	DWORD PTR _load_flags$[ebp], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+164], 65536		
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+168], 65536		
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN47@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+164], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR [edx+168], ecx
cmp	DWORD PTR _size$[ebp], 0
je	$LN46@cff_slot_l
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _cff_face$26[ebp], eax
mov	ecx, DWORD PTR _cff_face$26[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR _sfnt$25[ebp], edx
mov	eax, DWORD PTR _cff_face$26[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$24[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [edx+44], -1
je	$LN46@cff_slot_l
mov	eax, DWORD PTR _sfnt$25[ebp]
cmp	DWORD PTR [eax+96], 0
je	$LN46@cff_slot_l
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 8
jne	$LN46@cff_slot_l
mov	esi, esp
lea	edx, DWORD PTR _metrics$23[ebp]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 76					
push	eax
mov	ecx, DWORD PTR _stream$24[ebp]
push	ecx
mov	edx, DWORD PTR _load_flags$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+44]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt$25[ebp]
mov	edx, DWORD PTR [ecx+72]
call	edx
add	esp, 28					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN46@cff_slot_l
xor	eax, eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [ecx+110], ax
xor	edx, edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	WORD PTR [eax+108], dx
movzx	ecx, WORD PTR _metrics$23[ebp+2]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+24], ecx
movzx	eax, WORD PTR _metrics$23[ebp]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+28], eax
movsx	edx, WORD PTR _metrics$23[ebp+4]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+32], edx
movsx	ecx, WORD PTR _metrics$23[ebp+6]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+36], ecx
movzx	eax, WORD PTR _metrics$23[ebp+8]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+40], eax
movsx	edx, WORD PTR _metrics$23[ebp+10]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+44], edx
movsx	ecx, WORD PTR _metrics$23[ebp+12]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+48], ecx
movzx	eax, WORD PTR _metrics$23[ebp+14]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+52], eax
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+72], 1651078259		
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 16					
je	SHORT $LN43@cff_slot_l
movsx	ecx, WORD PTR _metrics$23[ebp+10]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+100], ecx
movsx	eax, WORD PTR _metrics$23[ebp+12]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+104], eax
jmp	SHORT $LN42@cff_slot_l
movsx	edx, WORD PTR _metrics$23[ebp+4]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+100], edx
movsx	ecx, WORD PTR _metrics$23[ebp+6]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+104], ecx
mov	esi, esp
lea	eax, DWORD PTR _advance$21[ebp]
push	eax
lea	ecx, DWORD PTR _dummy$20[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	eax, DWORD PTR [edx+112]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, WORD PTR _advance$21[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+56], ecx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN56@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+330]
test	eax, eax
jle	SHORT $LN56@cff_slot_l
mov	BYTE PTR tv204[ebp], 1
jmp	SHORT $LN57@cff_slot_l
mov	BYTE PTR tv204[ebp], 0
mov	cl, BYTE PTR tv204[ebp]
mov	BYTE PTR _has_vertical_info$22[ebp], cl
movzx	edx, BYTE PTR _has_vertical_info$22[ebp]
test	edx, edx
je	SHORT $LN41@cff_slot_l
mov	esi, esp
lea	eax, DWORD PTR _advance$21[ebp]
push	eax
lea	ecx, DWORD PTR _dummy$20[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	1
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	eax, DWORD PTR [edx+112]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, WORD PTR _advance$21[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+60], ecx
jmp	SHORT $LN40@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+364]
cmp	ecx, 65535				
je	SHORT $LN39@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+436]
sub	eax, edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+60], eax
jmp	SHORT $LN40@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+220]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+222]
sub	eax, edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+60], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN54@cff_slot_l
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 16384				
je	SHORT $LN37@cff_slot_l
push	OFFSET $SG12265
push	2752					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN54@cff_slot_l
mov	eax, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [eax+1896], 0
je	$LN36@cff_slot_l
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 2924				
push	edx
call	_cff_fd_select_get
add	esp, 8
mov	BYTE PTR _fd_index$17[ebp], al
movzx	eax, BYTE PTR _fd_index$17[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
cmp	eax, DWORD PTR [ecx+1896]
jb	SHORT $LN35@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1896]
sub	eax, 1
mov	BYTE PTR _fd_index$17[ebp], al
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+1392]
mov	DWORD PTR _top_upm$19[ebp], edx
movzx	eax, BYTE PTR _fd_index$17[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1900]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR _sub_upm$18[ebp], eax
movzx	ecx, BYTE PTR _fd_index$17[ebp]
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+1900]
add	eax, 48					
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _font_matrix$[ebp], ecx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _font_matrix$[ebp+4], edx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _font_matrix$[ebp+8], ecx
mov	edx, DWORD PTR [eax+12]
mov	DWORD PTR _font_matrix$[ebp+12], edx
movzx	eax, BYTE PTR _fd_index$17[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1900]
mov	eax, DWORD PTR [edx+72]
mov	ecx, DWORD PTR [edx+76]
mov	DWORD PTR _font_offset$[ebp], eax
mov	DWORD PTR _font_offset$[ebp+4], ecx
mov	edx, DWORD PTR _top_upm$19[ebp]
cmp	edx, DWORD PTR _sub_upm$18[ebp]
je	SHORT $LN34@cff_slot_l
mov	eax, DWORD PTR _sub_upm$18[ebp]
push	eax
mov	ecx, DWORD PTR _top_upm$19[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [edx+164]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+164], eax
mov	edx, DWORD PTR _sub_upm$18[ebp]
push	edx
mov	eax, DWORD PTR _top_upm$19[ebp]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+168]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+168], eax
mov	BYTE PTR _force_scaling$[ebp], 1
jmp	SHORT $LN33@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1372				
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _font_matrix$[ebp], eax
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR _font_matrix$[ebp+4], ecx
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _font_matrix$[ebp+8], eax
mov	ecx, DWORD PTR [edx+12]
mov	DWORD PTR _font_matrix$[ebp+12], ecx
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1396]
mov	ecx, DWORD PTR [edx+1400]
mov	DWORD PTR _font_offset$[ebp], eax
mov	DWORD PTR _font_offset$[ebp+4], ecx
xor	edx, edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	WORD PTR [eax+110], dx
xor	ecx, ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [edx+108], cx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 2
jne	SHORT $LN58@cff_slot_l
mov	BYTE PTR tv321[ebp], 1
jmp	SHORT $LN59@cff_slot_l
mov	BYTE PTR tv321[ebp], 0
mov	cl, BYTE PTR tv321[ebp]
mov	BYTE PTR _hinting$[ebp], cl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1
jne	SHORT $LN60@cff_slot_l
mov	BYTE PTR tv324[ebp], 1
jmp	SHORT $LN61@cff_slot_l
mov	BYTE PTR tv324[ebp], 0
mov	al, BYTE PTR tv324[ebp]
mov	BYTE PTR _scaled$[ebp], al
mov	ecx, DWORD PTR _glyph$[ebp]
mov	dl, BYTE PTR _hinting$[ebp]
mov	BYTE PTR [ecx+160], dl
mov	eax, DWORD PTR _glyph$[ebp]
mov	cl, BYTE PTR _scaled$[ebp]
mov	BYTE PTR [eax+161], cl
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+72], 1869968492		
mov	eax, DWORD PTR _load_flags$[ebp]
sar	eax, 16					
and	eax, 15					
push	eax
movzx	ecx, BYTE PTR _hinting$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cff_decoder_init
add	esp, 24					
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 256				
je	SHORT $LN32@cff_slot_l
mov	BYTE PTR _decoder$[ebp+753], 1
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 1024				
mov	BYTE PTR _decoder$[ebp+66], cl
lea	edx, DWORD PTR _charstring_len$15[ebp]
push	edx
lea	eax, DWORD PTR _charstring$16[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_cff_get_glyph_data
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@cff_slot_l
jmp	$Glyph_Build_Finished$79
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cff_decoder_prepare
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN30@cff_slot_l
jmp	$Glyph_Build_Finished$79
mov	eax, DWORD PTR _charstring_len$15[ebp]
push	eax
mov	ecx, DWORD PTR _charstring$16[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_decoder_parse_charstrings
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 164				
jne	SHORT $LN29@cff_slot_l
mov	BYTE PTR _hinting$[ebp], 0
mov	BYTE PTR _force_scaling$[ebp], 1
mov	ecx, DWORD PTR _glyph$[ebp]
mov	dl, BYTE PTR _hinting$[ebp]
mov	BYTE PTR [ecx+160], dl
mov	eax, DWORD PTR _charstring_len$15[ebp]
push	eax
mov	ecx, DWORD PTR _charstring$16[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_decoder_parse_charstrings
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _charstring_len$15[ebp]
push	eax
lea	ecx, DWORD PTR _charstring$16[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_cff_free_glyph_data
add	esp, 12					
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN28@cff_slot_l
jmp	$Glyph_Build_Finished$79
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN27@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+136], 0
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+140], 0
jmp	SHORT $Glyph_Build_Finished$79
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 1176				
mov	DWORD PTR _csindex$14[ebp], ecx
mov	edx, DWORD PTR _csindex$14[ebp]
cmp	DWORD PTR [edx+24], 0
je	SHORT $Glyph_Build_Finished$79
mov	eax, DWORD PTR _csindex$14[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _csindex$14[ebp]
mov	eax, DWORD PTR [edx+28]
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
lea	edx, DWORD PTR [eax+ecx-1]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+136], edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _charstring_len$15[ebp]
mov	DWORD PTR [ecx+140], edx
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN24@cff_slot_l
lea	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cff_builder_done
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
jne	$LN23@cff_slot_l
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+48], 0
je	$LN23@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+8], 0
je	$LN23@cff_slot_l
mov	ecx, DWORD PTR _decoder$[ebp+32]
mov	DWORD PTR _metrics$13[ebp], ecx
mov	DWORD PTR _metrics$13[ebp+4], 0
mov	edx, DWORD PTR _decoder$[ebp+40]
mov	DWORD PTR _metrics$13[ebp+8], edx
mov	eax, DWORD PTR _decoder$[ebp+44]
mov	DWORD PTR _metrics$13[ebp+12], eax
mov	esi, esp
lea	ecx, DWORD PTR _metrics$13[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _metrics$13[ebp]
mov	DWORD PTR _decoder$[ebp+32], eax
mov	ecx, DWORD PTR _metrics$13[ebp+8]
mov	DWORD PTR _decoder$[ebp+40], ecx
mov	edx, DWORD PTR _metrics$13[ebp+12]
mov	DWORD PTR _decoder$[ebp+44], edx
cmp	DWORD PTR _error$[ebp], 0
jne	$LN22@cff_slot_l
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1024				
je	SHORT $LN21@cff_slot_l
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	DWORD PTR _internal$12[ebp], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _decoder$[ebp+32]
mov	DWORD PTR [eax+32], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _decoder$[ebp+744]
mov	DWORD PTR [edx+40], eax
mov	ecx, DWORD PTR _internal$12[ebp]
add	ecx, 12					
mov	edx, DWORD PTR _font_matrix$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _font_matrix$[ebp+4]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _font_matrix$[ebp+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _font_matrix$[ebp+12]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _internal$12[ebp]
mov	edx, DWORD PTR _font_offset$[ebp]
mov	DWORD PTR [ecx+28], edx
mov	eax, DWORD PTR _font_offset$[ebp+4]
mov	DWORD PTR [ecx+32], eax
mov	ecx, DWORD PTR _internal$12[ebp]
mov	BYTE PTR [ecx+8], 1
jmp	$LN22@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 24					
mov	DWORD PTR _metrics$10[ebp], edx
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR _decoder$[ebp+744]
mov	DWORD PTR [eax+16], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _decoder$[ebp+744]
mov	DWORD PTR [edx+56], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	BYTE PTR [edx+8], 0
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN62@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+330]
test	eax, eax
jle	SHORT $LN62@cff_slot_l
mov	BYTE PTR tv457[ebp], 1
jmp	SHORT $LN63@cff_slot_l
mov	BYTE PTR tv457[ebp], 0
mov	cl, BYTE PTR tv457[ebp]
mov	BYTE PTR _has_vertical_info$8[ebp], cl
movzx	edx, BYTE PTR _has_vertical_info$8[ebp]
test	edx, edx
je	SHORT $LN19@cff_slot_l
xor	eax, eax
mov	WORD PTR _vertBearingY$7[ebp], ax
xor	ecx, ecx
mov	WORD PTR _vertAdvance$6[ebp], cx
mov	esi, esp
lea	edx, DWORD PTR _vertAdvance$6[ebp]
push	edx
lea	eax, DWORD PTR _vertBearingY$7[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
push	1
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	edx, DWORD PTR [ecx+112]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
movsx	eax, WORD PTR _vertBearingY$7[ebp]
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [ecx+24], eax
movzx	edx, WORD PTR _vertAdvance$6[ebp]
mov	eax, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [eax+28], edx
jmp	SHORT $LN18@cff_slot_l
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+364]
cmp	edx, 65535				
je	SHORT $LN17@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+434]
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+436]
sub	ecx, eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+28], ecx
jmp	SHORT $LN18@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+220]
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+222]
sub	ecx, eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+60], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+72], 1869968492		
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+124], 0
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN15@cff_slot_l
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, WORD PTR [edx+14]
cmp	eax, 24					
jge	SHORT $LN15@cff_slot_l
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 256				
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 4
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
cmp	DWORD PTR _font_matrix$[ebp], 65536	
jne	SHORT $LN13@cff_slot_l
cmp	DWORD PTR _font_matrix$[ebp+12], 65536	
jne	SHORT $LN13@cff_slot_l
cmp	DWORD PTR _font_matrix$[ebp+4], 0
jne	SHORT $LN13@cff_slot_l
cmp	DWORD PTR _font_matrix$[ebp+8], 0
je	SHORT $LN14@cff_slot_l
lea	ecx, DWORD PTR _font_matrix$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
push	edx
call	_FT_Outline_Transform
add	esp, 8
cmp	DWORD PTR _font_offset$[ebp], 0
jne	SHORT $LN11@cff_slot_l
cmp	DWORD PTR _font_offset$[ebp+4], 0
je	SHORT $LN12@cff_slot_l
mov	eax, DWORD PTR _font_offset$[ebp+4]
push	eax
mov	ecx, DWORD PTR _font_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
push	edx
call	_FT_Outline_Translate
add	esp, 12					
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _advance$9[ebp], ecx
mov	DWORD PTR _advance$9[ebp+4], 0
lea	edx, DWORD PTR _font_matrix$[ebp]
push	edx
lea	eax, DWORD PTR _advance$9[ebp]
push	eax
call	_FT_Vector_Transform
add	esp, 8
mov	ecx, DWORD PTR _advance$9[ebp]
add	ecx, DWORD PTR _font_offset$[ebp]
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+16], ecx
mov	DWORD PTR _advance$9[ebp], 0
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _advance$9[ebp+4], ecx
lea	edx, DWORD PTR _font_matrix$[ebp]
push	edx
lea	eax, DWORD PTR _advance$9[ebp]
push	eax
call	_FT_Vector_Transform
add	esp, 8
mov	ecx, DWORD PTR _advance$9[ebp+4]
add	ecx, DWORD PTR _font_offset$[ebp+4]
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1
je	SHORT $LN9@cff_slot_l
movzx	ecx, BYTE PTR _force_scaling$[ebp]
test	ecx, ecx
je	$LN10@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
mov	DWORD PTR _cur$4[ebp], edx
mov	eax, DWORD PTR _cur$4[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$3[ebp], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [edx+164]
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+168]
mov	DWORD PTR _y_scale$1[ebp], edx
movzx	eax, BYTE PTR _hinting$[ebp]
test	eax, eax
je	SHORT $LN7@cff_slot_l
cmp	DWORD PTR _decoder$[ebp+68], 0
jne	SHORT $LN8@cff_slot_l
mov	ecx, DWORD PTR _cur$4[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	DWORD PTR _n$5[ebp], edx
jmp	SHORT $LN6@cff_slot_l
mov	eax, DWORD PTR _n$5[ebp]
sub	eax, 1
mov	DWORD PTR _n$5[ebp], eax
mov	ecx, DWORD PTR _vec$3[ebp]
add	ecx, 8
mov	DWORD PTR _vec$3[ebp], ecx
cmp	DWORD PTR _n$5[ebp], 0
jle	SHORT $LN8@cff_slot_l
mov	edx, DWORD PTR _x_scale$2[ebp]
push	edx
mov	eax, DWORD PTR _vec$3[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _vec$3[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _vec$3[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _vec$3[ebp]
mov	DWORD PTR [ecx+4], eax
jmp	SHORT $LN5@cff_slot_l
mov	edx, DWORD PTR _x_scale$2[ebp]
push	edx
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [ecx+28], eax
lea	edx, DWORD PTR _cbox$11[ebp]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Get_CBox
add	esp, 8
mov	ecx, DWORD PTR _cbox$11[ebp+8]
sub	ecx, DWORD PTR _cbox$11[ebp]
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _cbox$11[ebp+12]
sub	eax, DWORD PTR _cbox$11[ebp+4]
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	eax, DWORD PTR _cbox$11[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR _cbox$11[ebp+12]
mov	DWORD PTR [ecx+12], edx
movzx	eax, BYTE PTR _has_vertical_info$8[ebp]
test	eax, eax
je	SHORT $LN3@cff_slot_l
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	eax, DWORD PTR [ecx+16]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [edx+8]
sub	ecx, eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+20], ecx
jmp	SHORT $LN22@cff_slot_l
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 16					
je	SHORT $LN22@cff_slot_l
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _metrics$10[ebp]
push	eax
call	_ft_synthesize_vertical_metrics
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN78@cff_slot_l
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 1228				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	13					
DD	$LN77@cff_slot_l
DD	-944					
DD	932					
DD	$LN64@cff_slot_l
DD	-980					
DD	16					
DD	$LN65@cff_slot_l
DD	-996					
DD	8
DD	$LN66@cff_slot_l
DD	-1032					
DD	16					
DD	$LN67@cff_slot_l
DD	-1048					
DD	2
DD	$LN68@cff_slot_l
DD	-1060					
DD	2
DD	$LN69@cff_slot_l
DD	-1084					
DD	4
DD	$LN70@cff_slot_l
DD	-1096					
DD	4
DD	$LN71@cff_slot_l
DD	-1124					
DD	16					
DD	$LN72@cff_slot_l
DD	-1152					
DD	16					
DD	$LN73@cff_slot_l
DD	-1172					
DD	8
DD	$LN74@cff_slot_l
DD	-1188					
DD	2
DD	$LN75@cff_slot_l
DD	-1200					
DD	2
DD	$LN76@cff_slot_l
DB	118					
DB	101					
DB	114					
DB	116					
DB	65					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	0
DB	118					
DB	101					
DB	114					
DB	116					
DB	66					
DB	101					
DB	97					
DB	114					
DB	105					
DB	110					
DB	103					
DB	89					
DB	0
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	0
DB	99					
DB	98					
DB	111					
DB	120					
DB	0
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
DB	99					
DB	104					
DB	97					
DB	114					
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	99					
DB	104					
DB	97					
DB	114					
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
DB	100					
DB	117					
DB	109					
DB	109					
DB	121					
DB	0
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	0
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
DB	102					
DB	111					
DB	110					
DB	116					
DB	95					
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
DB	102					
DB	111					
DB	110					
DB	116					
DB	95					
DB	109					
DB	97					
DB	116					
DB	114					
DB	105					
DB	120					
DB	0
DB	100					
DB	101					
DB	99					
DB	111					
DB	100					
DB	101					
DB	114					
DB	0
ENDP
_cff_decoder_prepare PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 1324				
mov	DWORD PTR _sub$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [edx+1896], 0
je	$LN11@cff_decode
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 2924				
push	ecx
call	_cff_fd_select_get
add	esp, 8
mov	BYTE PTR _fd_index$2[ebp], al
movzx	edx, BYTE PTR _fd_index$2[ebp]
mov	eax, DWORD PTR _cff$[ebp]
cmp	edx, DWORD PTR [eax+1896]
jb	SHORT $LN5@cff_decode
mov	ecx, 4
imul	edx, ecx, 47
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN8@cff_decode
push	OFFSET $SG12076
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN9@cff_decode
push	OFFSET $SG12077
push	433					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$14
mov	ecx, 4
imul	edx, ecx, 47
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN4@cff_decode
movzx	eax, BYTE PTR _fd_index$2[ebp]
push	eax
push	OFFSET $SG12083
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN5@cff_decode
movzx	edx, BYTE PTR _fd_index$2[ebp]
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1900]
mov	DWORD PTR _sub$[ebp], ecx
mov	edx, DWORD PTR _builder$[ebp]
cmp	DWORD PTR [edx+68], 0
je	SHORT $LN11@cff_decode
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN11@cff_decode
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR _internal$1[ebp], ecx
movzx	edx, BYTE PTR _fd_index$2[ebp]
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _internal$1[ebp]
mov	edx, DWORD PTR [ecx+edx*4+4]
mov	DWORD PTR [eax+72], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+544]
mov	DWORD PTR [eax+888], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+568]
mov	DWORD PTR [eax+904], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+888]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+76]
mov	ecx, DWORD PTR [eax+1368]
push	ecx
call	_cff_compute_bias
add	esp, 8
mov	edx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+896], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+528]
mov	DWORD PTR [eax+744], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR [eax+748], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	DWORD PTR [eax+928], ecx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_decoder_init PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
push	932					
push	0
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_memset
add	esp, 12					
movzx	eax, BYTE PTR _hinting$[ebp]
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cff_builder_init
add	esp, 20					
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _cff$[ebp]
mov	DWORD PTR [edx+76], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+92]
mov	DWORD PTR [ecx+892], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1308]
mov	DWORD PTR [ecx+908], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+892]
push	edx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+1368]
push	ecx
call	_cff_compute_bias
add	esp, 8
mov	edx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+900], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _hint_mode$[ebp]
mov	DWORD PTR [eax+920], ecx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_free_glyph_data PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN2@cff_free_g
mov	edx, DWORD PTR _pointer$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _data$2[ebp], eax
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR _data$2[ebp+4], ecx
mov	esi, esp
lea	edx, DWORD PTR _data$2[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN3@cff_free_g
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$1[ebp], ecx
mov	edx, DWORD PTR _pointer$[ebp]
push	edx
mov	eax, DWORD PTR _cff$1[ebp]
add	eax, 1176				
push	eax
call	_cff_index_forget_element
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@cff_free_g
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN6@cff_free_g
DD	-12					
DD	8
DD	$LN5@cff_free_g
DB	100					
DB	97					
DB	116					
DB	97					
DB	0
ENDP
_cff_get_glyph_data PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN2@cff_get_gl
mov	esi, esp
lea	edx, DWORD PTR _data$3[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$2[ebp], eax
mov	ecx, DWORD PTR _pointer$[ebp]
mov	edx, DWORD PTR _data$3[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _length$[ebp]
mov	ecx, DWORD PTR _data$3[ebp+4]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _error$2[ebp]
jmp	SHORT $LN3@cff_get_gl
jmp	SHORT $LN3@cff_get_gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$1[ebp], eax
mov	ecx, DWORD PTR _length$[ebp]
push	ecx
mov	edx, DWORD PTR _pointer$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$1[ebp]
add	ecx, 1176				
push	ecx
call	_cff_index_access_element
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@cff_get_gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN6@cff_get_gl
DD	-12					
DD	8
DD	$LN5@cff_get_gl
DB	100					
DB	97					
DB	116					
DB	97					
DB	0
ENDP
_cff_lookup_glyph_by_stdcharcode PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [eax+1160], 0
jne	SHORT $LN7@cff_lookup
or	eax, -1
jmp	SHORT $LN8@cff_lookup
cmp	DWORD PTR _charcode$[ebp], 0
jl	SHORT $LN5@cff_lookup
cmp	DWORD PTR _charcode$[ebp], 255		
jle	SHORT $LN6@cff_lookup
or	eax, -1
jmp	SHORT $LN8@cff_lookup
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
call	_cff_get_standard_encoding
add	esp, 4
mov	WORD PTR _glyph_sid$[ebp], ax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN4@cff_lookup
mov	edx, DWORD PTR _n$[ebp]
add	edx, 1
mov	DWORD PTR _n$[ebp], edx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jae	SHORT $LN2@cff_lookup
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1160]
mov	ecx, DWORD PTR _n$[ebp]
movzx	edx, WORD PTR [eax+ecx*2]
movzx	eax, WORD PTR _glyph_sid$[ebp]
cmp	edx, eax
jne	SHORT $LN1@cff_lookup
mov	eax, DWORD PTR _n$[ebp]
jmp	SHORT $LN8@cff_lookup
jmp	SHORT $LN3@cff_lookup
or	eax, -1
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_close_contour PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _outline$[ebp], ecx
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN7@cff_builde
jmp	$LN8@cff_builde
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
cmp	eax, 1
jg	SHORT $LN10@cff_builde
mov	DWORD PTR tv77[ebp], 0
jmp	SHORT $LN11@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+edx*2-4]
add	edx, 1
mov	DWORD PTR tv77[ebp], edx
mov	eax, DWORD PTR tv77[ebp]
mov	DWORD PTR _first$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
cmp	edx, 1
jle	SHORT $LN6@cff_builde
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _p1$3[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
lea	edx, DWORD PTR [ecx+edx*8-8]
mov	DWORD PTR _p2$2[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
lea	ecx, DWORD PTR [eax+ecx-1]
mov	DWORD PTR _control$1[ebp], ecx
mov	edx, DWORD PTR _p1$3[ebp]
mov	eax, DWORD PTR _p2$2[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax]
jne	SHORT $LN6@cff_builde
mov	edx, DWORD PTR _p1$3[ebp]
mov	eax, DWORD PTR _p2$2[ebp]
mov	ecx, DWORD PTR [edx+4]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN6@cff_builde
mov	edx, DWORD PTR _control$1[ebp]
movzx	eax, BYTE PTR [edx]
cmp	eax, 1
jne	SHORT $LN6@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR [ecx+2]
sub	dx, 1
mov	eax, DWORD PTR _outline$[ebp]
mov	WORD PTR [eax+2], dx
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
test	edx, edx
jle	SHORT $LN8@cff_builde
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
sub	ecx, 1
cmp	DWORD PTR _first$[ebp], ecx
jne	SHORT $LN2@cff_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	ax, WORD PTR [edx]
sub	ax, 1
mov	ecx, DWORD PTR _outline$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _outline$[ebp]
mov	ax, WORD PTR [edx+2]
sub	ax, 1
mov	ecx, DWORD PTR _outline$[ebp]
mov	WORD PTR [ecx+2], ax
jmp	SHORT $LN8@cff_builde
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
sub	eax, 1
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
mov	ecx, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [ecx+12]
mov	WORD PTR [ecx+edx*2-2], ax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_start_point PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _builder$[ebp]
movzx	ecx, BYTE PTR [eax+64]
test	ecx, ecx
jne	SHORT $LN2@cff_builde
mov	edx, DWORD PTR _builder$[ebp]
mov	BYTE PTR [edx+64], 1
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_contour
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@cff_builde
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_point1
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_add_point1 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
push	1
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_check_points
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@cff_builde
push	1
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_point
add	esp, 16					
mov	eax, DWORD PTR _error$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_add_point PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _builder$[ebp]
movzx	eax, BYTE PTR [edx+65]
test	eax, eax
je	SHORT $LN1@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _point$2[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
add	ecx, DWORD PTR [edx+8]
mov	DWORD PTR _control$1[ebp], ecx
mov	eax, DWORD PTR _x$[ebp]
sar	eax, 10					
mov	ecx, DWORD PTR _point$2[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _y$[ebp]
sar	edx, 10					
mov	eax, DWORD PTR _point$2[ebp]
mov	DWORD PTR [eax+4], edx
movzx	ecx, BYTE PTR _flag$[ebp]
test	ecx, ecx
je	SHORT $LN4@cff_builde
mov	DWORD PTR tv83[ebp], 1
jmp	SHORT $LN5@cff_builde
mov	DWORD PTR tv83[ebp], 2
mov	edx, DWORD PTR _control$1[ebp]
mov	al, BYTE PTR tv83[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR [ecx+2]
add	dx, 1
mov	eax, DWORD PTR _outline$[ebp]
mov	WORD PTR [eax+2], dx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_check_points PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _count$[ebp], 0
je	SHORT $LN3@cff_check_
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+22]
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	eax, WORD PTR [ecx+58]
add	edx, DWORD PTR _count$[ebp]
add	eax, edx
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	eax, DWORD PTR [edx+4]
ja	SHORT $LN4@cff_check_
mov	eax, 1
test	eax, eax
je	SHORT $LN4@cff_check_
mov	DWORD PTR tv82[ebp], 0
jmp	SHORT $LN5@cff_check_
push	0
mov	ecx, DWORD PTR _count$[ebp]
push	ecx
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv82[ebp], eax
mov	eax, DWORD PTR tv82[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_driver_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _module$[ebp], eax
pop	ebp
ret	0
ENDP
_cff_driver_init PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [ecx+28], 1
mov	edx, DWORD PTR _driver$[ebp]
mov	BYTE PTR [edx+32], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 500		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [ecx+eax+36], 400		
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _driver$[ebp]
mov	DWORD PTR [eax+edx+36], 1000		
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _driver$[ebp]
mov	DWORD PTR [eax+edx+36], 275		
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 1667		
mov	eax, 4
imul	ecx, eax, 5
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 275		
mov	eax, 4
imul	ecx, eax, 6
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 2333		
mov	eax, 4
imul	ecx, eax, 7
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 0
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_face_done PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN6@cff_face_d
jmp	SHORT $LN7@cff_face_d
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$[ebp], ecx
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN5@cff_face_d
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$1[ebp], eax
cmp	DWORD PTR _cff$1[ebp], 0
je	SHORT $LN7@cff_face_d
mov	ecx, DWORD PTR _cff$1[ebp]
push	ecx
call	_cff_font_done
add	esp, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+656], 0
xor	eax, eax
jne	SHORT $LN3@cff_face_d
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_face_init PROC
push	ebp
mov	ebp, esp
sub	esp, 196				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-196]
mov	ecx, 49					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	BYTE PTR _pure_cff$[ebp], 1
mov	BYTE PTR _sfnt_format$[ebp], 0
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$[ebp], eax
push	OFFSET $SG11376
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module_Interface
add	esp, 8
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
jne	SHORT $LN92@cff_face_i
push	OFFSET $SG11378
call	_FT_Message
add	esp, 4
push	OFFSET $SG11379
push	503					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$110
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$32[ebp], eax
push	OFFSET $SG11388
mov	ecx, DWORD PTR _module$32[ebp]
push	ecx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR __tmp_$31[ebp], eax
mov	edx, DWORD PTR __tmp_$31[ebp]
mov	DWORD PTR _psnames$[ebp], edx
xor	eax, eax
jne	SHORT $LN92@cff_face_i
push	OFFSET $SG11390
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module_Interface
add	esp, 8
mov	DWORD PTR _pshinter$[ebp], eax
mov	edx, 4
imul	eax, edx, 49
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN88@cff_face_i
push	OFFSET $SG11395
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN89@cff_face_i
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN85@cff_face_i
jmp	$Exit$110
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN84@cff_face_i
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+148], 1330926671		
je	SHORT $LN83@cff_face_i
mov	edx, 4
imul	eax, edx, 49
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN81@cff_face_i
push	OFFSET $SG11409
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN82@cff_face_i
push	OFFSET $SG11410
push	525					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$110
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN78@cff_face_i
xor	eax, eax
jmp	$LN94@cff_face_i
mov	BYTE PTR _sfnt_format$[ebp], 1
mov	esi, esp
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1751474532				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN77@cff_face_i
mov	BYTE PTR _pure_cff$[ebp], 0
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN76@cff_face_i
jmp	$Exit$110
jmp	SHORT $LN75@cff_face_i
mov	esi, esp
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN75@cff_face_i
jmp	$Exit$110
mov	esi, esp
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1128678944				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN73@cff_face_i
jmp	$Exit$110
jmp	SHORT $LN72@cff_face_i
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN71@cff_face_i
jmp	$Exit$110
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _cff$30[ebp], 0
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$28[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	2980					
mov	ecx, DWORD PTR _memory$28[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _cff$30[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN70@cff_face_i
jmp	$Exit$110
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _cff$30[ebp]
mov	DWORD PTR [edx+656], eax
movzx	ecx, BYTE PTR _pure_cff$[ebp]
push	ecx
mov	edx, DWORD PTR _cff$30[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_cff_font_load
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN69@cff_face_i
jmp	$Exit$110
mov	eax, DWORD PTR _cff$30[ebp]
mov	ecx, DWORD PTR _pshinter$[ebp]
mov	DWORD PTR [eax+2952], ecx
mov	edx, DWORD PTR _cff$30[ebp]
mov	eax, DWORD PTR _psnames$[ebp]
mov	DWORD PTR [edx+2956], eax
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _face_index$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR _cff$30[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+16], edx
mov	eax, DWORD PTR _cff$30[ebp]
add	eax, 1324				
mov	DWORD PTR _dict$29[ebp], eax
mov	ecx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [ecx+132], 65535		
jne	SHORT $LN67@cff_face_i
cmp	DWORD PTR _psnames$[ebp], 0
jne	SHORT $LN67@cff_face_i
push	OFFSET $SG11440
call	_FT_Message
add	esp, 4
push	OFFSET $SG11441
push	607					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$110
mov	edx, 4
imul	eax, edx, 49
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN66@cff_face_i
push	OFFSET $SG11448
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN67@cff_face_i
mov	DWORD PTR _idx$25[ebp], 0
jmp	SHORT $LN63@cff_face_i
mov	edx, DWORD PTR _idx$25[ebp]
add	edx, 1
mov	DWORD PTR _idx$25[ebp], edx
mov	eax, DWORD PTR _cff$30[ebp]
mov	ecx, DWORD PTR [eax+1312]
add	ecx, 390				
cmp	DWORD PTR _idx$25[ebp], ecx
jae	SHORT $LN61@cff_face_i
mov	edx, DWORD PTR _idx$25[ebp]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _s$24[ebp], eax
cmp	DWORD PTR _s$24[ebp], 0
je	SHORT $LN60@cff_face_i
mov	ecx, 4
imul	edx, ecx, 49
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN58@cff_face_i
mov	eax, DWORD PTR _s$24[ebp]
push	eax
mov	ecx, DWORD PTR _idx$25[ebp]
push	ecx
push	OFFSET $SG11457
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN59@cff_face_i
jmp	SHORT $LN62@cff_face_i
mov	eax, DWORD PTR _dict$29[ebp]
movzx	ecx, BYTE PTR [eax+64]
test	ecx, ecx
jne	SHORT $LN55@cff_face_i
movzx	edx, BYTE PTR _pure_cff$[ebp]
test	edx, edx
je	SHORT $LN96@cff_face_i
mov	DWORD PTR tv234[ebp], 1000		
jmp	SHORT $LN97@cff_face_i
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
mov	DWORD PTR tv234[ebp], ecx
mov	edx, DWORD PTR _dict$29[ebp]
mov	eax, DWORD PTR tv234[ebp]
mov	DWORD PTR [edx+68], eax
mov	ecx, DWORD PTR _dict$29[ebp]
add	ecx, 48					
mov	DWORD PTR _matrix$23[ebp], ecx
mov	edx, DWORD PTR _dict$29[ebp]
add	edx, 72					
mov	DWORD PTR _offset$22[ebp], edx
mov	eax, DWORD PTR _dict$29[ebp]
add	eax, 68					
mov	DWORD PTR _upm$21[ebp], eax
mov	ecx, DWORD PTR _matrix$23[ebp]
cmp	DWORD PTR [ecx+12], 0
jge	SHORT $LN98@cff_face_i
mov	edx, DWORD PTR _matrix$23[ebp]
mov	eax, DWORD PTR [edx+12]
neg	eax
mov	DWORD PTR tv243[ebp], eax
jmp	SHORT $LN99@cff_face_i
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR tv243[ebp], edx
mov	eax, DWORD PTR tv243[ebp]
mov	DWORD PTR _temp$20[ebp], eax
cmp	DWORD PTR _temp$20[ebp], 65536		
je	$LN54@cff_face_i
mov	ecx, DWORD PTR _temp$20[ebp]
push	ecx
mov	edx, DWORD PTR _upm$21[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _upm$21[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _temp$20[ebp]
push	edx
mov	eax, DWORD PTR _matrix$23[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$20[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _temp$20[ebp]
push	edx
mov	eax, DWORD PTR _matrix$23[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _temp$20[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _temp$20[ebp]
push	edx
mov	eax, DWORD PTR _offset$22[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$20[ebp]
push	eax
mov	ecx, DWORD PTR _offset$22[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _offset$22[ebp]
mov	eax, DWORD PTR [edx]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _offset$22[ebp]
mov	eax, DWORD PTR [edx+4]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _cff$30[ebp]
mov	eax, DWORD PTR [edx+1896]
mov	DWORD PTR _i$26[ebp], eax
jmp	SHORT $LN53@cff_face_i
mov	ecx, DWORD PTR _i$26[ebp]
sub	ecx, 1
mov	DWORD PTR _i$26[ebp], ecx
cmp	DWORD PTR _i$26[ebp], 0
jbe	$LN51@cff_face_i
mov	edx, DWORD PTR _i$26[ebp]
mov	eax, DWORD PTR _cff$30[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1896]
mov	DWORD PTR _sub$19[ebp], ecx
mov	edx, DWORD PTR _cff$30[ebp]
add	edx, 1324				
mov	DWORD PTR _top$18[ebp], edx
mov	eax, DWORD PTR _sub$19[ebp]
movzx	ecx, BYTE PTR [eax+64]
test	ecx, ecx
je	$LN50@cff_face_i
mov	edx, DWORD PTR _top$18[ebp]
movzx	eax, BYTE PTR [edx+64]
test	eax, eax
je	$LN49@cff_face_i
mov	ecx, DWORD PTR _top$18[ebp]
cmp	DWORD PTR [ecx+68], 1
jbe	SHORT $LN48@cff_face_i
mov	edx, DWORD PTR _sub$19[ebp]
cmp	DWORD PTR [edx+68], 1
jbe	SHORT $LN48@cff_face_i
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR _sub$19[ebp]
mov	edx, DWORD PTR [eax+68]
cmp	edx, DWORD PTR [ecx+68]
jae	SHORT $LN100@cff_face_i
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	DWORD PTR tv308[ebp], ecx
jmp	SHORT $LN101@cff_face_i
mov	edx, DWORD PTR _sub$19[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR tv308[ebp], eax
mov	ecx, DWORD PTR tv308[ebp]
mov	DWORD PTR _scaling$13[ebp], ecx
jmp	SHORT $LN47@cff_face_i
mov	DWORD PTR _scaling$13[ebp], 1
mov	edx, DWORD PTR _scaling$13[ebp]
push	edx
mov	eax, DWORD PTR _sub$19[ebp]
add	eax, 48					
push	eax
mov	ecx, DWORD PTR _top$18[ebp]
add	ecx, 48					
push	ecx
call	_FT_Matrix_Multiply_Scaled
add	esp, 12					
mov	edx, DWORD PTR _scaling$13[ebp]
push	edx
mov	eax, DWORD PTR _top$18[ebp]
add	eax, 48					
push	eax
mov	ecx, DWORD PTR _sub$19[ebp]
add	ecx, 72					
push	ecx
call	_FT_Vector_Transform_Scaled
add	esp, 12					
mov	edx, DWORD PTR _scaling$13[ebp]
push	edx
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR [eax+68]
push	ecx
mov	edx, DWORD PTR _sub$19[ebp]
mov	eax, DWORD PTR [edx+68]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _sub$19[ebp]
mov	DWORD PTR [ecx+68], eax
jmp	SHORT $LN46@cff_face_i
mov	edx, DWORD PTR _top$18[ebp]
add	edx, 48					
mov	eax, DWORD PTR _sub$19[ebp]
add	eax, 48					
mov	ecx, DWORD PTR [edx]
mov	DWORD PTR [eax], ecx
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR [edx+8]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR [eax+72]
mov	edx, DWORD PTR [eax+76]
mov	eax, DWORD PTR _sub$19[ebp]
mov	DWORD PTR [eax+72], ecx
mov	DWORD PTR [eax+76], edx
mov	ecx, DWORD PTR _sub$19[ebp]
mov	edx, DWORD PTR _top$18[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR [ecx+68], eax
mov	ecx, DWORD PTR _sub$19[ebp]
add	ecx, 48					
mov	DWORD PTR _matrix$17[ebp], ecx
mov	edx, DWORD PTR _sub$19[ebp]
add	edx, 72					
mov	DWORD PTR _offset$16[ebp], edx
mov	eax, DWORD PTR _sub$19[ebp]
add	eax, 68					
mov	DWORD PTR _upm$15[ebp], eax
mov	ecx, DWORD PTR _matrix$17[ebp]
cmp	DWORD PTR [ecx+12], 0
jge	SHORT $LN102@cff_face_i
mov	edx, DWORD PTR _matrix$17[ebp]
mov	eax, DWORD PTR [edx+12]
neg	eax
mov	DWORD PTR tv342[ebp], eax
jmp	SHORT $LN103@cff_face_i
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR tv342[ebp], edx
mov	eax, DWORD PTR tv342[ebp]
mov	DWORD PTR _temp$14[ebp], eax
cmp	DWORD PTR _temp$14[ebp], 65536		
je	$LN45@cff_face_i
mov	ecx, DWORD PTR _temp$14[ebp]
push	ecx
mov	edx, DWORD PTR _upm$15[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _upm$15[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _temp$14[ebp]
push	edx
mov	eax, DWORD PTR _matrix$17[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$14[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _temp$14[ebp]
push	edx
mov	eax, DWORD PTR _matrix$17[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _temp$14[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _temp$14[ebp]
push	edx
mov	eax, DWORD PTR _offset$16[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$14[ebp]
push	eax
mov	ecx, DWORD PTR _offset$16[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _offset$16[ebp]
mov	eax, DWORD PTR [edx]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _offset$16[ebp]
mov	eax, DWORD PTR [edx+4]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [ecx+4], eax
jmp	$LN52@cff_face_i
movzx	edx, BYTE PTR _pure_cff$[ebp]
test	edx, edx
je	$LN44@cff_face_i
mov	DWORD PTR _style_name$12[ebp], 0
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR _cff$30[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [eax+132], 65535		
je	SHORT $LN43@cff_face_i
mov	ecx, DWORD PTR _cff$30[ebp]
mov	edx, DWORD PTR [ecx+1168]
add	edx, 1
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+16], edx
jmp	SHORT $LN42@cff_face_i
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _cff$30[ebp]
mov	eax, DWORD PTR [edx+1184]
mov	DWORD PTR [ecx+16], eax
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+84]
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+52], edx
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+88]
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+56], edx
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+92]
add	edx, 65535				
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+60], edx
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+96]
add	edx, 65535				
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+64], edx
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _dict$29[ebp]
mov	ax, WORD PTR [edx+68]
mov	WORD PTR [ecx+68], ax
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _cffface$[ebp]
mov	ax, WORD PTR [edx+64]
mov	WORD PTR [ecx+70], ax
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _cffface$[ebp]
mov	ax, WORD PTR [edx+56]
mov	WORD PTR [ecx+72], ax
mov	ecx, DWORD PTR _cffface$[ebp]
movzx	edx, WORD PTR [ecx+68]
imul	eax, edx, 12
cdq
mov	ecx, 10					
idiv	ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+74], ax
mov	eax, DWORD PTR _cffface$[ebp]
movsx	ecx, WORD PTR [eax+74]
mov	edx, DWORD PTR _cffface$[ebp]
movsx	eax, WORD PTR [edx+70]
mov	edx, DWORD PTR _cffface$[ebp]
movsx	edx, WORD PTR [edx+72]
sub	eax, edx
cmp	ecx, eax
jge	SHORT $LN41@cff_face_i
mov	eax, DWORD PTR _cffface$[ebp]
movsx	ecx, WORD PTR [eax+70]
mov	edx, DWORD PTR _cffface$[ebp]
movsx	eax, WORD PTR [edx+72]
sub	ecx, eax
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+74], cx
mov	eax, DWORD PTR _dict$29[ebp]
mov	ecx, DWORD PTR [eax+32]
sar	ecx, 16					
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+80], cx
mov	eax, DWORD PTR _dict$29[ebp]
mov	ecx, DWORD PTR [eax+36]
sar	ecx, 16					
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+82], cx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$30[ebp]
push	ecx
call	_cff_index_get_name
add	esp, 8
mov	edx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [edx+20], eax
mov	eax, DWORD PTR _cffface$[ebp]
cmp	DWORD PTR [eax+20], 0
je	$LN40@cff_face_i
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _full$11[ebp], eax
mov	ecx, DWORD PTR _full$11[ebp]
mov	DWORD PTR _fullp$10[ebp], ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _family$9[ebp], eax
mov	DWORD PTR _family_name$8[ebp], 0
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
call	_remove_subset_prefix
add	esp, 4
mov	eax, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [eax+16], 0
je	SHORT $LN39@cff_face_i
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _family_name$8[ebp], eax
cmp	DWORD PTR _family_name$8[ebp], 0
je	SHORT $LN39@cff_face_i
mov	ecx, DWORD PTR _family_name$8[ebp]
mov	DWORD PTR _family$9[ebp], ecx
cmp	DWORD PTR _full$11[ebp], 0
je	$LN37@cff_face_i
cmp	DWORD PTR _family$9[ebp], 0
je	$LN37@cff_face_i
mov	edx, DWORD PTR _fullp$10[ebp]
movsx	eax, BYTE PTR [edx]
test	eax, eax
je	$LN37@cff_face_i
mov	ecx, DWORD PTR _fullp$10[ebp]
movsx	edx, BYTE PTR [ecx]
mov	eax, DWORD PTR _family$9[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	edx, ecx
jne	SHORT $LN34@cff_face_i
mov	edx, DWORD PTR _family$9[ebp]
add	edx, 1
mov	DWORD PTR _family$9[ebp], edx
mov	eax, DWORD PTR _fullp$10[ebp]
add	eax, 1
mov	DWORD PTR _fullp$10[ebp], eax
jmp	SHORT $LN36@cff_face_i
mov	ecx, DWORD PTR _fullp$10[ebp]
movsx	edx, BYTE PTR [ecx]
cmp	edx, 32					
je	SHORT $LN32@cff_face_i
mov	eax, DWORD PTR _fullp$10[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 45					
jne	SHORT $LN33@cff_face_i
mov	edx, DWORD PTR _fullp$10[ebp]
add	edx, 1
mov	DWORD PTR _fullp$10[ebp], edx
jmp	SHORT $LN36@cff_face_i
mov	eax, DWORD PTR _family$9[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 32					
je	SHORT $LN30@cff_face_i
mov	edx, DWORD PTR _family$9[ebp]
movsx	eax, BYTE PTR [edx]
cmp	eax, 45					
jne	SHORT $LN31@cff_face_i
mov	ecx, DWORD PTR _family$9[ebp]
add	ecx, 1
mov	DWORD PTR _family$9[ebp], ecx
jmp	$LN36@cff_face_i
mov	edx, DWORD PTR _family$9[ebp]
movsx	eax, BYTE PTR [edx]
test	eax, eax
jne	SHORT $LN29@cff_face_i
mov	ecx, DWORD PTR _fullp$10[ebp]
movsx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN29@cff_face_i
mov	eax, DWORD PTR _fullp$10[ebp]
push	eax
mov	ecx, DWORD PTR _memory$28[ebp]
push	ecx
call	_cff_strcpy
add	esp, 8
mov	DWORD PTR _style_name$12[ebp], eax
mov	edx, DWORD PTR _style_name$12[ebp]
push	edx
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
call	_remove_style
add	esp, 8
jmp	SHORT $LN37@cff_face_i
jmp	$LN36@cff_face_i
jmp	SHORT $LN28@cff_face_i
mov	edx, DWORD PTR _dict$29[ebp]
mov	eax, DWORD PTR [edx+172]
push	eax
mov	ecx, DWORD PTR _cff$30[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _cid_font_name$7[ebp], eax
cmp	DWORD PTR _cid_font_name$7[ebp], 0
je	SHORT $LN28@cff_face_i
mov	edx, DWORD PTR _cid_font_name$7[ebp]
push	edx
mov	eax, DWORD PTR _memory$28[ebp]
push	eax
call	_cff_strcpy
add	esp, 8
mov	ecx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [ecx+20], eax
cmp	DWORD PTR _style_name$12[ebp], 0
je	SHORT $LN26@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR _style_name$12[ebp]
mov	DWORD PTR [edx+24], eax
jmp	SHORT $LN25@cff_face_i
push	OFFSET $SG11517
mov	ecx, DWORD PTR _memory$28[ebp]
push	ecx
call	_cff_strcpy
add	esp, 8
mov	edx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [edx+24], eax
mov	DWORD PTR _flags$27[ebp], 2065		
movzx	eax, BYTE PTR _sfnt_format$[ebp]
test	eax, eax
je	SHORT $LN24@cff_face_i
mov	ecx, DWORD PTR _flags$27[ebp]
or	ecx, 8
mov	DWORD PTR _flags$27[ebp], ecx
mov	edx, DWORD PTR _dict$29[ebp]
movzx	eax, BYTE PTR [edx+24]
test	eax, eax
je	SHORT $LN23@cff_face_i
mov	ecx, DWORD PTR _flags$27[ebp]
or	ecx, 4
mov	DWORD PTR _flags$27[ebp], ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+8]
or	eax, DWORD PTR _flags$27[ebp]
mov	ecx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	DWORD PTR _flags$27[ebp], 0
mov	edx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [edx+28], 0
je	SHORT $LN22@cff_face_i
mov	eax, DWORD PTR _flags$27[ebp]
or	eax, 1
mov	DWORD PTR _flags$27[ebp], eax
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _weight$6[ebp], eax
cmp	DWORD PTR _weight$6[ebp], 0
je	SHORT $LN21@cff_face_i
push	OFFSET $SG11525
mov	ecx, DWORD PTR _weight$6[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
je	SHORT $LN19@cff_face_i
push	OFFSET $SG11526
mov	edx, DWORD PTR _weight$6[ebp]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN21@cff_face_i
mov	eax, DWORD PTR _flags$27[ebp]
or	eax, 2
mov	DWORD PTR _flags$27[ebp], eax
mov	ecx, DWORD PTR _flags$27[ebp]
and	ecx, 2
jne	SHORT $LN18@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
cmp	DWORD PTR [edx+24], 0
je	SHORT $LN18@cff_face_i
mov	esi, esp
push	4
push	OFFSET $SG11530
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR [eax+24]
push	ecx
call	DWORD PTR __imp__strncmp
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN16@cff_face_i
mov	esi, esp
push	5
push	OFFSET $SG11531
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
call	DWORD PTR __imp__strncmp
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
jne	SHORT $LN18@cff_face_i
mov	ecx, DWORD PTR _flags$27[ebp]
or	ecx, 2
mov	DWORD PTR _flags$27[ebp], ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR _flags$27[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [ecx+132], 65535		
jne	SHORT $LN15@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+8]
or	eax, 512				
mov	ecx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [edx+132], 65535		
je	SHORT $LN14@cff_face_i
movzx	eax, BYTE PTR _pure_cff$[ebp]
test	eax, eax
je	SHORT $LN14@cff_face_i
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 4096				
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _cff$30[ebp]
add	ecx, 116				
mov	DWORD PTR _encoding$2[ebp], ecx
mov	DWORD PTR _nn$3[ebp], 0
jmp	SHORT $LN13@cff_face_i
mov	edx, DWORD PTR _nn$3[ebp]
add	edx, 1
mov	DWORD PTR _nn$3[ebp], edx
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR _nn$3[ebp]
cmp	ecx, DWORD PTR [eax+36]
jae	SHORT $LN11@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _nn$3[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _cmap$4[ebp], edx
mov	eax, DWORD PTR _cmap$4[ebp]
movzx	ecx, WORD PTR [eax+8]
cmp	ecx, 3
jne	SHORT $LN10@cff_face_i
mov	edx, DWORD PTR _cmap$4[ebp]
movzx	eax, WORD PTR [edx+10]
cmp	eax, 1
jne	SHORT $LN10@cff_face_i
jmp	$Skip_Unicode$111
mov	ecx, DWORD PTR _cmap$4[ebp]
movzx	edx, WORD PTR [ecx+8]
test	edx, edx
jne	SHORT $LN9@cff_face_i
jmp	$Skip_Unicode$111
jmp	SHORT $LN12@cff_face_i
movzx	eax, BYTE PTR _pure_cff$[ebp]
test	eax, eax
je	SHORT $LN8@cff_face_i
mov	ecx, DWORD PTR _cff$30[ebp]
cmp	DWORD PTR [ecx+1456], 65535		
je	SHORT $LN8@cff_face_i
jmp	$Exit$110
mov	edx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _cmaprec$5[ebp], edx
mov	eax, 3
mov	WORD PTR _cmaprec$5[ebp+8], ax
mov	ecx, 1
mov	WORD PTR _cmaprec$5[ebp+10], cx
mov	DWORD PTR _cmaprec$5[ebp+4], 1970170211	
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	DWORD PTR _nn$3[ebp], eax
push	0
lea	ecx, DWORD PTR _cmaprec$5[ebp]
push	ecx
push	0
push	OFFSET _cff_cmap_unicode_class_rec
call	_FT_CMap_New
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@cff_face_i
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 163				
je	SHORT $LN7@cff_face_i
jmp	$Exit$110
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _cffface$[ebp]
cmp	DWORD PTR [eax+92], 0
jne	SHORT $Skip_Unicode$111
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _nn$3[ebp]
cmp	edx, DWORD PTR [ecx+36]
je	SHORT $Skip_Unicode$111
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR _nn$3[ebp]
mov	ecx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR [edx+92], ecx
mov	edx, DWORD PTR _encoding$2[ebp]
cmp	DWORD PTR [edx+8], 0
jbe	$Exit$110
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _cmaprec$5[ebp], eax
mov	ecx, 7
mov	WORD PTR _cmaprec$5[ebp+8], cx
mov	edx, DWORD PTR _encoding$2[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN4@cff_face_i
xor	eax, eax
mov	WORD PTR _cmaprec$5[ebp+10], ax
mov	DWORD PTR _cmaprec$5[ebp+4], 1094995778	
mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
jmp	SHORT $LN3@cff_face_i
mov	ecx, DWORD PTR _encoding$2[ebp]
cmp	DWORD PTR [ecx+4], 1
jne	SHORT $LN2@cff_face_i
mov	edx, 1
mov	WORD PTR _cmaprec$5[ebp+10], dx
mov	DWORD PTR _cmaprec$5[ebp+4], 1094992453	
mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
jmp	SHORT $LN3@cff_face_i
mov	eax, 2
mov	WORD PTR _cmaprec$5[ebp+10], ax
mov	DWORD PTR _cmaprec$5[ebp+4], 1094992451	
mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
push	0
lea	ecx, DWORD PTR _cmaprec$5[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _clazz$1[ebp]
push	edx
call	_FT_CMap_New
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN109@cff_face_i
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 196				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	2
DD	$LN108@cff_face_i
DD	-12					
DD	4
DD	$LN106@cff_face_i
DD	-160					
DD	12					
DD	$LN107@cff_face_i
DB	99					
DB	109					
DB	97					
DB	112					
DB	114					
DB	101					
DB	99					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_slot_init PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _font$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2952]
mov	DWORD PTR _pshinter$[ebp], edx
cmp	DWORD PTR _pshinter$[ebp], 0
je	SHORT $LN2@cff_slot_i
push	OFFSET $SG11296
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$2[ebp], eax
cmp	DWORD PTR _module$2[ebp], 0
je	SHORT $LN2@cff_slot_i
mov	esi, esp
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _pshinter$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _funcs$1[ebp], eax
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR _funcs$1[ebp]
mov	DWORD PTR [edx+36], eax
xor	eax, eax
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_slot_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR [ecx+36], 0
pop	ebp
ret	0
ENDP
_cff_size_select PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR _cffsize$[ebp], eax
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	edx, DWORD PTR _strike_index$[ebp]
mov	DWORD PTR [ecx+44], edx
mov	eax, DWORD PTR _strike_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_Select_Metrics
add	esp, 8
mov	eax, DWORD PTR _cffsize$[ebp]
push	eax
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$[ebp], eax
cmp	DWORD PTR _funcs$[ebp], 0
je	$LN6@cff_size_s
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$9[ebp], edx
mov	eax, DWORD PTR _face$9[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _font$8[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	DWORD PTR _internal$7[ebp], eax
mov	ecx, DWORD PTR _font$8[ebp]
mov	edx, DWORD PTR [ecx+1392]
mov	DWORD PTR _top_upm$6[ebp], edx
mov	esi, esp
push	0
push	0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _internal$7[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _funcs$[ebp]
mov	ecx, DWORD PTR [eax+4]
call	ecx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _font$8[ebp]
mov	eax, DWORD PTR [edx+1896]
mov	DWORD PTR _i$5[ebp], eax
jmp	SHORT $LN5@cff_size_s
mov	ecx, DWORD PTR _i$5[ebp]
sub	ecx, 1
mov	DWORD PTR _i$5[ebp], ecx
cmp	DWORD PTR _i$5[ebp], 0
jbe	$LN6@cff_size_s
mov	edx, DWORD PTR _i$5[ebp]
mov	eax, DWORD PTR _font$8[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1896]
mov	DWORD PTR _sub$4[ebp], ecx
mov	edx, DWORD PTR _sub$4[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR _sub_upm$3[ebp], eax
mov	ecx, DWORD PTR _top_upm$6[ebp]
cmp	ecx, DWORD PTR _sub_upm$3[ebp]
je	SHORT $LN2@cff_size_s
mov	edx, DWORD PTR _sub_upm$3[ebp]
push	edx
mov	eax, DWORD PTR _top_upm$6[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _x_scale$2[ebp], eax
mov	eax, DWORD PTR _sub_upm$3[ebp]
push	eax
mov	ecx, DWORD PTR _top_upm$6[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _y_scale$1[ebp], eax
jmp	SHORT $LN1@cff_size_s
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _x_scale$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _y_scale$1[ebp], ecx
mov	esi, esp
push	0
push	0
mov	edx, DWORD PTR _y_scale$1[ebp]
push	edx
mov	eax, DWORD PTR _x_scale$2[ebp]
push	eax
mov	ecx, DWORD PTR _i$5[ebp]
mov	edx, DWORD PTR _internal$7[ebp]
mov	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _funcs$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN4@cff_size_s
xor	eax, eax
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_size_request PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR _cffsize$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
and	eax, 2
je	SHORT $LN9@cff_size_r
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _cffface$12[ebp], edx
mov	eax, DWORD PTR _cffface$12[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$11[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _strike_index$10[ebp]
push	edx
mov	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _cffface$12[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$11[ebp]
mov	eax, DWORD PTR [edx+104]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN8@cff_size_r
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR [ecx+44], -1
jmp	SHORT $LN9@cff_size_r
mov	edx, DWORD PTR _strike_index$10[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_cff_size_select
add	esp, 8
jmp	$LN10@cff_size_r
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_Request_Metrics
add	esp, 8
mov	ecx, DWORD PTR _cffsize$[ebp]
push	ecx
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$[ebp], eax
cmp	DWORD PTR _funcs$[ebp], 0
je	$LN6@cff_size_r
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _cffface$9[ebp], eax
mov	ecx, DWORD PTR _cffface$9[ebp]
mov	edx, DWORD PTR [ecx+656]
mov	DWORD PTR _font$8[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR _internal$7[ebp], ecx
mov	edx, DWORD PTR _font$8[ebp]
mov	eax, DWORD PTR [edx+1392]
mov	DWORD PTR _top_upm$6[ebp], eax
mov	esi, esp
push	0
push	0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _internal$7[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _funcs$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _font$8[ebp]
mov	ecx, DWORD PTR [eax+1896]
mov	DWORD PTR _i$5[ebp], ecx
jmp	SHORT $LN5@cff_size_r
mov	edx, DWORD PTR _i$5[ebp]
sub	edx, 1
mov	DWORD PTR _i$5[ebp], edx
cmp	DWORD PTR _i$5[ebp], 0
jbe	$LN6@cff_size_r
mov	eax, DWORD PTR _i$5[ebp]
mov	ecx, DWORD PTR _font$8[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1896]
mov	DWORD PTR _sub$4[ebp], edx
mov	eax, DWORD PTR _sub$4[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	DWORD PTR _sub_upm$3[ebp], ecx
mov	edx, DWORD PTR _top_upm$6[ebp]
cmp	edx, DWORD PTR _sub_upm$3[ebp]
je	SHORT $LN2@cff_size_r
mov	eax, DWORD PTR _sub_upm$3[ebp]
push	eax
mov	ecx, DWORD PTR _top_upm$6[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _sub_upm$3[ebp]
push	ecx
mov	edx, DWORD PTR _top_upm$6[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _y_scale$1[ebp], eax
jmp	SHORT $LN1@cff_size_r
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _y_scale$1[ebp], edx
mov	esi, esp
push	0
push	0
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _x_scale$2[ebp]
push	ecx
mov	edx, DWORD PTR _i$5[ebp]
mov	eax, DWORD PTR _internal$7[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	edx, DWORD PTR _funcs$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN4@cff_size_r
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@cff_size_r
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN13@cff_size_r
DD	-24					
DD	4
DD	$LN12@cff_size_r
DB	115					
DB	116					
DB	114					
DB	105					
DB	107					
DB	101					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_cff_size_done PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _font$[ebp], ecx
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	DWORD PTR _internal$[ebp], eax
cmp	DWORD PTR _internal$[ebp], 0
je	SHORT $LN6@cff_size_d
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$2[ebp], eax
cmp	DWORD PTR _funcs$2[ebp], 0
je	SHORT $LN6@cff_size_d
mov	esi, esp
mov	edx, DWORD PTR _internal$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _funcs$2[ebp]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+1896]
mov	DWORD PTR _i$1[ebp], ecx
jmp	SHORT $LN3@cff_size_d
mov	edx, DWORD PTR _i$1[ebp]
sub	edx, 1
mov	DWORD PTR _i$1[ebp], edx
cmp	DWORD PTR _i$1[ebp], 0
jbe	SHORT $LN6@cff_size_d
mov	esi, esp
mov	eax, DWORD PTR _i$1[ebp]
mov	ecx, DWORD PTR _internal$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR _funcs$2[ebp]
mov	ecx, DWORD PTR [eax+8]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN2@cff_size_d
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_size_init PROC
push	ebp
mov	ebp, esp
sub	esp, 252				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-252]
mov	ecx, 63					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$[ebp], eax
cmp	DWORD PTR _funcs$[ebp], 0
je	$LN7@cff_size_i
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _face$7[ebp], eax
mov	ecx, DWORD PTR _face$7[ebp]
mov	edx, DWORD PTR [ecx+656]
mov	DWORD PTR _font$6[ebp], edx
mov	DWORD PTR _internal$5[ebp], 0
mov	eax, DWORD PTR _cffsize$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$3[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	1028					
mov	ecx, DWORD PTR _memory$3[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _internal$5[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@cff_size_i
jmp	$Exit$14
lea	edx, DWORD PTR _priv$4[ebp]
push	edx
mov	eax, DWORD PTR _font$6[ebp]
add	eax, 1324				
push	eax
call	_cff_make_private_dict
add	esp, 8
mov	ecx, DWORD PTR _internal$5[ebp]
mov	esi, esp
push	ecx
lea	edx, DWORD PTR _priv$4[ebp]
push	edx
mov	eax, DWORD PTR _cffsize$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+100]
push	edx
mov	eax, DWORD PTR _funcs$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_size_i
jmp	$Exit$14
mov	edx, DWORD PTR _font$6[ebp]
mov	eax, DWORD PTR [edx+1896]
mov	DWORD PTR _i$2[ebp], eax
jmp	SHORT $LN4@cff_size_i
mov	ecx, DWORD PTR _i$2[ebp]
sub	ecx, 1
mov	DWORD PTR _i$2[ebp], ecx
cmp	DWORD PTR _i$2[ebp], 0
jbe	SHORT $LN2@cff_size_i
mov	edx, DWORD PTR _i$2[ebp]
mov	eax, DWORD PTR _font$6[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1896]
mov	DWORD PTR _sub$1[ebp], ecx
lea	edx, DWORD PTR _priv$4[ebp]
push	edx
mov	eax, DWORD PTR _sub$1[ebp]
push	eax
call	_cff_make_private_dict
add	esp, 8
mov	ecx, DWORD PTR _i$2[ebp]
mov	edx, DWORD PTR _internal$5[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	esi, esp
push	eax
lea	ecx, DWORD PTR _priv$4[ebp]
push	ecx
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+100]
push	ecx
mov	edx, DWORD PTR _funcs$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@cff_size_i
jmp	SHORT $Exit$14
jmp	$LN3@cff_size_i
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	edx, DWORD PTR _internal$5[ebp]
mov	DWORD PTR [ecx+40], edx
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+44], -1
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@cff_size_i
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 252				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN12@cff_size_i
DD	-16					
DD	4
DD	$LN10@cff_size_i
DD	-236					
DD	196					
DD	$LN11@cff_size_i
DB	112					
DB	114					
DB	105					
DB	118					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cf2_doFlex PROC
push	ebp
mov	ebp, esp
sub	esp, 124				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 31					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _vals$[ebp+ecx], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _curY$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _vals$[ebp+ecx], eax
mov	DWORD PTR _index$[ebp], 0
mov	ecx, 1
imul	edx, ecx, 9
mov	eax, DWORD PTR _readFromStack$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
test	ecx, ecx
jne	SHORT $LN19@cf2_doFlex
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN20@cf2_doFlex
mov	DWORD PTR tv72[ebp], 0
mov	dl, BYTE PTR tv72[ebp]
mov	BYTE PTR _isHFlex$[ebp], dl
movzx	eax, BYTE PTR _isHFlex$[ebp]
test	eax, eax
je	SHORT $LN21@cf2_doFlex
mov	DWORD PTR tv76[ebp], 9
jmp	SHORT $LN22@cf2_doFlex
mov	DWORD PTR tv76[ebp], 10			
mov	ecx, DWORD PTR tv76[ebp]
mov	DWORD PTR _top$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN16@cf2_doFlex
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _top$[ebp]
jge	SHORT $LN14@cf2_doFlex
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _vals$[ebp+edx*4]
mov	DWORD PTR _vals$[ebp+ecx*4+8], eax
mov	ecx, DWORD PTR _readFromStack$[ebp]
add	ecx, DWORD PTR _i$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN13@cf2_doFlex
mov	eax, DWORD PTR _index$[ebp]
mov	DWORD PTR tv93[ebp], eax
mov	ecx, DWORD PTR _index$[ebp]
add	ecx, 1
mov	DWORD PTR _index$[ebp], ecx
mov	edx, DWORD PTR tv93[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
add	eax, DWORD PTR _vals$[ebp+ecx*4+8]
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR _vals$[ebp+edx*4+8], eax
jmp	SHORT $LN15@cf2_doFlex
movzx	eax, BYTE PTR _isHFlex$[ebp]
test	eax, eax
je	SHORT $LN12@cf2_doFlex
mov	ecx, 4
imul	edx, ecx, 11
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _vals$[ebp+edx], ecx
movzx	edx, BYTE PTR _doConditionalLastRead$[ebp]
test	edx, edx
je	$LN11@cf2_doFlex
mov	eax, 4
imul	ecx, eax, 10
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR _vals$[ebp+ecx]
sub	eax, DWORD PTR [edx]
jns	SHORT $LN23@cf2_doFlex
mov	ecx, 4
imul	edx, ecx, 10
mov	eax, DWORD PTR _curX$[ebp]
mov	ecx, DWORD PTR _vals$[ebp+edx]
sub	ecx, DWORD PTR [eax]
neg	ecx
mov	DWORD PTR tv149[ebp], ecx
jmp	SHORT $LN24@cf2_doFlex
mov	edx, 4
imul	eax, edx, 10
mov	ecx, DWORD PTR _curX$[ebp]
mov	edx, DWORD PTR _vals$[ebp+eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR tv149[ebp], edx
mov	eax, 4
imul	ecx, eax, 11
mov	edx, DWORD PTR _curY$[ebp]
mov	eax, DWORD PTR _vals$[ebp+ecx]
sub	eax, DWORD PTR [edx]
jns	SHORT $LN25@cf2_doFlex
mov	ecx, 4
imul	edx, ecx, 11
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR _vals$[ebp+edx]
sub	ecx, DWORD PTR [eax]
neg	ecx
mov	DWORD PTR tv161[ebp], ecx
jmp	SHORT $LN26@cf2_doFlex
mov	edx, 4
imul	eax, edx, 11
mov	ecx, DWORD PTR _curY$[ebp]
mov	edx, DWORD PTR _vals$[ebp+eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR tv161[ebp], edx
mov	eax, DWORD PTR tv149[ebp]
cmp	eax, DWORD PTR tv161[ebp]
jle	SHORT $LN27@cf2_doFlex
mov	BYTE PTR tv163[ebp], 1
jmp	SHORT $LN28@cf2_doFlex
mov	BYTE PTR tv163[ebp], 0
mov	cl, BYTE PTR tv163[ebp]
mov	BYTE PTR _lastIsX$2[ebp], cl
mov	edx, DWORD PTR _index$[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	DWORD PTR _lastVal$1[ebp], eax
movzx	ecx, BYTE PTR _lastIsX$2[ebp]
test	ecx, ecx
je	SHORT $LN10@cf2_doFlex
mov	edx, 4
imul	eax, edx, 10
mov	ecx, DWORD PTR _vals$[ebp+eax]
add	ecx, DWORD PTR _lastVal$1[ebp]
mov	edx, 4
imul	eax, edx, 12
mov	DWORD PTR _vals$[ebp+eax], ecx
mov	ecx, 4
imul	edx, ecx, 13
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _vals$[ebp+edx], ecx
jmp	SHORT $LN9@cf2_doFlex
mov	edx, 4
imul	eax, edx, 12
mov	ecx, DWORD PTR _curX$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _vals$[ebp+eax], edx
mov	eax, 4
imul	ecx, eax, 11
mov	edx, DWORD PTR _vals$[ebp+ecx]
add	edx, DWORD PTR _lastVal$1[ebp]
mov	eax, 4
imul	ecx, eax, 13
mov	DWORD PTR _vals$[ebp+ecx], edx
jmp	$LN8@cf2_doFlex
mov	edx, 1
imul	eax, edx, 10
mov	ecx, DWORD PTR _readFromStack$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
test	edx, edx
je	SHORT $LN7@cf2_doFlex
mov	eax, DWORD PTR _index$[ebp]
mov	DWORD PTR tv193[ebp], eax
mov	ecx, DWORD PTR _index$[ebp]
add	ecx, 1
mov	DWORD PTR _index$[ebp], ecx
mov	edx, DWORD PTR tv193[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	ecx, 4
imul	edx, ecx, 10
add	eax, DWORD PTR _vals$[ebp+edx]
mov	ecx, 4
imul	edx, ecx, 12
mov	DWORD PTR _vals$[ebp+edx], eax
jmp	SHORT $LN6@cf2_doFlex
mov	eax, 4
imul	ecx, eax, 12
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _vals$[ebp+ecx], eax
mov	ecx, 1
imul	edx, ecx, 11
mov	eax, DWORD PTR _readFromStack$[ebp]
movzx	ecx, BYTE PTR [eax+edx]
test	ecx, ecx
je	SHORT $LN5@cf2_doFlex
mov	edx, 4
imul	esi, edx, 11
mov	eax, DWORD PTR _index$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _vals$[ebp+esi]
mov	edx, 4
imul	ecx, edx, 13
mov	DWORD PTR _vals$[ebp+ecx], eax
jmp	SHORT $LN8@cf2_doFlex
mov	edx, 4
imul	eax, edx, 13
mov	ecx, DWORD PTR _curY$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _vals$[ebp+eax], edx
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@cf2_doFlex
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
cmp	DWORD PTR _j$[ebp], 2
jge	SHORT $LN1@cf2_doFlex
imul	ecx, DWORD PTR _j$[ebp], 6
mov	edx, DWORD PTR _vals$[ebp+ecx*4+28]
push	edx
imul	eax, DWORD PTR _j$[ebp], 6
mov	ecx, DWORD PTR _vals$[ebp+eax*4+24]
push	ecx
imul	edx, DWORD PTR _j$[ebp], 6
mov	eax, DWORD PTR _vals$[ebp+edx*4+20]
push	eax
imul	ecx, DWORD PTR _j$[ebp], 6
mov	edx, DWORD PTR _vals$[ebp+ecx*4+16]
push	edx
imul	eax, DWORD PTR _j$[ebp], 6
mov	ecx, DWORD PTR _vals$[ebp+eax*4+12]
push	ecx
imul	edx, DWORD PTR _j$[ebp], 6
mov	eax, DWORD PTR _vals$[ebp+edx*4+8]
push	eax
mov	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
call	_cf2_glyphpath_curveTo
add	esp, 28					
jmp	SHORT $LN2@cf2_doFlex
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_clear
add	esp, 4
mov	eax, 4
imul	ecx, eax, 12
mov	edx, DWORD PTR _curX$[ebp]
mov	eax, DWORD PTR _vals$[ebp+ecx]
mov	DWORD PTR [edx], eax
mov	ecx, 4
imul	edx, ecx, 13
mov	eax, DWORD PTR _curY$[ebp]
mov	ecx, DWORD PTR _vals$[ebp+edx]
mov	DWORD PTR [eax], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN31@cf2_doFlex
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN30@cf2_doFlex
DD	-64					
DD	56					
DD	$LN29@cf2_doFlex
DB	118					
DB	97					
DB	108					
DB	115					
DB	0
ENDP
_cf2_doStems PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$[ebp], eax
mov	ecx, DWORD PTR _count$[ebp]
and	ecx, 1
mov	BYTE PTR _hasWidthArg$[ebp], cl
mov	edx, DWORD PTR _hintOffset$[ebp]
mov	DWORD PTR _position$[ebp], edx
movzx	eax, BYTE PTR _hasWidthArg$[ebp]
test	eax, eax
je	SHORT $LN5@cf2_doStem
mov	ecx, DWORD PTR _haveWidth$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
jne	SHORT $LN5@cf2_doStem
push	0
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+132]
push	edx
call	_cf2_getNominalWidthX
add	esp, 4
add	esi, eax
mov	eax, DWORD PTR _width$[ebp]
mov	DWORD PTR [eax], esi
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+753]
test	eax, eax
je	SHORT $LN4@cf2_doStem
jmp	$exit$13
movzx	ecx, BYTE PTR _hasWidthArg$[ebp]
test	ecx, ecx
je	SHORT $LN8@cf2_doStem
mov	DWORD PTR tv85[ebp], 1
jmp	SHORT $LN9@cf2_doStem
mov	DWORD PTR tv85[ebp], 0
mov	edx, DWORD PTR tv85[ebp]
mov	DWORD PTR _i$[ebp], edx
jmp	SHORT $LN3@cf2_doStem
mov	eax, DWORD PTR _i$[ebp]
add	eax, 2
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN1@cf2_doStem
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _position$[ebp]
mov	DWORD PTR _position$[ebp], eax
mov	ecx, DWORD PTR _position$[ebp]
mov	DWORD PTR _stemhint$1[ebp+4], ecx
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _position$[ebp]
mov	DWORD PTR _position$[ebp], eax
mov	ecx, DWORD PTR _position$[ebp]
mov	DWORD PTR _stemhint$1[ebp+8], ecx
mov	BYTE PTR _stemhint$1[ebp], 0
mov	DWORD PTR _stemhint$1[ebp+12], 0
mov	edx, DWORD PTR _stemhint$1[ebp+12]
mov	DWORD PTR _stemhint$1[ebp+16], edx
lea	eax, DWORD PTR _stemhint$1[ebp]
push	eax
mov	ecx, DWORD PTR _stemHintArray$[ebp]
push	ecx
call	_cf2_arrstack_push
add	esp, 8
jmp	SHORT $LN2@cf2_doStem
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_clear
add	esp, 4
mov	eax, DWORD PTR _haveWidth$[ebp]
mov	BYTE PTR [eax], 1
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@cf2_doStem
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN11@cf2_doStem
DD	-44					
DD	20					
DD	$LN10@cf2_doStem
DB	115					
DB	116					
DB	101					
DB	109					
DB	104					
DB	105					
DB	110					
DB	116					
DB	0
ENDP
_cf2_hintmask_read PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _bitCount$[ebp]
push	eax
mov	ecx, DWORD PTR _hintmask$[ebp]
push	ecx
call	_cf2_hintmask_setCounts
add	esp, 8
test	eax, eax
jne	SHORT $LN19@cf2_hintma
jmp	$LN21@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
cmp	DWORD PTR [edx+12], 0
ja	SHORT $LN18@cf2_hintma
push	OFFSET $SG14497
push	150					
push	OFFSET $SG14498
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN19@cf2_hintma
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN14@cf2_hintma
push	OFFSET $SG14503
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN15@cf2_hintma
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN11@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+12]
jae	SHORT $LN4@cf2_hintma
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
call	_cf2_buf_readByte
add	esp, 4
mov	edx, DWORD PTR _hintmask$[ebp]
add	edx, DWORD PTR _i$[ebp]
mov	BYTE PTR [edx+16], al
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN7@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
add	edx, DWORD PTR _i$[ebp]
movzx	eax, BYTE PTR [edx+16]
push	eax
push	OFFSET $SG14512
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN8@cf2_hintma
jmp	SHORT $LN10@cf2_hintma
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cf2_hintma
push	OFFSET $SG14517
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN4@cf2_hintma
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmask_setCounts PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _bitCount$[ebp], 96		
jbe	SHORT $LN1@cf2_hintma
push	OFFSET $SG14482
push	115					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
push	eax
mov	eax, DWORD PTR _hintmask$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN2@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR _bitCount$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 7
shr	edx, 3
mov	eax, DWORD PTR _hintmask$[ebp]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	BYTE PTR [ecx+4], 1
mov	edx, DWORD PTR _hintmask$[ebp]
mov	BYTE PTR [edx+5], 1
mov	eax, DWORD PTR _bitCount$[ebp]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_clear PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [ecx+392], eax
pop	ebp
ret	0
ENDP
_cf2_stack_getReal PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 48					
jbe	SHORT $LN9@cf2_stack_
push	OFFSET $SG15410
push	178					
push	OFFSET $SG15411
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
cmp	DWORD PTR _idx$[ebp], eax
jb	SHORT $LN6@cf2_stack_
push	OFFSET $SG15413
push	182					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN11@cf2_stack_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+edx*8+12]
mov	DWORD PTR tv86[ebp], ecx
cmp	DWORD PTR tv86[ebp], 1
je	SHORT $LN2@cf2_stack_
cmp	DWORD PTR tv86[ebp], 2
je	SHORT $LN3@cf2_stack_
jmp	SHORT $LN1@cf2_stack_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [eax+edx*8+8]
shl	eax, 16					
jmp	SHORT $LN11@cf2_stack_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [edx+ecx*8+8], 0
jge	SHORT $LN13@cf2_stack_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+8]
neg	edx
add	edx, 8192				
sar	edx, 14					
neg	edx
mov	DWORD PTR tv143[ebp], edx
jmp	SHORT $LN14@cf2_stack_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+8]
add	edx, 8192				
sar	edx, 14					
mov	DWORD PTR tv143[ebp], edx
mov	eax, DWORD PTR tv143[ebp]
jmp	SHORT $LN11@cf2_stack_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [ecx+eax*8+8]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_stack_popFixed PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN6@cf2_stack_
push	OFFSET $SG15389
push	154					
push	161					
call	_FT_Throw
add	esp, 12					
or	eax, 161				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	$LN7@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
sub	edx, 8
mov	eax, DWORD PTR _stack$[ebp]
mov	DWORD PTR [eax+392], edx
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR tv82[ebp], eax
cmp	DWORD PTR tv82[ebp], 1
je	SHORT $LN2@cf2_stack_
cmp	DWORD PTR tv82[ebp], 2
je	SHORT $LN3@cf2_stack_
jmp	SHORT $LN1@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR [edx]
shl	eax, 16					
jmp	SHORT $LN7@cf2_stack_
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
cmp	DWORD PTR [ecx], 0
jge	SHORT $LN9@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+392]
mov	ecx, DWORD PTR [eax]
neg	ecx
add	ecx, 8192				
sar	ecx, 14					
neg	ecx
mov	DWORD PTR tv131[ebp], ecx
jmp	SHORT $LN10@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+392]
mov	ecx, DWORD PTR [eax]
add	ecx, 8192				
sar	ecx, 14					
mov	DWORD PTR tv131[ebp], ecx
mov	eax, DWORD PTR tv131[ebp]
jmp	SHORT $LN7@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+392]
mov	eax, DWORD PTR [eax]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_stack_popInt PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN2@cf2_stack_
push	OFFSET $SG15382
push	132					
push	161					
call	_FT_Throw
add	esp, 12					
or	eax, 161				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN3@cf2_stack_
mov	ecx, 8
imul	edx, ecx, -1
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
cmp	DWORD PTR [ecx+edx+4], 2
je	SHORT $LN1@cf2_stack_
push	OFFSET $SG15384
push	137					
push	160					
call	_FT_Throw
add	esp, 12					
or	eax, 160				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
xor	eax, eax
jmp	SHORT $LN3@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
sub	edx, 8
mov	eax, DWORD PTR _stack$[ebp]
mov	DWORD PTR [eax+392], edx
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR [edx]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_pushFixed PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 48
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN1@cf2_stack_
push	OFFSET $SG15377
push	116					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
jmp	SHORT $LN2@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR _val$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
add	ecx, 8
mov	edx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [edx+392], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_pushInt PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 48
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
cmp	DWORD PTR [ecx+392], eax
jne	SHORT $LN1@cf2_stack_
push	OFFSET $SG15370
push	100					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
jmp	SHORT $LN2@cf2_stack_
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	eax, DWORD PTR _val$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
mov	DWORD PTR [edx+4], 2
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax+392]
add	ecx, 8
mov	edx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [edx+392], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_stack_count PROC
push	ebp
mov	ebp, esp
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR [ecx+392]
sub	edx, eax
sar	edx, 3
mov	eax, edx
pop	ebp
ret	0
ENDP
_cf2_stack_free PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _stack$[ebp], 0
je	SHORT $LN5@cf2_stack_
mov	eax, DWORD PTR _stack$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _stack$[ebp]
push	edx
mov	eax, DWORD PTR _memory$1[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _stack$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@cf2_stack_
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_stack_init PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _stack$[ebp], 0
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	396					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_qalloc
add	esp, 12					
mov	DWORD PTR _stack$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@cf2_stack_
mov	edx, DWORD PTR _stack$[ebp]
mov	eax, DWORD PTR _memory$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _stack$[ebp]
mov	edx, DWORD PTR _e$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _stack$[ebp]
lea	eax, DWORD PTR [edx+ecx+8]
mov	ecx, DWORD PTR _stack$[ebp]
mov	DWORD PTR [ecx+392], eax
mov	eax, DWORD PTR _stack$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@cf2_stack_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN5@cf2_stack_
DD	-8					
DD	4
DD	$LN4@cf2_stack_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cf2_glyphpath_computeOffset PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _x2$[ebp]
sub	eax, DWORD PTR _x1$[ebp]
mov	DWORD PTR _dx$[ebp], eax
mov	ecx, DWORD PTR _y2$[ebp]
sub	ecx, DWORD PTR _y1$[ebp]
mov	DWORD PTR _dy$[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx]
movzx	ecx, BYTE PTR [eax+192]
test	ecx, ecx
je	SHORT $LN24@cf2_glyphp
mov	edx, DWORD PTR _dx$[ebp]
neg	edx
mov	DWORD PTR _dx$[ebp], edx
mov	eax, DWORD PTR _dy$[ebp]
neg	eax
mov	DWORD PTR _dy$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11666]
test	ecx, ecx
jne	SHORT $LN23@cf2_glyphp
jmp	$LN25@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	esi, DWORD PTR [edx+4]
mov	eax, DWORD PTR _y2$[ebp]
push	eax
mov	ecx, DWORD PTR _x2$[ebp]
push	ecx
mov	edx, DWORD PTR _y1$[ebp]
push	edx
mov	eax, DWORD PTR _x1$[ebp]
push	eax
call	_cf2_getWindingMomentum
add	esp, 16					
add	eax, DWORD PTR [esi+16]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+16], eax
cmp	DWORD PTR _dx$[ebp], 0
jl	$LN22@cf2_glyphp
cmp	DWORD PTR _dy$[ebp], 0
jl	$LN21@cf2_glyphp
mov	eax, DWORD PTR _dy$[ebp]
shl	eax, 1
cmp	DWORD PTR _dx$[ebp], eax
jle	SHORT $LN20@cf2_glyphp
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx], 0
jmp	SHORT $LN19@cf2_glyphp
mov	eax, DWORD PTR _dx$[ebp]
shl	eax, 1
cmp	DWORD PTR _dy$[ebp], eax
jle	SHORT $LN18@cf2_glyphp
mov	ecx, DWORD PTR _x$[ebp]
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
mov	DWORD PTR [ecx], eax
mov	ecx, DWORD PTR _y$[ebp]
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN19@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
push	edx
push	45875					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
push	eax
push	19661					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
jmp	$LN16@cf2_glyphp
imul	edx, DWORD PTR _dy$[ebp], -2
cmp	DWORD PTR _dx$[ebp], edx
jle	SHORT $LN15@cf2_glyphp
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], 0
jmp	SHORT $LN16@cf2_glyphp
mov	edx, DWORD PTR _dy$[ebp]
neg	edx
mov	eax, DWORD PTR _dx$[ebp]
shl	eax, 1
cmp	edx, eax
jle	SHORT $LN13@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
neg	edx
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _y$[ebp]
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN16@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
push	edx
push	-45874					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
push	eax
push	19661					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
jmp	$LN25@cf2_glyphp
cmp	DWORD PTR _dy$[ebp], 0
jl	$LN10@cf2_glyphp
mov	edx, DWORD PTR _dx$[ebp]
neg	edx
mov	eax, DWORD PTR _dy$[ebp]
shl	eax, 1
cmp	edx, eax
jle	SHORT $LN9@cf2_glyphp
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
shl	eax, 1
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN8@cf2_glyphp
imul	edx, DWORD PTR _dx$[ebp], -2
cmp	DWORD PTR _dy$[ebp], edx
jle	SHORT $LN7@cf2_glyphp
mov	eax, DWORD PTR _x$[ebp]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _y$[ebp]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11692]
mov	DWORD PTR [eax], edx
jmp	SHORT $LN8@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11688]
push	ecx
push	45875					
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11692]
push	ecx
push	111411					
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx], eax
jmp	$LN25@cf2_glyphp
mov	eax, DWORD PTR _dx$[ebp]
neg	eax
imul	ecx, DWORD PTR _dy$[ebp], -2
cmp	eax, ecx
jle	SHORT $LN4@cf2_glyphp
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11692]
shl	ecx, 1
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN25@cf2_glyphp
mov	eax, DWORD PTR _dy$[ebp]
neg	eax
imul	ecx, DWORD PTR _dx$[ebp], -2
cmp	eax, ecx
jle	SHORT $LN2@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
neg	eax
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _y$[ebp]
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11692]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN25@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
push	eax
push	-45874					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
push	eax
push	111411					
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_pushMove PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _params$[ebp+32], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11728]
mov	edx, DWORD PTR [eax+11732]
mov	DWORD PTR _params$[ebp], ecx
mov	DWORD PTR _params$[ebp+4], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 8
push	eax
call	_cf2_hintmap_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN1@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11740]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11736]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_moveTo
add	esp, 12					
mov	ecx, DWORD PTR _start$[ebp+4]
push	ecx
mov	edx, DWORD PTR _start$[ebp]
push	edx
lea	eax, DWORD PTR _params$[ebp+8]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	esi, esp
lea	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _params$[ebp+8]
mov	DWORD PTR [eax+11728], ecx
mov	edx, DWORD PTR _params$[ebp+12]
mov	DWORD PTR [eax+11732], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _start$[ebp]
mov	DWORD PTR [eax+11704], ecx
mov	edx, DWORD PTR _start$[ebp+4]
mov	DWORD PTR [eax+11708], edx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN6@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN5@cf2_glyphp
DD	-44					
DD	36					
DD	$LN4@cf2_glyphp
DB	112					
DB	97					
DB	114					
DB	97					
DB	109					
DB	115					
DB	0
ENDP
_cf2_glyphpath_pushPrevElem PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _intersection$[ebp], 0
mov	DWORD PTR _intersection$[ebp+4], 0
mov	BYTE PTR _useIntersection$[ebp], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [eax+11748], 2
je	SHORT $LN23@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11748], 4
je	SHORT $LN23@cf2_glyphp
push	OFFSET $SG14238
push	1247					
push	OFFSET $SG14239
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN24@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [eax+11748], 2
jne	SHORT $LN20@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11752				
mov	DWORD PTR _prevP0$[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 11760				
mov	DWORD PTR _prevP1$[ebp], edx
jmp	SHORT $LN19@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 11768				
mov	DWORD PTR _prevP0$[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11776				
mov	DWORD PTR _prevP1$[ebp], ecx
mov	edx, DWORD PTR _prevP1$[ebp]
mov	eax, DWORD PTR _nextP0$[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax]
jne	SHORT $LN17@cf2_glyphp
mov	edx, DWORD PTR _prevP1$[ebp]
mov	eax, DWORD PTR _nextP0$[ebp]
mov	ecx, DWORD PTR [edx+4]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN18@cf2_glyphp
lea	edx, DWORD PTR _intersection$[ebp]
push	edx
lea	eax, DWORD PTR _nextP1$[ebp]
push	eax
mov	ecx, DWORD PTR _nextP0$[ebp]
push	ecx
mov	edx, DWORD PTR _prevP1$[ebp]
push	edx
mov	eax, DWORD PTR _prevP0$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_computeIntersection
add	esp, 24					
mov	BYTE PTR _useIntersection$[ebp], al
movzx	edx, BYTE PTR _useIntersection$[ebp]
test	edx, edx
je	SHORT $LN18@cf2_glyphp
mov	eax, DWORD PTR _prevP1$[ebp]
mov	ecx, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _intersection$[ebp+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11728]
mov	edx, DWORD PTR [eax+11732]
mov	DWORD PTR _params$[ebp], ecx
mov	DWORD PTR _params$[ebp+4], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11748]
mov	DWORD PTR tv128[ebp], ecx
cmp	DWORD PTR tv128[ebp], 2
je	SHORT $LN13@cf2_glyphp
cmp	DWORD PTR tv128[ebp], 4
je	$LN8@cf2_glyphp
jmp	$LN14@cf2_glyphp
mov	DWORD PTR _params$[ebp+32], 2
movzx	edx, BYTE PTR _close$[ebp]
test	edx, edx
je	SHORT $LN12@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11764]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11760]
push	eax
lea	ecx, DWORD PTR _params$[ebp+8]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 3876				
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_hintPoint
add	esp, 20					
jmp	SHORT $LN11@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11764]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11760]
push	ecx
lea	edx, DWORD PTR _params$[ebp+8]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	edx, DWORD PTR _params$[ebp]
cmp	edx, DWORD PTR _params$[ebp+8]
jne	SHORT $LN9@cf2_glyphp
mov	eax, DWORD PTR _params$[ebp+4]
cmp	eax, DWORD PTR _params$[ebp+12]
je	SHORT $LN10@cf2_glyphp
mov	esi, esp
lea	ecx, DWORD PTR _params$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _params$[ebp+8]
mov	DWORD PTR [ecx+11728], edx
mov	eax, DWORD PTR _params$[ebp+12]
mov	DWORD PTR [ecx+11732], eax
jmp	$LN14@cf2_glyphp
mov	DWORD PTR _params$[ebp+32], 4
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11764]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11760]
push	ecx
lea	edx, DWORD PTR _params$[ebp+8]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11772]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11768]
push	edx
lea	eax, DWORD PTR _params$[ebp+16]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11780]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11776]
push	eax
lea	ecx, DWORD PTR _params$[ebp+24]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	esi, esp
lea	ecx, DWORD PTR _params$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+12]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _params$[ebp+24]
mov	DWORD PTR [ecx+11728], edx
mov	eax, DWORD PTR _params$[ebp+28]
mov	DWORD PTR [ecx+11732], eax
movzx	ecx, BYTE PTR _useIntersection$[ebp]
test	ecx, ecx
je	SHORT $LN6@cf2_glyphp
movzx	edx, BYTE PTR _close$[ebp]
test	edx, edx
je	$LN7@cf2_glyphp
movzx	eax, BYTE PTR _close$[ebp]
test	eax, eax
je	SHORT $LN5@cf2_glyphp
mov	ecx, DWORD PTR _nextP0$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _nextP0$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	edx, DWORD PTR _params$[ebp+8]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 3876				
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
jmp	SHORT $LN4@cf2_glyphp
mov	edx, DWORD PTR _nextP0$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _nextP0$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
lea	eax, DWORD PTR _params$[ebp+8]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_hintPoint
add	esp, 20					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _params$[ebp+8]
cmp	ecx, DWORD PTR [eax+11728]
jne	SHORT $LN2@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _params$[ebp+12]
cmp	eax, DWORD PTR [edx+11732]
je	SHORT $LN7@cf2_glyphp
mov	DWORD PTR _params$[ebp+32], 2
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11728]
mov	eax, DWORD PTR [ecx+11732]
mov	DWORD PTR _params$[ebp], edx
mov	DWORD PTR _params$[ebp+4], eax
mov	esi, esp
lea	ecx, DWORD PTR _params$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _params$[ebp+8]
mov	DWORD PTR [ecx+11728], edx
mov	eax, DWORD PTR _params$[ebp+12]
mov	DWORD PTR [ecx+11732], eax
movzx	ecx, BYTE PTR _useIntersection$[ebp]
test	ecx, ecx
je	SHORT $LN25@cf2_glyphp
mov	edx, DWORD PTR _nextP0$[ebp]
mov	eax, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _intersection$[ebp+4]
mov	DWORD PTR [edx+4], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN29@cf2_glyphp
DD	-44					
DD	36					
DD	$LN27@cf2_glyphp
DD	-68					
DD	8
DD	$LN28@cf2_glyphp
DB	105					
DB	110					
DB	116					
DB	101					
DB	114					
DB	115					
DB	101					
DB	99					
DB	116					
DB	105					
DB	111					
DB	110					
DB	0
DB	112					
DB	97					
DB	114					
DB	97					
DB	109					
DB	115					
DB	0
ENDP
_cf2_glyphpath_computeIntersection PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _u$[ebp], edx
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _u$[ebp+4], edx
mov	eax, DWORD PTR _v2$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _v$[ebp], edx
mov	eax, DWORD PTR _v2$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _v$[ebp+4], edx
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _w$[ebp], edx
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
add	edx, 16					
sar	edx, 5
mov	DWORD PTR _w$[ebp+4], edx
mov	eax, DWORD PTR _v$[ebp+4]
push	eax
mov	ecx, DWORD PTR _u$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _u$[ebp+4]
push	eax
call	_FT_MulFix_i386
add	esp, 8
sub	esi, eax
mov	DWORD PTR _denominator$[ebp], esi
jne	SHORT $LN7@cf2_glyphp
xor	al, al
jmp	$LN8@cf2_glyphp
mov	ecx, DWORD PTR _denominator$[ebp]
push	ecx
mov	edx, DWORD PTR _v$[ebp+4]
push	edx
mov	eax, DWORD PTR _w$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _v$[ebp]
push	ecx
mov	edx, DWORD PTR _w$[ebp+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
sub	esi, eax
push	esi
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _s$[ebp], eax
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _s$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _u1$[ebp]
add	eax, DWORD PTR [ecx]
mov	edx, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _s$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _u1$[ebp]
add	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _intersection$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR _u2$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN6@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
jns	SHORT $LN10@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
neg	edx
mov	DWORD PTR tv176[ebp], edx
jmp	SHORT $LN11@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _u1$[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR tv176[ebp], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR tv176[ebp]
cmp	ecx, DWORD PTR [eax+11700]
jge	SHORT $LN6@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _u1$[ebp]
mov	eax, DWORD PTR _u2$[ebp]
mov	ecx, DWORD PTR [edx+4]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN5@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
jns	SHORT $LN12@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
neg	ecx
mov	DWORD PTR tv195[ebp], ecx
jmp	SHORT $LN13@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _u1$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
mov	DWORD PTR tv195[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR tv195[ebp]
cmp	eax, DWORD PTR [edx+11700]
jge	SHORT $LN5@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _u1$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR _v2$[ebp]
mov	eax, DWORD PTR [ecx]
cmp	eax, DWORD PTR [edx]
jne	SHORT $LN4@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _v1$[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
jns	SHORT $LN14@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _v1$[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
neg	eax
mov	DWORD PTR tv214[ebp], eax
jmp	SHORT $LN15@cf2_glyphp
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR _v1$[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
mov	DWORD PTR tv214[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR tv214[ebp]
cmp	edx, DWORD PTR [ecx+11700]
jge	SHORT $LN4@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR _v2$[ebp]
mov	edx, DWORD PTR [eax+4]
cmp	edx, DWORD PTR [ecx+4]
jne	SHORT $LN3@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
jns	SHORT $LN16@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
neg	edx
mov	DWORD PTR tv233[ebp], edx
jmp	SHORT $LN17@cf2_glyphp
mov	eax, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR _v1$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	DWORD PTR tv233[ebp], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR tv233[ebp]
cmp	ecx, DWORD PTR [eax+11700]
jge	SHORT $LN3@cf2_glyphp
mov	edx, DWORD PTR _intersection$[ebp]
mov	eax, DWORD PTR _v1$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, eax
jns	SHORT $LN18@cf2_glyphp
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, eax
neg	ecx
mov	DWORD PTR tv258[ebp], ecx
jmp	SHORT $LN19@cf2_glyphp
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, eax
mov	DWORD PTR tv258[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR tv258[ebp]
cmp	eax, DWORD PTR [edx+11696]
jg	SHORT $LN1@cf2_glyphp
mov	ecx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [edx+4]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _intersection$[ebp]
mov	edx, DWORD PTR [ecx+4]
sub	edx, eax
jns	SHORT $LN20@cf2_glyphp
mov	eax, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx+4]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, eax
neg	ecx
mov	DWORD PTR tv281[ebp], ecx
jmp	SHORT $LN21@cf2_glyphp
mov	edx, DWORD PTR _u2$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _v1$[ebp]
add	eax, DWORD PTR [ecx+4]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _intersection$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, eax
mov	DWORD PTR tv281[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR tv281[ebp]
cmp	eax, DWORD PTR [edx+11696]
jle	SHORT $LN2@cf2_glyphp
xor	al, al
jmp	SHORT $LN8@cf2_glyphp
mov	al, 1
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	3
DD	$LN25@cf2_glyphp
DD	-12					
DD	8
DD	$LN22@cf2_glyphp
DD	-28					
DD	8
DD	$LN23@cf2_glyphp
DD	-44					
DD	8
DD	$LN24@cf2_glyphp
DB	119					
DB	0
DB	118					
DB	0
DB	117					
DB	0
ENDP
_cf2_glyphpath_hintPoint PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _x$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11644]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _y$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11648]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	DWORD PTR _pt$[ebp], esi
mov	eax, DWORD PTR _y$[ebp]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
call	_cf2_hintmap_map
add	esp, 8
mov	DWORD PTR _pt$[ebp+4], eax
mov	edx, DWORD PTR _pt$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+60]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	eax, DWORD PTR _pt$[ebp+4]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+68]
push	eax
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	esi, DWORD PTR [ecx+11656]
mov	edx, DWORD PTR _ppt$[ebp]
mov	DWORD PTR [edx], esi
mov	eax, DWORD PTR _pt$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+64]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	esi, eax
mov	ecx, DWORD PTR _pt$[ebp+4]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+72]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	edx, DWORD PTR _glyphpath$[ebp]
add	esi, DWORD PTR [edx+11660]
mov	eax, DWORD PTR _ppt$[ebp]
mov	DWORD PTR [eax+4], esi
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@cf2_glyphp
DD	-12					
DD	8
DD	$LN3@cf2_glyphp
DB	112					
DB	116					
DB	0
ENDP
_cf2_hintmap_insertHint PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	BYTE PTR _isPair$[ebp], 1
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	DWORD PTR _firstHintEdge$[ebp], eax
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	DWORD PTR _secondHintEdge$[ebp], ecx
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
push	edx
call	_cf2_hint_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN36@cf2_hintma
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN36@cf2_hintma
push	OFFSET $SG14024
push	574					
push	OFFSET $SG14025
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN37@cf2_hintma
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN33@cf2_hintma
mov	eax, DWORD PTR _topHintEdge$[ebp]
mov	DWORD PTR _firstHintEdge$[ebp], eax
mov	BYTE PTR _isPair$[ebp], 0
jmp	SHORT $LN30@cf2_hintma
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN30@cf2_hintma
mov	BYTE PTR _isPair$[ebp], 0
movzx	eax, BYTE PTR _isPair$[ebp]
test	eax, eax
je	SHORT $LN29@cf2_hintma
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jge	SHORT $LN29@cf2_hintma
push	OFFSET $SG14033
push	591					
push	OFFSET $SG14034
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN30@cf2_hintma
mov	DWORD PTR _indexInsert$[ebp], 0
jmp	SHORT $LN26@cf2_hintma
mov	edx, DWORD PTR _indexInsert$[ebp]
add	edx, 1
mov	DWORD PTR _indexInsert$[ebp], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _indexInsert$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	SHORT $LN24@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	edx, DWORD PTR [eax+edx+36]
cmp	edx, DWORD PTR [ecx+8]
jl	SHORT $LN23@cf2_hintma
jmp	SHORT $LN24@cf2_hintma
jmp	SHORT $LN25@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _indexInsert$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	SHORT $LN22@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	edx, DWORD PTR [eax+edx+36]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN21@cf2_hintma
jmp	$LN38@cf2_hintma
movzx	eax, BYTE PTR _isPair$[ebp]
test	eax, eax
je	SHORT $LN20@cf2_hintma
imul	ecx, DWORD PTR _indexInsert$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	ecx, DWORD PTR [edx+ecx+36]
cmp	ecx, DWORD PTR [eax+8]
jg	SHORT $LN20@cf2_hintma
jmp	$LN38@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
push	ecx
call	_cf2_hint_isPairTop
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN22@cf2_hintma
jmp	$LN38@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
je	$LN18@cf2_hintma
mov	eax, DWORD PTR _firstHintEdge$[ebp]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	$LN18@cf2_hintma
movzx	edx, BYTE PTR _isPair$[ebp]
test	edx, edx
je	SHORT $LN17@cf2_hintma
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
add	eax, DWORD PTR [ecx+8]
cdq
sub	eax, edx
sar	eax, 1
push	eax
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_hintmap_map
add	esp, 8
mov	DWORD PTR _midpoint$5[ebp], eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+8]
cdq
sub	eax, edx
sar	eax, 1
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _halfWidth$4[ebp], eax
mov	edx, DWORD PTR _midpoint$5[ebp]
sub	edx, DWORD PTR _halfWidth$4[ebp]
mov	eax, DWORD PTR _firstHintEdge$[ebp]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR _midpoint$5[ebp]
add	ecx, DWORD PTR _halfWidth$4[ebp]
mov	edx, DWORD PTR _secondHintEdge$[ebp]
mov	DWORD PTR [edx+12], ecx
jmp	SHORT $LN18@cf2_hintma
mov	eax, DWORD PTR _firstHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_hintmap_map
add	esp, 8
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _indexInsert$[ebp], 0
jbe	SHORT $LN15@cf2_hintma
mov	edx, DWORD PTR _indexInsert$[ebp]
sub	edx, 1
imul	eax, edx, 20
mov	ecx, DWORD PTR _firstHintEdge$[ebp]
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [ecx+12]
cmp	ecx, DWORD PTR [edx+eax+40]
jge	SHORT $LN15@cf2_hintma
jmp	$LN38@cf2_hintma
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _indexInsert$[ebp]
cmp	eax, DWORD PTR [edx+20]
jae	SHORT $LN13@cf2_hintma
movzx	ecx, BYTE PTR _isPair$[ebp]
test	ecx, ecx
je	SHORT $LN12@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _secondHintEdge$[ebp]
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [eax+12]
cmp	eax, DWORD PTR [ecx+edx+40]
jle	SHORT $LN11@cf2_hintma
jmp	$LN38@cf2_hintma
jmp	SHORT $LN13@cf2_hintma
imul	ecx, DWORD PTR _indexInsert$[ebp], 20
mov	edx, DWORD PTR _firstHintEdge$[ebp]
mov	eax, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [edx+12]
cmp	edx, DWORD PTR [eax+ecx+40]
jle	SHORT $LN13@cf2_hintma
jmp	$LN38@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
sub	ecx, 1
mov	DWORD PTR _iSrc$3[ebp], ecx
movzx	edx, BYTE PTR _isPair$[ebp]
test	edx, edx
je	SHORT $LN40@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	DWORD PTR tv225[ebp], ecx
jmp	SHORT $LN41@cf2_hintma
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR tv225[ebp], eax
mov	ecx, DWORD PTR tv225[ebp]
mov	DWORD PTR _iDst$2[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR _indexInsert$[ebp]
mov	DWORD PTR _count$1[ebp], eax
cmp	DWORD PTR _iDst$2[ebp], 192		
jl	SHORT $LN3@cf2_hintma
mov	ecx, 4
imul	edx, ecx, 52
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN6@cf2_hintma
push	OFFSET $SG14065
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN7@cf2_hintma
jmp	$LN38@cf2_hintma
mov	ecx, DWORD PTR _count$1[ebp]
mov	DWORD PTR tv235[ebp], ecx
mov	edx, DWORD PTR _count$1[ebp]
sub	edx, 1
mov	DWORD PTR _count$1[ebp], edx
cmp	DWORD PTR tv235[ebp], 0
je	SHORT $LN2@cf2_hintma
imul	eax, DWORD PTR _iSrc$3[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
imul	eax, DWORD PTR _iDst$2[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [ecx+eax+28]
mov	ecx, DWORD PTR [edx]
mov	DWORD PTR [eax], ecx
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR [edx+8]
mov	DWORD PTR [eax+8], ecx
mov	ecx, DWORD PTR [edx+12]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [eax+16], edx
mov	eax, DWORD PTR _iDst$2[ebp]
sub	eax, 1
mov	DWORD PTR _iDst$2[ebp], eax
mov	ecx, DWORD PTR _iSrc$3[ebp]
sub	ecx, 1
mov	DWORD PTR _iSrc$3[ebp], ecx
jmp	SHORT $LN3@cf2_hintma
imul	edx, DWORD PTR _indexInsert$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
mov	edx, DWORD PTR _firstHintEdge$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+20], ecx
movzx	eax, BYTE PTR _isPair$[ebp]
test	eax, eax
je	SHORT $LN38@cf2_hintma
mov	ecx, DWORD PTR _indexInsert$[ebp]
add	ecx, 1
imul	edx, ecx, 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
mov	edx, DWORD PTR _secondHintEdge$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+20], ecx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmap_adjustHints PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_cf2_arrstack_clear
add	esp, 4
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN56@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	$LN54@cf2_hintma
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
push	ecx
call	_cf2_hint_isPair
add	esp, 4
mov	BYTE PTR _isPair$15[ebp], al
movzx	edx, BYTE PTR _isPair$15[ebp]
test	edx, edx
je	SHORT $LN59@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR tv77[ebp], eax
jmp	SHORT $LN60@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
mov	DWORD PTR tv77[ebp], ecx
mov	edx, DWORD PTR tv77[ebp]
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jb	SHORT $LN52@cf2_hintma
push	OFFSET $SG13918
push	389					
push	OFFSET $SG13919
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN53@cf2_hintma
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
push	edx
call	_cf2_hint_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN48@cf2_hintma
push	OFFSET $SG13924
push	390					
push	OFFSET $SG13925
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN49@cf2_hintma
imul	edx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
lea	ecx, DWORD PTR [eax+edx+28]
push	ecx
call	_cf2_hint_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN44@cf2_hintma
push	OFFSET $SG13930
push	391					
push	OFFSET $SG13931
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN45@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	esi, al
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	ecx, al
cmp	esi, ecx
je	SHORT $LN40@cf2_hintma
push	OFFSET $SG13936
push	393					
push	OFFSET $SG13937
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN41@cf2_hintma
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
push	edx
call	_cf2_hint_isLocked
add	esp, 4
movzx	eax, al
test	eax, eax
jne	$LN25@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [eax+edx+40]
and	edx, -65536				
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
sub	ecx, edx
mov	DWORD PTR _fracDown$14[ebp], ecx
imul	edx, DWORD PTR _j$[ebp], 20
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+40]
and	eax, -65536				
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+edx+40]
sub	edx, eax
mov	DWORD PTR _fracUp$13[ebp], edx
xor	eax, eax
sub	eax, DWORD PTR _fracDown$14[ebp]
mov	DWORD PTR _downMoveDown$12[ebp], eax
xor	ecx, ecx
sub	ecx, DWORD PTR _fracUp$13[ebp]
mov	DWORD PTR _upMoveDown$11[ebp], ecx
cmp	DWORD PTR _fracDown$14[ebp], 0
jne	SHORT $LN61@cf2_hintma
mov	DWORD PTR tv186[ebp], 0
jmp	SHORT $LN62@cf2_hintma
mov	edx, 65536				
sub	edx, DWORD PTR _fracDown$14[ebp]
mov	DWORD PTR tv186[ebp], edx
mov	eax, DWORD PTR tv186[ebp]
mov	DWORD PTR _downMoveUp$10[ebp], eax
cmp	DWORD PTR _fracUp$13[ebp], 0
jne	SHORT $LN63@cf2_hintma
mov	DWORD PTR tv189[ebp], 0
jmp	SHORT $LN64@cf2_hintma
mov	ecx, 65536				
sub	ecx, DWORD PTR _fracUp$13[ebp]
mov	DWORD PTR tv189[ebp], ecx
mov	edx, DWORD PTR tv189[ebp]
mov	DWORD PTR _upMoveUp$9[ebp], edx
mov	eax, DWORD PTR _downMoveUp$10[ebp]
cmp	eax, DWORD PTR _upMoveUp$9[ebp]
jge	SHORT $LN65@cf2_hintma
mov	ecx, DWORD PTR _downMoveUp$10[ebp]
mov	DWORD PTR tv191[ebp], ecx
jmp	SHORT $LN66@cf2_hintma
mov	edx, DWORD PTR _upMoveUp$9[ebp]
mov	DWORD PTR tv191[ebp], edx
mov	eax, DWORD PTR tv191[ebp]
mov	DWORD PTR _moveUp$8[ebp], eax
mov	ecx, DWORD PTR _downMoveDown$12[ebp]
cmp	ecx, DWORD PTR _upMoveDown$11[ebp]
jle	SHORT $LN67@cf2_hintma
mov	edx, DWORD PTR _downMoveDown$12[ebp]
mov	DWORD PTR tv193[ebp], edx
jmp	SHORT $LN68@cf2_hintma
mov	eax, DWORD PTR _upMoveDown$11[ebp]
mov	DWORD PTR tv193[ebp], eax
mov	ecx, DWORD PTR tv193[ebp]
mov	DWORD PTR _moveDown$7[ebp], ecx
mov	DWORD PTR _downMinCounter$5[ebp], 32768	
mov	DWORD PTR _upMinCounter$4[ebp], 32768	
mov	BYTE PTR _saveEdge$3[ebp], 0
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, 1
cmp	DWORD PTR _j$[ebp], eax
jae	SHORT $LN35@cf2_hintma
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
imul	edx, ecx, 20
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+40]
add	eax, DWORD PTR _moveUp$8[ebp]
add	eax, DWORD PTR _upMinCounter$4[ebp]
mov	ecx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [ecx+edx+40], eax
jl	SHORT $LN36@cf2_hintma
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN33@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
imul	eax, edx, 20
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+40]
add	ecx, DWORD PTR _moveDown$7[ebp]
sub	ecx, DWORD PTR _downMinCounter$5[ebp]
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+eax+40], ecx
jg	SHORT $LN34@cf2_hintma
mov	eax, DWORD PTR _moveDown$7[ebp]
neg	eax
cmp	eax, DWORD PTR _moveUp$8[ebp]
jge	SHORT $LN69@cf2_hintma
mov	ecx, DWORD PTR _moveDown$7[ebp]
mov	DWORD PTR tv224[ebp], ecx
jmp	SHORT $LN70@cf2_hintma
mov	edx, DWORD PTR _moveUp$8[ebp]
mov	DWORD PTR tv224[ebp], edx
mov	eax, DWORD PTR tv224[ebp]
mov	DWORD PTR _move$6[ebp], eax
jmp	SHORT $LN32@cf2_hintma
mov	ecx, DWORD PTR _moveUp$8[ebp]
mov	DWORD PTR _move$6[ebp], ecx
jmp	SHORT $LN31@cf2_hintma
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN29@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
imul	eax, edx, 20
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+40]
add	ecx, DWORD PTR _moveDown$7[ebp]
sub	ecx, DWORD PTR _downMinCounter$5[ebp]
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+eax+40], ecx
jg	SHORT $LN30@cf2_hintma
mov	eax, DWORD PTR _moveDown$7[ebp]
mov	DWORD PTR _move$6[ebp], eax
mov	ecx, DWORD PTR _moveDown$7[ebp]
neg	ecx
cmp	DWORD PTR _moveUp$8[ebp], ecx
jge	SHORT $LN71@cf2_hintma
mov	BYTE PTR tv240[ebp], 1
jmp	SHORT $LN72@cf2_hintma
mov	BYTE PTR tv240[ebp], 0
mov	dl, BYTE PTR tv240[ebp]
mov	BYTE PTR _saveEdge$3[ebp], dl
jmp	SHORT $LN31@cf2_hintma
mov	DWORD PTR _move$6[ebp], 0
mov	BYTE PTR _saveEdge$3[ebp], 1
movzx	eax, BYTE PTR _saveEdge$3[ebp]
test	eax, eax
je	SHORT $LN27@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, 1
cmp	DWORD PTR _j$[ebp], edx
jae	SHORT $LN27@cf2_hintma
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isLocked
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN27@cf2_hintma
mov	edx, DWORD PTR _j$[ebp]
mov	DWORD PTR _savedMove$2[ebp], edx
mov	eax, DWORD PTR _moveUp$8[ebp]
sub	eax, DWORD PTR _move$6[ebp]
mov	DWORD PTR _savedMove$2[ebp+4], eax
lea	ecx, DWORD PTR _savedMove$2[ebp]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	_cf2_arrstack_push
add	esp, 8
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+ecx+40]
add	eax, DWORD PTR _move$6[ebp]
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+ecx+40], eax
movzx	eax, BYTE PTR _isPair$15[ebp]
test	eax, eax
je	SHORT $LN25@cf2_hintma
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+ecx+40]
add	eax, DWORD PTR _move$6[ebp]
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+ecx+40], eax
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN24@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
sub	eax, 1
imul	ecx, eax, 20
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
cmp	ecx, DWORD PTR [esi+edx+40]
jle	SHORT $LN24@cf2_hintma
push	OFFSET $SG13976
push	501					
push	OFFSET $SG13977
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN25@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _j$[ebp]
jb	SHORT $LN20@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
imul	edx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
cmp	ecx, DWORD PTR [esi+edx+40]
jle	SHORT $LN20@cf2_hintma
push	OFFSET $SG13982
push	503					
push	OFFSET $SG13983
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN21@cf2_hintma
cmp	DWORD PTR _i$[ebp], 0
jbe	SHORT $LN17@cf2_hintma
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _i$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+36]
cmp	eax, DWORD PTR [esi+edx+36]
je	SHORT $LN17@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
imul	eax, edx, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+36]
sub	ecx, DWORD PTR [esi+eax+36]
push	ecx
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _i$[ebp]
sub	eax, 1
imul	ecx, eax, 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [eax+edx+40]
sub	edx, DWORD PTR [esi+ecx+40]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [ecx+edx+44], eax
movzx	edx, BYTE PTR _isPair$15[ebp]
test	edx, edx
je	SHORT $LN15@cf2_hintma
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _j$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [ecx+eax+36]
cmp	eax, DWORD PTR [esi+edx+36]
je	SHORT $LN14@cf2_hintma
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _j$[ebp]
sub	edx, 1
imul	eax, edx, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+36]
sub	ecx, DWORD PTR [esi+eax+36]
push	ecx
imul	edx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
imul	ecx, eax, 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	esi, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [eax+edx+40]
sub	edx, DWORD PTR [esi+ecx+40]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _j$[ebp]
sub	ecx, 1
imul	edx, ecx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [ecx+edx+44], eax
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
jmp	$LN55@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_cf2_arrstack_size
add	esp, 4
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN13@cf2_hintma
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _i$[ebp], 0
jbe	$LN57@cf2_hintma
mov	eax, DWORD PTR _i$[ebp]
sub	eax, 1
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _hintMove$1[ebp], eax
mov	eax, DWORD PTR _hintMove$1[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, 1
cmp	DWORD PTR _j$[ebp], eax
jb	SHORT $LN9@cf2_hintma
push	OFFSET $SG13997
push	538					
push	OFFSET $SG13998
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN10@cf2_hintma
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
imul	eax, edx, 20
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [edx+ecx+40]
mov	edx, DWORD PTR _hintMove$1[ebp]
mov	edx, DWORD PTR [edx+4]
lea	ecx, DWORD PTR [ecx+edx+32768]
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+eax+40], ecx
jl	SHORT $LN6@cf2_hintma
imul	eax, DWORD PTR _j$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+eax+40]
mov	eax, DWORD PTR _hintMove$1[ebp]
add	edx, DWORD PTR [eax+4]
imul	ecx, DWORD PTR _j$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [eax+ecx+40], edx
imul	ecx, DWORD PTR _j$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isPair
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN6@cf2_hintma
cmp	DWORD PTR _j$[ebp], 0
ja	SHORT $LN3@cf2_hintma
push	OFFSET $SG14006
push	549					
push	OFFSET $SG14007
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_hintma
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR [edx+ecx+40]
mov	ecx, DWORD PTR _hintMove$1[ebp]
add	eax, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _j$[ebp]
sub	edx, 1
imul	ecx, edx, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+ecx+40], eax
jmp	$LN12@cf2_hintma
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN75@cf2_hintma
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN74@cf2_hintma
DD	-72					
DD	8
DD	$LN73@cf2_hintma
DB	115					
DB	97					
DB	118					
DB	101					
DB	100					
DB	77					
DB	111					
DB	118					
DB	101					
DB	0
ENDP
_cf2_hintmap_map PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN12@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
movzx	edx, BYTE PTR [ecx+13]
test	edx, edx
jne	SHORT $LN13@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _csCoord$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
jmp	$LN14@cf2_hintma
jmp	$LN14@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _i$1[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [edx+24], 192			
jb	SHORT $LN9@cf2_hintma
push	OFFSET $SG13890
push	317					
push	OFFSET $SG13891
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, 1
cmp	DWORD PTR _i$1[ebp], edx
jae	SHORT $LN4@cf2_hintma
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
imul	ecx, eax, 20
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _csCoord$[ebp]
cmp	eax, DWORD PTR [edx+ecx+36]
jl	SHORT $LN4@cf2_hintma
mov	ecx, DWORD PTR _i$1[ebp]
add	ecx, 1
mov	DWORD PTR _i$1[ebp], ecx
jmp	SHORT $LN6@cf2_hintma
cmp	DWORD PTR _i$1[ebp], 0
jbe	SHORT $LN3@cf2_hintma
imul	edx, DWORD PTR _i$1[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _csCoord$[ebp]
cmp	ecx, DWORD PTR [eax+edx+36]
jge	SHORT $LN3@cf2_hintma
mov	edx, DWORD PTR _i$1[ebp]
sub	edx, 1
mov	DWORD PTR _i$1[ebp], edx
jmp	SHORT $LN4@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _i$1[ebp]
mov	DWORD PTR [eax+24], ecx
cmp	DWORD PTR _i$1[ebp], 0
jne	SHORT $LN2@cf2_hintma
mov	edx, 20					
imul	eax, edx, 0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _csCoord$[ebp]
cmp	edx, DWORD PTR [ecx+eax+36]
jge	SHORT $LN2@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, 20					
imul	eax, edx, 0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _csCoord$[ebp]
sub	edx, DWORD PTR [ecx+eax+36]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, 20					
imul	edx, ecx, 0
mov	ecx, DWORD PTR _hintmap$[ebp]
add	eax, DWORD PTR [ecx+edx+40]
jmp	SHORT $LN14@cf2_hintma
jmp	SHORT $LN14@cf2_hintma
imul	edx, DWORD PTR _i$1[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+edx+44]
push	ecx
imul	edx, DWORD PTR _i$1[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _csCoord$[ebp]
sub	ecx, DWORD PTR [eax+edx+36]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
imul	edx, DWORD PTR _i$1[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
add	eax, DWORD PTR [ecx+edx+40]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmap_isValid PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmap$[ebp]
mov	al, BYTE PTR [eax+12]
pop	ebp
ret	0
ENDP
_cf2_hint_isSynthetic PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 32					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isLocked PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 16					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isPairTop PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 8
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isPair PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 12					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_initZero PROC
push	ebp
mov	ebp, esp
push	20					
push	0
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_memset
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_hint_init PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
push	20					
push	0
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _indexStemHint$[ebp]
push	ecx
mov	edx, DWORD PTR _stemHintArray$[ebp]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _stemHint$[ebp], eax
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR _stemHint$[ebp]
mov	edx, DWORD PTR [eax+8]
sub	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _width$[ebp], edx
cmp	DWORD PTR _width$[ebp], -1376256	
jne	SHORT $LN19@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN18@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _stemHint$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 1
jmp	SHORT $LN17@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 0
jmp	$LN16@cf2_hint_i
cmp	DWORD PTR _width$[ebp], -1310720	
jne	SHORT $LN15@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN14@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 0
jmp	SHORT $LN13@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 2
jmp	SHORT $LN16@cf2_hint_i
cmp	DWORD PTR _width$[ebp], 0
jge	SHORT $LN11@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN10@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _stemHint$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 4
jmp	SHORT $LN9@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 8
jmp	SHORT $LN16@cf2_hint_i
movzx	eax, BYTE PTR _bottom$[ebp]
test	eax, eax
je	SHORT $LN7@cf2_hint_i
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _stemHint$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx], 4
jmp	SHORT $LN16@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], 8
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_cf2_hint_isTop
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN5@cf2_hint_i
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+188]
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR [ecx+8]
lea	eax, DWORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, DWORD PTR _hintOrigin$[ebp]
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _scale$[ebp]
mov	DWORD PTR [edx+16], eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR _indexStemHint$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _hint$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN4@cf2_hint_i
mov	ecx, DWORD PTR _stemHint$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN4@cf2_hint_i
mov	eax, DWORD PTR _hint$[ebp]
push	eax
call	_cf2_hint_isTop
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN3@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+12], ecx
jmp	SHORT $LN2@cf2_hint_i
mov	edx, DWORD PTR _hint$[ebp]
mov	eax, DWORD PTR _stemHint$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], ecx
mov	edx, DWORD PTR _hint$[ebp]
push	edx
call	_cf2_hint_lock
add	esp, 4
jmp	SHORT $LN20@cf2_hint_i
mov	eax, DWORD PTR _scale$[ebp]
push	eax
mov	ecx, DWORD PTR _hint$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [ecx+12], eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_getWindingMomentum PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _x1$[ebp]
sar	eax, 16					
mov	ecx, DWORD PTR _y2$[ebp]
sub	ecx, DWORD PTR _y1$[ebp]
sar	ecx, 16					
imul	eax, ecx
mov	edx, DWORD PTR _y1$[ebp]
sar	edx, 16					
mov	ecx, DWORD PTR _x2$[ebp]
sub	ecx, DWORD PTR _x1$[ebp]
sar	ecx, 16					
imul	edx, ecx
sub	eax, edx
pop	ebp
ret	0
ENDP
_cf2_getUnitsPerEm PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN5@cf2_getUni
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN8@cf2_getUni
push	OFFSET $SG13443
push	288					
push	OFFSET $SG13444
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN9@cf2_getUni
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+4]
movzx	ecx, WORD PTR [eax+68]
test	ecx, ecx
jne	SHORT $LN3@cf2_getUni
push	OFFSET $SG13449
push	289					
push	OFFSET $SG13450
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_getUni
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	ax, WORD PTR [ecx+68]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getScaleAndHintFlag PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN3@cf2_getSca
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+8], 0
jne	SHORT $LN6@cf2_getSca
push	OFFSET $SG13430
push	261					
push	OFFSET $SG13431
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN7@cf2_getSca
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _hinted$[ebp]
mov	dl, BYTE PTR [eax+160]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _scaled$[ebp]
mov	al, BYTE PTR [ecx+161]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _hinted$[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN2@cf2_getSca
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	eax, DWORD PTR [ecx+164]
add	eax, 32					
cdq
and	edx, 63					
add	eax, edx
sar	eax, 6
mov	edx, DWORD PTR _x_scale$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	eax, DWORD PTR [ecx+168]
add	eax, 32					
cdq
and	edx, 63					
add	eax, edx
sar	eax, 6
mov	edx, DWORD PTR _y_scale$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN8@cf2_getSca
mov	eax, DWORD PTR _x_scale$[ebp]
mov	DWORD PTR [eax], 1024			
mov	ecx, DWORD PTR _y_scale$[ebp]
mov	DWORD PTR [ecx], 1024			
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_outline_init PROC
push	ebp
mov	ebp, esp
push	32					
push	0
mov	eax, DWORD PTR _outline$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+24], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [edx], OFFSET _cf2_builder_moveTo
mov	eax, DWORD PTR _outline$[ebp]
mov	DWORD PTR [eax+4], OFFSET _cf2_builder_lineTo
mov	ecx, DWORD PTR _outline$[ebp]
mov	DWORD PTR [ecx+12], OFFSET _cf2_builder_cubeTo
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_builder_cubeTo PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR _outline$[ebp], eax
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN10@cf2_builde
mov	ecx, DWORD PTR _outline$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN13@cf2_builde
push	OFFSET $SG13391
push	196					
push	OFFSET $SG13392
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN14@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+32], 4
je	SHORT $LN8@cf2_builde
push	OFFSET $SG13397
push	197					
push	OFFSET $SG13398
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN9@cf2_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
movzx	edx, BYTE PTR [ecx+64]
test	edx, edx
jne	SHORT $LN5@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_start_point
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN3@cf2_builde
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
jmp	$LN15@cf2_builde
push	3
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_check_points
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN1@cf2_builde
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN15@cf2_builde
push	0
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _builder$[ebp]
push	edx
call	_cff_builder_add_point
add	esp, 16					
push	0
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_add_point
add	esp, 16					
push	1
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_point
add	esp, 16					
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_builder_lineTo PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR _outline$[ebp], eax
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN10@cf2_builde
mov	ecx, DWORD PTR _outline$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN13@cf2_builde
push	OFFSET $SG13363
push	152					
push	OFFSET $SG13364
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN14@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+32], 2
je	SHORT $LN8@cf2_builde
push	OFFSET $SG13369
push	153					
push	OFFSET $SG13370
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN9@cf2_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
movzx	edx, BYTE PTR [ecx+64]
test	edx, edx
jne	SHORT $LN5@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _params$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_start_point
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN3@cf2_builde
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN15@cf2_builde
mov	ecx, DWORD PTR _params$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _params$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _builder$[ebp]
push	edx
call	_cff_builder_add_point1
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@cf2_builde
mov	eax, DWORD PTR _callbacks$[ebp]
mov	ecx, DWORD PTR [eax+24]
cmp	DWORD PTR [ecx], 0
jne	SHORT $LN15@cf2_builde
mov	edx, DWORD PTR _callbacks$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_builder_moveTo PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR _outline$[ebp], eax
cmp	DWORD PTR _outline$[ebp], 0
je	SHORT $LN5@cf2_builde
mov	ecx, DWORD PTR _outline$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN8@cf2_builde
push	OFFSET $SG13340
push	130					
push	OFFSET $SG13341
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN9@cf2_builde
mov	eax, DWORD PTR _params$[ebp]
cmp	DWORD PTR [eax+32], 1
je	SHORT $LN3@cf2_builde
push	OFFSET $SG13346
push	131					
push	OFFSET $SG13347
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@cf2_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
push	ecx
call	_cff_builder_close_contour
add	esp, 4
mov	edx, DWORD PTR _builder$[ebp]
mov	BYTE PTR [edx+64], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_free_instance PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ptr$[ebp]
mov	DWORD PTR _font$[ebp], eax
cmp	DWORD PTR _font$[ebp], 0
je	SHORT $LN2@cf2_free_i
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$1[ebp], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_setGlyphWidth PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _decoder$[ebp], ecx
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_setGly
push	OFFSET $SG13312
push	89					
push	OFFSET $SG13313
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_setGly
mov	eax, DWORD PTR _width$[ebp]
add	eax, 32768				
shr	eax, 16					
movsx	ecx, ax
mov	edx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+744], ecx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_checkTransform PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _unitsPerEm$[ebp], 0
jg	SHORT $LN18@cf2_checkT
push	OFFSET $SG13273
push	62					
push	OFFSET $SG13274
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN19@cf2_checkT
mov	ecx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [ecx], 0
jle	SHORT $LN14@cf2_checkT
mov	edx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [edx+12], 0
jg	SHORT $LN13@cf2_checkT
push	OFFSET $SG13277
push	65					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN20@cf2_checkT
mov	eax, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [eax+4], 0
jne	SHORT $LN9@cf2_checkT
mov	ecx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [ecx+8], 0
je	SHORT $LN12@cf2_checkT
push	OFFSET $SG13283
push	67					
push	OFFSET $SG13284
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN13@cf2_checkT
mov	eax, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [eax+16], 0
jne	SHORT $LN4@cf2_checkT
mov	ecx, DWORD PTR _transform$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN7@cf2_checkT
push	OFFSET $SG13290
push	68					
push	OFFSET $SG13291
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN8@cf2_checkT
cmp	DWORD PTR _unitsPerEm$[ebp], 32767	
jle	SHORT $LN3@cf2_checkT
push	OFFSET $SG13293
push	71					
push	164					
call	_FT_Throw
add	esp, 12					
or	eax, 164				
jmp	SHORT $LN20@cf2_checkT
mov	eax, DWORD PTR _unitsPerEm$[ebp]
shl	eax, 16					
push	eax
push	131072000				
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _maxScale$[ebp], eax
mov	ecx, DWORD PTR _transform$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	edx, DWORD PTR _maxScale$[ebp]
jg	SHORT $LN1@cf2_checkT
mov	eax, DWORD PTR _transform$[ebp]
mov	ecx, DWORD PTR [eax+12]
cmp	ecx, DWORD PTR _maxScale$[ebp]
jle	SHORT $LN2@cf2_checkT
push	OFFSET $SG13300
push	76					
push	164					
call	_FT_Throw
add	esp, 12					
or	eax, 164				
jmp	SHORT $LN20@cf2_checkT
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_font_setup PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR _decoder$[ebp], ecx
mov	BYTE PTR _needExtraSetup$[ebp], 0
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+92]
mov	DWORD PTR _boldenX$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	DWORD PTR _boldenY$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getSubfont
add	esp, 4
mov	DWORD PTR _subFont$[ebp], eax
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+136]
cmp	eax, DWORD PTR _subFont$[ebp]
je	SHORT $LN14@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _subFont$[ebp]
mov	DWORD PTR [ecx+136], edx
mov	BYTE PTR _needExtraSetup$[ebp], 1
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getPpemY
add	esp, 4
mov	DWORD PTR _ppem$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+84]
cmp	edx, DWORD PTR _ppem$[ebp]
je	SHORT $LN13@cf2_font_s
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _ppem$[ebp]
mov	DWORD PTR [eax+84], ecx
mov	BYTE PTR _needExtraSetup$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
mov	ecx, DWORD PTR _font$[ebp]
mov	BYTE PTR [ecx+140], al
push	16					
mov	edx, DWORD PTR _font$[ebp]
add	edx, 12					
push	edx
mov	eax, DWORD PTR _transform$[ebp]
push	eax
call	_memcmp
add	esp, 12					
test	eax, eax
je	$LN12@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 12					
mov	edx, DWORD PTR _transform$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR [edx+20]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+32], 0
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+28], 0
mov	edx, DWORD PTR _font$[ebp]
add	edx, 36					
mov	eax, DWORD PTR _transform$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], ecx
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR [eax+20]
mov	DWORD PTR [edx+20], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+72], 65536		
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+60], 65536		
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+68], 0
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+64], 0
mov	BYTE PTR _needExtraSetup$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+142]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 2
cmp	eax, edx
je	SHORT $LN11@cf2_font_s
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 2
mov	edx, DWORD PTR _font$[ebp]
mov	BYTE PTR [edx+142], cl
mov	BYTE PTR _needExtraSetup$[ebp], 1
movzx	eax, BYTE PTR _needExtraSetup$[ebp]
test	eax, eax
je	$LN15@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	DWORD PTR _unitsPerEm$1[ebp], edx
cmp	DWORD PTR _unitsPerEm$1[ebp], 0
jne	SHORT $LN9@cf2_font_s
mov	DWORD PTR _unitsPerEm$1[ebp], 1000	
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+84], 262144		
jge	SHORT $LN17@cf2_font_s
mov	DWORD PTR tv146[ebp], 262144		
jmp	SHORT $LN18@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	DWORD PTR tv146[ebp], edx
mov	eax, DWORD PTR tv146[ebp]
mov	DWORD PTR _ppem$[ebp], eax
mov	eax, 65536000				
cdq
idiv	DWORD PTR _unitsPerEm$1[ebp]
mov	DWORD PTR _emRatio$3[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getStdVW
add	esp, 4
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+176], eax
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+176], 0
jg	SHORT $LN8@cf2_font_s
mov	ecx, DWORD PTR _emRatio$3[ebp]
push	ecx
push	4915200					
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+176], eax
cmp	DWORD PTR _boldenX$[ebp], 0
jle	SHORT $LN7@cf2_font_s
mov	eax, DWORD PTR _ppem$[ebp]
push	eax
mov	ecx, DWORD PTR _unitsPerEm$1[ebp]
shl	ecx, 16					
push	ecx
call	_FT_DivFix
add	esp, 8
cmp	DWORD PTR _boldenX$[ebp], eax
jle	SHORT $LN19@cf2_font_s
mov	edx, DWORD PTR _boldenX$[ebp]
mov	DWORD PTR tv167[ebp], edx
jmp	SHORT $LN20@cf2_font_s
mov	eax, DWORD PTR _ppem$[ebp]
push	eax
mov	ecx, DWORD PTR _unitsPerEm$1[ebp]
shl	ecx, 16					
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR tv167[ebp], eax
mov	edx, DWORD PTR tv167[ebp]
mov	DWORD PTR _boldenX$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 144				
push	eax
push	0
mov	ecx, DWORD PTR _boldenX$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 184				
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+176]
push	ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _emRatio$3[ebp]
push	eax
call	_cf2_computeDarkening
add	esp, 28					
jmp	SHORT $LN6@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 144				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+142]
push	eax
push	0
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 184				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+176]
push	eax
mov	ecx, DWORD PTR _ppem$[ebp]
push	ecx
mov	edx, DWORD PTR _emRatio$3[ebp]
push	edx
call	_cf2_computeDarkening
add	esp, 28					
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getStdHW
add	esp, 4
mov	DWORD PTR _stdHW$2[ebp], eax
cmp	DWORD PTR _stdHW$2[ebp], 0
jle	SHORT $LN5@cf2_font_s
mov	ecx, DWORD PTR _stdHW$2[ebp]
shl	ecx, 1
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+176], ecx
jle	SHORT $LN5@cf2_font_s
mov	eax, DWORD PTR _emRatio$3[ebp]
push	eax
push	4915200					
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+180], eax
jmp	SHORT $LN4@cf2_font_s
mov	edx, DWORD PTR _emRatio$3[ebp]
push	edx
push	7208960					
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+180], eax
mov	edx, DWORD PTR _font$[ebp]
add	edx, 144				
push	edx
mov	eax, DWORD PTR _font$[ebp]
movzx	ecx, BYTE PTR [eax+142]
push	ecx
mov	edx, DWORD PTR _boldenY$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 188				
push	eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+180]
push	edx
mov	eax, DWORD PTR _ppem$[ebp]
push	eax
mov	ecx, DWORD PTR _emRatio$3[ebp]
push	ecx
call	_cf2_computeDarkening
add	esp, 28					
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+184], 0
jne	SHORT $LN2@cf2_font_s
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+188], 0
je	SHORT $LN3@cf2_font_s
mov	ecx, DWORD PTR _font$[ebp]
mov	BYTE PTR [ecx+141], 1
jmp	SHORT $LN1@cf2_font_s
mov	edx, DWORD PTR _font$[ebp]
mov	BYTE PTR [edx+141], 0
mov	eax, DWORD PTR _font$[ebp]
mov	BYTE PTR [eax+192], 0
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 196				
push	edx
call	_cf2_blues_init
add	esp, 8
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_computeDarkening PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _boldenAmount$[ebp], 0
jne	SHORT $LN16@cf2_comput
movzx	ecx, BYTE PTR _stemDarkened$[ebp]
test	ecx, ecx
jne	SHORT $LN16@cf2_comput
jmp	$LN17@cf2_comput
cmp	DWORD PTR _emRatio$[ebp], 655		
jge	SHORT $LN15@cf2_comput
jmp	$LN17@cf2_comput
movzx	edx, BYTE PTR _stemDarkened$[ebp]
test	edx, edx
je	$LN14@cf2_comput
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x1$17[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _y1$16[ebp], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x2$15[ebp], eax
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _darkenParams$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y2$14[ebp], ecx
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _darkenParams$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _x3$13[ebp], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, DWORD PTR _darkenParams$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _y3$12[ebp], edx
mov	eax, 4
imul	ecx, eax, 6
mov	edx, DWORD PTR _darkenParams$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x4$11[ebp], eax
mov	ecx, 4
imul	edx, ecx, 7
mov	eax, DWORD PTR _darkenParams$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y4$10[ebp], ecx
mov	edx, DWORD PTR _emRatio$[ebp]
push	edx
mov	eax, DWORD PTR _stemWidth$[ebp]
add	eax, DWORD PTR _boldenAmount$[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _stemWidthPer1000$[ebp], eax
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
push	ecx
call	_FT_MSB
add	esp, 4
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
call	_FT_MSB
add	esp, 4
add	esi, eax
mov	DWORD PTR _logBase2$[ebp], esi
cmp	DWORD PTR _logBase2$[ebp], 46		
jl	SHORT $LN13@cf2_comput
mov	eax, DWORD PTR _x4$11[ebp]
shl	eax, 16					
mov	DWORD PTR _scaledStem$[ebp], eax
jmp	SHORT $LN12@cf2_comput
mov	ecx, DWORD PTR _ppem$[ebp]
push	ecx
mov	edx, DWORD PTR _stemWidthPer1000$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _scaledStem$[ebp], eax
mov	eax, DWORD PTR _x1$17[ebp]
shl	eax, 16					
cmp	DWORD PTR _scaledStem$[ebp], eax
jge	SHORT $LN11@cf2_comput
mov	ecx, DWORD PTR _ppem$[ebp]
push	ecx
mov	edx, DWORD PTR _y1$16[ebp]
shl	edx, 16					
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], eax
jmp	$LN10@cf2_comput
mov	edx, DWORD PTR _x2$15[ebp]
shl	edx, 16					
cmp	DWORD PTR _scaledStem$[ebp], edx
jge	SHORT $LN9@cf2_comput
mov	eax, DWORD PTR _x2$15[ebp]
sub	eax, DWORD PTR _x1$17[ebp]
mov	DWORD PTR _xdelta$9[ebp], eax
mov	ecx, DWORD PTR _y2$14[ebp]
sub	ecx, DWORD PTR _y1$16[ebp]
mov	DWORD PTR _ydelta$8[ebp], ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _x1$17[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
sub	ecx, eax
mov	DWORD PTR _x$7[ebp], ecx
cmp	DWORD PTR _xdelta$9[ebp], 0
jne	SHORT $LN8@cf2_comput
jmp	SHORT $Try_x3$19
mov	edx, DWORD PTR _xdelta$9[ebp]
push	edx
mov	eax, DWORD PTR _ydelta$8[ebp]
push	eax
mov	ecx, DWORD PTR _x$7[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y1$16[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], esi
jmp	$LN10@cf2_comput
mov	edx, DWORD PTR _x3$13[ebp]
shl	edx, 16					
cmp	DWORD PTR _scaledStem$[ebp], edx
jge	SHORT $LN6@cf2_comput
mov	eax, DWORD PTR _x3$13[ebp]
sub	eax, DWORD PTR _x2$15[ebp]
mov	DWORD PTR _xdelta$6[ebp], eax
mov	ecx, DWORD PTR _y3$12[ebp]
sub	ecx, DWORD PTR _y2$14[ebp]
mov	DWORD PTR _ydelta$5[ebp], ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _x2$15[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
sub	ecx, eax
mov	DWORD PTR _x$4[ebp], ecx
cmp	DWORD PTR _xdelta$6[ebp], 0
jne	SHORT $LN5@cf2_comput
jmp	SHORT $Try_x4$20
mov	edx, DWORD PTR _xdelta$6[ebp]
push	edx
mov	eax, DWORD PTR _ydelta$5[ebp]
push	eax
mov	ecx, DWORD PTR _x$4[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y2$14[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], esi
jmp	$LN10@cf2_comput
mov	edx, DWORD PTR _x4$11[ebp]
shl	edx, 16					
cmp	DWORD PTR _scaledStem$[ebp], edx
jge	SHORT $Use_y4$21
mov	eax, DWORD PTR _x4$11[ebp]
sub	eax, DWORD PTR _x3$13[ebp]
mov	DWORD PTR _xdelta$3[ebp], eax
mov	ecx, DWORD PTR _y4$10[ebp]
sub	ecx, DWORD PTR _y3$12[ebp]
mov	DWORD PTR _ydelta$2[ebp], ecx
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _x3$13[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _stemWidthPer1000$[ebp]
sub	ecx, eax
mov	DWORD PTR _x$1[ebp], ecx
cmp	DWORD PTR _xdelta$3[ebp], 0
jne	SHORT $LN2@cf2_comput
jmp	SHORT $Use_y4$21
mov	edx, DWORD PTR _xdelta$3[ebp]
push	edx
mov	eax, DWORD PTR _ydelta$2[ebp]
push	eax
mov	ecx, DWORD PTR _x$1[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y3$12[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
add	esi, eax
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], esi
jmp	SHORT $LN10@cf2_comput
mov	edx, DWORD PTR _ppem$[ebp]
push	edx
mov	eax, DWORD PTR _y4$10[ebp]
shl	eax, 16					
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _emRatio$[ebp]
shl	edx, 1
push	edx
mov	eax, DWORD PTR _darkenAmount$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _boldenAmount$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _darkenAmount$[ebp]
add	eax, DWORD PTR [ecx]
mov	edx, DWORD PTR _darkenAmount$[ebp]
mov	DWORD PTR [edx], eax
pop	edi
pop	esi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_interpT2CharString PROC
push	ebp
mov	ebp, esp
mov	eax, 16240				
call	__chkstk
push	esi
push	edi
lea	edi, DWORD PTR [ebp-16240]
mov	ecx, 4060				
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _lastError$[ebp], 0
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR _decoder$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 4
mov	DWORD PTR _error$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _scaleY$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getNominalWidthX
add	esp, 4
mov	DWORD PTR _nominalWidthX$[ebp], eax
mov	edx, DWORD PTR _curY$[ebp]
mov	DWORD PTR _hintOriginY$[ebp], edx
mov	DWORD PTR _opStack$[ebp], 0
mov	DWORD PTR _instructionLimit$[ebp], 20000000 
mov	DWORD PTR _charstring$[ebp], 0
mov	DWORD PTR _charstringIndex$[ebp], -1
push	16					
mov	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
lea	edx, DWORD PTR _subrStack$[ebp]
push	edx
call	_cf2_arrstack_init
add	esp, 16					
push	20					
mov	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
lea	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_init
add	esp, 16					
push	20					
mov	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
lea	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_init
add	esp, 16					
mov	eax, DWORD PTR _error$[ebp]
push	eax
lea	ecx, DWORD PTR _hintMask$[ebp]
push	ecx
call	_cf2_hintmask_init
add	esp, 8
mov	edx, DWORD PTR _translation$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 196				
push	eax
mov	ecx, DWORD PTR _hintOriginY$[ebp]
push	ecx
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
mov	edx, DWORD PTR _scaleY$[ebp]
push	edx
mov	eax, DWORD PTR _callbacks$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_init
add	esp, 40					
mov	BYTE PTR _haveWidth$[ebp], 0
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getDefaultWidthX
add	esp, 4
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_cf2_stack_init
add	esp, 8
mov	DWORD PTR _opStack$[ebp], eax
cmp	DWORD PTR _opStack$[ebp], 0
jne	SHORT $LN427@cf2_interp
push	OFFSET $SG14720
push	532					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
push	11					
lea	ecx, DWORD PTR _subrStack$[ebp]
push	ecx
call	_cf2_arrstack_setCount
add	esp, 8
lea	edx, DWORD PTR _subrStack$[ebp]
push	edx
call	_cf2_arrstack_getBuffer
add	esp, 4
mov	DWORD PTR _charstring$[ebp], eax
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _charstring$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _charstringIndex$[ebp], 0
mov	ecx, DWORD PTR _error$[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $LN426@cf2_interp
jmp	$exit$480
mov	edx, 1
test	edx, edx
je	$LN424@cf2_interp
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_isEnd
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN423@cf2_interp
cmp	DWORD PTR _charstringIndex$[ebp], 0
je	SHORT $LN422@cf2_interp
mov	BYTE PTR _op1$[ebp], 11			
jmp	SHORT $LN421@cf2_interp
mov	BYTE PTR _op1$[ebp], 14			
jmp	SHORT $LN420@cf2_interp
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
mov	BYTE PTR _op1$[ebp], al
mov	eax, DWORD PTR _error$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN419@cf2_interp
jmp	$exit$480
mov	ecx, DWORD PTR _instructionLimit$[ebp]
sub	ecx, 1
mov	DWORD PTR _instructionLimit$[ebp], ecx
jne	SHORT $LN418@cf2_interp
push	OFFSET $SG14734
push	573					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
movzx	edx, BYTE PTR _op1$[ebp]
mov	DWORD PTR tv162[ebp], edx
cmp	DWORD PTR tv162[ebp], 31		
ja	$LN31@cf2_interp
mov	eax, DWORD PTR tv162[ebp]
movzx	ecx, BYTE PTR $LN464@cf2_interp[eax]
jmp	DWORD PTR $LN478@cf2_interp[ecx*4]
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN411@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
push	ecx
push	OFFSET $SG14744
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN415@cf2_interp
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN406@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 18					
jne	SHORT $LN430@cf2_interp
mov	DWORD PTR tv175[ebp], OFFSET $SG14750
jmp	SHORT $LN431@cf2_interp
mov	DWORD PTR tv175[ebp], OFFSET $SG14751
mov	eax, DWORD PTR tv175[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN410@cf2_interp
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN405@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN401@cf2_interp
push	OFFSET $SG14757
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN404@cf2_interp
jmp	$LN416@cf2_interp
push	0
lea	ecx, DWORD PTR _haveWidth$[ebp]
push	ecx
mov	edx, DWORD PTR _width$[ebp]
push	edx
lea	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cf2_doStems
add	esp, 24					
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
movzx	edx, BYTE PTR [ecx+753]
test	edx, edx
je	SHORT $LN400@cf2_interp
jmp	$exit$480
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN395@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 23					
jne	SHORT $LN432@cf2_interp
mov	DWORD PTR tv202[ebp], OFFSET $SG14764
jmp	SHORT $LN433@cf2_interp
mov	DWORD PTR tv202[ebp], OFFSET $SG14765
mov	eax, DWORD PTR tv202[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN399@cf2_interp
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN394@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN390@cf2_interp
push	OFFSET $SG14771
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN393@cf2_interp
jmp	$LN416@cf2_interp
push	0
lea	ecx, DWORD PTR _haveWidth$[ebp]
push	ecx
mov	edx, DWORD PTR _width$[ebp]
push	edx
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cf2_doStems
add	esp, 24					
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
movzx	edx, BYTE PTR [ecx+753]
test	edx, edx
je	SHORT $LN389@cf2_interp
jmp	$exit$480
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN384@cf2_interp
push	OFFSET $SG14778
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN388@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	SHORT $LN383@cf2_interp
movzx	ecx, BYTE PTR _haveWidth$[ebp]
test	ecx, ecx
jne	SHORT $LN383@cf2_interp
push	0
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN382@cf2_interp
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_moveTo
add	esp, 12					
jmp	$LN416@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$60[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN377@cf2_interp
push	OFFSET $SG14788
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN380@cf2_interp
mov	DWORD PTR _index$61[ebp], 0
jmp	SHORT $LN376@cf2_interp
mov	ecx, DWORD PTR _index$61[ebp]
add	ecx, 2
mov	DWORD PTR _index$61[ebp], ecx
mov	edx, DWORD PTR _index$61[ebp]
cmp	edx, DWORD PTR _count$60[ebp]
jae	SHORT $LN374@cf2_interp
mov	eax, DWORD PTR _index$61[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	edx, DWORD PTR _index$61[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	ecx, DWORD PTR _curY$[ebp]
push	ecx
mov	edx, DWORD PTR _curX$[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_lineTo
add	esp, 12					
jmp	SHORT $LN375@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$58[ebp], eax
movzx	eax, BYTE PTR _op1$[ebp]
cmp	eax, 6
jne	SHORT $LN434@cf2_interp
mov	DWORD PTR tv274[ebp], 1
jmp	SHORT $LN435@cf2_interp
mov	DWORD PTR tv274[ebp], 0
mov	cl, BYTE PTR tv274[ebp]
mov	BYTE PTR _isX$57[ebp], cl
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN369@cf2_interp
movzx	ecx, BYTE PTR _isX$57[ebp]
test	ecx, ecx
je	SHORT $LN436@cf2_interp
mov	DWORD PTR tv281[ebp], OFFSET $SG14800
jmp	SHORT $LN437@cf2_interp
mov	DWORD PTR tv281[ebp], OFFSET $SG14801
mov	edx, DWORD PTR tv281[ebp]
push	edx
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN372@cf2_interp
mov	DWORD PTR _index$59[ebp], 0
jmp	SHORT $LN368@cf2_interp
mov	ecx, DWORD PTR _index$59[ebp]
add	ecx, 1
mov	DWORD PTR _index$59[ebp], ecx
mov	edx, DWORD PTR _index$59[ebp]
cmp	edx, DWORD PTR _count$58[ebp]
jae	$LN366@cf2_interp
mov	eax, DWORD PTR _index$59[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
mov	DWORD PTR _v$56[ebp], eax
movzx	edx, BYTE PTR _isX$57[ebp]
test	edx, edx
je	SHORT $LN365@cf2_interp
mov	eax, DWORD PTR _curX$[ebp]
add	eax, DWORD PTR _v$56[ebp]
mov	DWORD PTR _curX$[ebp], eax
jmp	SHORT $LN364@cf2_interp
mov	ecx, DWORD PTR _curY$[ebp]
add	ecx, DWORD PTR _v$56[ebp]
mov	DWORD PTR _curY$[ebp], ecx
movzx	edx, BYTE PTR _isX$57[ebp]
test	edx, edx
jne	SHORT $LN438@cf2_interp
mov	DWORD PTR tv327[ebp], 1
jmp	SHORT $LN439@cf2_interp
mov	DWORD PTR tv327[ebp], 0
mov	al, BYTE PTR tv327[ebp]
mov	BYTE PTR _isX$57[ebp], al
mov	ecx, DWORD PTR _curY$[ebp]
push	ecx
mov	edx, DWORD PTR _curX$[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_lineTo
add	esp, 12					
jmp	$LN367@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$55[ebp], eax
mov	DWORD PTR _index$54[ebp], 0
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN359@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 24					
jne	SHORT $LN440@cf2_interp
mov	DWORD PTR tv340[ebp], OFFSET $SG14815
jmp	SHORT $LN441@cf2_interp
mov	DWORD PTR tv340[ebp], OFFSET $SG14816
mov	eax, DWORD PTR tv340[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN362@cf2_interp
mov	edx, DWORD PTR _index$54[ebp]
add	edx, 6
cmp	edx, DWORD PTR _count$55[ebp]
ja	$LN357@cf2_interp
mov	eax, DWORD PTR _index$54[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$53[ebp], eax
mov	edx, DWORD PTR _index$54[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$52[ebp], eax
mov	ecx, DWORD PTR _index$54[ebp]
add	ecx, 2
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$53[ebp]
mov	DWORD PTR _x2$51[ebp], eax
mov	eax, DWORD PTR _index$54[ebp]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$52[ebp]
mov	DWORD PTR _y2$50[ebp], eax
mov	edx, DWORD PTR _index$54[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$51[ebp]
mov	DWORD PTR _x3$49[ebp], eax
mov	ecx, DWORD PTR _index$54[ebp]
add	ecx, 5
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$50[ebp]
mov	DWORD PTR _y3$48[ebp], eax
mov	eax, DWORD PTR _y3$48[ebp]
push	eax
mov	ecx, DWORD PTR _x3$49[ebp]
push	ecx
mov	edx, DWORD PTR _y2$50[ebp]
push	edx
mov	eax, DWORD PTR _x2$51[ebp]
push	eax
mov	ecx, DWORD PTR _y1$52[ebp]
push	ecx
mov	edx, DWORD PTR _x1$53[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	ecx, DWORD PTR _x3$49[ebp]
mov	DWORD PTR _curX$[ebp], ecx
mov	edx, DWORD PTR _y3$48[ebp]
mov	DWORD PTR _curY$[ebp], edx
mov	eax, DWORD PTR _index$54[ebp]
add	eax, 6
mov	DWORD PTR _index$54[ebp], eax
jmp	$LN360@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 24					
jne	SHORT $LN356@cf2_interp
mov	edx, DWORD PTR _index$54[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _index$54[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_lineTo
add	esp, 12					
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN351@cf2_interp
movzx	eax, BYTE PTR _op1$[ebp]
cmp	eax, 29					
jne	SHORT $LN442@cf2_interp
mov	DWORD PTR tv402[ebp], OFFSET $SG14833
jmp	SHORT $LN443@cf2_interp
mov	DWORD PTR tv402[ebp], OFFSET $SG14834
mov	ecx, DWORD PTR tv402[ebp]
push	ecx
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN355@cf2_interp
cmp	DWORD PTR _charstringIndex$[ebp], 10	
jle	SHORT $LN350@cf2_interp
push	OFFSET $SG14836
push	757					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	eax, DWORD PTR _charstringIndex$[ebp]
add	eax, 1
push	eax
lea	ecx, DWORD PTR _subrStack$[ebp]
push	ecx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _charstring$[ebp], eax
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popInt
add	esp, 4
mov	DWORD PTR _subrIndex$47[ebp], eax
mov	al, BYTE PTR _op1$[ebp]
mov	BYTE PTR tv418[ebp], al
cmp	BYTE PTR tv418[ebp], 29			
je	SHORT $LN347@cf2_interp
jmp	SHORT $LN341@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN343@cf2_interp
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _subrIndex$47[ebp]
add	ecx, DWORD PTR [eax+900]
push	ecx
push	OFFSET $SG14847
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN347@cf2_interp
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
mov	ecx, DWORD PTR _subrIndex$47[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_initGlobalRegionBuffer
add	esp, 12					
test	eax, eax
je	SHORT $LN342@cf2_interp
push	OFFSET $SG14849
push	778					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
jmp	SHORT $LN348@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN337@cf2_interp
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _subrIndex$47[ebp]
add	eax, DWORD PTR [edx+896]
push	eax
push	OFFSET $SG14855
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN341@cf2_interp
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
mov	eax, DWORD PTR _subrIndex$47[ebp]
push	eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_initLocalRegionBuffer
add	esp, 12					
test	eax, eax
je	SHORT $LN336@cf2_interp
push	OFFSET $SG14857
push	791					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	edx, DWORD PTR _charstringIndex$[ebp]
add	edx, 1
mov	DWORD PTR _charstringIndex$[ebp], edx
jmp	$LN426@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN331@cf2_interp
push	OFFSET $SG14863
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN335@cf2_interp
cmp	DWORD PTR _charstringIndex$[ebp], 1
jge	SHORT $LN330@cf2_interp
push	OFFSET $SG14865
push	806					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	eax, DWORD PTR _charstringIndex$[ebp]
sub	eax, 1
mov	DWORD PTR _charstringIndex$[ebp], eax
mov	ecx, DWORD PTR _charstringIndex$[ebp]
push	ecx
lea	edx, DWORD PTR _subrStack$[ebp]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _charstring$[ebp], eax
jmp	$LN426@cf2_interp
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_readByte
add	esp, 4
mov	BYTE PTR _op2$46[ebp], al
movzx	ecx, BYTE PTR _op2$46[ebp]
mov	DWORD PTR tv478[ebp], ecx
cmp	DWORD PTR tv478[ebp], 37		
ja	$LN121@cf2_interp
mov	edx, DWORD PTR tv478[ebp]
movzx	eax, BYTE PTR $LN465@cf2_interp[edx]
jmp	DWORD PTR $LN479@cf2_interp[eax*4]
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN322@cf2_interp
push	OFFSET $SG14879
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN326@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN317@cf2_interp
push	OFFSET $SG14885
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN321@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN313@cf2_interp
push	OFFSET $SG14890
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN318@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN308@cf2_interp
push	OFFSET $SG14896
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN312@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN304@cf2_interp
push	OFFSET $SG14901
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN309@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN299@cf2_interp
push	OFFSET $SG14907
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN303@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN295@cf2_interp
push	OFFSET $SG14912
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN300@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN290@cf2_interp
push	OFFSET $SG14918
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN294@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN286@cf2_interp
push	OFFSET $SG14923
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN291@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN281@cf2_interp
push	OFFSET $SG14929
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN285@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN277@cf2_interp
push	OFFSET $SG14934
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN282@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN272@cf2_interp
push	OFFSET $SG14940
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN276@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN268@cf2_interp
push	OFFSET $SG14945
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN273@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN263@cf2_interp
push	OFFSET $SG14951
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN267@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN259@cf2_interp
push	OFFSET $SG14956
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN264@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN254@cf2_interp
push	OFFSET $SG14962
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN258@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN250@cf2_interp
push	OFFSET $SG14967
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN255@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN245@cf2_interp
push	OFFSET $SG14973
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN249@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN241@cf2_interp
push	OFFSET $SG14978
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN246@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN236@cf2_interp
push	OFFSET $SG14984
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN240@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN232@cf2_interp
push	OFFSET $SG14989
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN237@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN227@cf2_interp
push	OFFSET $SG14995
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN231@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN223@cf2_interp
push	OFFSET $SG15000
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN228@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN218@cf2_interp
push	OFFSET $SG15006
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN222@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN214@cf2_interp
push	OFFSET $SG15011
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN219@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN209@cf2_interp
push	OFFSET $SG15017
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN213@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN205@cf2_interp
push	OFFSET $SG15022
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN210@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN200@cf2_interp
push	OFFSET $SG15028
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN204@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN196@cf2_interp
push	OFFSET $SG15033
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN201@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN191@cf2_interp
push	OFFSET $SG15039
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN195@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN187@cf2_interp
push	OFFSET $SG15044
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN192@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN182@cf2_interp
push	OFFSET $SG15050
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN186@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN178@cf2_interp
push	OFFSET $SG15055
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN183@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN173@cf2_interp
push	OFFSET $SG15061
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN177@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN169@cf2_interp
push	OFFSET $SG15066
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN174@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN164@cf2_interp
push	OFFSET $SG15072
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN168@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN160@cf2_interp
push	OFFSET $SG15077
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN165@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN155@cf2_interp
push	OFFSET $SG15083
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN159@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN151@cf2_interp
push	OFFSET $SG15088
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN156@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN146@cf2_interp
push	OFFSET $SG15094
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN150@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN142@cf2_interp
push	OFFSET $SG15099
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN147@cf2_interp
jmp	$LN327@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN137@cf2_interp
push	OFFSET $SG15107
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN141@cf2_interp
push	0
push	OFFSET ?readFromStack@?FB@??cf2_interpT2CharString@@9@9
lea	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
lea	edx, DWORD PTR _curY$[ebp]
push	edx
lea	eax, DWORD PTR _curX$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_doFlex
add	esp, 24					
jmp	$LN426@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN132@cf2_interp
push	OFFSET $SG15115
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN136@cf2_interp
push	0
push	OFFSET ?readFromStack@?FD@??cf2_interpT2CharString@@9@9
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
lea	eax, DWORD PTR _curY$[ebp]
push	eax
lea	ecx, DWORD PTR _curX$[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_doFlex
add	esp, 24					
jmp	$LN327@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN127@cf2_interp
push	OFFSET $SG15123
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN131@cf2_interp
push	0
push	OFFSET ?readFromStack@?FF@??cf2_interpT2CharString@@9@9
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
lea	ecx, DWORD PTR _curY$[ebp]
push	ecx
lea	edx, DWORD PTR _curX$[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_doFlex
add	esp, 24					
jmp	$LN426@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN122@cf2_interp
push	OFFSET $SG15131
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN126@cf2_interp
push	1
push	OFFSET ?readFromStack@?FH@??cf2_interpT2CharString@@9@9
lea	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
lea	edx, DWORD PTR _curY$[ebp]
push	edx
lea	eax, DWORD PTR _curX$[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_doFlex
add	esp, 24					
jmp	$LN426@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN117@cf2_interp
movzx	ecx, BYTE PTR _op2$46[ebp]
push	ecx
push	OFFSET $SG15137
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN121@cf2_interp
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN112@cf2_interp
push	OFFSET $SG15143
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN116@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
je	SHORT $LN110@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
cmp	eax, 5
jne	SHORT $LN109@cf2_interp
movzx	edx, BYTE PTR _haveWidth$[ebp]
test	edx, edx
jne	SHORT $LN109@cf2_interp
push	0
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN108@cf2_interp
jmp	$exit$480
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_closeOpenPath
add	esp, 4
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	$LN107@cf2_interp
movzx	ecx, BYTE PTR _doingSeac$[ebp]
test	ecx, ecx
je	SHORT $LN106@cf2_interp
push	OFFSET $SG15155
push	1100					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popInt
add	esp, 4
mov	DWORD PTR _achar$45[ebp], eax
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_popInt
add	esp, 4
mov	DWORD PTR _bchar$44[ebp], eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_popFixed
add	esp, 4
mov	DWORD PTR _curY$[ebp], eax
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
mov	DWORD PTR _curX$[ebp], eax
lea	eax, DWORD PTR _component$43[ebp]
push	eax
mov	ecx, DWORD PTR _achar$45[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_getSeacComponent
add	esp, 12					
mov	DWORD PTR _error2$41[ebp], eax
cmp	DWORD PTR _error2$41[ebp], 0
je	SHORT $LN105@cf2_interp
mov	eax, DWORD PTR _error2$41[ebp]
mov	DWORD PTR _lastError$[ebp], eax
jmp	$exit$480
lea	ecx, DWORD PTR _dummyWidth$42[ebp]
push	ecx
mov	edx, DWORD PTR _curY$[ebp]
push	edx
mov	eax, DWORD PTR _curX$[ebp]
push	eax
push	1
mov	ecx, DWORD PTR _translation$[ebp]
push	ecx
mov	edx, DWORD PTR _callbacks$[ebp]
push	edx
lea	eax, DWORD PTR _component$43[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cf2_interpT2CharString
add	esp, 32					
lea	edx, DWORD PTR _component$43[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_freeSeacComponent
add	esp, 8
lea	ecx, DWORD PTR _component$43[ebp]
push	ecx
mov	edx, DWORD PTR _bchar$44[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getSeacComponent
add	esp, 12					
mov	DWORD PTR _error2$41[ebp], eax
cmp	DWORD PTR _error2$41[ebp], 0
je	SHORT $LN104@cf2_interp
mov	ecx, DWORD PTR _error2$41[ebp]
mov	DWORD PTR _lastError$[ebp], ecx
jmp	$exit$480
lea	edx, DWORD PTR _dummyWidth$42[ebp]
push	edx
push	0
push	0
push	1
mov	eax, DWORD PTR _translation$[ebp]
push	eax
mov	ecx, DWORD PTR _callbacks$[ebp]
push	ecx
lea	edx, DWORD PTR _component$43[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
call	_cf2_interpT2CharString
add	esp, 32					
lea	ecx, DWORD PTR _component$43[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_freeSeacComponent
add	esp, 8
jmp	$exit$480
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN99@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 20					
jne	SHORT $LN444@cf2_interp
mov	DWORD PTR tv875[ebp], OFFSET $SG15163
jmp	SHORT $LN445@cf2_interp
mov	DWORD PTR tv875[ebp], OFFSET $SG15164
mov	eax, DWORD PTR tv875[ebp]
push	eax
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN103@cf2_interp
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	SHORT $LN98@cf2_interp
lea	eax, DWORD PTR _hintMask$[ebp]
push	eax
call	_cf2_hintmask_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN98@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN94@cf2_interp
push	OFFSET $SG15170
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN97@cf2_interp
jmp	$LN416@cf2_interp
push	0
lea	edx, DWORD PTR _haveWidth$[ebp]
push	edx
mov	eax, DWORD PTR _width$[ebp]
push	eax
lea	ecx, DWORD PTR _vStemHintArray$[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
call	_cf2_doStems
add	esp, 24					
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+753]
test	eax, eax
je	SHORT $LN93@cf2_interp
jmp	$exit$480
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 19					
jne	SHORT $LN92@cf2_interp
lea	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_size
add	esp, 4
mov	esi, eax
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
call	_cf2_arrstack_size
add	esp, 4
add	esi, eax
push	esi
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
lea	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_read
add	esp, 12					
jmp	$LN91@cf2_interp
mov	eax, DWORD PTR _scaleY$[ebp]
push	eax
lea	ecx, DWORD PTR _glyphPath$[ebp+11612]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp+7744]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
lea	ecx, DWORD PTR _counterHintMap$40[ebp]
push	ecx
call	_cf2_hintmap_init
add	esp, 20					
mov	edx, DWORD PTR _error$[ebp]
push	edx
lea	eax, DWORD PTR _counterMask$39[ebp]
push	eax
call	_cf2_hintmask_init
add	esp, 8
lea	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
call	_cf2_arrstack_size
add	esp, 4
mov	esi, eax
lea	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_size
add	esp, 4
add	esi, eax
push	esi
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
lea	ecx, DWORD PTR _counterMask$39[ebp]
push	ecx
call	_cf2_hintmask_read
add	esp, 12					
push	0
push	0
lea	edx, DWORD PTR _counterMask$39[ebp]
push	edx
lea	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
lea	edx, DWORD PTR _counterHintMap$40[ebp]
push	edx
call	_cf2_hintmap_build
add	esp, 24					
jmp	$LN416@cf2_interp
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN86@cf2_interp
push	OFFSET $SG15181
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN90@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
cmp	eax, 2
jbe	SHORT $LN85@cf2_interp
movzx	ecx, BYTE PTR _haveWidth$[ebp]
test	ecx, ecx
jne	SHORT $LN85@cf2_interp
push	0
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN84@cf2_interp
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _curY$[ebp]
push	ecx
mov	edx, DWORD PTR _curX$[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_moveTo
add	esp, 12					
jmp	$LN416@cf2_interp
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN79@cf2_interp
push	OFFSET $SG15189
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN83@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
cmp	eax, 1
jbe	SHORT $LN78@cf2_interp
movzx	edx, BYTE PTR _haveWidth$[ebp]
test	edx, edx
jne	SHORT $LN78@cf2_interp
push	0
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _nominalWidthX$[ebp]
mov	ecx, DWORD PTR _width$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR _haveWidth$[ebp], 1
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+132]
movzx	ecx, BYTE PTR [eax+753]
test	ecx, ecx
je	SHORT $LN77@cf2_interp
jmp	$exit$480
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_popFixed
add	esp, 4
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_moveTo
add	esp, 12					
jmp	$LN416@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$38[ebp], eax
mov	DWORD PTR _index$37[ebp], 0
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN72@cf2_interp
push	OFFSET $SG15199
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN75@cf2_interp
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 6
cmp	ecx, DWORD PTR _count$38[ebp]
jae	SHORT $LN70@cf2_interp
mov	edx, DWORD PTR _index$37[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _curY$[ebp], eax
mov	eax, DWORD PTR _curY$[ebp]
push	eax
mov	ecx, DWORD PTR _curX$[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_lineTo
add	esp, 12					
mov	eax, DWORD PTR _index$37[ebp]
add	eax, 2
mov	DWORD PTR _index$37[ebp], eax
jmp	SHORT $LN73@cf2_interp
mov	ecx, DWORD PTR _index$37[ebp]
cmp	ecx, DWORD PTR _count$38[ebp]
jae	$LN68@cf2_interp
mov	edx, DWORD PTR _index$37[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$36[ebp], eax
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$35[ebp], eax
mov	eax, DWORD PTR _index$37[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$36[ebp]
mov	DWORD PTR _x2$34[ebp], eax
mov	edx, DWORD PTR _index$37[ebp]
add	edx, 3
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$35[ebp]
mov	DWORD PTR _y2$33[ebp], eax
mov	ecx, DWORD PTR _index$37[ebp]
add	ecx, 4
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$34[ebp]
mov	DWORD PTR _x3$32[ebp], eax
mov	eax, DWORD PTR _index$37[ebp]
add	eax, 5
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$33[ebp]
mov	DWORD PTR _y3$31[ebp], eax
mov	edx, DWORD PTR _y3$31[ebp]
push	edx
mov	eax, DWORD PTR _x3$32[ebp]
push	eax
mov	ecx, DWORD PTR _y2$33[ebp]
push	ecx
mov	edx, DWORD PTR _x2$34[ebp]
push	edx
mov	eax, DWORD PTR _y1$35[ebp]
push	eax
mov	ecx, DWORD PTR _x1$36[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	eax, DWORD PTR _x3$32[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _y3$31[ebp]
mov	DWORD PTR _curY$[ebp], ecx
mov	edx, DWORD PTR _index$37[ebp]
add	edx, 6
mov	DWORD PTR _index$37[ebp], edx
jmp	$LN70@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$30[ebp], eax
mov	DWORD PTR _index$29[ebp], 0
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN63@cf2_interp
push	OFFSET $SG15219
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN66@cf2_interp
mov	edx, DWORD PTR _index$29[ebp]
cmp	edx, DWORD PTR _count$30[ebp]
jae	$LN61@cf2_interp
mov	eax, DWORD PTR _count$30[ebp]
sub	eax, DWORD PTR _index$29[ebp]
and	eax, 1
je	SHORT $LN60@cf2_interp
mov	ecx, DWORD PTR _index$29[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$28[ebp], eax
mov	eax, DWORD PTR _index$29[ebp]
add	eax, 1
mov	DWORD PTR _index$29[ebp], eax
jmp	SHORT $LN59@cf2_interp
mov	ecx, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$28[ebp], ecx
mov	edx, DWORD PTR _index$29[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$27[ebp], eax
mov	ecx, DWORD PTR _index$29[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$28[ebp]
mov	DWORD PTR _x2$26[ebp], eax
mov	eax, DWORD PTR _index$29[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$27[ebp]
mov	DWORD PTR _y2$25[ebp], eax
mov	edx, DWORD PTR _x2$26[ebp]
mov	DWORD PTR _x3$24[ebp], edx
mov	eax, DWORD PTR _index$29[ebp]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$25[ebp]
mov	DWORD PTR _y3$23[ebp], eax
mov	edx, DWORD PTR _y3$23[ebp]
push	edx
mov	eax, DWORD PTR _x3$24[ebp]
push	eax
mov	ecx, DWORD PTR _y2$25[ebp]
push	ecx
mov	edx, DWORD PTR _x2$26[ebp]
push	edx
mov	eax, DWORD PTR _y1$27[ebp]
push	eax
mov	ecx, DWORD PTR _x1$28[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	eax, DWORD PTR _x3$24[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _y3$23[ebp]
mov	DWORD PTR _curY$[ebp], ecx
mov	edx, DWORD PTR _index$29[ebp]
add	edx, 4
mov	DWORD PTR _index$29[ebp], edx
jmp	$LN64@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$22[ebp], eax
mov	DWORD PTR _index$21[ebp], 0
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN54@cf2_interp
push	OFFSET $SG15238
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN57@cf2_interp
mov	edx, DWORD PTR _index$21[ebp]
cmp	edx, DWORD PTR _count$22[ebp]
jae	$LN52@cf2_interp
mov	eax, DWORD PTR _count$22[ebp]
sub	eax, DWORD PTR _index$21[ebp]
and	eax, 1
je	SHORT $LN51@cf2_interp
mov	ecx, DWORD PTR _index$21[ebp]
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$19[ebp], eax
mov	eax, DWORD PTR _index$21[ebp]
add	eax, 1
mov	DWORD PTR _index$21[ebp], eax
jmp	SHORT $LN50@cf2_interp
mov	ecx, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$19[ebp], ecx
mov	edx, DWORD PTR _index$21[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$20[ebp], eax
mov	ecx, DWORD PTR _index$21[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$20[ebp]
mov	DWORD PTR _x2$18[ebp], eax
mov	eax, DWORD PTR _index$21[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$19[ebp]
mov	DWORD PTR _y2$17[ebp], eax
mov	edx, DWORD PTR _index$21[ebp]
add	edx, 3
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$18[ebp]
mov	DWORD PTR _x3$16[ebp], eax
mov	ecx, DWORD PTR _y2$17[ebp]
mov	DWORD PTR _y3$15[ebp], ecx
mov	edx, DWORD PTR _y3$15[ebp]
push	edx
mov	eax, DWORD PTR _x3$16[ebp]
push	eax
mov	ecx, DWORD PTR _y2$17[ebp]
push	ecx
mov	edx, DWORD PTR _x2$18[ebp]
push	edx
mov	eax, DWORD PTR _y1$19[ebp]
push	eax
mov	ecx, DWORD PTR _x1$20[ebp]
push	ecx
lea	edx, DWORD PTR _glyphPath$[ebp]
push	edx
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	eax, DWORD PTR _x3$16[ebp]
mov	DWORD PTR _curX$[ebp], eax
mov	ecx, DWORD PTR _y3$15[ebp]
mov	DWORD PTR _curY$[ebp], ecx
mov	edx, DWORD PTR _index$21[ebp]
add	edx, 4
mov	DWORD PTR _index$21[ebp], edx
jmp	$LN55@cf2_interp
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_count
add	esp, 4
mov	DWORD PTR _count$14[ebp], eax
mov	DWORD PTR _index$13[ebp], 0
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 31					
jne	SHORT $LN446@cf2_interp
mov	DWORD PTR tv1167[ebp], 1
jmp	SHORT $LN447@cf2_interp
mov	DWORD PTR tv1167[ebp], 0
mov	al, BYTE PTR tv1167[ebp]
mov	BYTE PTR _alternate$12[ebp], al
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN45@cf2_interp
movzx	eax, BYTE PTR _alternate$12[ebp]
test	eax, eax
je	SHORT $LN448@cf2_interp
mov	DWORD PTR tv1174[ebp], OFFSET $SG15258
jmp	SHORT $LN449@cf2_interp
mov	DWORD PTR tv1174[ebp], OFFSET $SG15259
mov	ecx, DWORD PTR tv1174[ebp]
push	ecx
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN48@cf2_interp
mov	eax, DWORD PTR _index$13[ebp]
cmp	eax, DWORD PTR _count$14[ebp]
jae	$LN43@cf2_interp
movzx	ecx, BYTE PTR _alternate$12[ebp]
test	ecx, ecx
je	$LN42@cf2_interp
mov	edx, DWORD PTR _index$13[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$11[ebp], eax
mov	ecx, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$8[ebp], ecx
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 1
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$11[ebp]
mov	DWORD PTR _x2$10[ebp], eax
mov	ecx, DWORD PTR _index$13[ebp]
add	ecx, 2
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$8[ebp]
mov	DWORD PTR _y2$7[ebp], eax
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$7[ebp]
mov	DWORD PTR _y3$6[ebp], eax
mov	edx, DWORD PTR _count$14[ebp]
sub	edx, DWORD PTR _index$13[ebp]
cmp	edx, 5
jne	SHORT $LN41@cf2_interp
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 4
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$10[ebp]
mov	DWORD PTR _x3$9[ebp], eax
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 1
mov	DWORD PTR _index$13[ebp], edx
jmp	SHORT $LN40@cf2_interp
mov	eax, DWORD PTR _x2$10[ebp]
mov	DWORD PTR _x3$9[ebp], eax
mov	BYTE PTR _alternate$12[ebp], 0
jmp	$LN39@cf2_interp
mov	ecx, DWORD PTR _curX$[ebp]
mov	DWORD PTR _x1$11[ebp], ecx
mov	edx, DWORD PTR _index$13[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _curY$[ebp]
mov	DWORD PTR _y1$8[ebp], eax
mov	ecx, DWORD PTR _index$13[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x1$11[ebp]
mov	DWORD PTR _x2$10[ebp], eax
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 2
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y1$8[ebp]
mov	DWORD PTR _y2$7[ebp], eax
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 3
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _x2$10[ebp]
mov	DWORD PTR _x3$9[ebp], eax
mov	ecx, DWORD PTR _count$14[ebp]
sub	ecx, DWORD PTR _index$13[ebp]
cmp	ecx, 5
jne	SHORT $LN38@cf2_interp
mov	edx, DWORD PTR _index$13[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_getReal
add	esp, 8
add	eax, DWORD PTR _y2$7[ebp]
mov	DWORD PTR _y3$6[ebp], eax
mov	ecx, DWORD PTR _index$13[ebp]
add	ecx, 1
mov	DWORD PTR _index$13[ebp], ecx
jmp	SHORT $LN37@cf2_interp
mov	edx, DWORD PTR _y2$7[ebp]
mov	DWORD PTR _y3$6[ebp], edx
mov	BYTE PTR _alternate$12[ebp], 1
mov	eax, DWORD PTR _y3$6[ebp]
push	eax
mov	ecx, DWORD PTR _x3$9[ebp]
push	ecx
mov	edx, DWORD PTR _y2$7[ebp]
push	edx
mov	eax, DWORD PTR _x2$10[ebp]
push	eax
mov	ecx, DWORD PTR _y1$8[ebp]
push	ecx
mov	edx, DWORD PTR _x1$11[ebp]
push	edx
lea	eax, DWORD PTR _glyphPath$[ebp]
push	eax
call	_cf2_glyphpath_curveTo
add	esp, 28					
mov	ecx, DWORD PTR _x3$9[ebp]
mov	DWORD PTR _curX$[ebp], ecx
mov	edx, DWORD PTR _y3$6[ebp]
mov	DWORD PTR _curY$[ebp], edx
mov	eax, DWORD PTR _index$13[ebp]
add	eax, 4
mov	DWORD PTR _index$13[ebp], eax
jmp	$LN46@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
mov	esi, eax
shl	esi, 8
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_readByte
add	esp, 4
or	esi, eax
movsx	ecx, si
mov	DWORD PTR _v$5[ebp], ecx
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN32@cf2_interp
mov	ecx, DWORD PTR _v$5[ebp]
push	ecx
push	OFFSET $SG15282
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN35@cf2_interp
mov	eax, DWORD PTR _v$5[ebp]
push	eax
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN426@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
cmp	edx, 246				
jg	SHORT $LN30@cf2_interp
movzx	eax, BYTE PTR _op1$[ebp]
sub	eax, 139				
mov	DWORD PTR _v$4[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN26@cf2_interp
mov	eax, DWORD PTR _v$4[ebp]
push	eax
push	OFFSET $SG15290
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN29@cf2_interp
mov	edx, DWORD PTR _v$4[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN13@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 250				
jg	$LN24@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
mov	DWORD PTR _v$3[ebp], edx
mov	eax, DWORD PTR _v$3[ebp]
sub	eax, 247				
mov	DWORD PTR _v$3[ebp], eax
mov	ecx, DWORD PTR _v$3[ebp]
shl	ecx, 8
mov	DWORD PTR _v$3[ebp], ecx
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
add	eax, DWORD PTR _v$3[ebp]
mov	DWORD PTR _v$3[ebp], eax
mov	eax, DWORD PTR _v$3[ebp]
add	eax, 108				
mov	DWORD PTR _v$3[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN20@cf2_interp
mov	eax, DWORD PTR _v$3[ebp]
push	eax
push	OFFSET $SG15298
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN23@cf2_interp
mov	edx, DWORD PTR _v$3[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN13@cf2_interp
movzx	ecx, BYTE PTR _op1$[ebp]
cmp	ecx, 254				
jg	$LN18@cf2_interp
movzx	edx, BYTE PTR _op1$[ebp]
mov	DWORD PTR _v$2[ebp], edx
mov	eax, DWORD PTR _v$2[ebp]
sub	eax, 251				
mov	DWORD PTR _v$2[ebp], eax
mov	ecx, DWORD PTR _v$2[ebp]
shl	ecx, 8
mov	DWORD PTR _v$2[ebp], ecx
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
add	eax, DWORD PTR _v$2[ebp]
mov	DWORD PTR _v$2[ebp], eax
mov	eax, DWORD PTR _v$2[ebp]
neg	eax
sub	eax, 108				
mov	DWORD PTR _v$2[ebp], eax
mov	ecx, 4
imul	edx, ecx, 53
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN14@cf2_interp
mov	eax, DWORD PTR _v$2[ebp]
push	eax
push	OFFSET $SG15306
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN17@cf2_interp
mov	edx, DWORD PTR _v$2[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushInt
add	esp, 8
jmp	$LN13@cf2_interp
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
call	_cf2_buf_readByte
add	esp, 4
mov	esi, eax
shl	esi, 24					
mov	edx, DWORD PTR _charstring$[ebp]
push	edx
call	_cf2_buf_readByte
add	esp, 4
shl	eax, 16					
or	esi, eax
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
call	_cf2_buf_readByte
add	esp, 4
shl	eax, 8
or	esi, eax
mov	ecx, DWORD PTR _charstring$[ebp]
push	ecx
call	_cf2_buf_readByte
add	esp, 4
or	esi, eax
mov	DWORD PTR _v$1[ebp], esi
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN9@cf2_interp
cvtsi2sd xmm0, DWORD PTR _v$1[ebp]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG15318
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN12@cf2_interp
mov	edx, DWORD PTR _v$1[ebp]
push	edx
mov	eax, DWORD PTR _opStack$[ebp]
push	eax
call	_cf2_stack_pushFixed
add	esp, 8
jmp	$LN426@cf2_interp
mov	ecx, DWORD PTR _opStack$[ebp]
push	ecx
call	_cf2_stack_clear
add	esp, 4
jmp	$LN426@cf2_interp
mov	edx, 4
imul	eax, edx, 53
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN5@cf2_interp
push	OFFSET $SG15323
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN424@cf2_interp
mov	edx, DWORD PTR _lastError$[ebp]
push	edx
mov	eax, DWORD PTR _error$[ebp]
push	eax
call	_cf2_setError
add	esp, 8
lea	ecx, DWORD PTR _glyphPath$[ebp]
push	ecx
call	_cf2_glyphpath_finalize
add	esp, 4
lea	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_finalize
add	esp, 4
lea	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
call	_cf2_arrstack_finalize
add	esp, 4
lea	ecx, DWORD PTR _subrStack$[ebp]
push	ecx
call	_cf2_arrstack_finalize
add	esp, 4
mov	edx, DWORD PTR _opStack$[ebp]
push	edx
call	_cf2_stack_free
add	esp, 4
mov	eax, 4
imul	ecx, eax, 53
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN1@cf2_interp
push	OFFSET $SG15328
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN4@cf2_interp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN477@cf2_interp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 16240				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	10					
DD	$LN476@cf2_interp
DD	-80					
DD	32					
DD	$LN466@cf2_interp
DD	-89					
DD	1
DD	$LN467@cf2_interp
DD	-140					
DD	32					
DD	$LN468@cf2_interp
DD	-180					
DD	32					
DD	$LN469@cf2_interp
DD	-216					
DD	28					
DD	$LN470@cf2_interp
DD	-12008					
DD	11784					
DD	$LN471@cf2_interp
DD	-12104					
DD	16					
DD	$LN472@cf2_interp
DD	-12116					
DD	4
DD	$LN473@cf2_interp
DD	-15996					
DD	3868					
DD	$LN474@cf2_interp
DD	-16032					
DD	28					
DD	$LN475@cf2_interp
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	101					
DB	114					
DB	77					
DB	97					
DB	115					
DB	107					
DB	0
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	101					
DB	114					
DB	72					
DB	105					
DB	110					
DB	116					
DB	77					
DB	97					
DB	112					
DB	0
DB	100					
DB	117					
DB	109					
DB	109					
DB	121					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	99					
DB	111					
DB	109					
DB	112					
DB	111					
DB	110					
DB	101					
DB	110					
DB	116					
DB	0
DB	103					
DB	108					
DB	121					
DB	112					
DB	104					
DB	80					
DB	97					
DB	116					
DB	104					
DB	0
DB	104					
DB	105					
DB	110					
DB	116					
DB	77					
DB	97					
DB	115					
DB	107					
DB	0
DB	118					
DB	83					
DB	116					
DB	101					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	65					
DB	114					
DB	114					
DB	97					
DB	121					
DB	0
DB	104					
DB	83					
DB	116					
DB	101					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	65					
DB	114					
DB	114					
DB	97					
DB	121					
DB	0
DB	104					
DB	97					
DB	118					
DB	101					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	115					
DB	117					
DB	98					
DB	114					
DB	83					
DB	116					
DB	97					
DB	99					
DB	107					
DB	0
npad	3
DD	$LN415@cf2_interp
DD	$LN410@cf2_interp
DD	$LN399@cf2_interp
DD	$LN388@cf2_interp
DD	$LN381@cf2_interp
DD	$LN373@cf2_interp
DD	$LN363@cf2_interp
DD	$LN355@cf2_interp
DD	$LN335@cf2_interp
DD	$LN329@cf2_interp
DD	$LN116@cf2_interp
DD	$LN103@cf2_interp
DD	$LN90@cf2_interp
DD	$LN83@cf2_interp
DD	$LN76@cf2_interp
DD	$LN67@cf2_interp
DD	$LN58@cf2_interp
DD	$LN36@cf2_interp
DD	$LN49@cf2_interp
DB	0
DB	1
DB	0
DB	2
DB	3
DB	4
DB	5
DB	5
DB	6
DB	0
DB	7
DB	8
DB	9
DB	0
DB	10					
DB	0
DB	0
DB	0
DB	1
DB	11					
DB	11					
DB	12					
DB	13					
DB	2
DB	6
DB	14					
DB	15					
DB	16					
DB	17					
DB	7
DB	18					
DB	18					
DD	$LN326@cf2_interp
DD	$LN321@cf2_interp
DD	$LN312@cf2_interp
DD	$LN303@cf2_interp
DD	$LN294@cf2_interp
DD	$LN285@cf2_interp
DD	$LN276@cf2_interp
DD	$LN267@cf2_interp
DD	$LN258@cf2_interp
DD	$LN249@cf2_interp
DD	$LN240@cf2_interp
DD	$LN231@cf2_interp
DD	$LN222@cf2_interp
DD	$LN213@cf2_interp
DD	$LN204@cf2_interp
DD	$LN195@cf2_interp
DD	$LN186@cf2_interp
DD	$LN177@cf2_interp
DD	$LN168@cf2_interp
DD	$LN159@cf2_interp
DD	$LN150@cf2_interp
DD	$LN141@cf2_interp
DD	$LN136@cf2_interp
DD	$LN131@cf2_interp
DD	$LN126@cf2_interp
DD	$LN121@cf2_interp
DB	0
DB	25					
DB	25					
DB	1
DB	2
DB	3
DB	25					
DB	25					
DB	25					
DB	4
DB	5
DB	6
DB	7
DB	25					
DB	8
DB	9
DB	25					
DB	25					
DB	10					
DB	25					
DB	11					
DB	12					
DB	13					
DB	14					
DB	15					
DB	25					
DB	16					
DB	17					
DB	18					
DB	19					
DB	20					
DB	25					
DB	25					
DB	25					
DB	21					
DB	22					
DB	23					
DB	24					
ENDP
_cf2_hintmask_setAll PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	ecx, DWORD PTR _bitCount$[ebp]
neg	ecx
and	ecx, 7
mov	eax, 1
shl	eax, cl
sub	eax, 1
mov	DWORD PTR _mask$[ebp], eax
mov	ecx, DWORD PTR _bitCount$[ebp]
push	ecx
mov	edx, DWORD PTR _hintmask$[ebp]
push	edx
call	_cf2_hintmask_setCounts
add	esp, 8
test	eax, eax
jne	SHORT $LN11@cf2_hintma
jmp	$LN13@cf2_hintma
mov	eax, DWORD PTR _hintmask$[ebp]
cmp	DWORD PTR [eax+12], 0
ja	SHORT $LN10@cf2_hintma
push	OFFSET $SG14531
push	185					
push	OFFSET $SG14532
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN11@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
cmp	DWORD PTR [edx+12], 12			
jb	SHORT $LN6@cf2_hintma
push	OFFSET $SG14537
push	187					
push	OFFSET $SG14538
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN7@cf2_hintma
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN3@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+12]
jae	SHORT $LN1@cf2_hintma
mov	ecx, DWORD PTR _hintmask$[ebp]
add	ecx, DWORD PTR _i$[ebp]
mov	BYTE PTR [ecx+16], 255			
jmp	SHORT $LN2@cf2_hintma
mov	edx, DWORD PTR _hintmask$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR _mask$[ebp]
not	ecx
mov	edx, DWORD PTR _hintmask$[ebp]
movzx	eax, BYTE PTR [edx+eax+15]
and	eax, ecx
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	BYTE PTR [ecx+edx+15], al
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmask_getMaskPtr PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
add	eax, 16					
pop	ebp
ret	0
ENDP
_cf2_hintmask_setNew PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
mov	cl, BYTE PTR _val$[ebp]
mov	BYTE PTR [eax+5], cl
pop	ebp
ret	0
ENDP
_cf2_hintmask_isNew PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
mov	al, BYTE PTR [eax+5]
pop	ebp
ret	0
ENDP
_cf2_hintmask_isValid PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hintmask$[ebp]
mov	al, BYTE PTR [eax+4]
pop	ebp
ret	0
ENDP
_cf2_hintmask_init PROC
push	ebp
mov	ebp, esp
push	28					
push	0
mov	eax, DWORD PTR _hintmask$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _hintmask$[ebp]
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR [ecx], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getGlyphOutline PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _lastError$[ebp], 0
mov	DWORD PTR _advWidth$[ebp], 0
mov	eax, DWORD PTR _transform$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _translation$[ebp], ecx
mov	edx, DWORD PTR _transform$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _translation$[ebp+4], eax
mov	ecx, DWORD PTR _transform$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cf2_font_setup
add	esp, 8
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN6@cf2_getGly
jmp	$exit$13
mov	ecx, DWORD PTR _font$[ebp]
mov	BYTE PTR [ecx+192], 0
mov	edx, DWORD PTR _font$[ebp]
mov	al, BYTE PTR [edx+141]
mov	BYTE PTR _needWinding$[ebp], al
mov	ecx, 1
test	ecx, ecx
je	SHORT $LN4@cf2_getGly
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
call	_cf2_outline_reset
add	esp, 4
lea	eax, DWORD PTR _advWidth$[ebp]
push	eax
push	0
push	0
push	0
lea	ecx, DWORD PTR _translation$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
mov	eax, DWORD PTR _charstring$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cf2_interpT2CharString
add	esp, 32					
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+4], 0
je	SHORT $LN3@cf2_getGly
jmp	SHORT $exit$13
movzx	eax, BYTE PTR _needWinding$[ebp]
test	eax, eax
jne	SHORT $LN2@cf2_getGly
jmp	SHORT $LN4@cf2_getGly
mov	ecx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [ecx+116], 0
jl	SHORT $LN1@cf2_getGly
jmp	SHORT $LN4@cf2_getGly
mov	edx, DWORD PTR _font$[ebp]
mov	BYTE PTR [edx+192], 1
mov	BYTE PTR _needWinding$[ebp], 0
jmp	SHORT $LN5@cf2_getGly
mov	eax, DWORD PTR _font$[ebp]
add	eax, 100				
push	eax
call	_cf2_outline_close
add	esp, 4
mov	ecx, DWORD PTR _glyphWidth$[ebp]
mov	edx, DWORD PTR _advWidth$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _lastError$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 4
push	ecx
call	_cf2_setError
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@cf2_getGly
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN11@cf2_getGly
DD	-16					
DD	8
DD	$LN9@cf2_getGly
DD	-28					
DD	4
DD	$LN10@cf2_getGly
DB	97					
DB	100					
DB	118					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	116					
DB	114					
DB	97					
DB	110					
DB	115					
DB	108					
DB	97					
DB	116					
DB	105					
DB	111					
DB	110					
DB	0
ENDP
_cf2_glyphpath_closeOpenPath PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11664]
test	ecx, ecx
je	$LN3@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11665], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11740]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11736]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_lineTo
add	esp, 12					
mov	edx, DWORD PTR _glyphpath$[ebp]
movzx	eax, BYTE PTR [edx+11744]
test	eax, eax
je	SHORT $LN1@cf2_glyphp
push	1
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11716]
push	edx
mov	eax, DWORD PTR [ecx+11712]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11704				
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_pushPrevElem
add	esp, 24					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11667], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11664], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11665], 0
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11744], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_curveTo PROC
push	ebp
mov	ebp, esp
sub	esp, 112				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-112]
mov	ecx, 28					
mov	eax, -858993460				
rep stosd
lea	eax, DWORD PTR _yOffset1$[ebp]
push	eax
lea	ecx, DWORD PTR _xOffset1$[ebp]
push	ecx
mov	edx, DWORD PTR _y1$[ebp]
push	edx
mov	eax, DWORD PTR _x1$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11724]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11720]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_computeOffset
add	esp, 28					
lea	eax, DWORD PTR _yOffset3$[ebp]
push	eax
lea	ecx, DWORD PTR _xOffset3$[ebp]
push	ecx
mov	edx, DWORD PTR _y3$[ebp]
push	edx
mov	eax, DWORD PTR _x3$[ebp]
push	eax
mov	ecx, DWORD PTR _y2$[ebp]
push	ecx
mov	edx, DWORD PTR _x2$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_computeOffset
add	esp, 28					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	esi, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _y2$[ebp]
push	edx
mov	eax, DWORD PTR _x2$[ebp]
push	eax
mov	ecx, DWORD PTR _y1$[ebp]
push	ecx
mov	edx, DWORD PTR _x1$[ebp]
push	edx
call	_cf2_getWindingMomentum
add	esp, 16					
add	eax, DWORD PTR [esi+16]
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11720]
add	ecx, DWORD PTR _xOffset1$[ebp]
mov	DWORD PTR _P0$[ebp], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11724]
add	eax, DWORD PTR _yOffset1$[ebp]
mov	DWORD PTR _P0$[ebp+4], eax
mov	ecx, DWORD PTR _x1$[ebp]
add	ecx, DWORD PTR _xOffset1$[ebp]
mov	DWORD PTR _P1$[ebp], ecx
mov	edx, DWORD PTR _y1$[ebp]
add	edx, DWORD PTR _yOffset1$[ebp]
mov	DWORD PTR _P1$[ebp+4], edx
mov	eax, DWORD PTR _x2$[ebp]
add	eax, DWORD PTR _xOffset3$[ebp]
mov	DWORD PTR _P2$[ebp], eax
mov	ecx, DWORD PTR _y2$[ebp]
add	ecx, DWORD PTR _yOffset3$[ebp]
mov	DWORD PTR _P2$[ebp+4], ecx
mov	edx, DWORD PTR _x3$[ebp]
add	edx, DWORD PTR _xOffset3$[ebp]
mov	DWORD PTR _P3$[ebp], edx
mov	eax, DWORD PTR _y3$[ebp]
add	eax, DWORD PTR _yOffset3$[ebp]
mov	DWORD PTR _P3$[ebp+4], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
movzx	edx, BYTE PTR [ecx+11667]
test	edx, edx
je	SHORT $LN7@cf2_glyphp
mov	eax, DWORD PTR _P0$[ebp+4]
push	eax
mov	ecx, DWORD PTR _P0$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
push	edx
call	_cf2_glyphpath_pushMove
add	esp, 12					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11667], 0
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11664], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _P1$[ebp]
mov	DWORD PTR [edx+11712], eax
mov	ecx, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [edx+11716], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
movzx	eax, BYTE PTR [edx+11744]
test	eax, eax
je	SHORT $LN6@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN4@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [eax+28], 0
je	SHORT $LN4@cf2_glyphp
push	OFFSET $SG14396
push	1783					
push	OFFSET $SG14397
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_glyphp
push	0
mov	edx, DWORD PTR _P1$[ebp+4]
push	edx
mov	eax, DWORD PTR _P1$[ebp]
push	eax
lea	ecx, DWORD PTR _P0$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_pushPrevElem
add	esp, 24					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11744], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [edx+11748], 4
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P0$[ebp]
mov	DWORD PTR [eax+11752], ecx
mov	edx, DWORD PTR _P0$[ebp+4]
mov	DWORD PTR [eax+11756], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P1$[ebp]
mov	DWORD PTR [eax+11760], ecx
mov	edx, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [eax+11764], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P2$[ebp]
mov	DWORD PTR [eax+11768], ecx
mov	edx, DWORD PTR _P2$[ebp+4]
mov	DWORD PTR [eax+11772], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P3$[ebp]
mov	DWORD PTR [eax+11776], ecx
mov	edx, DWORD PTR _P3$[ebp+4]
mov	DWORD PTR [eax+11780], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11676]
push	ecx
call	_cf2_hintmask_isNew
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN1@cf2_glyphp
push	0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11680]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11676]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11672]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11668]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_build
add	esp, 24					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _x3$[ebp]
mov	DWORD PTR [eax+11720], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _y3$[ebp]
mov	DWORD PTR [edx+11724], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 112				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	8
DD	$LN18@cf2_glyphp
DD	-8					
DD	4
DD	$LN10@cf2_glyphp
DD	-20					
DD	4
DD	$LN11@cf2_glyphp
DD	-32					
DD	4
DD	$LN12@cf2_glyphp
DD	-44					
DD	4
DD	$LN13@cf2_glyphp
DD	-60					
DD	8
DD	$LN14@cf2_glyphp
DD	-76					
DD	8
DD	$LN15@cf2_glyphp
DD	-92					
DD	8
DD	$LN16@cf2_glyphp
DD	-108					
DD	8
DD	$LN17@cf2_glyphp
DB	80					
DB	51					
DB	0
DB	80					
DB	50					
DB	0
DB	80					
DB	49					
DB	0
DB	80					
DB	48					
DB	0
DB	121					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	51					
DB	0
DB	120					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	51					
DB	0
DB	121					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	49					
DB	0
DB	120					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	49					
DB	0
ENDP
_cf2_glyphpath_lineTo PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11676]
push	ecx
call	_cf2_hintmask_isNew
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN11@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11665]
test	ecx, ecx
jne	SHORT $LN11@cf2_glyphp
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN12@cf2_glyphp
mov	DWORD PTR tv72[ebp], 0
mov	dl, BYTE PTR tv72[ebp]
mov	BYTE PTR _newHintMap$[ebp], dl
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11720]
cmp	ecx, DWORD PTR _x$[ebp]
jne	SHORT $LN8@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11724]
cmp	eax, DWORD PTR _y$[ebp]
jne	SHORT $LN8@cf2_glyphp
movzx	ecx, BYTE PTR _newHintMap$[ebp]
test	ecx, ecx
jne	SHORT $LN8@cf2_glyphp
jmp	$LN9@cf2_glyphp
lea	edx, DWORD PTR _yOffset$[ebp]
push	edx
lea	eax, DWORD PTR _xOffset$[ebp]
push	eax
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11724]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11720]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_computeOffset
add	esp, 28					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11720]
add	eax, DWORD PTR _xOffset$[ebp]
mov	DWORD PTR _P0$[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11724]
add	edx, DWORD PTR _yOffset$[ebp]
mov	DWORD PTR _P0$[ebp+4], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _xOffset$[ebp]
mov	DWORD PTR _P1$[ebp], eax
mov	ecx, DWORD PTR _y$[ebp]
add	ecx, DWORD PTR _yOffset$[ebp]
mov	DWORD PTR _P1$[ebp+4], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
movzx	eax, BYTE PTR [edx+11667]
test	eax, eax
je	SHORT $LN7@cf2_glyphp
mov	ecx, DWORD PTR _P0$[ebp+4]
push	ecx
mov	edx, DWORD PTR _P0$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_pushMove
add	esp, 12					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11667], 0
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11664], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _P1$[ebp]
mov	DWORD PTR [eax+11712], ecx
mov	edx, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [eax+11716], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
movzx	ecx, BYTE PTR [eax+11744]
test	ecx, ecx
je	SHORT $LN6@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN4@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+28], 0
je	SHORT $LN4@cf2_glyphp
push	OFFSET $SG14364
push	1696					
push	OFFSET $SG14365
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN5@cf2_glyphp
push	0
mov	eax, DWORD PTR _P1$[ebp+4]
push	eax
mov	ecx, DWORD PTR _P1$[ebp]
push	ecx
lea	edx, DWORD PTR _P0$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 8
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
push	ecx
call	_cf2_glyphpath_pushPrevElem
add	esp, 24					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11744], 1
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [eax+11748], 2
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _P0$[ebp]
mov	DWORD PTR [ecx+11752], edx
mov	eax, DWORD PTR _P0$[ebp+4]
mov	DWORD PTR [ecx+11756], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _P1$[ebp]
mov	DWORD PTR [ecx+11760], edx
mov	eax, DWORD PTR _P1$[ebp+4]
mov	DWORD PTR [ecx+11764], eax
movzx	ecx, BYTE PTR _newHintMap$[ebp]
test	ecx, ecx
je	SHORT $LN1@cf2_glyphp
push	0
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11680]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11676]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11672]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11668]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
call	_cf2_hintmap_build
add	esp, 24					
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _x$[ebp]
mov	DWORD PTR [edx+11720], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx+11724], edx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@cf2_glyphp
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	4
DD	$LN17@cf2_glyphp
DD	-8					
DD	4
DD	$LN13@cf2_glyphp
DD	-20					
DD	4
DD	$LN14@cf2_glyphp
DD	-36					
DD	8
DD	$LN15@cf2_glyphp
DD	-52					
DD	8
DD	$LN16@cf2_glyphp
DB	80					
DB	49					
DB	0
DB	80					
DB	48					
DB	0
DB	121					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
DB	120					
DB	79					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
ENDP
_cf2_glyphpath_moveTo PROC
push	ebp
mov	ebp, esp
push	esi
push	edi
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_cf2_glyphpath_closeOpenPath
add	esp, 4
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx+11736], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [eax+11720], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _y$[ebp]
mov	DWORD PTR [edx+11740], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx+11724], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11667], 1
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 8
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN1@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11676]
push	ecx
call	_cf2_hintmask_isNew
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN2@cf2_glyphp
push	0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11680]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11676]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11672]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11668]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_build
add	esp, 24					
mov	esi, DWORD PTR _glyphpath$[ebp]
add	esi, 8
mov	edi, DWORD PTR _glyphpath$[ebp]
add	edi, 3876				
mov	ecx, 967				
rep movsd
pop	edi
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_finalize PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 11612				
push	eax
call	_cf2_arrstack_finalize
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_glyphpath_init PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
push	11784					
push	0
mov	eax, DWORD PTR _glyphpath$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _callbacks$[ebp]
mov	DWORD PTR [eax+4], ecx
push	8
mov	edx, DWORD PTR _font$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 11612				
push	edx
call	_cf2_arrstack_init
add	esp, 16					
mov	eax, DWORD PTR _scaleY$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 11612				
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 7744				
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 7744				
push	ecx
call	_cf2_hintmap_init
add	esp, 20					
mov	edx, DWORD PTR _scaleY$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 11612				
push	eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
add	ecx, 7744				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 3876				
push	eax
call	_cf2_hintmap_init
add	esp, 20					
mov	ecx, DWORD PTR _scaleY$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 11612				
push	edx
mov	eax, DWORD PTR _glyphpath$[ebp]
add	eax, 7744				
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
add	edx, 8
push	edx
call	_cf2_hintmap_init
add	esp, 20					
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	DWORD PTR [eax+11644], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+44]
mov	DWORD PTR [eax+11648], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+48]
mov	DWORD PTR [eax+11652], edx
mov	eax, DWORD PTR _fractionalTranslation$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [eax+11656], ecx
mov	DWORD PTR [eax+11660], edx
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _hStemHintArray$[ebp]
mov	DWORD PTR [ecx+11668], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _vStemHintArray$[ebp]
mov	DWORD PTR [eax+11672], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _hintMask$[ebp]
mov	DWORD PTR [edx+11676], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR _hintOriginY$[ebp]
mov	DWORD PTR [ecx+11680], edx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+11684], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	cl, BYTE PTR [eax+141]
mov	BYTE PTR [edx+11666], cl
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+184]
mov	DWORD PTR [edx+11688], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	DWORD PTR [edx+11692], ecx
mov	edx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [edx+11688], 0
jge	SHORT $LN3@cf2_glyphp
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	ecx, DWORD PTR [eax+11688]
neg	ecx
mov	DWORD PTR tv157[ebp], ecx
jmp	SHORT $LN4@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
mov	DWORD PTR tv157[ebp], eax
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11692], 0
jge	SHORT $LN5@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
neg	eax
mov	DWORD PTR tv163[ebp], eax
jmp	SHORT $LN6@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11692]
mov	DWORD PTR tv163[ebp], edx
mov	eax, DWORD PTR tv157[ebp]
cmp	eax, DWORD PTR tv163[ebp]
jle	SHORT $LN11@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11688], 0
jge	SHORT $LN7@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11688]
neg	eax
mov	DWORD PTR tv170[ebp], eax
jmp	SHORT $LN8@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11688]
mov	DWORD PTR tv170[ebp], edx
mov	eax, DWORD PTR tv170[ebp]
mov	DWORD PTR tv177[ebp], eax
jmp	SHORT $LN12@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
cmp	DWORD PTR [ecx+11692], 0
jge	SHORT $LN9@cf2_glyphp
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	eax, DWORD PTR [edx+11692]
neg	eax
mov	DWORD PTR tv176[ebp], eax
jmp	SHORT $LN10@cf2_glyphp
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	edx, DWORD PTR [ecx+11692]
mov	DWORD PTR tv176[ebp], edx
mov	eax, DWORD PTR tv176[ebp]
mov	DWORD PTR tv177[ebp], eax
mov	ecx, DWORD PTR tv177[ebp]
shl	ecx, 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [edx+11696], ecx
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	DWORD PTR [eax+11700], 6554		
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11667], 1
mov	edx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [edx+11664], 0
mov	eax, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [eax+11665], 0
mov	ecx, DWORD PTR _glyphpath$[ebp]
mov	BYTE PTR [ecx+11744], 0
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hintmap_build PROC
push	ebp
mov	ebp, esp
sub	esp, 260				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-260]
mov	ecx, 65					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _font$[ebp], ecx
movzx	edx, BYTE PTR _initialMap$[ebp]
test	edx, edx
jne	SHORT $LN30@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_hintmap_isValid
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN30@cf2_hintma
mov	eax, DWORD PTR _hintMask$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	edx, DWORD PTR _tempHintMask$[ebp]
push	edx
call	_cf2_hintmask_init
add	esp, 8
push	1
mov	eax, DWORD PTR _hintOrigin$[ebp]
push	eax
lea	ecx, DWORD PTR _tempHintMask$[ebp]
push	ecx
mov	edx, DWORD PTR _vStemHintArray$[ebp]
push	edx
mov	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_cf2_hintmap_build
add	esp, 24					
mov	eax, DWORD PTR _hintMask$[ebp]
push	eax
call	_cf2_hintmask_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN29@cf2_hintma
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_size
add	esp, 4
mov	esi, eax
mov	eax, DWORD PTR _vStemHintArray$[ebp]
push	eax
call	_cf2_arrstack_size
add	esp, 4
add	esi, eax
push	esi
mov	ecx, DWORD PTR _hintMask$[ebp]
push	ecx
call	_cf2_hintmask_setAll
add	esp, 8
mov	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_isValid
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN29@cf2_hintma
jmp	$LN31@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _hintmap$[ebp]
mov	DWORD PTR [edx+24], 0
mov	ecx, 7
mov	esi, DWORD PTR _hintMask$[ebp]
lea	edi, DWORD PTR _tempHintMask$[ebp]
rep movsd
lea	eax, DWORD PTR _tempHintMask$[ebp]
push	eax
call	_cf2_hintmask_getMaskPtr
add	esp, 4
mov	DWORD PTR _maskPtr$[ebp], eax
mov	ecx, DWORD PTR _hStemHintArray$[ebp]
push	ecx
call	_cf2_arrstack_size
add	esp, 4
mov	DWORD PTR _bitCount$[ebp], eax
mov	edx, DWORD PTR _hintMask$[ebp]
mov	eax, DWORD PTR _bitCount$[ebp]
cmp	eax, DWORD PTR [edx+8]
jbe	SHORT $LN27@cf2_hintma
jmp	$LN31@cf2_hintma
mov	ecx, DWORD PTR _font$[ebp]
movzx	edx, BYTE PTR [ecx+205]
test	edx, edx
je	SHORT $LN26@cf2_hintma
lea	eax, DWORD PTR _dummy$8[ebp]
push	eax
call	_cf2_hint_initZero
add	esp, 4
lea	ecx, DWORD PTR _dummy$8[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 244				
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_cf2_hintmap_insertHint
add	esp, 12					
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 224				
push	ecx
lea	edx, DWORD PTR _dummy$8[ebp]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_cf2_hintmap_insertHint
add	esp, 12					
mov	DWORD PTR _i$[ebp], 0
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN25@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _bitCount$[ebp]
jae	$LN23@cf2_hintma
movzx	eax, BYTE PTR _maskByte$[ebp]
mov	ecx, DWORD PTR _maskPtr$[ebp]
movzx	edx, BYTE PTR [ecx]
and	eax, edx
je	$LN22@cf2_hintma
push	1
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _hintOrigin$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
lea	eax, DWORD PTR _bottomHintEdge$7[ebp]
push	eax
call	_cf2_hint_init
add	esp, 28					
push	0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _hintOrigin$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _topHintEdge$6[ebp]
push	ecx
call	_cf2_hint_init
add	esp, 28					
lea	edx, DWORD PTR _bottomHintEdge$7[ebp]
push	edx
call	_cf2_hint_isLocked
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN20@cf2_hintma
lea	ecx, DWORD PTR _topHintEdge$6[ebp]
push	ecx
call	_cf2_hint_isLocked
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN20@cf2_hintma
lea	eax, DWORD PTR _topHintEdge$6[ebp]
push	eax
lea	ecx, DWORD PTR _bottomHintEdge$7[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 196				
push	edx
call	_cf2_blues_capture
add	esp, 12					
movzx	eax, al
test	eax, eax
je	SHORT $LN22@cf2_hintma
lea	ecx, DWORD PTR _topHintEdge$6[ebp]
push	ecx
lea	edx, DWORD PTR _bottomHintEdge$7[ebp]
push	edx
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_cf2_hintmap_insertHint
add	esp, 12					
movzx	ecx, BYTE PTR _maskByte$[ebp]
not	ecx
mov	edx, DWORD PTR _maskPtr$[ebp]
movzx	eax, BYTE PTR [edx]
and	eax, ecx
mov	ecx, DWORD PTR _maskPtr$[ebp]
mov	BYTE PTR [ecx], al
mov	edx, DWORD PTR _i$[ebp]
and	edx, 7
cmp	edx, 7
jne	SHORT $LN19@cf2_hintma
mov	eax, DWORD PTR _maskPtr$[ebp]
add	eax, 1
mov	DWORD PTR _maskPtr$[ebp], eax
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN18@cf2_hintma
mov	cl, BYTE PTR _maskByte$[ebp]
shr	cl, 1
mov	BYTE PTR _maskByte$[ebp], cl
jmp	$LN24@cf2_hintma
movzx	edx, BYTE PTR _initialMap$[ebp]
test	edx, edx
je	$LN17@cf2_hintma
mov	eax, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN15@cf2_hintma
mov	ecx, 20					
imul	edx, ecx, 0
mov	eax, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [eax+edx+36], 0
jg	SHORT $LN15@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, 1
imul	eax, edx, 20
mov	ecx, DWORD PTR _hintmap$[ebp]
cmp	DWORD PTR [ecx+eax+36], 0
jge	SHORT $LN16@cf2_hintma
lea	edx, DWORD PTR _edge$5[ebp]
push	edx
call	_cf2_hint_initZero
add	esp, 4
mov	DWORD PTR _edge$5[ebp], 49		
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _edge$5[ebp+16], ecx
lea	edx, DWORD PTR _invalid$4[ebp]
push	edx
call	_cf2_hint_initZero
add	esp, 4
lea	eax, DWORD PTR _invalid$4[ebp]
push	eax
lea	ecx, DWORD PTR _edge$5[ebp]
push	ecx
mov	edx, DWORD PTR _hintmap$[ebp]
push	edx
call	_cf2_hintmap_insertHint
add	esp, 12					
jmp	$LN14@cf2_hintma
lea	eax, DWORD PTR _tempHintMask$[ebp]
push	eax
call	_cf2_hintmask_getMaskPtr
add	esp, 4
mov	DWORD PTR _maskPtr$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN13@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _bitCount$[ebp]
jae	$LN14@cf2_hintma
movzx	eax, BYTE PTR _maskByte$[ebp]
mov	ecx, DWORD PTR _maskPtr$[ebp]
movzx	edx, BYTE PTR [ecx]
and	eax, edx
je	SHORT $LN10@cf2_hintma
push	1
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _hintOrigin$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
lea	eax, DWORD PTR _bottomHintEdge$3[ebp]
push	eax
call	_cf2_hint_init
add	esp, 28					
push	0
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _hintOrigin$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _hStemHintArray$[ebp]
push	eax
lea	ecx, DWORD PTR _topHintEdge$2[ebp]
push	ecx
call	_cf2_hint_init
add	esp, 28					
lea	edx, DWORD PTR _topHintEdge$2[ebp]
push	edx
lea	eax, DWORD PTR _bottomHintEdge$3[ebp]
push	eax
mov	ecx, DWORD PTR _hintmap$[ebp]
push	ecx
call	_cf2_hintmap_insertHint
add	esp, 12					
mov	edx, DWORD PTR _i$[ebp]
and	edx, 7
cmp	edx, 7
jne	SHORT $LN9@cf2_hintma
mov	eax, DWORD PTR _maskPtr$[ebp]
add	eax, 1
mov	DWORD PTR _maskPtr$[ebp], eax
mov	BYTE PTR _maskByte$[ebp], 128		
jmp	SHORT $LN8@cf2_hintma
mov	cl, BYTE PTR _maskByte$[ebp]
shr	cl, 1
mov	BYTE PTR _maskByte$[ebp], cl
jmp	$LN12@cf2_hintma
mov	edx, DWORD PTR _hintmap$[ebp]
push	edx
call	_cf2_hintmap_adjustHints
add	esp, 4
movzx	eax, BYTE PTR _initialMap$[ebp]
test	eax, eax
jne	$LN7@cf2_hintma
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN6@cf2_hintma
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+20]
jae	$LN7@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _hintmap$[ebp]
lea	eax, DWORD PTR [edx+ecx+28]
push	eax
call	_cf2_hint_isSynthetic
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@cf2_hintma
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+edx+32]
push	ecx
mov	edx, DWORD PTR _hStemHintArray$[ebp]
push	edx
call	_cf2_arrstack_getPointer
add	esp, 8
mov	DWORD PTR _stemhint$1[ebp], eax
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _hintmap$[ebp]
lea	edx, DWORD PTR [ecx+eax+28]
push	edx
call	_cf2_hint_isTop
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN2@cf2_hintma
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _stemhint$1[ebp]
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR [eax+ecx+40]
mov	DWORD PTR [edx+16], ecx
jmp	SHORT $LN1@cf2_hintma
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _stemhint$1[ebp]
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR [ecx+edx+40]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _stemhint$1[ebp]
mov	BYTE PTR [eax], 1
jmp	$LN5@cf2_hintma
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	BYTE PTR [ecx+12], 1
push	0
mov	edx, DWORD PTR _hintMask$[ebp]
push	edx
call	_cf2_hintmask_setNew
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN42@cf2_hintma
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 260				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	8
DD	$LN41@cf2_hintma
DD	-44					
DD	28					
DD	$LN33@cf2_hintma
DD	-84					
DD	20					
DD	$LN34@cf2_hintma
DD	-112					
DD	20					
DD	$LN35@cf2_hintma
DD	-140					
DD	20					
DD	$LN36@cf2_hintma
DD	-168					
DD	20					
DD	$LN37@cf2_hintma
DD	-196					
DD	20					
DD	$LN38@cf2_hintma
DD	-224					
DD	20					
DD	$LN39@cf2_hintma
DD	-252					
DD	20					
DD	$LN40@cf2_hintma
DB	116					
DB	111					
DB	112					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	98					
DB	111					
DB	116					
DB	116					
DB	111					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	105					
DB	110					
DB	118					
DB	97					
DB	108					
DB	105					
DB	100					
DB	0
DB	101					
DB	100					
DB	103					
DB	101					
DB	0
DB	116					
DB	111					
DB	112					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	98					
DB	111					
DB	116					
DB	116					
DB	111					
DB	109					
DB	72					
DB	105					
DB	110					
DB	116					
DB	69					
DB	100					
DB	103					
DB	101					
DB	0
DB	100					
DB	117					
DB	109					
DB	109					
DB	121					
DB	0
DB	116					
DB	101					
DB	109					
DB	112					
DB	72					
DB	105					
DB	110					
DB	116					
DB	77					
DB	97					
DB	115					
DB	107					
DB	0
ENDP
_cf2_hintmap_init PROC
push	ebp
mov	ebp, esp
push	3868					
push	0
mov	eax, DWORD PTR _hintmap$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	al, BYTE PTR [edx+140]
mov	BYTE PTR [ecx+13], al
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _scale$[ebp]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _hintmap$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _hintmap$[ebp]
mov	eax, DWORD PTR _initialMap$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _hintmap$[ebp]
mov	edx, DWORD PTR _hintMoves$[ebp]
mov	DWORD PTR [ecx+8], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_hint_lock PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
or	ecx, 16					
mov	edx, DWORD PTR _hint$[ebp]
mov	DWORD PTR [edx], ecx
pop	ebp
ret	0
ENDP
_cf2_hint_isBottom PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 5
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isTop PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
mov	ecx, DWORD PTR [eax]
and	ecx, 10					
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_hint_isValid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _hint$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN3@cf2_hint_i
mov	BYTE PTR tv66[ebp], 1
jmp	SHORT $LN4@cf2_hint_i
mov	BYTE PTR tv66[ebp], 0
mov	al, BYTE PTR tv66[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_blues_capture PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _csFuzz$[ebp], ecx
mov	DWORD PTR _dsMove$[ebp], 0
mov	BYTE PTR _captured$[ebp], 0
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
push	edx
call	_cf2_hint_isTop
add	esp, 4
movzx	eax, al
test	eax, eax
jne	SHORT $LN19@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isBottom
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN22@cf2_blues_
push	OFFSET $SG13013
push	484					
push	OFFSET $SG13014
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN23@cf2_blues_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN18@cf2_blues_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+4]
jae	$LN16@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+ecx+84]
test	eax, eax
je	$LN15@cf2_blues_
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
push	ecx
call	_cf2_hint_isBottom
add	esp, 4
movzx	edx, al
test	edx, edx
je	$LN15@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+68]
sub	edx, DWORD PTR _csFuzz$[ebp]
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
cmp	edx, DWORD PTR [eax+8]
jg	$LN15@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+72]
add	eax, DWORD PTR _csFuzz$[ebp]
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
cmp	DWORD PTR [ecx+8], eax
jg	$LN15@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+8]
test	eax, eax
je	SHORT $LN13@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+80]
mov	DWORD PTR _dsNew$[ebp], eax
jmp	$LN12@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [edx+ecx+72]
sub	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _blues$[ebp]
cmp	ecx, DWORD PTR [edx+16]
jl	SHORT $LN11@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32768				
and	ecx, -65536				
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [eax+edx+80]
sub	edx, 65536				
cmp	ecx, edx
jge	SHORT $LN26@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32768				
and	ecx, -65536				
mov	DWORD PTR tv168[ebp], ecx
jmp	SHORT $LN27@cf2_blues_
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+edx+80]
sub	ecx, 65536				
mov	DWORD PTR tv168[ebp], ecx
mov	edx, DWORD PTR tv168[ebp]
mov	DWORD PTR _dsNew$[ebp], edx
jmp	SHORT $LN12@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 32768				
and	ecx, -65536				
mov	DWORD PTR _dsNew$[ebp], ecx
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
mov	eax, DWORD PTR _dsNew$[ebp]
sub	eax, DWORD PTR [edx+12]
mov	DWORD PTR _dsMove$[ebp], eax
mov	BYTE PTR _captured$[ebp], 1
jmp	$LN16@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+ecx+84]
test	eax, eax
jne	$LN9@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
push	ecx
call	_cf2_hint_isTop
add	esp, 4
movzx	edx, al
test	edx, edx
je	$LN9@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+68]
sub	edx, DWORD PTR _csFuzz$[ebp]
mov	eax, DWORD PTR _topHintEdge$[ebp]
cmp	edx, DWORD PTR [eax+8]
jg	$LN9@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+72]
add	eax, DWORD PTR _csFuzz$[ebp]
mov	ecx, DWORD PTR _topHintEdge$[ebp]
cmp	DWORD PTR [ecx+8], eax
jg	$LN9@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
movzx	eax, BYTE PTR [edx+8]
test	eax, eax
je	SHORT $LN7@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+80]
mov	DWORD PTR _dsNew$[ebp], eax
jmp	$LN6@cf2_blues_
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _topHintEdge$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [edx+8]
sub	edx, DWORD PTR [eax+ecx+68]
mov	eax, DWORD PTR _blues$[ebp]
cmp	edx, DWORD PTR [eax+16]
jl	SHORT $LN5@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32768				
and	edx, -65536				
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [ecx+eax+80]
add	eax, 65536				
cmp	edx, eax
jle	SHORT $LN28@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32768				
and	edx, -65536				
mov	DWORD PTR tv230[ebp], edx
jmp	SHORT $LN29@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+80]
add	edx, 65536				
mov	DWORD PTR tv230[ebp], edx
mov	eax, DWORD PTR tv230[ebp]
mov	DWORD PTR _dsNew$[ebp], eax
jmp	SHORT $LN6@cf2_blues_
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	edx, DWORD PTR [ecx+12]
add	edx, 32768				
and	edx, -65536				
mov	DWORD PTR _dsNew$[ebp], edx
mov	eax, DWORD PTR _topHintEdge$[ebp]
mov	ecx, DWORD PTR _dsNew$[ebp]
sub	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _dsMove$[ebp], ecx
mov	BYTE PTR _captured$[ebp], 1
jmp	SHORT $LN16@cf2_blues_
jmp	$LN17@cf2_blues_
movzx	edx, BYTE PTR _captured$[ebp]
test	edx, edx
je	SHORT $LN3@cf2_blues_
mov	eax, DWORD PTR _bottomHintEdge$[ebp]
push	eax
call	_cf2_hint_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN2@cf2_blues_
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, DWORD PTR _dsMove$[ebp]
mov	ecx, DWORD PTR _bottomHintEdge$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _bottomHintEdge$[ebp]
push	edx
call	_cf2_hint_lock
add	esp, 4
mov	eax, DWORD PTR _topHintEdge$[ebp]
push	eax
call	_cf2_hint_isValid
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN3@cf2_blues_
mov	edx, DWORD PTR _topHintEdge$[ebp]
mov	eax, DWORD PTR [edx+12]
add	eax, DWORD PTR _dsMove$[ebp]
mov	ecx, DWORD PTR _topHintEdge$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _topHintEdge$[ebp]
push	edx
call	_cf2_hint_lock
add	esp, 4
mov	al, BYTE PTR _captured$[ebp]
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_blues_init PROC
push	ebp
mov	ebp, esp
sub	esp, 156				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-156]
mov	ecx, 39					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR _decoder$[ebp], ecx
mov	DWORD PTR _maxZoneHeight$[ebp], 0
push	308					
push	0
mov	edx, DWORD PTR _blues$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+48]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _blues$[ebp]
add	eax, 20					
push	eax
mov	ecx, DWORD PTR _blues$[ebp]
add	ecx, 16					
push	ecx
mov	edx, DWORD PTR _blues$[ebp]
add	edx, 12					
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getBlueMetrics
add	esp, 16					
lea	ecx, DWORD PTR _blueValues$[ebp]
push	ecx
lea	edx, DWORD PTR _numBlueValues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getBlueValues
add	esp, 12					
lea	ecx, DWORD PTR _otherBlues$[ebp]
push	ecx
lea	edx, DWORD PTR _numOtherBlues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getOtherBlues
add	esp, 12					
lea	ecx, DWORD PTR _familyBlues$[ebp]
push	ecx
lea	edx, DWORD PTR _numFamilyBlues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getFamilyBlues
add	esp, 12					
lea	ecx, DWORD PTR _familyOtherBlues$[ebp]
push	ecx
lea	edx, DWORD PTR _numFamilyOtherBlues$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cf2_getFamilyOtherBlues
add	esp, 12					
mov	DWORD PTR _emBoxBottom$[ebp], -7864320	
mov	DWORD PTR _emBoxTop$[ebp], 57671680	
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getLanguageGroup
add	esp, 4
cmp	eax, 1
jne	$LN50@cf2_blues_
cmp	DWORD PTR _numBlueValues$[ebp], 0
je	SHORT $LN49@cf2_blues_
cmp	DWORD PTR _numBlueValues$[ebp], 4
jne	$LN50@cf2_blues_
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
cmp	edx, DWORD PTR _emBoxBottom$[ebp]
jge	$LN50@cf2_blues_
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
cmp	edx, DWORD PTR _emBoxBottom$[ebp]
jge	$LN50@cf2_blues_
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
cmp	edx, DWORD PTR _emBoxTop$[ebp]
jle	$LN50@cf2_blues_
mov	eax, 4
imul	ecx, eax, 3
mov	edx, DWORD PTR _blueValues$[ebp]
mov	eax, DWORD PTR [edx+ecx]
shl	eax, 16					
cmp	eax, DWORD PTR _emBoxTop$[ebp]
jle	$LN50@cf2_blues_
mov	ecx, DWORD PTR _emBoxBottom$[ebp]
sub	ecx, 1
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+56], ecx
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+56]
push	eax
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32768				
and	eax, -65536				
sub	eax, 32768				
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+60], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+64], ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+48], 49			
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	edx, DWORD PTR _emBoxTop$[ebp]
lea	eax, DWORD PTR [edx+ecx*2+1]
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+36], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+36]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32768				
and	eax, -65536				
add	eax, 32768				
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+40], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+44], ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+28], 50			
mov	eax, DWORD PTR _blues$[ebp]
mov	BYTE PTR [eax+9], 1
jmp	$LN51@cf2_blues_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN48@cf2_blues_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 2
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _numBlueValues$[ebp]
jae	$LN46@cf2_blues_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _blueValues$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
shl	edx, 16					
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+ecx+68], edx
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _blueValues$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+4]
shl	eax, 16					
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+edx+72], eax
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [ecx+eax+72]
sub	eax, DWORD PTR [esi+edx+68]
mov	DWORD PTR _zoneHeight$[ebp], eax
jns	SHORT $LN45@cf2_blues_
mov	ecx, 4
imul	edx, ecx, 51
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN43@cf2_blues_
push	OFFSET $SG12923
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN44@cf2_blues_
jmp	$LN47@cf2_blues_
mov	ecx, DWORD PTR _zoneHeight$[ebp]
cmp	ecx, DWORD PTR _maxZoneHeight$[ebp]
jle	SHORT $LN40@cf2_blues_
mov	edx, DWORD PTR _zoneHeight$[ebp]
mov	DWORD PTR _maxZoneHeight$[ebp], edx
cmp	DWORD PTR _i$[ebp], 0
je	SHORT $LN39@cf2_blues_
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+188]
mov	edx, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [edx+ecx+72]
lea	edx, DWORD PTR [ecx+eax*2]
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+ecx+72], edx
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	eax, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [eax+edx+68]
lea	eax, DWORD PTR [edx+ecx*2]
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+edx+68], eax
cmp	DWORD PTR _i$[ebp], 0
jne	SHORT $LN38@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	BYTE PTR [ecx+eax+84], 1
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [esi+eax+72]
mov	DWORD PTR [ecx+edx+76], eax
jmp	SHORT $LN37@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	BYTE PTR [eax+edx+84], 0
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [esi+edx+68]
mov	DWORD PTR [eax+ecx+76], edx
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+4]
add	ecx, 1
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+4], ecx
jmp	$LN47@cf2_blues_
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN36@cf2_blues_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 2
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _numOtherBlues$[ebp]
jae	$LN34@cf2_blues_
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _otherBlues$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
shl	ecx, 16					
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+eax+68], ecx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _otherBlues$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+4]
shl	edx, 16					
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+ecx+72], edx
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	eax, DWORD PTR _blues$[ebp]
imul	ecx, DWORD PTR [eax+4], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [eax+edx+72]
sub	edx, DWORD PTR [esi+ecx+68]
mov	DWORD PTR _zoneHeight$[ebp], edx
jns	SHORT $LN33@cf2_blues_
mov	eax, 4
imul	ecx, eax, 51
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN31@cf2_blues_
push	OFFSET $SG12940
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN32@cf2_blues_
jmp	$LN35@cf2_blues_
mov	eax, DWORD PTR _zoneHeight$[ebp]
cmp	eax, DWORD PTR _maxZoneHeight$[ebp]
jle	SHORT $LN28@cf2_blues_
mov	ecx, DWORD PTR _zoneHeight$[ebp]
mov	DWORD PTR _maxZoneHeight$[ebp], ecx
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	BYTE PTR [ecx+eax+84], 1
mov	edx, DWORD PTR _blues$[ebp]
imul	eax, DWORD PTR [edx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
imul	edx, DWORD PTR [ecx+4], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	esi, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [esi+eax+72]
mov	DWORD PTR [ecx+edx+76], eax
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+4]
add	edx, 1
mov	eax, DWORD PTR _blues$[ebp]
mov	DWORD PTR [eax+4], edx
jmp	$LN35@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	65536					
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _csUnitsPerPixel$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN27@cf2_blues_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR [ecx+4]
jae	$LN25@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+eax+76]
mov	DWORD PTR _flatEdge$1[ebp], edx
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
movzx	edx, BYTE PTR [ecx+eax+84]
test	edx, edx
je	$LN24@cf2_blues_
mov	DWORD PTR _minDiff$4[ebp], 2147483647	
mov	DWORD PTR _j$5[ebp], 0
jmp	SHORT $LN23@cf2_blues_
mov	eax, DWORD PTR _j$5[ebp]
add	eax, 2
mov	DWORD PTR _j$5[ebp], eax
mov	ecx, DWORD PTR _j$5[ebp]
cmp	ecx, DWORD PTR _numFamilyOtherBlues$[ebp]
jae	$LN21@cf2_blues_
mov	edx, DWORD PTR _j$5[ebp]
mov	eax, DWORD PTR _familyOtherBlues$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+4]
shl	ecx, 16					
mov	DWORD PTR _flatFamilyEdge$3[ebp], ecx
mov	edx, DWORD PTR _flatEdge$1[ebp]
sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
jns	SHORT $LN53@cf2_blues_
mov	eax, DWORD PTR _flatEdge$1[ebp]
sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
neg	eax
mov	DWORD PTR tv355[ebp], eax
jmp	SHORT $LN54@cf2_blues_
mov	ecx, DWORD PTR _flatEdge$1[ebp]
sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR tv355[ebp], ecx
mov	edx, DWORD PTR tv355[ebp]
mov	DWORD PTR _diff$2[ebp], edx
mov	eax, DWORD PTR _diff$2[ebp]
cmp	eax, DWORD PTR _minDiff$4[ebp]
jge	SHORT $LN20@cf2_blues_
mov	ecx, DWORD PTR _diff$2[ebp]
cmp	ecx, DWORD PTR _csUnitsPerPixel$[ebp]
jge	SHORT $LN20@cf2_blues_
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR [eax+edx+76], ecx
mov	edx, DWORD PTR _diff$2[ebp]
mov	DWORD PTR _minDiff$4[ebp], edx
cmp	DWORD PTR _diff$2[ebp], 0
jne	SHORT $LN20@cf2_blues_
jmp	SHORT $LN21@cf2_blues_
jmp	$LN22@cf2_blues_
cmp	DWORD PTR _numFamilyBlues$[ebp], 2
jb	$LN18@cf2_blues_
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _familyBlues$[ebp]
mov	edx, DWORD PTR [ecx+eax]
shl	edx, 16					
mov	DWORD PTR _flatFamilyEdge$3[ebp], edx
mov	eax, DWORD PTR _flatEdge$1[ebp]
sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
jns	SHORT $LN55@cf2_blues_
mov	ecx, DWORD PTR _flatEdge$1[ebp]
sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
neg	ecx
mov	DWORD PTR tv372[ebp], ecx
jmp	SHORT $LN56@cf2_blues_
mov	edx, DWORD PTR _flatEdge$1[ebp]
sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR tv372[ebp], edx
mov	eax, DWORD PTR tv372[ebp]
mov	DWORD PTR _diff$2[ebp], eax
mov	ecx, DWORD PTR _diff$2[ebp]
cmp	ecx, DWORD PTR _minDiff$4[ebp]
jge	SHORT $LN18@cf2_blues_
mov	edx, DWORD PTR _diff$2[ebp]
cmp	edx, DWORD PTR _csUnitsPerPixel$[ebp]
jge	SHORT $LN18@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR [ecx+eax+76], edx
jmp	$LN16@cf2_blues_
mov	DWORD PTR _minDiff$4[ebp], 2147483647	
mov	DWORD PTR _j$5[ebp], 2
jmp	SHORT $LN15@cf2_blues_
mov	eax, DWORD PTR _j$5[ebp]
add	eax, 2
mov	DWORD PTR _j$5[ebp], eax
mov	ecx, DWORD PTR _j$5[ebp]
cmp	ecx, DWORD PTR _numFamilyBlues$[ebp]
jae	$LN16@cf2_blues_
mov	edx, DWORD PTR _j$5[ebp]
mov	eax, DWORD PTR _familyBlues$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
shl	ecx, 16					
mov	DWORD PTR _flatFamilyEdge$3[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+188]
mov	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
lea	edx, DWORD PTR [ecx+eax*2]
mov	DWORD PTR _flatFamilyEdge$3[ebp], edx
mov	eax, DWORD PTR _flatEdge$1[ebp]
sub	eax, DWORD PTR _flatFamilyEdge$3[ebp]
jns	SHORT $LN57@cf2_blues_
mov	ecx, DWORD PTR _flatEdge$1[ebp]
sub	ecx, DWORD PTR _flatFamilyEdge$3[ebp]
neg	ecx
mov	DWORD PTR tv392[ebp], ecx
jmp	SHORT $LN58@cf2_blues_
mov	edx, DWORD PTR _flatEdge$1[ebp]
sub	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR tv392[ebp], edx
mov	eax, DWORD PTR tv392[ebp]
mov	DWORD PTR _diff$2[ebp], eax
mov	ecx, DWORD PTR _diff$2[ebp]
cmp	ecx, DWORD PTR _minDiff$4[ebp]
jge	SHORT $LN12@cf2_blues_
mov	edx, DWORD PTR _diff$2[ebp]
cmp	edx, DWORD PTR _csUnitsPerPixel$[ebp]
jge	SHORT $LN12@cf2_blues_
imul	eax, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR _flatFamilyEdge$3[ebp]
mov	DWORD PTR [ecx+eax+76], edx
mov	eax, DWORD PTR _diff$2[ebp]
mov	DWORD PTR _minDiff$4[ebp], eax
cmp	DWORD PTR _diff$2[ebp], 0
jne	SHORT $LN12@cf2_blues_
jmp	SHORT $LN16@cf2_blues_
jmp	$LN14@cf2_blues_
jmp	$LN26@cf2_blues_
cmp	DWORD PTR _maxZoneHeight$[ebp], 0
jle	SHORT $LN10@cf2_blues_
mov	ecx, DWORD PTR _maxZoneHeight$[ebp]
push	ecx
push	65536					
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _blues$[ebp]
cmp	DWORD PTR [edx+12], eax
jle	SHORT $LN10@cf2_blues_
mov	eax, DWORD PTR _maxZoneHeight$[ebp]
push	eax
push	65536					
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax+12]
jge	SHORT $LN8@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
mov	BYTE PTR [edx+8], 1
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	39322					
call	_FT_MulDiv
add	esp, 12					
mov	ecx, 39322				
sub	ecx, eax
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _blues$[ebp]
cmp	DWORD PTR [eax+24], 32767		
jle	SHORT $LN8@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+24], 32767		
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+142]
test	eax, eax
je	SHORT $LN6@cf2_blues_
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN5@cf2_blues_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _blues$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+4]
jae	$LN51@cf2_blues_
imul	edx, DWORD PTR _i$[ebp], 20
mov	eax, DWORD PTR _blues$[ebp]
movzx	ecx, BYTE PTR [eax+edx+84]
test	ecx, ecx
je	SHORT $LN2@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+76]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _blues$[ebp]
sub	eax, DWORD PTR [ecx+24]
add	eax, 32768				
and	eax, -65536				
imul	edx, DWORD PTR _i$[ebp], 20
mov	ecx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [ecx+edx+80], eax
jmp	SHORT $LN1@cf2_blues_
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	eax, DWORD PTR [edx+ecx+76]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _blues$[ebp]
mov	edx, DWORD PTR [ecx+24]
lea	eax, DWORD PTR [eax+edx+32768]
and	eax, -65536				
imul	ecx, DWORD PTR _i$[ebp], 20
mov	edx, DWORD PTR _blues$[ebp]
mov	DWORD PTR [edx+ecx+80], eax
jmp	$LN4@cf2_blues_
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN68@cf2_blues_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 156				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	8
DD	$LN67@cf2_blues_
DD	-24					
DD	4
DD	$LN59@cf2_blues_
DD	-36					
DD	4
DD	$LN60@cf2_blues_
DD	-48					
DD	4
DD	$LN61@cf2_blues_
DD	-60					
DD	4
DD	$LN62@cf2_blues_
DD	-72					
DD	4
DD	$LN63@cf2_blues_
DD	-84					
DD	4
DD	$LN64@cf2_blues_
DD	-96					
DD	4
DD	$LN65@cf2_blues_
DD	-108					
DD	4
DD	$LN66@cf2_blues_
DB	102					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	79					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	102					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	111					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	98					
DB	108					
DB	117					
DB	101					
DB	86					
DB	97					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	70					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	79					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	70					
DB	97					
DB	109					
DB	105					
DB	108					
DB	121					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	79					
DB	116					
DB	104					
DB	101					
DB	114					
DB	66					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
DB	110					
DB	117					
DB	109					
DB	66					
DB	108					
DB	117					
DB	101					
DB	86					
DB	97					
DB	108					
DB	117					
DB	101					
DB	115					
DB	0
ENDP
_cf2_arrstack_setNumElements PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN10@cf2_arrsta
push	OFFSET $SG12516
push	98					
push	OFFSET $SG12517
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN11@cf2_arrsta
mov	DWORD PTR _error$3[ebp], 0
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _memory$2[ebp], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR _numElements$[ebp]
imul	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _newSize$1[ebp], ecx
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	eax, 2147483647				
xor	edx, edx
div	DWORD PTR [ecx+8]
cmp	DWORD PTR _numElements$[ebp], eax
jbe	SHORT $LN6@cf2_arrsta
jmp	$exit$17
cmp	DWORD PTR _newSize$1[ebp], 0
jg	SHORT $LN5@cf2_arrsta
push	OFFSET $SG12528
push	111					
push	OFFSET $SG12529
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN6@cf2_arrsta
lea	eax, DWORD PTR _error$3[ebp]
push	eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _newSize$1[ebp]
push	eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
push	1
mov	eax, DWORD PTR _memory$2[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+28], eax
cmp	DWORD PTR _error$3[ebp], 0
jne	SHORT $exit$17
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR _numElements$[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _newSize$1[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR _numElements$[ebp]
jbe	SHORT $LN1@cf2_arrsta
push	OFFSET $SG12534
push	121					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cf2_setError
add	esp, 8
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _numElements$[ebp]
mov	DWORD PTR [ecx+20], edx
xor	al, al
jmp	SHORT $LN12@cf2_arrsta
mov	al, 1
jmp	SHORT $LN12@cf2_arrsta
push	OFFSET $SG12535
push	132					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
push	eax
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_setError
add	esp, 8
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@cf2_arrsta
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN15@cf2_arrsta
DD	-8					
DD	4
DD	$LN14@cf2_arrsta
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_cmap_unicode_char_next PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	DWORD PTR _psnames$[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _pchar_code$[ebp]
push	eax
mov	ecx, DWORD PTR _unicodes$[ebp]
push	ecx
mov	edx, DWORD PTR _psnames$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_unicode_char_index PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	DWORD PTR _psnames$[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _char_code$[ebp]
push	eax
mov	ecx, DWORD PTR _unicodes$[ebp]
push	ecx
mov	edx, DWORD PTR _psnames$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_unicode_done PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _unicodes$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _unicodes$[ebp]
mov	DWORD PTR [ecx+20], 0
xor	edx, edx
jne	SHORT $LN3@cff_cmap_u
mov	eax, DWORD PTR _unicodes$[ebp]
mov	DWORD PTR [eax+16], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_unicode_init PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _unicodes$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+656]
mov	DWORD PTR _cff$[ebp], edx
mov	eax, DWORD PTR _cff$[ebp]
add	eax, 1152				
mov	DWORD PTR _charset$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	DWORD PTR _psnames$[ebp], edx
mov	eax, DWORD PTR _pointer$[ebp]
mov	DWORD PTR _pointer$[ebp], eax
mov	ecx, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [ecx+8], 0
jne	SHORT $LN1@cff_cmap_u
push	OFFSET $SG12419
push	156					
push	163					
call	_FT_Throw
add	esp, 12					
or	eax, 163				
jmp	SHORT $LN2@cff_cmap_u
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
push	edx
push	0
push	OFFSET _cff_sid_to_glyph_name
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _unicodes$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _psnames$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_sid_to_glyph_name PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1152				
mov	DWORD PTR _charset$[ebp], edx
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _idx$[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _sid$[ebp], eax
mov	ecx, DWORD PTR _sid$[ebp]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_char_next PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _pchar_code$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _char_code$[ebp], ecx
mov	edx, DWORD PTR _pchar_code$[ebp]
mov	DWORD PTR [edx], 0
cmp	DWORD PTR _char_code$[ebp], 255		
jae	SHORT $LN5@cff_cmap_e
mov	eax, DWORD PTR _char_code$[ebp]
add	eax, 1
mov	DWORD PTR _code$1[ebp], eax
cmp	DWORD PTR _code$1[ebp], 256		
jb	SHORT $LN2@cff_cmap_e
jmp	SHORT $LN5@cff_cmap_e
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR _code$1[ebp]
movzx	ecx, WORD PTR [edx+eax*2]
mov	DWORD PTR _result$[ebp], ecx
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN1@cff_cmap_e
mov	edx, DWORD PTR _pchar_code$[ebp]
mov	eax, DWORD PTR _code$1[ebp]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN5@cff_cmap_e
mov	ecx, DWORD PTR _code$1[ebp]
add	ecx, 1
mov	DWORD PTR _code$1[ebp], ecx
jmp	SHORT $LN4@cff_cmap_e
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_char_index PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
cmp	DWORD PTR _char_code$[ebp], 256		
jae	SHORT $LN1@cff_cmap_e
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _char_code$[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [eax+16], 0
pop	ebp
ret	0
ENDP
_cff_cmap_encoding_init PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cmap$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 116				
mov	DWORD PTR _encoding$[ebp], ecx
mov	edx, DWORD PTR _pointer$[ebp]
mov	DWORD PTR _pointer$[ebp], edx
mov	eax, DWORD PTR _encoding$[ebp]
add	eax, 524				
mov	ecx, DWORD PTR _cmap$[ebp]
mov	DWORD PTR [ecx+16], eax
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_add_contour PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _builder$[ebp]
movzx	eax, BYTE PTR [edx+65]
test	eax, eax
jne	SHORT $LN3@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR [ecx]
add	dx, 1
mov	eax, DWORD PTR _outline$[ebp]
mov	WORD PTR [eax], dx
xor	eax, eax
jmp	$LN4@cff_builde
mov	ecx, 1
test	ecx, ecx
je	SHORT $LN7@cff_builde
xor	edx, edx
jne	SHORT $LN6@cff_builde
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+20]
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	eax, WORD PTR [ecx+56]
lea	ecx, DWORD PTR [edx+eax+1]
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	ecx, DWORD PTR [eax+8]
ja	SHORT $LN7@cff_builde
mov	DWORD PTR tv90[ebp], 0
jmp	SHORT $LN8@cff_builde
push	1
push	0
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv90[ebp], eax
mov	eax, DWORD PTR tv90[ebp]
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
test	edx, edx
jle	SHORT $LN1@cff_builde
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
sub	ecx, 1
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
mov	edx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [edx+12]
mov	WORD PTR [edx+eax*2-2], cx
mov	eax, DWORD PTR _outline$[ebp]
mov	cx, WORD PTR [eax]
add	cx, 1
mov	edx, DWORD PTR _outline$[ebp]
mov	WORD PTR [edx], cx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_compute_bias PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _in_charstring_type$[ebp], 1
jne	SHORT $LN6@cff_comput
mov	DWORD PTR _result$[ebp], 0
jmp	SHORT $LN5@cff_comput
cmp	DWORD PTR _num_subrs$[ebp], 1240	
jae	SHORT $LN4@cff_comput
mov	DWORD PTR _result$[ebp], 107		
jmp	SHORT $LN5@cff_comput
cmp	DWORD PTR _num_subrs$[ebp], 33900	
jae	SHORT $LN2@cff_comput
mov	DWORD PTR _result$[ebp], 1131		
jmp	SHORT $LN5@cff_comput
mov	DWORD PTR _result$[ebp], 32768		
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _glyph$[ebp], ecx
cmp	DWORD PTR _glyph$[ebp], 0
je	SHORT $LN2@cff_builde
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
mov	ecx, DWORD PTR [edx+16]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+16], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_init PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _builder$[ebp]
mov	BYTE PTR [eax+64], 0
mov	ecx, DWORD PTR _builder$[ebp]
mov	BYTE PTR [ecx+65], 1
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR [eax], edx
cmp	DWORD PTR _glyph$[ebp], 0
je	$LN2@cff_builde
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _loader$2[ebp], edx
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _loader$2[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _loader$2[ebp]
add	edx, 20					
mov	eax, DWORD PTR _builder$[ebp]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR _loader$2[ebp]
add	ecx, 56					
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _loader$2[ebp]
push	eax
call	_FT_GlyphLoader_Rewind
add	esp, 4
mov	ecx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [ecx+72], 0
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+68], 0
movzx	eax, BYTE PTR _hinting$[ebp]
test	eax, eax
je	SHORT $LN2@cff_builde
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN2@cff_builde
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR _internal$1[ebp], edx
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _internal$1[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+72], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR [ecx+36]
mov	DWORD PTR [edx+68], eax
mov	ecx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+28], 0
mov	eax, DWORD PTR _builder$[ebp]
mov	DWORD PTR [eax+32], 0
mov	ecx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [ecx+36], 0
mov	edx, DWORD PTR _builder$[ebp]
mov	DWORD PTR [edx+40], 0
mov	eax, DWORD PTR _builder$[ebp]
mov	DWORD PTR [eax+44], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_outline_close PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _decoder$[ebp], ecx
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_outlin
push	OFFSET $SG13758
push	683					
push	OFFSET $SG13759
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_outlin
mov	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cff_builder_close_contour
add	esp, 4
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_outline_reset PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _decoder$[ebp], ecx
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_outlin
push	OFFSET $SG13748
push	669					
push	OFFSET $SG13749
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_outlin
mov	eax, DWORD PTR _outline$[ebp]
mov	DWORD PTR [eax+16], 0
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_GlyphLoader_Rewind
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_getNominalWidthX PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getNom
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getNom
push	OFFSET $SG13736
push	656					
push	OFFSET $SG13737
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getNom
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+532]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getDefaultWidthX PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getDef
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getDef
push	OFFSET $SG13724
push	646					
push	OFFSET $SG13725
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getDef
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+528]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_initLocalRegionBuffer PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN8@cf2_initLo
push	OFFSET $SG13707
push	625					
push	OFFSET $SG13708
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@cf2_initLo
push	16					
push	0
mov	ecx, DWORD PTR _buf$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
add	eax, DWORD PTR [edx+896]
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
cmp	edx, DWORD PTR [ecx+888]
jb	SHORT $LN4@cf2_initLo
mov	eax, 1
jmp	SHORT $LN10@cf2_initLo
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+904], 0
jne	SHORT $LN3@cf2_initLo
push	OFFSET $SG13714
push	633					
push	OFFSET $SG13715
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@cf2_initLo
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+904]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [eax+edx*4]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+904]
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [edx+ecx*4+4]
mov	DWORD PTR [eax+8], edx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_freeSeacComponent PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN3@cf2_freeSe
push	OFFSET $SG13692
push	612					
push	OFFSET $SG13693
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_freeSe
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [ecx+8]
sub	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _buf$[ebp]
add	ecx, 4
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cff_free_glyph_data
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getSeacComponent PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN9@cf2_getSea
push	OFFSET $SG13672
push	581					
push	OFFSET $SG13673
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@cf2_getSea
push	16					
push	0
mov	ecx, DWORD PTR _buf$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _code$[ebp]
push	edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+76]
push	ecx
call	_cff_lookup_glyph_by_stdcharcode
add	esp, 8
mov	DWORD PTR _gid$[ebp], eax
cmp	DWORD PTR _gid$[ebp], 0
jge	SHORT $LN6@cf2_getSea
push	OFFSET $SG13675
push	587					
push	18					
call	_FT_Throw
add	esp, 12					
or	eax, 18					
jmp	SHORT $LN11@cf2_getSea
lea	edx, DWORD PTR _len$[ebp]
push	edx
lea	eax, DWORD PTR _charstring$[ebp]
push	eax
mov	ecx, DWORD PTR _gid$[ebp]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_cff_get_glyph_data
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cf2_getSea
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN11@cf2_getSea
mov	ecx, DWORD PTR _charstring$[ebp]
add	ecx, DWORD PTR _len$[ebp]
cmp	ecx, DWORD PTR _charstring$[ebp]
jae	SHORT $LN3@cf2_getSea
push	OFFSET $SG13681
push	598					
push	OFFSET $SG13682
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cf2_getSea
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _charstring$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _charstring$[ebp]
add	edx, DWORD PTR _len$[ebp]
mov	eax, DWORD PTR _buf$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+12], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@cf2_getSea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN15@cf2_getSea
DD	-12					
DD	4
DD	$LN13@cf2_getSea
DD	-24					
DD	4
DD	$LN14@cf2_getSea
DB	108					
DB	101					
DB	110					
DB	0
DB	99					
DB	104					
DB	97					
DB	114					
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
_cf2_initGlobalRegionBuffer PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
jne	SHORT $LN8@cf2_initGl
push	OFFSET $SG13648
push	550					
push	OFFSET $SG13649
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@cf2_initGl
push	16					
push	0
mov	ecx, DWORD PTR _buf$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
add	eax, DWORD PTR [edx+900]
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
cmp	edx, DWORD PTR [ecx+892]
jb	SHORT $LN4@cf2_initGl
mov	eax, 1
jmp	SHORT $LN10@cf2_initGl
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+908], 0
jne	SHORT $LN3@cf2_initGl
push	OFFSET $SG13655
push	558					
push	OFFSET $SG13656
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN4@cf2_initGl
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+908]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [eax+edx*4]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR _buf$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+908]
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [edx+ecx*4+4]
mov	DWORD PTR [eax+8], edx
xor	eax, eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getLanguageGroup PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getLan
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getLan
push	OFFSET $SG13635
push	537					
push	OFFSET $SG13636
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getLan
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+512]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getFamilyOtherBlues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getFam
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getFam
push	OFFSET $SG13624
push	526					
push	OFFSET $SG13625
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getFam
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+179]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 332				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getFamilyBlues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getFam
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getFam
push	OFFSET $SG13609
push	513					
push	OFFSET $SG13610
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getFam
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+178]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 276				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getOtherBlues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getOth
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getOth
push	OFFSET $SG13594
push	500					
push	OFFSET $SG13595
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getOth
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+177]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 236				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getBlueValues PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getBlu
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getBlu
push	OFFSET $SG13579
push	487					
push	OFFSET $SG13580
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getBlu
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
movzx	ecx, BYTE PTR [eax+176]
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
add	ecx, 180				
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getBlueMetrics PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getBlu
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getBlu
push	OFFSET $SG13559
push	468					
push	OFFSET $SG13560
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getBlu
push	65536000				
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	ecx, DWORD PTR [eax+372]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _blueScale$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+928]
mov	edx, DWORD PTR [ecx+376]
shl	edx, 16					
mov	eax, DWORD PTR _blueShift$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+928]
mov	eax, DWORD PTR [edx+380]
shl	eax, 16					
mov	ecx, DWORD PTR _blueFuzz$[ebp]
mov	DWORD PTR [ecx], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getStdHW PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getStd
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getStd
push	OFFSET $SG13541
push	454					
push	OFFSET $SG13542
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getStd
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+384]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getStdVW PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getStd
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getStd
push	OFFSET $SG13529
push	444					
push	OFFSET $SG13530
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getStd
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
mov	eax, DWORD PTR [eax+388]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getPpemY PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getPpe
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN1@cf2_getPpe
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+4]
cmp	DWORD PTR [edx+88], 0
jne	SHORT $LN4@cf2_getPpe
push	OFFSET $SG13517
push	422					
push	OFFSET $SG13518
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@cf2_getPpe
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+88]
movzx	eax, WORD PTR [eax+14]
shl	eax, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_getSubfont PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN1@cf2_getSub
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+928], 0
jne	SHORT $LN4@cf2_getSub
push	OFFSET $SG13507
push	410					
push	OFFSET $SG13508
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN5@cf2_getSub
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+928]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_decoder_parse_charstrings PROC
push	ebp
mov	ebp, esp
sub	esp, 128				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-128]
mov	ecx, 32					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _decoder$[ebp], 0
je	SHORT $LN12@cf2_decode
mov	eax, DWORD PTR _decoder$[ebp]
cmp	DWORD PTR [eax+76], 0
jne	SHORT $LN15@cf2_decode
push	OFFSET $SG13466
push	306					
push	OFFSET $SG13467
call	_FT_Panic
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN16@cf2_decode
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	eax, DWORD PTR [edx+2972]
mov	DWORD PTR _font$[ebp], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+76]
cmp	DWORD PTR [edx+2972], 0
jne	$LN11@cf2_decode
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	DWORD PTR [ecx+2976], OFFSET _cf2_free_instance
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	504					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	DWORD PTR [edx+2972], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@cf2_decode
push	OFFSET $SG13475
push	321					
push	64					
call	_FT_Throw
add	esp, 12					
or	eax, 64					
jmp	$LN17@cf2_decode
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	edx, DWORD PTR [ecx+2972]
mov	DWORD PTR _font$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
call	_cf2_outline_init
add	esp, 12					
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [eax+132], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+128], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR _builder$8[ebp], ecx
mov	edx, DWORD PTR _builder$8[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _driver$7[ebp], ecx
mov	DWORD PTR _error2$6[ebp], 0
mov	edx, DWORD PTR _charstring_base$[ebp]
add	edx, DWORD PTR _charstring_len$[ebp]
cmp	edx, DWORD PTR _charstring_base$[ebp]
jae	SHORT $LN8@cf2_decode
push	OFFSET $SG13491
push	354					
push	OFFSET $SG13492
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN9@cf2_decode
push	16					
push	0
lea	ecx, DWORD PTR _buf$5[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _charstring_base$[ebp]
mov	DWORD PTR _buf$5[ebp+12], edx
mov	eax, DWORD PTR _buf$5[ebp+12]
mov	DWORD PTR _buf$5[ebp+4], eax
mov	ecx, DWORD PTR _charstring_base$[ebp]
add	ecx, DWORD PTR _charstring_len$[ebp]
mov	DWORD PTR _buf$5[ebp+8], ecx
push	24					
push	0
lea	edx, DWORD PTR _transform$4[ebp]
push	edx
call	_memset
add	esp, 12					
lea	eax, DWORD PTR _scaled$1[ebp]
push	eax
lea	ecx, DWORD PTR _hinted$2[ebp]
push	ecx
lea	edx, DWORD PTR _transform$4[ebp+12]
push	edx
lea	eax, DWORD PTR _transform$4[ebp]
push	eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cf2_getScaleAndHintFlag
add	esp, 20					
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+8], 0
movzx	eax, BYTE PTR _hinted$2[ebp]
test	eax, eax
je	SHORT $LN5@cf2_decode
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 1
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+8], edx
movzx	ecx, BYTE PTR _scaled$1[ebp]
test	ecx, ecx
je	SHORT $LN4@cf2_decode
mov	edx, DWORD PTR _driver$7[ebp]
movzx	eax, BYTE PTR [edx+32]
test	eax, eax
jne	SHORT $LN4@cf2_decode
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 2
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	edx, DWORD PTR [esi+edx+36]
mov	DWORD PTR [eax+ecx+144], edx
mov	eax, 4
shl	eax, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	eax, DWORD PTR [esi+eax+36]
mov	DWORD PTR [edx+ecx+144], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	ecx, DWORD PTR [esi+ecx+36]
mov	DWORD PTR [eax+edx+144], ecx
mov	edx, 4
imul	eax, edx, 3
mov	ecx, 4
imul	edx, ecx, 3
mov	ecx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	eax, DWORD PTR [esi+eax+36]
mov	DWORD PTR [ecx+edx+144], eax
mov	ecx, 4
shl	ecx, 2
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	ecx, DWORD PTR [esi+ecx+36]
mov	DWORD PTR [eax+edx+144], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	eax, DWORD PTR [esi+eax+36]
mov	DWORD PTR [ecx+edx+144], eax
mov	ecx, 4
imul	edx, ecx, 6
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	edx, DWORD PTR [esi+edx+36]
mov	DWORD PTR [eax+ecx+144], edx
mov	eax, 4
imul	ecx, eax, 7
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _font$[ebp]
mov	esi, DWORD PTR _driver$7[ebp]
mov	ecx, DWORD PTR [esi+ecx+36]
mov	DWORD PTR [edx+eax+144], ecx
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_getUnitsPerEm
add	esp, 4
movzx	eax, ax
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+88], eax
movzx	edx, BYTE PTR _scaled$1[ebp]
test	edx, edx
je	SHORT $LN3@cf2_decode
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+88]
push	ecx
lea	edx, DWORD PTR _transform$4[ebp]
push	edx
call	_cf2_checkTransform
add	esp, 8
mov	DWORD PTR _error2$6[ebp], eax
cmp	DWORD PTR _error2$6[ebp], 0
je	SHORT $LN3@cf2_decode
mov	eax, DWORD PTR _error2$6[ebp]
jmp	SHORT $LN17@cf2_decode
lea	eax, DWORD PTR _glyphWidth$3[ebp]
push	eax
lea	ecx, DWORD PTR _transform$4[ebp]
push	ecx
lea	edx, DWORD PTR _buf$5[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
call	_cf2_getGlyphOutline
add	esp, 16					
mov	DWORD PTR _error2$6[ebp], eax
cmp	DWORD PTR _error2$6[ebp], 0
je	SHORT $LN1@cf2_decode
mov	eax, 3
jmp	SHORT $LN17@cf2_decode
mov	ecx, DWORD PTR _glyphWidth$3[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 100				
push	edx
call	_cf2_setGlyphWidth
add	esp, 8
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cf2_decode
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 128				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	6
DD	$LN25@cf2_decode
DD	-16					
DD	4
DD	$LN19@cf2_decode
DD	-56					
DD	16					
DD	$LN20@cf2_decode
DD	-88					
DD	24					
DD	$LN21@cf2_decode
DD	-100					
DD	4
DD	$LN22@cf2_decode
DD	-109					
DD	1
DD	$LN23@cf2_decode
DD	-121					
DD	1
DD	$LN24@cf2_decode
DB	115					
DB	99					
DB	97					
DB	108					
DB	101					
DB	100					
DB	0
DB	104					
DB	105					
DB	110					
DB	116					
DB	101					
DB	100					
DB	0
DB	103					
DB	108					
DB	121					
DB	112					
DB	104					
DB	87					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	116					
DB	114					
DB	97					
DB	110					
DB	115					
DB	102					
DB	111					
DB	114					
DB	109					
DB	0
DB	98					
DB	117					
DB	102					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cf2_buf_isEnd PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+8]
jb	SHORT $LN3@cf2_buf_is
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@cf2_buf_is
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_buf_readByte PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR _buf$[ebp]
mov	edx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+8]
jae	SHORT $LN2@cf2_buf_re
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR tv72[ebp], dl
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 1
mov	edx, DWORD PTR _buf$[ebp]
mov	DWORD PTR [edx+12], ecx
movzx	eax, BYTE PTR tv72[ebp]
jmp	SHORT $LN3@cf2_buf_re
jmp	SHORT $LN3@cf2_buf_re
push	OFFSET $SG15335
push	98					
push	85					
call	_FT_Throw
add	esp, 12					
or	eax, 85					
push	eax
mov	eax, DWORD PTR _buf$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_cf2_setError
add	esp, 8
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_push PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN9@cf2_arrsta
push	OFFSET $SG12606
push	215					
push	OFFSET $SG12607
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN10@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+20]
cmp	eax, DWORD PTR [edx+12]
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _arrstack$[ebp]
add	edx, DWORD PTR [eax+16]
push	edx
mov	ecx, DWORD PTR _arrstack$[ebp]
push	ecx
call	_cf2_arrstack_setNumElements
add	esp, 8
movzx	edx, al
test	edx, edx
jne	SHORT $LN4@cf2_arrsta
jmp	SHORT $LN11@cf2_arrsta
cmp	DWORD PTR _ptr$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12615
push	228					
push	OFFSET $SG12616
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+20]
imul	eax, DWORD PTR [edx+8]
mov	DWORD PTR _offset$2[ebp], eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+28]
add	edx, DWORD PTR _offset$2[ebp]
mov	DWORD PTR _newPtr$1[ebp], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _ptr$[ebp]
push	edx
mov	eax, DWORD PTR _newPtr$1[ebp]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR [ecx+20]
add	edx, 1
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+20], edx
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_getPointer PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN4@cf2_arrsta
push	OFFSET $SG12591
push	193					
push	OFFSET $SG12592
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _idx$[ebp]
cmp	edx, DWORD PTR [ecx+20]
jb	SHORT $LN1@cf2_arrsta
push	OFFSET $SG12594
push	198					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
push	eax
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_cf2_setError
add	esp, 8
mov	DWORD PTR _idx$[ebp], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
imul	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _arrstack$[ebp]
add	eax, DWORD PTR [ecx+28]
mov	DWORD PTR _newPtr$[ebp], eax
mov	eax, DWORD PTR _newPtr$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_getBuffer PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12578
push	179					
push	OFFSET $SG12579
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+28]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_size PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12568
push	170					
push	OFFSET $SG12569
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR [ecx+20]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_clear PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12558
push	160					
push	OFFSET $SG12559
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+20], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_setCount PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN5@cf2_arrsta
push	OFFSET $SG12546
push	143					
push	OFFSET $SG12547
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN6@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _numElements$[ebp]
cmp	edx, DWORD PTR [ecx+12]
jbe	SHORT $LN2@cf2_arrsta
mov	eax, DWORD PTR _numElements$[ebp]
push	eax
mov	ecx, DWORD PTR _arrstack$[ebp]
push	ecx
call	_cf2_arrstack_setNumElements
add	esp, 8
movzx	edx, al
test	edx, edx
jne	SHORT $LN2@cf2_arrsta
jmp	SHORT $LN7@cf2_arrsta
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR _numElements$[ebp]
mov	DWORD PTR [eax+20], ecx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_arrstack_finalize PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN6@cf2_arrsta
push	OFFSET $SG12499
push	81					
push	OFFSET $SG12500
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN7@cf2_arrsta
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [edx+24], 0
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR [eax+28]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+28], 0
xor	ecx, ecx
jne	SHORT $LN3@cf2_arrsta
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cf2_arrstack_init PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _arrstack$[ebp], 0
jne	SHORT $LN3@cf2_arrsta
push	OFFSET $SG12487
push	61					
push	OFFSET $SG12488
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN4@cf2_arrsta
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _arrstack$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _arrstack$[ebp]
mov	eax, DWORD PTR _sizeItem$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [edx+16], 10			
mov	eax, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	edx, DWORD PTR _arrstack$[ebp]
mov	DWORD PTR [edx+28], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cf2_setError PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cf2_setErr
mov	eax, DWORD PTR _error$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN2@cf2_setErr
mov	ecx, DWORD PTR _error$[ebp]
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR [ecx], edx
pop	ebp
ret	0
ENDP
_remove_style PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _family_name$[ebp]
push	eax
call	_strlen
add	esp, 4
mov	DWORD PTR _family_name_length$[ebp], eax
mov	ecx, DWORD PTR _style_name$[ebp]
push	ecx
call	_strlen
add	esp, 4
mov	DWORD PTR _style_name_length$[ebp], eax
mov	edx, DWORD PTR _family_name_length$[ebp]
cmp	edx, DWORD PTR _style_name_length$[ebp]
jle	$LN11@remove_sty
mov	DWORD PTR _idx$1[ebp], 1
jmp	SHORT $LN9@remove_sty
mov	eax, DWORD PTR _idx$1[ebp]
add	eax, 1
mov	DWORD PTR _idx$1[ebp], eax
mov	ecx, DWORD PTR _idx$1[ebp]
cmp	ecx, DWORD PTR _style_name_length$[ebp]
jg	SHORT $LN7@remove_sty
mov	edx, DWORD PTR _family_name_length$[ebp]
sub	edx, DWORD PTR _idx$1[ebp]
mov	eax, DWORD PTR _family_name$[ebp]
movsx	ecx, BYTE PTR [eax+edx]
mov	edx, DWORD PTR _style_name_length$[ebp]
sub	edx, DWORD PTR _idx$1[ebp]
mov	eax, DWORD PTR _style_name$[ebp]
movsx	edx, BYTE PTR [eax+edx]
cmp	ecx, edx
je	SHORT $LN6@remove_sty
jmp	SHORT $LN7@remove_sty
jmp	SHORT $LN8@remove_sty
mov	eax, DWORD PTR _idx$1[ebp]
cmp	eax, DWORD PTR _style_name_length$[ebp]
jle	SHORT $LN11@remove_sty
mov	ecx, DWORD PTR _family_name_length$[ebp]
sub	ecx, DWORD PTR _style_name_length$[ebp]
sub	ecx, 1
mov	DWORD PTR _idx$1[ebp], ecx
cmp	DWORD PTR _idx$1[ebp], 0
jle	SHORT $LN3@remove_sty
mov	edx, DWORD PTR _family_name$[ebp]
add	edx, DWORD PTR _idx$1[ebp]
movsx	eax, BYTE PTR [edx]
cmp	eax, 45					
je	SHORT $LN2@remove_sty
mov	ecx, DWORD PTR _family_name$[ebp]
add	ecx, DWORD PTR _idx$1[ebp]
movsx	edx, BYTE PTR [ecx]
cmp	edx, 32					
je	SHORT $LN2@remove_sty
mov	eax, DWORD PTR _family_name$[ebp]
add	eax, DWORD PTR _idx$1[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 95					
je	SHORT $LN2@remove_sty
mov	edx, DWORD PTR _family_name$[ebp]
add	edx, DWORD PTR _idx$1[ebp]
movsx	eax, BYTE PTR [edx]
cmp	eax, 43					
jne	SHORT $LN3@remove_sty
mov	ecx, DWORD PTR _idx$1[ebp]
sub	ecx, 1
mov	DWORD PTR _idx$1[ebp], ecx
jmp	SHORT $LN4@remove_sty
cmp	DWORD PTR _idx$1[ebp], 0
jle	SHORT $LN11@remove_sty
mov	edx, DWORD PTR _family_name$[ebp]
add	edx, DWORD PTR _idx$1[ebp]
mov	BYTE PTR [edx+1], 0
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_remove_subset_prefix PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _idx$[ebp], 0
mov	eax, DWORD PTR _name$[ebp]
push	eax
call	_strlen
add	esp, 4
add	eax, 1
mov	DWORD PTR _length$[ebp], eax
mov	BYTE PTR _continue_search$[ebp], 1
movzx	ecx, BYTE PTR _continue_search$[ebp]
test	ecx, ecx
je	$LN14@remove_sub
cmp	DWORD PTR _length$[ebp], 7
jl	$LN11@remove_sub
mov	edx, 1
imul	eax, edx, 6
mov	ecx, DWORD PTR _name$[ebp]
movsx	edx, BYTE PTR [ecx+eax]
cmp	edx, 43					
jne	SHORT $LN11@remove_sub
mov	DWORD PTR _idx$[ebp], 0
jmp	SHORT $LN10@remove_sub
mov	eax, DWORD PTR _idx$[ebp]
add	eax, 1
mov	DWORD PTR _idx$[ebp], eax
cmp	DWORD PTR _idx$[ebp], 6
jge	SHORT $LN8@remove_sub
mov	ecx, DWORD PTR _name$[ebp]
add	ecx, DWORD PTR _idx$[ebp]
movsx	edx, BYTE PTR [ecx]
cmp	edx, 65					
jl	SHORT $LN6@remove_sub
mov	eax, DWORD PTR _name$[ebp]
add	eax, DWORD PTR _idx$[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 90					
jle	SHORT $LN7@remove_sub
mov	BYTE PTR _continue_search$[ebp], 0
jmp	SHORT $LN9@remove_sub
movzx	edx, BYTE PTR _continue_search$[ebp]
test	edx, edx
je	SHORT $LN5@remove_sub
mov	DWORD PTR _idx$[ebp], 7
jmp	SHORT $LN4@remove_sub
mov	eax, DWORD PTR _idx$[ebp]
add	eax, 1
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
cmp	ecx, DWORD PTR _length$[ebp]
jge	SHORT $LN2@remove_sub
mov	edx, DWORD PTR _name$[ebp]
add	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _name$[ebp]
add	eax, DWORD PTR _idx$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR [edx-7], cl
jmp	SHORT $LN3@remove_sub
mov	edx, DWORD PTR _length$[ebp]
sub	edx, 7
mov	DWORD PTR _length$[ebp], edx
jmp	SHORT $LN1@remove_sub
mov	BYTE PTR _continue_search$[ebp], 0
jmp	$LN13@remove_sub
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_strcpy PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _source$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_strdup
add	esp, 12					
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@cff_strcpy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN4@cff_strcpy
DD	-8					
DD	4
DD	$LN3@cff_strcpy
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_make_private_dict PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _subfont$[ebp]
add	eax, 176				
mov	DWORD PTR _cpriv$[ebp], eax
push	196					
push	0
mov	ecx, DWORD PTR _priv$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR [edx+8], cl
mov	edx, DWORD PTR _priv$[ebp]
movzx	eax, BYTE PTR [edx+8]
mov	DWORD PTR _count$[ebp], eax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN18@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN16@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	dx, WORD PTR [esi+edx*4+4]
mov	WORD PTR [ecx+eax*2+12], dx
jmp	SHORT $LN17@cff_make_p
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	dl, BYTE PTR [ecx+1]
mov	BYTE PTR [eax+9], dl
mov	eax, DWORD PTR _priv$[ebp]
movzx	ecx, BYTE PTR [eax+9]
mov	DWORD PTR _count$[ebp], ecx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN15@cff_make_p
mov	edx, DWORD PTR _n$[ebp]
add	edx, 1
mov	DWORD PTR _n$[ebp], edx
mov	eax, DWORD PTR _n$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN13@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	ax, WORD PTR [esi+eax*4+60]
mov	WORD PTR [edx+ecx*2+40], ax
jmp	SHORT $LN14@cff_make_p
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	al, BYTE PTR [edx+2]
mov	BYTE PTR [ecx+10], al
mov	ecx, DWORD PTR _priv$[ebp]
movzx	edx, BYTE PTR [ecx+10]
mov	DWORD PTR _count$[ebp], edx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN12@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
add	eax, 1
mov	DWORD PTR _n$[ebp], eax
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN10@cff_make_p
mov	edx, DWORD PTR _n$[ebp]
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	cx, WORD PTR [esi+ecx*4+100]
mov	WORD PTR [eax+edx*2+60], cx
jmp	SHORT $LN11@cff_make_p
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	cl, BYTE PTR [eax+3]
mov	BYTE PTR [edx+11], cl
mov	edx, DWORD PTR _priv$[ebp]
movzx	eax, BYTE PTR [edx+11]
mov	DWORD PTR _count$[ebp], eax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN9@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN7@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	dx, WORD PTR [esi+edx*4+156]
mov	WORD PTR [ecx+eax*2+88], dx
jmp	SHORT $LN8@cff_make_p
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	edx, DWORD PTR [ecx+196]
mov	DWORD PTR [eax+108], edx
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	edx, DWORD PTR [ecx+200]
mov	DWORD PTR [eax+112], edx
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	edx, DWORD PTR [ecx+204]
mov	DWORD PTR [eax+116], edx
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	ax, WORD PTR [eax+208]
mov	WORD PTR [edx+ecx+120], ax
mov	ecx, 2
imul	edx, ecx, 0
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	cx, WORD PTR [ecx+212]
mov	WORD PTR [eax+edx+122], cx
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _cpriv$[ebp]
mov	cl, BYTE PTR [eax+216]
mov	BYTE PTR [edx+124], cl
mov	edx, DWORD PTR _priv$[ebp]
movzx	eax, BYTE PTR [edx+124]
mov	DWORD PTR _count$[ebp], eax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN6@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
add	ecx, 1
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _n$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
jae	SHORT $LN4@cff_make_p
mov	eax, DWORD PTR _n$[ebp]
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	dx, WORD PTR [esi+edx*4+220]
mov	WORD PTR [ecx+eax*2+128], dx
jmp	SHORT $LN5@cff_make_p
mov	eax, DWORD PTR _priv$[ebp]
mov	ecx, DWORD PTR _cpriv$[ebp]
mov	dl, BYTE PTR [ecx+217]
mov	BYTE PTR [eax+125], dl
mov	eax, DWORD PTR _priv$[ebp]
movzx	ecx, BYTE PTR [eax+125]
mov	DWORD PTR _count$[ebp], ecx
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN3@cff_make_p
mov	edx, DWORD PTR _n$[ebp]
add	edx, 1
mov	DWORD PTR _n$[ebp], edx
mov	eax, DWORD PTR _n$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN1@cff_make_p
mov	ecx, DWORD PTR _n$[ebp]
mov	edx, DWORD PTR _priv$[ebp]
mov	eax, DWORD PTR _n$[ebp]
mov	esi, DWORD PTR _cpriv$[ebp]
mov	ax, WORD PTR [esi+eax*4+272]
mov	WORD PTR [edx+ecx*2+154], ax
jmp	SHORT $LN2@cff_make_p
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	al, BYTE PTR [edx+324]
mov	BYTE PTR [ecx+126], al
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	eax, DWORD PTR [edx+336]
mov	DWORD PTR [ecx+184], eax
mov	ecx, DWORD PTR _priv$[ebp]
mov	edx, DWORD PTR _cpriv$[ebp]
mov	eax, DWORD PTR [edx+332]
mov	DWORD PTR [ecx+4], eax
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_size_get_globals_funcs PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _font$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2952]
mov	DWORD PTR _pshinter$[ebp], edx
push	OFFSET $SG11139
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$[ebp], eax
cmp	DWORD PTR _module$[ebp], 0
je	SHORT $LN3@cff_size_g
cmp	DWORD PTR _pshinter$[ebp], 0
je	SHORT $LN3@cff_size_g
mov	ecx, DWORD PTR _pshinter$[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $LN3@cff_size_g
mov	esi, esp
mov	edx, DWORD PTR _module$[ebp]
push	edx
mov	eax, DWORD PTR _pshinter$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv80[ebp], eax
jmp	SHORT $LN4@cff_size_g
mov	DWORD PTR tv80[ebp], 0
mov	eax, DWORD PTR tv80[ebp]
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_FT_MulFix_i386 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _b$[ebp]
imul	edx
mov	ecx, edx
sar	ecx, 31					
add	ecx, 32768				
add	eax, ecx
adc	edx, 0
shr	eax, 16					
shl	edx, 16					
add	eax, edx
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_subfont_done PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _subfont$[ebp], 0
je	SHORT $LN5@cff_subfon
mov	eax, DWORD PTR _subfont$[ebp]
add	eax, 536				
push	eax
call	_cff_index_done
add	esp, 4
mov	ecx, DWORD PTR _subfont$[ebp]
mov	edx, DWORD PTR [ecx+568]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _subfont$[ebp]
mov	DWORD PTR [ecx+568], 0
xor	edx, edx
jne	SHORT $LN3@cff_subfon
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_subfont_load PROC
push	ebp
mov	ebp, esp
sub	esp, 460				
push	edi
lea	edi, DWORD PTR [ebp-460]
mov	ecx, 115				
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _dict$[ebp], 0
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR _top$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 176				
mov	DWORD PTR _priv$[ebp], ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
push	eax
push	4096					
lea	ecx, DWORD PTR _parser$[ebp]
push	ecx
call	_cff_parser_init
add	esp, 16					
push	176					
push	0
mov	edx, DWORD PTR _top$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+32], -6553600		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+36], 3276800		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+44], 2
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+48], 65536		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+60], 65536		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+156], 8720		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax], 65535			
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+4], 65535		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+8], 65535		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+12], 65535		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+16], 65535		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+20], 65535		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+128], 65535		
mov	ecx, DWORD PTR _top$[ebp]
mov	DWORD PTR [ecx+132], 65535		
mov	edx, DWORD PTR _top$[ebp]
mov	DWORD PTR [edx+136], 65535		
mov	eax, DWORD PTR _top$[ebp]
mov	DWORD PTR [eax+172], 65535		
lea	ecx, DWORD PTR _dict_len$[ebp]
push	ecx
lea	edx, DWORD PTR _dict$[ebp]
push	edx
mov	eax, DWORD PTR _font_index$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_access_element
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN19@cff_subfon
mov	edx, 4
imul	eax, edx, 48
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN17@cff_subfon
push	OFFSET $SG10883
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN18@cff_subfon
mov	edx, DWORD PTR _dict$[ebp]
add	edx, DWORD PTR _dict_len$[ebp]
push	edx
mov	eax, DWORD PTR _dict$[ebp]
push	eax
lea	ecx, DWORD PTR _parser$[ebp]
push	ecx
call	_cff_parser_run
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
lea	edx, DWORD PTR _dict$[ebp]
push	edx
mov	eax, DWORD PTR _idx$[ebp]
push	eax
call	_cff_index_forget_element
add	esp, 8
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@cff_subfon
jmp	$Exit$27
mov	ecx, DWORD PTR _top$[ebp]
cmp	DWORD PTR [ecx+132], 65535		
je	SHORT $LN13@cff_subfon
jmp	$Exit$27
mov	edx, DWORD PTR _top$[ebp]
cmp	DWORD PTR [edx+116], 0
je	$LN12@cff_subfon
mov	eax, DWORD PTR _top$[ebp]
cmp	DWORD PTR [eax+120], 0
je	$LN12@cff_subfon
push	360					
push	0
mov	ecx, DWORD PTR _priv$[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _priv$[ebp]
mov	DWORD PTR [edx+200], 7
mov	eax, DWORD PTR _priv$[ebp]
mov	DWORD PTR [eax+204], 1
mov	ecx, DWORD PTR _priv$[ebp]
mov	DWORD PTR [ecx+332], -1
mov	edx, DWORD PTR _priv$[ebp]
mov	DWORD PTR [edx+340], 3932		
mov	eax, DWORD PTR _priv$[ebp]
mov	DWORD PTR [eax+196], 2596864		
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
mov	edx, DWORD PTR _priv$[ebp]
push	edx
push	8192					
lea	eax, DWORD PTR _parser$[ebp]
push	eax
call	_cff_parser_init
add	esp, 16					
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+116]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@cff_subfon
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+120]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@cff_subfon
jmp	$Exit$27
mov	ecx, 4
imul	edx, ecx, 48
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN8@cff_subfon
push	OFFSET $SG10898
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN9@cff_subfon
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+36]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
push	ecx
lea	edx, DWORD PTR _parser$[ebp]
push	edx
call	_cff_parser_run
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_subfon
jmp	$Exit$27
mov	ecx, DWORD PTR _priv$[ebp]
movzx	edx, BYTE PTR [ecx]
and	edx, -2					
mov	eax, DWORD PTR _priv$[ebp]
mov	BYTE PTR [eax], dl
mov	ecx, DWORD PTR _priv$[ebp]
cmp	DWORD PTR [ecx+348], 0
je	SHORT $Exit$27
mov	edx, DWORD PTR _top$[ebp]
mov	eax, DWORD PTR _base_offset$[ebp]
add	eax, DWORD PTR [edx+116]
mov	ecx, DWORD PTR _priv$[ebp]
add	eax, DWORD PTR [ecx+348]
push	eax
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@cff_subfon
jmp	SHORT $Exit$27
push	1
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 536				
push	ecx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cff_subfon
jmp	SHORT $Exit$27
push	0
mov	edx, DWORD PTR _font$[ebp]
add	edx, 568				
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 536				
push	eax
call	_cff_index_get_pointers
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cff_subfon
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 460				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN25@cff_subfon
DD	-424					
DD	416					
DD	$LN22@cff_subfon
DD	-436					
DD	4
DD	$LN23@cff_subfon
DD	-448					
DD	4
DD	$LN24@cff_subfon
DB	100					
DB	105					
DB	99					
DB	116					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	100					
DB	105					
DB	99					
DB	116					
DB	0
DB	112					
DB	97					
DB	114					
DB	115					
DB	101					
DB	114					
DB	0
ENDP
_cff_encoding_load PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [eax+8], 0
jne	SHORT $LN52@cff_encodi
push	OFFSET $SG10772
push	1078					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN51@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
cmp	DWORD PTR _j$[ebp], 256			
jae	SHORT $LN49@cff_encodi
xor	edx, edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [ecx+eax*2+12], dx
xor	edx, edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [ecx+eax*2+524], dx
jmp	SHORT $LN50@cff_encodi
cmp	DWORD PTR _offset$[ebp], 1
jbe	$LN48@cff_encodi
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR _offset$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _encoding$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN46@cff_encodi
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadChar
add	esp, 8
movzx	eax, al
mov	ecx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN46@cff_encodi
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _count$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN47@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _encoding$[ebp]
mov	eax, DWORD PTR [edx]
and	eax, 127				
mov	DWORD PTR tv132[ebp], eax
je	SHORT $LN43@cff_encodi
cmp	DWORD PTR tv132[ebp], 1
je	$LN37@cff_encodi
jmp	$LN25@cff_encodi
mov	ecx, DWORD PTR _count$[ebp]
add	ecx, 1
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN42@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+32]
mov	DWORD PTR _p$7[ebp], eax
mov	DWORD PTR _j$[ebp], 1
jmp	SHORT $LN41@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR _count$[ebp]
ja	SHORT $LN39@cff_encodi
mov	eax, DWORD PTR _p$7[ebp]
movzx	ecx, BYTE PTR [eax]
mov	DWORD PTR _glyph_code$[ebp], ecx
mov	edx, DWORD PTR _p$7[ebp]
add	edx, 1
mov	DWORD PTR _p$7[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN38@cff_encodi
mov	ecx, DWORD PTR _glyph_code$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	ax, WORD PTR _j$[ebp]
mov	WORD PTR [edx+ecx*2+524], ax
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _glyph_code$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	dx, WORD PTR [edx+esi*2]
mov	WORD PTR [ecx+eax*2+12], dx
jmp	SHORT $LN40@cff_encodi
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	$LN44@cff_encodi
mov	DWORD PTR _i$5[ebp], 1
mov	ecx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN36@cff_encodi
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _i$5[ebp]
add	eax, DWORD PTR _nleft$6[ebp]
mov	DWORD PTR _i$5[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	$LN34@cff_encodi
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _glyph_code$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN33@cff_encodi
jmp	$Exit$58
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _nleft$6[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN32@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _nleft$6[ebp]
add	edx, 1
mov	DWORD PTR _nleft$6[ebp], edx
mov	eax, DWORD PTR _encoding$[ebp]
mov	ecx, DWORD PTR _nleft$6[ebp]
cmp	ecx, DWORD PTR [eax+8]
jbe	SHORT $LN31@cff_encodi
mov	edx, DWORD PTR _encoding$[ebp]
mov	eax, DWORD PTR _nleft$6[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _i$5[ebp]
mov	DWORD PTR _k$4[ebp], ecx
jmp	SHORT $LN30@cff_encodi
mov	edx, DWORD PTR _k$4[ebp]
add	edx, 1
mov	DWORD PTR _k$4[ebp], edx
mov	eax, DWORD PTR _glyph_code$[ebp]
add	eax, 1
mov	DWORD PTR _glyph_code$[ebp], eax
mov	ecx, DWORD PTR _nleft$6[ebp]
add	ecx, DWORD PTR _i$5[ebp]
cmp	DWORD PTR _k$4[ebp], ecx
jae	SHORT $LN28@cff_encodi
mov	edx, DWORD PTR _k$4[ebp]
cmp	edx, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN27@cff_encodi
cmp	DWORD PTR _glyph_code$[ebp], 256	
jae	SHORT $LN27@cff_encodi
mov	eax, DWORD PTR _glyph_code$[ebp]
mov	ecx, DWORD PTR _encoding$[ebp]
mov	dx, WORD PTR _k$4[ebp]
mov	WORD PTR [ecx+eax*2+524], dx
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _glyph_code$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
mov	esi, DWORD PTR _k$4[ebp]
mov	cx, WORD PTR [ecx+esi*2]
mov	WORD PTR [eax+edx*2+12], cx
jmp	SHORT $LN29@cff_encodi
jmp	$LN35@cff_encodi
mov	edx, DWORD PTR _encoding$[ebp]
cmp	DWORD PTR [edx+8], 256			
jbe	SHORT $LN26@cff_encodi
mov	eax, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [eax+8], 256			
jmp	SHORT $LN44@cff_encodi
push	OFFSET $SG10817
call	_FT_Message
add	esp, 4
push	OFFSET $SG10818
push	1198					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$58
mov	ecx, DWORD PTR _encoding$[ebp]
mov	edx, DWORD PTR [ecx]
and	edx, 128				
je	$LN24@cff_encodi
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadChar
add	esp, 8
movzx	edx, al
mov	DWORD PTR _count$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN23@cff_encodi
jmp	$Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN22@cff_encodi
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	$LN24@cff_encodi
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _glyph_code$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN19@cff_encodi
jmp	$Exit$58
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _glyph_sid$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@cff_encodi
jmp	$Exit$58
mov	ecx, DWORD PTR _glyph_code$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	ax, WORD PTR _glyph_sid$[ebp]
mov	WORD PTR [edx+ecx*2+12], ax
mov	DWORD PTR _gindex$3[ebp], 0
jmp	SHORT $LN17@cff_encodi
mov	ecx, DWORD PTR _gindex$3[ebp]
add	ecx, 1
mov	DWORD PTR _gindex$3[ebp], ecx
mov	edx, DWORD PTR _gindex$3[ebp]
cmp	edx, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN15@cff_encodi
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _gindex$3[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
movzx	ecx, WORD PTR _glyph_sid$[ebp]
cmp	eax, ecx
jne	SHORT $LN14@cff_encodi
mov	edx, DWORD PTR _glyph_code$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
mov	cx, WORD PTR _gindex$3[ebp]
mov	WORD PTR [eax+edx*2+524], cx
jmp	SHORT $LN15@cff_encodi
jmp	SHORT $LN16@cff_encodi
jmp	$LN21@cff_encodi
jmp	$Exit$58
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR tv232[ebp], edx
cmp	DWORD PTR tv232[ebp], 0
je	SHORT $LN10@cff_encodi
cmp	DWORD PTR tv232[ebp], 1
je	SHORT $LN9@cff_encodi
jmp	$LN1@cff_encodi
push	512					
push	OFFSET _cff_standard_encoding
mov	eax, DWORD PTR _encoding$[ebp]
add	eax, 12					
push	eax
call	_memcpy
add	esp, 12					
jmp	SHORT $Populate$59
push	512					
push	OFFSET _cff_expert_encoding
mov	ecx, DWORD PTR _encoding$[ebp]
add	ecx, 12					
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
push	ecx
mov	edx, DWORD PTR _num_glyphs$[ebp]
push	edx
mov	eax, DWORD PTR _charset$[ebp]
push	eax
call	_cff_charset_compute_cids
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@cff_encodi
jmp	$Exit$58
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN7@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
cmp	DWORD PTR _j$[ebp], 256			
jae	SHORT $LN5@cff_encodi
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _encoding$[ebp]
movzx	ecx, WORD PTR [eax+edx*2+12]
mov	DWORD PTR _sid$2[ebp], ecx
mov	DWORD PTR _gid$1[ebp], 0
cmp	DWORD PTR _sid$2[ebp], 0
je	SHORT $LN4@cff_encodi
mov	edx, DWORD PTR _sid$2[ebp]
push	edx
mov	eax, DWORD PTR _charset$[ebp]
push	eax
call	_cff_charset_cid_to_gindex
add	esp, 8
mov	DWORD PTR _gid$1[ebp], eax
cmp	DWORD PTR _gid$1[ebp], 0
je	SHORT $LN3@cff_encodi
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	ax, WORD PTR _gid$1[ebp]
mov	WORD PTR [edx+ecx*2+524], ax
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], ecx
jmp	SHORT $LN2@cff_encodi
xor	eax, eax
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [edx+ecx*2+524], ax
xor	eax, eax
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _encoding$[ebp]
mov	WORD PTR [edx+ecx*2+12], ax
jmp	$LN6@cff_encodi
jmp	SHORT $Exit$58
push	OFFSET $SG10855
call	_FT_Message
add	esp, 4
push	OFFSET $SG10856
push	1291					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN57@cff_encodi
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN56@cff_encodi
DD	-8					
DD	4
DD	$LN55@cff_encodi
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_encoding_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _encoding$[ebp]
mov	DWORD PTR [edx+8], 0
pop	ebp
ret	0
ENDP
_cff_charset_load PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _offset$[ebp], 2
jbe	$LN46@cff_charse
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR _offset$[ebp]
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+4], edx
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN44@cff_charse
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadChar
add	esp, 8
movzx	eax, al
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN45@cff_charse
jmp	$Exit$52
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_glyphs$[ebp]
push	eax
push	0
push	2
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@cff_charse
jmp	$Exit$52
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+8]
xor	edx, edx
mov	WORD PTR [ecx+eax], dx
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv92[ebp], ecx
cmp	DWORD PTR tv92[ebp], 0
je	SHORT $LN40@cff_charse
cmp	DWORD PTR tv92[ebp], 0
jbe	$LN22@cff_charse
cmp	DWORD PTR tv92[ebp], 2
jbe	SHORT $LN34@cff_charse
jmp	$LN22@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 0
jbe	SHORT $LN39@cff_charse
mov	edx, DWORD PTR _num_glyphs$[ebp]
lea	eax, DWORD PTR [edx+edx-2]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN38@cff_charse
jmp	$Exit$52
mov	DWORD PTR _j$3[ebp], 1
jmp	SHORT $LN37@cff_charse
mov	edx, DWORD PTR _j$3[ebp]
add	edx, 1
mov	DWORD PTR _j$3[ebp], edx
mov	eax, DWORD PTR _j$3[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN35@cff_charse
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
mov	edx, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [edx+8]
mov	edx, DWORD PTR _j$3[ebp]
mov	WORD PTR [ecx+edx*2], ax
jmp	SHORT $LN36@cff_charse
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	$LN41@cff_charse
mov	DWORD PTR _j$3[ebp], 1
mov	ecx, DWORD PTR _j$3[ebp]
cmp	ecx, DWORD PTR _num_glyphs$[ebp]
jae	$LN32@cff_charse
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _glyph_sid$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@cff_charse
jmp	$Exit$52
mov	ecx, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [ecx], 2
jne	SHORT $LN30@cff_charse
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	ecx, ax
mov	DWORD PTR _nleft$2[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN29@cff_charse
jmp	$Exit$52
jmp	SHORT $LN28@cff_charse
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
movzx	ecx, al
mov	DWORD PTR _nleft$2[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN28@cff_charse
jmp	$Exit$52
movzx	edx, WORD PTR _glyph_sid$[ebp]
mov	eax, 65535				
sub	eax, DWORD PTR _nleft$2[ebp]
cmp	edx, eax
jbe	SHORT $LN26@cff_charse
movzx	ecx, WORD PTR _glyph_sid$[ebp]
mov	edx, 65535				
sub	edx, ecx
push	edx
mov	eax, DWORD PTR _nleft$2[ebp]
push	eax
push	OFFSET $SG10701
call	_FT_Message
add	esp, 12					
movzx	ecx, WORD PTR _glyph_sid$[ebp]
mov	edx, 65535				
sub	edx, ecx
mov	DWORD PTR _nleft$2[ebp], edx
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN25@cff_charse
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _j$3[ebp]
add	ecx, 1
mov	DWORD PTR _j$3[ebp], ecx
mov	dx, WORD PTR _glyph_sid$[ebp]
add	dx, 1
mov	WORD PTR _glyph_sid$[ebp], dx
mov	eax, DWORD PTR _j$3[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN23@cff_charse
mov	ecx, DWORD PTR _i$1[ebp]
cmp	ecx, DWORD PTR _nleft$2[ebp]
ja	SHORT $LN23@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _j$3[ebp]
mov	dx, WORD PTR _glyph_sid$[ebp]
mov	WORD PTR [eax+ecx*2], dx
jmp	SHORT $LN24@cff_charse
jmp	$LN33@cff_charse
jmp	SHORT $LN41@cff_charse
push	OFFSET $SG10707
call	_FT_Message
add	esp, 4
push	OFFSET $SG10708
push	954					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$52
jmp	$LN21@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR tv185[ebp], edx
cmp	DWORD PTR tv185[ebp], 0
je	SHORT $LN18@cff_charse
cmp	DWORD PTR tv185[ebp], 1
je	$LN15@cff_charse
cmp	DWORD PTR tv185[ebp], 2
je	$LN12@cff_charse
jmp	$LN9@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 229	
jbe	SHORT $LN17@cff_charse
push	OFFSET $SG10717
call	_FT_Message
add	esp, 4
push	OFFSET $SG10718
push	977					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$52
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _num_glyphs$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@cff_charse
jmp	$Exit$52
mov	edx, DWORD PTR _num_glyphs$[ebp]
shl	edx, 1
push	edx
push	OFFSET _cff_isoadobe_charset
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_memcpy
add	esp, 12					
jmp	$LN21@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 166	
jbe	SHORT $LN14@cff_charse
push	OFFSET $SG10724
call	_FT_Message
add	esp, 4
push	OFFSET $SG10725
push	995					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$52
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_glyphs$[ebp]
push	eax
push	0
push	2
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@cff_charse
jmp	$Exit$52
mov	eax, DWORD PTR _num_glyphs$[ebp]
shl	eax, 1
push	eax
push	OFFSET _cff_expert_charset
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_memcpy
add	esp, 12					
jmp	$LN21@cff_charse
cmp	DWORD PTR _num_glyphs$[ebp], 87		
jbe	SHORT $LN11@cff_charse
push	OFFSET $SG10731
call	_FT_Message
add	esp, 4
push	OFFSET $SG10732
push	1013					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$52
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _num_glyphs$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+8], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@cff_charse
jmp	SHORT $Exit$52
mov	edx, DWORD PTR _num_glyphs$[ebp]
shl	edx, 1
push	edx
push	OFFSET _cff_expertsubset_charset
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_memcpy
add	esp, 12					
jmp	SHORT $LN21@cff_charse
push	OFFSET $SG10737
push	1027					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$52
movzx	edx, BYTE PTR _invert$[ebp]
test	edx, edx
je	SHORT $Exit$52
mov	eax, DWORD PTR _memory$[ebp]
push	eax
mov	ecx, DWORD PTR _num_glyphs$[ebp]
push	ecx
mov	edx, DWORD PTR _charset$[ebp]
push	edx
call	_cff_charset_compute_cids
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+8], 0
xor	ecx, ecx
jne	SHORT $LN6@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+12], 0
xor	eax, eax
jne	SHORT $LN3@cff_charse
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx], 0
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+8], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN51@cff_charse
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN50@cff_charse
DD	-12					
DD	4
DD	$LN49@cff_charse
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_charset_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
mov	eax, DWORD PTR _charset$[ebp]
push	eax
call	_cff_charset_free_cids
add	esp, 8
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+8], 0
xor	edx, edx
jne	SHORT $LN3@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+4], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_charset_free_cids PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _charset$[ebp]
mov	DWORD PTR [eax+12], 0
xor	ecx, ecx
jne	SHORT $LN3@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [edx+16], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_charset_compute_cids PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
xor	eax, eax
mov	WORD PTR _max_cid$[ebp], ax
mov	ecx, DWORD PTR _charset$[ebp]
cmp	DWORD PTR [ecx+16], 0
jbe	SHORT $LN9@cff_charse
jmp	$Exit$15
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN8@cff_charse
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _num_glyphs$[ebp]
jae	SHORT $LN6@cff_charse
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _i$[ebp]
movzx	ecx, WORD PTR [edx+eax*2]
movzx	edx, WORD PTR _max_cid$[ebp]
cmp	ecx, edx
jle	SHORT $LN5@cff_charse
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _i$[ebp]
mov	ax, WORD PTR [ecx+edx*2]
mov	WORD PTR _max_cid$[ebp], ax
jmp	SHORT $LN7@cff_charse
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
movzx	edx, WORD PTR _max_cid$[ebp]
add	edx, 1
push	edx
push	0
push	2
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_charse
jmp	SHORT $Exit$15
mov	edx, DWORD PTR _num_glyphs$[ebp]
sub	edx, 1
mov	DWORD PTR _j$[ebp], edx
jmp	SHORT $LN3@cff_charse
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
mov	DWORD PTR _j$[ebp], eax
cmp	DWORD PTR _j$[ebp], 0
jl	SHORT $LN1@cff_charse
mov	ecx, DWORD PTR _charset$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _j$[ebp]
movzx	ecx, WORD PTR [edx+eax*2]
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	dx, WORD PTR _j$[ebp]
mov	WORD PTR [eax+ecx*2], dx
jmp	SHORT $LN2@cff_charse
movzx	eax, WORD PTR _max_cid$[ebp]
mov	ecx, DWORD PTR _charset$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR _num_glyphs$[ebp]
mov	DWORD PTR [edx+20], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@cff_charse
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN13@cff_charse
DD	-8					
DD	4
DD	$LN12@cff_charse
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_CFF_Load_FD_Select PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN13@CFF_Load_F
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
mov	BYTE PTR _format$[ebp], al
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@CFF_Load_F
jmp	$Exit$20
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	dl, BYTE PTR _format$[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [eax+20], 0
mov	cl, BYTE PTR _format$[ebp]
mov	BYTE PTR tv75[ebp], cl
cmp	BYTE PTR tv75[ebp], 0
je	SHORT $LN10@CFF_Load_F
cmp	BYTE PTR tv75[ebp], 3
je	SHORT $LN9@CFF_Load_F
jmp	$LN1@CFF_Load_F
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR _num_glyphs$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $Load_Data$21
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadUShort
add	esp, 8
movzx	eax, ax
mov	DWORD PTR _num_ranges$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@CFF_Load_F
jmp	$Exit$20
cmp	DWORD PTR _num_ranges$[ebp], 0
jne	SHORT $LN7@CFF_Load_F
mov	ecx, 4
imul	edx, ecx, 48
cmp	DWORD PTR _ft_trace_levels[edx], 0
jl	SHORT $LN5@CFF_Load_F
push	OFFSET $SG10549
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN6@CFF_Load_F
push	OFFSET $SG10550
push	695					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$20
imul	ecx, DWORD PTR _num_ranges$[ebp], 3
add	ecx, 2
mov	edx, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _fdselect$[ebp]
add	eax, 8
push	eax
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@CFF_Load_F
jmp	SHORT $Exit$20
jmp	SHORT $Exit$20
push	OFFSET $SG10555
push	707					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@CFF_Load_F
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN18@CFF_Load_F
DD	-8					
DD	4
DD	$LN17@CFF_Load_F
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_CFF_Done_FD_Select PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _fdselect$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@CFF_Done_F
mov	ecx, DWORD PTR _fdselect$[ebp]
add	ecx, 8
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	eax, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	BYTE PTR [ecx], 0
mov	edx, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [edx+4], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_index_get_pointers PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _memory$[ebp], edx
mov	DWORD PTR _t$[ebp], 0
mov	DWORD PTR _new_bytes$[ebp], 0
mov	eax, DWORD PTR _table$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+24], 0
jne	SHORT $LN21@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
push	edx
call	_cff_index_load_offsets
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@cff_index_
jmp	$Exit$27
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax+8], 0
jbe	$Exit$27
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 1
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _t$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$27
cmp	DWORD PTR _pool$[ebp], 0
je	SHORT $LN18@cff_index_
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _idx$[ebp]
add	ecx, DWORD PTR [edx+8]
push	ecx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _new_bytes$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$27
mov	DWORD PTR _extra$3[ebp], 0
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _org_bytes$2[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR [eax+ecx]
sub	ecx, 1
mov	DWORD PTR _cur_offset$4[ebp], ecx
je	SHORT $LN17@cff_index_
mov	edx, 4
imul	eax, edx, 48
cmp	DWORD PTR _ft_trace_levels[eax], 0
jl	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _cur_offset$4[ebp]
push	ecx
push	OFFSET $SG10409
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN16@cff_index_
mov	DWORD PTR _cur_offset$4[ebp], 0
cmp	DWORD PTR _pool$[ebp], 0
jne	SHORT $LN12@cff_index_
mov	eax, DWORD PTR _org_bytes$2[ebp]
add	eax, DWORD PTR _cur_offset$4[ebp]
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	SHORT $LN11@cff_index_
mov	edx, DWORD PTR _new_bytes$[ebp]
add	edx, DWORD PTR _cur_offset$4[ebp]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _t$[ebp]
mov	DWORD PTR [eax+ecx], edx
mov	DWORD PTR _n$5[ebp], 1
jmp	SHORT $LN10@cff_index_
mov	ecx, DWORD PTR _n$5[ebp]
add	ecx, 1
mov	DWORD PTR _n$5[ebp], ecx
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _n$5[ebp]
cmp	eax, DWORD PTR [edx+8]
ja	$LN8@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
sub	ecx, 1
mov	DWORD PTR _next_offset$1[ebp], ecx
mov	edx, DWORD PTR _next_offset$1[ebp]
cmp	edx, DWORD PTR _cur_offset$4[ebp]
jae	SHORT $LN7@cff_index_
mov	eax, DWORD PTR _cur_offset$4[ebp]
mov	DWORD PTR _next_offset$1[ebp], eax
jmp	SHORT $LN6@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _next_offset$1[ebp]
cmp	edx, DWORD PTR [ecx+20]
jbe	SHORT $LN6@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _next_offset$1[ebp], ecx
cmp	DWORD PTR _pool$[ebp], 0
jne	SHORT $LN4@cff_index_
mov	edx, DWORD PTR _org_bytes$2[ebp]
add	edx, DWORD PTR _next_offset$1[ebp]
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN3@cff_index_
mov	edx, DWORD PTR _new_bytes$[ebp]
add	edx, DWORD PTR _next_offset$1[ebp]
add	edx, DWORD PTR _extra$3[ebp]
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
mov	edx, DWORD PTR _next_offset$1[ebp]
cmp	edx, DWORD PTR _cur_offset$4[ebp]
je	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _n$5[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	edx, DWORD PTR _n$5[ebp]
mov	esi, DWORD PTR _t$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
sub	eax, DWORD PTR [esi+edx*4-4]
push	eax
mov	ecx, DWORD PTR _org_bytes$2[ebp]
add	ecx, DWORD PTR _cur_offset$4[ebp]
push	ecx
mov	edx, DWORD PTR _n$5[ebp]
mov	eax, DWORD PTR _t$[ebp]
mov	ecx, DWORD PTR [eax+edx*4-4]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _n$5[ebp]
mov	edx, DWORD PTR _t$[ebp]
mov	ecx, DWORD PTR [edx+ecx*4]
mov	BYTE PTR [eax+ecx], 0
mov	edx, DWORD PTR _n$5[ebp]
mov	eax, DWORD PTR _t$[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
add	ecx, 1
mov	edx, DWORD PTR _n$5[ebp]
mov	eax, DWORD PTR _t$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
mov	ecx, DWORD PTR _extra$3[ebp]
add	ecx, 1
mov	DWORD PTR _extra$3[ebp], ecx
mov	edx, DWORD PTR _next_offset$1[ebp]
mov	DWORD PTR _cur_offset$4[ebp], edx
jmp	$LN9@cff_index_
mov	eax, DWORD PTR _table$[ebp]
mov	ecx, DWORD PTR _t$[ebp]
mov	DWORD PTR [eax], ecx
cmp	DWORD PTR _pool$[ebp], 0
je	SHORT $Exit$27
mov	edx, DWORD PTR _pool$[ebp]
mov	eax, DWORD PTR _new_bytes$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN25@cff_index_
DD	-8					
DD	4
DD	$LN24@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_load_offsets PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+8], 0
jbe	$Exit$31
mov	edx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [edx+24], 0
jne	$Exit$31
mov	eax, DWORD PTR _idx$[ebp]
mov	cl, BYTE PTR [eax+12]
mov	BYTE PTR _offsize$5[ebp], cl
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 1
movzx	ecx, BYTE PTR _offsize$5[ebp]
imul	eax, ecx
mov	DWORD PTR _data_size$4[ebp], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 1
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+24], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN23@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+4]
add	eax, 3
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN23@cff_index_
mov	edx, DWORD PTR _data_size$4[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@cff_index_
jmp	$Exit$31
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _p$3[ebp]
add	edx, DWORD PTR _data_size$4[ebp]
mov	DWORD PTR _p_end$2[ebp], edx
mov	al, BYTE PTR _offsize$5[ebp]
mov	BYTE PTR tv132[ebp], al
cmp	BYTE PTR tv132[ebp], 1
je	SHORT $LN20@cff_index_
cmp	BYTE PTR tv132[ebp], 2
je	SHORT $LN16@cff_index_
cmp	BYTE PTR tv132[ebp], 3
je	$LN12@cff_index_
jmp	$LN8@cff_index_
jmp	SHORT $LN19@cff_index_
mov	ecx, DWORD PTR _p$3[ebp]
add	ecx, 1
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _poff$1[ebp]
add	edx, 4
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _p$3[ebp]
cmp	eax, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN17@cff_index_
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [eax+edx]
mov	eax, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	SHORT $LN18@cff_index_
jmp	$LN21@cff_index_
jmp	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _p$3[ebp]
add	ecx, 2
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _poff$1[ebp]
add	edx, 4
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _p$3[ebp]
cmp	eax, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN13@cff_index_
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	ecx, BYTE PTR [eax+edx]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [eax+edx]
or	ecx, edx
mov	eax, 4
imul	edx, eax, 0
movzx	eax, cx
mov	ecx, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	SHORT $LN14@cff_index_
jmp	$LN21@cff_index_
jmp	SHORT $LN11@cff_index_
mov	edx, DWORD PTR _p$3[ebp]
add	edx, 3
mov	DWORD PTR _p$3[ebp], edx
mov	eax, DWORD PTR _poff$1[ebp]
add	eax, 4
mov	DWORD PTR _poff$1[ebp], eax
mov	ecx, DWORD PTR _p$3[ebp]
cmp	ecx, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN9@cff_index_
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [ecx+eax]
shl	edx, 16					
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$3[ebp]
movzx	eax, BYTE PTR [ecx+eax]
shl	eax, 8
or	edx, eax
mov	ecx, 1
shl	ecx, 1
mov	eax, DWORD PTR _p$3[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
or	edx, ecx
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	SHORT $LN10@cff_index_
jmp	SHORT $LN21@cff_index_
jmp	SHORT $LN7@cff_index_
mov	ecx, DWORD PTR _p$3[ebp]
add	ecx, 4
mov	DWORD PTR _p$3[ebp], ecx
mov	edx, DWORD PTR _poff$1[ebp]
add	edx, 4
mov	DWORD PTR _poff$1[ebp], edx
mov	eax, DWORD PTR _p$3[ebp]
cmp	eax, DWORD PTR _p_end$2[ebp]
jae	SHORT $LN21@cff_index_
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	ecx, BYTE PTR [eax+edx]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$3[ebp]
movzx	edx, BYTE PTR [eax+edx]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$3[ebp]
movzx	eax, BYTE PTR [edx+eax]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _p$3[ebp]
movzx	eax, BYTE PTR [edx+eax]
or	ecx, eax
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _poff$1[ebp]
mov	DWORD PTR [edx+eax], ecx
jmp	SHORT $LN6@cff_index_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+24], 0
xor	edx, edx
jne	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN29@cff_index_
DD	-8					
DD	4
DD	$LN28@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_done PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _stream$2[ebp], edx
mov	eax, DWORD PTR _stream$2[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$1[ebp], ecx
mov	edx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [edx+28], 0
je	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
add	eax, 28					
push	eax
mov	ecx, DWORD PTR _stream$2[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [edx+24], 0
xor	eax, eax
jne	SHORT $LN3@cff_index_
push	32					
push	0
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_memset
add	esp, 12					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_index_init PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
push	32					
push	0
mov	edx, DWORD PTR _idx$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+4], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _count$[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
jne	$Exit$21
movzx	ecx, WORD PTR _count$[ebp]
test	ecx, ecx
jle	$Exit$21
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReadChar
add	esp, 8
mov	BYTE PTR _offsize$2[ebp], al
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@cff_index_
jmp	$Exit$21
movzx	ecx, BYTE PTR _offsize$2[ebp]
cmp	ecx, 1
jl	SHORT $LN12@cff_index_
movzx	edx, BYTE PTR _offsize$2[ebp]
cmp	edx, 4
jle	SHORT $LN13@cff_index_
push	OFFSET $SG10275
push	253					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$21
movzx	eax, WORD PTR _count$[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _idx$[ebp]
mov	al, BYTE PTR _offsize$2[ebp]
mov	BYTE PTR [edx+12], al
movzx	ecx, WORD PTR _count$[ebp]
add	ecx, 1
movzx	edx, BYTE PTR _offsize$2[ebp]
imul	ecx, edx
mov	DWORD PTR _size$1[ebp], ecx
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _size$1[ebp]
lea	eax, DWORD PTR [ecx+edx+3]
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+16], eax
movzx	edx, BYTE PTR _offsize$2[ebp]
mov	eax, DWORD PTR _size$1[ebp]
sub	eax, edx
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@cff_index_
jmp	$Exit$21
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _idx$[ebp]
push	eax
call	_cff_index_read_offset
add	esp, 8
mov	DWORD PTR _size$1[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@cff_index_
jmp	SHORT $Exit$21
cmp	DWORD PTR _size$1[ebp], 0
jne	SHORT $LN9@cff_index_
push	OFFSET $SG10281
push	272					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$21
mov	ecx, DWORD PTR _size$1[ebp]
sub	ecx, 1
mov	DWORD PTR _size$1[ebp], ecx
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _size$1[ebp]
mov	DWORD PTR [edx+20], eax
movzx	ecx, BYTE PTR _load$[ebp]
test	ecx, ecx
je	SHORT $LN8@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
add	edx, 28					
push	edx
mov	eax, DWORD PTR _size$1[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@cff_index_
jmp	SHORT $Exit$21
jmp	SHORT $Exit$21
mov	edx, DWORD PTR _size$1[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+24], 0
xor	edx, edx
jne	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN19@cff_index_
DD	-8					
DD	4
DD	$LN18@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_read_offset PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _stream$[ebp], ecx
mov	DWORD PTR _result$[ebp], 0
mov	edx, DWORD PTR _idx$[ebp]
movzx	eax, BYTE PTR [edx+12]
push	eax
lea	ecx, DWORD PTR _tmp$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@cff_index_
mov	DWORD PTR _nn$1[ebp], 0
jmp	SHORT $LN3@cff_index_
mov	eax, DWORD PTR _nn$1[ebp]
add	eax, 1
mov	DWORD PTR _nn$1[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
movzx	edx, BYTE PTR [ecx+12]
cmp	DWORD PTR _nn$1[ebp], edx
jge	SHORT $LN4@cff_index_
mov	eax, DWORD PTR _result$[ebp]
shl	eax, 8
mov	ecx, DWORD PTR _nn$1[ebp]
movzx	edx, BYTE PTR _tmp$[ebp+ecx]
or	eax, edx
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $LN2@cff_index_
mov	eax, DWORD PTR _errorp$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN8@cff_index_
DD	-16					
DD	4
DD	$LN7@cff_index_
DB	116					
DB	109					
DB	112					
DB	0
ENDP
_cff_parse_cid_ros PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	DWORD PTR _data$[ebp], edx
mov	DWORD PTR _error$[ebp], 161		
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 28					
mov	ecx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [ecx+404], eax
jb	$LN15@cff_parse_
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR tv73[ebp]
push	ecx
call	_cff_parse_num
add	esp, 4
mov	edx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [edx+132], eax
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR tv78[ebp]
push	edx
call	_cff_parse_num
add	esp, 4
mov	ecx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [ecx+136], eax
mov	edx, DWORD PTR _data$[ebp]
mov	eax, DWORD PTR [edx]
movzx	ecx, BYTE PTR [eax]
cmp	ecx, 30					
jne	SHORT $LN14@cff_parse_
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN12@cff_parse_
push	OFFSET $SG9748
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN13@cff_parse_
mov	edx, DWORD PTR _data$[ebp]
push	edx
call	_cff_parse_num
add	esp, 4
mov	ecx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [ecx+140], eax
mov	edx, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [edx+140], 0
jge	SHORT $LN9@cff_parse_
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN7@cff_parse_
mov	edx, DWORD PTR _dict$[ebp]
mov	eax, DWORD PTR [edx+140]
push	eax
push	OFFSET $SG9754
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN8@cff_parse_
mov	DWORD PTR _error$[ebp], 0
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cff_parse_
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR [ecx+140]
push	edx
mov	eax, DWORD PTR _dict$[ebp]
mov	ecx, DWORD PTR [eax+136]
push	ecx
mov	edx, DWORD PTR _dict$[ebp]
mov	eax, DWORD PTR [edx+132]
push	eax
push	OFFSET $SG9759
call	_FT_Message
add	esp, 16					
xor	ecx, ecx
jne	SHORT $LN4@cff_parse_
mov	eax, DWORD PTR _error$[ebp]
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_private_dict PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	DWORD PTR _data$[ebp], edx
mov	DWORD PTR _error$[ebp], 161		
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 24					
mov	ecx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [ecx+404], eax
jb	SHORT $LN5@cff_parse_
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR tv73[ebp]
push	ecx
call	_cff_parse_num
add	esp, 4
mov	edx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [edx+120], eax
mov	eax, DWORD PTR _data$[ebp]
push	eax
call	_cff_parse_num
add	esp, 4
mov	ecx, DWORD PTR _dict$[ebp]
mov	DWORD PTR [ecx+116], eax
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cff_parse_
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR [ecx+116]
push	edx
mov	eax, DWORD PTR _dict$[ebp]
mov	ecx, DWORD PTR [eax+120]
push	ecx
push	OFFSET $SG9731
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@cff_parse_
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_font_bbox PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _dict$[ebp]
add	edx, 84					
mov	DWORD PTR _bbox$[ebp], edx
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	DWORD PTR _data$[ebp], eax
mov	DWORD PTR _error$[ebp], 161		
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 32					
mov	edx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [edx+404], ecx
jb	$LN5@cff_parse_
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv75[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR tv75[ebp]
push	edx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	ecx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv82[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR tv82[ebp]
push	ecx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	edx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv89[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
mov	edx, DWORD PTR tv89[ebp]
push	edx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	ecx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _data$[ebp]
push	edx
call	_cff_parse_fixed
add	esp, 4
push	eax
call	_FT_RoundFix
add	esp, 4
mov	ecx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _error$[ebp], 0
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@cff_parse_
mov	ecx, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [ecx+12]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
mov	edx, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [edx+8]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
mov	eax, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [eax+4]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
mov	ecx, DWORD PTR _bbox$[ebp]
mov	eax, DWORD PTR [ecx]
cdq
and	edx, 65535				
add	eax, edx
sar	eax, 16					
push	eax
push	OFFSET $SG9717
call	_FT_Message
add	esp, 20					
xor	edx, edx
jne	SHORT $LN4@cff_parse_
mov	eax, DWORD PTR _error$[ebp]
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_font_matrix PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	DWORD PTR _dict$[ebp], ecx
mov	edx, DWORD PTR _dict$[ebp]
add	edx, 48					
mov	DWORD PTR _matrix$[ebp], edx
mov	eax, DWORD PTR _dict$[ebp]
add	eax, 72					
mov	DWORD PTR _offset$[ebp], eax
mov	ecx, DWORD PTR _dict$[ebp]
add	ecx, 68					
mov	DWORD PTR _upm$[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	DWORD PTR _data$[ebp], edx
mov	DWORD PTR _error$[ebp], 161		
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 40					
mov	ecx, DWORD PTR _parser$[ebp]
cmp	DWORD PTR [ecx+404], eax
jb	$Exit$17
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _dict$[ebp]
mov	BYTE PTR [edx+64], 1
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR _data$[ebp]
add	ecx, 4
mov	DWORD PTR _data$[ebp], ecx
lea	edx, DWORD PTR _scaling$1[ebp]
push	edx
mov	eax, DWORD PTR tv78[ebp]
push	eax
call	_cff_parse_fixed_dynamic
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _scaling$1[ebp]
neg	edx
mov	DWORD PTR _scaling$1[ebp], edx
js	SHORT $LN9@cff_parse_
cmp	DWORD PTR _scaling$1[ebp], 9
jle	SHORT $LN10@cff_parse_
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN5@cff_parse_
mov	edx, DWORD PTR _scaling$1[ebp]
push	edx
push	OFFSET $SG9690
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN9@cff_parse_
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx], 65536			
mov	edx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+12], 65536		
mov	edx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _offset$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _upm$[ebp]
mov	DWORD PTR [ecx], 1
jmp	$Exit$17
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv131[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv131[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv137[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv137[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv143[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv143[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _matrix$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR tv149[ebp], edx
mov	eax, DWORD PTR _data$[ebp]
add	eax, 4
mov	DWORD PTR _data$[ebp], eax
mov	ecx, DWORD PTR _scaling$1[ebp]
push	ecx
mov	edx, DWORD PTR tv149[ebp]
push	edx
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _scaling$1[ebp]
push	edx
mov	eax, DWORD PTR _data$[ebp]
push	eax
call	_cff_parse_fixed_scaled
add	esp, 8
mov	ecx, DWORD PTR _offset$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _upm$[ebp]
mov	eax, DWORD PTR _scaling$1[ebp]
mov	ecx, DWORD PTR _power_tens[eax*4]
mov	DWORD PTR [edx], ecx
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	$LN1@cff_parse_
mov	ecx, DWORD PTR _offset$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+4]
mov	edx, DWORD PTR _upm$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv258[ebp], eax
cvtsi2sd xmm1, DWORD PTR tv258[ebp]
mov	ecx, DWORD PTR tv258[ebp]
shr	ecx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _offset$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx]
mov	eax, DWORD PTR _upm$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv265[ebp], ecx
cvtsi2sd xmm1, DWORD PTR tv265[ebp]
mov	edx, DWORD PTR tv265[ebp]
shr	edx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax+12]
mov	ecx, DWORD PTR _upm$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR tv272[ebp], edx
cvtsi2sd xmm1, DWORD PTR tv272[ebp]
mov	eax, DWORD PTR tv272[ebp]
shr	eax, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _upm$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv279[ebp], eax
cvtsi2sd xmm1, DWORD PTR tv279[ebp]
mov	ecx, DWORD PTR tv279[ebp]
shr	ecx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	edx, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [edx+4]
mov	eax, DWORD PTR _upm$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv286[ebp], ecx
cvtsi2sd xmm1, DWORD PTR tv286[ebp]
mov	edx, DWORD PTR tv286[ebp]
shr	edx, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
mov	eax, DWORD PTR _matrix$[ebp]
cvtsi2sd xmm0, DWORD PTR [eax]
mov	ecx, DWORD PTR _upm$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR tv293[ebp], edx
cvtsi2sd xmm1, DWORD PTR tv293[ebp]
mov	eax, DWORD PTR tv293[ebp]
shr	eax, 31					
addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
divsd	xmm0, xmm1
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG9702
call	_FT_Message
add	esp, 52					
xor	ecx, ecx
jne	$LN4@cff_parse_
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@cff_parse_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN15@cff_parse_
DD	-32					
DD	4
DD	$LN14@cff_parse_
DB	115					
DB	99					
DB	97					
DB	108					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
_cff_parse_fixed_dynamic PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _scaling$[ebp], 0
jne	SHORT $LN13@cff_parse_
push	OFFSET $SG9655
push	468					
push	OFFSET $SG9656
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN14@cff_parse_
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx]
movzx	eax, BYTE PTR [edx]
cmp	eax, 30					
jne	SHORT $LN10@cff_parse_
mov	ecx, DWORD PTR _scaling$[ebp]
push	ecx
push	0
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_cff_parse_real
add	esp, 16					
jmp	$LN15@cff_parse_
jmp	$LN15@cff_parse_
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_cff_parse_integer
add	esp, 8
mov	DWORD PTR _number$2[ebp], eax
cmp	DWORD PTR _number$2[ebp], 32767		
jle	$LN8@cff_parse_
mov	DWORD PTR _integer_length$1[ebp], 5
jmp	SHORT $LN7@cff_parse_
mov	ecx, DWORD PTR _integer_length$1[ebp]
add	ecx, 1
mov	DWORD PTR _integer_length$1[ebp], ecx
cmp	DWORD PTR _integer_length$1[ebp], 10	
jge	SHORT $LN5@cff_parse_
mov	edx, DWORD PTR _integer_length$1[ebp]
mov	eax, DWORD PTR _number$2[ebp]
cmp	eax, DWORD PTR _power_tens[edx*4]
jge	SHORT $LN4@cff_parse_
jmp	SHORT $LN5@cff_parse_
jmp	SHORT $LN6@cff_parse_
mov	ecx, DWORD PTR _integer_length$1[ebp]
mov	eax, DWORD PTR _number$2[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4-20]
cmp	eax, 32767				
jle	SHORT $LN3@cff_parse_
mov	edx, DWORD PTR _integer_length$1[ebp]
sub	edx, 4
mov	eax, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR _integer_length$1[ebp]
mov	edx, DWORD PTR _power_tens[ecx*4-16]
push	edx
mov	eax, DWORD PTR _number$2[ebp]
push	eax
call	_FT_DivFix
add	esp, 8
jmp	SHORT $LN15@cff_parse_
jmp	SHORT $LN2@cff_parse_
mov	ecx, DWORD PTR _integer_length$1[ebp]
sub	ecx, 5
mov	edx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _integer_length$1[ebp]
mov	ecx, DWORD PTR _power_tens[eax*4-20]
push	ecx
mov	edx, DWORD PTR _number$2[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
jmp	SHORT $LN15@cff_parse_
jmp	SHORT $LN15@cff_parse_
mov	eax, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _number$2[ebp]
shl	eax, 16					
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_fixed_scaled PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _scaling$[ebp]
push	eax
mov	ecx, DWORD PTR _d$[ebp]
push	ecx
call	_do_fixed
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_parse_fixed PROC
push	ebp
mov	ebp, esp
push	0
mov	eax, DWORD PTR _d$[ebp]
push	eax
call	_do_fixed
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_do_fixed PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax]
movzx	edx, BYTE PTR [ecx]
cmp	edx, 30					
jne	SHORT $LN10@do_fixed
push	0
mov	eax, DWORD PTR _scaling$[ebp]
push	eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
call	_cff_parse_real
add	esp, 16					
jmp	$LN11@do_fixed
jmp	$LN11@do_fixed
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_cff_parse_integer
add	esp, 8
mov	DWORD PTR _val$1[ebp], eax
cmp	DWORD PTR _scaling$[ebp], 0
je	SHORT $LN8@do_fixed
mov	eax, DWORD PTR _scaling$[ebp]
mov	ecx, DWORD PTR _val$1[ebp]
imul	ecx, DWORD PTR _power_tens[eax*4]
mov	DWORD PTR _val$1[ebp], ecx
cmp	DWORD PTR _val$1[ebp], 32767		
jle	SHORT $LN7@do_fixed
mov	DWORD PTR _val$1[ebp], 2147483647	
jmp	SHORT $Overflow$13
jmp	SHORT $LN6@do_fixed
cmp	DWORD PTR _val$1[ebp], -32767		
jge	SHORT $LN6@do_fixed
mov	DWORD PTR _val$1[ebp], -2147483647	
jmp	SHORT $Overflow$13
mov	eax, DWORD PTR _val$1[ebp]
shl	eax, 16					
jmp	SHORT $LN11@do_fixed
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN3@do_fixed
push	OFFSET $SG9634
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $Overflow$13
mov	eax, DWORD PTR _val$1[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_num PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax]
movzx	edx, BYTE PTR [ecx]
cmp	edx, 30					
jne	SHORT $LN3@cff_parse_
push	0
push	0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _d$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_cff_parse_real
add	esp, 16					
sar	eax, 16					
mov	DWORD PTR tv84[ebp], eax
jmp	SHORT $LN4@cff_parse_
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _d$[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _d$[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
call	_cff_parse_integer
add	esp, 8
mov	DWORD PTR tv84[ebp], eax
mov	eax, DWORD PTR tv84[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_real PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _start$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _sign$[ebp], 0
mov	DWORD PTR _exponent_sign$[ebp], 0
mov	DWORD PTR _have_overflow$[ebp], 0
cmp	DWORD PTR _scaling$[ebp], 0
je	SHORT $LN70@cff_parse_
mov	ecx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [ecx], 0
mov	DWORD PTR _result$[ebp], 0
mov	DWORD PTR _number$[ebp], 0
mov	DWORD PTR _exponent$[ebp], 0
mov	DWORD PTR _exponent_add$[ebp], 0
mov	DWORD PTR _integer_length$[ebp], 0
mov	DWORD PTR _fraction_length$[ebp], 0
mov	DWORD PTR _phase$[ebp], 4
cmp	DWORD PTR _phase$[ebp], 0
je	SHORT $LN67@cff_parse_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jb	SHORT $LN67@cff_parse_
jmp	$Bad$75
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx]
mov	ecx, DWORD PTR _phase$[ebp]
sar	edx, cl
and	edx, 15					
mov	DWORD PTR _nib$[ebp], edx
mov	eax, 4
sub	eax, DWORD PTR _phase$[ebp]
mov	DWORD PTR _phase$[ebp], eax
cmp	DWORD PTR _nib$[ebp], 14		
jne	SHORT $LN65@cff_parse_
mov	DWORD PTR _sign$[ebp], 1
jmp	SHORT $LN64@cff_parse_
cmp	DWORD PTR _nib$[ebp], 9
jbe	SHORT $LN63@cff_parse_
jmp	SHORT $LN68@cff_parse_
jmp	SHORT $LN64@cff_parse_
cmp	DWORD PTR _number$[ebp], 214748364	
jl	SHORT $LN61@cff_parse_
mov	ecx, DWORD PTR _exponent_add$[ebp]
add	ecx, 1
mov	DWORD PTR _exponent_add$[ebp], ecx
jmp	SHORT $LN64@cff_parse_
cmp	DWORD PTR _nib$[ebp], 0
jne	SHORT $LN58@cff_parse_
cmp	DWORD PTR _number$[ebp], 0
je	SHORT $LN64@cff_parse_
mov	edx, DWORD PTR _integer_length$[ebp]
add	edx, 1
mov	DWORD PTR _integer_length$[ebp], edx
imul	eax, DWORD PTR _number$[ebp], 10
add	eax, DWORD PTR _nib$[ebp]
mov	DWORD PTR _number$[ebp], eax
jmp	$LN69@cff_parse_
cmp	DWORD PTR _nib$[ebp], 10		
jne	$LN57@cff_parse_
cmp	DWORD PTR _phase$[ebp], 0
je	SHORT $LN54@cff_parse_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jb	SHORT $LN54@cff_parse_
jmp	$Bad$75
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, DWORD PTR _phase$[ebp]
sar	eax, cl
and	eax, 15					
mov	DWORD PTR _nib$[ebp], eax
mov	ecx, 4
sub	ecx, DWORD PTR _phase$[ebp]
mov	DWORD PTR _phase$[ebp], ecx
cmp	DWORD PTR _nib$[ebp], 10		
jb	SHORT $LN52@cff_parse_
jmp	SHORT $LN57@cff_parse_
cmp	DWORD PTR _nib$[ebp], 0
jne	SHORT $LN51@cff_parse_
cmp	DWORD PTR _number$[ebp], 0
jne	SHORT $LN51@cff_parse_
mov	edx, DWORD PTR _exponent_add$[ebp]
sub	edx, 1
mov	DWORD PTR _exponent_add$[ebp], edx
jmp	SHORT $LN50@cff_parse_
cmp	DWORD PTR _number$[ebp], 214748364	
jge	SHORT $LN50@cff_parse_
cmp	DWORD PTR _fraction_length$[ebp], 9
jge	SHORT $LN50@cff_parse_
mov	eax, DWORD PTR _fraction_length$[ebp]
add	eax, 1
mov	DWORD PTR _fraction_length$[ebp], eax
imul	ecx, DWORD PTR _number$[ebp], 10
add	ecx, DWORD PTR _nib$[ebp]
mov	DWORD PTR _number$[ebp], ecx
jmp	$LN56@cff_parse_
cmp	DWORD PTR _nib$[ebp], 12		
jne	SHORT $LN48@cff_parse_
mov	DWORD PTR _exponent_sign$[ebp], 1
mov	DWORD PTR _nib$[ebp], 11		
cmp	DWORD PTR _nib$[ebp], 11		
jne	SHORT $LN47@cff_parse_
cmp	DWORD PTR _phase$[ebp], 0
je	SHORT $LN44@cff_parse_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jb	SHORT $LN44@cff_parse_
jmp	$Bad$75
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx]
mov	ecx, DWORD PTR _phase$[ebp]
sar	edx, cl
and	edx, 15					
mov	DWORD PTR _nib$[ebp], edx
mov	eax, 4
sub	eax, DWORD PTR _phase$[ebp]
mov	DWORD PTR _phase$[ebp], eax
cmp	DWORD PTR _nib$[ebp], 10		
jb	SHORT $LN42@cff_parse_
jmp	SHORT $LN45@cff_parse_
cmp	DWORD PTR _exponent$[ebp], 1000		
jle	SHORT $LN41@cff_parse_
mov	DWORD PTR _have_overflow$[ebp], 1
jmp	SHORT $LN40@cff_parse_
imul	ecx, DWORD PTR _exponent$[ebp], 10
add	ecx, DWORD PTR _nib$[ebp]
mov	DWORD PTR _exponent$[ebp], ecx
jmp	SHORT $LN46@cff_parse_
cmp	DWORD PTR _exponent_sign$[ebp], 0
je	SHORT $LN47@cff_parse_
mov	edx, DWORD PTR _exponent$[ebp]
neg	edx
mov	DWORD PTR _exponent$[ebp], edx
cmp	DWORD PTR _number$[ebp], 0
jne	SHORT $LN38@cff_parse_
jmp	$Exit$76
cmp	DWORD PTR _have_overflow$[ebp], 0
je	SHORT $LN37@cff_parse_
cmp	DWORD PTR _exponent_sign$[ebp], 0
je	SHORT $LN36@cff_parse_
jmp	$Underflow$77
jmp	SHORT $LN37@cff_parse_
jmp	$Overflow$78
mov	eax, DWORD PTR _power_ten$[ebp]
add	eax, DWORD PTR _exponent_add$[ebp]
add	eax, DWORD PTR _exponent$[ebp]
mov	DWORD PTR _exponent$[ebp], eax
cmp	DWORD PTR _scaling$[ebp], 0
je	$LN34@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
add	ecx, DWORD PTR _integer_length$[ebp]
mov	DWORD PTR _fraction_length$[ebp], ecx
mov	edx, DWORD PTR _exponent$[ebp]
add	edx, DWORD PTR _integer_length$[ebp]
mov	DWORD PTR _exponent$[ebp], edx
cmp	DWORD PTR _fraction_length$[ebp], 5
jg	$LN33@cff_parse_
cmp	DWORD PTR _number$[ebp], 32767		
jle	SHORT $LN32@cff_parse_
push	10					
mov	eax, DWORD PTR _number$[ebp]
push	eax
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
mov	ecx, DWORD PTR _exponent$[ebp]
sub	ecx, DWORD PTR _fraction_length$[ebp]
add	ecx, 1
mov	edx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [edx], ecx
jmp	$LN31@cff_parse_
cmp	DWORD PTR _exponent$[ebp], 0
jle	SHORT $LN30@cff_parse_
cmp	DWORD PTR _exponent$[ebp], 5
jge	SHORT $LN73@cff_parse_
mov	eax, DWORD PTR _exponent$[ebp]
mov	DWORD PTR tv168[ebp], eax
jmp	SHORT $LN74@cff_parse_
mov	DWORD PTR tv168[ebp], 5
mov	ecx, DWORD PTR tv168[ebp]
mov	DWORD PTR _new_fraction_length$2[ebp], ecx
mov	edx, DWORD PTR _new_fraction_length$2[ebp]
sub	edx, DWORD PTR _fraction_length$[ebp]
mov	DWORD PTR _shift$1[ebp], edx
cmp	DWORD PTR _shift$1[ebp], 0
jle	SHORT $LN29@cff_parse_
mov	eax, DWORD PTR _exponent$[ebp]
sub	eax, DWORD PTR _new_fraction_length$2[ebp]
mov	DWORD PTR _exponent$[ebp], eax
mov	ecx, DWORD PTR _shift$1[ebp]
mov	edx, DWORD PTR _number$[ebp]
imul	edx, DWORD PTR _power_tens[ecx*4]
mov	DWORD PTR _number$[ebp], edx
cmp	DWORD PTR _number$[ebp], 32767		
jle	SHORT $LN28@cff_parse_
mov	eax, DWORD PTR _number$[ebp]
cdq
mov	ecx, 10					
idiv	ecx
mov	DWORD PTR _number$[ebp], eax
mov	edx, DWORD PTR _exponent$[ebp]
add	edx, 1
mov	DWORD PTR _exponent$[ebp], edx
jmp	SHORT $LN27@cff_parse_
mov	eax, DWORD PTR _exponent$[ebp]
sub	eax, DWORD PTR _fraction_length$[ebp]
mov	DWORD PTR _exponent$[ebp], eax
jmp	SHORT $LN26@cff_parse_
mov	ecx, DWORD PTR _exponent$[ebp]
sub	ecx, DWORD PTR _fraction_length$[ebp]
mov	DWORD PTR _exponent$[ebp], ecx
mov	edx, DWORD PTR _number$[ebp]
shl	edx, 16					
mov	DWORD PTR _result$[ebp], edx
mov	eax, DWORD PTR _scaling$[ebp]
mov	ecx, DWORD PTR _exponent$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN25@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _number$[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4-20]
cmp	eax, 32767				
jle	SHORT $LN24@cff_parse_
mov	edx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _power_tens[edx*4-16]
push	eax
mov	ecx, DWORD PTR _number$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
mov	edx, DWORD PTR _exponent$[ebp]
sub	edx, 4
mov	eax, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [eax], edx
jmp	SHORT $LN25@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
mov	edx, DWORD PTR _power_tens[ecx*4-20]
push	edx
mov	eax, DWORD PTR _number$[ebp]
push	eax
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
mov	ecx, DWORD PTR _exponent$[ebp]
sub	ecx, 5
mov	edx, DWORD PTR _scaling$[ebp]
mov	DWORD PTR [edx], ecx
jmp	$Exit$76
mov	eax, DWORD PTR _integer_length$[ebp]
add	eax, DWORD PTR _exponent$[ebp]
mov	DWORD PTR _integer_length$[ebp], eax
mov	ecx, DWORD PTR _fraction_length$[ebp]
sub	ecx, DWORD PTR _exponent$[ebp]
mov	DWORD PTR _fraction_length$[ebp], ecx
cmp	DWORD PTR _integer_length$[ebp], 5
jle	SHORT $LN21@cff_parse_
jmp	$Overflow$78
cmp	DWORD PTR _integer_length$[ebp], -5	
jge	SHORT $LN20@cff_parse_
jmp	$Underflow$77
cmp	DWORD PTR _integer_length$[ebp], 0
jge	SHORT $LN19@cff_parse_
mov	ecx, DWORD PTR _integer_length$[ebp]
neg	ecx
mov	eax, DWORD PTR _number$[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4]
mov	DWORD PTR _number$[ebp], eax
mov	edx, DWORD PTR _fraction_length$[ebp]
add	edx, DWORD PTR _integer_length$[ebp]
mov	DWORD PTR _fraction_length$[ebp], edx
cmp	DWORD PTR _fraction_length$[ebp], 10	
jne	SHORT $LN18@cff_parse_
mov	eax, DWORD PTR _number$[ebp]
cdq
mov	ecx, 10					
idiv	ecx
mov	DWORD PTR _number$[ebp], eax
mov	edx, DWORD PTR _fraction_length$[ebp]
sub	edx, 1
mov	DWORD PTR _fraction_length$[ebp], edx
cmp	DWORD PTR _fraction_length$[ebp], 0
jle	SHORT $LN17@cff_parse_
mov	ecx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _number$[ebp]
cdq
idiv	DWORD PTR _power_tens[ecx*4]
cmp	eax, 32767				
jle	SHORT $LN16@cff_parse_
jmp	SHORT $Exit$76
mov	edx, DWORD PTR _fraction_length$[ebp]
mov	eax, DWORD PTR _power_tens[edx*4]
push	eax
mov	ecx, DWORD PTR _number$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
jmp	SHORT $Exit$76
mov	edx, DWORD PTR _fraction_length$[ebp]
neg	edx
mov	eax, DWORD PTR _number$[ebp]
imul	eax, DWORD PTR _power_tens[edx*4]
mov	DWORD PTR _number$[ebp], eax
cmp	DWORD PTR _number$[ebp], 32767		
jle	SHORT $LN14@cff_parse_
jmp	SHORT $Overflow$78
mov	ecx, DWORD PTR _number$[ebp]
shl	ecx, 16					
mov	DWORD PTR _result$[ebp], ecx
cmp	DWORD PTR _sign$[ebp], 0
je	SHORT $LN13@cff_parse_
mov	edx, DWORD PTR _result$[ebp]
neg	edx
mov	DWORD PTR _result$[ebp], edx
mov	eax, DWORD PTR _result$[ebp]
jmp	$LN71@cff_parse_
mov	DWORD PTR _result$[ebp], 2147483647	
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN11@cff_parse_
push	OFFSET $SG9597
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN12@cff_parse_
jmp	SHORT $Exit$76
mov	DWORD PTR _result$[ebp], 0
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN7@cff_parse_
push	OFFSET $SG9602
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN8@cff_parse_
jmp	SHORT $Exit$76
mov	DWORD PTR _result$[ebp], 0
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN3@cff_parse_
push	OFFSET $SG9607
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN4@cff_parse_
jmp	$Exit$76
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parse_integer PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _start$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _v$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _val$[ebp], 0
cmp	DWORD PTR _v$[ebp], 28			
jne	SHORT $LN16@cff_parse_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN15@cff_parse_
jmp	$Bad$19
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax]
or	edx, eax
movsx	ecx, dx
mov	DWORD PTR _val$[ebp], ecx
jmp	$Exit$20
cmp	DWORD PTR _v$[ebp], 29			
jne	SHORT $LN13@cff_parse_
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN12@cff_parse_
jmp	$Bad$19
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx]
or	eax, edx
mov	DWORD PTR _val$[ebp], eax
jmp	$Exit$20
cmp	DWORD PTR _v$[ebp], 247			
jge	SHORT $LN10@cff_parse_
mov	eax, DWORD PTR _v$[ebp]
sub	eax, 139				
mov	DWORD PTR _val$[ebp], eax
jmp	SHORT $Exit$20
cmp	DWORD PTR _v$[ebp], 251			
jge	SHORT $LN8@cff_parse_
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN7@cff_parse_
jmp	SHORT $Bad$19
mov	edx, DWORD PTR _v$[ebp]
sub	edx, 247				
shl	edx, 8
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+ecx]
lea	edx, DWORD PTR [edx+ecx+108]
mov	DWORD PTR _val$[ebp], edx
jmp	SHORT $Exit$20
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN5@cff_parse_
jmp	SHORT $Bad$19
mov	ecx, DWORD PTR _v$[ebp]
sub	ecx, 251				
neg	ecx
shl	ecx, 8
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax]
sub	ecx, eax
sub	ecx, 108				
mov	DWORD PTR _val$[ebp], ecx
mov	eax, DWORD PTR _val$[ebp]
jmp	SHORT $LN17@cff_parse_
mov	DWORD PTR _val$[ebp], 0
mov	ecx, 4
imul	edx, ecx, 50
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN3@cff_parse_
push	OFFSET $SG9498
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN4@cff_parse_
jmp	SHORT $Exit$20
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_interface PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _module_interface$[ebp]
push	eax
push	OFFSET _cff_services
call	_ft_service_list_lookup
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN3@cff_get_in
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN4@cff_get_in
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN2@cff_get_in
xor	eax, eax
jmp	SHORT $LN4@cff_get_in
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN1@cff_get_in
xor	eax, eax
jmp	SHORT $LN4@cff_get_in
push	OFFSET $SG9448
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN6@cff_get_in
mov	esi, esp
mov	ecx, DWORD PTR _module_interface$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+32]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv80[ebp], eax
jmp	SHORT $LN7@cff_get_in
mov	DWORD PTR tv80[ebp], 0
mov	eax, DWORD PTR tv80[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_property_get PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
push	OFFSET $SG9397
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	$LN9@cff_proper
mov	edx, DWORD PTR _driver$[ebp]
add	edx, 36					
mov	DWORD PTR _darken_params$6[ebp], edx
mov	eax, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$5[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [eax+ecx], edx
mov	eax, 4
shl	eax, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [edx+ecx], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
imul	eax, edx, 3
mov	ecx, 4
imul	edx, ecx, 3
mov	ecx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
mov	ecx, 4
shl	ecx, 2
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, 4
imul	edx, ecx, 5
mov	ecx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
mov	ecx, 4
imul	edx, ecx, 6
mov	eax, 4
imul	ecx, eax, 6
mov	eax, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [eax+ecx], edx
mov	eax, 4
imul	ecx, eax, 7
mov	edx, 4
imul	eax, edx, 7
mov	edx, DWORD PTR _val$5[ebp]
mov	esi, DWORD PTR _darken_params$6[ebp]
mov	ecx, DWORD PTR [esi+ecx]
mov	DWORD PTR [edx+eax], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN10@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9403
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN7@cff_proper
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _hinting_engine$4[ebp], ecx
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$3[ebp], edx
mov	eax, DWORD PTR _val$3[ebp]
mov	ecx, DWORD PTR _hinting_engine$4[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN10@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9409
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@cff_proper
mov	eax, DWORD PTR _driver$[ebp]
mov	cl, BYTE PTR [eax+32]
mov	BYTE PTR _no_stem_darkening$2[ebp], cl
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$1[ebp], edx
mov	eax, DWORD PTR _val$1[ebp]
mov	cl, BYTE PTR _no_stem_darkening$2[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN10@cff_proper
mov	edx, 4
imul	eax, edx, 46
cmp	DWORD PTR _ft_trace_levels[eax], 0
jl	SHORT $LN3@cff_proper
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
push	OFFSET $SG9417
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@cff_proper
push	OFFSET $SG9418
push	701					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_property_set PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
push	OFFSET $SG9353
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	$LN13@cff_proper
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _darken_params$11[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x1$10[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _y1$9[ebp], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x2$8[ebp], eax
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _darken_params$11[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y2$7[ebp], ecx
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _darken_params$11[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _x3$6[ebp], ecx
mov	edx, 4
imul	eax, edx, 5
mov	ecx, DWORD PTR _darken_params$11[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _y3$5[ebp], edx
mov	eax, 4
imul	ecx, eax, 6
mov	edx, DWORD PTR _darken_params$11[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _x4$4[ebp], eax
mov	ecx, 4
imul	edx, ecx, 7
mov	eax, DWORD PTR _darken_params$11[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _y4$3[ebp], ecx
cmp	DWORD PTR _x1$10[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _x2$8[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _x3$6[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _x4$4[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y1$9[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y2$7[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y3$5[ebp], 0
jl	SHORT $LN11@cff_proper
cmp	DWORD PTR _y4$3[ebp], 0
jl	SHORT $LN11@cff_proper
mov	edx, DWORD PTR _x1$10[ebp]
cmp	edx, DWORD PTR _x2$8[ebp]
jg	SHORT $LN11@cff_proper
mov	eax, DWORD PTR _x2$8[ebp]
cmp	eax, DWORD PTR _x3$6[ebp]
jg	SHORT $LN11@cff_proper
mov	ecx, DWORD PTR _x3$6[ebp]
cmp	ecx, DWORD PTR _x4$4[ebp]
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y1$9[ebp], 500		
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y2$7[ebp], 500		
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y3$5[ebp], 500		
jg	SHORT $LN11@cff_proper
cmp	DWORD PTR _y4$3[ebp], 500		
jle	SHORT $LN12@cff_proper
push	OFFSET $SG9366
push	609					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN14@cff_proper
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _x1$10[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _y1$9[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
shl	eax, 1
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _x2$8[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
imul	ecx, eax, 3
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR _y2$7[ebp]
mov	DWORD PTR [edx+ecx+36], eax
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR _x3$6[ebp]
mov	DWORD PTR [edx+ecx+36], eax
mov	ecx, 4
imul	edx, ecx, 5
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR _y3$5[ebp]
mov	DWORD PTR [eax+edx+36], ecx
mov	edx, 4
imul	eax, edx, 6
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _x4$4[ebp]
mov	DWORD PTR [ecx+eax+36], edx
mov	eax, 4
imul	ecx, eax, 7
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR _y4$3[ebp]
mov	DWORD PTR [edx+ecx+36], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN14@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9369
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN9@cff_proper
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _hinting_engine$2[ebp], edx
mov	eax, DWORD PTR _hinting_engine$2[ebp]
cmp	DWORD PTR [eax], 1
je	SHORT $LN8@cff_proper
mov	DWORD PTR _error$[ebp], 7
jmp	SHORT $LN7@cff_proper
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _hinting_engine$2[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx+28], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN14@cff_proper
jmp	SHORT $LN4@cff_proper
push	OFFSET $SG9376
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@cff_proper
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _no_stem_darkening$1[ebp], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR _no_stem_darkening$1[ebp]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR [eax+32], dl
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN14@cff_proper
mov	eax, 4
imul	ecx, eax, 46
cmp	DWORD PTR _ft_trace_levels[ecx], 0
jl	SHORT $LN3@cff_proper
mov	edx, DWORD PTR _property_name$[ebp]
push	edx
push	OFFSET $SG9383
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN4@cff_proper
push	OFFSET $SG9384
push	648					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
pop	edi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_cid_from_glyph_index PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
cmp	DWORD PTR _cff$[ebp], 0
je	SHORT $Fail$7
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1324				
mov	DWORD PTR _dict$1[ebp], edx
mov	eax, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [eax+132], 65535		
jne	SHORT $LN3@cff_get_ci
push	OFFSET $SG9332
push	549					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$7
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR _glyph_index$[ebp]
cmp	edx, DWORD PTR [ecx+12]
jbe	SHORT $LN2@cff_get_ci
push	OFFSET $SG9335
push	555					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$7
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+1160]
mov	edx, DWORD PTR _glyph_index$[ebp]
movzx	eax, WORD PTR [ecx+edx*2]
mov	DWORD PTR _c$2[ebp], eax
cmp	DWORD PTR _cid$[ebp], 0
je	SHORT $Fail$7
mov	ecx, DWORD PTR _cid$[ebp]
mov	edx, DWORD PTR _c$2[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_is_cid PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _is_cid$[ebp]
mov	BYTE PTR [edx], 0
cmp	DWORD PTR _cff$[ebp], 0
je	SHORT $LN2@cff_get_is
mov	eax, DWORD PTR _cff$[ebp]
add	eax, 1324				
mov	DWORD PTR _dict$1[ebp], eax
mov	ecx, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [ecx+132], 65535		
je	SHORT $LN2@cff_get_is
mov	edx, DWORD PTR _is_cid$[ebp]
mov	BYTE PTR [edx], 1
mov	eax, DWORD PTR _error$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_ros PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
cmp	DWORD PTR _cff$[ebp], 0
je	$Fail$16
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1324				
mov	DWORD PTR _dict$1[ebp], edx
mov	eax, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [eax+132], 65535		
jne	SHORT $LN12@cff_get_ro
push	OFFSET $SG9288
push	467					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail$16
cmp	DWORD PTR _registry$[ebp], 0
je	SHORT $LN11@cff_get_ro
mov	ecx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [ecx+2964], 0
jne	SHORT $LN10@cff_get_ro
mov	edx, DWORD PTR _dict$1[ebp]
mov	eax, DWORD PTR [edx+132]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _cff$[ebp]
mov	DWORD PTR [edx+2964], eax
mov	eax, DWORD PTR _registry$[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+2964]
mov	DWORD PTR [eax], edx
cmp	DWORD PTR _ordering$[ebp], 0
je	SHORT $LN9@cff_get_ro
mov	eax, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [eax+2968], 0
jne	SHORT $LN8@cff_get_ro
mov	ecx, DWORD PTR _dict$1[ebp]
mov	edx, DWORD PTR [ecx+136]
push	edx
mov	eax, DWORD PTR _cff$[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	ecx, DWORD PTR _cff$[ebp]
mov	DWORD PTR [ecx+2968], eax
mov	edx, DWORD PTR _ordering$[ebp]
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+2968]
mov	DWORD PTR [edx], ecx
cmp	DWORD PTR _supplement$[ebp], 0
je	SHORT $Fail$16
mov	edx, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [edx+140], -2147483648	
jl	SHORT $LN4@cff_get_ro
mov	eax, DWORD PTR _dict$1[ebp]
cmp	DWORD PTR [eax+140], 2147483647		
jle	SHORT $LN6@cff_get_ro
mov	ecx, 4
imul	edx, ecx, 46
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN3@cff_get_ro
mov	eax, DWORD PTR _dict$1[ebp]
mov	ecx, DWORD PTR [eax+140]
push	ecx
push	OFFSET $SG9303
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@cff_get_ro
mov	eax, DWORD PTR _supplement$[ebp]
mov	ecx, DWORD PTR _dict$1[ebp]
mov	edx, DWORD PTR [ecx+140]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_cmap_info PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _charmap$[ebp]
mov	DWORD PTR _cmap$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _cmap$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
mov	eax, DWORD PTR _cmap_info$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _cmap_info$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _cmap$[ebp]
cmp	DWORD PTR [edx+12], OFFSET _cff_cmap_encoding_class_rec
je	SHORT $LN2@cff_get_cm
mov	eax, DWORD PTR _cmap$[ebp]
cmp	DWORD PTR [eax+12], OFFSET _cff_cmap_unicode_class_rec
je	SHORT $LN2@cff_get_cm
push	OFFSET $SG9265
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _sfnt$2[ebp], eax
push	OFFSET $SG9268
mov	edx, DWORD PTR _sfnt$2[ebp]
push	edx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR _service$1[ebp], eax
cmp	DWORD PTR _service$1[ebp], 0
je	SHORT $LN2@cff_get_cm
mov	eax, DWORD PTR _service$1[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@cff_get_cm
mov	esi, esp
mov	ecx, DWORD PTR _cmap_info$[ebp]
push	ecx
mov	edx, DWORD PTR _charmap$[ebp]
push	edx
mov	eax, DWORD PTR _service$1[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_ps_name PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1304]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_ps_get_font_info PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _cff$[ebp], 0
je	$LN3@cff_ps_get
mov	edx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [edx+2960], 0
jne	$LN3@cff_ps_get
mov	eax, DWORD PTR _cff$[ebp]
add	eax, 1324				
mov	DWORD PTR _dict$3[ebp], eax
mov	DWORD PTR _font_info$2[ebp], 0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$1[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	32					
mov	ecx, DWORD PTR _memory$1[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _font_info$2[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cff_ps_get
jmp	$Fail$9
mov	edx, DWORD PTR _dict$3[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _dict$3[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
mov	ecx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _dict$3[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _dict$3[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
mov	ecx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _dict$3[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	edx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+20], edx
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	dl, BYTE PTR [ecx+24]
mov	BYTE PTR [eax+24], dl
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	dx, WORD PTR [ecx+32]
mov	WORD PTR [eax+26], dx
mov	eax, DWORD PTR _font_info$2[ebp]
mov	ecx, DWORD PTR _dict$3[ebp]
mov	dx, WORD PTR [ecx+36]
mov	WORD PTR [eax+28], dx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR _font_info$2[ebp]
mov	DWORD PTR [eax+2960], ecx
cmp	DWORD PTR _cff$[ebp], 0
je	SHORT $Fail$9
mov	edx, DWORD PTR _cff$[ebp]
mov	ecx, 8
mov	esi, DWORD PTR [edx+2960]
mov	edi, DWORD PTR _afont_info$[ebp]
rep movsd
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@cff_ps_get
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN7@cff_ps_get
DD	-12					
DD	4
DD	$LN6@cff_ps_get
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_ps_has_glyph_names PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 512				
jle	SHORT $LN3@cff_ps_has
mov	DWORD PTR tv67[ebp], 1
jmp	SHORT $LN4@cff_ps_has
mov	DWORD PTR tv67[ebp], 0
mov	eax, DWORD PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_name_index PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1152				
mov	DWORD PTR _charset$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	DWORD PTR _module$2[ebp], ecx
push	OFFSET $SG9194
mov	edx, DWORD PTR _module$2[ebp]
push	edx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR __tmp_$1[ebp], eax
mov	eax, DWORD PTR __tmp_$1[ebp]
mov	DWORD PTR _psnames$[ebp], eax
xor	ecx, ecx
jne	SHORT $LN11@cff_get_na
cmp	DWORD PTR _psnames$[ebp], 0
jne	SHORT $LN8@cff_get_na
xor	eax, eax
jmp	$LN12@cff_get_na
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN7@cff_get_na
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jae	SHORT $LN5@cff_get_na
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _i$[ebp]
mov	dx, WORD PTR [eax+ecx*2]
mov	WORD PTR _sid$[ebp], dx
movzx	eax, WORD PTR _sid$[ebp]
cmp	eax, 390				
jle	SHORT $LN4@cff_get_na
movzx	ecx, WORD PTR _sid$[ebp]
sub	ecx, 391				
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
push	edx
call	_cff_index_get_string
add	esp, 8
mov	DWORD PTR _name$[ebp], eax
jmp	SHORT $LN3@cff_get_na
movzx	eax, WORD PTR _sid$[ebp]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _psnames$[ebp]
mov	edx, DWORD PTR [ecx+20]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _name$[ebp], eax
cmp	DWORD PTR _name$[ebp], 0
jne	SHORT $LN2@cff_get_na
jmp	SHORT $LN6@cff_get_na
mov	eax, DWORD PTR _name$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN1@cff_get_na
mov	eax, DWORD PTR _i$[ebp]
jmp	SHORT $LN12@cff_get_na
jmp	$LN6@cff_get_na
xor	eax, eax
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_glyph_name PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _font$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+2956], 0
jne	SHORT $LN2@cff_get_gl
push	OFFSET $SG9167
call	_FT_Message
add	esp, 4
push	OFFSET $SG9168
push	246					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$5
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+1160]
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	ax, WORD PTR [ecx+edx*2]
mov	WORD PTR _sid$[ebp], ax
movzx	ecx, WORD PTR _sid$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _gname$[ebp], eax
cmp	DWORD PTR _gname$[ebp], 0
je	SHORT $LN1@cff_get_gl
mov	eax, DWORD PTR _buffer_max$[ebp]
push	eax
mov	ecx, DWORD PTR _gname$[ebp]
push	ecx
mov	edx, DWORD PTR _buffer$[ebp]
push	edx
call	_ft_mem_strcpyn
add	esp, 12					
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_advances PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _slot$[ebp], ecx
mov	edx, DWORD PTR _flags$[ebp]
or	edx, 256				
mov	DWORD PTR _flags$[ebp], edx
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@cff_get_ad
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _count$[ebp]
jae	SHORT $LN2@cff_get_ad
mov	edx, DWORD PTR _flags$[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+88]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
call	_cff_glyph_load
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@cff_get_ad
jmp	SHORT $LN2@cff_get_ad
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 16					
je	SHORT $LN7@cff_get_ad
mov	edx, DWORD PTR _slot$[ebp]
mov	eax, DWORD PTR [edx+60]
mov	DWORD PTR tv82[ebp], eax
jmp	SHORT $LN8@cff_get_ad
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+56]
mov	DWORD PTR tv82[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN3@cff_get_ad
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_glyph_load PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cffslot$[ebp]
mov	DWORD PTR _slot$[ebp], eax
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR _size$[ebp], ecx
cmp	DWORD PTR _slot$[ebp], 0
jne	SHORT $LN8@cff_glyph_
push	OFFSET $SG9119
push	165					
push	37					
call	_FT_Throw
add	esp, 12					
or	eax, 37					
jmp	$LN10@cff_glyph_
mov	edx, 4
imul	eax, edx, 46
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN7@cff_glyph_
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
push	OFFSET $SG9124
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN8@cff_glyph_
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN4@cff_glyph_
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 3
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 1
je	SHORT $LN3@cff_glyph_
mov	DWORD PTR _size$[ebp], 0
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN2@cff_glyph_
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR _cffslot$[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN2@cff_glyph_
push	OFFSET $SG9130
push	181					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	SHORT $LN10@cff_glyph_
mov	edx, DWORD PTR _load_flags$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
mov	edx, DWORD PTR _slot$[ebp]
push	edx
call	_cff_slot_load
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR _sfnt$[ebp], edx
mov	eax, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx+4], 0
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN1@cff_get_ke
mov	esi, esp
mov	edx, DWORD PTR _right_glyph$[ebp]
push	edx
mov	eax, DWORD PTR _left_glyph$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+84]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx], eax
xor	eax, eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_parser_run PROC
push	ebp
mov	ebp, esp
sub	esp, 68					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-68]
mov	ecx, 17					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _start$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _library$[ebp], edx
mov	eax, DWORD PTR _library$[ebp]
mov	DWORD PTR _library$[ebp], eax
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 16					
mov	edx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [edx+404], ecx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR _start$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _parser$[ebp]
mov	eax, DWORD PTR _limit$[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR _start$[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _p$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	$Exit$98
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _v$8[ebp], edx
cmp	DWORD PTR _v$8[ebp], 27			
jb	$LN89@cff_parser
cmp	DWORD PTR _v$8[ebp], 31			
je	$LN89@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR [ecx+404]
sub	edx, eax
sar	edx, 2
cmp	edx, 96					
jl	SHORT $LN88@cff_parser
jmp	$Stack_Overflow$99
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+404]
mov	edx, DWORD PTR _p$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+404]
add	ecx, 4
mov	edx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [edx+404], ecx
cmp	DWORD PTR _v$8[ebp], 30			
jne	SHORT $LN87@cff_parser
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jb	SHORT $LN84@cff_parser
jmp	$Exit$98
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
sar	edx, 4
mov	DWORD PTR _v$8[ebp], edx
cmp	DWORD PTR _v$8[ebp], 15			
jne	SHORT $LN83@cff_parser
jmp	SHORT $LN85@cff_parser
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
and	eax, 15					
mov	DWORD PTR _v$8[ebp], eax
cmp	DWORD PTR _v$8[ebp], 15			
jne	SHORT $LN82@cff_parser
jmp	SHORT $LN85@cff_parser
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
jmp	SHORT $LN86@cff_parser
jmp	SHORT $LN76@cff_parser
cmp	DWORD PTR _v$8[ebp], 28			
jne	SHORT $LN80@cff_parser
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
jmp	SHORT $LN76@cff_parser
cmp	DWORD PTR _v$8[ebp], 29			
jne	SHORT $LN78@cff_parser
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN76@cff_parser
cmp	DWORD PTR _v$8[ebp], 246		
jbe	SHORT $LN76@cff_parser
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
jmp	$LN75@cff_parser
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+404]
sub	ecx, edx
sar	ecx, 2
mov	DWORD PTR _num_args$6[ebp], ecx
mov	edx, DWORD PTR _parser$[ebp]
mov	eax, DWORD PTR [edx+404]
mov	ecx, DWORD PTR _p$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _v$8[ebp]
mov	DWORD PTR _code$7[ebp], edx
cmp	DWORD PTR _v$8[ebp], 12			
jne	SHORT $LN74@cff_parser
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jb	SHORT $LN73@cff_parser
jmp	$Syntax_Error$100
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
or	edx, 256				
mov	DWORD PTR _code$7[ebp], edx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR _code$7[ebp]
or	ecx, DWORD PTR [eax+408]
mov	DWORD PTR _code$7[ebp], ecx
mov	DWORD PTR _field$5[ebp], OFFSET _cff_field_handlers
jmp	SHORT $LN72@cff_parser
mov	edx, DWORD PTR _field$5[ebp]
add	edx, 32					
mov	DWORD PTR _field$5[ebp], edx
mov	eax, DWORD PTR _field$5[ebp]
cmp	DWORD PTR [eax], 0
je	$Found$101
mov	ecx, DWORD PTR _field$5[ebp]
mov	edx, DWORD PTR [ecx+4]
cmp	edx, DWORD PTR _code$7[ebp]
jne	$LN69@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	edx, DWORD PTR _field$5[ebp]
add	ecx, DWORD PTR [edx+8]
mov	DWORD PTR _q$3[ebp], ecx
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN65@cff_parser
mov	edx, DWORD PTR _field$5[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
push	OFFSET $SG10117
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN68@cff_parser
mov	edx, DWORD PTR _field$5[ebp]
cmp	DWORD PTR [edx], 6
je	SHORT $LN64@cff_parser
cmp	DWORD PTR _num_args$6[ebp], 1
jae	SHORT $LN64@cff_parser
jmp	$Stack_Underflow$102
mov	eax, DWORD PTR _field$5[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv170[ebp], ecx
mov	edx, DWORD PTR tv170[ebp]
sub	edx, 1
mov	DWORD PTR tv170[ebp], edx
cmp	DWORD PTR tv170[ebp], 5
ja	$LN2@cff_parser
mov	eax, DWORD PTR tv170[ebp]
jmp	DWORD PTR $LN96@cff_parser[eax*4]
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 16					
push	ecx
call	_cff_parse_num
add	esp, 4
mov	DWORD PTR _val$4[ebp], eax
jmp	SHORT $Store_Number$103
mov	edx, DWORD PTR _parser$[ebp]
add	edx, 16					
push	edx
call	_cff_parse_fixed
add	esp, 4
mov	DWORD PTR _val$4[ebp], eax
jmp	SHORT $Store_Number$103
push	3
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
push	eax
call	_cff_parse_fixed_scaled
add	esp, 8
mov	DWORD PTR _val$4[ebp], eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	dl, BYTE PTR [ecx+12]
mov	BYTE PTR tv183[ebp], dl
cmp	BYTE PTR tv183[ebp], 1
je	SHORT $LN56@cff_parser
cmp	BYTE PTR tv183[ebp], 2
je	SHORT $LN55@cff_parser
cmp	BYTE PTR tv183[ebp], 4
je	SHORT $LN54@cff_parser
jmp	SHORT $LN53@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	cl, BYTE PTR _val$4[ebp]
mov	BYTE PTR [eax], cl
jmp	SHORT $LN57@cff_parser
mov	edx, DWORD PTR _q$3[ebp]
mov	ax, WORD PTR _val$4[ebp]
mov	WORD PTR [edx], ax
jmp	SHORT $LN57@cff_parser
mov	ecx, DWORD PTR _q$3[ebp]
mov	edx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN57@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	ecx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _field$5[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv190[ebp], eax
mov	ecx, DWORD PTR tv190[ebp]
sub	ecx, 1
mov	DWORD PTR tv190[ebp], ecx
cmp	DWORD PTR tv190[ebp], 4
ja	$LN27@cff_parser
mov	edx, DWORD PTR tv190[ebp]
jmp	DWORD PTR $LN97@cff_parser[edx*4]
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN46@cff_parser
cmp	DWORD PTR _val$4[ebp], 0
je	SHORT $LN94@cff_parser
mov	DWORD PTR tv195[ebp], OFFSET $SG10152
jmp	SHORT $LN95@cff_parser
mov	DWORD PTR tv195[ebp], OFFSET $SG10153
mov	edx, DWORD PTR tv195[ebp]
push	edx
push	OFFSET $SG10154
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN50@cff_parser
jmp	$LN51@cff_parser
mov	ecx, 4
imul	edx, ecx, 50
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN41@cff_parser
mov	eax, DWORD PTR _val$4[ebp]
push	eax
push	OFFSET $SG10160
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN45@cff_parser
jmp	$LN51@cff_parser
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN36@cff_parser
mov	ecx, DWORD PTR _val$4[ebp]
push	ecx
push	OFFSET $SG10166
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN40@cff_parser
jmp	SHORT $LN51@cff_parser
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN31@cff_parser
cvtsi2sd xmm0, DWORD PTR _val$4[ebp]
divsd	xmm0, QWORD PTR __real@40f0000000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10173
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN35@cff_parser
jmp	SHORT $LN51@cff_parser
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN26@cff_parser
cvtsi2sd xmm0, DWORD PTR _val$4[ebp]
divsd	xmm0, QWORD PTR __real@40f0000000000000
divsd	xmm0, QWORD PTR __real@408f400000000000
sub	esp, 8
movsd	QWORD PTR [esp], xmm0
push	OFFSET $SG10180
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN30@cff_parser
jmp	$LN62@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR [eax+412]
mov	edx, DWORD PTR _field$5[ebp]
add	ecx, DWORD PTR [edx+24]
mov	DWORD PTR _qcount$2[ebp], ecx
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	DWORD PTR _data$1[ebp], eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	edx, DWORD PTR _num_args$6[ebp]
cmp	edx, DWORD PTR [ecx+20]
jbe	SHORT $LN23@cff_parser
mov	eax, DWORD PTR _field$5[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _num_args$6[ebp], ecx
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN19@cff_parser
push	OFFSET $SG10191
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN23@cff_parser
mov	edx, DWORD PTR _qcount$2[ebp]
mov	al, BYTE PTR _num_args$6[ebp]
mov	BYTE PTR [edx], al
mov	DWORD PTR _val$4[ebp], 0
cmp	DWORD PTR _num_args$6[ebp], 0
jbe	$LN17@cff_parser
mov	ecx, DWORD PTR _data$1[ebp]
mov	DWORD PTR tv245[ebp], ecx
mov	edx, DWORD PTR _data$1[ebp]
add	edx, 4
mov	DWORD PTR _data$1[ebp], edx
mov	eax, DWORD PTR tv245[ebp]
push	eax
call	_cff_parse_num
add	esp, 4
add	eax, DWORD PTR _val$4[ebp]
mov	DWORD PTR _val$4[ebp], eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	dl, BYTE PTR [ecx+12]
mov	BYTE PTR tv250[ebp], dl
cmp	BYTE PTR tv250[ebp], 1
je	SHORT $LN14@cff_parser
cmp	BYTE PTR tv250[ebp], 2
je	SHORT $LN13@cff_parser
cmp	BYTE PTR tv250[ebp], 4
je	SHORT $LN12@cff_parser
jmp	SHORT $LN11@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	cl, BYTE PTR _val$4[ebp]
mov	BYTE PTR [eax], cl
jmp	SHORT $LN15@cff_parser
mov	edx, DWORD PTR _q$3[ebp]
mov	ax, WORD PTR _val$4[ebp]
mov	WORD PTR [edx], ax
jmp	SHORT $LN15@cff_parser
mov	ecx, DWORD PTR _q$3[ebp]
mov	edx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN15@cff_parser
mov	eax, DWORD PTR _q$3[ebp]
mov	ecx, DWORD PTR _val$4[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, 4
imul	eax, edx, 50
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN7@cff_parser
mov	ecx, DWORD PTR _val$4[ebp]
push	ecx
push	OFFSET $SG10215
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN15@cff_parser
mov	eax, DWORD PTR _field$5[ebp]
movzx	ecx, BYTE PTR [eax+12]
add	ecx, DWORD PTR _q$3[ebp]
mov	DWORD PTR _q$3[ebp], ecx
mov	edx, DWORD PTR _num_args$6[ebp]
sub	edx, 1
mov	DWORD PTR _num_args$6[ebp], edx
jmp	$LN18@cff_parser
mov	eax, 4
imul	ecx, eax, 50
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN3@cff_parser
push	OFFSET $SG10220
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN17@cff_parser
jmp	SHORT $LN62@cff_parser
mov	esi, esp
mov	eax, DWORD PTR _parser$[ebp]
push	eax
mov	ecx, DWORD PTR _field$5[ebp]
mov	edx, DWORD PTR [ecx+16]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@cff_parser
jmp	SHORT $Exit$98
jmp	SHORT $Found$101
jmp	$LN71@cff_parser
mov	eax, DWORD PTR _parser$[ebp]
add	eax, 16					
mov	ecx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [ecx+404], eax
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
jmp	$LN91@cff_parser
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN92@cff_parser
push	OFFSET $SG10224
push	1160					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$98
push	OFFSET $SG10225
push	1164					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$98
push	OFFSET $SG10226
push	1168					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$98
pop	edi
pop	esi
add	esp, 68					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	$LN61@cff_parser
DD	$LN60@cff_parser
DD	$LN59@cff_parser
DD	$LN61@cff_parser
DD	$LN61@cff_parser
DD	$LN24@cff_parser
DD	$LN40@cff_parser
DD	$LN35@cff_parser
DD	$LN30@cff_parser
DD	$LN45@cff_parser
DD	$LN50@cff_parser
ENDP
_cff_parser_init PROC
push	ebp
mov	ebp, esp
push	416					
push	0
mov	eax, DWORD PTR _parser$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _parser$[ebp]
add	ecx, 16					
mov	edx, DWORD PTR _parser$[ebp]
mov	DWORD PTR [edx+404], ecx
mov	eax, DWORD PTR _parser$[ebp]
mov	ecx, DWORD PTR _code$[ebp]
mov	DWORD PTR [eax+408], ecx
mov	edx, DWORD PTR _parser$[ebp]
mov	eax, DWORD PTR _object$[ebp]
mov	DWORD PTR [edx+412], eax
mov	ecx, DWORD PTR _parser$[ebp]
mov	edx, DWORD PTR _library$[ebp]
mov	DWORD PTR [ecx], edx
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_fd_select_get PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	BYTE PTR _fd$[ebp], 0
mov	eax, DWORD PTR _fdselect$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR tv66[ebp], cl
cmp	BYTE PTR tv66[ebp], 0
je	SHORT $LN9@cff_fd_sel
cmp	BYTE PTR tv66[ebp], 3
je	SHORT $LN8@cff_fd_sel
jmp	$LN10@cff_fd_sel
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _glyph_index$[ebp]
mov	dl, BYTE PTR [eax+ecx]
mov	BYTE PTR _fd$[ebp], dl
jmp	$LN10@cff_fd_sel
mov	eax, DWORD PTR _fdselect$[ebp]
mov	ecx, DWORD PTR _glyph_index$[ebp]
sub	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _fdselect$[ebp]
cmp	ecx, DWORD PTR [edx+20]
jae	SHORT $LN7@cff_fd_sel
mov	eax, DWORD PTR _fdselect$[ebp]
mov	cl, BYTE PTR [eax+24]
mov	BYTE PTR _fd$[ebp], cl
jmp	$LN10@cff_fd_sel
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _p$5[ebp], eax
mov	ecx, DWORD PTR _fdselect$[ebp]
mov	edx, DWORD PTR _p$5[ebp]
add	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _p_limit$4[ebp], edx
mov	eax, DWORD PTR _p$5[ebp]
add	eax, 2
mov	DWORD PTR _p$5[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$5[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$5[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movzx	eax, cx
mov	DWORD PTR _first$2[ebp], eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
cmp	ecx, DWORD PTR _first$2[ebp]
jae	SHORT $LN3@cff_fd_sel
jmp	$LN10@cff_fd_sel
mov	edx, DWORD PTR _p$5[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR _fd2$3[ebp], al
mov	ecx, DWORD PTR _p$5[ebp]
add	ecx, 1
mov	DWORD PTR _p$5[ebp], ecx
mov	edx, DWORD PTR _p$5[ebp]
add	edx, 2
mov	DWORD PTR _p$5[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$5[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$5[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	DWORD PTR _limit$1[ebp], edx
mov	eax, DWORD PTR _glyph_index$[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	SHORT $LN2@cff_fd_sel
mov	cl, BYTE PTR _fd2$3[ebp]
mov	BYTE PTR _fd$[ebp], cl
mov	edx, DWORD PTR _fdselect$[ebp]
mov	eax, DWORD PTR _first$2[ebp]
mov	DWORD PTR [edx+16], eax
mov	ecx, DWORD PTR _limit$1[ebp]
sub	ecx, DWORD PTR _first$2[ebp]
mov	edx, DWORD PTR _fdselect$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _fdselect$[ebp]
mov	cl, BYTE PTR _fd2$3[ebp]
mov	BYTE PTR [eax+24], cl
jmp	SHORT $LN10@cff_fd_sel
mov	edx, DWORD PTR _limit$1[ebp]
mov	DWORD PTR _first$2[ebp], edx
mov	eax, DWORD PTR _p$5[ebp]
cmp	eax, DWORD PTR _p_limit$4[ebp]
jb	$LN6@cff_fd_sel
mov	al, BYTE PTR _fd$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_font_done PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 84					
push	edx
call	_cff_index_done
add	esp, 4
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1208				
push	eax
call	_cff_index_done
add	esp, 4
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 20					
push	ecx
call	_cff_index_done
add	esp, 4
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1176				
push	edx
call	_cff_index_done
add	esp, 4
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+1896], 0
jbe	SHORT $LN26@cff_font_d
mov	DWORD PTR _idx$[ebp], 0
jmp	SHORT $LN25@cff_font_d
mov	ecx, DWORD PTR _idx$[ebp]
add	ecx, 1
mov	DWORD PTR _idx$[ebp], ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR _idx$[ebp]
cmp	eax, DWORD PTR [edx+1896]
jae	SHORT $LN22@cff_font_d
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+1900]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_cff_subfont_done
add	esp, 8
jmp	SHORT $LN24@cff_font_d
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+eax+1900]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+edx+1900], 0
xor	ecx, ecx
jne	SHORT $LN22@cff_font_d
mov	edx, DWORD PTR _font$[ebp]
add	edx, 116				
push	edx
call	_cff_encoding_done
add	esp, 4
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1152				
push	edx
call	_cff_charset_done
add	esp, 8
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1324				
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_cff_subfont_done
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 2924				
push	ecx
call	_CFF_Done_FD_Select
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+2960]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+2960], 0
xor	eax, eax
jne	SHORT $LN19@cff_font_d
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+1304]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+1304], 0
xor	edx, edx
jne	SHORT $LN16@cff_font_d
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+1308]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+1308], 0
xor	ecx, ecx
jne	SHORT $LN13@cff_font_d
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+1316]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+1316], 0
xor	eax, eax
jne	SHORT $LN10@cff_font_d
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+1320]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _font$[ebp]
mov	DWORD PTR [ecx+1320], 0
xor	edx, edx
jne	SHORT $LN7@cff_font_d
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+2976], 0
je	SHORT $LN27@cff_font_d
mov	esi, esp
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2972]
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+2976]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+2972]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+2972], 0
xor	eax, eax
jne	SHORT $LN3@cff_font_d
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_font_load PROC
push	ebp
mov	ebp, esp
sub	esp, 120				
push	edi
lea	edi, DWORD PTR [ebp-120]
mov	ecx, 30					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
push	2980					
push	0
mov	edx, DWORD PTR _font$[ebp]
push	edx
call	_memset
add	esp, 12					
push	32					
push	0
lea	eax, DWORD PTR _string_index$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1324				
mov	DWORD PTR _dict$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _base_offset$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
push	OFFSET ?cff_header_fields@?1??cff_font_load@@9@9
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN50@cff_font_l
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
movzx	ecx, BYTE PTR [eax+16]
cmp	ecx, 1
jne	SHORT $LN47@cff_font_l
mov	edx, DWORD PTR _font$[ebp]
movzx	eax, BYTE PTR [edx+18]
cmp	eax, 4
jl	SHORT $LN47@cff_font_l
mov	ecx, DWORD PTR _font$[ebp]
movzx	edx, BYTE PTR [ecx+19]
cmp	edx, 4
jle	SHORT $LN49@cff_font_l
mov	eax, 4
imul	ecx, eax, 48
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN46@cff_font_l
push	OFFSET $SG10966
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN47@cff_font_l
push	OFFSET $SG10967
push	1471					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
movzx	ecx, BYTE PTR [eax+18]
sub	ecx, 4
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Skip
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@cff_font_l
jmp	$Exit$60
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 20					
push	ecx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN41@cff_font_l
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1208				
push	eax
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN41@cff_font_l
push	1
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
lea	edx, DWORD PTR _string_index$[ebp]
push	edx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN41@cff_font_l
push	1
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 84					
push	ecx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN41@cff_font_l
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1320				
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1316				
push	eax
lea	ecx, DWORD PTR _string_index$[ebp]
push	ecx
call	_cff_index_get_pointers
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN42@cff_font_l
jmp	$Exit$60
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR _string_index$[ebp+8]
mov	DWORD PTR [edx+1312], eax
movzx	ecx, BYTE PTR _pure_cff$[ebp]
test	ecx, ecx
je	SHORT $LN40@cff_font_l
mov	edx, DWORD PTR _face_index$[ebp]
mov	DWORD PTR _subfont_index$[ebp], edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _subfont_index$[ebp]
cmp	ecx, DWORD PTR [eax+28]
jl	SHORT $LN39@cff_font_l
mov	edx, DWORD PTR _subfont_index$[ebp]
push	edx
push	OFFSET $SG10975
call	_FT_Message
add	esp, 8
push	OFFSET $SG10976
push	1505					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+8], edx
jmp	SHORT $LN38@cff_font_l
mov	DWORD PTR _subfont_index$[ebp], 0
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+28], 1
jbe	SHORT $LN38@cff_font_l
push	OFFSET $SG10979
call	_FT_Message
add	esp, 4
push	OFFSET $SG10980
push	1521					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN35@cff_font_l
jmp	$Exit$60
mov	ecx, 4
imul	edx, ecx, 48
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN34@cff_font_l
push	OFFSET $SG10986
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN35@cff_font_l
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
mov	edx, DWORD PTR _base_offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _subfont_index$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1208				
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 1324				
push	eax
call	_cff_subfont_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@cff_font_l
jmp	$Exit$60
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+112]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN30@cff_font_l
jmp	$Exit$60
push	0
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1176				
push	edx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN29@cff_font_l
jmp	$Exit$60
mov	eax, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [eax+132], 65535		
je	$LN28@cff_font_l
mov	DWORD PTR _sub$3[ebp], 0
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+164]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@cff_font_l
jmp	$Exit$60
push	0
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
lea	edx, DWORD PTR _fd_index$4[ebp]
push	edx
call	_cff_index_init
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@cff_font_l
jmp	$Exit$60
cmp	DWORD PTR _fd_index$4[ebp+8], 256	
jbe	SHORT $LN25@cff_font_l
mov	eax, 4
imul	ecx, eax, 48
cmp	DWORD PTR _ft_trace_levels[ecx], 0
jl	SHORT $LN23@cff_font_l
push	OFFSET $SG11004
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN24@cff_font_l
jmp	$Fail_CID$61
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _fd_index$4[ebp+8]
mov	DWORD PTR [eax+1896], ecx
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _fd_index$4[ebp+8]
push	eax
push	0
push	572					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _sub$3[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@cff_font_l
jmp	$Fail_CID$61
mov	DWORD PTR _idx$2[ebp], 0
jmp	SHORT $LN19@cff_font_l
mov	edx, DWORD PTR _idx$2[ebp]
add	edx, 1
mov	DWORD PTR _idx$2[ebp], edx
mov	eax, DWORD PTR _idx$2[ebp]
cmp	eax, DWORD PTR _fd_index$4[ebp+8]
jae	SHORT $LN17@cff_font_l
imul	ecx, DWORD PTR _idx$2[ebp], 572
add	ecx, DWORD PTR _sub$3[ebp]
mov	edx, DWORD PTR _idx$2[ebp]
mov	eax, DWORD PTR _font$[ebp]
mov	DWORD PTR [eax+edx*4+1900], ecx
jmp	SHORT $LN18@cff_font_l
mov	DWORD PTR _idx$2[ebp], 0
jmp	SHORT $LN16@cff_font_l
mov	ecx, DWORD PTR _idx$2[ebp]
add	ecx, 1
mov	DWORD PTR _idx$2[ebp], ecx
mov	edx, DWORD PTR _idx$2[ebp]
cmp	edx, DWORD PTR _fd_index$4[ebp+8]
jae	SHORT $LN14@cff_font_l
mov	eax, DWORD PTR _idx$2[ebp]
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1900]
mov	DWORD PTR _sub$3[ebp], edx
mov	eax, 4
imul	ecx, eax, 48
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN12@cff_font_l
mov	edx, DWORD PTR _idx$2[ebp]
push	edx
push	OFFSET $SG11019
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN13@cff_font_l
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
mov	edx, DWORD PTR _base_offset$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$2[ebp]
push	ecx
lea	edx, DWORD PTR _fd_index$4[ebp]
push	edx
mov	eax, DWORD PTR _sub$3[ebp]
push	eax
call	_cff_subfont_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@cff_font_l
jmp	SHORT $Fail_CID$61
jmp	SHORT $LN15@cff_font_l
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR _base_offset$[ebp]
add	edx, DWORD PTR [ecx+168]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+1184]
push	edx
mov	eax, DWORD PTR _font$[ebp]
add	eax, 2924				
push	eax
call	_CFF_Load_FD_Select
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
lea	ecx, DWORD PTR _fd_index$4[ebp]
push	ecx
call	_cff_index_done
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@cff_font_l
jmp	$Exit$60
jmp	SHORT $LN7@cff_font_l
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+1896], 0
mov	eax, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [eax+112], 0
jne	SHORT $LN6@cff_font_l
push	OFFSET $SG11024
call	_FT_Message
add	esp, 4
push	OFFSET $SG11025
push	1610					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$60
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+1184]
mov	DWORD PTR [ecx+12], eax
push	0
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 1308				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 84					
push	edx
call	_cff_index_get_pointers
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_font_l
jmp	$Exit$60
mov	eax, DWORD PTR _font$[ebp]
cmp	DWORD PTR [eax+12], 0
jbe	$LN4@cff_font_l
mov	ecx, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [ecx+132], 65535		
je	SHORT $LN53@cff_font_l
movzx	edx, BYTE PTR _pure_cff$[ebp]
test	edx, edx
je	SHORT $LN53@cff_font_l
mov	BYTE PTR tv308[ebp], 1
jmp	SHORT $LN54@cff_font_l
mov	BYTE PTR tv308[ebp], 0
mov	al, BYTE PTR tv308[ebp]
mov	BYTE PTR _invert$1[ebp], al
movzx	ecx, BYTE PTR _invert$1[ebp]
push	ecx
mov	edx, DWORD PTR _dict$[ebp]
mov	eax, DWORD PTR [edx+104]
push	eax
mov	ecx, DWORD PTR _base_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 1152				
push	edx
call	_cff_charset_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@cff_font_l
jmp	SHORT $Exit$60
mov	eax, DWORD PTR _dict$[ebp]
cmp	DWORD PTR [eax+132], 65535		
jne	SHORT $LN4@cff_font_l
mov	ecx, DWORD PTR _dict$[ebp]
mov	edx, DWORD PTR [ecx+108]
push	edx
mov	eax, DWORD PTR _base_offset$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
add	ecx, 1152				
push	ecx
mov	edx, DWORD PTR _font$[ebp]
add	edx, 116				
push	edx
call	_cff_encoding_load
add	esp, 24					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@cff_font_l
jmp	SHORT $Exit$60
mov	eax, DWORD PTR _subfont_index$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cff_index_get_name
add	esp, 8
mov	edx, DWORD PTR _font$[ebp]
mov	DWORD PTR [edx+1304], eax
lea	eax, DWORD PTR _string_index$[ebp]
push	eax
call	_cff_index_done
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN59@cff_font_l
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 120				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	3
DD	$LN58@cff_font_l
DD	-8					
DD	4
DD	$LN55@cff_font_l
DD	-60					
DD	32					
DD	$LN56@cff_font_l
DD	-104					
DD	32					
DD	$LN57@cff_font_l
DB	102					
DB	100					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_charset_cid_to_gindex PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _charset$[ebp]
mov	ecx, DWORD PTR _cid$[ebp]
cmp	ecx, DWORD PTR [eax+16]
ja	SHORT $LN1@cff_charse
mov	edx, DWORD PTR _charset$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR _cid$[ebp]
movzx	edx, WORD PTR [eax+ecx*2]
mov	DWORD PTR _result$[ebp], edx
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_index_get_name PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _font$[ebp]
add	eax, 20					
mov	DWORD PTR _idx$[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _name$[ebp], 0
lea	ecx, DWORD PTR _byte_len$[ebp]
push	ecx
lea	edx, DWORD PTR _bytes$[ebp]
push	edx
mov	eax, DWORD PTR _element$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_access_element
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@cff_index_
jmp	SHORT $Exit$10
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _byte_len$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _name$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@cff_index_
mov	edx, DWORD PTR _byte_len$[ebp]
push	edx
mov	eax, DWORD PTR _bytes$[ebp]
push	eax
mov	ecx, DWORD PTR _name$[ebp]
push	ecx
call	_memcpy
add	esp, 12					
mov	edx, DWORD PTR _name$[ebp]
add	edx, DWORD PTR _byte_len$[ebp]
mov	BYTE PTR [edx], 0
lea	eax, DWORD PTR _bytes$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_forget_element
add	esp, 8
mov	eax, DWORD PTR _name$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN8@cff_index_
DD	-16					
DD	4
DD	$LN5@cff_index_
DD	-28					
DD	4
DD	$LN6@cff_index_
DD	-40					
DD	4
DD	$LN7@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
DB	98					
DB	121					
DB	116					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	98					
DB	121					
DB	116					
DB	101					
DB	115					
DB	0
ENDP
_cff_index_forget_element PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax+28], 0
jne	SHORT $LN2@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _stream$1[ebp], edx
mov	eax, DWORD PTR _pbytes$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$1[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_index_access_element PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
cmp	DWORD PTR _idx$[ebp], 0
je	$LN24@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+8]
cmp	ecx, DWORD PTR _element$[ebp]
jbe	$LN24@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _stream$4[ebp], eax
mov	DWORD PTR _off2$2[ebp], 0
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+24], 0
jne	$LN23@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
movzx	eax, BYTE PTR [edx+12]
imul	eax, DWORD PTR _element$[ebp]
mov	DWORD PTR _pos$1[ebp], eax
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _pos$1[ebp]
lea	ecx, DWORD PTR [edx+eax+3]
push	ecx
mov	edx, DWORD PTR _stream$4[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN22@cff_index_
jmp	$Exit$30
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_read_offset
add	esp, 8
mov	DWORD PTR _off1$3[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@cff_index_
jmp	$Exit$30
cmp	DWORD PTR _off1$3[ebp], 0
je	SHORT $LN20@cff_index_
mov	edx, DWORD PTR _element$[ebp]
add	edx, 1
mov	DWORD PTR _element$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
call	_cff_index_read_offset
add	esp, 8
mov	DWORD PTR _off2$2[ebp], eax
cmp	DWORD PTR _off2$2[ebp], 0
jne	SHORT $LN20@cff_index_
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _element$[ebp]
cmp	eax, DWORD PTR [edx+8]
jb	SHORT $LN19@cff_index_
jmp	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _element$[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
mov	DWORD PTR _off1$3[ebp], ecx
cmp	DWORD PTR _off1$3[ebp], 0
je	SHORT $LN15@cff_index_
mov	edx, DWORD PTR _element$[ebp]
add	edx, 1
mov	DWORD PTR _element$[ebp], edx
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _element$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
mov	DWORD PTR _off2$2[ebp], eax
cmp	DWORD PTR _off2$2[ebp], 0
jne	SHORT $LN15@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR _element$[ebp]
cmp	edx, DWORD PTR [ecx+8]
jb	SHORT $LN13@cff_index_
mov	eax, DWORD PTR _stream$4[ebp]
mov	ecx, DWORD PTR [eax+4]
add	ecx, 1
cmp	DWORD PTR _off2$2[ebp], ecx
ja	SHORT $LN8@cff_index_
mov	edx, DWORD PTR _stream$4[ebp]
mov	eax, DWORD PTR [edx+4]
sub	eax, DWORD PTR _off2$2[ebp]
add	eax, 1
mov	ecx, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [ecx+16], eax
jbe	SHORT $LN9@cff_index_
mov	edx, DWORD PTR _stream$4[ebp]
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+16]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _off2$2[ebp]
push	edx
push	OFFSET $SG10456
call	_FT_Message
add	esp, 12					
mov	eax, DWORD PTR _stream$4[ebp]
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+16]
add	edx, 1
mov	DWORD PTR _off2$2[ebp], edx
cmp	DWORD PTR _off1$3[ebp], 0
je	SHORT $LN7@cff_index_
mov	eax, DWORD PTR _off2$2[ebp]
cmp	eax, DWORD PTR _off1$3[ebp]
jbe	SHORT $LN7@cff_index_
mov	ecx, DWORD PTR _off2$2[ebp]
sub	ecx, DWORD PTR _off1$3[ebp]
mov	edx, DWORD PTR _pbyte_len$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _idx$[ebp]
cmp	DWORD PTR [eax+28], 0
je	SHORT $LN6@cff_index_
mov	ecx, DWORD PTR _idx$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _off1$3[ebp]
lea	ecx, DWORD PTR [edx+eax-1]
mov	edx, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN5@cff_index_
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _off1$3[ebp]
lea	eax, DWORD PTR [ecx+edx-1]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN3@cff_index_
mov	edx, DWORD PTR _pbytes$[ebp]
push	edx
mov	eax, DWORD PTR _off2$2[ebp]
sub	eax, DWORD PTR _off1$3[ebp]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_index_
jmp	SHORT $Exit$30
jmp	SHORT $LN2@cff_index_
mov	edx, DWORD PTR _pbytes$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _pbyte_len$[ebp]
mov	DWORD PTR [eax], 0
jmp	SHORT $Exit$30
push	OFFSET $SG10467
push	560					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN29@cff_index_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN28@cff_index_
DD	-8					
DD	4
DD	$LN27@cff_index_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_index_get_sid_string PROC
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR _sid$[ebp], 65535		
jne	SHORT $LN3@cff_index_
xor	eax, eax
jmp	SHORT $LN4@cff_index_
cmp	DWORD PTR _sid$[ebp], 390		
jbe	SHORT $LN2@cff_index_
mov	eax, DWORD PTR _sid$[ebp]
sub	eax, 391				
push	eax
mov	ecx, DWORD PTR _font$[ebp]
push	ecx
call	_cff_index_get_string
add	esp, 8
jmp	SHORT $LN4@cff_index_
mov	edx, DWORD PTR _font$[ebp]
cmp	DWORD PTR [edx+2956], 0
jne	SHORT $LN1@cff_index_
xor	eax, eax
jmp	SHORT $LN4@cff_index_
mov	esi, esp
mov	eax, DWORD PTR _sid$[ebp]
push	eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2956]
mov	eax, DWORD PTR [edx+20]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_cff_index_get_string PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR _element$[ebp]
cmp	ecx, DWORD PTR [eax+1312]
jae	SHORT $LN3@cff_index_
mov	edx, DWORD PTR _font$[ebp]
mov	eax, DWORD PTR [edx+1316]
mov	ecx, DWORD PTR _element$[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR tv69[ebp], edx
jmp	SHORT $LN4@cff_index_
mov	DWORD PTR tv69[ebp], 0
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_get_standard_encoding PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _charcode$[ebp], 256		
jae	SHORT $LN3@cff_get_st
mov	eax, DWORD PTR _charcode$[ebp]
movzx	ecx, WORD PTR _cff_standard_encoding[eax*2]
mov	DWORD PTR tv68[ebp], ecx
jmp	SHORT $LN4@cff_get_st
mov	DWORD PTR tv68[ebp], 0
mov	ax, WORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_slot_load PROC
push	ebp
mov	ebp, esp
sub	esp, 1228				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-1228]
mov	ecx, 307				
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	BYTE PTR _force_scaling$[ebp], 0
mov	ecx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [ecx+1456], 65535		
je	SHORT $LN53@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [edx+1164], 0
je	SHORT $LN53@cff_slot_l
cmp	DWORD PTR _glyph_index$[ebp], 0
je	SHORT $LN52@cff_slot_l
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 1152				
push	ecx
call	_cff_charset_cid_to_gindex
add	esp, 8
mov	DWORD PTR _glyph_index$[ebp], eax
cmp	DWORD PTR _glyph_index$[ebp], 0
jne	SHORT $LN52@cff_slot_l
push	OFFSET $SG12224
push	2632					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN54@cff_slot_l
jmp	SHORT $LN50@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR _glyph_index$[ebp]
cmp	eax, DWORD PTR [edx+12]
jb	SHORT $LN50@cff_slot_l
push	OFFSET $SG12227
push	2636					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN54@cff_slot_l
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 1024				
je	SHORT $LN48@cff_slot_l
mov	edx, DWORD PTR _load_flags$[ebp]
or	edx, 3
mov	DWORD PTR _load_flags$[ebp], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+164], 65536		
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+168], 65536		
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN47@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+164], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR [edx+168], ecx
cmp	DWORD PTR _size$[ebp], 0
je	$LN46@cff_slot_l
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _cff_face$26[ebp], eax
mov	ecx, DWORD PTR _cff_face$26[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR _sfnt$25[ebp], edx
mov	eax, DWORD PTR _cff_face$26[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$24[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [edx+44], -1
je	$LN46@cff_slot_l
mov	eax, DWORD PTR _sfnt$25[ebp]
cmp	DWORD PTR [eax+96], 0
je	$LN46@cff_slot_l
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 8
jne	$LN46@cff_slot_l
mov	esi, esp
lea	edx, DWORD PTR _metrics$23[ebp]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 76					
push	eax
mov	ecx, DWORD PTR _stream$24[ebp]
push	ecx
mov	edx, DWORD PTR _load_flags$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+44]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt$25[ebp]
mov	edx, DWORD PTR [ecx+72]
call	edx
add	esp, 28					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN46@cff_slot_l
xor	eax, eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [ecx+110], ax
xor	edx, edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	WORD PTR [eax+108], dx
movzx	ecx, WORD PTR _metrics$23[ebp+2]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+24], ecx
movzx	eax, WORD PTR _metrics$23[ebp]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+28], eax
movsx	edx, WORD PTR _metrics$23[ebp+4]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+32], edx
movsx	ecx, WORD PTR _metrics$23[ebp+6]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+36], ecx
movzx	eax, WORD PTR _metrics$23[ebp+8]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+40], eax
movsx	edx, WORD PTR _metrics$23[ebp+10]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+44], edx
movsx	ecx, WORD PTR _metrics$23[ebp+12]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+48], ecx
movzx	eax, WORD PTR _metrics$23[ebp+14]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+52], eax
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+72], 1651078259		
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 16					
je	SHORT $LN43@cff_slot_l
movsx	ecx, WORD PTR _metrics$23[ebp+10]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+100], ecx
movsx	eax, WORD PTR _metrics$23[ebp+12]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+104], eax
jmp	SHORT $LN42@cff_slot_l
movsx	edx, WORD PTR _metrics$23[ebp+4]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+100], edx
movsx	ecx, WORD PTR _metrics$23[ebp+6]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+104], ecx
mov	esi, esp
lea	eax, DWORD PTR _advance$21[ebp]
push	eax
lea	ecx, DWORD PTR _dummy$20[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	eax, DWORD PTR [edx+112]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, WORD PTR _advance$21[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+56], ecx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN56@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+330]
test	eax, eax
jle	SHORT $LN56@cff_slot_l
mov	BYTE PTR tv204[ebp], 1
jmp	SHORT $LN57@cff_slot_l
mov	BYTE PTR tv204[ebp], 0
mov	cl, BYTE PTR tv204[ebp]
mov	BYTE PTR _has_vertical_info$22[ebp], cl
movzx	edx, BYTE PTR _has_vertical_info$22[ebp]
test	edx, edx
je	SHORT $LN41@cff_slot_l
mov	esi, esp
lea	eax, DWORD PTR _advance$21[ebp]
push	eax
lea	ecx, DWORD PTR _dummy$20[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	1
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	eax, DWORD PTR [edx+112]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, WORD PTR _advance$21[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+60], ecx
jmp	SHORT $LN40@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+364]
cmp	ecx, 65535				
je	SHORT $LN39@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+436]
sub	eax, edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+60], eax
jmp	SHORT $LN40@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+220]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+222]
sub	eax, edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+60], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN54@cff_slot_l
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 16384				
je	SHORT $LN37@cff_slot_l
push	OFFSET $SG12265
push	2752					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN54@cff_slot_l
mov	eax, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [eax+1896], 0
je	$LN36@cff_slot_l
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 2924				
push	edx
call	_cff_fd_select_get
add	esp, 8
mov	BYTE PTR _fd_index$17[ebp], al
movzx	eax, BYTE PTR _fd_index$17[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
cmp	eax, DWORD PTR [ecx+1896]
jb	SHORT $LN35@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1896]
sub	eax, 1
mov	BYTE PTR _fd_index$17[ebp], al
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+1392]
mov	DWORD PTR _top_upm$19[ebp], edx
movzx	eax, BYTE PTR _fd_index$17[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1900]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR _sub_upm$18[ebp], eax
movzx	ecx, BYTE PTR _fd_index$17[ebp]
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+1900]
add	eax, 48					
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _font_matrix$[ebp], ecx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _font_matrix$[ebp+4], edx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _font_matrix$[ebp+8], ecx
mov	edx, DWORD PTR [eax+12]
mov	DWORD PTR _font_matrix$[ebp+12], edx
movzx	eax, BYTE PTR _fd_index$17[ebp]
mov	ecx, DWORD PTR _cff$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1900]
mov	eax, DWORD PTR [edx+72]
mov	ecx, DWORD PTR [edx+76]
mov	DWORD PTR _font_offset$[ebp], eax
mov	DWORD PTR _font_offset$[ebp+4], ecx
mov	edx, DWORD PTR _top_upm$19[ebp]
cmp	edx, DWORD PTR _sub_upm$18[ebp]
je	SHORT $LN34@cff_slot_l
mov	eax, DWORD PTR _sub_upm$18[ebp]
push	eax
mov	ecx, DWORD PTR _top_upm$19[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [edx+164]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+164], eax
mov	edx, DWORD PTR _sub_upm$18[ebp]
push	edx
mov	eax, DWORD PTR _top_upm$19[ebp]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+168]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+168], eax
mov	BYTE PTR _force_scaling$[ebp], 1
jmp	SHORT $LN33@cff_slot_l
mov	edx, DWORD PTR _cff$[ebp]
add	edx, 1372				
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _font_matrix$[ebp], eax
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR _font_matrix$[ebp+4], ecx
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _font_matrix$[ebp+8], eax
mov	ecx, DWORD PTR [edx+12]
mov	DWORD PTR _font_matrix$[ebp+12], ecx
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1396]
mov	ecx, DWORD PTR [edx+1400]
mov	DWORD PTR _font_offset$[ebp], eax
mov	DWORD PTR _font_offset$[ebp+4], ecx
xor	edx, edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	WORD PTR [eax+110], dx
xor	ecx, ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [edx+108], cx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 2
jne	SHORT $LN58@cff_slot_l
mov	BYTE PTR tv321[ebp], 1
jmp	SHORT $LN59@cff_slot_l
mov	BYTE PTR tv321[ebp], 0
mov	cl, BYTE PTR tv321[ebp]
mov	BYTE PTR _hinting$[ebp], cl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1
jne	SHORT $LN60@cff_slot_l
mov	BYTE PTR tv324[ebp], 1
jmp	SHORT $LN61@cff_slot_l
mov	BYTE PTR tv324[ebp], 0
mov	al, BYTE PTR tv324[ebp]
mov	BYTE PTR _scaled$[ebp], al
mov	ecx, DWORD PTR _glyph$[ebp]
mov	dl, BYTE PTR _hinting$[ebp]
mov	BYTE PTR [ecx+160], dl
mov	eax, DWORD PTR _glyph$[ebp]
mov	cl, BYTE PTR _scaled$[ebp]
mov	BYTE PTR [eax+161], cl
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+72], 1869968492		
mov	eax, DWORD PTR _load_flags$[ebp]
sar	eax, 16					
and	eax, 15					
push	eax
movzx	ecx, BYTE PTR _hinting$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cff_decoder_init
add	esp, 24					
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 256				
je	SHORT $LN32@cff_slot_l
mov	BYTE PTR _decoder$[ebp+753], 1
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 1024				
mov	BYTE PTR _decoder$[ebp+66], cl
lea	edx, DWORD PTR _charstring_len$15[ebp]
push	edx
lea	eax, DWORD PTR _charstring$16[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_cff_get_glyph_data
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN31@cff_slot_l
jmp	$Glyph_Build_Finished$79
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cff_decoder_prepare
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN30@cff_slot_l
jmp	$Glyph_Build_Finished$79
mov	eax, DWORD PTR _charstring_len$15[ebp]
push	eax
mov	ecx, DWORD PTR _charstring$16[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_decoder_parse_charstrings
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 164				
jne	SHORT $LN29@cff_slot_l
mov	BYTE PTR _hinting$[ebp], 0
mov	BYTE PTR _force_scaling$[ebp], 1
mov	ecx, DWORD PTR _glyph$[ebp]
mov	dl, BYTE PTR _hinting$[ebp]
mov	BYTE PTR [ecx+160], dl
mov	eax, DWORD PTR _charstring_len$15[ebp]
push	eax
mov	ecx, DWORD PTR _charstring$16[ebp]
push	ecx
lea	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_cf2_decoder_parse_charstrings
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _charstring_len$15[ebp]
push	eax
lea	ecx, DWORD PTR _charstring$16[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_cff_free_glyph_data
add	esp, 12					
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN28@cff_slot_l
jmp	$Glyph_Build_Finished$79
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN27@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+136], 0
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+140], 0
jmp	SHORT $Glyph_Build_Finished$79
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 1176				
mov	DWORD PTR _csindex$14[ebp], ecx
mov	edx, DWORD PTR _csindex$14[ebp]
cmp	DWORD PTR [edx+24], 0
je	SHORT $Glyph_Build_Finished$79
mov	eax, DWORD PTR _csindex$14[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _csindex$14[ebp]
mov	eax, DWORD PTR [edx+28]
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
lea	edx, DWORD PTR [eax+ecx-1]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+136], edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _charstring_len$15[ebp]
mov	DWORD PTR [ecx+140], edx
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN24@cff_slot_l
lea	eax, DWORD PTR _decoder$[ebp]
push	eax
call	_cff_builder_done
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
jne	$LN23@cff_slot_l
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+48], 0
je	$LN23@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx]
cmp	DWORD PTR [eax+8], 0
je	$LN23@cff_slot_l
mov	ecx, DWORD PTR _decoder$[ebp+32]
mov	DWORD PTR _metrics$13[ebp], ecx
mov	DWORD PTR _metrics$13[ebp+4], 0
mov	edx, DWORD PTR _decoder$[ebp+40]
mov	DWORD PTR _metrics$13[ebp+8], edx
mov	eax, DWORD PTR _decoder$[ebp+44]
mov	DWORD PTR _metrics$13[ebp+12], eax
mov	esi, esp
lea	ecx, DWORD PTR _metrics$13[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _metrics$13[ebp]
mov	DWORD PTR _decoder$[ebp+32], eax
mov	ecx, DWORD PTR _metrics$13[ebp+8]
mov	DWORD PTR _decoder$[ebp+40], ecx
mov	edx, DWORD PTR _metrics$13[ebp+12]
mov	DWORD PTR _decoder$[ebp+44], edx
cmp	DWORD PTR _error$[ebp], 0
jne	$LN22@cff_slot_l
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1024				
je	SHORT $LN21@cff_slot_l
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	DWORD PTR _internal$12[ebp], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _decoder$[ebp+32]
mov	DWORD PTR [eax+32], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _decoder$[ebp+744]
mov	DWORD PTR [edx+40], eax
mov	ecx, DWORD PTR _internal$12[ebp]
add	ecx, 12					
mov	edx, DWORD PTR _font_matrix$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _font_matrix$[ebp+4]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _font_matrix$[ebp+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _font_matrix$[ebp+12]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _internal$12[ebp]
mov	edx, DWORD PTR _font_offset$[ebp]
mov	DWORD PTR [ecx+28], edx
mov	eax, DWORD PTR _font_offset$[ebp+4]
mov	DWORD PTR [ecx+32], eax
mov	ecx, DWORD PTR _internal$12[ebp]
mov	BYTE PTR [ecx+8], 1
jmp	$LN22@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 24					
mov	DWORD PTR _metrics$10[ebp], edx
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR _decoder$[ebp+744]
mov	DWORD PTR [eax+16], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _decoder$[ebp+744]
mov	DWORD PTR [edx+56], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	BYTE PTR [edx+8], 0
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN62@cff_slot_l
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+330]
test	eax, eax
jle	SHORT $LN62@cff_slot_l
mov	BYTE PTR tv457[ebp], 1
jmp	SHORT $LN63@cff_slot_l
mov	BYTE PTR tv457[ebp], 0
mov	cl, BYTE PTR tv457[ebp]
mov	BYTE PTR _has_vertical_info$8[ebp], cl
movzx	edx, BYTE PTR _has_vertical_info$8[ebp]
test	edx, edx
je	SHORT $LN19@cff_slot_l
xor	eax, eax
mov	WORD PTR _vertBearingY$7[ebp], ax
xor	ecx, ecx
mov	WORD PTR _vertAdvance$6[ebp], cx
mov	esi, esp
lea	edx, DWORD PTR _vertAdvance$6[ebp]
push	edx
lea	eax, DWORD PTR _vertBearingY$7[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
push	1
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	edx, DWORD PTR [ecx+112]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
movsx	eax, WORD PTR _vertBearingY$7[ebp]
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [ecx+24], eax
movzx	edx, WORD PTR _vertAdvance$6[ebp]
mov	eax, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [eax+28], edx
jmp	SHORT $LN18@cff_slot_l
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+364]
cmp	edx, 65535				
je	SHORT $LN17@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+434]
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+436]
sub	ecx, eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+28], ecx
jmp	SHORT $LN18@cff_slot_l
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+220]
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+222]
sub	ecx, eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+60], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+72], 1869968492		
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+124], 0
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN15@cff_slot_l
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, WORD PTR [edx+14]
cmp	eax, 24					
jge	SHORT $LN15@cff_slot_l
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 256				
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 4
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
cmp	DWORD PTR _font_matrix$[ebp], 65536	
jne	SHORT $LN13@cff_slot_l
cmp	DWORD PTR _font_matrix$[ebp+12], 65536	
jne	SHORT $LN13@cff_slot_l
cmp	DWORD PTR _font_matrix$[ebp+4], 0
jne	SHORT $LN13@cff_slot_l
cmp	DWORD PTR _font_matrix$[ebp+8], 0
je	SHORT $LN14@cff_slot_l
lea	ecx, DWORD PTR _font_matrix$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
push	edx
call	_FT_Outline_Transform
add	esp, 8
cmp	DWORD PTR _font_offset$[ebp], 0
jne	SHORT $LN11@cff_slot_l
cmp	DWORD PTR _font_offset$[ebp+4], 0
je	SHORT $LN12@cff_slot_l
mov	eax, DWORD PTR _font_offset$[ebp+4]
push	eax
mov	ecx, DWORD PTR _font_offset$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
push	edx
call	_FT_Outline_Translate
add	esp, 12					
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR _advance$9[ebp], ecx
mov	DWORD PTR _advance$9[ebp+4], 0
lea	edx, DWORD PTR _font_matrix$[ebp]
push	edx
lea	eax, DWORD PTR _advance$9[ebp]
push	eax
call	_FT_Vector_Transform
add	esp, 8
mov	ecx, DWORD PTR _advance$9[ebp]
add	ecx, DWORD PTR _font_offset$[ebp]
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+16], ecx
mov	DWORD PTR _advance$9[ebp], 0
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _advance$9[ebp+4], ecx
lea	edx, DWORD PTR _font_matrix$[ebp]
push	edx
lea	eax, DWORD PTR _advance$9[ebp]
push	eax
call	_FT_Vector_Transform
add	esp, 8
mov	ecx, DWORD PTR _advance$9[ebp+4]
add	ecx, DWORD PTR _font_offset$[ebp+4]
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1
je	SHORT $LN9@cff_slot_l
movzx	ecx, BYTE PTR _force_scaling$[ebp]
test	ecx, ecx
je	$LN10@cff_slot_l
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
mov	DWORD PTR _cur$4[ebp], edx
mov	eax, DWORD PTR _cur$4[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$3[ebp], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [edx+164]
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+168]
mov	DWORD PTR _y_scale$1[ebp], edx
movzx	eax, BYTE PTR _hinting$[ebp]
test	eax, eax
je	SHORT $LN7@cff_slot_l
cmp	DWORD PTR _decoder$[ebp+68], 0
jne	SHORT $LN8@cff_slot_l
mov	ecx, DWORD PTR _cur$4[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	DWORD PTR _n$5[ebp], edx
jmp	SHORT $LN6@cff_slot_l
mov	eax, DWORD PTR _n$5[ebp]
sub	eax, 1
mov	DWORD PTR _n$5[ebp], eax
mov	ecx, DWORD PTR _vec$3[ebp]
add	ecx, 8
mov	DWORD PTR _vec$3[ebp], ecx
cmp	DWORD PTR _n$5[ebp], 0
jle	SHORT $LN8@cff_slot_l
mov	edx, DWORD PTR _x_scale$2[ebp]
push	edx
mov	eax, DWORD PTR _vec$3[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _vec$3[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _vec$3[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _vec$3[ebp]
mov	DWORD PTR [ecx+4], eax
jmp	SHORT $LN5@cff_slot_l
mov	edx, DWORD PTR _x_scale$2[ebp]
push	edx
mov	eax, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [ecx+28], eax
lea	edx, DWORD PTR _cbox$11[ebp]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Get_CBox
add	esp, 8
mov	ecx, DWORD PTR _cbox$11[ebp+8]
sub	ecx, DWORD PTR _cbox$11[ebp]
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _cbox$11[ebp+12]
sub	eax, DWORD PTR _cbox$11[ebp+4]
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	eax, DWORD PTR _cbox$11[ebp]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR _cbox$11[ebp+12]
mov	DWORD PTR [ecx+12], edx
movzx	eax, BYTE PTR _has_vertical_info$8[ebp]
test	eax, eax
je	SHORT $LN3@cff_slot_l
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	eax, DWORD PTR [ecx+16]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _metrics$10[ebp]
mov	ecx, DWORD PTR [edx+8]
sub	ecx, eax
mov	edx, DWORD PTR _metrics$10[ebp]
mov	DWORD PTR [edx+20], ecx
jmp	SHORT $LN22@cff_slot_l
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 16					
je	SHORT $LN22@cff_slot_l
mov	ecx, DWORD PTR _metrics$10[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _metrics$10[ebp]
push	eax
call	_ft_synthesize_vertical_metrics
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN78@cff_slot_l
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 1228				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	13					
DD	$LN77@cff_slot_l
DD	-944					
DD	932					
DD	$LN64@cff_slot_l
DD	-980					
DD	16					
DD	$LN65@cff_slot_l
DD	-996					
DD	8
DD	$LN66@cff_slot_l
DD	-1032					
DD	16					
DD	$LN67@cff_slot_l
DD	-1048					
DD	2
DD	$LN68@cff_slot_l
DD	-1060					
DD	2
DD	$LN69@cff_slot_l
DD	-1084					
DD	4
DD	$LN70@cff_slot_l
DD	-1096					
DD	4
DD	$LN71@cff_slot_l
DD	-1124					
DD	16					
DD	$LN72@cff_slot_l
DD	-1152					
DD	16					
DD	$LN73@cff_slot_l
DD	-1172					
DD	8
DD	$LN74@cff_slot_l
DD	-1188					
DD	2
DD	$LN75@cff_slot_l
DD	-1200					
DD	2
DD	$LN76@cff_slot_l
DB	118					
DB	101					
DB	114					
DB	116					
DB	65					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	0
DB	118					
DB	101					
DB	114					
DB	116					
DB	66					
DB	101					
DB	97					
DB	114					
DB	105					
DB	110					
DB	103					
DB	89					
DB	0
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	0
DB	99					
DB	98					
DB	111					
DB	120					
DB	0
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
DB	99					
DB	104					
DB	97					
DB	114					
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	99					
DB	104					
DB	97					
DB	114					
DB	115					
DB	116					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
DB	100					
DB	117					
DB	109					
DB	109					
DB	121					
DB	0
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	0
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
DB	102					
DB	111					
DB	110					
DB	116					
DB	95					
DB	111					
DB	102					
DB	102					
DB	115					
DB	101					
DB	116					
DB	0
DB	102					
DB	111					
DB	110					
DB	116					
DB	95					
DB	109					
DB	97					
DB	116					
DB	114					
DB	105					
DB	120					
DB	0
DB	100					
DB	101					
DB	99					
DB	111					
DB	100					
DB	101					
DB	114					
DB	0
ENDP
_cff_decoder_prepare PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	DWORD PTR _builder$[ebp], eax
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$[ebp], eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 1324				
mov	DWORD PTR _sub$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [edx+1896], 0
je	$LN11@cff_decode
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$[ebp]
add	ecx, 2924				
push	ecx
call	_cff_fd_select_get
add	esp, 8
mov	BYTE PTR _fd_index$2[ebp], al
movzx	edx, BYTE PTR _fd_index$2[ebp]
mov	eax, DWORD PTR _cff$[ebp]
cmp	edx, DWORD PTR [eax+1896]
jb	SHORT $LN5@cff_decode
mov	ecx, 4
imul	edx, ecx, 47
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN8@cff_decode
push	OFFSET $SG12076
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN9@cff_decode
push	OFFSET $SG12077
push	433					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$14
mov	ecx, 4
imul	edx, ecx, 47
cmp	DWORD PTR _ft_trace_levels[edx], 3
jl	SHORT $LN4@cff_decode
movzx	eax, BYTE PTR _fd_index$2[ebp]
push	eax
push	OFFSET $SG12083
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN5@cff_decode
movzx	edx, BYTE PTR _fd_index$2[ebp]
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1900]
mov	DWORD PTR _sub$[ebp], ecx
mov	edx, DWORD PTR _builder$[ebp]
cmp	DWORD PTR [edx+68], 0
je	SHORT $LN11@cff_decode
cmp	DWORD PTR _size$[ebp], 0
je	SHORT $LN11@cff_decode
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR _internal$1[ebp], ecx
movzx	edx, BYTE PTR _fd_index$2[ebp]
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR _internal$1[ebp]
mov	edx, DWORD PTR [ecx+edx*4+4]
mov	DWORD PTR [eax+72], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+544]
mov	DWORD PTR [eax+888], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+568]
mov	DWORD PTR [eax+904], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR [eax+888]
push	ecx
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR [edx+76]
mov	ecx, DWORD PTR [eax+1368]
push	ecx
call	_cff_compute_bias
add	esp, 8
mov	edx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+896], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+528]
mov	DWORD PTR [eax+744], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR [eax+748], edx
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _sub$[ebp]
mov	DWORD PTR [eax+928], ecx
mov	eax, DWORD PTR _error$[ebp]
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_decoder_init PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$[ebp], ecx
push	932					
push	0
mov	edx, DWORD PTR _decoder$[ebp]
push	edx
call	_memset
add	esp, 12					
movzx	eax, BYTE PTR _hinting$[ebp]
push	eax
mov	ecx, DWORD PTR _slot$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _decoder$[ebp]
push	ecx
call	_cff_builder_init
add	esp, 20					
mov	edx, DWORD PTR _decoder$[ebp]
mov	eax, DWORD PTR _cff$[ebp]
mov	DWORD PTR [edx+76], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+92]
mov	DWORD PTR [ecx+892], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1308]
mov	DWORD PTR [ecx+908], eax
mov	ecx, DWORD PTR _decoder$[ebp]
mov	edx, DWORD PTR [ecx+892]
push	edx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR [eax+1368]
push	ecx
call	_cff_compute_bias
add	esp, 8
mov	edx, DWORD PTR _decoder$[ebp]
mov	DWORD PTR [edx+900], eax
mov	eax, DWORD PTR _decoder$[ebp]
mov	ecx, DWORD PTR _hint_mode$[ebp]
mov	DWORD PTR [eax+920], ecx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_free_glyph_data PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN2@cff_free_g
mov	edx, DWORD PTR _pointer$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _data$2[ebp], eax
mov	ecx, DWORD PTR _length$[ebp]
mov	DWORD PTR _data$2[ebp+4], ecx
mov	esi, esp
lea	edx, DWORD PTR _data$2[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN3@cff_free_g
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _cff$1[ebp], ecx
mov	edx, DWORD PTR _pointer$[ebp]
push	edx
mov	eax, DWORD PTR _cff$1[ebp]
add	eax, 1176				
push	eax
call	_cff_index_forget_element
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@cff_free_g
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN6@cff_free_g
DD	-12					
DD	8
DD	$LN5@cff_free_g
DB	100					
DB	97					
DB	116					
DB	97					
DB	0
ENDP
_cff_get_glyph_data PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	SHORT $LN2@cff_get_gl
mov	esi, esp
lea	edx, DWORD PTR _data$3[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$2[ebp], eax
mov	ecx, DWORD PTR _pointer$[ebp]
mov	edx, DWORD PTR _data$3[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _length$[ebp]
mov	ecx, DWORD PTR _data$3[ebp+4]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _error$2[ebp]
jmp	SHORT $LN3@cff_get_gl
jmp	SHORT $LN3@cff_get_gl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$1[ebp], eax
mov	ecx, DWORD PTR _length$[ebp]
push	ecx
mov	edx, DWORD PTR _pointer$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$1[ebp]
add	ecx, 1176				
push	ecx
call	_cff_index_access_element
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@cff_get_gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN6@cff_get_gl
DD	-12					
DD	8
DD	$LN5@cff_get_gl
DB	100					
DB	97					
DB	116					
DB	97					
DB	0
ENDP
_cff_lookup_glyph_by_stdcharcode PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _cff$[ebp]
cmp	DWORD PTR [eax+1160], 0
jne	SHORT $LN7@cff_lookup
or	eax, -1
jmp	SHORT $LN8@cff_lookup
cmp	DWORD PTR _charcode$[ebp], 0
jl	SHORT $LN5@cff_lookup
cmp	DWORD PTR _charcode$[ebp], 255		
jle	SHORT $LN6@cff_lookup
or	eax, -1
jmp	SHORT $LN8@cff_lookup
mov	ecx, DWORD PTR _charcode$[ebp]
push	ecx
call	_cff_get_standard_encoding
add	esp, 4
mov	WORD PTR _glyph_sid$[ebp], ax
mov	DWORD PTR _n$[ebp], 0
jmp	SHORT $LN4@cff_lookup
mov	edx, DWORD PTR _n$[ebp]
add	edx, 1
mov	DWORD PTR _n$[ebp], edx
mov	eax, DWORD PTR _cff$[ebp]
mov	ecx, DWORD PTR _n$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jae	SHORT $LN2@cff_lookup
mov	edx, DWORD PTR _cff$[ebp]
mov	eax, DWORD PTR [edx+1160]
mov	ecx, DWORD PTR _n$[ebp]
movzx	edx, WORD PTR [eax+ecx*2]
movzx	eax, WORD PTR _glyph_sid$[ebp]
cmp	edx, eax
jne	SHORT $LN1@cff_lookup
mov	eax, DWORD PTR _n$[ebp]
jmp	SHORT $LN8@cff_lookup
jmp	SHORT $LN3@cff_lookup
or	eax, -1
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_close_contour PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _outline$[ebp], ecx
cmp	DWORD PTR _outline$[ebp], 0
jne	SHORT $LN7@cff_builde
jmp	$LN8@cff_builde
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx]
cmp	eax, 1
jg	SHORT $LN10@cff_builde
mov	DWORD PTR tv77[ebp], 0
jmp	SHORT $LN11@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+edx*2-4]
add	edx, 1
mov	DWORD PTR tv77[ebp], edx
mov	eax, DWORD PTR tv77[ebp]
mov	DWORD PTR _first$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
cmp	edx, 1
jle	SHORT $LN6@cff_builde
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _first$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _p1$3[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
lea	edx, DWORD PTR [ecx+edx*8-8]
mov	DWORD PTR _p2$2[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
lea	ecx, DWORD PTR [eax+ecx-1]
mov	DWORD PTR _control$1[ebp], ecx
mov	edx, DWORD PTR _p1$3[ebp]
mov	eax, DWORD PTR _p2$2[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax]
jne	SHORT $LN6@cff_builde
mov	edx, DWORD PTR _p1$3[ebp]
mov	eax, DWORD PTR _p2$2[ebp]
mov	ecx, DWORD PTR [edx+4]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN6@cff_builde
mov	edx, DWORD PTR _control$1[ebp]
movzx	eax, BYTE PTR [edx]
cmp	eax, 1
jne	SHORT $LN6@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR [ecx+2]
sub	dx, 1
mov	eax, DWORD PTR _outline$[ebp]
mov	WORD PTR [eax+2], dx
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
test	edx, edx
jle	SHORT $LN8@cff_builde
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
sub	ecx, 1
cmp	DWORD PTR _first$[ebp], ecx
jne	SHORT $LN2@cff_builde
mov	edx, DWORD PTR _outline$[ebp]
mov	ax, WORD PTR [edx]
sub	ax, 1
mov	ecx, DWORD PTR _outline$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _outline$[ebp]
mov	ax, WORD PTR [edx+2]
sub	ax, 1
mov	ecx, DWORD PTR _outline$[ebp]
mov	WORD PTR [ecx+2], ax
jmp	SHORT $LN8@cff_builde
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
sub	eax, 1
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx]
mov	ecx, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [ecx+12]
mov	WORD PTR [ecx+edx*2-2], ax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_start_point PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _builder$[ebp]
movzx	ecx, BYTE PTR [eax+64]
test	ecx, ecx
jne	SHORT $LN2@cff_builde
mov	edx, DWORD PTR _builder$[ebp]
mov	BYTE PTR [edx+64], 1
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_contour
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@cff_builde
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_point1
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_add_point1 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
push	1
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_check_points
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@cff_builde
push	1
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
mov	eax, DWORD PTR _builder$[ebp]
push	eax
call	_cff_builder_add_point
add	esp, 16					
mov	eax, DWORD PTR _error$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_builder_add_point PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _builder$[ebp]
movzx	eax, BYTE PTR [edx+65]
test	eax, eax
je	SHORT $LN1@cff_builde
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _point$2[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
add	ecx, DWORD PTR [edx+8]
mov	DWORD PTR _control$1[ebp], ecx
mov	eax, DWORD PTR _x$[ebp]
sar	eax, 10					
mov	ecx, DWORD PTR _point$2[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _y$[ebp]
sar	edx, 10					
mov	eax, DWORD PTR _point$2[ebp]
mov	DWORD PTR [eax+4], edx
movzx	ecx, BYTE PTR _flag$[ebp]
test	ecx, ecx
je	SHORT $LN4@cff_builde
mov	DWORD PTR tv83[ebp], 1
jmp	SHORT $LN5@cff_builde
mov	DWORD PTR tv83[ebp], 2
mov	edx, DWORD PTR _control$1[ebp]
mov	al, BYTE PTR tv83[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR [ecx+2]
add	dx, 1
mov	eax, DWORD PTR _outline$[ebp]
mov	WORD PTR [eax+2], dx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_check_points PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _count$[ebp], 0
je	SHORT $LN3@cff_check_
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	edx, WORD PTR [ecx+22]
mov	eax, DWORD PTR _builder$[ebp]
mov	ecx, DWORD PTR [eax+12]
movsx	eax, WORD PTR [ecx+58]
add	edx, DWORD PTR _count$[ebp]
add	eax, edx
mov	ecx, DWORD PTR _builder$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	eax, DWORD PTR [edx+4]
ja	SHORT $LN4@cff_check_
mov	eax, 1
test	eax, eax
je	SHORT $LN4@cff_check_
mov	DWORD PTR tv82[ebp], 0
jmp	SHORT $LN5@cff_check_
push	0
mov	ecx, DWORD PTR _count$[ebp]
push	ecx
mov	edx, DWORD PTR _builder$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv82[ebp], eax
mov	eax, DWORD PTR tv82[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_driver_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _module$[ebp], eax
pop	ebp
ret	0
ENDP
_cff_driver_init PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [ecx+28], 1
mov	edx, DWORD PTR _driver$[ebp]
mov	BYTE PTR [edx+32], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 500		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [ecx+eax+36], 400		
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _driver$[ebp]
mov	DWORD PTR [eax+edx+36], 1000		
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _driver$[ebp]
mov	DWORD PTR [eax+edx+36], 275		
mov	ecx, 4
shl	ecx, 2
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 1667		
mov	eax, 4
imul	ecx, eax, 5
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 275		
mov	eax, 4
imul	ecx, eax, 6
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 2333		
mov	eax, 4
imul	ecx, eax, 7
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+ecx+36], 0
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_face_done PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN6@cff_face_d
jmp	SHORT $LN7@cff_face_d
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$[ebp], ecx
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN5@cff_face_d
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax+12]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _cff$1[ebp], eax
cmp	DWORD PTR _cff$1[ebp], 0
je	SHORT $LN7@cff_face_d
mov	ecx, DWORD PTR _cff$1[ebp]
push	ecx
call	_cff_font_done
add	esp, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+656], 0
xor	eax, eax
jne	SHORT $LN3@cff_face_d
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_face_init PROC
push	ebp
mov	ebp, esp
sub	esp, 196				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-196]
mov	ecx, 49					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	BYTE PTR _pure_cff$[ebp], 1
mov	BYTE PTR _sfnt_format$[ebp], 0
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$[ebp], eax
push	OFFSET $SG11376
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module_Interface
add	esp, 8
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
jne	SHORT $LN92@cff_face_i
push	OFFSET $SG11378
call	_FT_Message
add	esp, 4
push	OFFSET $SG11379
push	503					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$110
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	DWORD PTR _module$32[ebp], eax
push	OFFSET $SG11388
mov	ecx, DWORD PTR _module$32[ebp]
push	ecx
call	_ft_module_get_service
add	esp, 8
mov	DWORD PTR __tmp_$31[ebp], eax
mov	edx, DWORD PTR __tmp_$31[ebp]
mov	DWORD PTR _psnames$[ebp], edx
xor	eax, eax
jne	SHORT $LN92@cff_face_i
push	OFFSET $SG11390
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module_Interface
add	esp, 8
mov	DWORD PTR _pshinter$[ebp], eax
mov	edx, 4
imul	eax, edx, 49
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN88@cff_face_i
push	OFFSET $SG11395
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN89@cff_face_i
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN85@cff_face_i
jmp	$Exit$110
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN84@cff_face_i
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+148], 1330926671		
je	SHORT $LN83@cff_face_i
mov	edx, 4
imul	eax, edx, 49
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN81@cff_face_i
push	OFFSET $SG11409
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN82@cff_face_i
push	OFFSET $SG11410
push	525					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$110
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN78@cff_face_i
xor	eax, eax
jmp	$LN94@cff_face_i
mov	BYTE PTR _sfnt_format$[ebp], 1
mov	esi, esp
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1751474532				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN77@cff_face_i
mov	BYTE PTR _pure_cff$[ebp], 0
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN76@cff_face_i
jmp	$Exit$110
jmp	SHORT $LN75@cff_face_i
mov	esi, esp
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax+32]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN75@cff_face_i
jmp	$Exit$110
mov	esi, esp
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1128678944				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN73@cff_face_i
jmp	$Exit$110
jmp	SHORT $LN72@cff_face_i
push	0
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN71@cff_face_i
jmp	$Exit$110
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _cff$30[ebp], 0
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$28[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	2980					
mov	ecx, DWORD PTR _memory$28[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _cff$30[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN70@cff_face_i
jmp	$Exit$110
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _cff$30[ebp]
mov	DWORD PTR [edx+656], eax
movzx	ecx, BYTE PTR _pure_cff$[ebp]
push	ecx
mov	edx, DWORD PTR _cff$30[ebp]
push	edx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _library$[ebp]
push	edx
call	_cff_font_load
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN69@cff_face_i
jmp	$Exit$110
mov	eax, DWORD PTR _cff$30[ebp]
mov	ecx, DWORD PTR _pshinter$[ebp]
mov	DWORD PTR [eax+2952], ecx
mov	edx, DWORD PTR _cff$30[ebp]
mov	eax, DWORD PTR _psnames$[ebp]
mov	DWORD PTR [edx+2956], eax
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _face_index$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR _cff$30[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+16], edx
mov	eax, DWORD PTR _cff$30[ebp]
add	eax, 1324				
mov	DWORD PTR _dict$29[ebp], eax
mov	ecx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [ecx+132], 65535		
jne	SHORT $LN67@cff_face_i
cmp	DWORD PTR _psnames$[ebp], 0
jne	SHORT $LN67@cff_face_i
push	OFFSET $SG11440
call	_FT_Message
add	esp, 4
push	OFFSET $SG11441
push	607					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$110
mov	edx, 4
imul	eax, edx, 49
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN66@cff_face_i
push	OFFSET $SG11448
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN67@cff_face_i
mov	DWORD PTR _idx$25[ebp], 0
jmp	SHORT $LN63@cff_face_i
mov	edx, DWORD PTR _idx$25[ebp]
add	edx, 1
mov	DWORD PTR _idx$25[ebp], edx
mov	eax, DWORD PTR _cff$30[ebp]
mov	ecx, DWORD PTR [eax+1312]
add	ecx, 390				
cmp	DWORD PTR _idx$25[ebp], ecx
jae	SHORT $LN61@cff_face_i
mov	edx, DWORD PTR _idx$25[ebp]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _s$24[ebp], eax
cmp	DWORD PTR _s$24[ebp], 0
je	SHORT $LN60@cff_face_i
mov	ecx, 4
imul	edx, ecx, 49
cmp	DWORD PTR _ft_trace_levels[edx], 4
jl	SHORT $LN58@cff_face_i
mov	eax, DWORD PTR _s$24[ebp]
push	eax
mov	ecx, DWORD PTR _idx$25[ebp]
push	ecx
push	OFFSET $SG11457
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN59@cff_face_i
jmp	SHORT $LN62@cff_face_i
mov	eax, DWORD PTR _dict$29[ebp]
movzx	ecx, BYTE PTR [eax+64]
test	ecx, ecx
jne	SHORT $LN55@cff_face_i
movzx	edx, BYTE PTR _pure_cff$[ebp]
test	edx, edx
je	SHORT $LN96@cff_face_i
mov	DWORD PTR tv234[ebp], 1000		
jmp	SHORT $LN97@cff_face_i
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
mov	DWORD PTR tv234[ebp], ecx
mov	edx, DWORD PTR _dict$29[ebp]
mov	eax, DWORD PTR tv234[ebp]
mov	DWORD PTR [edx+68], eax
mov	ecx, DWORD PTR _dict$29[ebp]
add	ecx, 48					
mov	DWORD PTR _matrix$23[ebp], ecx
mov	edx, DWORD PTR _dict$29[ebp]
add	edx, 72					
mov	DWORD PTR _offset$22[ebp], edx
mov	eax, DWORD PTR _dict$29[ebp]
add	eax, 68					
mov	DWORD PTR _upm$21[ebp], eax
mov	ecx, DWORD PTR _matrix$23[ebp]
cmp	DWORD PTR [ecx+12], 0
jge	SHORT $LN98@cff_face_i
mov	edx, DWORD PTR _matrix$23[ebp]
mov	eax, DWORD PTR [edx+12]
neg	eax
mov	DWORD PTR tv243[ebp], eax
jmp	SHORT $LN99@cff_face_i
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR tv243[ebp], edx
mov	eax, DWORD PTR tv243[ebp]
mov	DWORD PTR _temp$20[ebp], eax
cmp	DWORD PTR _temp$20[ebp], 65536		
je	$LN54@cff_face_i
mov	ecx, DWORD PTR _temp$20[ebp]
push	ecx
mov	edx, DWORD PTR _upm$21[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _upm$21[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _temp$20[ebp]
push	edx
mov	eax, DWORD PTR _matrix$23[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$20[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _temp$20[ebp]
push	edx
mov	eax, DWORD PTR _matrix$23[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _temp$20[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$23[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _temp$20[ebp]
push	edx
mov	eax, DWORD PTR _offset$22[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$20[ebp]
push	eax
mov	ecx, DWORD PTR _offset$22[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _offset$22[ebp]
mov	eax, DWORD PTR [edx]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _offset$22[ebp]
mov	eax, DWORD PTR [edx+4]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$22[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _cff$30[ebp]
mov	eax, DWORD PTR [edx+1896]
mov	DWORD PTR _i$26[ebp], eax
jmp	SHORT $LN53@cff_face_i
mov	ecx, DWORD PTR _i$26[ebp]
sub	ecx, 1
mov	DWORD PTR _i$26[ebp], ecx
cmp	DWORD PTR _i$26[ebp], 0
jbe	$LN51@cff_face_i
mov	edx, DWORD PTR _i$26[ebp]
mov	eax, DWORD PTR _cff$30[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1896]
mov	DWORD PTR _sub$19[ebp], ecx
mov	edx, DWORD PTR _cff$30[ebp]
add	edx, 1324				
mov	DWORD PTR _top$18[ebp], edx
mov	eax, DWORD PTR _sub$19[ebp]
movzx	ecx, BYTE PTR [eax+64]
test	ecx, ecx
je	$LN50@cff_face_i
mov	edx, DWORD PTR _top$18[ebp]
movzx	eax, BYTE PTR [edx+64]
test	eax, eax
je	$LN49@cff_face_i
mov	ecx, DWORD PTR _top$18[ebp]
cmp	DWORD PTR [ecx+68], 1
jbe	SHORT $LN48@cff_face_i
mov	edx, DWORD PTR _sub$19[ebp]
cmp	DWORD PTR [edx+68], 1
jbe	SHORT $LN48@cff_face_i
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR _sub$19[ebp]
mov	edx, DWORD PTR [eax+68]
cmp	edx, DWORD PTR [ecx+68]
jae	SHORT $LN100@cff_face_i
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	DWORD PTR tv308[ebp], ecx
jmp	SHORT $LN101@cff_face_i
mov	edx, DWORD PTR _sub$19[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR tv308[ebp], eax
mov	ecx, DWORD PTR tv308[ebp]
mov	DWORD PTR _scaling$13[ebp], ecx
jmp	SHORT $LN47@cff_face_i
mov	DWORD PTR _scaling$13[ebp], 1
mov	edx, DWORD PTR _scaling$13[ebp]
push	edx
mov	eax, DWORD PTR _sub$19[ebp]
add	eax, 48					
push	eax
mov	ecx, DWORD PTR _top$18[ebp]
add	ecx, 48					
push	ecx
call	_FT_Matrix_Multiply_Scaled
add	esp, 12					
mov	edx, DWORD PTR _scaling$13[ebp]
push	edx
mov	eax, DWORD PTR _top$18[ebp]
add	eax, 48					
push	eax
mov	ecx, DWORD PTR _sub$19[ebp]
add	ecx, 72					
push	ecx
call	_FT_Vector_Transform_Scaled
add	esp, 12					
mov	edx, DWORD PTR _scaling$13[ebp]
push	edx
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR [eax+68]
push	ecx
mov	edx, DWORD PTR _sub$19[ebp]
mov	eax, DWORD PTR [edx+68]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _sub$19[ebp]
mov	DWORD PTR [ecx+68], eax
jmp	SHORT $LN46@cff_face_i
mov	edx, DWORD PTR _top$18[ebp]
add	edx, 48					
mov	eax, DWORD PTR _sub$19[ebp]
add	eax, 48					
mov	ecx, DWORD PTR [edx]
mov	DWORD PTR [eax], ecx
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR [edx+8]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _top$18[ebp]
mov	ecx, DWORD PTR [eax+72]
mov	edx, DWORD PTR [eax+76]
mov	eax, DWORD PTR _sub$19[ebp]
mov	DWORD PTR [eax+72], ecx
mov	DWORD PTR [eax+76], edx
mov	ecx, DWORD PTR _sub$19[ebp]
mov	edx, DWORD PTR _top$18[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR [ecx+68], eax
mov	ecx, DWORD PTR _sub$19[ebp]
add	ecx, 48					
mov	DWORD PTR _matrix$17[ebp], ecx
mov	edx, DWORD PTR _sub$19[ebp]
add	edx, 72					
mov	DWORD PTR _offset$16[ebp], edx
mov	eax, DWORD PTR _sub$19[ebp]
add	eax, 68					
mov	DWORD PTR _upm$15[ebp], eax
mov	ecx, DWORD PTR _matrix$17[ebp]
cmp	DWORD PTR [ecx+12], 0
jge	SHORT $LN102@cff_face_i
mov	edx, DWORD PTR _matrix$17[ebp]
mov	eax, DWORD PTR [edx+12]
neg	eax
mov	DWORD PTR tv342[ebp], eax
jmp	SHORT $LN103@cff_face_i
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR tv342[ebp], edx
mov	eax, DWORD PTR tv342[ebp]
mov	DWORD PTR _temp$14[ebp], eax
cmp	DWORD PTR _temp$14[ebp], 65536		
je	$LN45@cff_face_i
mov	ecx, DWORD PTR _temp$14[ebp]
push	ecx
mov	edx, DWORD PTR _upm$15[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _upm$15[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _temp$14[ebp]
push	edx
mov	eax, DWORD PTR _matrix$17[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$14[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _temp$14[ebp]
push	edx
mov	eax, DWORD PTR _matrix$17[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _temp$14[ebp]
push	eax
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _matrix$17[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _temp$14[ebp]
push	edx
mov	eax, DWORD PTR _offset$16[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _temp$14[ebp]
push	eax
mov	ecx, DWORD PTR _offset$16[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _offset$16[ebp]
mov	eax, DWORD PTR [edx]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _offset$16[ebp]
mov	eax, DWORD PTR [edx+4]
sar	eax, 16					
mov	ecx, DWORD PTR _offset$16[ebp]
mov	DWORD PTR [ecx+4], eax
jmp	$LN52@cff_face_i
movzx	edx, BYTE PTR _pure_cff$[ebp]
test	edx, edx
je	$LN44@cff_face_i
mov	DWORD PTR _style_name$12[ebp], 0
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR _cff$30[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [eax+132], 65535		
je	SHORT $LN43@cff_face_i
mov	ecx, DWORD PTR _cff$30[ebp]
mov	edx, DWORD PTR [ecx+1168]
add	edx, 1
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+16], edx
jmp	SHORT $LN42@cff_face_i
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _cff$30[ebp]
mov	eax, DWORD PTR [edx+1184]
mov	DWORD PTR [ecx+16], eax
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+84]
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+52], edx
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+88]
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+56], edx
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+92]
add	edx, 65535				
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+60], edx
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+96]
add	edx, 65535				
sar	edx, 16					
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+64], edx
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _dict$29[ebp]
mov	ax, WORD PTR [edx+68]
mov	WORD PTR [ecx+68], ax
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _cffface$[ebp]
mov	ax, WORD PTR [edx+64]
mov	WORD PTR [ecx+70], ax
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _cffface$[ebp]
mov	ax, WORD PTR [edx+56]
mov	WORD PTR [ecx+72], ax
mov	ecx, DWORD PTR _cffface$[ebp]
movzx	edx, WORD PTR [ecx+68]
imul	eax, edx, 12
cdq
mov	ecx, 10					
idiv	ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+74], ax
mov	eax, DWORD PTR _cffface$[ebp]
movsx	ecx, WORD PTR [eax+74]
mov	edx, DWORD PTR _cffface$[ebp]
movsx	eax, WORD PTR [edx+70]
mov	edx, DWORD PTR _cffface$[ebp]
movsx	edx, WORD PTR [edx+72]
sub	eax, edx
cmp	ecx, eax
jge	SHORT $LN41@cff_face_i
mov	eax, DWORD PTR _cffface$[ebp]
movsx	ecx, WORD PTR [eax+70]
mov	edx, DWORD PTR _cffface$[ebp]
movsx	eax, WORD PTR [edx+72]
sub	ecx, eax
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+74], cx
mov	eax, DWORD PTR _dict$29[ebp]
mov	ecx, DWORD PTR [eax+32]
sar	ecx, 16					
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+80], cx
mov	eax, DWORD PTR _dict$29[ebp]
mov	ecx, DWORD PTR [eax+36]
sar	ecx, 16					
mov	edx, DWORD PTR _cffface$[ebp]
mov	WORD PTR [edx+82], cx
mov	eax, DWORD PTR _face_index$[ebp]
push	eax
mov	ecx, DWORD PTR _cff$30[ebp]
push	ecx
call	_cff_index_get_name
add	esp, 8
mov	edx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [edx+20], eax
mov	eax, DWORD PTR _cffface$[ebp]
cmp	DWORD PTR [eax+20], 0
je	$LN40@cff_face_i
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _full$11[ebp], eax
mov	ecx, DWORD PTR _full$11[ebp]
mov	DWORD PTR _fullp$10[ebp], ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _family$9[ebp], eax
mov	DWORD PTR _family_name$8[ebp], 0
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
call	_remove_subset_prefix
add	esp, 4
mov	eax, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [eax+16], 0
je	SHORT $LN39@cff_face_i
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _family_name$8[ebp], eax
cmp	DWORD PTR _family_name$8[ebp], 0
je	SHORT $LN39@cff_face_i
mov	ecx, DWORD PTR _family_name$8[ebp]
mov	DWORD PTR _family$9[ebp], ecx
cmp	DWORD PTR _full$11[ebp], 0
je	$LN37@cff_face_i
cmp	DWORD PTR _family$9[ebp], 0
je	$LN37@cff_face_i
mov	edx, DWORD PTR _fullp$10[ebp]
movsx	eax, BYTE PTR [edx]
test	eax, eax
je	$LN37@cff_face_i
mov	ecx, DWORD PTR _fullp$10[ebp]
movsx	edx, BYTE PTR [ecx]
mov	eax, DWORD PTR _family$9[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	edx, ecx
jne	SHORT $LN34@cff_face_i
mov	edx, DWORD PTR _family$9[ebp]
add	edx, 1
mov	DWORD PTR _family$9[ebp], edx
mov	eax, DWORD PTR _fullp$10[ebp]
add	eax, 1
mov	DWORD PTR _fullp$10[ebp], eax
jmp	SHORT $LN36@cff_face_i
mov	ecx, DWORD PTR _fullp$10[ebp]
movsx	edx, BYTE PTR [ecx]
cmp	edx, 32					
je	SHORT $LN32@cff_face_i
mov	eax, DWORD PTR _fullp$10[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 45					
jne	SHORT $LN33@cff_face_i
mov	edx, DWORD PTR _fullp$10[ebp]
add	edx, 1
mov	DWORD PTR _fullp$10[ebp], edx
jmp	SHORT $LN36@cff_face_i
mov	eax, DWORD PTR _family$9[ebp]
movsx	ecx, BYTE PTR [eax]
cmp	ecx, 32					
je	SHORT $LN30@cff_face_i
mov	edx, DWORD PTR _family$9[ebp]
movsx	eax, BYTE PTR [edx]
cmp	eax, 45					
jne	SHORT $LN31@cff_face_i
mov	ecx, DWORD PTR _family$9[ebp]
add	ecx, 1
mov	DWORD PTR _family$9[ebp], ecx
jmp	$LN36@cff_face_i
mov	edx, DWORD PTR _family$9[ebp]
movsx	eax, BYTE PTR [edx]
test	eax, eax
jne	SHORT $LN29@cff_face_i
mov	ecx, DWORD PTR _fullp$10[ebp]
movsx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN29@cff_face_i
mov	eax, DWORD PTR _fullp$10[ebp]
push	eax
mov	ecx, DWORD PTR _memory$28[ebp]
push	ecx
call	_cff_strcpy
add	esp, 8
mov	DWORD PTR _style_name$12[ebp], eax
mov	edx, DWORD PTR _style_name$12[ebp]
push	edx
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
call	_remove_style
add	esp, 8
jmp	SHORT $LN37@cff_face_i
jmp	$LN36@cff_face_i
jmp	SHORT $LN28@cff_face_i
mov	edx, DWORD PTR _dict$29[ebp]
mov	eax, DWORD PTR [edx+172]
push	eax
mov	ecx, DWORD PTR _cff$30[ebp]
push	ecx
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _cid_font_name$7[ebp], eax
cmp	DWORD PTR _cid_font_name$7[ebp], 0
je	SHORT $LN28@cff_face_i
mov	edx, DWORD PTR _cid_font_name$7[ebp]
push	edx
mov	eax, DWORD PTR _memory$28[ebp]
push	eax
call	_cff_strcpy
add	esp, 8
mov	ecx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [ecx+20], eax
cmp	DWORD PTR _style_name$12[ebp], 0
je	SHORT $LN26@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR _style_name$12[ebp]
mov	DWORD PTR [edx+24], eax
jmp	SHORT $LN25@cff_face_i
push	OFFSET $SG11517
mov	ecx, DWORD PTR _memory$28[ebp]
push	ecx
call	_cff_strcpy
add	esp, 8
mov	edx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [edx+24], eax
mov	DWORD PTR _flags$27[ebp], 2065		
movzx	eax, BYTE PTR _sfnt_format$[ebp]
test	eax, eax
je	SHORT $LN24@cff_face_i
mov	ecx, DWORD PTR _flags$27[ebp]
or	ecx, 8
mov	DWORD PTR _flags$27[ebp], ecx
mov	edx, DWORD PTR _dict$29[ebp]
movzx	eax, BYTE PTR [edx+24]
test	eax, eax
je	SHORT $LN23@cff_face_i
mov	ecx, DWORD PTR _flags$27[ebp]
or	ecx, 4
mov	DWORD PTR _flags$27[ebp], ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+8]
or	eax, DWORD PTR _flags$27[ebp]
mov	ecx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	DWORD PTR _flags$27[ebp], 0
mov	edx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [edx+28], 0
je	SHORT $LN22@cff_face_i
mov	eax, DWORD PTR _flags$27[ebp]
or	eax, 1
mov	DWORD PTR _flags$27[ebp], eax
mov	ecx, DWORD PTR _dict$29[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _cff$30[ebp]
push	eax
call	_cff_index_get_sid_string
add	esp, 8
mov	DWORD PTR _weight$6[ebp], eax
cmp	DWORD PTR _weight$6[ebp], 0
je	SHORT $LN21@cff_face_i
push	OFFSET $SG11525
mov	ecx, DWORD PTR _weight$6[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
je	SHORT $LN19@cff_face_i
push	OFFSET $SG11526
mov	edx, DWORD PTR _weight$6[ebp]
push	edx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN21@cff_face_i
mov	eax, DWORD PTR _flags$27[ebp]
or	eax, 2
mov	DWORD PTR _flags$27[ebp], eax
mov	ecx, DWORD PTR _flags$27[ebp]
and	ecx, 2
jne	SHORT $LN18@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
cmp	DWORD PTR [edx+24], 0
je	SHORT $LN18@cff_face_i
mov	esi, esp
push	4
push	OFFSET $SG11530
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR [eax+24]
push	ecx
call	DWORD PTR __imp__strncmp
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN16@cff_face_i
mov	esi, esp
push	5
push	OFFSET $SG11531
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
call	DWORD PTR __imp__strncmp
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
jne	SHORT $LN18@cff_face_i
mov	ecx, DWORD PTR _flags$27[ebp]
or	ecx, 2
mov	DWORD PTR _flags$27[ebp], ecx
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR _flags$27[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [ecx+132], 65535		
jne	SHORT $LN15@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+8]
or	eax, 512				
mov	ecx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _dict$29[ebp]
cmp	DWORD PTR [edx+132], 65535		
je	SHORT $LN14@cff_face_i
movzx	eax, BYTE PTR _pure_cff$[ebp]
test	eax, eax
je	SHORT $LN14@cff_face_i
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR [ecx+8]
or	edx, 4096				
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _cff$30[ebp]
add	ecx, 116				
mov	DWORD PTR _encoding$2[ebp], ecx
mov	DWORD PTR _nn$3[ebp], 0
jmp	SHORT $LN13@cff_face_i
mov	edx, DWORD PTR _nn$3[ebp]
add	edx, 1
mov	DWORD PTR _nn$3[ebp], edx
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR _nn$3[ebp]
cmp	ecx, DWORD PTR [eax+36]
jae	SHORT $LN11@cff_face_i
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	ecx, DWORD PTR _nn$3[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _cmap$4[ebp], edx
mov	eax, DWORD PTR _cmap$4[ebp]
movzx	ecx, WORD PTR [eax+8]
cmp	ecx, 3
jne	SHORT $LN10@cff_face_i
mov	edx, DWORD PTR _cmap$4[ebp]
movzx	eax, WORD PTR [edx+10]
cmp	eax, 1
jne	SHORT $LN10@cff_face_i
jmp	$Skip_Unicode$111
mov	ecx, DWORD PTR _cmap$4[ebp]
movzx	edx, WORD PTR [ecx+8]
test	edx, edx
jne	SHORT $LN9@cff_face_i
jmp	$Skip_Unicode$111
jmp	SHORT $LN12@cff_face_i
movzx	eax, BYTE PTR _pure_cff$[ebp]
test	eax, eax
je	SHORT $LN8@cff_face_i
mov	ecx, DWORD PTR _cff$30[ebp]
cmp	DWORD PTR [ecx+1456], 65535		
je	SHORT $LN8@cff_face_i
jmp	$Exit$110
mov	edx, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _cmaprec$5[ebp], edx
mov	eax, 3
mov	WORD PTR _cmaprec$5[ebp+8], ax
mov	ecx, 1
mov	WORD PTR _cmaprec$5[ebp+10], cx
mov	DWORD PTR _cmaprec$5[ebp+4], 1970170211	
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	DWORD PTR _nn$3[ebp], eax
push	0
lea	ecx, DWORD PTR _cmaprec$5[ebp]
push	ecx
push	0
push	OFFSET _cff_cmap_unicode_class_rec
call	_FT_CMap_New
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@cff_face_i
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 163				
je	SHORT $LN7@cff_face_i
jmp	$Exit$110
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _cffface$[ebp]
cmp	DWORD PTR [eax+92], 0
jne	SHORT $Skip_Unicode$111
mov	ecx, DWORD PTR _cffface$[ebp]
mov	edx, DWORD PTR _nn$3[ebp]
cmp	edx, DWORD PTR [ecx+36]
je	SHORT $Skip_Unicode$111
mov	eax, DWORD PTR _cffface$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	edx, DWORD PTR _cffface$[ebp]
mov	eax, DWORD PTR _nn$3[ebp]
mov	ecx, DWORD PTR [ecx+eax*4]
mov	DWORD PTR [edx+92], ecx
mov	edx, DWORD PTR _encoding$2[ebp]
cmp	DWORD PTR [edx+8], 0
jbe	$Exit$110
mov	eax, DWORD PTR _cffface$[ebp]
mov	DWORD PTR _cmaprec$5[ebp], eax
mov	ecx, 7
mov	WORD PTR _cmaprec$5[ebp+8], cx
mov	edx, DWORD PTR _encoding$2[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN4@cff_face_i
xor	eax, eax
mov	WORD PTR _cmaprec$5[ebp+10], ax
mov	DWORD PTR _cmaprec$5[ebp+4], 1094995778	
mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
jmp	SHORT $LN3@cff_face_i
mov	ecx, DWORD PTR _encoding$2[ebp]
cmp	DWORD PTR [ecx+4], 1
jne	SHORT $LN2@cff_face_i
mov	edx, 1
mov	WORD PTR _cmaprec$5[ebp+10], dx
mov	DWORD PTR _cmaprec$5[ebp+4], 1094992453	
mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
jmp	SHORT $LN3@cff_face_i
mov	eax, 2
mov	WORD PTR _cmaprec$5[ebp+10], ax
mov	DWORD PTR _cmaprec$5[ebp+4], 1094992451	
mov	DWORD PTR _clazz$1[ebp], OFFSET _cff_cmap_encoding_class_rec
push	0
lea	ecx, DWORD PTR _cmaprec$5[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _clazz$1[ebp]
push	edx
call	_FT_CMap_New
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN109@cff_face_i
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 196				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	2
DD	$LN108@cff_face_i
DD	-12					
DD	4
DD	$LN106@cff_face_i
DD	-160					
DD	12					
DD	$LN107@cff_face_i
DB	99					
DB	109					
DB	97					
DB	112					
DB	114					
DB	101					
DB	99					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_cff_slot_init PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
mov	DWORD PTR _font$[ebp], eax
mov	ecx, DWORD PTR _font$[ebp]
mov	edx, DWORD PTR [ecx+2952]
mov	DWORD PTR _pshinter$[ebp], edx
cmp	DWORD PTR _pshinter$[ebp], 0
je	SHORT $LN2@cff_slot_i
push	OFFSET $SG11296
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _module$2[ebp], eax
cmp	DWORD PTR _module$2[ebp], 0
je	SHORT $LN2@cff_slot_i
mov	esi, esp
mov	ecx, DWORD PTR _module$2[ebp]
push	ecx
mov	edx, DWORD PTR _pshinter$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _funcs$1[ebp], eax
mov	ecx, DWORD PTR _slot$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR _funcs$1[ebp]
mov	DWORD PTR [edx+36], eax
xor	eax, eax
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_slot_done PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR [ecx+36], 0
pop	ebp
ret	0
ENDP
_cff_size_select PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR _cffsize$[ebp], eax
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	edx, DWORD PTR _strike_index$[ebp]
mov	DWORD PTR [ecx+44], edx
mov	eax, DWORD PTR _strike_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_Select_Metrics
add	esp, 8
mov	eax, DWORD PTR _cffsize$[ebp]
push	eax
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$[ebp], eax
cmp	DWORD PTR _funcs$[ebp], 0
je	$LN6@cff_size_s
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$9[ebp], edx
mov	eax, DWORD PTR _face$9[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _font$8[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	DWORD PTR _internal$7[ebp], eax
mov	ecx, DWORD PTR _font$8[ebp]
mov	edx, DWORD PTR [ecx+1392]
mov	DWORD PTR _top_upm$6[ebp], edx
mov	esi, esp
push	0
push	0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _internal$7[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _funcs$[ebp]
mov	ecx, DWORD PTR [eax+4]
call	ecx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _font$8[ebp]
mov	eax, DWORD PTR [edx+1896]
mov	DWORD PTR _i$5[ebp], eax
jmp	SHORT $LN5@cff_size_s
mov	ecx, DWORD PTR _i$5[ebp]
sub	ecx, 1
mov	DWORD PTR _i$5[ebp], ecx
cmp	DWORD PTR _i$5[ebp], 0
jbe	$LN6@cff_size_s
mov	edx, DWORD PTR _i$5[ebp]
mov	eax, DWORD PTR _font$8[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1896]
mov	DWORD PTR _sub$4[ebp], ecx
mov	edx, DWORD PTR _sub$4[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR _sub_upm$3[ebp], eax
mov	ecx, DWORD PTR _top_upm$6[ebp]
cmp	ecx, DWORD PTR _sub_upm$3[ebp]
je	SHORT $LN2@cff_size_s
mov	edx, DWORD PTR _sub_upm$3[ebp]
push	edx
mov	eax, DWORD PTR _top_upm$6[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _x_scale$2[ebp], eax
mov	eax, DWORD PTR _sub_upm$3[ebp]
push	eax
mov	ecx, DWORD PTR _top_upm$6[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _y_scale$1[ebp], eax
jmp	SHORT $LN1@cff_size_s
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _x_scale$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _y_scale$1[ebp], ecx
mov	esi, esp
push	0
push	0
mov	edx, DWORD PTR _y_scale$1[ebp]
push	edx
mov	eax, DWORD PTR _x_scale$2[ebp]
push	eax
mov	ecx, DWORD PTR _i$5[ebp]
mov	edx, DWORD PTR _internal$7[ebp]
mov	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _funcs$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN4@cff_size_s
xor	eax, eax
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_size_request PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR _cffsize$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
and	eax, 2
je	SHORT $LN9@cff_size_r
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _cffface$12[ebp], edx
mov	eax, DWORD PTR _cffface$12[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$11[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _strike_index$10[ebp]
push	edx
mov	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _cffface$12[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$11[ebp]
mov	eax, DWORD PTR [edx+104]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN8@cff_size_r
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR [ecx+44], -1
jmp	SHORT $LN9@cff_size_r
mov	edx, DWORD PTR _strike_index$10[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_cff_size_select
add	esp, 8
jmp	$LN10@cff_size_r
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_Request_Metrics
add	esp, 8
mov	ecx, DWORD PTR _cffsize$[ebp]
push	ecx
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$[ebp], eax
cmp	DWORD PTR _funcs$[ebp], 0
je	$LN6@cff_size_r
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _cffface$9[ebp], eax
mov	ecx, DWORD PTR _cffface$9[ebp]
mov	edx, DWORD PTR [ecx+656]
mov	DWORD PTR _font$8[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+40]
mov	DWORD PTR _internal$7[ebp], ecx
mov	edx, DWORD PTR _font$8[ebp]
mov	eax, DWORD PTR [edx+1392]
mov	DWORD PTR _top_upm$6[ebp], eax
mov	esi, esp
push	0
push	0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _internal$7[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _funcs$[ebp]
mov	edx, DWORD PTR [ecx+4]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _font$8[ebp]
mov	ecx, DWORD PTR [eax+1896]
mov	DWORD PTR _i$5[ebp], ecx
jmp	SHORT $LN5@cff_size_r
mov	edx, DWORD PTR _i$5[ebp]
sub	edx, 1
mov	DWORD PTR _i$5[ebp], edx
cmp	DWORD PTR _i$5[ebp], 0
jbe	$LN6@cff_size_r
mov	eax, DWORD PTR _i$5[ebp]
mov	ecx, DWORD PTR _font$8[ebp]
mov	edx, DWORD PTR [ecx+eax*4+1896]
mov	DWORD PTR _sub$4[ebp], edx
mov	eax, DWORD PTR _sub$4[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	DWORD PTR _sub_upm$3[ebp], ecx
mov	edx, DWORD PTR _top_upm$6[ebp]
cmp	edx, DWORD PTR _sub_upm$3[ebp]
je	SHORT $LN2@cff_size_r
mov	eax, DWORD PTR _sub_upm$3[ebp]
push	eax
mov	ecx, DWORD PTR _top_upm$6[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _sub_upm$3[ebp]
push	ecx
mov	edx, DWORD PTR _top_upm$6[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _y_scale$1[ebp], eax
jmp	SHORT $LN1@cff_size_r
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _y_scale$1[ebp], edx
mov	esi, esp
push	0
push	0
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _x_scale$2[ebp]
push	ecx
mov	edx, DWORD PTR _i$5[ebp]
mov	eax, DWORD PTR _internal$7[ebp]
mov	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	edx, DWORD PTR _funcs$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN4@cff_size_r
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@cff_size_r
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN13@cff_size_r
DD	-24					
DD	4
DD	$LN12@cff_size_r
DB	115					
DB	116					
DB	114					
DB	105					
DB	107					
DB	101					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_cff_size_done PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+656]
mov	DWORD PTR _font$[ebp], ecx
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR [edx+40]
mov	DWORD PTR _internal$[ebp], eax
cmp	DWORD PTR _internal$[ebp], 0
je	SHORT $LN6@cff_size_d
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$2[ebp], eax
cmp	DWORD PTR _funcs$2[ebp], 0
je	SHORT $LN6@cff_size_d
mov	esi, esp
mov	edx, DWORD PTR _internal$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _funcs$2[ebp]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _font$[ebp]
mov	ecx, DWORD PTR [eax+1896]
mov	DWORD PTR _i$1[ebp], ecx
jmp	SHORT $LN3@cff_size_d
mov	edx, DWORD PTR _i$1[ebp]
sub	edx, 1
mov	DWORD PTR _i$1[ebp], edx
cmp	DWORD PTR _i$1[ebp], 0
jbe	SHORT $LN6@cff_size_d
mov	esi, esp
mov	eax, DWORD PTR _i$1[ebp]
mov	ecx, DWORD PTR _internal$[ebp]
mov	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR _funcs$2[ebp]
mov	ecx, DWORD PTR [eax+8]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN2@cff_size_d
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_cff_size_init PROC
push	ebp
mov	ebp, esp
sub	esp, 252				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-252]
mov	ecx, 63					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _cffsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_cff_size_get_globals_funcs
add	esp, 4
mov	DWORD PTR _funcs$[ebp], eax
cmp	DWORD PTR _funcs$[ebp], 0
je	$LN7@cff_size_i
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _face$7[ebp], eax
mov	ecx, DWORD PTR _face$7[ebp]
mov	edx, DWORD PTR [ecx+656]
mov	DWORD PTR _font$6[ebp], edx
mov	DWORD PTR _internal$5[ebp], 0
mov	eax, DWORD PTR _cffsize$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$3[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	1028					
mov	ecx, DWORD PTR _memory$3[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _internal$5[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@cff_size_i
jmp	$Exit$14
lea	edx, DWORD PTR _priv$4[ebp]
push	edx
mov	eax, DWORD PTR _font$6[ebp]
add	eax, 1324				
push	eax
call	_cff_make_private_dict
add	esp, 8
mov	ecx, DWORD PTR _internal$5[ebp]
mov	esi, esp
push	ecx
lea	edx, DWORD PTR _priv$4[ebp]
push	edx
mov	eax, DWORD PTR _cffsize$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+100]
push	edx
mov	eax, DWORD PTR _funcs$[ebp]
mov	ecx, DWORD PTR [eax]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@cff_size_i
jmp	$Exit$14
mov	edx, DWORD PTR _font$6[ebp]
mov	eax, DWORD PTR [edx+1896]
mov	DWORD PTR _i$2[ebp], eax
jmp	SHORT $LN4@cff_size_i
mov	ecx, DWORD PTR _i$2[ebp]
sub	ecx, 1
mov	DWORD PTR _i$2[ebp], ecx
cmp	DWORD PTR _i$2[ebp], 0
jbe	SHORT $LN2@cff_size_i
mov	edx, DWORD PTR _i$2[ebp]
mov	eax, DWORD PTR _font$6[ebp]
mov	ecx, DWORD PTR [eax+edx*4+1896]
mov	DWORD PTR _sub$1[ebp], ecx
lea	edx, DWORD PTR _priv$4[ebp]
push	edx
mov	eax, DWORD PTR _sub$1[ebp]
push	eax
call	_cff_make_private_dict
add	esp, 8
mov	ecx, DWORD PTR _i$2[ebp]
mov	edx, DWORD PTR _internal$5[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	esi, esp
push	eax
lea	ecx, DWORD PTR _priv$4[ebp]
push	ecx
mov	edx, DWORD PTR _cffsize$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+100]
push	ecx
mov	edx, DWORD PTR _funcs$[ebp]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@cff_size_i
jmp	SHORT $Exit$14
jmp	$LN3@cff_size_i
mov	ecx, DWORD PTR _cffsize$[ebp]
mov	edx, DWORD PTR _internal$5[ebp]
mov	DWORD PTR [ecx+40], edx
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+44], -1
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@cff_size_i
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 252				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN12@cff_size_i
DD	-16					
DD	4
DD	$LN10@cff_size_i
DD	-236					
DD	196					
DD	$LN11@cff_size_i
DB	112					
DB	114					
DB	105					
DB	118					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
