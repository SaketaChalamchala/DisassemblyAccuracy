_ft_var_apply_tuple PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _apply$[ebp], 65536		
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN16@ft_var_app
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR [ecx]
jae	$LN14@ft_var_app
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _tuple_coords$[ebp]
cmp	DWORD PTR [ecx+eax*4], 0
jne	SHORT $LN13@ft_var_app
jmp	SHORT $LN15@ft_var_app
jmp	$LN12@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
cmp	DWORD PTR [eax+ecx*4], 0
je	SHORT $LN10@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
cmp	DWORD PTR [eax+ecx*4], 0
jge	SHORT $LN9@ft_var_app
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _tuple_coords$[ebp]
cmp	DWORD PTR [eax+edx*4], 0
jg	SHORT $LN10@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
cmp	DWORD PTR [edx+eax*4], 0
jle	SHORT $LN11@ft_var_app
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _tuple_coords$[ebp]
cmp	DWORD PTR [edx+ecx*4], 0
jge	SHORT $LN11@ft_var_app
mov	DWORD PTR _apply$[ebp], 0
jmp	$LN14@ft_var_app
jmp	$LN12@ft_var_app
movzx	eax, WORD PTR _tupleIndex$[ebp]
and	eax, 16384				
jne	SHORT $LN7@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
cmp	DWORD PTR [edx+eax*4], 0
jle	SHORT $LN19@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
mov	DWORD PTR tv135[ebp], ecx
jmp	SHORT $LN20@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
neg	edx
mov	DWORD PTR tv135[ebp], edx
mov	eax, DWORD PTR tv135[ebp]
push	eax
mov	ecx, DWORD PTR _apply$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _apply$[ebp], eax
jmp	$LN12@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_start_coords$[ebp]
mov	eax, DWORD PTR [eax+ecx*4]
cmp	eax, DWORD PTR [esi+edx*4]
jle	SHORT $LN4@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_end_coords$[ebp]
mov	edx, DWORD PTR [edx+eax*4]
cmp	edx, DWORD PTR [esi+ecx*4]
jl	SHORT $LN5@ft_var_app
mov	DWORD PTR _apply$[ebp], 0
jmp	$LN14@ft_var_app
jmp	$LN12@ft_var_app
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _tuple_coords$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
cmp	ecx, DWORD PTR [esi+eax*4]
jge	SHORT $LN2@ft_var_app
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _tuple_coords$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_start_coords$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
sub	edx, DWORD PTR [esi+ecx*4]
push	edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_start_coords$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
sub	ecx, DWORD PTR [esi+eax*4]
push	ecx
mov	edx, DWORD PTR _apply$[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _apply$[ebp], eax
jmp	SHORT $LN12@ft_var_app
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _im_end_coords$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _tuple_coords$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
sub	eax, DWORD PTR [esi+edx*4]
push	eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _im_end_coords$[ebp]
mov	esi, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
sub	eax, DWORD PTR [edx+esi*4]
push	eax
mov	ecx, DWORD PTR _apply$[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _apply$[ebp], eax
jmp	$LN15@ft_var_app
mov	eax, DWORD PTR _apply$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_var_load_gvar PROC
push	ebp
mov	ebp, esp
sub	esp, 84					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 21					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	esi, esp
lea	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1735811442				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN25@ft_var_loa
jmp	$Exit$33
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _gvar_start$[ebp], eax
lea	eax, DWORD PTR _gvar_head$[ebp]
push	eax
push	OFFSET ?gvar_fields@?1??ft_var_load_gvar@@9@9
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@ft_var_loa
jmp	$Exit$33
movzx	edx, WORD PTR _gvar_head$[ebp+6]
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+24], edx
movzx	ecx, WORD PTR _gvar_head$[ebp+12]
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+32], ecx
mov	eax, DWORD PTR _gvar_start$[ebp]
add	eax, DWORD PTR _gvar_head$[ebp+16]
mov	DWORD PTR _offsetToData$[ebp], eax
cmp	DWORD PTR _gvar_head$[ebp], 65536	
jne	SHORT $LN22@ft_var_loa
movzx	ecx, WORD PTR _gvar_head$[ebp+4]
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+8]
movzx	edx, WORD PTR [eax]
cmp	ecx, edx
je	SHORT $LN23@ft_var_loa
push	OFFSET $SG13603
push	417					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$33
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+32]
add	edx, 1
push	edx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+36], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@ft_var_loa
jmp	$Exit$33
movzx	edx, WORD PTR _gvar_head$[ebp+14]
and	edx, 1
je	SHORT $LN20@ft_var_loa
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+32]
lea	edx, DWORD PTR [ecx*4+4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN19@ft_var_loa
jmp	$Exit$33
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN18@ft_var_loa
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+32]
ja	SHORT $LN16@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetULong
add	esp, 4
add	eax, DWORD PTR _offsetToData$[ebp]
mov	edx, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [edx+36]
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
jmp	SHORT $LN17@ft_var_loa
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	SHORT $LN15@ft_var_loa
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+32]
lea	eax, DWORD PTR [edx+edx+2]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@ft_var_loa
jmp	$Exit$33
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN13@ft_var_loa
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+32]
ja	SHORT $LN11@ft_var_loa
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	eax, ax
mov	ecx, DWORD PTR _offsetToData$[ebp]
lea	edx, DWORD PTR [ecx+eax*2]
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN12@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExitFrame
add	esp, 4
mov	edx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [edx+24], 0
je	$Exit$33
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movzx	ecx, WORD PTR _gvar_head$[ebp+4]
mov	edx, DWORD PTR _blend$[ebp]
imul	ecx, DWORD PTR [edx+24]
push	ecx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+28], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@ft_var_loa
jmp	$Exit$33
mov	edx, DWORD PTR _gvar_start$[ebp]
add	edx, DWORD PTR _gvar_head$[ebp+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_var_loa
movzx	ecx, WORD PTR _gvar_head$[ebp+4]
mov	edx, DWORD PTR _blend$[ebp]
imul	ecx, DWORD PTR [edx+24]
shl	ecx, 1
push	ecx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@ft_var_loa
jmp	SHORT $Exit$33
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN6@ft_var_loa
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+24]
jae	SHORT $LN4@ft_var_loa
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@ft_var_loa
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
movzx	edx, WORD PTR _gvar_head$[ebp+4]
cmp	DWORD PTR _j$[ebp], edx
jae	SHORT $LN1@ft_var_loa
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movsx	ecx, ax
shl	ecx, 2
movzx	edx, WORD PTR _gvar_head$[ebp+4]
imul	edx, DWORD PTR _i$[ebp]
add	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [eax+28]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN2@ft_var_loa
jmp	SHORT $LN5@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExitFrame
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN32@ft_var_loa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	3
DD	$LN31@ft_var_loa
DD	-24					
DD	4
DD	$LN28@ft_var_loa
DD	-44					
DD	4
DD	$LN29@ft_var_loa
DD	-80					
DD	20					
DD	$LN30@ft_var_loa
DB	103					
DB	118					
DB	97					
DB	114					
DB	95					
DB	104					
DB	101					
DB	97					
DB	100					
DB	0
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_var_load_avar PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	BYTE PTR [ecx+16], 1
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1635148146				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@ft_var_loa
jmp	$LN22@ft_var_loa
mov	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@ft_var_loa
jmp	$LN22@ft_var_loa
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetULong
add	esp, 4
mov	DWORD PTR _version$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetULong
add	esp, 4
mov	DWORD PTR _axisCount$[ebp], eax
cmp	DWORD PTR _version$[ebp], 65536		
jne	SHORT $LN18@ft_var_loa
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _axisCount$[ebp]
cmp	ecx, DWORD PTR [eax]
je	SHORT $LN19@ft_var_loa
jmp	$Exit$28
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _axisCount$[ebp]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+20], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN17@ft_var_loa
jmp	$Exit$28
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _blend$[ebp]
add	ecx, DWORD PTR [edx+20]
mov	DWORD PTR _segment$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN16@ft_var_loa
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _segment$[ebp]
add	ecx, 8
mov	DWORD PTR _segment$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _axisCount$[ebp]
jge	$Exit$28
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
mov	ecx, DWORD PTR _segment$[ebp]
mov	WORD PTR [ecx], ax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _segment$[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _segment$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@ft_var_loa
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _j$[ebp], edx
jmp	SHORT $LN12@ft_var_loa
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
mov	DWORD PTR _j$[ebp], eax
cmp	DWORD PTR _j$[ebp], 0
jl	SHORT $LN6@ft_var_loa
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR [edx+eax*8+4]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _j$[ebp]
mov	DWORD PTR [ecx+edx*8+4], 0
xor	eax, eax
jne	SHORT $LN9@ft_var_loa
jmp	SHORT $LN11@ft_var_loa
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+20], 0
xor	edx, edx
jne	SHORT $LN6@ft_var_loa
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+20], 0
jmp	SHORT $Exit$28
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@ft_var_loa
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _segment$[ebp]
movzx	eax, WORD PTR [edx]
cmp	DWORD PTR _j$[ebp], eax
jge	SHORT $LN1@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _segment$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR [ecx+eax*8], edx
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _segment$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR [ecx+eax*8+4], edx
jmp	SHORT $LN2@ft_var_loa
jmp	$LN15@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExitFrame
add	esp, 4
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN27@ft_var_loa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN26@ft_var_loa
DD	-24					
DD	4
DD	$LN24@ft_var_loa
DD	-52					
DD	4
DD	$LN25@ft_var_loa
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_var_readpackeddeltas PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _deltas$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _delta_cnt$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _deltas$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@ft_var_rea
xor	eax, eax
jmp	$LN21@ft_var_rea
mov	DWORD PTR _i$[ebp], 0
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _delta_cnt$[ebp]
jae	$LN18@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetChar
add	esp, 4
movzx	edx, al
mov	DWORD PTR _runcnt$[ebp], edx
mov	eax, DWORD PTR _runcnt$[ebp]
and	eax, 128				
je	SHORT $LN17@ft_var_rea
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN16@ft_var_rea
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 63					
cmp	DWORD PTR _j$[ebp], edx
ja	SHORT $LN14@ft_var_rea
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _delta_cnt$[ebp]
jae	SHORT $LN14@ft_var_rea
xor	ecx, ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
mov	WORD PTR [eax+edx*2], cx
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN15@ft_var_rea
jmp	$LN13@ft_var_rea
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 64					
je	SHORT $LN12@ft_var_rea
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN11@ft_var_rea
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _runcnt$[ebp]
and	ecx, 63					
cmp	DWORD PTR _j$[ebp], ecx
ja	SHORT $LN9@ft_var_rea
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _delta_cnt$[ebp]
jae	SHORT $LN9@ft_var_rea
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _deltas$[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN10@ft_var_rea
jmp	SHORT $LN13@ft_var_rea
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN7@ft_var_rea
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 63					
cmp	DWORD PTR _j$[ebp], edx
ja	SHORT $LN13@ft_var_rea
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _delta_cnt$[ebp]
jae	SHORT $LN13@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetChar
add	esp, 4
movsx	dx, al
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
mov	WORD PTR [ecx+eax*2], dx
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
jmp	SHORT $LN6@ft_var_rea
mov	eax, DWORD PTR _runcnt$[ebp]
and	eax, 63					
cmp	DWORD PTR _j$[ebp], eax
ja	SHORT $LN4@ft_var_rea
mov	ecx, DWORD PTR _deltas$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@ft_var_rea
xor	eax, eax
jmp	SHORT $LN21@ft_var_rea
jmp	$LN19@ft_var_rea
mov	eax, DWORD PTR _deltas$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@ft_var_rea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN24@ft_var_rea
DD	-28					
DD	4
DD	$LN23@ft_var_rea
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_var_readpackedpoints PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _points$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetChar
add	esp, 4
movzx	ecx, al
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _point_cnt$[ebp]
mov	eax, DWORD PTR _n$[ebp]
mov	DWORD PTR [edx], eax
cmp	DWORD PTR _n$[ebp], 0
jne	SHORT $LN17@ft_var_rea
or	eax, -1
jmp	$LN18@ft_var_rea
mov	ecx, DWORD PTR _n$[ebp]
and	ecx, 128				
je	SHORT $LN16@ft_var_rea
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetChar
add	esp, 4
movzx	eax, al
mov	ecx, DWORD PTR _n$[ebp]
and	ecx, 127				
shl	ecx, 8
or	eax, ecx
mov	DWORD PTR _n$[ebp], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _n$[ebp]
push	eax
push	0
push	2
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _points$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@ft_var_rea
xor	eax, eax
jmp	$LN18@ft_var_rea
mov	DWORD PTR _i$[ebp], 0
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _n$[ebp]
jge	$Exit$23
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetChar
add	esp, 4
movzx	ecx, al
mov	DWORD PTR _runcnt$[ebp], ecx
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 128				
je	$LN12@ft_var_rea
mov	eax, DWORD PTR _runcnt$[ebp]
and	eax, 127				
mov	DWORD PTR _runcnt$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
mov	WORD PTR tv95[ebp], ax
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _points$[ebp]
mov	cx, WORD PTR tv95[ebp]
mov	WORD PTR [eax+edx*2], cx
movzx	edx, WORD PTR tv95[ebp]
mov	DWORD PTR _first$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _runcnt$[ebp], 1
jl	SHORT $LN10@ft_var_rea
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, DWORD PTR _runcnt$[ebp]
cmp	ecx, DWORD PTR _n$[ebp]
jl	SHORT $LN11@ft_var_rea
jmp	$Exit$23
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN9@ft_var_rea
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _runcnt$[ebp]
jge	SHORT $LN7@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
add	edx, DWORD PTR _first$[ebp]
mov	DWORD PTR _first$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	dx, WORD PTR _first$[ebp]
mov	WORD PTR [ecx+eax*2], dx
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN8@ft_var_rea
jmp	$LN6@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetChar
add	esp, 4
movzx	dx, al
mov	WORD PTR tv147[ebp], dx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	dx, WORD PTR tv147[ebp]
mov	WORD PTR [ecx+eax*2], dx
movzx	eax, WORD PTR tv147[ebp]
mov	DWORD PTR _first$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _runcnt$[ebp], 1
jl	SHORT $LN4@ft_var_rea
mov	edx, DWORD PTR _i$[ebp]
add	edx, DWORD PTR _runcnt$[ebp]
cmp	edx, DWORD PTR _n$[ebp]
jl	SHORT $LN5@ft_var_rea
jmp	SHORT $Exit$23
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@ft_var_rea
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _runcnt$[ebp]
jge	SHORT $LN6@ft_var_rea
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetChar
add	esp, 4
movzx	eax, al
add	eax, DWORD PTR _first$[ebp]
mov	DWORD PTR _first$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _points$[ebp]
mov	ax, WORD PTR _first$[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN2@ft_var_rea
jmp	$LN14@ft_var_rea
mov	eax, DWORD PTR _points$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@ft_var_rea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN21@ft_var_rea
DD	-36					
DD	4
DD	$LN20@ft_var_rea
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_Ins_UNKNOWN PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+416]
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+408], 24
add	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], ecx
mov	edx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], edx
jmp	SHORT $LN5@Ins_UNKNOW
mov	eax, DWORD PTR _def$[ebp]
add	eax, 24					
mov	DWORD PTR _def$[ebp], eax
mov	ecx, DWORD PTR _def$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jae	$LN3@Ins_UNKNOW
mov	edx, DWORD PTR _def$[ebp]
movzx	eax, BYTE PTR [edx+12]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
cmp	eax, edx
jne	$LN2@Ins_UNKNOW
mov	eax, DWORD PTR _def$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	$LN2@Ins_UNKNOW
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+428]
cmp	ecx, DWORD PTR [eax+432]
jl	SHORT $LN1@Ins_UNKNOW
push	OFFSET $SG13049
push	7866					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN6@Ins_UNKNOW
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+436]
mov	DWORD PTR _call$1[ebp], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
add	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+428], ecx
mov	eax, DWORD PTR _call$1[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 1
mov	edx, DWORD PTR _call$1[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _call$1[ebp]
mov	DWORD PTR [eax+8], 1
mov	ecx, DWORD PTR _call$1[ebp]
mov	edx, DWORD PTR _def$[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _def$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_Goto_CodeRange
add	esp, 12					
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
jmp	SHORT $LN6@Ins_UNKNOW
jmp	$LN4@Ins_UNKNOW
push	OFFSET $SG13050
push	7884					
push	128					
call	_FT_Throw
add	esp, 12					
or	eax, 128				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_GETINFO PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _K$[ebp], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 1
je	SHORT $LN4@Ins_GETINF
mov	DWORD PTR _K$[ebp], 35			
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, 2
je	SHORT $LN3@Ins_GETINF
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+281]
test	eax, eax
je	SHORT $LN3@Ins_GETINF
mov	ecx, DWORD PTR _K$[ebp]
or	ecx, 128				
mov	DWORD PTR _K$[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
and	edx, 4
je	SHORT $LN2@Ins_GETINF
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+282]
test	ecx, ecx
je	SHORT $LN2@Ins_GETINF
mov	edx, DWORD PTR _K$[ebp]
or	edx, 256				
mov	DWORD PTR _K$[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 32					
je	SHORT $LN1@Ins_GETINF
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+608]
test	edx, edx
je	SHORT $LN1@Ins_GETINF
mov	eax, DWORD PTR _K$[ebp]
or	eax, 4096				
mov	DWORD PTR _K$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR _K$[ebp]
mov	DWORD PTR [eax+edx], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_DELTAC PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	esi, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+592]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _P$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _nump$[ebp], eax
mov	DWORD PTR _k$[ebp], 1
jmp	SHORT $LN15@Ins_DELTAC
mov	ecx, DWORD PTR _k$[ebp]
add	ecx, 1
mov	DWORD PTR _k$[ebp], ecx
mov	edx, DWORD PTR _k$[ebp]
cmp	edx, DWORD PTR _nump$[ebp]
ja	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 2
jge	SHORT $LN12@Ins_DELTAC
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN11@Ins_DELTAC
push	OFFSET $SG13003
push	7665					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], 0
jmp	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR [eax+ecx*4+4]
mov	DWORD PTR _A$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR [edx+eax*4]
mov	DWORD PTR _B$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _A$[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN10@Ins_DELTAC
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN9@Ins_DELTAC
push	OFFSET $SG13010
push	7679					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN16@Ins_DELTAC
jmp	$LN8@Ins_DELTAC
mov	eax, DWORD PTR _B$[ebp]
and	eax, 240				
shr	eax, 4
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dl, BYTE PTR [ecx+368]
mov	BYTE PTR tv142[ebp], dl
cmp	BYTE PTR tv142[ebp], 116		
je	SHORT $LN4@Ins_DELTAC
cmp	BYTE PTR tv142[ebp], 117		
je	SHORT $LN3@Ins_DELTAC
jmp	SHORT $LN6@Ins_DELTAC
jmp	SHORT $LN6@Ins_DELTAC
mov	eax, DWORD PTR _C$[ebp]
add	eax, 16					
mov	DWORD PTR _C$[ebp], eax
jmp	SHORT $LN6@Ins_DELTAC
mov	ecx, DWORD PTR _C$[ebp]
add	ecx, 32					
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+332]
add	eax, DWORD PTR _C$[ebp]
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _P$[ebp]
cmp	ecx, DWORD PTR _C$[ebp]
jne	SHORT $LN8@Ins_DELTAC
mov	edx, DWORD PTR _B$[ebp]
and	edx, 15					
sub	edx, 8
mov	DWORD PTR _B$[ebp], edx
js	SHORT $LN1@Ins_DELTAC
mov	eax, DWORD PTR _B$[ebp]
add	eax, 1
mov	DWORD PTR _B$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+334]
mov	ecx, 6
sub	ecx, edx
mov	eax, 1
shl	eax, cl
imul	eax, DWORD PTR _B$[ebp]
mov	DWORD PTR _B$[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _B$[ebp]
push	ecx
mov	edx, DWORD PTR _A$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+604]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN14@Ins_DELTAC
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+32], edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_DELTAP PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	esi, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+592]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _P$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _nump$[ebp], eax
mov	DWORD PTR _k$[ebp], 1
jmp	SHORT $LN15@Ins_DELTAP
mov	ecx, DWORD PTR _k$[ebp]
add	ecx, 1
mov	DWORD PTR _k$[ebp], ecx
mov	edx, DWORD PTR _k$[ebp]
cmp	edx, DWORD PTR _nump$[ebp]
ja	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 2
jge	SHORT $LN12@Ins_DELTAP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN11@Ins_DELTAP
push	OFFSET $SG12964
push	7506					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], 0
jmp	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	cx, WORD PTR [eax+ecx*4+4]
mov	WORD PTR _A$[ebp], cx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR [edx+eax*4]
mov	DWORD PTR _B$[ebp], eax
movzx	ecx, WORD PTR _A$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jae	$LN10@Ins_DELTAP
mov	ecx, DWORD PTR _B$[ebp]
and	ecx, 240				
shr	ecx, 4
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	al, BYTE PTR [edx+368]
mov	BYTE PTR tv135[ebp], al
cmp	BYTE PTR tv135[ebp], 113		
je	SHORT $LN6@Ins_DELTAP
cmp	BYTE PTR tv135[ebp], 114		
je	SHORT $LN5@Ins_DELTAP
jmp	SHORT $LN8@Ins_DELTAP
jmp	SHORT $LN8@Ins_DELTAP
mov	ecx, DWORD PTR _C$[ebp]
add	ecx, 16					
mov	DWORD PTR _C$[ebp], ecx
jmp	SHORT $LN8@Ins_DELTAP
mov	edx, DWORD PTR _C$[ebp]
add	edx, 32					
mov	DWORD PTR _C$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+332]
add	ecx, DWORD PTR _C$[ebp]
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _P$[ebp]
cmp	edx, DWORD PTR _C$[ebp]
jne	SHORT $LN4@Ins_DELTAP
mov	eax, DWORD PTR _B$[ebp]
and	eax, 15					
sub	eax, 8
mov	DWORD PTR _B$[ebp], eax
js	SHORT $LN3@Ins_DELTAP
mov	ecx, DWORD PTR _B$[ebp]
add	ecx, 1
mov	DWORD PTR _B$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+334]
mov	ecx, 6
sub	ecx, eax
mov	edx, 1
shl	edx, cl
imul	edx, DWORD PTR _B$[ebp]
mov	DWORD PTR _B$[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _B$[ebp]
push	eax
movzx	ecx, WORD PTR _A$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 36					
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+584]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN2@Ins_DELTAP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_DELTAP
push	OFFSET $SG12983
push	7615					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN14@Ins_DELTAP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+32], edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IUP PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+154]
test	eax, eax
jne	SHORT $LN16@Ins_IUP
jmp	$LN17@Ins_IUP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 1
je	SHORT $LN15@Ins_IUP
mov	BYTE PTR _mask$[ebp], 8
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR _V$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	DWORD PTR _V$[ebp+4], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+164]
mov	DWORD PTR _V$[ebp+8], edx
jmp	SHORT $LN14@Ins_IUP
mov	BYTE PTR _mask$[ebp], 16		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+156]
add	ecx, 4
mov	DWORD PTR _V$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+160]
add	eax, 4
mov	DWORD PTR _V$[ebp+4], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+164]
add	edx, 4
mov	DWORD PTR _V$[ebp+8], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+152]
mov	DWORD PTR _V$[ebp+12], ecx
xor	edx, edx
mov	WORD PTR _contour$[ebp], dx
mov	DWORD PTR _point$[ebp], 0
movsx	eax, WORD PTR _contour$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+172]
movzx	eax, WORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+176]
sub	eax, edx
mov	DWORD PTR _end_point$[ebp], eax
mov	eax, DWORD PTR _point$[ebp]
mov	DWORD PTR _first_point$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+152]
cmp	DWORD PTR _end_point$[ebp], edx
jb	SHORT $LN9@Ins_IUP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+152]
sub	ecx, 1
mov	DWORD PTR _end_point$[ebp], ecx
mov	edx, DWORD PTR _point$[ebp]
cmp	edx, DWORD PTR _end_point$[ebp]
ja	SHORT $LN8@Ins_IUP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+168]
mov	edx, DWORD PTR _point$[ebp]
movzx	eax, BYTE PTR [ecx+edx]
movzx	ecx, BYTE PTR _mask$[ebp]
and	eax, ecx
jne	SHORT $LN8@Ins_IUP
mov	edx, DWORD PTR _point$[ebp]
add	edx, 1
mov	DWORD PTR _point$[ebp], edx
jmp	SHORT $LN9@Ins_IUP
mov	eax, DWORD PTR _point$[ebp]
cmp	eax, DWORD PTR _end_point$[ebp]
ja	$LN7@Ins_IUP
mov	ecx, DWORD PTR _point$[ebp]
mov	DWORD PTR _first_touched$[ebp], ecx
mov	edx, DWORD PTR _point$[ebp]
mov	DWORD PTR _cur_touched$[ebp], edx
mov	eax, DWORD PTR _point$[ebp]
add	eax, 1
mov	DWORD PTR _point$[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
cmp	ecx, DWORD PTR _end_point$[ebp]
ja	SHORT $LN5@Ins_IUP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+168]
mov	ecx, DWORD PTR _point$[ebp]
movzx	edx, BYTE PTR [eax+ecx]
movzx	eax, BYTE PTR _mask$[ebp]
and	edx, eax
je	SHORT $LN4@Ins_IUP
mov	ecx, DWORD PTR _point$[ebp]
push	ecx
mov	edx, DWORD PTR _cur_touched$[ebp]
push	edx
mov	eax, DWORD PTR _point$[ebp]
sub	eax, 1
push	eax
mov	ecx, DWORD PTR _cur_touched$[ebp]
add	ecx, 1
push	ecx
lea	edx, DWORD PTR _V$[ebp]
push	edx
call	__iup_worker_interpolate
add	esp, 20					
mov	eax, DWORD PTR _point$[ebp]
mov	DWORD PTR _cur_touched$[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
add	ecx, 1
mov	DWORD PTR _point$[ebp], ecx
jmp	SHORT $LN6@Ins_IUP
mov	edx, DWORD PTR _cur_touched$[ebp]
cmp	edx, DWORD PTR _first_touched$[ebp]
jne	SHORT $LN3@Ins_IUP
mov	eax, DWORD PTR _cur_touched$[ebp]
push	eax
mov	ecx, DWORD PTR _end_point$[ebp]
push	ecx
mov	edx, DWORD PTR _first_point$[ebp]
push	edx
lea	eax, DWORD PTR _V$[ebp]
push	eax
call	__iup_worker_shift
add	esp, 16					
jmp	SHORT $LN7@Ins_IUP
mov	ecx, DWORD PTR _first_touched$[ebp]
push	ecx
mov	edx, DWORD PTR _cur_touched$[ebp]
push	edx
mov	eax, DWORD PTR _end_point$[ebp]
push	eax
mov	ecx, DWORD PTR _cur_touched$[ebp]
add	ecx, 1
movzx	edx, cx
push	edx
lea	eax, DWORD PTR _V$[ebp]
push	eax
call	__iup_worker_interpolate
add	esp, 20					
cmp	DWORD PTR _first_touched$[ebp], 0
jbe	SHORT $LN7@Ins_IUP
mov	ecx, DWORD PTR _first_touched$[ebp]
push	ecx
mov	edx, DWORD PTR _cur_touched$[ebp]
push	edx
mov	eax, DWORD PTR _first_touched$[ebp]
sub	eax, 1
push	eax
mov	ecx, DWORD PTR _first_point$[ebp]
push	ecx
lea	edx, DWORD PTR _V$[ebp]
push	edx
call	__iup_worker_interpolate
add	esp, 20					
mov	ax, WORD PTR _contour$[ebp]
add	ax, 1
mov	WORD PTR _contour$[ebp], ax
movsx	ecx, WORD PTR _contour$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+154]
cmp	ecx, eax
jl	$LN13@Ins_IUP
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN21@Ins_IUP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN20@Ins_IUP
DD	-20					
DD	16					
DD	$LN19@Ins_IUP
DB	86					
DB	0
ENDP
__iup_worker_interpolate PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _p1$[ebp]
cmp	eax, DWORD PTR _p2$[ebp]
jbe	SHORT $LN19@iup_worker
jmp	$LN20@iup_worker
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR _ref1$[ebp]
cmp	edx, DWORD PTR [ecx+12]
jae	SHORT $LN17@iup_worker
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR _ref2$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jb	SHORT $LN18@iup_worker
jmp	$LN20@iup_worker
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _ref1$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _orus1$[ebp], edx
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _ref2$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _orus2$[ebp], eax
mov	ecx, DWORD PTR _orus1$[ebp]
cmp	ecx, DWORD PTR _orus2$[ebp]
jle	SHORT $LN16@iup_worker
mov	edx, DWORD PTR _orus1$[ebp]
mov	DWORD PTR _tmp_o$6[ebp], edx
mov	eax, DWORD PTR _orus2$[ebp]
mov	DWORD PTR _orus1$[ebp], eax
mov	ecx, DWORD PTR _tmp_o$6[ebp]
mov	DWORD PTR _orus2$[ebp], ecx
mov	edx, DWORD PTR _ref1$[ebp]
mov	DWORD PTR _tmp_r$5[ebp], edx
mov	eax, DWORD PTR _ref2$[ebp]
mov	DWORD PTR _ref1$[ebp], eax
mov	ecx, DWORD PTR _tmp_r$5[ebp]
mov	DWORD PTR _ref2$[ebp], ecx
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _ref1$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _org1$[ebp], edx
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _ref2$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _org2$[ebp], eax
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _ref1$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
sub	ecx, DWORD PTR _org1$[ebp]
mov	DWORD PTR _delta1$[ebp], ecx
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _ref2$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
sub	edx, DWORD PTR _org2$[ebp]
mov	DWORD PTR _delta2$[ebp], edx
mov	eax, DWORD PTR _orus1$[ebp]
cmp	eax, DWORD PTR _orus2$[ebp]
jne	SHORT $LN15@iup_worker
mov	ecx, DWORD PTR _p1$[ebp]
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN14@iup_worker
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _p2$[ebp]
ja	SHORT $LN12@iup_worker
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
mov	DWORD PTR _x$4[ebp], ecx
mov	edx, DWORD PTR _x$4[ebp]
cmp	edx, DWORD PTR _org1$[ebp]
jg	SHORT $LN11@iup_worker
mov	eax, DWORD PTR _x$4[ebp]
add	eax, DWORD PTR _delta1$[ebp]
mov	DWORD PTR _x$4[ebp], eax
jmp	SHORT $LN10@iup_worker
mov	ecx, DWORD PTR _x$4[ebp]
add	ecx, DWORD PTR _delta2$[ebp]
mov	DWORD PTR _x$4[ebp], ecx
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _x$4[ebp]
mov	DWORD PTR [eax+ecx*8], edx
jmp	SHORT $LN13@iup_worker
jmp	$LN20@iup_worker
mov	DWORD PTR _scale$3[ebp], 0
mov	BYTE PTR _scale_valid$2[ebp], 0
mov	eax, DWORD PTR _p1$[ebp]
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN8@iup_worker
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _p2$[ebp]
ja	$LN20@iup_worker
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _x$1[ebp], eax
mov	ecx, DWORD PTR _x$1[ebp]
cmp	ecx, DWORD PTR _org1$[ebp]
jg	SHORT $LN5@iup_worker
mov	edx, DWORD PTR _x$1[ebp]
add	edx, DWORD PTR _delta1$[ebp]
mov	DWORD PTR _x$1[ebp], edx
jmp	SHORT $LN4@iup_worker
mov	eax, DWORD PTR _x$1[ebp]
cmp	eax, DWORD PTR _org2$[ebp]
jl	SHORT $LN3@iup_worker
mov	ecx, DWORD PTR _x$1[ebp]
add	ecx, DWORD PTR _delta2$[ebp]
mov	DWORD PTR _x$1[ebp], ecx
jmp	SHORT $LN4@iup_worker
movzx	edx, BYTE PTR _scale_valid$2[ebp]
test	edx, edx
jne	SHORT $LN1@iup_worker
mov	BYTE PTR _scale_valid$2[ebp], 1
mov	eax, DWORD PTR _orus2$[ebp]
sub	eax, DWORD PTR _orus1$[ebp]
push	eax
mov	ecx, DWORD PTR _org2$[ebp]
add	ecx, DWORD PTR _delta2$[ebp]
mov	edx, DWORD PTR _org1$[ebp]
add	edx, DWORD PTR _delta1$[ebp]
sub	ecx, edx
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _scale$3[ebp], eax
mov	esi, DWORD PTR _org1$[ebp]
add	esi, DWORD PTR _delta1$[ebp]
mov	eax, DWORD PTR _scale$3[ebp]
push	eax
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
sub	ecx, DWORD PTR _orus1$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	DWORD PTR _x$1[ebp], esi
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _x$1[ebp]
mov	DWORD PTR [eax+ecx*8], edx
jmp	$LN7@iup_worker
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__iup_worker_shift PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx]
mov	edx, DWORD PTR _p$[ebp]
mov	esi, DWORD PTR _p$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax+esi*8]
mov	DWORD PTR _dx$[ebp], ecx
je	SHORT $LN8@iup_worker
mov	edx, DWORD PTR _p1$[ebp]
mov	DWORD PTR _i$[ebp], edx
jmp	SHORT $LN6@iup_worker
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _p$[ebp]
jae	SHORT $LN4@iup_worker
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
add	edx, DWORD PTR _dx$[ebp]
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR [ecx+eax*8], edx
jmp	SHORT $LN5@iup_worker
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN3@iup_worker
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _p2$[ebp]
ja	SHORT $LN8@iup_worker
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
add	ecx, DWORD PTR _dx$[ebp]
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR [eax+edx*8], ecx
jmp	SHORT $LN2@iup_worker
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_UTP PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN4@Ins_UTP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN3@Ins_UTP
push	OFFSET $SG12825
push	7197					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_UTP
mov	BYTE PTR _mask$[ebp], 255		
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+298]
test	eax, eax
je	SHORT $LN2@Ins_UTP
movzx	ecx, BYTE PTR _mask$[ebp]
and	ecx, -9					
mov	BYTE PTR _mask$[ebp], cl
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
test	eax, eax
je	SHORT $LN1@Ins_UTP
movzx	ecx, BYTE PTR _mask$[ebp]
and	ecx, -17				
mov	BYTE PTR _mask$[ebp], cl
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+60]
movzx	eax, BYTE PTR _mask$[ebp]
movzx	ecx, BYTE PTR [ecx+edx]
and	ecx, eax
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+60]
mov	BYTE PTR [eax+edx], cl
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IP	PROC
push	ebp
mov	ebp, esp
sub	esp, 76					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-76]
mov	ecx, 19					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jge	SHORT $LN26@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN25@Ins_IP
push	OFFSET $SG12760
push	7047					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$35
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+344]
test	eax, eax
je	SHORT $LN29@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+346]
test	edx, edx
je	SHORT $LN29@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+348]
test	ecx, ecx
je	SHORT $LN29@Ins_IP
mov	DWORD PTR tv85[ebp], 0
jmp	SHORT $LN30@Ins_IP
mov	DWORD PTR tv85[ebp], 1
mov	edx, DWORD PTR tv85[ebp]
mov	DWORD PTR _twilight$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+286]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN24@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN23@Ins_IP
push	OFFSET $SG12766
push	7061					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$35
cmp	DWORD PTR _twilight$[ebp], 0
je	SHORT $LN22@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+286]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+48]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _orus_base$[ebp], eax
jmp	SHORT $LN21@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+286]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+56]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _orus_base$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+286]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _cur_base$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+286]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+44]
cmp	eax, edx
jae	SHORT $LN19@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+288]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jb	SHORT $LN20@Ins_IP
mov	DWORD PTR _old_range$[ebp], 0
mov	DWORD PTR _cur_range$[ebp], 0
jmp	$LN18@Ins_IP
cmp	DWORD PTR _twilight$[ebp], 0
je	SHORT $LN17@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+288]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR _orus_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _old_range$[ebp], eax
jmp	$LN16@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN15@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+288]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+92]
mov	edx, DWORD PTR _orus_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+576]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _old_range$[ebp], eax
jmp	$LN16@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+220]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$6[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$6[ebp+4], eax
mov	esi, esp
mov	edx, DWORD PTR _vec$6[ebp+4]
push	edx
mov	eax, DWORD PTR _vec$6[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _old_range$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+88]
mov	eax, DWORD PTR _cur_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+288]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _cur_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_range$[ebp], eax
jmp	SHORT $LN13@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], ecx
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+304], 0
jle	$Fail$35
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, 1
mov	DWORD PTR tv262[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv262[ebp]
mov	DWORD PTR [eax+28], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR tv262[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _point$5[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+116]
cmp	DWORD PTR _point$5[ebp], ecx
jb	SHORT $LN10@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN9@Ins_IP
push	OFFSET $SG12797
push	7117					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN27@Ins_IP
jmp	$LN12@Ins_IP
cmp	DWORD PTR _twilight$[ebp], 0
je	SHORT $LN8@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+120]
mov	ecx, DWORD PTR _point$5[ebp]
mov	edx, DWORD PTR _orus_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+120]
mov	eax, DWORD PTR _point$5[ebp]
mov	ecx, DWORD PTR _orus_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$4[ebp], eax
jmp	$LN7@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN6@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR _point$5[ebp]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR _point$5[ebp]
mov	edx, DWORD PTR _orus_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8]
sub	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$4[ebp], eax
jmp	SHORT $LN7@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+220]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR _point$5[ebp]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR _point$5[ebp]
mov	ecx, DWORD PTR _orus_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp+4], eax
mov	esi, esp
mov	eax, DWORD PTR _vec$1[ebp+4]
push	eax
mov	ecx, DWORD PTR _vec$1[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+576]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$4[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+124]
mov	ecx, DWORD PTR _point$5[ebp]
mov	edx, DWORD PTR _cur_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+124]
mov	eax, DWORD PTR _point$5[ebp]
mov	ecx, DWORD PTR _cur_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_dist$3[ebp], eax
cmp	DWORD PTR _org_dist$4[ebp], 0
je	SHORT $LN4@Ins_IP
cmp	DWORD PTR _old_range$[ebp], 0
je	SHORT $LN3@Ins_IP
mov	eax, DWORD PTR _old_range$[ebp]
push	eax
mov	ecx, DWORD PTR _cur_range$[ebp]
push	ecx
mov	edx, DWORD PTR _org_dist$4[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _new_dist$2[ebp], eax
jmp	SHORT $LN2@Ins_IP
mov	eax, DWORD PTR _org_dist$4[ebp]
mov	DWORD PTR _new_dist$2[ebp], eax
jmp	SHORT $LN1@Ins_IP
mov	DWORD PTR _new_dist$2[ebp], 0
mov	ecx, DWORD PTR _new_dist$2[ebp]
sub	ecx, DWORD PTR _cur_dist$3[ebp]
mov	esi, esp
push	ecx
movzx	edx, WORD PTR _point$5[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 108				
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+584]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN12@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+304], 1
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR [edx+32], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN34@Ins_IP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 76					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	2
DD	$LN33@Ins_IP
DD	-32					
DD	8
DD	$LN31@Ins_IP
DD	-64					
DD	8
DD	$LN32@Ins_IP
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	101					
DB	99					
DB	0
ENDP
_Ins_ALIGNPTS PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _p1$[ebp], ax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _p2$[ebp], ax
movzx	ecx, WORD PTR _p1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jae	SHORT $LN2@Ins_ALIGNP
movzx	ecx, WORD PTR _p2$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN3@Ins_ALIGNP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_ALIGNP
push	OFFSET $SG12746
push	7012					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN4@Ins_ALIGNP
movzx	edx, WORD PTR _p2$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _p1$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	esi, esp
push	ecx
movzx	edx, WORD PTR _p2$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _p1$[ebp]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+88]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [edi+eax*8]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+572]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _distance$[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _distance$[ebp]
push	edx
movzx	eax, WORD PTR _p1$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _distance$[ebp]
neg	edx
mov	esi, esp
push	edx
movzx	eax, WORD PTR _p2$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 36					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_ISECT PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _a0$[ebp], ax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _a1$[ebp], ax
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _b0$[ebp], cx
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _b1$[ebp], cx
movzx	edx, WORD PTR _b0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _b1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _a0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+80]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _a1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+80]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+116]
cmp	edx, ecx
jb	SHORT $LN5@Ins_ISECT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN3@Ins_ISECT
push	OFFSET $SG12725
push	6936					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN6@Ins_ISECT
movzx	edx, WORD PTR _b1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _b0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [esi+eax*8]
mov	DWORD PTR _dbx$[ebp], ecx
movzx	edx, WORD PTR _b1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _b0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	DWORD PTR _dby$[ebp], ecx
movzx	edx, WORD PTR _a1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+88]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [esi+eax*8]
mov	DWORD PTR _dax$[ebp], ecx
movzx	edx, WORD PTR _a1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+88]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	DWORD PTR _day$[ebp], ecx
movzx	edx, WORD PTR _b0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [esi+eax*8]
mov	DWORD PTR _dx$[ebp], ecx
movzx	edx, WORD PTR _b0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	DWORD PTR _dy$[ebp], ecx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+132]
movzx	edx, BYTE PTR [ecx+edx]
or	edx, 24					
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+132]
mov	BYTE PTR [ecx+eax], dl
push	64					
mov	edx, DWORD PTR _dby$[ebp]
neg	edx
push	edx
mov	eax, DWORD PTR _dax$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
push	64					
mov	ecx, DWORD PTR _dbx$[ebp]
push	ecx
mov	edx, DWORD PTR _day$[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _discriminant$[ebp], esi
push	64					
mov	eax, DWORD PTR _dbx$[ebp]
push	eax
mov	ecx, DWORD PTR _dax$[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
push	64					
mov	edx, DWORD PTR _dby$[ebp]
push	edx
mov	eax, DWORD PTR _day$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _dotproduct$[ebp], esi
cmp	DWORD PTR _discriminant$[ebp], 0
jge	SHORT $LN8@Ins_ISECT
mov	ecx, DWORD PTR _discriminant$[ebp]
neg	ecx
mov	DWORD PTR tv233[ebp], ecx
jmp	SHORT $LN9@Ins_ISECT
mov	edx, DWORD PTR _discriminant$[ebp]
mov	DWORD PTR tv233[ebp], edx
cmp	DWORD PTR _dotproduct$[ebp], 0
jge	SHORT $LN10@Ins_ISECT
mov	eax, DWORD PTR _dotproduct$[ebp]
neg	eax
mov	DWORD PTR tv237[ebp], eax
jmp	SHORT $LN11@Ins_ISECT
mov	ecx, DWORD PTR _dotproduct$[ebp]
mov	DWORD PTR tv237[ebp], ecx
imul	edx, DWORD PTR tv233[ebp], 19
cmp	edx, DWORD PTR tv237[ebp]
jle	$LN2@Ins_ISECT
push	64					
mov	eax, DWORD PTR _dby$[ebp]
neg	eax
push	eax
mov	ecx, DWORD PTR _dx$[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
push	64					
mov	edx, DWORD PTR _dbx$[ebp]
push	edx
mov	eax, DWORD PTR _dy$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _val$[ebp], esi
mov	ecx, DWORD PTR _discriminant$[ebp]
push	ecx
mov	edx, DWORD PTR _dax$[ebp]
push	edx
mov	eax, DWORD PTR _val$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _R$[ebp], eax
mov	ecx, DWORD PTR _discriminant$[ebp]
push	ecx
mov	edx, DWORD PTR _day$[ebp]
push	edx
mov	eax, DWORD PTR _val$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _R$[ebp+4], eax
movzx	ecx, WORD PTR _a0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	ecx, DWORD PTR [eax+ecx*8]
add	ecx, DWORD PTR _R$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+124]
mov	DWORD PTR [eax+edx*8], ecx
movzx	ecx, WORD PTR _a0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	ecx, DWORD PTR [eax+ecx*8+4]
add	ecx, DWORD PTR _R$[ebp+4]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+124]
mov	DWORD PTR [eax+edx*8+4], ecx
jmp	$LN6@Ins_ISECT
movzx	ecx, WORD PTR _a0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	edx, WORD PTR _a1$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	eax, DWORD PTR [eax+ecx*8]
add	eax, DWORD PTR [esi+edx*8]
movzx	ecx, WORD PTR _b0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+52]
add	eax, DWORD PTR [edx+ecx*8]
movzx	ecx, WORD PTR _b1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+52]
add	eax, DWORD PTR [edx+ecx*8]
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+124]
mov	DWORD PTR [edx+ecx*8], eax
movzx	eax, WORD PTR _a0$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
movzx	ecx, WORD PTR _a1$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	eax, DWORD PTR [edx+eax*8+4]
add	eax, DWORD PTR [esi+ecx*8+4]
movzx	edx, WORD PTR _b0$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+52]
add	eax, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _b1$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+52]
add	eax, DWORD PTR [ecx+edx*8+4]
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+124]
mov	DWORD PTR [ecx+edx*8+4], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@Ins_ISECT
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN13@Ins_ISECT
DD	-68					
DD	8
DD	$LN12@Ins_ISECT
DB	82					
DB	0
ENDP
_Ins_ALIGNRP PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
push	edi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jl	SHORT $LN7@Ins_ALIGNR
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+284]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+44]
cmp	eax, edx
jb	SHORT $LN5@Ins_ALIGNR
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN6@Ins_ALIGNR
push	OFFSET $SG12674
push	6863					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$Fail$11
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+304], 0
jle	$Fail$11
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+28], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	dx, WORD PTR [ecx+edx*4]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jb	SHORT $LN3@Ins_ALIGNR
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_ALIGNR
push	OFFSET $SG12684
push	6877					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN9@Ins_ALIGNR
jmp	$LN1@Ins_ALIGNR
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	eax, DWORD PTR _distance$[ebp]
neg	eax
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _point$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 72					
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+584]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], ecx
jmp	$LN5@Ins_ALIGNR
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+304], 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR [ecx+32], eax
pop	edi
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MIRP PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+308]
mov	DWORD PTR _minimum_distance$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+320]
mov	DWORD PTR _control_value_cutin$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _point$[ebp], cx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
add	ecx, 1
mov	DWORD PTR _cvtEntry$[ebp], ecx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+80]
cmp	edx, ecx
jae	SHORT $LN20@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+380]
add	eax, 1
cmp	DWORD PTR _cvtEntry$[ebp], eax
jae	SHORT $LN20@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jb	SHORT $LN21@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN19@Ins_MIRP
push	OFFSET $SG12639
push	6651					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$28
cmp	DWORD PTR _cvtEntry$[ebp], 0
jne	SHORT $LN18@Ins_MIRP
mov	DWORD PTR _cvt_dist$[ebp], 0
jmp	SHORT $LN17@Ins_MIRP
mov	edx, DWORD PTR _cvtEntry$[ebp]
sub	edx, 1
mov	esi, esp
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+596]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cvt_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _cvt_dist$[ebp]
sub	ecx, DWORD PTR [eax+328]
jns	SHORT $LN24@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _cvt_dist$[ebp]
sub	eax, DWORD PTR [edx+328]
neg	eax
mov	DWORD PTR tv138[ebp], eax
jmp	SHORT $LN25@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _cvt_dist$[ebp]
sub	edx, DWORD PTR [ecx+328]
mov	DWORD PTR tv138[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv138[ebp]
cmp	ecx, DWORD PTR [eax+324]
jge	SHORT $LN16@Ins_MIRP
cmp	DWORD PTR _cvt_dist$[ebp], 0
jl	SHORT $LN15@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+328]
mov	DWORD PTR _cvt_dist$[ebp], eax
jmp	SHORT $LN16@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+328]
neg	edx
mov	DWORD PTR _cvt_dist$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+346]
test	ecx, ecx
jne	$LN13@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	esi, WORD PTR [edx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [eax+48]
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
push	edx
mov	eax, DWORD PTR _cvt_dist$[ebp]
push	eax
call	_TT_MulFix14
add	esp, 8
add	eax, DWORD PTR [edi+esi*8]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+84]
mov	DWORD PTR [edx+ecx*8], eax
mov	eax, DWORD PTR _exc$[ebp]
movzx	esi, WORD PTR [eax+284]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [ecx+48]
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
push	eax
mov	ecx, DWORD PTR _cvt_dist$[ebp]
push	ecx
call	_TT_MulFix14
add	esp, 8
add	eax, DWORD PTR [edi+esi*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+84]
mov	DWORD PTR [ecx+edx*8+4], eax
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+48]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+48]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+316]
test	ecx, ecx
je	SHORT $LN12@Ins_MIRP
mov	edx, DWORD PTR _org_dist$[ebp]
xor	edx, DWORD PTR _cvt_dist$[ebp]
jge	SHORT $LN12@Ins_MIRP
mov	eax, DWORD PTR _cvt_dist$[ebp]
neg	eax
mov	DWORD PTR _cvt_dist$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 4
je	$LN10@Ins_MIRP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+344]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+346]
cmp	ecx, eax
jne	SHORT $LN9@Ins_MIRP
mov	ecx, DWORD PTR _cvt_dist$[ebp]
sub	ecx, DWORD PTR _org_dist$[ebp]
jns	SHORT $LN26@Ins_MIRP
mov	edx, DWORD PTR _cvt_dist$[ebp]
sub	edx, DWORD PTR _org_dist$[ebp]
neg	edx
mov	DWORD PTR tv269[ebp], edx
jmp	SHORT $LN27@Ins_MIRP
mov	eax, DWORD PTR _cvt_dist$[ebp]
sub	eax, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR tv269[ebp], eax
mov	ecx, DWORD PTR tv269[ebp]
cmp	ecx, DWORD PTR _control_value_cutin$[ebp]
jle	SHORT $LN9@Ins_MIRP
mov	edx, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR _cvt_dist$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 3
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+264]
push	eax
mov	ecx, DWORD PTR _cvt_dist$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
jmp	SHORT $LN7@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 3
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+264]
push	edx
mov	eax, DWORD PTR _cvt_dist$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Round_None
add	esp, 12					
mov	DWORD PTR _distance$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 8
je	SHORT $LN6@Ins_MIRP
cmp	DWORD PTR _org_dist$[ebp], 0
jl	SHORT $LN5@Ins_MIRP
mov	ecx, DWORD PTR _distance$[ebp]
cmp	ecx, DWORD PTR _minimum_distance$[ebp]
jge	SHORT $LN4@Ins_MIRP
mov	edx, DWORD PTR _minimum_distance$[ebp]
mov	DWORD PTR _distance$[ebp], edx
jmp	SHORT $LN6@Ins_MIRP
mov	eax, DWORD PTR _minimum_distance$[ebp]
neg	eax
cmp	DWORD PTR _distance$[ebp], eax
jle	SHORT $LN6@Ins_MIRP
mov	ecx, DWORD PTR _minimum_distance$[ebp]
neg	ecx
mov	DWORD PTR _distance$[ebp], ecx
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _cur_dist$[ebp]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR [eax+284]
mov	WORD PTR [edx+286], cx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 16					
je	SHORT $LN1@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+284], dx
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _point$[ebp]
mov	WORD PTR [eax+288], cx
pop	edi
pop	esi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MDRP PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+308]
mov	DWORD PTR _minimum_distance$[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jae	SHORT $LN18@Ins_MDRP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+284]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN19@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN17@Ins_MDRP
push	OFFSET $SG12585
push	6500					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$27
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+344]
test	eax, eax
je	SHORT $LN15@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+346]
test	edx, edx
jne	SHORT $LN16@Ins_MDRP
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _vec1$5[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec2$4[ebp], edx
mov	eax, DWORD PTR _vec1$5[ebp]
mov	ecx, DWORD PTR _vec2$4[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	esi, esp
push	edx
mov	eax, DWORD PTR _vec1$5[ebp]
mov	ecx, DWORD PTR _vec2$4[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
jmp	$LN14@Ins_MDRP
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+92]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _vec1$3[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+56]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec2$2[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN13@Ins_MDRP
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	esi, esp
push	edx
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _org_dist$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _org_dist$[ebp], eax
jmp	SHORT $LN14@Ins_MDRP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _vec1$3[ebp]
mov	eax, DWORD PTR _vec2$2[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _vec1$3[ebp]
mov	edx, DWORD PTR _vec2$2[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp+4], eax
mov	esi, esp
mov	ecx, DWORD PTR _vec$1[ebp+4]
push	ecx
mov	edx, DWORD PTR _vec$1[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _org_dist$[ebp]
sub	ecx, DWORD PTR [eax+328]
jns	SHORT $LN22@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _org_dist$[ebp]
sub	eax, DWORD PTR [edx+328]
neg	eax
mov	DWORD PTR tv197[ebp], eax
jmp	SHORT $LN23@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _org_dist$[ebp]
sub	edx, DWORD PTR [ecx+328]
mov	DWORD PTR tv197[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv197[ebp]
cmp	ecx, DWORD PTR [eax+324]
jge	SHORT $LN11@Ins_MDRP
cmp	DWORD PTR _org_dist$[ebp], 0
jl	SHORT $LN10@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+328]
mov	DWORD PTR _org_dist$[ebp], eax
jmp	SHORT $LN11@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+328]
neg	edx
mov	DWORD PTR _org_dist$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 4
je	SHORT $LN8@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 3
mov	esi, esp
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+264]
push	edx
mov	eax, DWORD PTR _org_dist$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+568]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
jmp	SHORT $LN7@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 3
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+264]
push	ecx
mov	edx, DWORD PTR _org_dist$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Round_None
add	esp, 12					
mov	DWORD PTR _distance$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 8
je	SHORT $LN6@Ins_MDRP
cmp	DWORD PTR _org_dist$[ebp], 0
jl	SHORT $LN5@Ins_MDRP
mov	eax, DWORD PTR _distance$[ebp]
cmp	eax, DWORD PTR _minimum_distance$[ebp]
jge	SHORT $LN4@Ins_MDRP
mov	ecx, DWORD PTR _minimum_distance$[ebp]
mov	DWORD PTR _distance$[ebp], ecx
jmp	SHORT $LN6@Ins_MDRP
mov	edx, DWORD PTR _minimum_distance$[ebp]
neg	edx
cmp	DWORD PTR _distance$[ebp], edx
jle	SHORT $LN6@Ins_MDRP
mov	eax, DWORD PTR _minimum_distance$[ebp]
neg	eax
mov	DWORD PTR _distance$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	edx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [edx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [esi+edx*8+4]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	edx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [edx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	eax, DWORD PTR [eax+ecx*8]
sub	eax, DWORD PTR [edi+edx*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+572]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR _org_dist$[ebp]
mov	esi, esp
push	ecx
movzx	edx, WORD PTR _point$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 72					
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+584]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR [edx+284]
mov	WORD PTR [ecx+286], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+288], dx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 16					
je	SHORT $LN20@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+284], ax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@Ins_MDRP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN25@Ins_MDRP
DD	-44					
DD	8
DD	$LN24@Ins_MDRP
DB	118					
DB	101					
DB	99					
DB	0
ENDP
_Ins_MIAP PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+320]
mov	DWORD PTR _control_value_cutin$[ebp], ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _cvtEntry$[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+44]
cmp	eax, edx
jae	SHORT $LN5@Ins_MIAP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _cvtEntry$[ebp]
cmp	ecx, DWORD PTR [eax+380]
jb	SHORT $LN6@Ins_MIAP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN4@Ins_MIAP
push	OFFSET $SG12560
push	6394					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$11
mov	esi, esp
mov	edx, DWORD PTR _cvtEntry$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+596]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+344]
test	ecx, ecx
jne	SHORT $LN3@Ins_MIAP
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+298]
push	eax
mov	ecx, DWORD PTR _distance$[ebp]
push	ecx
call	_TT_MulFix14
add	esp, 8
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+48]
mov	DWORD PTR [ecx+edx*8], eax
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
push	eax
mov	ecx, DWORD PTR _distance$[ebp]
push	ecx
call	_TT_MulFix14
add	esp, 8
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+48]
mov	DWORD PTR [ecx+edx*8+4], eax
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+52]
mov	esi, esp
mov	eax, DWORD PTR [edx+eax*8+4]
push	eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
mov	ecx, DWORD PTR [eax+ecx*8]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+572]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 1
je	SHORT $LN2@Ins_MIAP
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR _org_dist$[ebp]
jns	SHORT $LN9@Ins_MIAP
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _org_dist$[ebp]
neg	edx
mov	DWORD PTR tv176[ebp], edx
jmp	SHORT $LN10@Ins_MIAP
mov	eax, DWORD PTR _distance$[ebp]
sub	eax, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR tv176[ebp], eax
mov	ecx, DWORD PTR tv176[ebp]
cmp	ecx, DWORD PTR _control_value_cutin$[ebp]
jle	SHORT $LN1@Ins_MIAP
mov	edx, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR _distance$[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+ecx+264]
push	eax
mov	ecx, DWORD PTR _distance$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _org_dist$[ebp]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 36					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+284], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+286], dx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MDAP PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN4@Ins_MDAP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN3@Ins_MDAP
push	OFFSET $SG12537
push	6331					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN5@Ins_MDAP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 1
je	SHORT $LN2@Ins_MDAP
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
mov	esi, esp
mov	ecx, DWORD PTR [eax+ecx*8+4]
push	ecx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
mov	edx, DWORD PTR [ecx+edx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_dist$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+ecx+264]
push	eax
mov	ecx, DWORD PTR _cur_dist$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
sub	eax, DWORD PTR _cur_dist$[ebp]
mov	DWORD PTR _distance$[ebp], eax
jmp	SHORT $LN1@Ins_MDAP
mov	DWORD PTR _distance$[ebp], 0
mov	esi, esp
mov	edx, DWORD PTR _distance$[ebp]
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 36					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+284], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+286], dx
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MSIRP PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
push	edi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jae	SHORT $LN4@Ins_MSIRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jb	SHORT $LN5@Ins_MSIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN3@Ins_MSIRP
push	OFFSET $SG12520
push	6277					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN6@Ins_MSIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+346]
test	eax, eax
jne	$LN2@Ins_MSIRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+84]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
mov	eax, 4
shl	eax, 0
mov	esi, esp
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+588]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
sub	edx, DWORD PTR _distance$[ebp]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR [eax+284]
mov	WORD PTR [edx+286], cx
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+288], ax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 1
je	SHORT $LN6@Ins_MSIRP
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _point$[ebp]
mov	WORD PTR [eax+284], cx
pop	edi
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SHPIX PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
add	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+16], ecx
jge	SHORT $LN7@Ins_SHPIX
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN6@Ins_SHPIX
push	OFFSET $SG12490
push	6110					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$Fail$10
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _dx$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _dy$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+304], 0
jle	$Fail$10
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+28], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	dx, WORD PTR [ecx+edx*4]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	eax, edx
jb	SHORT $LN3@Ins_SHPIX
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_SHPIX
push	OFFSET $SG12502
push	6145					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $LN8@Ins_SHPIX
jmp	SHORT $LN1@Ins_SHPIX
push	1
mov	eax, DWORD PTR _dy$[ebp]
push	eax
mov	ecx, DWORD PTR _dx$[ebp]
push	ecx
movzx	edx, WORD PTR _point$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Move_Zp2_Point
add	esp, 20					
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+304]
sub	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+304], edx
jmp	$LN5@Ins_SHPIX
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+304], 1
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR [edx+32], ecx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SHZ PROC
push	ebp
mov	ebp, esp
sub	esp, 88					
push	edi
lea	edi, DWORD PTR [ebp-88]
mov	ecx, 22					
mov	eax, -858993460				
rep stosd
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 2
jb	SHORT $LN12@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN11@Ins_SHZ
push	OFFSET $SG12466
push	6064					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN13@Ins_SHZ
lea	eax, DWORD PTR _refp$[ebp]
push	eax
lea	ecx, DWORD PTR _zp$[ebp]
push	ecx
lea	edx, DWORD PTR _dy$[ebp]
push	edx
lea	eax, DWORD PTR _dx$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Point_Displacement
add	esp, 20					
movzx	edx, al
test	edx, edx
je	SHORT $LN10@Ins_SHZ
jmp	$LN13@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+348]
test	ecx, ecx
jne	SHORT $LN9@Ins_SHZ
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR [edx+116]
mov	WORD PTR _limit$[ebp], ax
jmp	SHORT $LN8@Ins_SHZ
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+348]
cmp	edx, 1
jne	SHORT $LN7@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+118]
test	ecx, ecx
jle	SHORT $LN7@Ins_SHZ
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+118]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+136]
movzx	eax, WORD PTR [edx+eax*2-2]
add	eax, 1
mov	WORD PTR _limit$[ebp], ax
jmp	SHORT $LN8@Ins_SHZ
xor	ecx, ecx
mov	WORD PTR _limit$[ebp], cx
xor	edx, edx
mov	WORD PTR _i$[ebp], dx
jmp	SHORT $LN5@Ins_SHZ
mov	ax, WORD PTR _i$[ebp]
add	ax, 1
mov	WORD PTR _i$[ebp], ax
movzx	ecx, WORD PTR _i$[ebp]
movzx	edx, WORD PTR _limit$[ebp]
cmp	ecx, edx
jge	SHORT $LN13@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _zp$[ebp+16]
cmp	ecx, DWORD PTR [eax+124]
jne	SHORT $LN1@Ins_SHZ
movzx	edx, WORD PTR _refp$[ebp]
movzx	eax, WORD PTR _i$[ebp]
cmp	edx, eax
je	SHORT $LN2@Ins_SHZ
push	0
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
movzx	eax, WORD PTR _i$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Move_Zp2_Point
add	esp, 20					
jmp	SHORT $LN4@Ins_SHZ
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@Ins_SHZ
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 88					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN19@Ins_SHZ
DD	-40					
DD	36					
DD	$LN15@Ins_SHZ
DD	-52					
DD	2
DD	$LN16@Ins_SHZ
DD	-64					
DD	4
DD	$LN17@Ins_SHZ
DD	-76					
DD	4
DD	$LN18@Ins_SHZ
DB	100					
DB	121					
DB	0
DB	100					
DB	120					
DB	0
DB	114					
DB	101					
DB	102					
DB	112					
DB	0
DB	122					
DB	112					
DB	0
ENDP
_Ins_SHC PROC
push	ebp
mov	ebp, esp
sub	esp, 104				
push	edi
lea	edi, DWORD PTR [ebp-104]
mov	ecx, 26					
mov	eax, -858993460				
rep stosd
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _contour$[ebp], ax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+348]
test	edx, edx
jne	SHORT $LN15@Ins_SHC
mov	DWORD PTR tv71[ebp], 1
jmp	SHORT $LN16@Ins_SHC
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+118]
mov	DWORD PTR tv71[ebp], ecx
mov	dx, WORD PTR tv71[ebp]
mov	WORD PTR _bounds$[ebp], dx
movsx	eax, WORD PTR _contour$[ebp]
movsx	ecx, WORD PTR _bounds$[ebp]
cmp	eax, ecx
jb	SHORT $LN12@Ins_SHC
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN11@Ins_SHC
push	OFFSET $SG12437
push	6016					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN13@Ins_SHC
lea	edx, DWORD PTR _refp$[ebp]
push	edx
lea	eax, DWORD PTR _zp$[ebp]
push	eax
lea	ecx, DWORD PTR _dy$[ebp]
push	ecx
lea	edx, DWORD PTR _dx$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Point_Displacement
add	esp, 20					
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN10@Ins_SHC
jmp	$LN13@Ins_SHC
movsx	edx, WORD PTR _contour$[ebp]
test	edx, edx
jne	SHORT $LN9@Ins_SHC
xor	eax, eax
mov	WORD PTR _start$[ebp], ax
jmp	SHORT $LN8@Ins_SHC
movsx	ecx, WORD PTR _contour$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+136]
movzx	ecx, WORD PTR [eax+ecx*2-2]
add	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+140]
sub	ecx, eax
mov	WORD PTR _start$[ebp], cx
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+348]
test	edx, edx
jne	SHORT $LN7@Ins_SHC
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR [eax+116]
mov	WORD PTR _limit$[ebp], cx
jmp	SHORT $LN6@Ins_SHC
movsx	edx, WORD PTR _contour$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+136]
movzx	edx, WORD PTR [ecx+edx*2]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+140]
sub	edx, ecx
add	edx, 1
mov	WORD PTR _limit$[ebp], dx
mov	dx, WORD PTR _start$[ebp]
mov	WORD PTR _i$[ebp], dx
jmp	SHORT $LN5@Ins_SHC
mov	ax, WORD PTR _i$[ebp]
add	ax, 1
mov	WORD PTR _i$[ebp], ax
movzx	ecx, WORD PTR _i$[ebp]
movzx	edx, WORD PTR _limit$[ebp]
cmp	ecx, edx
jge	SHORT $LN13@Ins_SHC
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _zp$[ebp+16]
cmp	ecx, DWORD PTR [eax+124]
jne	SHORT $LN1@Ins_SHC
movzx	edx, WORD PTR _refp$[ebp]
movzx	eax, WORD PTR _i$[ebp]
cmp	edx, eax
je	SHORT $LN2@Ins_SHC
push	1
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
movzx	eax, WORD PTR _i$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Move_Zp2_Point
add	esp, 20					
jmp	SHORT $LN4@Ins_SHC
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@Ins_SHC
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 104				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN21@Ins_SHC
DD	-40					
DD	36					
DD	$LN17@Ins_SHC
DD	-52					
DD	2
DD	$LN18@Ins_SHC
DD	-64					
DD	4
DD	$LN19@Ins_SHC
DD	-76					
DD	4
DD	$LN20@Ins_SHC
DB	100					
DB	121					
DB	0
DB	100					
DB	120					
DB	0
DB	114					
DB	101					
DB	102					
DB	112					
DB	0
DB	122					
DB	112					
DB	0
ENDP
_Ins_SHP PROC
push	ebp
mov	ebp, esp
sub	esp, 84					
push	edi
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 21					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jge	SHORT $LN8@Ins_SHP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN7@Ins_SHP
push	OFFSET $SG12404
push	5950					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$17
lea	edx, DWORD PTR _refp$[ebp]
push	edx
lea	eax, DWORD PTR _zp$[ebp]
push	eax
lea	ecx, DWORD PTR _dy$[ebp]
push	ecx
lea	edx, DWORD PTR _dx$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Point_Displacement
add	esp, 20					
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN5@Ins_SHP
jmp	$LN9@Ins_SHP
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+304], 0
jle	$Fail$17
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	cx, WORD PTR [eax+ecx*4]
mov	WORD PTR _point$[ebp], cx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+116]
cmp	edx, ecx
jb	SHORT $LN3@Ins_SHP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN2@Ins_SHP
push	OFFSET $SG12415
push	5966					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN9@Ins_SHP
jmp	SHORT $LN1@Ins_SHP
push	1
mov	edx, DWORD PTR _dy$[ebp]
push	edx
mov	eax, DWORD PTR _dx$[ebp]
push	eax
movzx	ecx, WORD PTR _point$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Move_Zp2_Point
add	esp, 20					
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], ecx
jmp	$LN5@Ins_SHP
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+304], 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR [ecx+32], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@Ins_SHP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	4
DD	$LN15@Ins_SHP
DD	-40					
DD	36					
DD	$LN11@Ins_SHP
DD	-52					
DD	2
DD	$LN12@Ins_SHP
DD	-64					
DD	4
DD	$LN13@Ins_SHP
DD	-76					
DD	4
DD	$LN14@Ins_SHP
DB	100					
DB	121					
DB	0
DB	100					
DB	120					
DB	0
DB	114					
DB	101					
DB	102					
DB	112					
DB	0
DB	122					
DB	112					
DB	0
ENDP
_Move_Zp2_Point PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
test	ecx, ecx
je	SHORT $LN4@Move_Zp2_P
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	edx, DWORD PTR [ecx+edx*8]
add	edx, DWORD PTR _dx$[ebp]
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+124]
mov	DWORD PTR [ecx+eax*8], edx
movzx	edx, BYTE PTR _touch$[ebp]
test	edx, edx
je	SHORT $LN4@Move_Zp2_P
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 8
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+132]
mov	BYTE PTR [edx+ecx], al
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
test	ecx, ecx
je	SHORT $LN5@Move_Zp2_P
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	edx, DWORD PTR [ecx+edx*8+4]
add	edx, DWORD PTR _dy$[ebp]
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+124]
mov	DWORD PTR [ecx+eax*8+4], edx
movzx	edx, BYTE PTR _touch$[ebp]
test	edx, edx
je	SHORT $LN5@Move_Zp2_P
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 16					
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+132]
mov	BYTE PTR [edx+ecx], al
pop	ebp
ret	0
ENDP
_Compute_Point_Displacement PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 1
je	SHORT $LN4@Compute_Po
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 36					
mov	ecx, 9
lea	edi, DWORD PTR _zp$[ebp]
rep movsd
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR [edx+286]
mov	WORD PTR _p$[ebp], ax
jmp	SHORT $LN3@Compute_Po
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 72					
mov	ecx, 9
lea	edi, DWORD PTR _zp$[ebp]
rep movsd
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR [ecx+288]
mov	WORD PTR _p$[ebp], dx
movzx	eax, WORD PTR _p$[ebp]
movzx	ecx, WORD PTR _zp$[ebp+8]
cmp	eax, ecx
jb	SHORT $LN2@Compute_Po
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN1@Compute_Po
push	OFFSET $SG12372
push	5852					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
xor	edx, edx
mov	eax, DWORD PTR _refp$[ebp]
mov	WORD PTR [eax], dx
mov	al, 1
jmp	$LN5@Compute_Po
mov	ecx, 9
lea	esi, DWORD PTR _zp$[ebp]
mov	edi, DWORD PTR _zone$[ebp]
rep movsd
mov	ecx, DWORD PTR _refp$[ebp]
mov	dx, WORD PTR _p$[ebp]
mov	WORD PTR [ecx], dx
movzx	eax, WORD PTR _p$[ebp]
movzx	ecx, WORD PTR _p$[ebp]
mov	edx, DWORD PTR _zp$[ebp+16]
mov	esi, DWORD PTR _zp$[ebp+12]
mov	eax, DWORD PTR [edx+eax*8+4]
sub	eax, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _p$[ebp]
movzx	edx, WORD PTR _p$[ebp]
mov	eax, DWORD PTR _zp$[ebp+16]
mov	edi, DWORD PTR _zp$[ebp+12]
mov	ecx, DWORD PTR [eax+ecx*8]
sub	ecx, DWORD PTR [edi+edx*8]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+572]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+564]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
push	edx
mov	eax, DWORD PTR _d$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+564]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+300]
push	edx
mov	eax, DWORD PTR _d$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@Compute_Po
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN8@Compute_Po
DD	-40					
DD	36					
DD	$LN7@Compute_Po
DB	122					
DB	112					
DB	0
ENDP
_Ins_FLIPRGOFF PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _K$[ebp], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jae	SHORT $LN5@Ins_FLIPRG
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jb	SHORT $LN6@Ins_FLIPRG
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN4@Ins_FLIPRG
push	OFFSET $SG12347
push	5818					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_FLIPRG
mov	dx, WORD PTR _L$[ebp]
mov	WORD PTR _I$[ebp], dx
jmp	SHORT $LN3@Ins_FLIPRG
mov	ax, WORD PTR _I$[ebp]
add	ax, 1
mov	WORD PTR _I$[ebp], ax
movzx	ecx, WORD PTR _I$[ebp]
movzx	edx, WORD PTR _K$[ebp]
cmp	ecx, edx
jg	SHORT $LN7@Ins_FLIPRG
movzx	eax, WORD PTR _I$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+168]
movzx	eax, BYTE PTR [edx+eax]
and	eax, -2					
movzx	ecx, WORD PTR _I$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+168]
mov	BYTE PTR [edx+ecx], al
jmp	SHORT $LN2@Ins_FLIPRG
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_FLIPRGON PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _K$[ebp], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jae	SHORT $LN5@Ins_FLIPRG
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jb	SHORT $LN6@Ins_FLIPRG
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN4@Ins_FLIPRG
push	OFFSET $SG12325
push	5790					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_FLIPRG
mov	dx, WORD PTR _L$[ebp]
mov	WORD PTR _I$[ebp], dx
jmp	SHORT $LN3@Ins_FLIPRG
mov	ax, WORD PTR _I$[ebp]
add	ax, 1
mov	WORD PTR _I$[ebp], ax
movzx	ecx, WORD PTR _I$[ebp]
movzx	edx, WORD PTR _K$[ebp]
cmp	ecx, edx
jg	SHORT $LN7@Ins_FLIPRG
movzx	eax, WORD PTR _I$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+168]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 1
movzx	ecx, WORD PTR _I$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+168]
mov	BYTE PTR [edx+ecx], al
jmp	SHORT $LN2@Ins_FLIPRG
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_FLIPPT PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jge	SHORT $LN5@Ins_FLIPPT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN6@Ins_FLIPPT
push	OFFSET $SG12295
push	5741					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$10
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+304], 0
jle	$Fail$10
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	cx, WORD PTR [eax+ecx*4]
mov	WORD PTR _point$[ebp], cx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+152]
cmp	edx, ecx
jb	SHORT $LN3@Ins_FLIPPT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN2@Ins_FLIPPT
push	OFFSET $SG12305
push	5755					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN8@Ins_FLIPPT
jmp	SHORT $LN1@Ins_FLIPPT
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+168]
movzx	edx, BYTE PTR [ecx+edx]
xor	edx, 1
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+168]
mov	BYTE PTR [ecx+eax], dl
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+304]
sub	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+304], eax
jmp	$LN5@Ins_FLIPPT
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], 1
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+32], edx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SCANTYPE PROC
push	ebp
mov	ebp, esp
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 0
jl	SHORT $LN2@Ins_SCANTY
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+340], ecx
pop	ebp
ret	0
ENDP
_Ins_SCANCTRL PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 255				
mov	DWORD PTR _A$[ebp], eax
cmp	DWORD PTR _A$[ebp], 255			
jne	SHORT $LN9@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+337], 1
jmp	$LN10@Ins_SCANCT
jmp	SHORT $LN8@Ins_SCANCT
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN8@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+337], 0
jmp	$LN10@Ins_SCANCT
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 256				
je	SHORT $LN6@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+252]
cmp	edx, DWORD PTR _A$[ebp]
jg	SHORT $LN6@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+337], 1
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, 512				
je	SHORT $LN5@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+281]
test	eax, eax
je	SHORT $LN5@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+337], 1
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
and	edx, 1024				
je	SHORT $LN4@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+282]
test	ecx, ecx
je	SHORT $LN4@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+337], 1
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 2048				
je	SHORT $LN3@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+252]
cmp	edx, DWORD PTR _A$[ebp]
jle	SHORT $LN3@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+337], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, 4096				
je	SHORT $LN2@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+281]
test	eax, eax
je	SHORT $LN2@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+337], 0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
and	edx, 8192				
je	SHORT $LN10@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+282]
test	ecx, ecx
je	SHORT $LN10@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+337], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_INSTCTRL PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _K$[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _L$[ebp], eax
cmp	DWORD PTR _K$[ebp], 1
jl	SHORT $LN3@Ins_INSTCT
cmp	DWORD PTR _K$[ebp], 2
jle	SHORT $LN4@Ins_INSTCT
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN2@Ins_INSTCT
push	OFFSET $SG12255
push	5643					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_INSTCT
cmp	DWORD PTR _L$[ebp], 0
je	SHORT $LN1@Ins_INSTCT
mov	edx, DWORD PTR _K$[ebp]
mov	DWORD PTR _L$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+336]
movzx	edx, BYTE PTR _K$[ebp]
not	edx
and	ecx, edx
movzx	eax, BYTE PTR _L$[ebp]
or	ecx, eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+336], cl
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZPS PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZPS
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZPS
jmp	SHORT $LN2@Ins_SZPS
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZPS
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZPS
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZPS
push	OFFSET $SG12240
push	5612					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZPS
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+344], ax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+edx]
mov	WORD PTR [eax+346], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+ecx]
mov	WORD PTR [edx+348], cx
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZP2 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZP2
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZP2
jmp	SHORT $LN2@Ins_SZP2
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP2
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP2
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZP2
push	OFFSET $SG12223
push	5583					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZP2
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+348], ax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZP1 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZP1
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZP1
jmp	SHORT $LN2@Ins_SZP1
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP1
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP1
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZP1
push	OFFSET $SG12206
push	5554					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZP1
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+346], ax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZP0 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZP0
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZP0
jmp	SHORT $LN2@Ins_SZP0
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP0
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP0
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZP0
push	OFFSET $SG12189
push	5525					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZP0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+344], ax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SDPVTL PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
mov	DWORD PTR _aOpc$[ebp], ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _p1$[ebp], cx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _p2$[ebp], dx
movzx	eax, WORD PTR _p2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jae	SHORT $LN6@Ins_SDPVTL
movzx	eax, WORD PTR _p1$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	eax, edx
jb	SHORT $LN7@Ins_SDPVTL
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN5@Ins_SDPVTL
push	OFFSET $SG12165
push	5441					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN8@Ins_SDPVTL
movzx	eax, WORD PTR _p2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _v1$4[ebp], eax
movzx	ecx, WORD PTR _p1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+120]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _v2$3[ebp], ecx
mov	edx, DWORD PTR _v1$4[ebp]
mov	eax, DWORD PTR _v2$3[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _A$[ebp], ecx
mov	edx, DWORD PTR _v1$4[ebp]
mov	eax, DWORD PTR _v2$3[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _B$[ebp], ecx
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN4@Ins_SDPVTL
cmp	DWORD PTR _B$[ebp], 0
jne	SHORT $LN4@Ins_SDPVTL
mov	DWORD PTR _A$[ebp], 16384		
mov	DWORD PTR _aOpc$[ebp], 0
mov	edx, DWORD PTR _aOpc$[ebp]
and	edx, 1
je	SHORT $LN3@Ins_SDPVTL
mov	eax, DWORD PTR _B$[ebp]
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _A$[ebp]
mov	DWORD PTR _B$[ebp], ecx
mov	edx, DWORD PTR _C$[ebp]
neg	edx
mov	DWORD PTR _A$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 290				
push	eax
mov	ecx, DWORD PTR _B$[ebp]
push	ecx
mov	edx, DWORD PTR _A$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Normalize
add	esp, 16					
movzx	ecx, WORD PTR _p2$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _v1$2[ebp], ecx
movzx	edx, WORD PTR _p1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _v2$1[ebp], edx
mov	eax, DWORD PTR _v1$2[ebp]
mov	ecx, DWORD PTR _v2$1[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _A$[ebp], edx
mov	eax, DWORD PTR _v1$2[ebp]
mov	ecx, DWORD PTR _v2$1[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _B$[ebp], edx
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN2@Ins_SDPVTL
cmp	DWORD PTR _B$[ebp], 0
jne	SHORT $LN2@Ins_SDPVTL
mov	DWORD PTR _A$[ebp], 16384		
mov	DWORD PTR _aOpc$[ebp], 0
mov	eax, DWORD PTR _aOpc$[ebp]
and	eax, 1
je	SHORT $LN1@Ins_SDPVTL
mov	ecx, DWORD PTR _B$[ebp]
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _A$[ebp]
mov	DWORD PTR _B$[ebp], edx
mov	eax, DWORD PTR _C$[ebp]
neg	eax
mov	DWORD PTR _A$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 294				
push	ecx
mov	edx, DWORD PTR _B$[ebp]
push	edx
mov	eax, DWORD PTR _A$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Normalize
add	esp, 16					
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Compute_Funcs
add	esp, 4
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MD	PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _K$[ebp], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jae	SHORT $LN10@Ins_MD
movzx	ecx, WORD PTR _K$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jb	SHORT $LN11@Ins_MD
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN9@Ins_MD
push	OFFSET $SG12124
push	5364					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _D$[ebp], 0
jmp	$LN8@Ins_MD
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 1
je	SHORT $LN7@Ins_MD
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
movzx	edx, WORD PTR _K$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [esi+edx*8+4]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
movzx	edx, WORD PTR _K$[ebp]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+88]
mov	eax, DWORD PTR [eax+ecx*8]
sub	eax, DWORD PTR [edi+edx*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+572]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
jmp	$LN8@Ins_MD
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+344]
test	edx, edx
je	SHORT $LN4@Ins_MD
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+346]
test	ecx, ecx
jne	SHORT $LN5@Ins_MD
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec1$5[ebp], edx
movzx	eax, WORD PTR _K$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _vec2$4[ebp], eax
mov	ecx, DWORD PTR _vec1$5[ebp]
mov	edx, DWORD PTR _vec2$4[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _vec1$5[ebp]
mov	edx, DWORD PTR _vec2$4[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
jmp	$LN8@Ins_MD
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+56]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _vec1$3[ebp], ecx
movzx	edx, WORD PTR _K$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec2$2[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN2@Ins_MD
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	esi, esp
push	edx
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _D$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _D$[ebp], eax
jmp	SHORT $LN8@Ins_MD
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _vec1$3[ebp]
mov	eax, DWORD PTR _vec2$2[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _vec1$3[ebp]
mov	edx, DWORD PTR _vec2$2[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp+4], eax
mov	esi, esp
mov	ecx, DWORD PTR _vec$1[ebp+4]
push	ecx
mov	edx, DWORD PTR _vec$1[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR _D$[ebp]
mov	DWORD PTR [edx+ecx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@Ins_MD
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN15@Ins_MD
DD	-40					
DD	8
DD	$LN14@Ins_MD
DB	118					
DB	101					
DB	99					
DB	0
ENDP
_Ins_SCFS PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+116]
cmp	ecx, eax
jb	SHORT $LN3@Ins_SCFS
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN2@Ins_SCFS
push	OFFSET $SG12104
push	5320					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN4@Ins_SCFS
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	esi, esp
mov	edx, DWORD PTR [ecx+edx*8+4]
push	edx
movzx	eax, WORD PTR _L$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+124]
mov	eax, DWORD PTR [edx+eax*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+572]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _K$[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
sub	eax, DWORD PTR _K$[ebp]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _L$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 108				
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+584]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+348]
test	ecx, ecx
jne	SHORT $LN4@Ins_SCFS
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _L$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+120]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_GC	PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _L$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	DWORD PTR _L$[ebp], edx
jb	SHORT $LN5@Ins_GC
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN4@Ins_GC
push	OFFSET $SG12087
push	5283					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	DWORD PTR _R$[ebp], 0
jmp	$LN3@Ins_GC
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 1
je	SHORT $LN2@Ins_GC
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+120]
mov	esi, esp
mov	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR [eax+ecx*8+4]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+120]
mov	edx, DWORD PTR _L$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _R$[ebp], eax
jmp	SHORT $LN3@Ins_GC
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+124]
mov	esi, esp
mov	eax, DWORD PTR _L$[ebp]
mov	ecx, DWORD PTR [edx+eax*8+4]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+124]
mov	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _R$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR _R$[ebp]
mov	DWORD PTR [edx+ecx], eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_PUSHW PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
sub	ecx, 183				
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_PUSHW
push	OFFSET $SG12070
push	5240					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_PUSHW
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], eax
xor	edx, edx
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_PUSHW
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jge	SHORT $LN1@Ins_PUSHW
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_GetShortIns
add	esp, 4
movzx	ecx, WORD PTR _K$[ebp]
movsx	edx, ax
mov	eax, DWORD PTR _args$[ebp]
mov	DWORD PTR [eax+ecx*4], edx
jmp	SHORT $LN2@Ins_PUSHW
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+376], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_PUSHB PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
sub	ecx, 175				
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_PUSHB
push	OFFSET $SG12054
push	5215					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_PUSHB
mov	edx, 1
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_PUSHB
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jg	SHORT $LN5@Ins_PUSHB
movzx	eax, WORD PTR _K$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
add	edx, eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
movzx	eax, WORD PTR _K$[ebp]
movzx	ecx, BYTE PTR [ecx+edx]
mov	edx, DWORD PTR _args$[ebp]
mov	DWORD PTR [edx+eax*4-4], ecx
jmp	SHORT $LN2@Ins_PUSHB
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_NPUSHW PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+356]
movzx	cx, BYTE PTR [eax+ecx+1]
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_NPUSHW
push	OFFSET $SG12038
push	5185					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_NPUSHW
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 2
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], eax
xor	edx, edx
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_NPUSHW
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jge	SHORT $LN1@Ins_NPUSHW
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_GetShortIns
add	esp, 4
movzx	ecx, WORD PTR _K$[ebp]
movsx	edx, ax
mov	eax, DWORD PTR _args$[ebp]
mov	DWORD PTR [eax+ecx*4], edx
jmp	SHORT $LN2@Ins_NPUSHW
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+376], 0
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+32]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+32], edx
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_NPUSHB PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+356]
movzx	cx, BYTE PTR [eax+ecx+1]
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_NPUSHB
push	OFFSET $SG12022
push	5158					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_NPUSHB
mov	edx, 1
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_NPUSHB
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jg	SHORT $LN1@Ins_NPUSHB
movzx	eax, WORD PTR _K$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
add	edx, eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
movzx	eax, WORD PTR _K$[ebp]
movzx	ecx, BYTE PTR [ecx+edx+1]
mov	edx, DWORD PTR _args$[ebp]
mov	DWORD PTR [edx+eax*4-4], ecx
jmp	SHORT $LN2@Ins_NPUSHB
movzx	eax, WORD PTR _L$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+32]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+32], eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IDEF PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+416]
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+408], 24
add	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN15@Ins_IDEF
mov	ecx, DWORD PTR _def$[ebp]
add	ecx, 24					
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _def$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	SHORT $LN13@Ins_IDEF
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [edx+12]
cmp	edx, DWORD PTR [eax+ecx]
jne	SHORT $LN12@Ins_IDEF
jmp	SHORT $LN13@Ins_IDEF
jmp	SHORT $LN14@Ins_IDEF
mov	eax, DWORD PTR _def$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jne	SHORT $LN11@Ins_IDEF
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+408]
cmp	eax, DWORD PTR [edx+412]
jb	SHORT $LN10@Ins_IDEF
push	OFFSET $SG11992
push	5094					
push	141					
call	_FT_Throw
add	esp, 12					
or	eax, 141				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN16@Ins_IDEF
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+408]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+408], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [ecx+eax], 0
jl	SHORT $LN8@Ins_IDEF
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [ecx+eax], 255		
jle	SHORT $LN9@Ins_IDEF
push	OFFSET $SG11995
push	5103					
push	141					
call	_FT_Throw
add	esp, 12					
or	eax, 141				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN16@Ins_IDEF
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+352]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _def$[ebp]
mov	BYTE PTR [edx+16], 1
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+ecx]
cmp	ecx, DWORD PTR [eax+424]
jbe	SHORT $LN6@Ins_IDEF
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+424], edx
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_SkipCode
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN16@Ins_IDEF
mov	eax, DWORD PTR _exc$[ebp]
mov	cl, BYTE PTR [eax+368]
mov	BYTE PTR tv156[ebp], cl
cmp	BYTE PTR tv156[ebp], 44			
je	SHORT $LN2@Ins_IDEF
cmp	BYTE PTR tv156[ebp], 45			
je	SHORT $LN1@Ins_IDEF
cmp	BYTE PTR tv156[ebp], 137		
je	SHORT $LN2@Ins_IDEF
jmp	SHORT $LN3@Ins_IDEF
push	OFFSET $SG12008
push	5124					
push	137					
call	_FT_Throw
add	esp, 12					
or	eax, 137				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $LN16@Ins_IDEF
jmp	SHORT $LN16@Ins_IDEF
jmp	SHORT $LN6@Ins_IDEF
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_LOOPCALL PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _F$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+420]
add	ecx, 1
cmp	DWORD PTR _F$[ebp], ecx
jb	SHORT $LN9@Ins_LOOPCA
jmp	$Fail$12
imul	edx, DWORD PTR _F$[ebp], 24
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+404]
mov	DWORD PTR _def$[ebp], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+420]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
cmp	edx, DWORD PTR [eax+396]
jne	SHORT $LN7@Ins_LOOPCA
mov	ecx, DWORD PTR _def$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	edx, DWORD PTR _F$[ebp]
je	SHORT $LN8@Ins_LOOPCA
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+404]
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+396], 24
add	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$1[ebp], eax
mov	ecx, DWORD PTR _def$[ebp]
cmp	ecx, DWORD PTR _limit$1[ebp]
jae	SHORT $LN5@Ins_LOOPCA
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	eax, DWORD PTR _F$[ebp]
je	SHORT $LN5@Ins_LOOPCA
mov	ecx, DWORD PTR _def$[ebp]
add	ecx, 24					
mov	DWORD PTR _def$[ebp], ecx
jmp	SHORT $LN6@Ins_LOOPCA
mov	edx, DWORD PTR _def$[ebp]
cmp	edx, DWORD PTR _limit$1[ebp]
jne	SHORT $LN8@Ins_LOOPCA
jmp	$Fail$12
mov	eax, DWORD PTR _def$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
jne	SHORT $LN3@Ins_LOOPCA
jmp	$Fail$12
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+428]
cmp	ecx, DWORD PTR [eax+432]
jl	SHORT $LN2@Ins_LOOPCA
push	OFFSET $SG11973
push	5040					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN10@Ins_LOOPCA
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 0
jle	$LN1@Ins_LOOPCA
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+436]
mov	DWORD PTR _pCrec$[ebp], ecx
mov	eax, DWORD PTR _pCrec$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 1
mov	edx, DWORD PTR _pCrec$[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _pCrec$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _pCrec$[ebp]
mov	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+428]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+428], edx
mov	ecx, DWORD PTR _def$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _def$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_Goto_CodeRange
add	esp, 12					
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+376], 0
jmp	SHORT $LN10@Ins_LOOPCA
push	OFFSET $SG11976
push	5063					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_CALL PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _F$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+420]
add	edx, 1
cmp	DWORD PTR _F$[ebp], edx
jb	SHORT $LN8@Ins_CALL
jmp	$Fail$11
imul	eax, DWORD PTR _F$[ebp], 24
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+404]
mov	DWORD PTR _def$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+420]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
cmp	eax, DWORD PTR [ecx+396]
jne	SHORT $LN6@Ins_CALL
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	eax, DWORD PTR _F$[ebp]
je	SHORT $LN7@Ins_CALL
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+404]
mov	DWORD PTR _def$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
imul	ecx, DWORD PTR [eax+396], 24
add	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$1[ebp], ecx
mov	edx, DWORD PTR _def$[ebp]
cmp	edx, DWORD PTR _limit$1[ebp]
jae	SHORT $LN4@Ins_CALL
mov	eax, DWORD PTR _def$[ebp]
mov	ecx, DWORD PTR [eax+12]
cmp	ecx, DWORD PTR _F$[ebp]
je	SHORT $LN4@Ins_CALL
mov	edx, DWORD PTR _def$[ebp]
add	edx, 24					
mov	DWORD PTR _def$[ebp], edx
jmp	SHORT $LN5@Ins_CALL
mov	eax, DWORD PTR _def$[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jne	SHORT $LN7@Ins_CALL
jmp	$Fail$11
mov	ecx, DWORD PTR _def$[ebp]
movzx	edx, BYTE PTR [ecx+16]
test	edx, edx
jne	SHORT $LN2@Ins_CALL
jmp	$Fail$11
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+428]
cmp	edx, DWORD PTR [ecx+432]
jl	SHORT $LN1@Ins_CALL
push	OFFSET $SG11949
push	4954					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN9@Ins_CALL
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
shl	eax, 4
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+436]
mov	DWORD PTR _pCrec$[ebp], eax
mov	edx, DWORD PTR _pCrec$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+352]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _pCrec$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _pCrec$[ebp]
mov	DWORD PTR [edx+8], 1
mov	eax, DWORD PTR _pCrec$[ebp]
mov	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+428], eax
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _def$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_Goto_CodeRange
add	esp, 12					
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+376], 0
jmp	SHORT $LN9@Ins_CALL
push	OFFSET $SG11950
push	4975					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_ENDF PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+428], 0
jg	SHORT $LN3@Ins_ENDF
push	OFFSET $SG11924
push	4858					
push	136					
call	_FT_Throw
add	esp, 12					
or	eax, 136				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN4@Ins_ENDF
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
sub	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+428], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
shl	eax, 4
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+436]
mov	DWORD PTR _pRec$[ebp], eax
mov	edx, DWORD PTR _pRec$[ebp]
mov	eax, DWORD PTR [edx+8]
sub	eax, 1
mov	ecx, DWORD PTR _pRec$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
mov	eax, DWORD PTR _pRec$[ebp]
cmp	DWORD PTR [eax+8], 0
jle	SHORT $LN2@Ins_ENDF
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+428]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+428], edx
mov	ecx, DWORD PTR _pRec$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+360], ecx
jmp	SHORT $LN4@Ins_ENDF
mov	edx, DWORD PTR _pRec$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _pRec$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_Goto_CodeRange
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_FDEF PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+404]
mov	DWORD PTR _rec$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+396], 24
add	eax, DWORD PTR _rec$[ebp]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _n$[ebp], ecx
jmp	SHORT $LN14@Ins_FDEF
mov	edx, DWORD PTR _rec$[ebp]
add	edx, 24					
mov	DWORD PTR _rec$[ebp], edx
mov	eax, DWORD PTR _rec$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	SHORT $LN12@Ins_FDEF
mov	ecx, DWORD PTR _rec$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	edx, DWORD PTR _n$[ebp]
jne	SHORT $LN11@Ins_FDEF
jmp	SHORT $LN12@Ins_FDEF
jmp	SHORT $LN13@Ins_FDEF
mov	eax, DWORD PTR _rec$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jne	SHORT $LN10@Ins_FDEF
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+396]
cmp	eax, DWORD PTR [edx+400]
jb	SHORT $LN9@Ins_FDEF
push	OFFSET $SG11900
push	4675					
push	140					
call	_FT_Throw
add	esp, 12					
or	eax, 140				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN15@Ins_FDEF
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+396]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+396], eax
cmp	DWORD PTR _n$[ebp], 65535		
jbe	SHORT $LN8@Ins_FDEF
push	OFFSET $SG11902
push	4685					
push	140					
call	_FT_Throw
add	esp, 12					
or	eax, 140				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN15@Ins_FDEF
mov	eax, DWORD PTR _rec$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
movzx	eax, WORD PTR _n$[ebp]
mov	ecx, DWORD PTR _rec$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _rec$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _rec$[ebp]
mov	BYTE PTR [edx+16], 1
mov	eax, DWORD PTR _rec$[ebp]
mov	BYTE PTR [eax+17], 0
mov	ecx, DWORD PTR _rec$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _n$[ebp]
cmp	eax, DWORD PTR [edx+420]
jbe	SHORT $LN6@Ins_FDEF
movzx	ecx, WORD PTR _n$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+420], ecx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_SkipCode
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN15@Ins_FDEF
mov	edx, DWORD PTR _exc$[ebp]
mov	al, BYTE PTR [edx+368]
mov	BYTE PTR tv147[ebp], al
cmp	BYTE PTR tv147[ebp], 44			
je	SHORT $LN2@Ins_FDEF
cmp	BYTE PTR tv147[ebp], 45			
je	SHORT $LN1@Ins_FDEF
cmp	BYTE PTR tv147[ebp], 137		
je	SHORT $LN2@Ins_FDEF
jmp	SHORT $LN3@Ins_FDEF
push	OFFSET $SG11914
push	4827					
push	137					
call	_FT_Throw
add	esp, 12					
or	eax, 137				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN15@Ins_FDEF
mov	edx, DWORD PTR _rec$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	DWORD PTR [edx+8], ecx
jmp	SHORT $LN15@Ins_FDEF
jmp	SHORT $LN6@Ins_FDEF
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_ELSE PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	DWORD PTR _nIfs$[ebp], 1
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_SkipCode
add	esp, 4
movzx	eax, al
cmp	eax, 1
jne	SHORT $LN5@Ins_ELSE
jmp	SHORT $LN9@Ins_ELSE
mov	ecx, DWORD PTR _exc$[ebp]
mov	dl, BYTE PTR [ecx+368]
mov	BYTE PTR tv70[ebp], dl
cmp	BYTE PTR tv70[ebp], 88			
je	SHORT $LN2@Ins_ELSE
cmp	BYTE PTR tv70[ebp], 89			
je	SHORT $LN1@Ins_ELSE
jmp	SHORT $LN7@Ins_ELSE
mov	eax, DWORD PTR _nIfs$[ebp]
add	eax, 1
mov	DWORD PTR _nIfs$[ebp], eax
jmp	SHORT $LN7@Ins_ELSE
mov	ecx, DWORD PTR _nIfs$[ebp]
sub	ecx, 1
mov	DWORD PTR _nIfs$[ebp], ecx
cmp	DWORD PTR _nIfs$[ebp], 0
jne	SHORT $LN8@Ins_ELSE
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IF	PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 0
je	SHORT $LN10@Ins_IF
jmp	$LN11@Ins_IF
mov	DWORD PTR _nIfs$[ebp], 1
mov	BYTE PTR _Out$[ebp], 0
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_SkipCode
add	esp, 4
movzx	ecx, al
cmp	ecx, 1
jne	SHORT $LN6@Ins_IF
jmp	SHORT $LN11@Ins_IF
mov	edx, DWORD PTR _exc$[ebp]
mov	al, BYTE PTR [edx+368]
mov	BYTE PTR tv73[ebp], al
cmp	BYTE PTR tv73[ebp], 27			
je	SHORT $LN2@Ins_IF
cmp	BYTE PTR tv73[ebp], 88			
je	SHORT $LN3@Ins_IF
cmp	BYTE PTR tv73[ebp], 89			
je	SHORT $LN1@Ins_IF
jmp	SHORT $LN8@Ins_IF
mov	ecx, DWORD PTR _nIfs$[ebp]
add	ecx, 1
mov	DWORD PTR _nIfs$[ebp], ecx
jmp	SHORT $LN8@Ins_IF
cmp	DWORD PTR _nIfs$[ebp], 1
jne	SHORT $LN13@Ins_IF
mov	BYTE PTR tv76[ebp], 1
jmp	SHORT $LN14@Ins_IF
mov	BYTE PTR tv76[ebp], 0
mov	dl, BYTE PTR tv76[ebp]
mov	BYTE PTR _Out$[ebp], dl
jmp	SHORT $LN8@Ins_IF
mov	eax, DWORD PTR _nIfs$[ebp]
sub	eax, 1
mov	DWORD PTR _nIfs$[ebp], eax
jne	SHORT $LN15@Ins_IF
mov	BYTE PTR tv79[ebp], 1
jmp	SHORT $LN16@Ins_IF
mov	BYTE PTR tv79[ebp], 0
mov	cl, BYTE PTR tv79[ebp]
mov	BYTE PTR _Out$[ebp], cl
movzx	edx, BYTE PTR _Out$[ebp]
test	edx, edx
je	SHORT $LN9@Ins_IF
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_SkipCode PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+372]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+360], ecx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+360]
cmp	eax, DWORD PTR [edx+364]
jge	$Fail_Overflow$7
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
mov	eax, DWORD PTR _exc$[ebp]
mov	cl, BYTE PTR [ecx+edx]
mov	BYTE PTR [eax+368], cl
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
movsx	ecx, BYTE PTR _opcode_length[eax]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+372], ecx
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+372], 0
jge	SHORT $LN3@SkipCode
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
cmp	edx, DWORD PTR [eax+364]
jl	SHORT $LN2@SkipCode
jmp	SHORT $Fail_Overflow$7
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
movzx	edx, BYTE PTR [ecx+edx+1]
mov	eax, DWORD PTR _exc$[ebp]
imul	edx, DWORD PTR [eax+372]
mov	ecx, 2
sub	ecx, edx
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+372], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+372]
mov	eax, DWORD PTR _exc$[ebp]
cmp	ecx, DWORD PTR [eax+364]
jg	SHORT $Fail_Overflow$7
xor	al, al
jmp	SHORT $LN5@SkipCode
push	OFFSET $SG11845
push	4451					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Ins_ROLL PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _A$[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _B$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _C$[ebp], ecx
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR _C$[ebp]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR _A$[ebp]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR _B$[ebp]
mov	DWORD PTR [ecx+eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MINDEX PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _L$[ebp], eax
cmp	DWORD PTR _L$[ebp], 0
jle	SHORT $LN3@Ins_MINDEX
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _L$[ebp]
cmp	edx, DWORD PTR [ecx+28]
jle	SHORT $LN4@Ins_MINDEX
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_MINDEX
push	OFFSET $SG11825
push	4381					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $LN5@Ins_MINDEX
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _K$[ebp], ecx
mov	edx, DWORD PTR _L$[ebp]
lea	eax, DWORD PTR [edx*4-4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, DWORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
lea	edx, DWORD PTR [ecx+edx*4+4]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
lea	ecx, DWORD PTR [eax+ecx*4]
push	ecx
call	DWORD PTR __imp__memmove
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	ecx, DWORD PTR _K$[ebp]
mov	DWORD PTR [edx+eax*4-4], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SxVTL PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
movzx	eax, WORD PTR _aIdx1$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	eax, edx
jae	SHORT $LN4@Ins_SxVTL
movzx	eax, WORD PTR _aIdx2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jb	SHORT $LN5@Ins_SxVTL
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN3@Ins_SxVTL
push	OFFSET $SG11811
push	2760					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	al, 1
jmp	$LN6@Ins_SxVTL
movzx	eax, WORD PTR _aIdx2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _p1$[ebp], eax
movzx	ecx, WORD PTR _aIdx1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+124]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _p2$[ebp], ecx
mov	edx, DWORD PTR _p1$[ebp]
mov	eax, DWORD PTR _p2$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _A$[ebp], ecx
mov	edx, DWORD PTR _p1$[ebp]
mov	eax, DWORD PTR _p2$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _B$[ebp], ecx
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN2@Ins_SxVTL
cmp	DWORD PTR _B$[ebp], 0
jne	SHORT $LN2@Ins_SxVTL
mov	DWORD PTR _A$[ebp], 16384		
mov	DWORD PTR _aOpc$[ebp], 0
mov	edx, DWORD PTR _aOpc$[ebp]
and	edx, 1
je	SHORT $LN1@Ins_SxVTL
mov	eax, DWORD PTR _B$[ebp]
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _A$[ebp]
mov	DWORD PTR _B$[ebp], ecx
mov	edx, DWORD PTR _C$[ebp]
neg	edx
mov	DWORD PTR _A$[ebp], edx
mov	eax, DWORD PTR _Vec$[ebp]
push	eax
mov	ecx, DWORD PTR _B$[ebp]
push	ecx
mov	edx, DWORD PTR _A$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Normalize
add	esp, 16					
xor	al, al
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Normalize PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _Vx$[ebp], 0
jge	SHORT $LN5@Normalize
mov	ecx, DWORD PTR _Vx$[ebp]
neg	ecx
mov	DWORD PTR tv66[ebp], ecx
jmp	SHORT $LN6@Normalize
mov	edx, DWORD PTR _Vx$[ebp]
mov	DWORD PTR tv66[ebp], edx
cmp	DWORD PTR tv66[ebp], 16384		
jge	SHORT $LN2@Normalize
cmp	DWORD PTR _Vy$[ebp], 0
jge	SHORT $LN7@Normalize
mov	eax, DWORD PTR _Vy$[ebp]
neg	eax
mov	DWORD PTR tv70[ebp], eax
jmp	SHORT $LN8@Normalize
mov	ecx, DWORD PTR _Vy$[ebp]
mov	DWORD PTR tv70[ebp], ecx
cmp	DWORD PTR tv70[ebp], 16384		
jge	SHORT $LN2@Normalize
cmp	DWORD PTR _Vx$[ebp], 0
jne	SHORT $LN1@Normalize
cmp	DWORD PTR _Vy$[ebp], 0
jne	SHORT $LN1@Normalize
xor	al, al
jmp	SHORT $LN3@Normalize
mov	edx, DWORD PTR _Vx$[ebp]
shl	edx, 14					
mov	DWORD PTR _Vx$[ebp], edx
mov	eax, DWORD PTR _Vy$[ebp]
shl	eax, 14					
mov	DWORD PTR _Vy$[ebp], eax
mov	ecx, DWORD PTR _Vy$[ebp]
push	ecx
mov	edx, DWORD PTR _Vx$[ebp]
push	edx
call	_FT_Hypot
add	esp, 8
mov	DWORD PTR _W$[ebp], eax
mov	eax, DWORD PTR _W$[ebp]
shl	eax, 2
push	eax
mov	ecx, DWORD PTR _Vx$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _R$[ebp]
mov	WORD PTR [edx], ax
mov	eax, DWORD PTR _W$[ebp]
shl	eax, 2
push	eax
mov	ecx, DWORD PTR _Vy$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _R$[ebp]
mov	WORD PTR [edx+2], ax
xor	al, al
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Compute_Funcs PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
cmp	ecx, 16384				
jne	SHORT $LN17@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+564], eax
jmp	SHORT $LN16@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
cmp	eax, 16384				
jne	SHORT $LN15@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+296]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+564], edx
jmp	SHORT $LN16@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+294]
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
imul	edx, ecx
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+296]
mov	eax, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [eax+300]
imul	ecx, eax
add	edx, ecx
sar	edx, 14					
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+564], edx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
cmp	eax, 16384				
jne	SHORT $LN13@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+572], OFFSET _Project_x
jmp	SHORT $LN12@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+296]
cmp	eax, 16384				
jne	SHORT $LN11@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+572], OFFSET _Project_y
jmp	SHORT $LN12@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+572], OFFSET _Project
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+290]
cmp	ecx, 16384				
jne	SHORT $LN9@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+576], OFFSET _Project_x
jmp	SHORT $LN8@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+292]
cmp	ecx, 16384				
jne	SHORT $LN7@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+576], OFFSET _Project_y
jmp	SHORT $LN8@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+576], OFFSET _Dual_Project
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+584], OFFSET _Direct_Move
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+588], OFFSET _Direct_Move_Orig
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+564], 16384		
jne	SHORT $LN5@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
cmp	edx, 16384				
jne	SHORT $LN4@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+584], OFFSET _Direct_Move_X
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+588], OFFSET _Direct_Move_Orig_X
jmp	SHORT $LN5@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
cmp	eax, 16384				
jne	SHORT $LN5@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+584], OFFSET _Direct_Move_Y
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+588], OFFSET _Direct_Move_Orig_Y
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+564], 0
jge	SHORT $LN20@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+564]
neg	edx
mov	DWORD PTR tv158[ebp], edx
jmp	SHORT $LN21@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
mov	DWORD PTR tv158[ebp], ecx
cmp	DWORD PTR tv158[ebp], 1024		
jge	SHORT $LN1@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+564], 16384		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+256], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Project_y PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _dx$[ebp]
mov	DWORD PTR _dx$[ebp], ecx
mov	eax, DWORD PTR _dy$[ebp]
pop	ebp
ret	0
ENDP
_Project_x PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _dy$[ebp]
mov	DWORD PTR _dy$[ebp], ecx
mov	eax, DWORD PTR _dx$[ebp]
pop	ebp
ret	0
ENDP
_Dual_Project PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+292]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+290]
push	eax
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
call	_TT_DotFix14
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Project PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+296]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
push	eax
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
call	_TT_DotFix14
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_SetSuperRound PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _selector$[ebp]
and	eax, 192				
mov	DWORD PTR tv65[ebp], eax
cmp	DWORD PTR tv65[ebp], 192		
ja	SHORT $LN13@SetSuperRo
mov	ecx, DWORD PTR tv65[ebp]
movzx	edx, BYTE PTR $LN17@SetSuperRo[ecx]
jmp	DWORD PTR $LN19@SetSuperRo[edx*4]
mov	eax, DWORD PTR _GridPeriod$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+476], eax
jmp	SHORT $LN13@SetSuperRo
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _GridPeriod$[ebp]
mov	DWORD PTR [edx+476], eax
jmp	SHORT $LN13@SetSuperRo
mov	ecx, DWORD PTR _GridPeriod$[ebp]
shl	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+476], ecx
jmp	SHORT $LN13@SetSuperRo
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _GridPeriod$[ebp]
mov	DWORD PTR [eax+476], ecx
mov	edx, DWORD PTR _selector$[ebp]
and	edx, 48					
mov	DWORD PTR tv74[ebp], edx
cmp	DWORD PTR tv74[ebp], 48			
ja	SHORT $LN7@SetSuperRo
mov	eax, DWORD PTR tv74[ebp]
movzx	ecx, BYTE PTR $LN18@SetSuperRo[eax]
jmp	DWORD PTR $LN20@SetSuperRo[ecx*4]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+480], 0
jmp	SHORT $LN7@SetSuperRo
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+476]
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
jmp	SHORT $LN7@SetSuperRo
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+476]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
jmp	SHORT $LN7@SetSuperRo
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+476], 3
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
mov	edx, DWORD PTR _selector$[ebp]
and	edx, 15					
jne	SHORT $LN2@SetSuperRo
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+476]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+484], ecx
jmp	SHORT $LN1@SetSuperRo
mov	eax, DWORD PTR _selector$[ebp]
and	eax, 15					
sub	eax, 4
mov	ecx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [ecx+476]
cdq
and	edx, 7
add	eax, edx
sar	eax, 3
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+484], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+476]
cdq
and	edx, 255				
add	eax, edx
sar	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+476], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
cdq
and	edx, 255				
add	eax, edx
sar	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+484]
cdq
and	edx, 255				
add	eax, edx
sar	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+484], eax
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	$LN12@SetSuperRo
DD	$LN11@SetSuperRo
DD	$LN10@SetSuperRo
DD	$LN9@SetSuperRo
DD	$LN13@SetSuperRo
DB	0
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	1
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	2
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	3
npad	3
DD	$LN6@SetSuperRo
DD	$LN5@SetSuperRo
DD	$LN4@SetSuperRo
DD	$LN3@SetSuperRo
DD	$LN7@SetSuperRo
DB	0
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	1
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	2
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	3
ENDP
_Compute_Round PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
movzx	eax, BYTE PTR _round_mode$[ebp]
mov	DWORD PTR tv65[ebp], eax
cmp	DWORD PTR tv65[ebp], 7
ja	$LN11@Compute_Ro
mov	ecx, DWORD PTR tv65[ebp]
jmp	DWORD PTR $LN13@Compute_Ro[ecx*4]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_None
jmp	SHORT $LN11@Compute_Ro
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_To_Grid
jmp	SHORT $LN11@Compute_Ro
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_Up_To_Grid
jmp	SHORT $LN11@Compute_Ro
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_Down_To_Grid
jmp	SHORT $LN11@Compute_Ro
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_To_Half_Grid
jmp	SHORT $LN11@Compute_Ro
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_To_Double_Grid
jmp	SHORT $LN11@Compute_Ro
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_Super
jmp	SHORT $LN11@Compute_Ro
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_Super_45
mov	esp, ebp
pop	ebp
ret	0
DD	$LN4@Compute_Ro
DD	$LN7@Compute_Ro
DD	$LN3@Compute_Ro
DD	$LN5@Compute_Ro
DD	$LN6@Compute_Ro
DD	$LN8@Compute_Ro
DD	$LN2@Compute_Ro
DD	$LN1@Compute_Ro
ENDP
_Round_Super_45 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Supe
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+484]
add	ecx, DWORD PTR _compensation$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	eax, ecx
cdq
idiv	DWORD PTR [esi+476]
mov	ecx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [ecx+476]
mov	DWORD PTR _val$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _val$[ebp]
add	eax, DWORD PTR [edx+480]
mov	DWORD PTR _val$[ebp], eax
jns	SHORT $LN3@Round_Supe
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+480]
mov	DWORD PTR _val$[ebp], edx
jmp	SHORT $LN2@Round_Supe
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+484]
sub	eax, DWORD PTR [ecx+480]
sub	eax, DWORD PTR _distance$[ebp]
add	eax, DWORD PTR _compensation$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
cdq
idiv	DWORD PTR [ecx+476]
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+476]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _val$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Supe
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _val$[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_Super PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Supe
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+484]
add	ecx, DWORD PTR _compensation$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+476]
neg	edx
and	ecx, edx
mov	DWORD PTR _val$[ebp], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _val$[ebp]
add	ecx, DWORD PTR [eax+480]
mov	DWORD PTR _val$[ebp], ecx
jns	SHORT $LN3@Round_Supe
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
mov	DWORD PTR _val$[ebp], eax
jmp	SHORT $LN2@Round_Supe
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+484]
sub	eax, DWORD PTR [edx+480]
sub	eax, DWORD PTR _distance$[ebp]
add	eax, DWORD PTR _compensation$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+476]
neg	edx
and	eax, edx
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _val$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Supe
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_To_Double_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_To_D
mov	ecx, DWORD PTR _compensation$[ebp]
mov	edx, DWORD PTR _distance$[ebp]
lea	eax, DWORD PTR [edx+ecx+16]
and	eax, -32				
mov	DWORD PTR _val$[ebp], eax
jge	SHORT $LN3@Round_To_D
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_To_D
mov	ecx, DWORD PTR _compensation$[ebp]
sub	ecx, DWORD PTR _distance$[ebp]
add	ecx, 16					
and	ecx, -32				
neg	ecx
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_To_D
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_Up_To_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Up_T
mov	ecx, DWORD PTR _compensation$[ebp]
mov	edx, DWORD PTR _distance$[ebp]
lea	eax, DWORD PTR [edx+ecx+63]
and	eax, -64				
mov	DWORD PTR _val$[ebp], eax
jge	SHORT $LN3@Round_Up_T
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_Up_T
mov	ecx, DWORD PTR _compensation$[ebp]
sub	ecx, DWORD PTR _distance$[ebp]
add	ecx, 63					
and	ecx, -64				
neg	ecx
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Up_T
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_Down_To_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Down
mov	ecx, DWORD PTR _distance$[ebp]
add	ecx, DWORD PTR _compensation$[ebp]
and	ecx, -64				
mov	DWORD PTR _val$[ebp], ecx
jge	SHORT $LN3@Round_Down
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_Down
mov	edx, DWORD PTR _compensation$[ebp]
sub	edx, DWORD PTR _distance$[ebp]
and	edx, -64				
neg	edx
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Down
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_To_Half_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_To_H
mov	ecx, DWORD PTR _distance$[ebp]
add	ecx, DWORD PTR _compensation$[ebp]
and	ecx, -64				
add	ecx, 32					
mov	DWORD PTR _val$[ebp], ecx
jns	SHORT $LN3@Round_To_H
mov	DWORD PTR _val$[ebp], 32		
jmp	SHORT $LN2@Round_To_H
mov	edx, DWORD PTR _compensation$[ebp]
sub	edx, DWORD PTR _distance$[ebp]
and	edx, -64				
add	edx, 32					
neg	edx
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_To_H
mov	DWORD PTR _val$[ebp], -32		
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_To_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_To_G
mov	ecx, DWORD PTR _compensation$[ebp]
mov	edx, DWORD PTR _distance$[ebp]
lea	eax, DWORD PTR [edx+ecx+32]
and	eax, -64				
mov	DWORD PTR _val$[ebp], eax
jge	SHORT $LN3@Round_To_G
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_To_G
mov	ecx, DWORD PTR _compensation$[ebp]
sub	ecx, DWORD PTR _distance$[ebp]
add	ecx, 32					
and	ecx, -64				
neg	ecx
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_To_G
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_None PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_None
mov	ecx, DWORD PTR _distance$[ebp]
add	ecx, DWORD PTR _compensation$[ebp]
mov	DWORD PTR _val$[ebp], ecx
jns	SHORT $LN3@Round_None
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_None
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _compensation$[ebp]
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_None
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Direct_Move_Orig_Y PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+ecx*8+4]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [eax+edx*8+4], ecx
pop	ebp
ret	0
ENDP
_Direct_Move_Orig_X PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+ecx*8]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [eax+edx*8], ecx
pop	ebp
ret	0
ENDP
_Direct_Move_Y PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR [eax+ecx*8+4]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+16]
mov	DWORD PTR [eax+edx*8+4], ecx
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+24]
movzx	ecx, BYTE PTR [eax+ecx]
or	ecx, 16					
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+24]
mov	BYTE PTR [eax+edx], cl
pop	ebp
ret	0
ENDP
_Direct_Move_X PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR [eax+ecx*8]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+16]
mov	DWORD PTR [eax+edx*8], ecx
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+24]
movzx	ecx, BYTE PTR [eax+ecx]
or	ecx, 8
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+24]
mov	BYTE PTR [eax+edx], cl
pop	ebp
ret	0
ENDP
_Direct_Move_Orig PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN2@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [edx+ecx*8], eax
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN3@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8+4]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [edx+ecx*8+4], eax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Direct_Move PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN2@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+16]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [edx+ecx*8], eax
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+24]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 8
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+24]
mov	BYTE PTR [edx+ecx], al
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN3@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+16]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8+4]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [edx+ecx*8+4], eax
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+24]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 16					
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+24]
mov	BYTE PTR [edx+ecx], al
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_Goto_CodeRange PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _aRange$[ebp], 1
jl	SHORT $LN3@Ins_Goto_C
cmp	DWORD PTR _aRange$[ebp], 3
jle	SHORT $LN4@Ins_Goto_C
push	OFFSET $SG11470
push	1795					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
jmp	$LN5@Ins_Goto_C
mov	edx, DWORD PTR _aRange$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
lea	ecx, DWORD PTR [eax+edx*8+436]
mov	DWORD PTR _range$[ebp], ecx
mov	edx, DWORD PTR _range$[ebp]
cmp	DWORD PTR [edx], 0
jne	SHORT $LN2@Ins_Goto_C
push	OFFSET $SG11473
push	1803					
push	138					
call	_FT_Throw
add	esp, 12					
or	eax, 138				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
jmp	SHORT $LN5@Ins_Goto_C
mov	edx, DWORD PTR _range$[ebp]
mov	eax, DWORD PTR _aIP$[ebp]
cmp	eax, DWORD PTR [edx+4]
jbe	SHORT $LN1@Ins_Goto_C
push	OFFSET $SG11475
push	1813					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
jmp	SHORT $LN5@Ins_Goto_C
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _range$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+356], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _range$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+364], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _aIP$[ebp]
mov	DWORD PTR [edx+360], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _aRange$[ebp]
mov	DWORD PTR [ecx+352], edx
xor	al, al
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_GetShortIns PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+360], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+356]
movzx	eax, BYTE PTR [eax+ecx-2]
shl	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+356]
movzx	edx, BYTE PTR [ecx+edx-1]
add	eax, edx
pop	ebp
ret	0
ENDP
_Move_CVT_Stretched PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [eax+384]
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Current_Ratio
add	esp, 4
push	eax
mov	edx, DWORD PTR _value$[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _idx$[ebp]
add	eax, DWORD PTR [esi+ecx*4]
mov	edx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Move_CVT PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
add	eax, DWORD PTR _value$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+384]
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
pop	ebp
ret	0
ENDP
_Write_CVT_Stretched PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Current_Ratio
add	esp, 4
push	eax
mov	ecx, DWORD PTR _value$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Write_CVT PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _value$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
pop	ebp
ret	0
ENDP
_Read_CVT_Stretched PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Current_Ratio
add	esp, 4
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+384]
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Read_CVT PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
pop	ebp
ret	0
ENDP
_Current_Ppem_Stretched PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Current_Ratio
add	esp, 4
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+252]
push	edx
call	_FT_MulFix_i386
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Current_Ppem PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [eax+252]
pop	ebp
ret	0
ENDP
_Current_Ratio PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+256], 0
jne	$LN5@Current_Ra
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+296]
test	edx, edx
jne	SHORT $LN4@Current_Ra
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+244]
mov	DWORD PTR [eax+256], edx
jmp	SHORT $LN5@Current_Ra
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+294]
test	ecx, ecx
jne	SHORT $LN2@Current_Ra
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+248]
mov	DWORD PTR [edx+256], ecx
jmp	SHORT $LN5@Current_Ra
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+244]
push	edx
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _x$2[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+296]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+248]
push	eax
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _y$1[ebp], eax
mov	ecx, DWORD PTR _y$1[ebp]
push	ecx
mov	edx, DWORD PTR _x$2[ebp]
push	edx
call	_FT_Hypot
add	esp, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+256], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+256]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_DotFix14 PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _ax$[ebp]
and	eax, 65535				
imul	eax, DWORD PTR _bx$[ebp]
mov	DWORD PTR _l$[ebp], eax
mov	ecx, DWORD PTR _ax$[ebp]
sar	ecx, 16					
imul	ecx, DWORD PTR _bx$[ebp]
mov	DWORD PTR _m$[ebp], ecx
mov	edx, DWORD PTR _m$[ebp]
shl	edx, 16					
add	edx, DWORD PTR _l$[ebp]
mov	DWORD PTR _lo1$[ebp], edx
mov	eax, DWORD PTR _lo1$[ebp]
cmp	eax, DWORD PTR _l$[ebp]
jae	SHORT $LN3@TT_DotFix1
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN4@TT_DotFix1
mov	DWORD PTR tv74[ebp], 0
mov	ecx, DWORD PTR _m$[ebp]
sar	ecx, 16					
mov	edx, DWORD PTR _l$[ebp]
sar	edx, 31					
add	ecx, DWORD PTR tv74[ebp]
add	edx, ecx
mov	DWORD PTR _hi1$[ebp], edx
mov	eax, DWORD PTR _ay$[ebp]
and	eax, 65535				
imul	eax, DWORD PTR _by$[ebp]
mov	DWORD PTR _l$[ebp], eax
mov	ecx, DWORD PTR _ay$[ebp]
sar	ecx, 16					
imul	ecx, DWORD PTR _by$[ebp]
mov	DWORD PTR _m$[ebp], ecx
mov	edx, DWORD PTR _m$[ebp]
shl	edx, 16					
add	edx, DWORD PTR _l$[ebp]
mov	DWORD PTR _lo2$[ebp], edx
mov	eax, DWORD PTR _lo2$[ebp]
cmp	eax, DWORD PTR _l$[ebp]
jae	SHORT $LN5@TT_DotFix1
mov	DWORD PTR tv86[ebp], 1
jmp	SHORT $LN6@TT_DotFix1
mov	DWORD PTR tv86[ebp], 0
mov	ecx, DWORD PTR _m$[ebp]
sar	ecx, 16					
mov	edx, DWORD PTR _l$[ebp]
sar	edx, 31					
add	ecx, DWORD PTR tv86[ebp]
add	edx, ecx
mov	DWORD PTR _hi2$[ebp], edx
mov	eax, DWORD PTR _lo1$[ebp]
add	eax, DWORD PTR _lo2$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR _lo1$[ebp]
jae	SHORT $LN7@TT_DotFix1
mov	DWORD PTR tv91[ebp], 1
jmp	SHORT $LN8@TT_DotFix1
mov	DWORD PTR tv91[ebp], 0
mov	edx, DWORD PTR _hi1$[ebp]
add	edx, DWORD PTR _hi2$[ebp]
add	edx, DWORD PTR tv91[ebp]
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _hi$[ebp]
sar	eax, 31					
mov	DWORD PTR _s$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
add	ecx, DWORD PTR _s$[ebp]
mov	DWORD PTR _l$[ebp], ecx
mov	edx, DWORD PTR _l$[ebp]
cmp	edx, DWORD PTR _lo$[ebp]
jae	SHORT $LN9@TT_DotFix1
mov	DWORD PTR tv128[ebp], 1
jmp	SHORT $LN10@TT_DotFix1
mov	DWORD PTR tv128[ebp], 0
mov	eax, DWORD PTR _s$[ebp]
add	eax, DWORD PTR tv128[ebp]
add	eax, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _l$[ebp]
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _lo$[ebp]
add	edx, 8192				
mov	DWORD PTR _l$[ebp], edx
mov	eax, DWORD PTR _l$[ebp]
cmp	eax, DWORD PTR _lo$[ebp]
jae	SHORT $LN11@TT_DotFix1
mov	DWORD PTR tv133[ebp], 1
jmp	SHORT $LN12@TT_DotFix1
mov	DWORD PTR tv133[ebp], 0
mov	ecx, DWORD PTR _hi$[ebp]
add	ecx, DWORD PTR tv133[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	eax, DWORD PTR _hi$[ebp]
shl	eax, 18					
mov	edx, DWORD PTR _l$[ebp]
shr	edx, 14					
or	eax, edx
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_MulFix14 PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _sign$[ebp], eax
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN3@TT_MulFix1
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR _a$[ebp], ecx
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN2@TT_MulFix1
mov	edx, DWORD PTR _b$[ebp]
neg	edx
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
sar	eax, 16					
and	eax, 65535				
mov	DWORD PTR _ah$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
and	ecx, 65535				
mov	DWORD PTR _al$[ebp], ecx
mov	edx, DWORD PTR _al$[ebp]
imul	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _lo$[ebp], edx
mov	eax, DWORD PTR _ah$[ebp]
imul	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _mid$[ebp], eax
mov	ecx, DWORD PTR _mid$[ebp]
shr	ecx, 16					
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _mid$[ebp]
shl	edx, 16					
add	edx, 8192				
mov	DWORD PTR _mid$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
add	eax, DWORD PTR _mid$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR _mid$[ebp]
jae	SHORT $LN1@TT_MulFix1
mov	edx, DWORD PTR _hi$[ebp]
add	edx, 1
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
shr	eax, 14					
mov	ecx, DWORD PTR _hi$[ebp]
shl	ecx, 18					
or	eax, ecx
mov	DWORD PTR _mid$[ebp], eax
cmp	DWORD PTR _sign$[ebp], 0
jl	SHORT $LN6@TT_MulFix1
mov	edx, DWORD PTR _mid$[ebp]
mov	DWORD PTR tv85[ebp], edx
jmp	SHORT $LN7@TT_MulFix1
mov	eax, DWORD PTR _mid$[ebp]
neg	eax
mov	DWORD PTR tv85[ebp], eax
mov	eax, DWORD PTR tv85[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Init_Context PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN4@Init_Conte
mov	edx, DWORD PTR _exec$[ebp]
push	edx
push	OFFSET $SG11003
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN5@Init_Conte
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+432], 32			
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+432]
push	eax
push	0
push	16					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+436], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@Init_Conte
jmp	SHORT $Fail_Memory$11
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+440], ax
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+442], dx
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+388], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+24], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+392], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+4], 0
xor	eax, eax
jmp	SHORT $LN6@Init_Conte
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
push	OFFSET $SG11012
call	_FT_Message
add	esp, 8
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Done_Context
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@Init_Conte
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN9@Init_Conte
DD	-8					
DD	4
DD	$LN8@Init_Conte
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_size_init_bytecode PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _ftsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _ftsize$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 260				
mov	DWORD PTR _maxp$[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+300], -1
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+304], -1
mov	edx, DWORD PTR _maxp$[ebp]
movzx	eax, WORD PTR [edx+20]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+120], eax
mov	edx, DWORD PTR _maxp$[ebp]
movzx	eax, WORD PTR [edx+22]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+132], eax
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+116], 0
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+128], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+140], 0
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+144], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+644]
mov	DWORD PTR [eax+240], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _maxp$[ebp]
mov	dx, WORD PTR [ecx+18]
mov	WORD PTR [eax+248], dx
mov	eax, DWORD PTR _size$[ebp]
add	eax, 72					
mov	DWORD PTR _metrics$2[ebp], eax
mov	ecx, DWORD PTR _metrics$2[ebp]
mov	BYTE PTR [ecx+37], 0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	BYTE PTR [edx+38], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [edx+ecx+20], 0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [ecx+eax+20], 0
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [eax+edx+20], 0
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [eax+edx+20], 0
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+120]
push	eax
push	0
push	24					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+124], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN4@tt_size_in
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+132]
push	edx
push	0
push	24					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+136], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@tt_size_in
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+240]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+244], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@tt_size_in
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, WORD PTR [eax+248]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+252], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@tt_size_in
jmp	$Exit$11
mov	edx, DWORD PTR _maxp$[ebp]
mov	ax, WORD PTR [edx+16]
mov	WORD PTR _n_twilight$[ebp], ax
movzx	ecx, WORD PTR _n_twilight$[ebp]
add	ecx, 4
mov	WORD PTR _n_twilight$[ebp], cx
mov	edx, DWORD PTR _size$[ebp]
add	edx, 256				
push	edx
push	0
movzx	eax, WORD PTR _n_twilight$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_tt_glyphzone_new
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_size_in
jmp	SHORT $Exit$11
mov	edx, DWORD PTR _size$[ebp]
mov	ax, WORD PTR _n_twilight$[ebp]
mov	WORD PTR [edx+264], ax
mov	edi, DWORD PTR _size$[ebp]
add	edi, 172				
mov	ecx, 17					
mov	esi, OFFSET _tt_default_graphics_state
rep movsd
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$1[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _library$1[ebp]
mov	edx, DWORD PTR [ecx+edx+172]
mov	DWORD PTR [eax+652], edx
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+652], 0
jne	SHORT $LN2@tt_size_in
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+652], OFFSET _TT_RunIns
movzx	edx, BYTE PTR _pedantic$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_tt_size_run_fpgm
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@tt_size_in
mov	ecx, DWORD PTR _ftsize$[ebp]
push	ecx
call	_tt_size_done_bytecode
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@tt_size_in
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN9@tt_size_in
DD	-8					
DD	4
DD	$LN8@tt_size_in
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_size_done_bytecode PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ftsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _ftsize$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN12@tt_size_do
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+296], 0
mov	edx, DWORD PTR _size$[ebp]
mov	BYTE PTR [edx+292], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+244]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+244], 0
xor	ecx, ecx
jne	SHORT $LN12@tt_size_do
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+240], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+252]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+252], 0
xor	ecx, ecx
jne	SHORT $LN9@tt_size_do
xor	edx, edx
mov	eax, DWORD PTR _size$[ebp]
mov	WORD PTR [eax+248], dx
mov	ecx, DWORD PTR _size$[ebp]
add	ecx, 256				
push	ecx
call	_tt_glyphzone_done
add	esp, 4
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+124]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+124], 0
xor	eax, eax
jne	SHORT $LN6@tt_size_do
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+136]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+136], 0
xor	edx, edx
jne	SHORT $LN3@tt_size_do
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+116], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+120], 0
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+128], 0
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+132], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+140], 0
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+144], 0
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+300], -1
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+304], -1
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_check_single_notdef PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	BYTE PTR _result$[ebp], 0
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	DWORD PTR _glyph_index$[ebp], 0
mov	DWORD PTR _count$[ebp], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN9@tt_check_s
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+696]
jae	SHORT $LN7@tt_check_s
lea	ecx, DWORD PTR _asize$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_get_location
add	esp, 12					
cmp	DWORD PTR _asize$[ebp], 0
jbe	SHORT $LN6@tt_check_s
mov	ecx, DWORD PTR _count$[ebp]
add	ecx, 1
mov	DWORD PTR _count$[ebp], ecx
cmp	DWORD PTR _count$[ebp], 1
jbe	SHORT $LN5@tt_check_s
jmp	SHORT $LN7@tt_check_s
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR _glyph_index$[ebp], edx
jmp	SHORT $LN8@tt_check_s
cmp	DWORD PTR _count$[ebp], 1
jne	SHORT $LN4@tt_check_s
cmp	DWORD PTR _glyph_index$[ebp], 0
jne	SHORT $LN3@tt_check_s
mov	BYTE PTR _result$[ebp], 1
jmp	SHORT $LN4@tt_check_s
push	8
lea	eax, DWORD PTR _buf$1[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _ttface$[ebp]
push	edx
call	_FT_Get_Glyph_Name
add	esp, 16					
mov	DWORD PTR _error$2[ebp], eax
cmp	DWORD PTR _error$2[ebp], 0
jne	SHORT $LN4@tt_check_s
mov	eax, 1
imul	ecx, eax, 0
movsx	edx, BYTE PTR _buf$1[ebp+ecx]
cmp	edx, 46					
jne	SHORT $LN4@tt_check_s
mov	esi, esp
push	8
push	OFFSET $SG10592
lea	eax, DWORD PTR _buf$1[ebp]
push	eax
call	DWORD PTR __imp__strncmp
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
jne	SHORT $LN4@tt_check_s
mov	BYTE PTR _result$[ebp], 1
mov	al, BYTE PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@tt_check_s
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN14@tt_check_s
DD	-20					
DD	4
DD	$LN12@tt_check_s
DD	-52					
DD	8
DD	$LN13@tt_check_s
DB	98					
DB	117					
DB	102					
DB	0
DB	97					
DB	115					
DB	105					
DB	122					
DB	101					
DB	0
ENDP
_tt_check_trickyness PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN3@tt_check_t
xor	al, al
jmp	SHORT $LN4@tt_check_t
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN2@tt_check_t
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
call	_tt_check_trickyness_family
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN2@tt_check_t
mov	al, 1
jmp	SHORT $LN4@tt_check_t
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_check_trickyness_sfnt_ids
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN1@tt_check_t
mov	al, 1
jmp	SHORT $LN4@tt_check_t
xor	al, al
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_tt_check_trickyness_sfnt_ids PROC
push	ebp
mov	ebp, esp
sub	esp, 104				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-104]
mov	ecx, 26					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	68					
push	0
lea	eax, DWORD PTR _num_matched_ids$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	BYTE PTR _has_cvt$[ebp], 0
mov	BYTE PTR _has_fpgm$[ebp], 0
mov	BYTE PTR _has_prep$[ebp], 0
xor	ecx, ecx
mov	WORD PTR _i$[ebp], cx
jmp	SHORT $LN23@tt_check_t
mov	dx, WORD PTR _i$[ebp]
add	dx, 1
mov	WORD PTR _i$[ebp], dx
movzx	eax, WORD PTR _i$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+152]
cmp	eax, edx
jge	$LN21@tt_check_t
mov	DWORD PTR _checksum$[ebp], 0
movzx	eax, WORD PTR _i$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR tv77[ebp], eax
cmp	DWORD PTR tv77[ebp], 1668707360		
je	SHORT $LN18@tt_check_t
cmp	DWORD PTR tv77[ebp], 1718642541		
je	SHORT $LN17@tt_check_t
cmp	DWORD PTR tv77[ebp], 1886545264		
je	SHORT $LN16@tt_check_t
jmp	SHORT $LN15@tt_check_t
mov	DWORD PTR _k$[ebp], 0
mov	BYTE PTR _has_cvt$[ebp], 1
jmp	SHORT $LN19@tt_check_t
mov	DWORD PTR _k$[ebp], 1
mov	BYTE PTR _has_fpgm$[ebp], 1
jmp	SHORT $LN19@tt_check_t
mov	DWORD PTR _k$[ebp], 2
mov	BYTE PTR _has_prep$[ebp], 1
jmp	SHORT $LN19@tt_check_t
jmp	$LN22@tt_check_t
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN14@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
cmp	DWORD PTR _j$[ebp], 17			
jge	SHORT $LN12@tt_check_t
movzx	edx, WORD PTR _i$[ebp]
shl	edx, 4
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+156]
imul	eax, DWORD PTR _j$[ebp], 24
mov	esi, DWORD PTR _k$[ebp]
mov	ecx, DWORD PTR [ecx+edx+12]
cmp	ecx, DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[eax+esi*8+4]
jne	SHORT $LN11@tt_check_t
cmp	DWORD PTR _checksum$[ebp], 0
jne	SHORT $LN10@tt_check_t
movzx	edx, WORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_get_sfnt_checksum
add	esp, 8
mov	DWORD PTR _checksum$[ebp], eax
imul	ecx, DWORD PTR _j$[ebp], 24
mov	edx, DWORD PTR _k$[ebp]
mov	eax, DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[ecx+edx*8]
cmp	eax, DWORD PTR _checksum$[ebp]
jne	SHORT $LN9@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
mov	ecx, DWORD PTR _j$[ebp]
cmp	DWORD PTR _num_matched_ids$[ebp+ecx*4], 3
jne	SHORT $LN11@tt_check_t
mov	al, 1
jmp	$LN24@tt_check_t
jmp	$LN13@tt_check_t
jmp	$LN22@tt_check_t
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN7@tt_check_t
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
cmp	DWORD PTR _j$[ebp], 17			
jge	$LN5@tt_check_t
movzx	eax, BYTE PTR _has_cvt$[ebp]
test	eax, eax
jne	SHORT $LN4@tt_check_t
imul	ecx, DWORD PTR _j$[ebp], 24
mov	edx, 8
imul	eax, edx, 0
cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[ecx+eax+4], 0
jne	SHORT $LN4@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
movzx	ecx, BYTE PTR _has_fpgm$[ebp]
test	ecx, ecx
jne	SHORT $LN3@tt_check_t
imul	edx, DWORD PTR _j$[ebp], 24
mov	eax, 8
shl	eax, 0
cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[edx+eax+4], 0
jne	SHORT $LN3@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
movzx	ecx, BYTE PTR _has_prep$[ebp]
test	ecx, ecx
jne	SHORT $LN2@tt_check_t
imul	edx, DWORD PTR _j$[ebp], 24
mov	eax, 8
shl	eax, 1
cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[edx+eax+4], 0
jne	SHORT $LN2@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
mov	ecx, DWORD PTR _j$[ebp]
cmp	DWORD PTR _num_matched_ids$[ebp+ecx*4], 3
jne	SHORT $LN1@tt_check_t
mov	al, 1
jmp	SHORT $LN24@tt_check_t
jmp	$LN6@tt_check_t
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN28@tt_check_t
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 104				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN27@tt_check_t
DD	-80					
DD	68					
DD	$LN26@tt_check_t
DB	110					
DB	117					
DB	109					
DB	95					
DB	109					
DB	97					
DB	116					
DB	99					
DB	104					
DB	101					
DB	100					
DB	95					
DB	105					
DB	100					
DB	115					
DB	0
ENDP
_tt_get_sfnt_checksum PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+508], 0
jne	SHORT $LN2@tt_get_sfn
xor	eax, eax
jmp	SHORT $LN3@tt_get_sfn
mov	esi, esp
push	0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
push	edx
movzx	eax, WORD PTR _i$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx+eax]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@tt_get_sfn
xor	eax, eax
jmp	SHORT $LN3@tt_get_sfn
movzx	ecx, WORD PTR _i$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	ecx, DWORD PTR [eax+ecx+12]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+104]
push	eax
call	_tt_synth_sfnt_checksum
add	esp, 8
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_tt_synth_sfnt_checksum PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _checksum$[ebp], 0
mov	eax, DWORD PTR _length$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@tt_synth_s
xor	eax, eax
jmp	SHORT $LN8@tt_synth_s
jmp	SHORT $LN6@tt_synth_s
mov	edx, DWORD PTR _length$[ebp]
sub	edx, 4
mov	DWORD PTR _length$[ebp], edx
cmp	DWORD PTR _length$[ebp], 3
jbe	SHORT $LN4@tt_synth_s
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetULong
add	esp, 4
add	eax, DWORD PTR _checksum$[ebp]
mov	DWORD PTR _checksum$[ebp], eax
jmp	SHORT $LN5@tt_synth_s
mov	DWORD PTR _i$[ebp], 3
jmp	SHORT $LN3@tt_synth_s
mov	ecx, DWORD PTR _length$[ebp]
sub	ecx, 1
mov	DWORD PTR _length$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _length$[ebp], 0
jbe	SHORT $LN1@tt_synth_s
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetChar
add	esp, 4
movzx	edx, al
mov	ecx, DWORD PTR _i$[ebp]
shl	ecx, 3
shl	edx, cl
add	edx, DWORD PTR _checksum$[ebp]
mov	DWORD PTR _checksum$[ebp], edx
jmp	SHORT $LN2@tt_synth_s
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	eax, DWORD PTR _checksum$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_check_trickyness_family PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@tt_check_t
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
cmp	DWORD PTR _nn$[ebp], 9
jge	SHORT $LN2@tt_check_t
imul	ecx, DWORD PTR _nn$[ebp], 20
add	ecx, OFFSET ?trick_names@?1??tt_check_trickyness_family@@9@9
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _name$[ebp]
push	edx
call	DWORD PTR __imp__strstr
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@tt_check_t
mov	al, 1
jmp	SHORT $LN5@tt_check_t
jmp	SHORT $LN3@tt_check_t
xor	al, al
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_loader_init PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 128				
mov	BYTE PTR _pedantic$[ebp], al
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
push	208					
push	0
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 2
jne	$LN29@tt_loader_
movzx	ecx, BYTE PTR _glyf_table_only$[ebp]
test	ecx, ecx
jne	$LN29@tt_loader_
mov	BYTE PTR _reexecute$3[ebp], 0
mov	edx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [edx+300], 0
jl	SHORT $LN27@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+304], 0
jge	SHORT $LN28@tt_loader_
movzx	ecx, BYTE PTR _pedantic$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
call	_tt_size_ready_bytecode
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@tt_loader_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN30@tt_loader_
jmp	SHORT $LN25@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+300], 0
je	SHORT $LN24@tt_loader_
mov	ecx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [ecx+300]
jmp	$LN30@tt_loader_
jmp	SHORT $LN25@tt_loader_
mov	edx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [edx+304], 0
je	SHORT $LN25@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [eax+304]
jmp	$LN30@tt_loader_
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, BYTE PTR [ecx+292]
test	edx, edx
je	SHORT $LN32@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+296]
mov	DWORD PTR tv95[ebp], ecx
jmp	SHORT $LN33@tt_loader_
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR tv95[ebp], ecx
mov	edx, DWORD PTR tv95[ebp]
mov	DWORD PTR _exec$5[ebp], edx
cmp	DWORD PTR _exec$5[ebp], 0
jne	SHORT $LN21@tt_loader_
push	OFFSET $SG10324
push	2143					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	$LN30@tt_loader_
mov	eax, DWORD PTR _load_flags$[ebp]
sar	eax, 16					
and	eax, 15					
cmp	eax, 2
je	SHORT $LN34@tt_loader_
mov	BYTE PTR tv137[ebp], 1
jmp	SHORT $LN35@tt_loader_
mov	BYTE PTR tv137[ebp], 0
mov	cl, BYTE PTR tv137[ebp]
mov	BYTE PTR _grayscale$4[ebp], cl
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _exec$5[ebp]
push	ecx
call	_TT_Load_Context
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@tt_loader_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN30@tt_loader_
movzx	edx, BYTE PTR _grayscale$4[ebp]
mov	eax, DWORD PTR _exec$5[ebp]
movzx	ecx, BYTE PTR [eax+608]
cmp	edx, ecx
je	SHORT $LN19@tt_loader_
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN17@tt_loader_
push	OFFSET $SG10333
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN18@tt_loader_
mov	edx, DWORD PTR _exec$5[ebp]
mov	al, BYTE PTR _grayscale$4[ebp]
mov	BYTE PTR [edx+608], al
mov	BYTE PTR _reexecute$3[ebp], 1
movzx	ecx, BYTE PTR _reexecute$3[ebp]
test	ecx, ecx
je	SHORT $LN14@tt_loader_
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN13@tt_loader_
mov	edx, DWORD PTR _i$2[ebp]
add	edx, 1
mov	DWORD PTR _i$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _i$2[ebp]
cmp	ecx, DWORD PTR [eax+240]
jae	SHORT $LN11@tt_loader_
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+88]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
mov	eax, DWORD PTR _i$2[ebp]
movsx	ecx, WORD PTR [edx+eax*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [edx+244]
mov	edx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [ecx+edx*4], eax
jmp	SHORT $LN12@tt_loader_
movzx	eax, BYTE PTR _pedantic$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_tt_size_run_prep
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@tt_loader_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN30@tt_loader_
mov	edx, DWORD PTR _exec$5[ebp]
movzx	eax, BYTE PTR [edx+336]
and	eax, 1
je	SHORT $LN9@tt_loader_
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 2
mov	DWORD PTR _load_flags$[ebp], ecx
mov	edx, DWORD PTR _exec$5[ebp]
movzx	eax, BYTE PTR [edx+336]
and	eax, 2
je	SHORT $LN8@tt_loader_
mov	edi, DWORD PTR _exec$5[ebp]
add	edi, 284				
mov	ecx, 17					
mov	esi, OFFSET _tt_default_graphics_state
rep movsd
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 128				
mov	edx, DWORD PTR _exec$5[ebp]
mov	BYTE PTR [edx+561], cl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _exec$5[ebp]
mov	DWORD PTR [eax+160], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _exec$5[ebp]
mov	ecx, DWORD PTR [eax+392]
mov	DWORD PTR [edx+164], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax+48], 0
je	SHORT $LN7@tt_loader_
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+84], 0
jmp	SHORT $LN6@tt_loader_
mov	esi, esp
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1735162214				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 142				
jne	SHORT $LN5@tt_loader_
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+84], 0
jmp	SHORT $LN6@tt_loader_
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_loader_
push	OFFSET $SG10355
call	_FT_Message
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN30@tt_loader_
jmp	SHORT $LN6@tt_loader_
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+84], eax
movzx	edx, BYTE PTR _glyf_table_only$[ebp]
test	edx, edx
jne	SHORT $LN1@tt_loader_
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _gloader$1[ebp], edx
mov	eax, DWORD PTR _gloader$1[ebp]
push	eax
call	_FT_GlyphLoader_Rewind
add	esp, 4
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _gloader$1[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _load_flags$[ebp]
mov	DWORD PTR [eax+16], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+24], eax
xor	eax, eax
pop	edi
pop	esi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_load_sbit_image PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+532]
mov	DWORD PTR _sfnt$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
mov	DWORD PTR _stream$[ebp], edx
mov	esi, esp
lea	eax, DWORD PTR _metrics$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
add	ecx, 76					
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+112]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+72]
call	eax
add	esp, 28					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN3@load_sbit_
xor	ecx, ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [edx+110], cx
xor	eax, eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [ecx+108], ax
movzx	edx, WORD PTR _metrics$[ebp+2]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+24], edx
movzx	ecx, WORD PTR _metrics$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+28], ecx
movsx	eax, WORD PTR _metrics$[ebp+4]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+32], eax
movsx	edx, WORD PTR _metrics$[ebp+6]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+36], edx
movzx	ecx, WORD PTR _metrics$[ebp+8]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+40], ecx
movsx	eax, WORD PTR _metrics$[ebp+10]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+44], eax
movsx	edx, WORD PTR _metrics$[ebp+12]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+48], edx
movzx	ecx, WORD PTR _metrics$[ebp+14]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+52], ecx
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+72], 1651078259		
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 16					
je	SHORT $LN2@load_sbit_
movsx	edx, WORD PTR _metrics$[ebp+10]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+100], edx
movsx	ecx, WORD PTR _metrics$[ebp+12]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+104], ecx
jmp	SHORT $LN3@load_sbit_
movsx	eax, WORD PTR _metrics$[ebp+4]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+100], eax
movsx	edx, WORD PTR _metrics$[ebp+6]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+104], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@load_sbit_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN7@load_sbit_
DD	-40					
DD	16					
DD	$LN6@load_sbit_
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
ENDP
_compute_glyph_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 92					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-92]
mov	ecx, 23					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _glyph$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _size$[ebp], edx
mov	DWORD PTR _y_scale$[ebp], 65536		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
jne	SHORT $LN14@compute_gl
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _y_scale$[ebp], eax
mov	ecx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [ecx+72], 1668246896		
je	SHORT $LN13@compute_gl
lea	edx, DWORD PTR _bbox$[ebp]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Get_CBox
add	esp, 8
jmp	SHORT $LN12@compute_gl
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 36					
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _bbox$[ebp], edx
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR _bbox$[ebp+4], eax
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _bbox$[ebp+8], edx
mov	eax, DWORD PTR [ecx+12]
mov	DWORD PTR _bbox$[ebp+12], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+60]
mov	DWORD PTR [ecx+56], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _bbox$[ebp+12]
mov	DWORD PTR [eax+36], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [edx+76]
sub	ecx, DWORD PTR [eax+68]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+40], ecx
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+480], 0
jne	SHORT $LN11@compute_gl
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 2
jne	SHORT $LN11@compute_gl
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, WORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_get_device_metrics
add	esp, 12					
mov	DWORD PTR _widthp$7[ebp], eax
cmp	DWORD PTR _widthp$7[ebp], 0
je	SHORT $LN11@compute_gl
mov	ecx, DWORD PTR _widthp$7[ebp]
movzx	edx, BYTE PTR [ecx]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+40], edx
mov	ecx, DWORD PTR _bbox$[ebp+8]
sub	ecx, DWORD PTR _bbox$[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _bbox$[ebp+12]
sub	eax, DWORD PTR _bbox$[ebp+4]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN9@compute_gl
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+330]
test	edx, edx
jle	SHORT $LN9@compute_gl
mov	eax, DWORD PTR _y_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+188]
sub	edx, DWORD PTR _bbox$[ebp+12]
push	edx
call	_FT_DivFix
add	esp, 8
cwde
mov	DWORD PTR _top$6[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [ecx+188]
cmp	eax, DWORD PTR [edx+196]
jg	SHORT $LN8@compute_gl
mov	DWORD PTR _advance$5[ebp], 0
jmp	SHORT $LN7@compute_gl
mov	ecx, DWORD PTR _y_scale$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [edx+188]
sub	ecx, DWORD PTR [eax+196]
push	ecx
call	_FT_DivFix
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _advance$5[ebp], edx
jmp	SHORT $LN6@compute_gl
mov	eax, DWORD PTR _y_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _bbox$[ebp+12]
sub	ecx, DWORD PTR _bbox$[ebp+4]
push	ecx
call	_FT_DivFix
add	esp, 8
movsx	edx, ax
mov	DWORD PTR _height$4[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+364]
cmp	ecx, 65535				
je	SHORT $LN5@compute_gl
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+436]
sub	eax, edx
mov	DWORD PTR _advance$5[ebp], eax
jmp	SHORT $LN4@compute_gl
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+220]
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+222]
sub	ecx, eax
mov	DWORD PTR _advance$5[ebp], ecx
mov	eax, DWORD PTR _advance$5[ebp]
sub	eax, DWORD PTR _height$4[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _top$6[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _incr$3[ebp], eax
cmp	DWORD PTR _incr$3[ebp], 0
je	SHORT $LN3@compute_gl
mov	ecx, DWORD PTR _incr$3[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+8], 0
je	SHORT $LN3@compute_gl
mov	DWORD PTR _metrics$2[ebp], 0
mov	eax, DWORD PTR _top$6[ebp]
mov	DWORD PTR _metrics$2[ebp+4], eax
mov	ecx, DWORD PTR _advance$5[ebp]
mov	DWORD PTR _metrics$2[ebp+8], ecx
mov	esi, esp
lea	edx, DWORD PTR _metrics$2[ebp]
push	edx
push	1
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _incr$3[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _incr$3[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
je	SHORT $LN2@compute_gl
mov	eax, DWORD PTR _error$1[ebp]
jmp	SHORT $LN15@compute_gl
mov	eax, DWORD PTR _metrics$2[ebp+4]
mov	DWORD PTR _top$6[ebp], eax
mov	ecx, DWORD PTR _metrics$2[ebp+8]
mov	DWORD PTR _advance$5[ebp], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _advance$5[ebp]
mov	DWORD PTR [edx+60], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	SHORT $LN1@compute_gl
mov	eax, DWORD PTR _y_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _top$6[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _top$6[ebp], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _advance$5[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _advance$5[ebp], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [ecx+40]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [edx+32]
sub	ecx, eax
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _top$6[ebp]
mov	DWORD PTR [eax+48], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _advance$5[ebp]
mov	DWORD PTR [edx+52], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@compute_gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 92					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	2
DD	$LN19@compute_gl
DD	-28					
DD	16					
DD	$LN17@compute_gl
DD	-84					
DD	16					
DD	$LN18@compute_gl
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
DB	98					
DB	98					
DB	111					
DB	120					
DB	0
ENDP
_load_truetype_glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 216				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-216]
mov	ecx, 54					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _gloader$[ebp], eax
mov	BYTE PTR _opened_frame$[ebp], 0
mov	DWORD PTR _deltas$[ebp], 0
mov	BYTE PTR _glyph_data_loaded$[ebp], 0
cmp	DWORD PTR _recurse_count$[ebp], 1
jbe	SHORT $LN62@load_truet
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+290]
cmp	DWORD PTR _recurse_count$[ebp], edx
jbe	SHORT $LN62@load_truet
push	OFFSET $SG10101
push	1428					
push	21					
call	_FT_Throw
add	esp, 12					
or	eax, 21					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$71
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _glyph_index$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jb	SHORT $LN61@load_truet
push	OFFSET $SG10105
push	1435					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$71
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _glyph_index$[ebp]
mov	DWORD PTR [edx+20], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	SHORT $LN60@load_truet
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+48]
mov	DWORD PTR _x_scale$[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+52]
mov	DWORD PTR _y_scale$[ebp], edx
jmp	SHORT $LN59@load_truet
mov	DWORD PTR _x_scale$[ebp], 65536		
mov	DWORD PTR _y_scale$[ebp], 65536		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	$LN58@load_truet
mov	esi, esp
lea	edx, DWORD PTR _glyph_data$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN57@load_truet
jmp	$Exit$71
mov	BYTE PTR _glyph_data_loaded$[ebp], 1
mov	DWORD PTR _offset$[ebp], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _glyph_data$[ebp+4]
mov	DWORD PTR [ecx+28], edx
push	40					
push	0
lea	eax, DWORD PTR _inc_stream$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _glyph_data$[ebp+4]
push	ecx
mov	edx, DWORD PTR _glyph_data$[ebp]
push	edx
lea	eax, DWORD PTR _inc_stream$[ebp]
push	eax
call	_FT_Stream_OpenMemory
add	esp, 12					
mov	ecx, DWORD PTR _loader$[ebp]
lea	edx, DWORD PTR _inc_stream$[ebp]
mov	DWORD PTR [ecx+24], edx
jmp	SHORT $LN56@load_truet
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 28					
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_tt_face_get_location
add	esp, 12					
mov	DWORD PTR _offset$[ebp], eax
mov	eax, DWORD PTR _loader$[ebp]
cmp	DWORD PTR [eax+28], 0
jle	$LN55@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
cmp	DWORD PTR [ecx+84], 0
jne	SHORT $LN54@load_truet
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax+48], 0
jne	SHORT $LN54@load_truet
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN52@load_truet
push	OFFSET $SG10120
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN53@load_truet
push	OFFSET $SG10121
push	1497					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$71
mov	esi, esp
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+84]
add	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+512]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN49@load_truet
jmp	$Exit$71
mov	BYTE PTR _opened_frame$[ebp], 1
mov	esi, esp
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+520]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN48@load_truet
jmp	$Exit$71
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_tt_get_metrics
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN47@load_truet
jmp	$Exit$71
movzx	edx, BYTE PTR _header_only$[ebp]
test	edx, edx
je	SHORT $LN55@load_truet
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
cmp	DWORD PTR [eax+28], 0
je	SHORT $LN44@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
movsx	edx, WORD PTR [ecx+32]
test	edx, edx
jne	$LN32@load_truet
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+36], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+44], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+40], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+48], 0
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_tt_get_metrics
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@load_truet
jmp	$Exit$71
movzx	eax, BYTE PTR _header_only$[ebp]
test	eax, eax
je	SHORT $LN41@load_truet
jmp	$Exit$71
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [ecx+36]
sub	eax, DWORD PTR [edx+52]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+72], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	edx, DWORD PTR _loader$[ebp]
add	ecx, DWORD PTR [edx+56]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], ecx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+80], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+184], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR _loader$[ebp]
add	ecx, DWORD PTR [edx+176]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+188], ecx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [edx+188]
sub	ecx, DWORD PTR [eax+180]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+196], ecx
xor	eax, eax
jne	$LN41@load_truet
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_tt_get_metrics_incr_overrides
add	esp, 8
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
movzx	edx, BYTE PTR [ecx+672]
test	edx, edx
je	$LN38@load_truet
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$17[ebp], edx
push	4
lea	eax, DWORD PTR _deltas$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_TT_Vary_Get_Glyph_Deltas
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN37@load_truet
jmp	$Exit$71
mov	ecx, 8
imul	edx, ecx, 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	eax, DWORD PTR _deltas$[ebp]
add	ecx, DWORD PTR [eax+edx]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+68], ecx
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+72]
mov	edx, DWORD PTR _deltas$[ebp]
add	eax, DWORD PTR [edx+ecx+4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+72], eax
mov	edx, 8
shl	edx, 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	eax, DWORD PTR _deltas$[ebp]
add	ecx, DWORD PTR [eax+edx]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], ecx
mov	eax, 8
shl	eax, 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+80]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+80], edx
mov	ecx, 8
shl	ecx, 1
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+184]
mov	edx, DWORD PTR _deltas$[ebp]
add	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], eax
mov	edx, 8
shl	edx, 1
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	eax, DWORD PTR _deltas$[ebp]
add	ecx, DWORD PTR [eax+edx+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], ecx
mov	eax, 8
imul	ecx, eax, 3
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	edx, DWORD PTR _deltas$[ebp]
add	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], eax
mov	edx, 8
imul	eax, edx, 3
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+196]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+196], edx
mov	ecx, DWORD PTR _deltas$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$17[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	eax, eax
jne	SHORT $LN36@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	$LN33@load_truet
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+68]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], eax
mov	edx, DWORD PTR _x_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+188]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+192]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+196]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+196], eax
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [eax+36]
sub	edx, DWORD PTR [ecx+52]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+68], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+72], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	ecx, DWORD PTR _loader$[ebp]
add	eax, DWORD PTR [ecx+56]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+80], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR _loader$[ebp]
add	eax, DWORD PTR [ecx+176]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+192], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [ecx+188]
sub	eax, DWORD PTR [edx+180]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+196], eax
xor	edx, edx
jne	$LN32@load_truet
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_tt_get_metrics_incr_overrides
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
movsx	eax, WORD PTR [edx+32]
test	eax, eax
jle	SHORT $LN29@load_truet
mov	esi, esp
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+524]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN28@load_truet
jmp	$Exit$71
mov	esi, esp
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+516]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR _opened_frame$[ebp], 0
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_TT_Process_Simple_Glyph
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@load_truet
jmp	$Exit$71
mov	edx, DWORD PTR _gloader$[ebp]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
movsx	ecx, WORD PTR [eax+32]
cmp	ecx, -1
jne	$LN25@load_truet
mov	edx, DWORD PTR _gloader$[ebp]
movsx	eax, WORD PTR [edx+22]
mov	DWORD PTR _start_point$16[ebp], eax
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+20]
mov	DWORD PTR _start_contour$15[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+528]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@load_truet
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+168]
mov	DWORD PTR _ins_pos$14[ebp], ecx
mov	esi, esp
mov	edx, DWORD PTR _loader$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+516]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR _opened_frame$[ebp], 0
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, BYTE PTR [edx+672]
test	eax, eax
je	$LN23@load_truet
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$10[ebp], edx
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+84]
add	ecx, 4
push	ecx
lea	edx, DWORD PTR _deltas$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Vary_Get_Glyph_Deltas
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN22@load_truet
jmp	$Exit$71
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+48]
shl	eax, 5
mov	ecx, DWORD PTR _gloader$[ebp]
add	eax, DWORD PTR [ecx+88]
mov	DWORD PTR _subglyph$11[ebp], eax
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	DWORD PTR _limit$12[ebp], eax
mov	DWORD PTR _i$13[ebp], 0
jmp	SHORT $LN21@load_truet
mov	ecx, DWORD PTR _i$13[ebp]
add	ecx, 1
mov	DWORD PTR _i$13[ebp], ecx
mov	edx, DWORD PTR _subglyph$11[ebp]
add	edx, 32					
mov	DWORD PTR _subglyph$11[ebp], edx
mov	eax, DWORD PTR _i$13[ebp]
cmp	eax, DWORD PTR _limit$12[ebp]
jge	SHORT $LN19@load_truet
mov	ecx, DWORD PTR _subglyph$11[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 2
je	SHORT $LN18@load_truet
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
movsx	edx, WORD PTR [ecx+eax*8]
mov	eax, DWORD PTR _subglyph$11[ebp]
add	edx, DWORD PTR [eax+8]
mov	ecx, DWORD PTR _subglyph$11[ebp]
mov	DWORD PTR [ecx+8], edx
mov	edx, DWORD PTR _i$13[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
movsx	ecx, WORD PTR [eax+edx*8+4]
mov	edx, DWORD PTR _subglyph$11[ebp]
add	ecx, DWORD PTR [edx+12]
mov	eax, DWORD PTR _subglyph$11[ebp]
mov	DWORD PTR [eax+12], ecx
jmp	SHORT $LN20@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+68]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+68], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+72]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+72], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+8]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+80]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+12]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+80], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+16]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+184], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+188]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+20]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+188], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+192]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+24]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+192], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+196]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+28]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+196], edx
mov	ecx, DWORD PTR _deltas$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$10[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	eax, eax
jne	SHORT $LN17@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	$LN14@load_truet
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+68]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], eax
mov	edx, DWORD PTR _x_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+188]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+192]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+196]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+196], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1024				
je	SHORT $LN13@load_truet
mov	edx, DWORD PTR _gloader$[ebp]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+72], 1668246896		
jmp	$Exit$71
mov	DWORD PTR _subglyph$7[ebp], 0
mov	edx, DWORD PTR _start_point$16[ebp]
mov	DWORD PTR _num_points$6[ebp], edx
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _num_subglyphs$5[ebp], ecx
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _num_base_subgs$4[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _old_stream$3[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _old_byte_len$2[ebp], ecx
mov	edx, DWORD PTR _gloader$[ebp]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
mov	DWORD PTR _n$9[ebp], 0
jmp	SHORT $LN12@load_truet
mov	eax, DWORD PTR _n$9[ebp]
add	eax, 1
mov	DWORD PTR _n$9[ebp], eax
mov	ecx, DWORD PTR _n$9[ebp]
cmp	ecx, DWORD PTR _num_subglyphs$5[ebp]
jae	$LN10@load_truet
mov	edx, DWORD PTR _num_base_subgs$4[ebp]
shl	edx, 5
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+52]
add	ecx, edx
mov	edx, DWORD PTR _n$9[ebp]
shl	edx, 5
add	ecx, edx
mov	DWORD PTR _subglyph$7[ebp], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	edx, DWORD PTR [eax+72]
mov	eax, 8
imul	eax, eax, 0
mov	DWORD PTR _pp$1[ebp+eax], ecx
mov	DWORD PTR _pp$1[ebp+eax+4], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	eax, DWORD PTR [ecx+80]
mov	ecx, 8
shl	ecx, 0
mov	DWORD PTR _pp$1[ebp+ecx], edx
mov	DWORD PTR _pp$1[ebp+ecx+4], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+184]
mov	ecx, DWORD PTR [edx+188]
mov	edx, 8
shl	edx, 1
mov	DWORD PTR _pp$1[ebp+edx], eax
mov	DWORD PTR _pp$1[ebp+edx+4], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+192]
mov	edx, DWORD PTR [eax+196]
mov	eax, 8
imul	eax, eax, 3
mov	DWORD PTR _pp$1[ebp+eax], ecx
mov	DWORD PTR _pp$1[ebp+eax+4], edx
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+22]
mov	DWORD PTR _num_base_points$8[ebp], edx
push	0
mov	eax, DWORD PTR _recurse_count$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _subglyph$7[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_load_truetype_glyph
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@load_truet
jmp	$Exit$71
mov	ecx, DWORD PTR _num_base_subgs$4[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+52]
add	eax, ecx
mov	ecx, DWORD PTR _n$9[ebp]
shl	ecx, 5
add	eax, ecx
mov	DWORD PTR _subglyph$7[ebp], eax
mov	edx, DWORD PTR _subglyph$7[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 512				
jne	$LN8@load_truet
mov	ecx, 8
imul	edx, ecx, 0
mov	eax, DWORD PTR _pp$1[ebp+edx]
mov	ecx, DWORD PTR _pp$1[ebp+edx+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+68], eax
mov	DWORD PTR [edx+72], ecx
mov	eax, 8
shl	eax, 0
mov	ecx, DWORD PTR _pp$1[ebp+eax]
mov	edx, DWORD PTR _pp$1[ebp+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], ecx
mov	DWORD PTR [eax+80], edx
mov	ecx, 8
shl	ecx, 1
mov	edx, DWORD PTR _pp$1[ebp+ecx]
mov	eax, DWORD PTR _pp$1[ebp+ecx+4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], edx
mov	DWORD PTR [ecx+188], eax
mov	edx, 8
imul	eax, edx, 3
mov	ecx, DWORD PTR _pp$1[ebp+eax]
mov	edx, DWORD PTR _pp$1[ebp+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+192], ecx
mov	DWORD PTR [eax+196], edx
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+22]
mov	DWORD PTR _num_points$6[ebp], edx
mov	eax, DWORD PTR _num_points$6[ebp]
cmp	eax, DWORD PTR _num_base_points$8[ebp]
jne	SHORT $LN7@load_truet
jmp	$LN11@load_truet
mov	ecx, DWORD PTR _num_base_points$8[ebp]
push	ecx
mov	edx, DWORD PTR _start_point$16[ebp]
push	edx
mov	eax, DWORD PTR _subglyph$7[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_TT_Process_Composite_Component
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@load_truet
jmp	$Exit$71
jmp	$LN11@load_truet
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _old_stream$3[ebp]
mov	DWORD PTR [edx+24], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _old_byte_len$2[ebp]
mov	DWORD PTR [ecx+28], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _ins_pos$14[ebp]
mov	DWORD PTR [eax+168], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 2
jne	SHORT $LN5@load_truet
mov	ecx, DWORD PTR _subglyph$7[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 256				
je	SHORT $LN5@load_truet
mov	eax, DWORD PTR _num_points$6[ebp]
cmp	eax, DWORD PTR _start_point$16[ebp]
jbe	SHORT $LN5@load_truet
mov	ecx, DWORD PTR _start_contour$15[ebp]
push	ecx
mov	edx, DWORD PTR _start_point$16[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_TT_Process_Composite_Glyph
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@load_truet
jmp	SHORT $Exit$71
jmp	SHORT $Exit$71
push	OFFSET $SG10216
push	1820					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
mov	DWORD PTR _error$[ebp], eax
movzx	ecx, BYTE PTR _opened_frame$[ebp]
test	ecx, ecx
je	SHORT $LN2@load_truet
mov	esi, esp
mov	edx, DWORD PTR _loader$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+516]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
movzx	edx, BYTE PTR _glyph_data_loaded$[ebp]
test	edx, edx
je	SHORT $LN1@load_truet
mov	esi, esp
lea	eax, DWORD PTR _glyph_data$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN70@load_truet
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 216				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	4
DD	$LN69@load_truet
DD	-40					
DD	4
DD	$LN65@load_truet
DD	-88					
DD	40					
DD	$LN66@load_truet
DD	-104					
DD	8
DD	$LN67@load_truet
DD	-212					
DD	32					
DD	$LN68@load_truet
DB	112					
DB	112					
DB	0
DB	103					
DB	108					
DB	121					
DB	112					
DB	104					
DB	95					
DB	100					
DB	97					
DB	116					
DB	97					
DB	0
DB	105					
DB	110					
DB	99					
DB	95					
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
DB	100					
DB	101					
DB	108					
DB	116					
DB	97					
DB	115					
DB	0
ENDP
_TT_Process_Composite_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 20					
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
add	eax, 4
je	SHORT $LN23@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
movsx	eax, WORD PTR [edx+22]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
movsx	ecx, WORD PTR [edx+58]
add	eax, ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [edx+2]
lea	edx, DWORD PTR [eax+ecx+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+4]
ja	SHORT $LN24@TT_Process
mov	edx, 1
test	edx, edx
je	SHORT $LN24@TT_Process
mov	DWORD PTR tv93[ebp], 0
jmp	SHORT $LN25@TT_Process
push	0
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
add	ecx, 4
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv93[ebp], eax
mov	ecx, DWORD PTR tv93[ebp]
mov	DWORD PTR _error$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	ecx, DWORD PTR [edx+72]
mov	edx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [edx+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	edx, DWORD PTR [eax+80]
mov	eax, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [eax+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+eax*8+8], ecx
mov	DWORD PTR [esi+eax*8+12], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
mov	eax, DWORD PTR [ecx+188]
mov	ecx, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [ecx+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+ecx*8+16], edx
mov	DWORD PTR [esi+ecx*8+20], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	ecx, DWORD PTR [edx+196]
mov	edx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [edx+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+edx*8+24], eax
mov	DWORD PTR [esi+edx*8+28], ecx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	BYTE PTR [eax+ecx], 0
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	BYTE PTR [ecx+edx+1], 0
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	BYTE PTR [edx+eax+2], 0
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	BYTE PTR [eax+ecx+3], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _stream$4[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+168]
push	ecx
mov	edx, DWORD PTR _stream$4[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN18@TT_Process
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _n_ins$3[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN17@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN16@TT_Process
movzx	ecx, WORD PTR _n_ins$3[ebp]
push	ecx
push	OFFSET $SG10054
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN17@TT_Process
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	dx, WORD PTR [ecx+286]
mov	WORD PTR _max_ins$2[ebp], dx
movzx	eax, WORD PTR _n_ins$3[ebp]
movzx	ecx, WORD PTR _max_ins$2[ebp]
cmp	eax, ecx
jle	$LN13@TT_Process
movzx	edx, WORD PTR _n_ins$3[ebp]
mov	eax, DWORD PTR _loader$[ebp]
cmp	edx, DWORD PTR [eax+28]
jle	SHORT $LN12@TT_Process
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN10@TT_Process
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+28]
push	ecx
movzx	edx, WORD PTR _n_ins$3[ebp]
push	edx
push	OFFSET $SG10063
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN11@TT_Process
push	OFFSET $SG10064
push	1224					
push	22					
call	_FT_Throw
add	esp, 12					
or	eax, 22					
jmp	$LN21@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	eax, DWORD PTR [edx+388]
mov	DWORD PTR _tmp$1[ebp], eax
movzx	ecx, WORD PTR _n_ins$3[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
add	eax, 392				
push	eax
push	1
lea	ecx, DWORD PTR _tmp$1[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
movzx	ecx, WORD PTR _tmp$1[ebp]
mov	DWORD PTR [eax+388], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
jmp	SHORT $LN6@TT_Process
movzx	edx, WORD PTR _n_ins$3[ebp]
test	edx, edx
jne	SHORT $LN6@TT_Process
xor	eax, eax
jmp	$LN21@TT_Process
movzx	eax, WORD PTR _n_ins$3[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	eax, DWORD PTR [edx+392]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR [eax+392]
mov	DWORD PTR [edx+136], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
movzx	eax, WORD PTR _n_ins$3[ebp]
mov	DWORD PTR [edx+140], eax
mov	ecx, DWORD PTR _start_contour$[ebp]
push	ecx
mov	edx, DWORD PTR _start_point$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 20					
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
add	edx, 124				
push	edx
call	_tt_prepare_zone
add	esp, 16					
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN3@TT_Process
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
movzx	edx, WORD PTR [ecx+132]
cmp	DWORD PTR _i$[ebp], edx
jae	SHORT $LN1@TT_Process
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+148]
mov	edx, DWORD PTR _i$[ebp]
movzx	eax, BYTE PTR [ecx+edx]
and	eax, -25				
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+148]
mov	ecx, DWORD PTR _i$[ebp]
mov	BYTE PTR [edx+ecx], al
jmp	SHORT $LN2@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
movzx	eax, WORD PTR [edx+132]
add	eax, 4
mov	ecx, DWORD PTR _loader$[ebp]
mov	WORD PTR [ecx+132], ax
push	1
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_TT_Hint_Glyph
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN29@TT_Process
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	2
DD	$LN28@TT_Process
DD	-8					
DD	4
DD	$LN26@TT_Process
DD	-40					
DD	4
DD	$LN27@TT_Process
DB	116					
DB	109					
DB	112					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Process_Composite_Component PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _gloader$[ebp], ecx
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	DWORD PTR _base_vec$[ebp], eax
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+22]
mov	DWORD PTR _num_points$[ebp], edx
mov	eax, DWORD PTR _subglyph$[ebp]
movzx	ecx, WORD PTR [eax+4]
and	ecx, 200				
mov	BYTE PTR _have_scale$[ebp], cl
movzx	edx, BYTE PTR _have_scale$[ebp]
test	edx, edx
je	SHORT $LN14@TT_Process
mov	eax, DWORD PTR _num_base_points$[ebp]
mov	DWORD PTR _i$9[ebp], eax
jmp	SHORT $LN13@TT_Process
mov	ecx, DWORD PTR _i$9[ebp]
add	ecx, 1
mov	DWORD PTR _i$9[ebp], ecx
mov	edx, DWORD PTR _i$9[ebp]
cmp	edx, DWORD PTR _num_points$[ebp]
jae	SHORT $LN14@TT_Process
mov	eax, DWORD PTR _subglyph$[ebp]
add	eax, 16					
push	eax
mov	ecx, DWORD PTR _i$9[ebp]
mov	edx, DWORD PTR _base_vec$[ebp]
lea	eax, DWORD PTR [edx+ecx*8]
push	eax
call	_FT_Vector_Transform
add	esp, 8
jmp	SHORT $LN12@TT_Process
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 2
jne	$LN10@TT_Process
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _k$8[ebp], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _l$7[ebp], eax
mov	ecx, DWORD PTR _k$8[ebp]
add	ecx, DWORD PTR _start_point$[ebp]
mov	DWORD PTR _k$8[ebp], ecx
mov	edx, DWORD PTR _l$7[ebp]
add	edx, DWORD PTR _num_base_points$[ebp]
mov	DWORD PTR _l$7[ebp], edx
mov	eax, DWORD PTR _k$8[ebp]
cmp	eax, DWORD PTR _num_base_points$[ebp]
jae	SHORT $LN8@TT_Process
mov	ecx, DWORD PTR _l$7[ebp]
cmp	ecx, DWORD PTR _num_points$[ebp]
jb	SHORT $LN9@TT_Process
push	OFFSET $SG10006
push	1060					
push	21					
call	_FT_Throw
add	esp, 12					
or	eax, 21					
jmp	$LN15@TT_Process
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR _k$8[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _p1$6[ebp], edx
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _l$7[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _p2$5[ebp], eax
mov	ecx, DWORD PTR _p1$6[ebp]
mov	edx, DWORD PTR _p2$5[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _p1$6[ebp]
mov	edx, DWORD PTR _p2$5[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
jmp	$LN7@TT_Process
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _x$[ebp], edx
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _y$[ebp], ecx
cmp	DWORD PTR _x$[ebp], 0
jne	SHORT $LN6@TT_Process
cmp	DWORD PTR _y$[ebp], 0
jne	SHORT $LN6@TT_Process
xor	eax, eax
jmp	$LN15@TT_Process
movzx	edx, BYTE PTR _have_scale$[ebp]
test	edx, edx
je	SHORT $LN5@TT_Process
mov	eax, DWORD PTR _subglyph$[ebp]
movzx	ecx, WORD PTR [eax+4]
and	ecx, 2048				
je	SHORT $LN5@TT_Process
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
call	_FT_Hypot
add	esp, 8
mov	DWORD PTR _mac_xscale$4[ebp], eax
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR [eax+24]
push	ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
call	_FT_Hypot
add	esp, 8
mov	DWORD PTR _mac_yscale$3[ebp], eax
mov	ecx, DWORD PTR _mac_xscale$4[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _x$[ebp], eax
mov	eax, DWORD PTR _mac_yscale$3[ebp]
push	eax
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _y$[ebp], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 1
jne	SHORT $LN7@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR _y_scale$1[ebp], eax
mov	ecx, DWORD PTR _x_scale$2[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _x$[ebp], eax
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _y$[ebp], eax
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 4
je	SHORT $LN7@TT_Process
mov	ecx, DWORD PTR _x$[ebp]
add	ecx, 32					
and	ecx, -64				
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _y$[ebp]
add	edx, 32					
and	edx, -64				
mov	DWORD PTR _y$[ebp], edx
cmp	DWORD PTR _x$[ebp], 0
jne	SHORT $LN1@TT_Process
cmp	DWORD PTR _y$[ebp], 0
je	SHORT $LN2@TT_Process
mov	eax, DWORD PTR _y$[ebp]
push	eax
mov	ecx, DWORD PTR _x$[ebp]
push	ecx
mov	edx, DWORD PTR _num_base_points$[ebp]
mov	eax, DWORD PTR _base_vec$[ebp]
lea	ecx, DWORD PTR [eax+edx*8]
push	ecx
mov	edx, DWORD PTR _num_points$[ebp]
sub	edx, DWORD PTR _num_base_points$[ebp]
push	edx
call	_translate_array
add	esp, 16					
xor	eax, eax
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Process_Simple_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _gloader$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _gloader$[ebp]
add	edx, 56					
mov	DWORD PTR _outline$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	DWORD PTR _n_points$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	ecx, DWORD PTR [edx+72]
mov	edx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [edx+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [edx+esi*8], eax
mov	DWORD PTR [edx+esi*8+4], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	edx, DWORD PTR [eax+80]
mov	eax, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [eax+esi*8+8], ecx
mov	DWORD PTR [eax+esi*8+12], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
mov	eax, DWORD PTR [ecx+188]
mov	ecx, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [ecx+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [ecx+esi*8+16], edx
mov	DWORD PTR [ecx+esi*8+20], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	ecx, DWORD PTR [edx+196]
mov	edx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [edx+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [edx+esi*8+24], eax
mov	DWORD PTR [edx+esi*8+28], ecx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx], 0
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx+1], 0
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx+2], 0
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx+3], 0
mov	eax, DWORD PTR _n_points$[ebp]
add	eax, 4
mov	DWORD PTR _n_points$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx]
movzx	eax, BYTE PTR [edx+672]
test	eax, eax
je	$LN15@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$7[ebp], eax
mov	ecx, DWORD PTR _n_points$[ebp]
push	ecx
lea	edx, DWORD PTR _deltas$8[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_TT_Vary_Get_Glyph_Deltas
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@TT_Process
mov	DWORD PTR _i$6[ebp], 0
jmp	SHORT $LN13@TT_Process
mov	ecx, DWORD PTR _i$6[ebp]
add	ecx, 1
mov	DWORD PTR _i$6[ebp], ecx
mov	edx, DWORD PTR _i$6[ebp]
cmp	edx, DWORD PTR _n_points$[ebp]
jge	SHORT $LN10@TT_Process
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _i$6[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _i$6[ebp]
mov	edx, DWORD PTR _deltas$8[ebp]
add	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _i$6[ebp]
mov	DWORD PTR [edx+ecx*8], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$6[ebp]
mov	edx, DWORD PTR [eax+ecx*8+4]
mov	eax, DWORD PTR _i$6[ebp]
mov	ecx, DWORD PTR _deltas$8[ebp]
add	edx, DWORD PTR [ecx+eax*8+4]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _i$6[ebp]
mov	DWORD PTR [ecx+eax*8+4], edx
jmp	SHORT $LN12@TT_Process
mov	ecx, DWORD PTR _deltas$8[ebp]
push	ecx
mov	edx, DWORD PTR _memory$7[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$8[ebp], 0
xor	eax, eax
jne	SHORT $LN10@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 2
jne	SHORT $LN7@TT_Process
push	0
push	0
mov	eax, DWORD PTR _gloader$[ebp]
add	eax, 56					
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 124				
push	ecx
call	_tt_prepare_zone
add	esp, 16					
mov	edx, DWORD PTR _loader$[ebp]
movzx	eax, WORD PTR [edx+132]
lea	ecx, DWORD PTR [eax*8+32]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+140]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+144]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$5[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _limit$4[ebp], edx
mov	DWORD PTR _x_scale$3[ebp], 0
mov	DWORD PTR _y_scale$2[ebp], 0
mov	BYTE PTR _do_scale$1[ebp], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
jne	SHORT $LN6@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+48]
mov	DWORD PTR _x_scale$3[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+52]
mov	DWORD PTR _y_scale$2[ebp], ecx
mov	BYTE PTR _do_scale$1[ebp], 1
movzx	edx, BYTE PTR _do_scale$1[ebp]
test	edx, edx
je	$LN5@TT_Process
jmp	SHORT $LN4@TT_Process
mov	eax, DWORD PTR _vec$5[ebp]
add	eax, 8
mov	DWORD PTR _vec$5[ebp], eax
mov	ecx, DWORD PTR _vec$5[ebp]
cmp	ecx, DWORD PTR _limit$4[ebp]
jae	SHORT $LN2@TT_Process
mov	edx, DWORD PTR _x_scale$3[ebp]
push	edx
mov	eax, DWORD PTR _vec$5[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _vec$5[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _y_scale$2[ebp]
push	eax
mov	ecx, DWORD PTR _vec$5[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _vec$5[ebp]
mov	DWORD PTR [ecx+4], eax
jmp	SHORT $LN3@TT_Process
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-32]
mov	eax, DWORD PTR [eax+ecx*8-28]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], edx
mov	DWORD PTR [ecx+72], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-24]
mov	eax, DWORD PTR [eax+ecx*8-20]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+76], edx
mov	DWORD PTR [ecx+80], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-16]
mov	eax, DWORD PTR [eax+ecx*8-12]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], edx
mov	DWORD PTR [ecx+188], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-8]
mov	eax, DWORD PTR [eax+ecx*8-4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], edx
mov	DWORD PTR [ecx+196], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 2
jne	SHORT $LN1@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
movzx	edx, WORD PTR [ecx+132]
add	edx, 4
mov	eax, DWORD PTR _loader$[ebp]
mov	WORD PTR [eax+132], dx
push	0
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_TT_Hint_Glyph
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@TT_Process
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN19@TT_Process
DD	-24					
DD	4
DD	$LN18@TT_Process
DB	100					
DB	101					
DB	108					
DB	116					
DB	97					
DB	115					
DB	0
ENDP
_TT_Hint_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 124				
mov	DWORD PTR _zone$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	DWORD PTR [edx+140], 65535		
jle	SHORT $LN14@TT_Hint_Gl
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN12@TT_Hint_Gl
push	OFFSET $SG9916
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN13@TT_Hint_Gl
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN8@TT_Hint_Gl
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR [eax+140]
push	ecx
push	OFFSET $SG9921
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN9@TT_Hint_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR [ecx+140]
mov	DWORD PTR _n_ins$[ebp], edx
cmp	DWORD PTR _n_ins$[ebp], 0
jbe	SHORT $LN5@TT_Hint_Gl
mov	eax, DWORD PTR _zone$[ebp]
movzx	ecx, WORD PTR [eax+8]
shl	ecx, 3
push	ecx
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _loader$[ebp]
mov	esi, DWORD PTR [eax+4]
add	esi, 172				
mov	ecx, DWORD PTR _loader$[ebp]
mov	edi, DWORD PTR [ecx+160]
add	edi, 284				
mov	ecx, 17					
rep movsd
movzx	edx, BYTE PTR _is_composite$[ebp]
test	edx, edx
je	SHORT $LN4@TT_Hint_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	DWORD PTR [ecx+220], 65536		
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	DWORD PTR [eax+224], 65536		
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
shl	edx, 3
push	edx
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
call	_memcpy
add	esp, 12					
jmp	SHORT $LN3@TT_Hint_Gl
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	edx, DWORD PTR [edx+48]
mov	DWORD PTR [ecx+220], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR [ecx+52]
mov	DWORD PTR [eax+224], ecx
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-32]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-32], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-24]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-24], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-12]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-12], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-4]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-4], eax
cmp	DWORD PTR _n_ins$[ebp], 0
jbe	$LN2@TT_Hint_Gl
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _gloader$2[ebp], eax
mov	ecx, DWORD PTR _gloader$2[ebp]
add	ecx, 56					
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _current_outline$1[ebp], edx
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR _current_outline$1[ebp+4], eax
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _current_outline$1[ebp+8], edx
mov	eax, DWORD PTR [ecx+12]
mov	DWORD PTR _current_outline$1[ebp+12], eax
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR _current_outline$1[ebp+16], ecx
mov	edx, DWORD PTR _n_ins$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	edx, DWORD PTR [ecx+392]
push	edx
push	3
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
push	ecx
call	_TT_Set_CodeRange
add	esp, 16					
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	cl, BYTE PTR _is_composite$[ebp]
mov	BYTE PTR [eax+560], cl
mov	edx, DWORD PTR _loader$[ebp]
mov	edi, DWORD PTR [edx+160]
add	edi, 144				
mov	ecx, 9
mov	esi, DWORD PTR _zone$[ebp]
rep movsd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
jne	SHORT $LN17@TT_Hint_Gl
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN17@TT_Hint_Gl
mov	BYTE PTR tv238[ebp], 1
jmp	SHORT $LN18@TT_Hint_Gl
mov	BYTE PTR tv238[ebp], 0
mov	dl, BYTE PTR tv238[ebp]
mov	BYTE PTR _debug$4[ebp], dl
movzx	eax, BYTE PTR _debug$4[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+160]
push	edx
call	_TT_Run_Context
add	esp, 8
mov	DWORD PTR _error$3[ebp], eax
cmp	DWORD PTR _error$3[ebp], 0
je	SHORT $LN1@TT_Hint_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@TT_Hint_Gl
mov	eax, DWORD PTR _error$3[ebp]
jmp	$LN15@TT_Hint_Gl
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	edx, DWORD PTR [eax+340]
shl	edx, 5
or	edx, 4
mov	eax, DWORD PTR _current_outline$1[ebp+8]
movsx	ecx, BYTE PTR [eax+ecx]
or	ecx, edx
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _current_outline$1[ebp+8]
mov	BYTE PTR [edx+eax], cl
mov	eax, DWORD PTR _zone$[ebp]
movzx	ecx, WORD PTR [eax+8]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	edx, DWORD PTR [eax+ecx*8-32]
mov	eax, DWORD PTR [eax+ecx*8-28]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], edx
mov	DWORD PTR [ecx+72], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	ecx, DWORD PTR [edx+eax*8-24]
mov	edx, DWORD PTR [edx+eax*8-20]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], ecx
mov	DWORD PTR [eax+80], edx
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	eax, DWORD PTR [ecx+edx*8-16]
mov	ecx, DWORD PTR [ecx+edx*8-12]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+184], eax
mov	DWORD PTR [edx+188], ecx
mov	eax, DWORD PTR _zone$[ebp]
movzx	ecx, WORD PTR [eax+8]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	edx, DWORD PTR [eax+ecx*8-8]
mov	eax, DWORD PTR [eax+ecx*8-4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], edx
mov	DWORD PTR [ecx+196], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN21@TT_Hint_Gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN20@TT_Hint_Gl
DD	-44					
DD	20					
DD	$LN19@TT_Hint_Gl
DB	99					
DB	117					
DB	114					
DB	114					
DB	101					
DB	110					
DB	116					
DB	95					
DB	111					
DB	117					
DB	116					
DB	108					
DB	105					
DB	110					
DB	101					
DB	0
ENDP
_tt_prepare_zone PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _load$[ebp]
movsx	ecx, WORD PTR [eax+2]
sub	ecx, DWORD PTR _start_point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	WORD PTR [edx+8], cx
mov	eax, DWORD PTR _load$[ebp]
movsx	ecx, WORD PTR [eax]
sub	ecx, DWORD PTR _start_contour$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	WORD PTR [edx+10], cx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _start_point$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _start_point$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	eax, DWORD PTR _zone$[ebp]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _start_point$[ebp]
lea	ecx, DWORD PTR [edx+eax*8]
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _start_point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR _start_contour$[ebp]
lea	eax, DWORD PTR [ecx+edx*2]
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	edx, DWORD PTR _zone$[ebp]
mov	ax, WORD PTR _start_point$[ebp]
mov	WORD PTR [edx+32], ax
pop	ebp
ret	0
ENDP
_TT_Load_Composite_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+200]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+204]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _gloader$[ebp], edx
mov	DWORD PTR _num_subglyphs$[ebp], 0
mov	eax, DWORD PTR _num_subglyphs$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _gloader$[ebp]
push	ecx
call	_FT_GlyphLoader_CheckSubGlyphs
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@TT_Load_Co
jmp	$Fail$22
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN15@TT_Load_Co
jmp	$Invalid_Composite$23
mov	eax, DWORD PTR _num_subglyphs$[ebp]
shl	eax, 5
mov	ecx, DWORD PTR _gloader$[ebp]
add	eax, DWORD PTR [ecx+88]
mov	DWORD PTR _subglyph$[ebp], eax
mov	edx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [edx+12], 0
mov	eax, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	WORD PTR [ecx+4], dx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	eax, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [eax], edx
mov	DWORD PTR _count$2[ebp], 2
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 1
je	SHORT $LN14@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 2
mov	DWORD PTR _count$2[ebp], eax
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 8
je	SHORT $LN13@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 2
mov	DWORD PTR _count$2[ebp], eax
jmp	SHORT $LN12@TT_Load_Co
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 64					
je	SHORT $LN11@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 4
mov	DWORD PTR _count$2[ebp], eax
jmp	SHORT $LN12@TT_Load_Co
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 128				
je	SHORT $LN12@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 8
mov	DWORD PTR _count$2[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, DWORD PTR _count$2[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN8@TT_Load_Co
jmp	$Invalid_Composite$23
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 1
je	SHORT $LN7@TT_Load_Co
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN6@TT_Load_Co
mov	edx, DWORD PTR _p$[ebp]
movsx	eax, BYTE PTR [edx]
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
movsx	ecx, BYTE PTR [eax]
mov	edx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _yy$4[ebp], 65536		
mov	ecx, DWORD PTR _yy$4[ebp]
mov	DWORD PTR _xx$6[ebp], ecx
mov	DWORD PTR _yx$3[ebp], 0
mov	edx, DWORD PTR _yx$3[ebp]
mov	DWORD PTR _xy$5[ebp], edx
mov	eax, DWORD PTR _subglyph$[ebp]
movzx	ecx, WORD PTR [eax+4]
and	ecx, 8
je	SHORT $LN5@TT_Load_Co
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
shl	edx, 2
mov	DWORD PTR _xx$6[ebp], edx
mov	eax, DWORD PTR _xx$6[ebp]
mov	DWORD PTR _yy$4[ebp], eax
jmp	$LN4@TT_Load_Co
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 64					
je	SHORT $LN3@TT_Load_Co
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
shl	eax, 2
mov	DWORD PTR _xx$6[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
shl	ecx, 2
mov	DWORD PTR _yy$4[ebp], ecx
jmp	$LN4@TT_Load_Co
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 128				
je	$LN4@TT_Load_Co
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
shl	ecx, 2
mov	DWORD PTR _xx$6[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
shl	edx, 2
mov	DWORD PTR _yx$3[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
shl	eax, 2
mov	DWORD PTR _xy$5[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
shl	ecx, 2
mov	DWORD PTR _yy$4[ebp], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR _xx$6[ebp]
mov	DWORD PTR [edx+16], eax
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	edx, DWORD PTR _xy$5[ebp]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR _yx$3[ebp]
mov	DWORD PTR [eax+24], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR _yy$4[ebp]
mov	DWORD PTR [edx+28], eax
mov	ecx, DWORD PTR _num_subglyphs$[ebp]
add	ecx, 1
mov	DWORD PTR _num_subglyphs$[ebp], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 32					
jne	$LN19@TT_Load_Co
mov	ecx, DWORD PTR _gloader$[ebp]
mov	edx, DWORD PTR _num_subglyphs$[ebp]
mov	DWORD PTR [ecx+84], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _stream$1[ebp], ecx
mov	edx, DWORD PTR _stream$1[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
add	eax, DWORD PTR _p$[ebp]
sub	eax, DWORD PTR _limit$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+168], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _p$[ebp]
mov	DWORD PTR [edx+200], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN20@TT_Load_Co
push	OFFSET $SG9884
push	688					
push	21					
call	_FT_Throw
add	esp, 12					
or	eax, 21					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$22
pop	edi
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Load_Simple_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+200]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+204]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _gloader$[ebp], edx
mov	eax, DWORD PTR _load$[ebp]
movsx	ecx, WORD PTR [eax+32]
mov	DWORD PTR _n_contours$[ebp], ecx
mov	DWORD PTR _xy_size$[ebp], 0
mov	edx, 1
test	edx, edx
je	SHORT $LN60@TT_Load_Si
cmp	DWORD PTR _n_contours$[ebp], 0
je	SHORT $LN59@TT_Load_Si
mov	eax, DWORD PTR _gloader$[ebp]
movsx	ecx, WORD PTR [eax+20]
mov	edx, DWORD PTR _gloader$[ebp]
movsx	eax, WORD PTR [edx+56]
add	ecx, DWORD PTR _n_contours$[ebp]
add	eax, ecx
mov	ecx, DWORD PTR _gloader$[ebp]
cmp	eax, DWORD PTR [ecx+8]
ja	SHORT $LN60@TT_Load_Si
mov	DWORD PTR tv83[ebp], 0
jmp	SHORT $LN61@TT_Load_Si
mov	edx, DWORD PTR _n_contours$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _gloader$[ebp]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv83[ebp], eax
mov	ecx, DWORD PTR tv83[ebp]
mov	DWORD PTR _error$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN56@TT_Load_Si
jmp	$Fail$68
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR _cont$[ebp], eax
mov	ecx, DWORD PTR _n_contours$[ebp]
mov	edx, DWORD PTR _cont$[ebp]
lea	eax, DWORD PTR [edx+ecx*2]
mov	DWORD PTR _cont_limit$[ebp], eax
cmp	DWORD PTR _n_contours$[ebp], 4095	
jge	SHORT $LN54@TT_Load_Si
mov	ecx, DWORD PTR _n_contours$[ebp]
mov	edx, DWORD PTR _p$[ebp]
lea	eax, DWORD PTR [edx+ecx*2+2]
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN55@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
mov	WORD PTR _prev_cont$[ebp], dx
cmp	DWORD PTR _n_contours$[ebp], 0
jle	SHORT $LN53@TT_Load_Si
mov	ecx, 2
imul	edx, ecx, 0
mov	eax, DWORD PTR _cont$[ebp]
mov	cx, WORD PTR _prev_cont$[ebp]
mov	WORD PTR [eax+edx], cx
movsx	edx, WORD PTR _prev_cont$[ebp]
test	edx, edx
jge	SHORT $LN52@TT_Load_Si
jmp	$Invalid_Outline$69
mov	eax, DWORD PTR _cont$[ebp]
add	eax, 2
mov	DWORD PTR _cont$[ebp], eax
jmp	SHORT $LN51@TT_Load_Si
mov	ecx, DWORD PTR _cont$[ebp]
add	ecx, 2
mov	DWORD PTR _cont$[ebp], ecx
mov	edx, DWORD PTR _cont$[ebp]
cmp	edx, DWORD PTR _cont_limit$[ebp]
jae	SHORT $LN49@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
mov	eax, 2
imul	edx, eax, 0
mov	eax, DWORD PTR _cont$[ebp]
mov	WORD PTR [eax+edx], cx
mov	ecx, 2
imul	edx, ecx, 0
mov	eax, DWORD PTR _cont$[ebp]
movsx	ecx, WORD PTR [eax+edx]
movsx	edx, WORD PTR _prev_cont$[ebp]
cmp	ecx, edx
jg	SHORT $LN48@TT_Load_Si
jmp	$Invalid_Outline$69
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _cont$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _prev_cont$[ebp], ax
jmp	SHORT $LN50@TT_Load_Si
mov	DWORD PTR _n_points$[ebp], 0
cmp	DWORD PTR _n_contours$[ebp], 0
jle	SHORT $LN47@TT_Load_Si
mov	ecx, 2
imul	edx, ecx, -1
mov	eax, DWORD PTR _cont$[ebp]
movsx	ecx, WORD PTR [eax+edx]
add	ecx, 1
mov	DWORD PTR _n_points$[ebp], ecx
jns	SHORT $LN47@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _n_points$[ebp]
add	edx, 4
je	SHORT $LN62@TT_Load_Si
mov	eax, DWORD PTR _gloader$[ebp]
movsx	ecx, WORD PTR [eax+22]
mov	edx, DWORD PTR _gloader$[ebp]
movsx	eax, WORD PTR [edx+58]
add	ecx, eax
mov	edx, DWORD PTR _n_points$[ebp]
lea	eax, DWORD PTR [ecx+edx+4]
mov	ecx, DWORD PTR _gloader$[ebp]
cmp	eax, DWORD PTR [ecx+4]
ja	SHORT $LN63@TT_Load_Si
mov	edx, 1
test	edx, edx
je	SHORT $LN63@TT_Load_Si
mov	DWORD PTR tv189[ebp], 0
jmp	SHORT $LN64@TT_Load_Si
push	0
mov	eax, DWORD PTR _n_points$[ebp]
add	eax, 4
push	eax
mov	ecx, DWORD PTR _gloader$[ebp]
push	ecx
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv189[ebp], eax
mov	edx, DWORD PTR tv189[ebp]
mov	DWORD PTR _error$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN45@TT_Load_Si
jmp	$Fail$68
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+140], 0
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [eax+136], 0
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN44@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
mov	WORD PTR _n_ins$[ebp], ax
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN42@TT_Load_Si
movzx	ecx, WORD PTR _n_ins$[ebp]
push	ecx
push	OFFSET $SG9688
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN43@TT_Load_Si
mov	eax, DWORD PTR _limit$[ebp]
sub	eax, DWORD PTR _p$[ebp]
movzx	ecx, WORD PTR _n_ins$[ebp]
cmp	eax, ecx
jge	SHORT $LN39@TT_Load_Si
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 0
jl	SHORT $LN37@TT_Load_Si
push	OFFSET $SG9694
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN38@TT_Load_Si
push	OFFSET $SG9695
push	423					
push	22					
call	_FT_Throw
add	esp, 12					
or	eax, 22					
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail$68
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 2
jne	$LN34@TT_Load_Si
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	eax, DWORD PTR [edx+388]
mov	DWORD PTR _tmp$[ebp], eax
movzx	ecx, WORD PTR _n_ins$[ebp]
push	ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
add	eax, 392				
push	eax
push	1
lea	ecx, DWORD PTR _tmp$[ebp]
push	ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
movzx	ecx, WORD PTR _tmp$[ebp]
mov	DWORD PTR [eax+388], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN33@TT_Load_Si
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN57@TT_Load_Si
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+8]
movzx	ecx, WORD PTR _n_ins$[ebp]
mov	DWORD PTR [eax+140], ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR [eax+392]
mov	DWORD PTR [edx+136], eax
movzx	ecx, WORD PTR _n_ins$[ebp]
push	ecx
mov	edx, DWORD PTR _p$[ebp]
push	edx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	edx, DWORD PTR [ecx+392]
push	edx
call	_memcpy
add	esp, 12					
movzx	eax, WORD PTR _n_ins$[ebp]
add	eax, DWORD PTR _p$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _gloader$[ebp]
add	ecx, 56					
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _flag$[ebp], eax
mov	ecx, DWORD PTR _flag$[ebp]
add	ecx, DWORD PTR _n_points$[ebp]
mov	DWORD PTR _flag_limit$[ebp], ecx
cmp	DWORD PTR _flag$[ebp], 0
jne	SHORT $LN31@TT_Load_Si
push	OFFSET $SG9708
push	461					
push	OFFSET $SG9709
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN32@TT_Load_Si
mov	eax, DWORD PTR _flag$[ebp]
cmp	eax, DWORD PTR _flag_limit$[ebp]
jae	$LN27@TT_Load_Si
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN26@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR _c$[ebp], al
mov	ecx, DWORD PTR _flag$[ebp]
mov	dl, BYTE PTR _c$[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _flag$[ebp]
add	eax, 1
mov	DWORD PTR _flag$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
movzx	edx, BYTE PTR _c$[ebp]
and	edx, 8
je	SHORT $LN25@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN24@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR _count$[ebp], dl
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
movzx	ecx, BYTE PTR _count$[ebp]
add	ecx, DWORD PTR _flag$[ebp]
cmp	ecx, DWORD PTR _flag_limit$[ebp]
jbe	SHORT $LN23@TT_Load_Si
jmp	$Invalid_Outline$69
jmp	SHORT $LN22@TT_Load_Si
mov	dl, BYTE PTR _count$[ebp]
sub	dl, 1
mov	BYTE PTR _count$[ebp], dl
movzx	eax, BYTE PTR _count$[ebp]
test	eax, eax
jle	SHORT $LN25@TT_Load_Si
mov	ecx, DWORD PTR _flag$[ebp]
mov	dl, BYTE PTR _c$[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _flag$[ebp]
add	eax, 1
mov	DWORD PTR _flag$[ebp], eax
jmp	SHORT $LN21@TT_Load_Si
jmp	$LN28@TT_Load_Si
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _vec$[ebp], edx
mov	eax, DWORD PTR _n_points$[ebp]
mov	ecx, DWORD PTR _vec$[ebp]
lea	edx, DWORD PTR [ecx+eax*8]
mov	DWORD PTR _vec_limit$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _flag$[ebp], ecx
mov	DWORD PTR _x$[ebp], 0
mov	edx, DWORD PTR _p$[ebp]
add	edx, DWORD PTR _xy_size$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN19@TT_Load_Si
jmp	$Invalid_Outline$69
jmp	SHORT $LN18@TT_Load_Si
mov	eax, DWORD PTR _vec$[ebp]
add	eax, 8
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _flag$[ebp]
add	ecx, 1
mov	DWORD PTR _flag$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
cmp	edx, DWORD PTR _vec_limit$[ebp]
jae	$LN16@TT_Load_Si
mov	DWORD PTR _y$4[ebp], 0
mov	eax, DWORD PTR _flag$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR _f$3[ebp], cl
movzx	edx, BYTE PTR _f$3[ebp]
and	edx, 2
je	SHORT $LN15@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN14@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _y$4[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
movzx	ecx, BYTE PTR _f$3[ebp]
and	ecx, 16					
jne	SHORT $LN13@TT_Load_Si
mov	edx, DWORD PTR _y$4[ebp]
neg	edx
mov	DWORD PTR _y$4[ebp], edx
jmp	SHORT $LN12@TT_Load_Si
movzx	eax, BYTE PTR _f$3[ebp]
and	eax, 16					
jne	SHORT $LN12@TT_Load_Si
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN10@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
mov	DWORD PTR _y$4[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _y$4[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], edx
movzx	eax, BYTE PTR _f$3[ebp]
and	eax, -19				
mov	ecx, DWORD PTR _flag$[ebp]
mov	BYTE PTR [ecx], al
jmp	$LN17@TT_Load_Si
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+60]
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR _vec$[ebp]
lea	eax, DWORD PTR [edx+ecx*8]
mov	DWORD PTR _vec_limit$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _flag$[ebp], edx
mov	DWORD PTR _x$[ebp], 0
jmp	SHORT $LN9@TT_Load_Si
mov	eax, DWORD PTR _vec$[ebp]
add	eax, 8
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _flag$[ebp]
add	ecx, 1
mov	DWORD PTR _flag$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
cmp	edx, DWORD PTR _vec_limit$[ebp]
jae	$LN7@TT_Load_Si
mov	DWORD PTR _y$2[ebp], 0
mov	eax, DWORD PTR _flag$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR _f$1[ebp], cl
movzx	edx, BYTE PTR _f$1[ebp]
and	edx, 4
je	SHORT $LN6@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN5@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _y$2[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
movzx	ecx, BYTE PTR _f$1[ebp]
and	ecx, 32					
jne	SHORT $LN4@TT_Load_Si
mov	edx, DWORD PTR _y$2[ebp]
neg	edx
mov	DWORD PTR _y$2[ebp], edx
jmp	SHORT $LN3@TT_Load_Si
movzx	eax, BYTE PTR _f$1[ebp]
and	eax, 32					
jne	SHORT $LN3@TT_Load_Si
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN1@TT_Load_Si
jmp	SHORT $Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
mov	DWORD PTR _y$2[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _y$2[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx+4], edx
movzx	eax, BYTE PTR _f$1[ebp]
and	eax, 1
mov	ecx, DWORD PTR _flag$[ebp]
mov	BYTE PTR [ecx], al
jmp	$LN8@TT_Load_Si
mov	edx, DWORD PTR _outline$[ebp]
mov	ax, WORD PTR _n_points$[ebp]
mov	WORD PTR [edx+2], ax
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR _n_contours$[ebp]
mov	WORD PTR [ecx], dx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR _p$[ebp]
mov	DWORD PTR [eax+200], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN57@TT_Load_Si
push	OFFSET $SG9770
push	567					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$68
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN67@TT_Load_Si
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN66@TT_Load_Si
DD	-40					
DD	4
DD	$LN65@TT_Load_Si
DB	116					
DB	109					
DB	112					
DB	0
ENDP
_TT_Load_Glyph_Header PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+200]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+204]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 10					
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN13@TT_Load_Gl
push	OFFSET $SG9577
push	322					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN14@TT_Load_Gl
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	WORD PTR [edx+32], ax
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+36], eax
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+40], edx
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+48], eax
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN11@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp]
movsx	edx, WORD PTR [ecx+32]
push	edx
push	OFFSET $SG9612
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN12@TT_Load_Gl
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN7@TT_Load_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+44]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+36]
push	eax
push	OFFSET $SG9617
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN8@TT_Load_Gl
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN3@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+48]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
push	OFFSET $SG9622
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@TT_Load_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _p$[ebp]
mov	DWORD PTR [eax+200], ecx
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Forget_Glyph_Frame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExitFrame
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Access_Glyph_Frame PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	DWORD PTR _glyph_index$[ebp], edx
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN5@TT_Access_
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	OFFSET $SG9560
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN6@TT_Access_
mov	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@TT_Access_
mov	eax, DWORD PTR _byte_count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@TT_Access_
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN7@TT_Access_
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR [edx+200], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	DWORD PTR [edx+204], ecx
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_translate_array PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _delta_x$[ebp], 0
je	SHORT $LN8@translate_
mov	DWORD PTR _k$[ebp], 0
jmp	SHORT $LN7@translate_
mov	eax, DWORD PTR _k$[ebp]
add	eax, 1
mov	DWORD PTR _k$[ebp], eax
mov	ecx, DWORD PTR _k$[ebp]
cmp	ecx, DWORD PTR _n$[ebp]
jae	SHORT $LN8@translate_
mov	edx, DWORD PTR _k$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR [eax+edx*8]
add	ecx, DWORD PTR _delta_x$[ebp]
mov	edx, DWORD PTR _k$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	DWORD PTR [eax+edx*8], ecx
jmp	SHORT $LN6@translate_
cmp	DWORD PTR _delta_y$[ebp], 0
je	SHORT $LN9@translate_
mov	DWORD PTR _k$[ebp], 0
jmp	SHORT $LN3@translate_
mov	ecx, DWORD PTR _k$[ebp]
add	ecx, 1
mov	DWORD PTR _k$[ebp], ecx
mov	edx, DWORD PTR _k$[ebp]
cmp	edx, DWORD PTR _n$[ebp]
jae	SHORT $LN9@translate_
mov	eax, DWORD PTR _k$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+4]
add	edx, DWORD PTR _delta_y$[ebp]
mov	eax, DWORD PTR _k$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
mov	DWORD PTR [ecx+eax*8+4], edx
jmp	SHORT $LN2@translate_
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_get_metrics_incr_overrides PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
xor	edx, edx
mov	WORD PTR _left_bearing$[ebp], dx
xor	eax, eax
mov	WORD PTR _top_bearing$[ebp], ax
xor	ecx, ecx
mov	WORD PTR _advance_width$[ebp], cx
xor	edx, edx
mov	WORD PTR _advance_height$[ebp], dx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	$Exit$9
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+8], 0
je	$Exit$9
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+52]
mov	DWORD PTR _metrics$2[ebp], ecx
mov	DWORD PTR _metrics$2[ebp+4], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+56]
mov	DWORD PTR _metrics$2[ebp+8], eax
mov	DWORD PTR _metrics$2[ebp+12], 0
mov	esi, esp
lea	ecx, DWORD PTR _metrics$2[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
je	SHORT $LN2@tt_get_met
jmp	SHORT $Exit$9
mov	ax, WORD PTR _metrics$2[ebp]
mov	WORD PTR _left_bearing$[ebp], ax
mov	cx, WORD PTR _metrics$2[ebp+8]
mov	WORD PTR _advance_width$[ebp], cx
movsx	edx, WORD PTR _left_bearing$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+52], edx
movzx	ecx, WORD PTR _advance_width$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+56], ecx
movsx	eax, WORD PTR _top_bearing$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+176], eax
movzx	edx, WORD PTR _advance_height$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+180], edx
mov	ecx, DWORD PTR _loader$[ebp]
movzx	edx, BYTE PTR [ecx+64]
test	edx, edx
jne	SHORT $Exit$9
mov	eax, DWORD PTR _loader$[ebp]
mov	BYTE PTR [eax+64], 1
movzx	ecx, WORD PTR _advance_width$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+60], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@tt_get_met
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN7@tt_get_met
DD	-44					
DD	16					
DD	$LN6@tt_get_met
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
ENDP
_tt_get_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	DWORD PTR _stream$[ebp], eax
xor	ecx, ecx
mov	WORD PTR _left_bearing$[ebp], cx
xor	edx, edx
mov	WORD PTR _top_bearing$[ebp], dx
xor	eax, eax
mov	WORD PTR _advance_width$[ebp], ax
xor	ecx, ecx
mov	WORD PTR _advance_height$[ebp], cx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _pos$[ebp], eax
lea	eax, DWORD PTR _advance_width$[ebp]
push	eax
lea	ecx, DWORD PTR _left_bearing$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_TT_Get_HMetrics
add	esp, 16					
lea	ecx, DWORD PTR _advance_height$[ebp]
push	ecx
lea	edx, DWORD PTR _top_bearing$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+48]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_TT_Get_VMetrics
add	esp, 20					
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@tt_get_met
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@tt_get_met
movsx	eax, WORD PTR _left_bearing$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+52], eax
movzx	edx, WORD PTR _advance_width$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+56], edx
movsx	ecx, WORD PTR _top_bearing$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+176], ecx
movzx	eax, WORD PTR _advance_height$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+180], eax
mov	edx, DWORD PTR _loader$[ebp]
movzx	eax, BYTE PTR [edx+64]
test	eax, eax
jne	SHORT $LN1@tt_get_met
mov	ecx, DWORD PTR _loader$[ebp]
mov	BYTE PTR [ecx+64], 1
movzx	edx, WORD PTR _advance_width$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+60], edx
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@tt_get_met
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	4
DD	$LN9@tt_get_met
DD	-20					
DD	2
DD	$LN5@tt_get_met
DD	-32					
DD	2
DD	$LN6@tt_get_met
DD	-44					
DD	2
DD	$LN7@tt_get_met
DD	-56					
DD	2
DD	$LN8@tt_get_met
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	95					
DB	104					
DB	101					
DB	105					
DB	103					
DB	104					
DB	116					
DB	0
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	95					
DB	119					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	116					
DB	111					
DB	112					
DB	95					
DB	98					
DB	101					
DB	97					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
DB	108					
DB	101					
DB	102					
DB	116					
DB	95					
DB	98					
DB	101					
DB	97					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
_FT_MulFix_i386 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _b$[ebp]
imul	edx
mov	ecx, edx
sar	ecx, 31					
add	ecx, 32768				
add	eax, ecx
adc	edx, 0
shr	eax, 16					
shl	edx, 16					
add	eax, edx
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_get_interface PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _tt_interface$[ebp]
push	eax
push	OFFSET _tt_services
call	_ft_service_list_lookup
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN5@tt_get_int
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN6@tt_get_int
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN4@tt_get_int
xor	eax, eax
jmp	SHORT $LN6@tt_get_int
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN3@tt_get_int
xor	eax, eax
jmp	SHORT $LN6@tt_get_int
push	OFFSET $SG8923
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _sfntd$[ebp], eax
cmp	DWORD PTR _sfntd$[ebp], 0
je	SHORT $LN2@tt_get_int
mov	ecx, DWORD PTR _sfntd$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN2@tt_get_int
mov	esi, esp
mov	ecx, DWORD PTR _tt_interface$[ebp]
push	ecx
mov	edx, DWORD PTR _driver$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax+16]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN6@tt_get_int
xor	eax, eax
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_glyph_load PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ttslot$[ebp]
mov	DWORD PTR _slot$[ebp], eax
mov	ecx, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR _size$[ebp], ecx
mov	edx, DWORD PTR _ttslot$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _slot$[ebp], 0
jne	SHORT $LN9@tt_glyph_l
push	OFFSET $SG8874
push	367					
push	37					
call	_FT_Throw
add	esp, 12					
or	eax, 37					
jmp	$LN10@tt_glyph_l
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN8@tt_glyph_l
push	OFFSET $SG8876
push	370					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN10@tt_glyph_l
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@tt_glyph_l
push	OFFSET $SG8878
push	373					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN10@tt_glyph_l
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _glyph_index$[ebp]
cmp	edx, DWORD PTR [ecx+16]
jb	SHORT $LN6@tt_glyph_l
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
jne	SHORT $LN6@tt_glyph_l
push	OFFSET $SG8881
push	381					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN10@tt_glyph_l
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2
je	SHORT $LN5@tt_glyph_l
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8192				
je	SHORT $LN4@tt_glyph_l
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, -3					
mov	DWORD PTR _load_flags$[ebp], edx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 32768				
je	SHORT $LN5@tt_glyph_l
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 2
mov	DWORD PTR _load_flags$[ebp], ecx
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1025				
je	SHORT $LN2@tt_glyph_l
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 9
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 8192				
jne	SHORT $LN2@tt_glyph_l
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 2
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_TT_Load_Glyph
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_request PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR _ttsize$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
and	eax, 2
je	SHORT $LN4@tt_size_re
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _ttface$3[ebp], edx
mov	eax, DWORD PTR _ttface$3[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$2[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _strike_index$1[ebp]
push	edx
mov	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _ttface$3[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$2[ebp]
mov	eax, DWORD PTR [edx+104]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_size_re
mov	ecx, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR [ecx+112], -1
jmp	SHORT $LN4@tt_size_re
mov	edx, DWORD PTR _strike_index$1[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_tt_size_select
add	esp, 8
jmp	SHORT $LN5@tt_size_re
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_Request_Metrics
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	SHORT $LN1@tt_size_re
mov	ecx, DWORD PTR _ttsize$[ebp]
push	ecx
call	_tt_size_reset
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
mov	esi, DWORD PTR _ttsize$[ebp]
add	esi, 44					
mov	edi, DWORD PTR _ttsize$[ebp]
add	edi, 12					
mov	ecx, 7
rep movsd
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@tt_size_re
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN8@tt_size_re
DD	-24					
DD	4
DD	$LN7@tt_size_re
DB	115					
DB	116					
DB	114					
DB	105					
DB	107					
DB	101					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_tt_size_select PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _ttface$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR _ttsize$[ebp], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _ttsize$[ebp]
mov	ecx, DWORD PTR _strike_index$[ebp]
mov	DWORD PTR [eax+112], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 1
je	SHORT $LN3@tt_size_se
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_Select_Metrics
add	esp, 8
mov	edx, DWORD PTR _ttsize$[ebp]
push	edx
call	_tt_size_reset
add	esp, 4
jmp	SHORT $LN2@tt_size_se
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$2[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
add	edx, 12					
mov	DWORD PTR _metrics$1[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _metrics$1[ebp]
push	eax
mov	ecx, DWORD PTR _strike_index$[ebp]
push	ecx
mov	edx, DWORD PTR _ttface$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$2[ebp]
mov	ecx, DWORD PTR [eax+108]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@tt_size_se
mov	edx, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR [edx+112], -1
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_get_advances PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 16					
je	SHORT $LN8@tt_get_adv
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN7@tt_get_adv
mov	edx, DWORD PTR _nn$[ebp]
add	edx, 1
mov	DWORD PTR _nn$[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN5@tt_get_adv
lea	ecx, DWORD PTR _ah$3[ebp]
push	ecx
lea	edx, DWORD PTR _tsb$4[ebp]
push	edx
push	0
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Get_VMetrics
add	esp, 20					
movzx	edx, WORD PTR _ah$3[ebp]
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN6@tt_get_adv
jmp	SHORT $LN4@tt_get_adv
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN3@tt_get_adv
mov	edx, DWORD PTR _nn$[ebp]
add	edx, 1
mov	DWORD PTR _nn$[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN4@tt_get_adv
lea	ecx, DWORD PTR _aw$1[ebp]
push	ecx
lea	edx, DWORD PTR _lsb$2[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Get_HMetrics
add	esp, 16					
movzx	edx, WORD PTR _aw$1[ebp]
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN2@tt_get_adv
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@tt_get_adv
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	4
DD	$LN15@tt_get_adv
DD	-16					
DD	2
DD	$LN11@tt_get_adv
DD	-28					
DD	2
DD	$LN12@tt_get_adv
DD	-40					
DD	2
DD	$LN13@tt_get_adv
DD	-52					
DD	2
DD	$LN14@tt_get_adv
DB	97					
DB	119					
DB	0
DB	108					
DB	115					
DB	98					
DB	0
DB	97					
DB	104					
DB	0
DB	116					
DB	115					
DB	98					
DB	0
ENDP
_tt_get_kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR _sfnt$[ebp], edx
mov	eax, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx+4], 0
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN1@tt_get_ker
mov	esi, esp
mov	edx, DWORD PTR _right_glyph$[ebp]
push	edx
mov	eax, DWORD PTR _left_glyph$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+84]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx], eax
xor	eax, eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_property_get PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+68]
mov	DWORD PTR _interpreter_version$[ebp], edx
push	OFFSET $SG8768
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@tt_propert
mov	ecx, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$1[ebp], ecx
mov	edx, DWORD PTR _val$1[ebp]
mov	eax, DWORD PTR _interpreter_version$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN6@tt_propert
mov	ecx, 4
imul	edx, ecx, 27
cmp	DWORD PTR _ft_trace_levels[edx], 0
jl	SHORT $LN3@tt_propert
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
push	OFFSET $SG8775
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_propert
push	OFFSET $SG8776
push	114					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_property_set PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
push	OFFSET $SG8744
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@tt_propert
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _interpreter_version$1[ebp], edx
mov	eax, DWORD PTR _interpreter_version$1[ebp]
cmp	DWORD PTR [eax], 35			
je	SHORT $LN6@tt_propert
mov	DWORD PTR _error$[ebp], 7
jmp	SHORT $LN5@tt_propert
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _interpreter_version$1[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx+68], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN8@tt_propert
mov	ecx, 4
imul	edx, ecx, 27
cmp	DWORD PTR _ft_trace_levels[edx], 0
jl	SHORT $LN3@tt_propert
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
push	OFFSET $SG8753
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_propert
push	OFFSET $SG8754
push	87					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_done_blend PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _blend$[ebp], 0
je	$LN27@tt_done_bl
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+4], 0
xor	ecx, ecx
jne	SHORT $LN25@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+8], 0
xor	eax, eax
jne	SHORT $LN22@tt_done_bl
mov	ecx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN9@tt_done_bl
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN18@tt_done_bl
mov	edx, DWORD PTR _i$1[ebp]
add	edx, 1
mov	DWORD PTR _i$1[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR _i$1[ebp]
cmp	ecx, DWORD PTR [eax]
jae	SHORT $LN12@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	ecx, DWORD PTR _i$1[ebp]
mov	edx, DWORD PTR [eax+ecx*8+4]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	eax, DWORD PTR _i$1[ebp]
mov	DWORD PTR [edx+eax*8+4], 0
xor	ecx, ecx
jne	SHORT $LN15@tt_done_bl
jmp	SHORT $LN17@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+20], 0
xor	eax, eax
jne	SHORT $LN12@tt_done_bl
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+28], 0
xor	edx, edx
jne	SHORT $LN9@tt_done_bl
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+36], 0
xor	ecx, ecx
jne	SHORT $LN6@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _blend$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@tt_done_bl
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Vary_Get_Glyph_Deltas PROC
push	ebp
mov	ebp, esp
sub	esp, 128				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-128]
mov	ecx, 32					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	DWORD PTR _delta_xy$[ebp], 0
mov	DWORD PTR _tuple_coords$[ebp], 0
mov	DWORD PTR _im_start_coords$[ebp], 0
mov	DWORD PTR _im_end_coords$[ebp], 0
mov	DWORD PTR _spoint_count$[ebp], 0
mov	DWORD PTR _sharedpoints$[ebp], 0
mov	DWORD PTR _localpoints$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+672]
test	ecx, ecx
je	SHORT $LN64@TT_Vary_Ge
cmp	DWORD PTR _blend$[ebp], 0
jne	SHORT $LN65@TT_Vary_Ge
push	OFFSET $SG14188
push	1328					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN66@TT_Vary_Ge
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _n_points$[ebp]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _delta_xy$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN63@TT_Vary_Ge
jmp	$Exit$77
mov	edx, DWORD PTR _deltas$[ebp]
mov	eax, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _glyph_index$[ebp]
cmp	edx, DWORD PTR [ecx+32]
jae	SHORT $LN61@TT_Vary_Ge
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	esi, DWORD PTR _glyph_index$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
cmp	ecx, DWORD PTR [eax+esi*4+4]
jne	SHORT $LN62@TT_Vary_Ge
xor	eax, eax
jmp	$LN66@TT_Vary_Ge
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _glyph_index$[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN59@TT_Vary_Ge
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	eax, DWORD PTR _glyph_index$[ebp]
mov	esi, DWORD PTR _glyph_index$[ebp]
mov	edx, DWORD PTR [edx+eax*4+4]
sub	edx, DWORD PTR [ecx+esi*4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN60@TT_Vary_Ge
jmp	$Fail1$78
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [ecx+32]
sub	eax, DWORD PTR [edx]
mov	DWORD PTR _glyph_start$[ebp], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _tuple_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN57@TT_Vary_Ge
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_start_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN57@TT_Vary_Ge
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_end_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN58@TT_Vary_Ge
jmp	$Fail2$79
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
mov	DWORD PTR _tupleCount$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movzx	ecx, ax
add	ecx, DWORD PTR _glyph_start$[ebp]
mov	DWORD PTR _offsetToData$[ebp], ecx
mov	edx, DWORD PTR _tupleCount$[ebp]
and	edx, 32768				
je	SHORT $LN56@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+32]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _here$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _offsetToData$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
lea	eax, DWORD PTR _spoint_count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_ft_var_readpackedpoints
add	esp, 8
mov	DWORD PTR _sharedpoints$[ebp], eax
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+32]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _offsetToData$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, DWORD PTR _here$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+32], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN55@TT_Vary_Ge
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _tupleCount$[ebp]
and	eax, 4095				
cmp	DWORD PTR _i$[ebp], eax
jae	$Fail3$80
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
mov	DWORD PTR _tupleDataSize$3[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movzx	ecx, ax
mov	DWORD PTR _tupleIndex$2[ebp], ecx
mov	edx, DWORD PTR _tupleIndex$2[ebp]
and	edx, 32768				
je	SHORT $LN52@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN51@TT_Vary_Ge
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR [ecx]
jae	SHORT $LN49@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movsx	ecx, ax
shl	ecx, 2
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _tuple_coords$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN50@TT_Vary_Ge
jmp	SHORT $LN48@TT_Vary_Ge
mov	ecx, DWORD PTR _tupleIndex$2[ebp]
and	ecx, 4095				
mov	edx, DWORD PTR _blend$[ebp]
cmp	ecx, DWORD PTR [edx+24]
jb	SHORT $LN47@TT_Vary_Ge
push	OFFSET $SG14230
push	1388					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail3$80
jmp	SHORT $LN48@TT_Vary_Ge
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax]
shl	ecx, 2
push	ecx
mov	edx, DWORD PTR _tupleIndex$2[ebp]
and	edx, 4095				
mov	eax, DWORD PTR _blend$[ebp]
imul	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [ecx+28]
lea	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	edx, DWORD PTR _tuple_coords$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _tupleIndex$2[ebp]
and	eax, 16384				
je	SHORT $LN45@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN44@TT_Vary_Ge
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN42@TT_Vary_Ge
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _im_start_coords$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN43@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN41@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax]
jae	SHORT $LN45@TT_Vary_Ge
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
cwde
shl	eax, 2
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _im_end_coords$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN40@TT_Vary_Ge
mov	eax, DWORD PTR _im_end_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _im_start_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _tuple_coords$[ebp]
push	edx
movzx	eax, WORD PTR _tupleIndex$2[ebp]
push	eax
mov	ecx, DWORD PTR _blend$[ebp]
push	ecx
call	_ft_var_apply_tuple
add	esp, 20					
mov	DWORD PTR _apply$1[ebp], eax
cmp	DWORD PTR _apply$1[ebp], 0
jne	SHORT $LN38@TT_Vary_Ge
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$3[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
jmp	$LN54@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+32]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _here$[ebp], edx
mov	eax, DWORD PTR _tupleIndex$2[ebp]
and	eax, 8192				
je	SHORT $LN37@TT_Vary_Ge
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, DWORD PTR _offsetToData$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+32], edx
lea	ecx, DWORD PTR _point_count$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_ft_var_readpackedpoints
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], eax
mov	eax, DWORD PTR _localpoints$[ebp]
mov	DWORD PTR _points$[ebp], eax
jmp	SHORT $LN36@TT_Vary_Ge
mov	ecx, DWORD PTR _sharedpoints$[ebp]
mov	DWORD PTR _points$[ebp], ecx
mov	edx, DWORD PTR _spoint_count$[ebp]
mov	DWORD PTR _point_count$[ebp], edx
cmp	DWORD PTR _point_count$[ebp], 0
jne	SHORT $LN68@TT_Vary_Ge
mov	eax, DWORD PTR _n_points$[ebp]
mov	DWORD PTR tv279[ebp], eax
jmp	SHORT $LN69@TT_Vary_Ge
mov	ecx, DWORD PTR _point_count$[ebp]
mov	DWORD PTR tv279[ebp], ecx
mov	edx, DWORD PTR tv279[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_ft_var_readpackeddeltas
add	esp, 8
mov	DWORD PTR _deltas_x$[ebp], eax
cmp	DWORD PTR _point_count$[ebp], 0
jne	SHORT $LN70@TT_Vary_Ge
mov	ecx, DWORD PTR _n_points$[ebp]
mov	DWORD PTR tv284[ebp], ecx
jmp	SHORT $LN71@TT_Vary_Ge
mov	edx, DWORD PTR _point_count$[ebp]
mov	DWORD PTR tv284[ebp], edx
mov	eax, DWORD PTR tv284[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_ft_var_readpackeddeltas
add	esp, 8
mov	DWORD PTR _deltas_y$[ebp], eax
cmp	DWORD PTR _points$[ebp], 0
je	SHORT $LN34@TT_Vary_Ge
cmp	DWORD PTR _deltas_y$[ebp], 0
je	SHORT $LN34@TT_Vary_Ge
cmp	DWORD PTR _deltas_x$[ebp], 0
jne	SHORT $LN35@TT_Vary_Ge
jmp	$LN33@TT_Vary_Ge
cmp	DWORD PTR _points$[ebp], -1
jne	SHORT $LN32@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN31@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _n_points$[ebp]
jae	SHORT $LN29@TT_Vary_Ge
mov	ecx, DWORD PTR _apply$1[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas_x$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [ecx+edx*8]
mov	edx, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [ecx+edx*8], eax
mov	edx, DWORD PTR _apply$1[ebp]
push	edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _deltas_y$[ebp]
movsx	edx, WORD PTR [ecx+eax*2]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [edx+ecx*8+4]
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [edx+ecx*8+4], eax
jmp	SHORT $LN30@TT_Vary_Ge
jmp	$LN33@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN27@TT_Vary_Ge
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _point_count$[ebp]
jae	$LN33@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _localpoints$[ebp]
movzx	ecx, WORD PTR [eax+edx*2]
cmp	ecx, DWORD PTR _n_points$[ebp]
jb	SHORT $LN24@TT_Vary_Ge
jmp	SHORT $LN26@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _localpoints$[ebp]
movzx	esi, WORD PTR [eax+edx*2]
mov	ecx, DWORD PTR _apply$1[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas_x$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [edx+esi*8]
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _localpoints$[ebp]
movzx	ecx, WORD PTR [edx+ecx*2]
mov	edx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [edx+ecx*8], eax
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _localpoints$[ebp]
movzx	esi, WORD PTR [ecx+eax*2]
mov	edx, DWORD PTR _apply$1[ebp]
push	edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _deltas_y$[ebp]
movsx	edx, WORD PTR [ecx+eax*2]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [ecx+esi*8+4]
mov	edx, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _localpoints$[ebp]
movzx	edx, WORD PTR [ecx+edx*2]
mov	ecx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [ecx+edx*8+4], eax
jmp	$LN26@TT_Vary_Ge
cmp	DWORD PTR _localpoints$[ebp], -1
je	SHORT $LN19@TT_Vary_Ge
mov	edx, DWORD PTR _localpoints$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN22@TT_Vary_Ge
mov	edx, DWORD PTR _deltas_x$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas_x$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN19@TT_Vary_Ge
mov	edx, DWORD PTR _deltas_y$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas_y$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN16@TT_Vary_Ge
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$3[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _here$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
jmp	$LN54@TT_Vary_Ge
mov	eax, DWORD PTR _tuple_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _tuple_coords$[ebp], 0
xor	edx, edx
jne	SHORT $Fail3$80
mov	eax, DWORD PTR _im_start_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_start_coords$[ebp], 0
xor	edx, edx
jne	SHORT $LN10@TT_Vary_Ge
mov	eax, DWORD PTR _im_end_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_end_coords$[ebp], 0
xor	edx, edx
jne	SHORT $LN7@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $Exit$77
mov	ecx, DWORD PTR _delta_xy$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _delta_xy$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@TT_Vary_Ge
mov	ecx, DWORD PTR _deltas$[ebp]
mov	DWORD PTR [ecx], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN76@TT_Vary_Ge
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 128				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN75@TT_Vary_Ge
DD	-24					
DD	4
DD	$LN72@TT_Vary_Ge
DD	-72					
DD	4
DD	$LN73@TT_Vary_Ge
DD	-84					
DD	4
DD	$LN74@TT_Vary_Ge
DB	115					
DB	112					
DB	111					
DB	105					
DB	110					
DB	116					
DB	95					
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	112					
DB	111					
DB	105					
DB	110					
DB	116					
DB	95					
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_vary_cvt PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _tuple_coords$[ebp], 0
mov	DWORD PTR _im_start_coords$[ebp], 0
mov	DWORD PTR _im_end_coords$[ebp], 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	DWORD PTR _blend$[ebp], eax
mov	ecx, 4
shl	ecx, 5
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN74@tt_face_va
push	OFFSET $SG14023
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN75@tt_face_va
cmp	DWORD PTR _blend$[ebp], 0
jne	SHORT $LN71@tt_face_va
mov	eax, 4
shl	eax, 5
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN69@tt_face_va
push	OFFSET $SG14030
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN70@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+648], 0
jne	SHORT $LN66@tt_face_va
mov	eax, 4
shl	eax, 5
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN64@tt_face_va
push	OFFSET $SG14038
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN65@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1668702578				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN61@tt_face_va
mov	ecx, 4
shl	ecx, 5
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN59@tt_face_va
push	OFFSET $SG14049
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN60@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN56@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+32]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _table_start$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetULong
add	esp, 4
cmp	eax, 65536				
je	SHORT $LN55@tt_face_va
mov	eax, 4
shl	eax, 5
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN53@tt_face_va
push	OFFSET $SG14059
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN54@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$FExit$86
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _tuple_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN49@tt_face_va
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_start_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN49@tt_face_va
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_end_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN50@tt_face_va
jmp	$FExit$86
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	eax, ax
mov	DWORD PTR _tupleCount$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
add	edx, DWORD PTR _table_start$[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN48@tt_face_va
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _tupleCount$[ebp]
and	ecx, 4095				
cmp	DWORD PTR _i$[ebp], ecx
jae	$FExit$86
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	eax, ax
mov	DWORD PTR _tupleDataSize$4[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
mov	DWORD PTR _tupleIndex$3[ebp], edx
mov	eax, DWORD PTR _tupleIndex$3[ebp]
and	eax, 32768				
je	SHORT $LN45@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN44@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN42@tt_face_va
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _tuple_coords$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN43@tt_face_va
jmp	SHORT $LN41@tt_face_va
mov	edx, DWORD PTR _tupleIndex$3[ebp]
and	edx, 16384				
je	SHORT $LN40@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN39@tt_face_va
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx]
shl	edx, 1
cmp	DWORD PTR _j$[ebp], edx
jae	SHORT $LN40@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
jmp	SHORT $LN38@tt_face_va
mov	ecx, DWORD PTR _offsetToData$[ebp]
add	ecx, DWORD PTR _tupleDataSize$4[ebp]
mov	DWORD PTR _offsetToData$[ebp], ecx
jmp	$LN47@tt_face_va
mov	edx, DWORD PTR _tupleIndex$3[ebp]
and	edx, 16384				
je	SHORT $LN36@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN35@tt_face_va
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR [ecx]
jae	SHORT $LN33@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movsx	ecx, ax
shl	ecx, 2
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _im_start_coords$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN34@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN32@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN36@tt_face_va
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _im_end_coords$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN31@tt_face_va
mov	edx, DWORD PTR _im_end_coords$[ebp]
push	edx
mov	eax, DWORD PTR _im_start_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _tuple_coords$[ebp]
push	ecx
movzx	edx, WORD PTR _tupleIndex$3[ebp]
push	edx
mov	eax, DWORD PTR _blend$[ebp]
push	eax
call	_ft_var_apply_tuple
add	esp, 20					
mov	DWORD PTR _apply$2[ebp], eax
cmp	DWORD PTR _apply$2[ebp], 0
je	SHORT $LN28@tt_face_va
mov	ecx, DWORD PTR _tupleIndex$3[ebp]
and	ecx, 8192				
jne	SHORT $LN29@tt_face_va
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$4[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
jmp	$LN47@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+32]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _here$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _offsetToData$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
lea	eax, DWORD PTR _point_count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_ft_var_readpackedpoints
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], eax
cmp	DWORD PTR _point_count$[ebp], 0
jne	SHORT $LN78@tt_face_va
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+644]
mov	DWORD PTR tv247[ebp], eax
jmp	SHORT $LN79@tt_face_va
mov	ecx, DWORD PTR _point_count$[ebp]
mov	DWORD PTR tv247[ebp], ecx
mov	edx, DWORD PTR tv247[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_ft_var_readpackeddeltas
add	esp, 8
mov	DWORD PTR _deltas$[ebp], eax
cmp	DWORD PTR _localpoints$[ebp], 0
je	SHORT $LN26@tt_face_va
cmp	DWORD PTR _deltas$[ebp], 0
jne	SHORT $LN27@tt_face_va
jmp	$LN25@tt_face_va
cmp	DWORD PTR _localpoints$[ebp], -1
jne	SHORT $LN24@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN23@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx+644]
jae	SHORT $LN21@tt_face_va
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
mov	eax, DWORD PTR _j$[ebp]
movsx	esi, WORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _apply$2[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
mov	ecx, DWORD PTR _j$[ebp]
mov	WORD PTR [eax+ecx*2], si
jmp	SHORT $LN22@tt_face_va
jmp	SHORT $LN25@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN19@tt_face_va
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _point_count$[ebp]
jae	SHORT $LN25@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _localpoints$[ebp]
movzx	eax, WORD PTR [edx+ecx*2]
mov	DWORD PTR _pindex$1[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
mov	eax, DWORD PTR _pindex$1[ebp]
movsx	esi, WORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _apply$2[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
mov	ecx, DWORD PTR _pindex$1[ebp]
mov	WORD PTR [eax+ecx*2], si
jmp	SHORT $LN18@tt_face_va
cmp	DWORD PTR _localpoints$[ebp], -1
je	SHORT $LN12@tt_face_va
mov	edx, DWORD PTR _localpoints$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN15@tt_face_va
mov	edx, DWORD PTR _deltas$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN12@tt_face_va
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$4[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _here$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
jmp	$LN47@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	ecx, DWORD PTR _tuple_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _tuple_coords$[ebp], 0
xor	eax, eax
jne	SHORT $Exit$85
mov	ecx, DWORD PTR _im_start_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_start_coords$[ebp], 0
xor	eax, eax
jne	SHORT $LN6@tt_face_va
mov	ecx, DWORD PTR _im_end_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_end_coords$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@tt_face_va
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN84@tt_face_va
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN83@tt_face_va
DD	-8					
DD	4
DD	$LN80@tt_face_va
DD	-28					
DD	4
DD	$LN81@tt_face_va
DD	-76					
DD	4
DD	$LN82@tt_face_va
DB	112					
DB	111					
DB	105					
DB	110					
DB	116					
DB	95					
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Get_MM_Var PROC
push	ebp
mov	ebp, esp
sub	esp, 124				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 31					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _mmvar$[ebp], 0
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+676], 0
jne	$LN41@TT_Get_MM_
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1735811442				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN40@TT_Get_MM_
jmp	$Exit$50
mov	esi, esp
lea	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1719034226				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN39@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _fvar_start$[ebp], eax
lea	ecx, DWORD PTR _fvar_head$[ebp]
push	ecx
push	OFFSET ?fvar_fields@?1??TT_Get_MM_Var@@9@9
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN38@TT_Get_MM_
jmp	$Exit$50
cmp	DWORD PTR _fvar_head$[ebp], 65536	
jne	SHORT $LN36@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+6]
cmp	eax, 2
jne	SHORT $LN36@TT_Get_MM_
movzx	ecx, WORD PTR _fvar_head$[ebp+10]
cmp	ecx, 20					
jne	SHORT $LN36@TT_Get_MM_
movzx	edx, WORD PTR _fvar_head$[ebp+8]
cmp	edx, 16382				
jg	SHORT $LN36@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+14]
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
lea	edx, DWORD PTR [ecx*4+4]
cmp	eax, edx
jne	SHORT $LN36@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+12]
cmp	eax, 32511				
jg	SHORT $LN36@TT_Get_MM_
movzx	ecx, WORD PTR _fvar_head$[ebp+4]
movzx	edx, WORD PTR _fvar_head$[ebp+8]
imul	eax, edx, 20
add	ecx, eax
movzx	edx, WORD PTR _fvar_head$[ebp+12]
movzx	eax, WORD PTR _fvar_head$[ebp+14]
imul	edx, eax
add	ecx, edx
cmp	ecx, DWORD PTR _table_len$[ebp]
jbe	SHORT $LN37@TT_Get_MM_
push	OFFSET $SG13793
push	686					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$50
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	40					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+676], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN35@TT_Get_MM_
jmp	$Exit$50
movzx	edx, WORD PTR _fvar_head$[ebp+8]
imul	eax, edx, 24
movzx	ecx, WORD PTR _fvar_head$[ebp+12]
lea	edx, DWORD PTR [eax+ecx*8+20]
movzx	eax, WORD PTR _fvar_head$[ebp+12]
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
imul	eax, ecx
lea	edx, DWORD PTR [edx+eax*4]
movzx	eax, WORD PTR _fvar_head$[ebp+8]
imul	ecx, eax, 5
add	edx, ecx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+676]
mov	DWORD PTR [ecx+12], edx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+676]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _mmvar$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN34@TT_Get_MM_
jmp	$Exit$50
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	eax, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+8], eax
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [eax+4], -1
movzx	ecx, WORD PTR _fvar_head$[ebp+12]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, 20					
shl	eax, 0
add	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [ecx+12], eax
movzx	edx, WORD PTR _fvar_head$[ebp+8]
imul	eax, edx, 24
mov	ecx, DWORD PTR _mmvar$[ebp]
add	eax, DWORD PTR [ecx+12]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+16], eax
movzx	eax, WORD PTR _fvar_head$[ebp+12]
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	edx, DWORD PTR [ecx+16]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _next_coords$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN33@TT_Get_MM_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
movzx	edx, WORD PTR _fvar_head$[ebp+12]
cmp	DWORD PTR _i$[ebp], edx
jge	SHORT $LN31@TT_Get_MM_
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR [ecx+edx*8], eax
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
mov	edx, DWORD PTR _next_coords$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _next_coords$[ebp], eax
jmp	SHORT $LN32@TT_Get_MM_
mov	ecx, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR _next_name$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN30@TT_Get_MM_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
movzx	eax, WORD PTR _fvar_head$[ebp+8]
cmp	DWORD PTR _i$[ebp], eax
jge	SHORT $LN28@TT_Get_MM_
imul	ecx, DWORD PTR _i$[ebp], 24
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	edx, DWORD PTR _next_name$[ebp]
mov	DWORD PTR [eax+ecx], edx
mov	eax, DWORD PTR _next_name$[ebp]
add	eax, 5
mov	DWORD PTR _next_name$[ebp], eax
jmp	SHORT $LN29@TT_Get_MM_
movzx	ecx, WORD PTR _fvar_head$[ebp+4]
add	ecx, DWORD PTR _fvar_start$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _a$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN26@TT_Get_MM_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
movzx	eax, WORD PTR _fvar_head$[ebp+8]
cmp	DWORD PTR _i$[ebp], eax
jge	$LN24@TT_Get_MM_
lea	ecx, DWORD PTR _axis_rec$2[ebp]
push	ecx
push	OFFSET ?fvaraxis_fields@?1??TT_Get_MM_Var@@9@9
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN23@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR _axis_rec$2[ebp]
mov	DWORD PTR [eax+16], ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR _axis_rec$2[ebp+4]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _axis_rec$2[ebp+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR _axis_rec$2[ebp+12]
mov	DWORD PTR [eax+12], ecx
movzx	edx, WORD PTR _axis_rec$2[ebp+18]
mov	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR [eax+20], edx
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [eax]
mov	BYTE PTR [ecx+eax], dl
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 16					
and	edx, 255				
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [ecx]
mov	BYTE PTR [eax+ecx], dl
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+16]
shr	eax, 8
and	eax, 255				
mov	ecx, 1
shl	ecx, 1
mov	edx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [edx]
mov	BYTE PTR [ecx+edx], al
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 255				
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [edx]
mov	BYTE PTR [eax+edx], cl
mov	eax, 1
shl	eax, 2
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx]
mov	BYTE PTR [eax+edx], 0
mov	eax, DWORD PTR _a$[ebp]
add	eax, 24					
mov	DWORD PTR _a$[ebp], eax
jmp	$LN25@TT_Get_MM_
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _ns$[ebp], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN22@TT_Get_MM_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _ns$[ebp]
add	ecx, 8
mov	DWORD PTR _ns$[ebp], ecx
movzx	edx, WORD PTR _fvar_head$[ebp+12]
cmp	DWORD PTR _i$[ebp], edx
jge	$LN41@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+8]
lea	ecx, DWORD PTR [eax*4+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN19@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movzx	ecx, ax
mov	edx, DWORD PTR _ns$[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN18@TT_Get_MM_
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
movzx	edx, WORD PTR _fvar_head$[ebp+8]
cmp	DWORD PTR _j$[ebp], edx
jge	SHORT $LN16@TT_Get_MM_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetULong
add	esp, 4
mov	ecx, DWORD PTR _ns$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _j$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN17@TT_Get_MM_
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	$LN21@TT_Get_MM_
cmp	DWORD PTR _master$[ebp], 0
je	$Exit$50
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _mmvar$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@TT_Get_MM_
jmp	$Exit$50
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _mmvar$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, 20					
shl	eax, 0
add	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _mmvar$[ebp]
imul	eax, DWORD PTR [edx], 24
mov	ecx, DWORD PTR _mmvar$[ebp]
add	eax, DWORD PTR [ecx+12]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+16]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _next_coords$[ebp], ecx
mov	DWORD PTR _n$1[ebp], 0
jmp	SHORT $LN13@TT_Get_MM_
mov	edx, DWORD PTR _n$1[ebp]
add	edx, 1
mov	DWORD PTR _n$1[ebp], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _n$1[ebp]
cmp	ecx, DWORD PTR [eax+8]
jae	SHORT $LN11@TT_Get_MM_
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _n$1[ebp]
mov	edx, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR [eax+ecx*8], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _next_coords$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _next_coords$[ebp], eax
jmp	SHORT $LN12@TT_Get_MM_
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR _next_name$[ebp], eax
mov	DWORD PTR _n$1[ebp], 0
jmp	SHORT $LN10@TT_Get_MM_
mov	ecx, DWORD PTR _n$1[ebp]
add	ecx, 1
mov	DWORD PTR _n$1[ebp], ecx
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR _n$1[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN8@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _next_name$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _a$[ebp]
cmp	DWORD PTR [eax+16], 2003265652		
jne	SHORT $LN7@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR [ecx], OFFSET $SG13857
jmp	SHORT $LN6@TT_Get_MM_
mov	edx, DWORD PTR _a$[ebp]
cmp	DWORD PTR [edx+16], 2003072104		
jne	SHORT $LN5@TT_Get_MM_
mov	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR [eax], OFFSET $SG13866
jmp	SHORT $LN6@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
cmp	DWORD PTR [ecx+16], 1869640570		
jne	SHORT $LN3@TT_Get_MM_
mov	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR [edx], OFFSET $SG13875
jmp	SHORT $LN6@TT_Get_MM_
mov	eax, DWORD PTR _a$[ebp]
cmp	DWORD PTR [eax+16], 1936486004		
jne	SHORT $LN6@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR [ecx], OFFSET $SG13884
mov	edx, DWORD PTR _next_name$[ebp]
add	edx, 5
mov	DWORD PTR _next_name$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
add	eax, 24					
mov	DWORD PTR _a$[ebp], eax
jmp	$LN9@TT_Get_MM_
mov	ecx, DWORD PTR _master$[ebp]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN49@TT_Get_MM_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	4
DD	$LN48@TT_Get_MM_
DD	-20					
DD	4
DD	$LN44@TT_Get_MM_
DD	-32					
DD	4
DD	$LN45@TT_Get_MM_
DD	-88					
DD	16					
DD	$LN46@TT_Get_MM_
DD	-116					
DD	20					
DD	$LN47@TT_Get_MM_
DB	97					
DB	120					
DB	105					
DB	115					
DB	95					
DB	114					
DB	101					
DB	99					
DB	0
DB	102					
DB	118					
DB	97					
DB	114					
DB	95					
DB	104					
DB	101					
DB	97					
DB	100					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_TT_Set_Var_Design PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _normalized$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+676], 0
jne	SHORT $LN25@TT_Set_Var
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_TT_Get_MM_Var
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN25@TT_Set_Var
jmp	$Exit$31
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _mmvar$[ebp], ecx
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR _num_coords$[ebp]
cmp	eax, DWORD PTR [edx]
je	SHORT $LN23@TT_Set_Var
push	OFFSET $SG13966
push	1009					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$31
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _normalized$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN22@TT_Set_Var
jmp	$Exit$31
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _a$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN21@TT_Set_Var
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
add	edx, 24					
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax]
jae	$LN19@TT_Set_Var
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
cmp	edx, DWORD PTR [ecx+12]
jg	SHORT $LN17@TT_Set_Var
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
cmp	eax, DWORD PTR [edx+4]
jge	SHORT $LN18@TT_Set_Var
push	OFFSET $SG13975
push	1025					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$31
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _coords$[ebp]
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [edx+ecx*4]
cmp	ecx, DWORD PTR [eax+8]
jge	SHORT $LN16@TT_Set_Var
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
sub	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
neg	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN15@TT_Set_Var
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN14@TT_Set_Var
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [ecx+eax*4], 0
jmp	SHORT $LN15@TT_Set_Var
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
sub	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	$LN20@TT_Set_Var
mov	eax, DWORD PTR _blend$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
jne	SHORT $LN12@TT_Set_Var
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_ft_var_load_avar
add	esp, 4
mov	eax, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [eax+20], 0
je	$LN11@TT_Set_Var
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _av$[ebp], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN10@TT_Set_Var
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _av$[ebp]
add	ecx, 8
mov	DWORD PTR _av$[ebp], ecx
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx]
jae	$LN11@TT_Set_Var
mov	DWORD PTR _j$[ebp], 1
jmp	SHORT $LN7@TT_Set_Var
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _av$[ebp]
movzx	eax, WORD PTR [edx]
cmp	DWORD PTR _j$[ebp], eax
jae	$LN5@TT_Set_Var
mov	ecx, DWORD PTR _av$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _normalized$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
cmp	eax, DWORD PTR [edx+esi*8]
jge	SHORT $LN4@TT_Set_Var
mov	ecx, DWORD PTR _av$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _av$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _j$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx+esi*8-8]
push	edx
mov	eax, DWORD PTR _av$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _av$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _j$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+esi*8-4]
push	ecx
mov	edx, DWORD PTR _av$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR [edx+ecx*4]
sub	ecx, DWORD PTR [eax+esi*8-8]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	edx, DWORD PTR _av$[ebp]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _j$[ebp]
add	eax, DWORD PTR [ecx+edx*8-4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN5@TT_Set_Var
jmp	$LN6@TT_Set_Var
jmp	$LN9@TT_Set_Var
mov	eax, DWORD PTR _normalized$[ebp]
push	eax
mov	ecx, DWORD PTR _num_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_TT_Set_MM_Blend
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _normalized$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _normalized$[ebp], 0
xor	edx, edx
jne	SHORT $Exit$31
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@TT_Set_Var
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN29@TT_Set_Var
DD	-8					
DD	4
DD	$LN28@TT_Set_Var
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Set_MM_Blend PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	BYTE PTR [edx+672], 0
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+676], 0
jne	SHORT $LN26@TT_Set_MM_
push	0
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Get_MM_Var
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@TT_Set_MM_
jmp	$Exit$32
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	DWORD PTR _blend$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _mmvar$[ebp], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _num_coords$[ebp]
cmp	ecx, DWORD PTR [eax]
je	SHORT $LN24@TT_Set_MM_
push	OFFSET $SG13908
push	880					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$32
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN23@TT_Set_MM_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _num_coords$[ebp]
jae	SHORT $LN21@TT_Set_MM_
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _coords$[ebp]
cmp	DWORD PTR [edx+ecx*4], -65536		
jl	SHORT $LN19@TT_Set_MM_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
cmp	DWORD PTR [ecx+eax*4], 65536		
jle	SHORT $LN20@TT_Set_MM_
push	OFFSET $SG13914
push	887					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$32
jmp	SHORT $LN22@TT_Set_MM_
mov	edx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [edx+36], 0
jne	SHORT $LN18@TT_Set_MM_
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_ft_var_load_gvar
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@TT_Set_MM_
jmp	$Exit$32
mov	ecx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [ecx+4], 0
jne	SHORT $LN16@TT_Set_MM_
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_coords$[ebp]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+4], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@TT_Set_MM_
jmp	$Exit$32
mov	DWORD PTR _manageCvt$[ebp], 1
jmp	SHORT $LN14@TT_Set_MM_
mov	DWORD PTR _manageCvt$[ebp], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN13@TT_Set_MM_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _num_coords$[ebp]
jae	SHORT $LN14@TT_Set_MM_
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _coords$[ebp]
mov	eax, DWORD PTR [eax+ecx*4]
cmp	eax, DWORD PTR [esi+edx*4]
je	SHORT $LN10@TT_Set_MM_
mov	DWORD PTR _manageCvt$[ebp], 2
jmp	SHORT $LN14@TT_Set_MM_
jmp	SHORT $LN12@TT_Set_MM_
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _num_coords$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _num_coords$[ebp]
shl	eax, 2
push	eax
mov	ecx, DWORD PTR _coords$[ebp]
push	ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _face$[ebp]
mov	BYTE PTR [ecx+672], 1
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+648], 0
je	SHORT $Exit$32
mov	eax, DWORD PTR _manageCvt$[ebp]
mov	DWORD PTR tv159[ebp], eax
cmp	DWORD PTR tv159[ebp], 1
je	SHORT $LN2@TT_Set_MM_
cmp	DWORD PTR tv159[ebp], 2
je	SHORT $LN5@TT_Set_MM_
jmp	SHORT $Exit$32
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+648], 0
xor	edx, edx
jne	SHORT $LN5@TT_Set_MM_
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+648], 0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_load_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$32
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_vary_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN31@TT_Set_MM_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN30@TT_Set_MM_
DD	-8					
DD	4
DD	$LN29@TT_Set_MM_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_get_device_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+716]
mov	DWORD PTR _record_size$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+704]
add	eax, 8
mov	DWORD PTR _record$[ebp], eax
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN5@tt_face_ge
mov	ecx, DWORD PTR _nn$[ebp]
add	ecx, 1
mov	DWORD PTR _nn$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR [edx+712]
jae	SHORT $LN3@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+720]
mov	eax, DWORD PTR _nn$[ebp]
movzx	ecx, BYTE PTR [edx+eax]
cmp	ecx, DWORD PTR _ppem$[ebp]
jne	SHORT $LN2@tt_face_ge
mov	edx, DWORD PTR _gindex$[ebp]
add	edx, 2
mov	DWORD PTR _gindex$[ebp], edx
mov	eax, DWORD PTR _gindex$[ebp]
cmp	eax, DWORD PTR _record_size$[ebp]
jae	SHORT $LN1@tt_face_ge
mov	ecx, DWORD PTR _nn$[ebp]
imul	ecx, DWORD PTR _record_size$[ebp]
add	ecx, DWORD PTR _record$[ebp]
add	ecx, DWORD PTR _gindex$[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN3@tt_face_ge
jmp	SHORT $LN4@tt_face_ge
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_free_hdmx PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+720]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+720], 0
xor	edx, edx
jne	SHORT $LN3@tt_face_fr
mov	eax, DWORD PTR _face$[ebp]
add	eax, 704				
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_load_hdmx PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _table_size$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1751412088				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@tt_face_lo
cmp	DWORD PTR _table_size$[ebp], 8
jae	SHORT $LN11@tt_face_lo
xor	eax, eax
jmp	$LN12@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 704				
push	ecx
mov	edx, DWORD PTR _table_size$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@tt_face_lo
jmp	$Exit$18
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+704]
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, DWORD PTR _table_size$[ebp]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movzx	ecx, dx
mov	DWORD PTR _version$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	DWORD PTR _num_records$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-4]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-4]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
or	ecx, eax
mov	DWORD PTR _record_size$[ebp], ecx
cmp	DWORD PTR _record_size$[ebp], -65536	
jb	SHORT $LN8@tt_face_lo
mov	ecx, DWORD PTR _record_size$[ebp]
and	ecx, 65535				
mov	DWORD PTR _record_size$[ebp], ecx
cmp	DWORD PTR _version$[ebp], 0
jne	SHORT $LN6@tt_face_lo
cmp	DWORD PTR _num_records$[ebp], 255	
ja	SHORT $LN6@tt_face_lo
cmp	DWORD PTR _record_size$[ebp], 65537	
ja	SHORT $LN6@tt_face_lo
cmp	DWORD PTR _record_size$[ebp], 4
jae	SHORT $LN7@tt_face_lo
push	OFFSET $SG9245
push	530					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail$19
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_records$[ebp]
push	eax
push	0
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+720], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@tt_face_lo
jmp	SHORT $Fail$19
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _num_records$[ebp]
jae	SHORT $LN2@tt_face_lo
mov	edx, DWORD PTR _p$[ebp]
add	edx, DWORD PTR _record_size$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN1@tt_face_lo
jmp	SHORT $LN2@tt_face_lo
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+720]
mov	edx, DWORD PTR _nn$[ebp]
mov	esi, DWORD PTR _p$[ebp]
mov	cl, BYTE PTR [esi+ecx]
mov	BYTE PTR [eax+edx], cl
mov	edx, DWORD PTR _p$[ebp]
add	edx, DWORD PTR _record_size$[ebp]
mov	DWORD PTR _p$[ebp], edx
jmp	SHORT $LN3@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _nn$[ebp]
mov	DWORD PTR [eax+712], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _table_size$[ebp]
mov	DWORD PTR [edx+708], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _record_size$[ebp]
mov	DWORD PTR [ecx+716], edx
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN12@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
add	eax, 704				
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+708], 0
jmp	SHORT $Exit$18
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN17@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	2
DD	$LN16@tt_face_lo
DD	-8					
DD	4
DD	$LN14@tt_face_lo
DD	-36					
DD	4
DD	$LN15@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	115					
DB	105					
DB	122					
DB	101					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_load_prep PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN14@tt_face_lo
push	OFFSET $SG9172
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN15@tt_face_lo
mov	esi, esp
lea	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1886545264				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+640], 0
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+636], 0
mov	DWORD PTR _error$[ebp], 0
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN9@tt_face_lo
push	OFFSET $SG9184
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN10@tt_face_lo
jmp	SHORT $Exit$21
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _table_len$[ebp]
mov	DWORD PTR [ecx+636], edx
mov	eax, DWORD PTR _face$[ebp]
add	eax, 640				
push	eax
mov	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@tt_face_lo
jmp	SHORT $Exit$21
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN3@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+636]
push	eax
push	OFFSET $SG9194
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN19@tt_face_lo
DD	-12					
DD	4
DD	$LN18@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_tt_face_load_fpgm PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN14@tt_face_lo
push	OFFSET $SG9138
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN15@tt_face_lo
mov	esi, esp
lea	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1718642541				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+632], 0
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+628], 0
mov	DWORD PTR _error$[ebp], 0
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN9@tt_face_lo
push	OFFSET $SG9150
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN10@tt_face_lo
jmp	SHORT $Exit$21
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _table_len$[ebp]
mov	DWORD PTR [ecx+628], edx
mov	eax, DWORD PTR _face$[ebp]
add	eax, 632				
push	eax
mov	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@tt_face_lo
jmp	SHORT $Exit$21
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN3@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+628]
push	eax
push	OFFSET $SG9160
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN19@tt_face_lo
DD	-12					
DD	4
DD	$LN18@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_tt_face_load_cvt PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN18@tt_face_lo
push	OFFSET $SG9096
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN19@tt_face_lo
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1668707360				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@tt_face_lo
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN13@tt_face_lo
push	OFFSET $SG9107
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN14@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+644], 0
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+648], 0
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$26
mov	eax, DWORD PTR _table_len$[ebp]
shr	eax, 1
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+644], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+644]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+648], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@tt_face_lo
jmp	$Exit$26
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+644]
shl	eax, 1
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@tt_face_lo
jmp	$Exit$26
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
mov	DWORD PTR _cur$2[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+644]
mov	eax, DWORD PTR _cur$2[ebp]
lea	ecx, DWORD PTR [eax+edx*2]
mov	DWORD PTR _limit$1[ebp], ecx
jmp	SHORT $LN8@tt_face_lo
mov	edx, DWORD PTR _cur$2[ebp]
add	edx, 2
mov	DWORD PTR _cur$2[ebp], edx
mov	eax, DWORD PTR _cur$2[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	SHORT $LN6@tt_face_lo
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
mov	edx, DWORD PTR _cur$2[ebp]
mov	WORD PTR [edx], ax
jmp	SHORT $LN7@tt_face_lo
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN4@tt_face_lo
push	OFFSET $SG9125
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN5@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, BYTE PTR [ecx+672]
test	edx, edx
je	SHORT $Exit$26
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_vary_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN24@tt_face_lo
DD	-8					
DD	4
DD	$LN22@tt_face_lo
DD	-24					
DD	4
DD	$LN23@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_done_loca PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 700				
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+696], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_get_location PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _pos2$[ebp], 0
mov	eax, DWORD PTR _pos2$[ebp]
mov	DWORD PTR _pos1$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _gindex$[ebp]
cmp	edx, DWORD PTR [ecx+696]
jae	$LN17@tt_face_ge
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+210]
test	ecx, ecx
je	$LN16@tt_face_ge
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+700]
mov	ecx, DWORD PTR _gindex$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+696]
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+700]
lea	ecx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _p_limit$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-4]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-4]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
or	eax, edx
mov	DWORD PTR _pos1$[ebp], eax
mov	eax, DWORD PTR _pos1$[ebp]
mov	DWORD PTR _pos2$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 4
cmp	ecx, DWORD PTR _p_limit$[ebp]
ja	SHORT $LN15@tt_face_ge
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-4]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-4]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
or	eax, edx
mov	DWORD PTR _pos2$[ebp], eax
jmp	$LN17@tt_face_ge
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+700]
mov	edx, DWORD PTR _gindex$[ebp]
lea	eax, DWORD PTR [ecx+edx*2]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+696]
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+700]
lea	edx, DWORD PTR [ecx+edx*2]
mov	DWORD PTR _p_limit$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movzx	eax, cx
mov	DWORD PTR _pos1$[ebp], eax
mov	ecx, DWORD PTR _pos1$[ebp]
mov	DWORD PTR _pos2$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
cmp	edx, DWORD PTR _p_limit$[ebp]
ja	SHORT $LN13@tt_face_ge
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movzx	eax, cx
mov	DWORD PTR _pos2$[ebp], eax
mov	ecx, DWORD PTR _pos1$[ebp]
shl	ecx, 1
mov	DWORD PTR _pos1$[ebp], ecx
mov	edx, DWORD PTR _pos2$[ebp]
shl	edx, 1
mov	DWORD PTR _pos2$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _pos1$[ebp]
cmp	ecx, DWORD PTR [eax+668]
jbe	SHORT $LN12@tt_face_ge
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN10@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+668]
push	edx
mov	eax, DWORD PTR _gindex$[ebp]
push	eax
mov	ecx, DWORD PTR _pos1$[ebp]
push	ecx
push	OFFSET $SG9068
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN11@tt_face_ge
mov	eax, DWORD PTR _asize$[ebp]
mov	DWORD PTR [eax], 0
xor	eax, eax
jmp	SHORT $LN18@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _pos2$[ebp]
cmp	edx, DWORD PTR [ecx+668]
jbe	SHORT $LN7@tt_face_ge
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN5@tt_face_ge
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+668]
push	eax
mov	ecx, DWORD PTR _gindex$[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _pos2$[ebp]
push	edx
push	OFFSET $SG9074
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN6@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+668]
mov	DWORD PTR _pos2$[ebp], edx
mov	eax, DWORD PTR _pos2$[ebp]
cmp	eax, DWORD PTR _pos1$[ebp]
jb	SHORT $LN2@tt_face_ge
mov	ecx, DWORD PTR _pos2$[ebp]
sub	ecx, DWORD PTR _pos1$[ebp]
mov	edx, DWORD PTR _asize$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN1@tt_face_ge
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+668]
sub	ecx, DWORD PTR _pos1$[ebp]
mov	edx, DWORD PTR _asize$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _pos1$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_load_loca PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _face$[ebp]
add	eax, 668				
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1735162214				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 142				
jne	SHORT $LN41@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+668], 0
jmp	SHORT $LN38@tt_face_lo
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN38@tt_face_lo
jmp	$Exit$47
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN37@tt_face_lo
push	OFFSET $SG8956
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN38@tt_face_lo
mov	esi, esp
lea	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1819239265				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN34@tt_face_lo
push	OFFSET $SG8963
push	84					
push	144					
call	_FT_Throw
add	esp, 12					
or	eax, 144				
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$47
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+210]
test	ecx, ecx
je	SHORT $LN33@tt_face_lo
mov	DWORD PTR _shift$[ebp], 2
cmp	DWORD PTR _table_len$[ebp], 262144	
jb	SHORT $LN32@tt_face_lo
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN30@tt_face_lo
push	OFFSET $SG8970
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN31@tt_face_lo
push	OFFSET $SG8971
push	95					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$47
mov	edx, DWORD PTR _table_len$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shr	edx, cl
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+696], edx
jmp	SHORT $LN27@tt_face_lo
mov	DWORD PTR _shift$[ebp], 1
cmp	DWORD PTR _table_len$[ebp], 131072	
jb	SHORT $LN26@tt_face_lo
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN24@tt_face_lo
push	OFFSET $SG8978
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN25@tt_face_lo
push	OFFSET $SG8979
push	107					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$47
mov	edx, DWORD PTR _table_len$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shr	edx, cl
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+696], edx
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+16]
add	edx, 1
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+696], edx
je	$LN21@tt_face_lo
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN19@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+696]
sub	eax, 1
push	eax
push	OFFSET $SG8986
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN20@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [edx+696]
cmp	ecx, DWORD PTR [eax+16]
ja	$LN21@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+16]
add	eax, 1
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
mov	DWORD PTR _new_loca_len$6[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	DWORD PTR _entry$5[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+152]
shl	ecx, 4
add	ecx, DWORD PTR _entry$5[ebp]
mov	DWORD PTR _limit$4[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _pos$3[ebp], eax
mov	DWORD PTR _dist$2[ebp], 2147483647	
jmp	SHORT $LN15@tt_face_lo
mov	eax, DWORD PTR _entry$5[ebp]
add	eax, 16					
mov	DWORD PTR _entry$5[ebp], eax
mov	ecx, DWORD PTR _entry$5[ebp]
cmp	ecx, DWORD PTR _limit$4[ebp]
jae	SHORT $LN13@tt_face_lo
mov	edx, DWORD PTR _entry$5[ebp]
mov	eax, DWORD PTR [edx+8]
sub	eax, DWORD PTR _pos$3[ebp]
mov	DWORD PTR _diff$1[ebp], eax
cmp	DWORD PTR _diff$1[ebp], 0
jle	SHORT $LN12@tt_face_lo
mov	ecx, DWORD PTR _diff$1[ebp]
cmp	ecx, DWORD PTR _dist$2[ebp]
jge	SHORT $LN12@tt_face_lo
mov	edx, DWORD PTR _diff$1[ebp]
mov	DWORD PTR _dist$2[ebp], edx
jmp	SHORT $LN14@tt_face_lo
mov	eax, DWORD PTR _entry$5[ebp]
cmp	eax, DWORD PTR _limit$4[ebp]
jne	SHORT $LN11@tt_face_lo
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+4]
sub	edx, DWORD PTR _pos$3[ebp]
mov	DWORD PTR _dist$2[ebp], edx
mov	eax, DWORD PTR _new_loca_len$6[ebp]
cmp	eax, DWORD PTR _dist$2[ebp]
jg	SHORT $LN21@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+16]
add	edx, 1
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+696], edx
mov	ecx, DWORD PTR _new_loca_len$6[ebp]
mov	DWORD PTR _table_len$[ebp], ecx
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN8@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+696]
push	edx
push	OFFSET $SG9006
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN9@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 700				
push	ecx
mov	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@tt_face_lo
jmp	SHORT $Exit$47
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN3@tt_face_lo
push	OFFSET $SG9014
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN46@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN45@tt_face_lo
DD	-12					
DD	4
DD	$LN44@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_TT_Load_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 228				
push	edi
lea	edi, DWORD PTR [ebp-228]
mov	ecx, 57					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN26@TT_Load_Gl
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	OFFSET $SG10377
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN27@TT_Load_Gl
mov	ecx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [ecx+112], -1
je	$LN23@TT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 8
jne	$LN23@TT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_load_sbit_image
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN23@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	$LN21@TT_Load_Gl
push	1
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
lea	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_tt_loader_init
add	esp, 20					
push	1
push	0
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
lea	eax, DWORD PTR _loader$[ebp]
push	eax
call	_load_truetype_glyph
add	esp, 16					
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp+60]
mov	DWORD PTR [ecx+56], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _loader$[ebp+180]
mov	DWORD PTR [eax+60], ecx
mov	edx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [edx+40], 0
jne	SHORT $LN20@TT_Load_Gl
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+56], 0
je	SHORT $LN20@TT_Load_Gl
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+56]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+40], eax
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+52], 0
jne	SHORT $LN21@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [ecx+60], 0
je	SHORT $LN21@TT_Load_Gl
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+60]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+52], eax
xor	eax, eax
jmp	$LN28@TT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1
jne	SHORT $LN18@TT_Load_Gl
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, BYTE PTR [eax+108]
test	ecx, ecx
jne	SHORT $LN18@TT_Load_Gl
push	OFFSET $SG10390
push	2401					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN28@TT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 16384				
je	SHORT $LN17@TT_Load_Gl
push	OFFSET $SG10392
push	2404					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN28@TT_Load_Gl
push	0
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
lea	eax, DWORD PTR _loader$[ebp]
push	eax
call	_tt_loader_init
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@TT_Load_Gl
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN28@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+72], 1869968492		
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+128], 0
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], 0
push	0
push	0
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
lea	edx, DWORD PTR _loader$[ebp]
push	edx
call	_load_truetype_glyph
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN15@TT_Load_Gl
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+72], 1668246896		
jne	SHORT $LN14@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp+12]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR [ecx+128], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp+12]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR [ecx+132], eax
jmp	SHORT $LN13@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp+12]
add	ecx, 20					
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
mov	eax, DWORD PTR [ecx]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR [ecx+8]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR [ecx+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [edx+124]
and	eax, -513				
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+124], eax
cmp	DWORD PTR _loader$[ebp+68], 0
je	SHORT $LN13@TT_Load_Gl
push	0
mov	edx, DWORD PTR _loader$[ebp+68]
neg	edx
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Translate
add	esp, 12					
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 2
jne	$LN11@TT_Load_Gl
mov	edx, DWORD PTR _loader$[ebp+160]
movzx	eax, BYTE PTR [edx+337]
test	eax, eax
je	SHORT $LN10@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp+160]
mov	edx, DWORD PTR [ecx+340]
mov	DWORD PTR tv204[ebp], edx
cmp	DWORD PTR tv204[ebp], 5
ja	SHORT $LN3@TT_Load_Gl
mov	eax, DWORD PTR tv204[ebp]
jmp	DWORD PTR $LN33@TT_Load_Gl[eax*4]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 32					
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN8@TT_Load_Gl
jmp	SHORT $LN8@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 48					
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN8@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 16					
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN8@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 8
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN11@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 8
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
lea	edx, DWORD PTR _loader$[ebp]
push	edx
call	_compute_glyph_metrics
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1
jne	SHORT $LN1@TT_Load_Gl
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, WORD PTR [ecx+14]
cmp	edx, 24					
jge	SHORT $LN1@TT_Load_Gl
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+124]
or	ecx, 256				
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+124], ecx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN32@TT_Load_Gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 228				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN31@TT_Load_Gl
DD	-220					
DD	208					
DD	$LN30@TT_Load_Gl
DB	108					
DB	111					
DB	97					
DB	100					
DB	101					
DB	114					
DB	0
npad	1
DD	$LN7@TT_Load_Gl
DD	$LN6@TT_Load_Gl
DD	$LN3@TT_Load_Gl
DD	$LN3@TT_Load_Gl
DD	$LN5@TT_Load_Gl
DD	$LN4@TT_Load_Gl
ENDP
_TT_Get_VMetrics PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN12@TT_Get_VMe
mov	esi, esp
mov	edx, DWORD PTR _ah$[ebp]
push	edx
mov	eax, DWORD PTR _tsb$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
push	1
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	edx, DWORD PTR [ecx+112]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN8@TT_Get_VMe
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+364]
cmp	ecx, 65535				
je	SHORT $LN10@TT_Get_VMe
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
sub	eax, DWORD PTR _yMax$[ebp]
mov	ecx, DWORD PTR _tsb$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+436]
sub	eax, edx
mov	ecx, DWORD PTR _ah$[ebp]
mov	WORD PTR [ecx], ax
jmp	SHORT $LN8@TT_Get_VMe
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+220]
sub	eax, DWORD PTR _yMax$[ebp]
mov	ecx, DWORD PTR _tsb$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+220]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+222]
sub	eax, edx
mov	ecx, DWORD PTR _ah$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN7@TT_Get_VMe
mov	ecx, DWORD PTR _ah$[ebp]
movzx	edx, WORD PTR [ecx]
push	edx
push	OFFSET $SG9481
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN8@TT_Get_VMe
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN3@TT_Get_VMe
mov	eax, DWORD PTR _tsb$[ebp]
movsx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG9486
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@TT_Get_VMe
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Get_HMetrics PROC
push	ebp
mov	ebp, esp
push	esi
mov	esi, esp
mov	eax, DWORD PTR _aw$[ebp]
push	eax
mov	ecx, DWORD PTR _lsb$[ebp]
push	ecx
mov	edx, DWORD PTR _idx$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	eax, DWORD PTR [edx+112]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN7@TT_Get_HMe
mov	eax, DWORD PTR _aw$[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG9453
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN8@TT_Get_HMe
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN3@TT_Get_HMe
mov	edx, DWORD PTR _lsb$[ebp]
movsx	eax, WORD PTR [edx]
push	eax
push	OFFSET $SG9458
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@TT_Get_HMe
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Init_Glyph_Loading PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+512], OFFSET _TT_Access_Glyph_Frame
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+520], OFFSET _TT_Load_Glyph_Header
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+524], OFFSET _TT_Load_Simple_Glyph
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+528], OFFSET _TT_Load_Composite_Glyph
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+516], OFFSET _TT_Forget_Glyph_Frame
pop	ebp
ret	0
ENDP
_TT_RunIns PROC
push	ebp
mov	ebp, esp
sub	esp, 148				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-148]
mov	ecx, 37					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _ins_counter$[ebp], 0
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+256], 0
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+216]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+218]
cmp	edx, ecx
je	SHORT $LN220@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+592], OFFSET _Current_Ppem_Stretched
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+596], OFFSET _Read_CVT_Stretched
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+600], OFFSET _Write_CVT_Stretched
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+604], OFFSET _Move_CVT_Stretched
jmp	SHORT $LN219@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+592], OFFSET _Current_Ppem
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+596], OFFSET _Read_CVT
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+600], OFFSET _Write_CVT
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+604], OFFSET _Move_CVT
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Funcs
add	esp, 4
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+312]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Round
add	esp, 8
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+356]
mov	ecx, DWORD PTR _exc$[ebp]
mov	dl, BYTE PTR [edx+eax]
mov	BYTE PTR [ecx+368], dl
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 7
jl	SHORT $LN214@TT_RunIns
push	OFFSET $SG13066
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN215@TT_RunIns
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 7
jl	SHORT $LN210@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
mov	ecx, DWORD PTR _opcode_name[eax*4]
push	ecx
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN211@TT_RunIns
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 7
jl	SHORT $LN206@TT_RunIns
push	OFFSET $SG13075
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN207@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
movsx	edx, BYTE PTR _opcode_length[ecx]
mov	DWORD PTR tv143[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv143[ebp]
mov	DWORD PTR [eax+372], ecx
cmp	DWORD PTR tv143[ebp], 0
jge	SHORT $LN203@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
cmp	eax, DWORD PTR [ecx+364]
jl	SHORT $LN202@TT_RunIns
jmp	$LErrorCodeOverflow_$248
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+356]
movzx	eax, BYTE PTR [edx+eax+1]
mov	ecx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [ecx+372]
mov	edx, 2
sub	edx, eax
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+372], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+372]
mov	ecx, DWORD PTR _exc$[ebp]
cmp	edx, DWORD PTR [ecx+364]
jle	SHORT $LN201@TT_RunIns
jmp	$LErrorCodeOverflow_$248
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
movzx	ecx, BYTE PTR _Pop_Push_Count[eax]
sar	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+16]
sub	eax, ecx
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+28], 0
jge	$LN200@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN199@TT_RunIns
push	OFFSET $SG13082
push	8289					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LErrorLabel_$249
xor	eax, eax
mov	WORD PTR _i$[ebp], ax
jmp	SHORT $LN198@TT_RunIns
mov	cx, WORD PTR _i$[ebp]
add	cx, 1
mov	WORD PTR _i$[ebp], cx
movzx	edx, WORD PTR _i$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
movzx	eax, BYTE PTR _Pop_Push_Count[ecx]
sar	eax, 4
cmp	edx, eax
jge	SHORT $LN196@TT_RunIns
movzx	ecx, WORD PTR _i$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	DWORD PTR [eax+ecx*4], 0
jmp	SHORT $LN197@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+28], 0
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
movzx	ecx, BYTE PTR _Pop_Push_Count[eax]
and	ecx, 15					
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+32], ecx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+32]
cmp	eax, DWORD PTR [edx+20]
jbe	SHORT $LN195@TT_RunIns
push	OFFSET $SG13088
push	8306					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LErrorLabel_$249
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
lea	edx, DWORD PTR [ecx+edx*4]
mov	DWORD PTR _args$20[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	cl, BYTE PTR [eax+368]
mov	BYTE PTR _opcode$19[ebp], cl
movzx	edx, BYTE PTR _opcode$19[ebp]
mov	DWORD PTR tv224[ebp], edx
cmp	DWORD PTR tv224[ebp], 143		
ja	$LN30@TT_RunIns
mov	eax, DWORD PTR tv224[ebp]
jmp	DWORD PTR $LN247@TT_RunIns[eax*4]
movzx	ecx, BYTE PTR _opcode$19[ebp]
and	ecx, 1
shl	ecx, 14					
mov	WORD PTR _AA$18[ebp], cx
movsx	edx, WORD PTR _AA$18[ebp]
xor	edx, 16384				
mov	WORD PTR _BB$17[ebp], dx
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 4
jge	SHORT $LN190@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _AA$18[ebp]
mov	WORD PTR [ecx+294], dx
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _BB$17[ebp]
mov	WORD PTR [eax+296], cx
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _AA$18[ebp]
mov	WORD PTR [edx+290], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _BB$17[ebp]
mov	WORD PTR [ecx+292], dx
movzx	eax, BYTE PTR _opcode$19[ebp]
and	eax, 2
jne	SHORT $LN188@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _AA$18[ebp]
mov	WORD PTR [ecx+298], dx
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _BB$17[ebp]
mov	WORD PTR [eax+300], cx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 294				
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
movzx	eax, WORD PTR [edx+ecx]
push	eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
movzx	eax, WORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SxVTL
add	esp, 20					
movzx	edx, al
test	edx, edx
jne	SHORT $LN186@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+294]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+290], ecx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 298				
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
movzx	ecx, WORD PTR [eax+edx]
push	ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
movzx	ecx, WORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SxVTL
add	esp, 20					
movzx	eax, al
test	eax, eax
jne	SHORT $LN184@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _S$16[ebp], cx
movsx	edx, WORD PTR _S$16[ebp]
mov	DWORD PTR _Y$14[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _S$16[ebp], ax
movsx	ecx, WORD PTR _S$16[ebp]
mov	DWORD PTR _X$15[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 294				
push	edx
mov	eax, DWORD PTR _Y$14[ebp]
push	eax
mov	ecx, DWORD PTR _X$15[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Normalize
add	esp, 16					
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+294]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+290], ecx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _S$13[ebp], ax
movsx	ecx, WORD PTR _S$13[ebp]
mov	DWORD PTR _Y$11[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _S$13[ebp], dx
movsx	eax, WORD PTR _S$13[ebp]
mov	DWORD PTR _X$12[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 298				
push	ecx
mov	edx, DWORD PTR _Y$11[ebp]
push	edx
mov	eax, DWORD PTR _X$12[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Normalize
add	esp, 16					
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+ecx], eax
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+296]
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], edx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], edx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+294]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+298], edx
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ISECT
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _args$20[ebp]
mov	dx, WORD PTR [ecx+edx]
mov	WORD PTR [eax+284], dx
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$20[ebp]
mov	cx, WORD PTR [eax+ecx]
mov	WORD PTR [edx+286], cx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+288], ax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SZP0
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SZP1
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_SZP2
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SZPS
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jge	SHORT $LN169@TT_RunIns
push	OFFSET $SG13143
push	8462					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN168@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+304], eax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+312], 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_To_Grid
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_To_Half_Grid
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+308], eax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_ELSE
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	SHORT $LN162@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 0
jne	SHORT $LN162@TT_RunIns
push	OFFSET $SG13153
push	8482					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	ecx, DWORD PTR _args$20[ebp]
add	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+360], edx
mov	ecx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [ecx+360], 0
jl	SHORT $LN160@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+428], 0
jle	SHORT $LN161@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
sub	ecx, 1
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+436]
mov	ecx, DWORD PTR [eax+ecx+12]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
cmp	eax, DWORD PTR [ecx+8]
jle	SHORT $LN161@TT_RunIns
push	OFFSET $SG13156
push	8482					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+320], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+324], eax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+260]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+328], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+32], 0
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _L$10[ebp], edx
mov	eax, 4
shl	eax, 0
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR _L$10[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _L$9[ebp], edx
cmp	DWORD PTR _L$9[ebp], 0
jle	SHORT $LN149@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _L$9[ebp]
cmp	ecx, DWORD PTR [eax+28]
jle	SHORT $LN150@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN148@TT_RunIns
push	OFFSET $SG13175
push	8518					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], 0
jmp	SHORT $LN147@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
sub	eax, DWORD PTR _L$9[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	ecx, 4
imul	ecx, ecx, 0
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [edx+eax*4]
mov	DWORD PTR [esi+ecx], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MINDEX
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ALIGNPTS
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_UTP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_LOOPCALL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_CALL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_FDEF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ENDF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_MDAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_IUP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_SHP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SHC
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SHZ
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_SHPIX
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_IP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MSIRP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ALIGNRP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+312], 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_To_Double_Grid
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MIAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_NPUSHB
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_NPUSHW
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$8[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+468]
cmp	DWORD PTR _I$8[ebp], edx
jb	SHORT $LN124@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN123@TT_RunIns
jmp	SHORT $Set_Invalid_Ref$250
jmp	SHORT $LN122@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+472]
mov	eax, DWORD PTR _I$8[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [ecx+eax*4], edx
jmp	$LN193@TT_RunIns
push	OFFSET $SG13208
push	8617					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _I$7[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+468]
cmp	DWORD PTR _I$7[ebp], ecx
jb	SHORT $LN120@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN119@TT_RunIns
jmp	SHORT $Set_Invalid_Ref$250
jmp	SHORT $LN118@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+edx], 0
jmp	SHORT $LN117@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+472]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _I$7[ebp]
mov	edx, DWORD PTR [edx+esi*4]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$6[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _I$6[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN115@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN114@TT_RunIns
jmp	$Set_Invalid_Ref$250
jmp	SHORT $LN113@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	esi, esp
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _I$6[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+600]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$5[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _I$5[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN111@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN110@TT_RunIns
jmp	$Set_Invalid_Ref$250
jmp	SHORT $LN109@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], 0
jmp	SHORT $LN108@TT_RunIns
mov	esi, esp
mov	edx, DWORD PTR _I$5[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+596]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_GC
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SCFS
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MD
add	esp, 8
jmp	$LN193@TT_RunIns
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+592]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, 4
imul	ecx, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	esi, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+592]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+316], 1
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+316], 0
jmp	$LN193@TT_RunIns
push	OFFSET $SG13243
push	8663					
push	135					
call	_FT_Throw
add	esp, 12					
or	eax, 135				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jge	SHORT $LN223@TT_RunIns
mov	DWORD PTR tv589[ebp], 1
jmp	SHORT $LN224@TT_RunIns
mov	DWORD PTR tv589[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv589[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jg	SHORT $LN225@TT_RunIns
mov	DWORD PTR tv597[ebp], 1
jmp	SHORT $LN226@TT_RunIns
mov	DWORD PTR tv597[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv597[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jle	SHORT $LN227@TT_RunIns
mov	DWORD PTR tv605[ebp], 1
jmp	SHORT $LN228@TT_RunIns
mov	DWORD PTR tv605[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv605[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jl	SHORT $LN229@TT_RunIns
mov	DWORD PTR tv613[ebp], 1
jmp	SHORT $LN230@TT_RunIns
mov	DWORD PTR tv613[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv613[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jne	SHORT $LN231@TT_RunIns
mov	DWORD PTR tv621[ebp], 1
jmp	SHORT $LN232@TT_RunIns
mov	DWORD PTR tv621[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv621[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
je	SHORT $LN233@TT_RunIns
mov	DWORD PTR tv629[ebp], 1
jmp	SHORT $LN234@TT_RunIns
mov	DWORD PTR tv629[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv629[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	esi, esp
push	0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+568]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
and	eax, 127				
cmp	eax, 64					
jne	SHORT $LN235@TT_RunIns
mov	DWORD PTR tv641[ebp], 1
jmp	SHORT $LN236@TT_RunIns
mov	DWORD PTR tv641[ebp], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR tv641[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	esi, esp
push	0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
and	eax, 127				
jne	SHORT $LN237@TT_RunIns
mov	DWORD PTR tv653[ebp], 1
jmp	SHORT $LN238@TT_RunIns
mov	DWORD PTR tv653[ebp], 0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR tv653[ebp]
mov	DWORD PTR [ecx+eax], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_IF
add	esp, 8
jmp	$LN193@TT_RunIns
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
je	SHORT $LN239@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
je	SHORT $LN239@TT_RunIns
mov	DWORD PTR tv664[ebp], 1
jmp	SHORT $LN240@TT_RunIns
mov	DWORD PTR tv664[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv664[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
jne	SHORT $LN241@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
jne	SHORT $LN241@TT_RunIns
mov	DWORD PTR tv673[ebp], 0
jmp	SHORT $LN242@TT_RunIns
mov	DWORD PTR tv673[ebp], 1
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv673[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
jne	SHORT $LN243@TT_RunIns
mov	DWORD PTR tv679[ebp], 1
jmp	SHORT $LN244@TT_RunIns
mov	DWORD PTR tv679[ebp], 0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR tv679[ebp]
mov	DWORD PTR [ecx+eax], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_DELTAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+332], ax
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 6
jbe	SHORT $LN83@TT_RunIns
push	OFFSET $SG13263
push	8727					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN82@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+334], ax
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+edx]
mov	ecx, DWORD PTR _args$20[ebp]
add	edx, DWORD PTR [ecx+eax]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+edx]
sub	edx, DWORD PTR [esi+eax]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	SHORT $LN78@TT_RunIns
push	OFFSET $SG13270
push	8739					
push	133					
call	_FT_Throw
add	esp, 12					
or	eax, 133				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN77@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
push	64					
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_FT_MulDiv_No_Round
add	esp, 12					
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
push	64					
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
jge	SHORT $LN245@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
neg	edx
mov	DWORD PTR tv750[ebp], edx
jmp	SHORT $LN246@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv750[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv750[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
neg	edx
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, -64				
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+eax], ecx
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
add	eax, 63					
and	eax, -64				
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
mov	esi, esp
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4-152]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+568]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4-168]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Round_None
add	esp, 12					
mov	edx, 4
imul	ecx, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$4[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _I$4[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN68@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN67@TT_RunIns
jmp	$Set_Invalid_Ref$250
jmp	SHORT $LN66@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+260]
push	eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+384]
mov	ecx, DWORD PTR _I$4[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_DELTAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_DELTAC
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
push	16384					
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_SetSuperRound
add	esp, 12					
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+312], 6
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_Super
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
push	11585					
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_SetSuperRound
add	esp, 12					
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 7
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_Super_45
jmp	$LN193@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
je	$LN60@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
jne	SHORT $LN59@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN59@TT_RunIns
push	OFFSET $SG13298
push	8800					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
mov	edx, DWORD PTR _args$20[ebp]
add	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], eax
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+360], 0
jl	SHORT $LN57@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+428], 0
jle	SHORT $LN58@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+428]
sub	edx, 1
shl	edx, 4
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+436]
mov	edx, DWORD PTR [ecx+edx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
cmp	ecx, DWORD PTR [edx+8]
jle	SHORT $LN58@TT_RunIns
push	OFFSET $SG13301
push	8800					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+376], 0
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	$LN55@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	SHORT $LN54@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 0
jne	SHORT $LN54@TT_RunIns
push	OFFSET $SG13305
push	8804					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	ecx, DWORD PTR _args$20[ebp]
add	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+360], edx
mov	ecx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [ecx+360], 0
jl	SHORT $LN52@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+428], 0
jle	SHORT $LN53@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
sub	ecx, 1
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+436]
mov	ecx, DWORD PTR [eax+ecx+12]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
cmp	eax, DWORD PTR [ecx+8]
jle	SHORT $LN53@TT_RunIns
push	OFFSET $SG13308
push	8804					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 5
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_None
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+312], 4
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_Up_To_Grid
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 3
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_Down_To_Grid
jmp	$LN193@TT_RunIns
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_FLIPPT
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_FLIPRGON
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_FLIPRGOFF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SCANCTRL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SDPVTL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_GETINFO
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_IDEF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_ROLL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [eax+edx]
cmp	edx, DWORD PTR [esi+ecx]
jle	SHORT $LN36@TT_RunIns
mov	eax, 4
shl	eax, 0
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [edx+ecx]
cmp	ecx, DWORD PTR [esi+eax]
jge	SHORT $LN34@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SCANTYPE
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_INSTCTRL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 224				
jl	SHORT $LN29@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_MIRP
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 192				
jl	SHORT $LN27@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_MDRP
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 184				
jl	SHORT $LN25@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_PUSHW
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 176				
jl	SHORT $LN23@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_PUSHB
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_UNKNOWN
add	esp, 8
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+12], 0
je	$LN21@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR tv980[ebp], ecx
cmp	DWORD PTR tv980[ebp], 128		
je	SHORT $LN18@TT_RunIns
jmp	$LN11@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+416]
mov	DWORD PTR _def$3[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
imul	edx, DWORD PTR [ecx+408], 24
add	edx, DWORD PTR _def$3[ebp]
mov	DWORD PTR _limit$2[ebp], edx
jmp	SHORT $LN17@TT_RunIns
mov	eax, DWORD PTR _def$3[ebp]
add	eax, 24					
mov	DWORD PTR _def$3[ebp], eax
mov	ecx, DWORD PTR _def$3[ebp]
cmp	ecx, DWORD PTR _limit$2[ebp]
jae	$LN15@TT_RunIns
mov	edx, DWORD PTR _def$3[ebp]
movzx	eax, BYTE PTR [edx+16]
test	eax, eax
je	$LN14@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
mov	eax, DWORD PTR _def$3[ebp]
movzx	ecx, BYTE PTR [eax+12]
cmp	edx, ecx
jne	$LN14@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+428]
cmp	ecx, DWORD PTR [eax+432]
jl	SHORT $LN13@TT_RunIns
push	OFFSET $SG13357
push	8927					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LErrorLabel_$249
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+436]
mov	DWORD PTR _callrec$1[ebp], ecx
mov	eax, DWORD PTR _callrec$1[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 1
mov	edx, DWORD PTR _callrec$1[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _callrec$1[ebp]
mov	DWORD PTR [eax+8], 1
mov	ecx, DWORD PTR _callrec$1[ebp]
mov	edx, DWORD PTR _def$3[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _def$3[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _def$3[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_Goto_CodeRange
add	esp, 12					
movzx	edx, al
cmp	edx, 1
jne	SHORT $LN12@TT_RunIns
jmp	$LErrorLabel_$249
jmp	$LSuiteLabel_$251
jmp	$LN16@TT_RunIns
push	OFFSET $SG13360
push	8946					
push	128					
call	_FT_Throw
add	esp, 12					
or	eax, 128				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LErrorLabel_$249
jmp	$LErrorLabel_$249
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+376]
test	eax, eax
je	SHORT $LN10@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+372]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], edx
mov	edx, DWORD PTR _ins_counter$[ebp]
add	edx, 1
mov	DWORD PTR _ins_counter$[ebp], edx
cmp	DWORD PTR _ins_counter$[ebp], 1000000	
jle	SHORT $LSuiteLabel_$251
push	OFFSET $SG13364
push	8972					
push	139					
call	_FT_Throw
add	esp, 12					
or	eax, 139				
jmp	$LN221@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+360]
cmp	edx, DWORD PTR [ecx+364]
jl	SHORT $LN217@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+428], 0
jle	SHORT $LN7@TT_RunIns
push	OFFSET $SG13367
push	8979					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LErrorLabel_$249
jmp	SHORT $LN217@TT_RunIns
jmp	SHORT $LNo_Error_$252
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+488]
test	eax, eax
je	$LN218@TT_RunIns
xor	eax, eax
jmp	$LN221@TT_RunIns
push	OFFSET $SG13370
push	8996					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+12], 0
je	SHORT $LN5@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+488]
test	ecx, ecx
jne	SHORT $LN5@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+352], 3
jne	SHORT $LN5@TT_RunIns
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN3@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
push	OFFSET $SG13376
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [eax+300], -1
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+304], -1
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+12]
pop	edi
pop	esi
add	esp, 148				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN187@TT_RunIns
DD	$LN187@TT_RunIns
DD	$LN185@TT_RunIns
DD	$LN185@TT_RunIns
DD	$LN183@TT_RunIns
DD	$LN182@TT_RunIns
DD	$LN181@TT_RunIns
DD	$LN180@TT_RunIns
DD	$LN179@TT_RunIns
DD	$LN178@TT_RunIns
DD	$LN177@TT_RunIns
DD	$LN176@TT_RunIns
DD	$LN175@TT_RunIns
DD	$LN174@TT_RunIns
DD	$LN173@TT_RunIns
DD	$LN172@TT_RunIns
DD	$LN171@TT_RunIns
DD	$LN170@TT_RunIns
DD	$LN167@TT_RunIns
DD	$LN166@TT_RunIns
DD	$LN165@TT_RunIns
DD	$LN164@TT_RunIns
DD	$LN163@TT_RunIns
DD	$LN159@TT_RunIns
DD	$LN158@TT_RunIns
DD	$LN157@TT_RunIns
DD	$LN156@TT_RunIns
DD	$LN155@TT_RunIns
DD	$LN154@TT_RunIns
DD	$LN153@TT_RunIns
DD	$LN152@TT_RunIns
DD	$LN151@TT_RunIns
DD	$LN146@TT_RunIns
DD	$LN145@TT_RunIns
DD	$LN144@TT_RunIns
DD	$LN143@TT_RunIns
DD	$LN142@TT_RunIns
DD	$LN141@TT_RunIns
DD	$LN140@TT_RunIns
DD	$LN139@TT_RunIns
DD	$LN138@TT_RunIns
DD	$LN138@TT_RunIns
DD	$LN137@TT_RunIns
DD	$LN137@TT_RunIns
DD	$LN136@TT_RunIns
DD	$LN136@TT_RunIns
DD	$LN135@TT_RunIns
DD	$LN135@TT_RunIns
DD	$LN134@TT_RunIns
DD	$LN134@TT_RunIns
DD	$LN133@TT_RunIns
DD	$LN132@TT_RunIns
DD	$LN131@TT_RunIns
DD	$LN131@TT_RunIns
DD	$LN130@TT_RunIns
DD	$LN129@TT_RunIns
DD	$LN128@TT_RunIns
DD	$LN128@TT_RunIns
DD	$LN127@TT_RunIns
DD	$LN126@TT_RunIns
DD	$LN125@TT_RunIns
DD	$LN121@TT_RunIns
DD	$LN116@TT_RunIns
DD	$LN112@TT_RunIns
DD	$LN107@TT_RunIns
DD	$LN107@TT_RunIns
DD	$LN106@TT_RunIns
DD	$LN105@TT_RunIns
DD	$LN105@TT_RunIns
DD	$LN104@TT_RunIns
DD	$LN103@TT_RunIns
DD	$LN102@TT_RunIns
DD	$LN101@TT_RunIns
DD	$LN100@TT_RunIns
DD	$LN99@TT_RunIns
DD	$LN98@TT_RunIns
DD	$LN97@TT_RunIns
DD	$LN96@TT_RunIns
DD	$LN95@TT_RunIns
DD	$LN94@TT_RunIns
DD	$LN93@TT_RunIns
DD	$LN92@TT_RunIns
DD	$LN91@TT_RunIns
DD	$LN90@TT_RunIns
DD	$LN89@TT_RunIns
DD	$LN88@TT_RunIns
DD	$LN87@TT_RunIns
DD	$LN86@TT_RunIns
DD	$LN85@TT_RunIns
DD	$LN84@TT_RunIns
DD	$LN81@TT_RunIns
DD	$LN80@TT_RunIns
DD	$LN79@TT_RunIns
DD	$LN76@TT_RunIns
DD	$LN75@TT_RunIns
DD	$LN74@TT_RunIns
DD	$LN73@TT_RunIns
DD	$LN72@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN69@TT_RunIns
DD	$LN65@TT_RunIns
DD	$LN65@TT_RunIns
DD	$LN64@TT_RunIns
DD	$LN64@TT_RunIns
DD	$LN64@TT_RunIns
DD	$LN63@TT_RunIns
DD	$LN62@TT_RunIns
DD	$LN61@TT_RunIns
DD	$LN56@TT_RunIns
DD	$LN51@TT_RunIns
DD	$LN50@TT_RunIns
DD	$LN49@TT_RunIns
DD	$LN48@TT_RunIns
DD	$LN47@TT_RunIns
DD	$LN47@TT_RunIns
DD	$LN46@TT_RunIns
DD	$LN45@TT_RunIns
DD	$LN44@TT_RunIns
DD	$LN43@TT_RunIns
DD	$LN43@TT_RunIns
DD	$LN42@TT_RunIns
DD	$LN41@TT_RunIns
DD	$LN41@TT_RunIns
DD	$LN40@TT_RunIns
DD	$LN39@TT_RunIns
DD	$LN38@TT_RunIns
DD	$LN37@TT_RunIns
DD	$LN35@TT_RunIns
DD	$LN33@TT_RunIns
DD	$LN32@TT_RunIns
DD	$LN31@TT_RunIns
ENDP
_TT_Run_Context PROC
push	ebp
mov	ebp, esp
push	esi
push	edi
push	0
push	3
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Goto_CodeRange
add	esp, 12					
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	ecx, 1
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+344], cx
mov	eax, 1
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+346], ax
mov	edx, 1
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+348], dx
mov	ecx, 16384				
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+294], cx
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+296], ax
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+294]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+298], eax
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+294]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+290], eax
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+312], 1
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+304], 1
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+428], 0
mov	al, BYTE PTR _debug$[ebp]
mov	BYTE PTR _debug$[ebp], al
mov	esi, esp
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+652]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
pop	edi
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Save_Context PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+396]
mov	DWORD PTR [eax+116], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+408]
mov	DWORD PTR [eax+128], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+420]
mov	DWORD PTR [eax+140], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+424]
mov	DWORD PTR [eax+144], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN3@TT_Save_Co
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _i$[ebp], 3
jge	SHORT $LN4@TT_Save_Co
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+ecx*8+444]
mov	ecx, DWORD PTR [edx+ecx*8+448]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _size$[ebp]
mov	DWORD PTR [esi+edx*8+148], eax
mov	DWORD PTR [esi+edx*8+152], ecx
jmp	SHORT $LN2@TT_Save_Co
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Load_Context PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 260				
mov	DWORD PTR _maxp$[ebp], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+4], ecx
cmp	DWORD PTR _size$[ebp], 0
je	$LN6@TT_Load_Co
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+116]
mov	DWORD PTR [edx+396], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+120]
mov	DWORD PTR [edx+400], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR [edx+408], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR [edx+412], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	DWORD PTR [edx+404], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+136]
mov	DWORD PTR [edx+416], ecx
mov	esi, DWORD PTR _size$[ebp]
add	esi, 72					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 244				
mov	ecx, 10					
rep movsd
mov	esi, DWORD PTR _size$[ebp]
add	esi, 44					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 216				
mov	ecx, 7
rep movsd
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+140]
mov	DWORD PTR [edx+420], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+144]
mov	DWORD PTR [edx+424], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN5@TT_Load_Co
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _i$[ebp], 3
jge	SHORT $LN3@TT_Load_Co
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+148]
mov	eax, DWORD PTR [ecx+eax*8+152]
mov	ecx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _exec$[ebp]
mov	DWORD PTR [esi+ecx*8+444], edx
mov	DWORD PTR [esi+ecx*8+448], eax
jmp	SHORT $LN4@TT_Load_Co
mov	esi, DWORD PTR _size$[ebp]
add	esi, 172				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 284				
mov	ecx, 17					
rep movsd
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+240]
mov	DWORD PTR [edx+380], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+244]
mov	DWORD PTR [edx+384], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	cx, WORD PTR [eax+248]
mov	WORD PTR [edx+468], cx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+252]
mov	DWORD PTR [edx+472], ecx
mov	esi, DWORD PTR _size$[ebp]
add	esi, 256				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 180				
mov	ecx, 9
rep movsd
push	36					
push	0
mov	edx, DWORD PTR _exec$[ebp]
add	edx, 36					
push	edx
call	_memset
add	esp, 12					
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _tmp$[ebp], ecx
mov	edx, DWORD PTR _maxp$[ebp]
movzx	eax, WORD PTR [edx+24]
add	eax, 32					
push	eax
mov	ecx, DWORD PTR _exec$[ebp]
add	ecx, 24					
push	ecx
push	4
lea	edx, DWORD PTR _tmp$[ebp]
push	edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _tmp$[ebp]
mov	DWORD PTR [edx+20], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@TT_Load_Co
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN7@TT_Load_Co
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+388]
mov	DWORD PTR _tmp$[ebp], edx
mov	eax, DWORD PTR _maxp$[ebp]
movzx	ecx, WORD PTR [eax+26]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
add	edx, 392				
push	edx
push	1
lea	eax, DWORD PTR _tmp$[ebp]
push	eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
movzx	eax, WORD PTR _tmp$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+388], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@TT_Load_Co
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN7@TT_Load_Co
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+152], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+154], cx
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
mov	eax, DWORD PTR _exec$[ebp]
mov	BYTE PTR [eax+488], 0
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@TT_Load_Co
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN10@TT_Load_Co
DD	-12					
DD	4
DD	$LN9@TT_Load_Co
DB	116					
DB	109					
DB	112					
DB	0
ENDP
_TT_Done_Context PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$[ebp], ecx
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+440], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+442], cx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+24]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+24], 0
xor	ecx, ecx
jne	SHORT $LN12@TT_Done_Co
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+20], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+436]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+436], 0
xor	ecx, ecx
jne	SHORT $LN9@TT_Done_Co
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+432], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+428], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+392]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+392], 0
xor	edx, edx
jne	SHORT $LN6@TT_Done_Co
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+388], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _exec$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _exec$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@TT_Done_Co
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_New_Context PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN4@TT_New_Con
jmp	SHORT $Fail$10
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
cmp	DWORD PTR [edx+28], 0
jne	SHORT $LN3@TT_New_Con
lea	eax, DWORD PTR _error$2[ebp]
push	eax
push	612					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _exec$1[ebp], eax
cmp	DWORD PTR _error$2[ebp], 0
je	SHORT $LN2@TT_New_Con
jmp	SHORT $Fail$10
mov	edx, DWORD PTR _memory$[ebp]
push	edx
mov	eax, DWORD PTR _exec$1[ebp]
push	eax
call	_Init_Context
add	esp, 8
mov	DWORD PTR _error$2[ebp], eax
cmp	DWORD PTR _error$2[ebp], 0
je	SHORT $LN1@TT_New_Con
jmp	SHORT $Fail$10
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _exec$1[ebp]
mov	DWORD PTR [ecx+28], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [eax+28]
jmp	SHORT $LN5@TT_New_Con
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@TT_New_Con
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN8@TT_New_Con
DD	-12					
DD	4
DD	$LN7@TT_New_Con
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_Update_Max PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR __pbuff$[ebp]
mov	DWORD PTR _pbuff$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	edx, DWORD PTR _new_max$[ebp]
jae	SHORT $LN2@Update_Max
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _pbuff$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _new_max$[ebp]
imul	eax, DWORD PTR _multiplier$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
imul	edx, DWORD PTR _multiplier$[ebp]
push	edx
push	1
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _pbuff$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@Update_Max
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@Update_Max
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [edx], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@Update_Max
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN6@Update_Max
DD	-8					
DD	4
DD	$LN5@Update_Max
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Clear_CodeRange PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _range$[ebp], 1
jl	SHORT $LN1@TT_Clear_C
cmp	DWORD PTR _range$[ebp], 3
jle	SHORT $LN4@TT_Clear_C
push	OFFSET $SG10967
push	358					
push	OFFSET $SG10968
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@TT_Clear_C
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+ecx*8+436], 0
mov	eax, DWORD PTR _range$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+eax*8+440], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Set_CodeRange PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _range$[ebp], 1
jl	SHORT $LN1@TT_Set_Cod
cmp	DWORD PTR _range$[ebp], 3
jle	SHORT $LN4@TT_Set_Cod
push	OFFSET $SG10954
push	333					
push	OFFSET $SG10955
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@TT_Set_Cod
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _base$[ebp]
mov	DWORD PTR [edx+ecx*8+436], eax
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _length$[ebp]
mov	DWORD PTR [edx+ecx*8+440], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Goto_CodeRange PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _range$[ebp], 1
jl	SHORT $LN9@TT_Goto_Co
cmp	DWORD PTR _range$[ebp], 3
jle	SHORT $LN12@TT_Goto_Co
push	OFFSET $SG10924
push	290					
push	OFFSET $SG10925
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN13@TT_Goto_Co
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
lea	eax, DWORD PTR [edx+ecx*8+436]
mov	DWORD PTR _coderange$[ebp], eax
mov	ecx, DWORD PTR _coderange$[ebp]
cmp	DWORD PTR [ecx], 0
jne	SHORT $LN7@TT_Goto_Co
push	OFFSET $SG10931
push	294					
push	OFFSET $SG10932
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN8@TT_Goto_Co
mov	eax, DWORD PTR _coderange$[ebp]
mov	ecx, DWORD PTR _IP$[ebp]
cmp	ecx, DWORD PTR [eax+4]
jbe	SHORT $LN3@TT_Goto_Co
push	OFFSET $SG10938
push	300					
push	OFFSET $SG10939
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@TT_Goto_Co
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _coderange$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+356], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _coderange$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+364], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _IP$[ebp]
mov	DWORD PTR [eax+360], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _range$[ebp]
mov	DWORD PTR [edx+352], eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_slot_init PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_GlyphLoader_CreateExtra
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_tt_driver_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttdriver$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
cmp	DWORD PTR [ecx+28], 0
je	SHORT $LN2@tt_driver_
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
call	_TT_Done_Context
add	esp, 4
mov	ecx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [ecx+28], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_driver_init PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttdriver$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
call	_TT_New_Context
add	esp, 4
test	eax, eax
jne	SHORT $LN1@tt_driver_
push	OFFSET $SG10846
push	1264					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	SHORT $LN2@tt_driver_
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+68], 35			
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_reset PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
mov	BYTE PTR [eax+108], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
add	eax, 44					
mov	DWORD PTR _metrics$[ebp], eax
mov	esi, DWORD PTR _size$[ebp]
add	esi, 12					
mov	ecx, 7
mov	edi, DWORD PTR _metrics$[ebp]
rep movsd
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx]
cmp	edx, 1
jl	SHORT $LN5@tt_size_re
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
cmp	ecx, 1
jge	SHORT $LN6@tt_size_re
push	OFFSET $SG10827
push	1187					
push	151					
call	_FT_Throw
add	esp, 12					
or	eax, 151				
jmp	$LN7@tt_size_re
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+176]
and	eax, 8
je	$LN4@tt_size_re
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+68]
push	edx
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax]
shl	ecx, 6
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
push	ecx
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx+2]
shl	eax, 6
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+70]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+72]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+74]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+20], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+76]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+24], eax
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx]
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx+2]
cmp	eax, edx
jl	SHORT $LN3@tt_size_re
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+88], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	dx, WORD PTR [ecx]
mov	WORD PTR [eax+80], dx
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+72], 65536		
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+76], eax
jmp	SHORT $LN2@tt_size_re
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+88], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	dx, WORD PTR [ecx+2]
mov	WORD PTR [eax+80], dx
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
push	ecx
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+72], eax
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+76], 65536		
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+304], -1
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@tt_size_re
mov	ecx, DWORD PTR _size$[ebp]
mov	BYTE PTR [ecx+108], 1
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_ready_bytecode PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+300], 0
jge	SHORT $LN13@tt_size_re
movzx	ecx, BYTE PTR _pedantic$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
call	_tt_size_init_bytecode
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN11@tt_size_re
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+300], 0
je	SHORT $LN12@tt_size_re
jmp	$Exit$16
mov	ecx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [ecx+304], 0
jge	$Exit$16
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _face$1[ebp], eax
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN9@tt_size_re
mov	ecx, DWORD PTR _i$2[ebp]
add	ecx, 1
mov	DWORD PTR _i$2[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR _i$2[ebp]
cmp	eax, DWORD PTR [edx+240]
jae	SHORT $LN7@tt_size_re
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+88]
push	edx
mov	eax, DWORD PTR _face$1[ebp]
mov	ecx, DWORD PTR [eax+648]
mov	edx, DWORD PTR _i$2[ebp]
movsx	eax, WORD PTR [ecx+edx*2]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+244]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN8@tt_size_re
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN6@tt_size_re
mov	edx, DWORD PTR _i$2[ebp]
add	edx, 1
mov	DWORD PTR _i$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, WORD PTR [eax+264]
cmp	DWORD PTR _i$2[ebp], ecx
jae	SHORT $LN4@tt_size_re
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+268]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8], 0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+268]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8+4], 0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+272]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8], 0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+272]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8+4], 0
jmp	SHORT $LN5@tt_size_re
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN3@tt_size_re
mov	edx, DWORD PTR _i$2[ebp]
add	edx, 1
mov	DWORD PTR _i$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, WORD PTR [eax+248]
cmp	DWORD PTR _i$2[ebp], ecx
jae	SHORT $LN1@tt_size_re
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+252]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*4], 0
jmp	SHORT $LN2@tt_size_re
mov	edi, DWORD PTR _size$[ebp]
add	edi, 172				
mov	ecx, 17					
mov	esi, OFFSET _tt_default_graphics_state
rep movsd
movzx	edx, BYTE PTR _pedantic$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_tt_size_run_prep
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_run_prep PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN11@tt_size_ru
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+296]
mov	DWORD PTR _exec$[ebp], edx
jmp	SHORT $LN10@tt_size_ru
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _exec$[ebp], edx
cmp	DWORD PTR _exec$[ebp], 0
jne	SHORT $LN9@tt_size_ru
push	OFFSET $SG10710
push	855					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Load_Context
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@tt_size_ru
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+428], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	BYTE PTR [edx+488], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	cl, BYTE PTR _pedantic$[ebp]
mov	BYTE PTR [eax+561], cl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+636]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+640]
push	edx
push	2
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Set_CodeRange
add	esp, 16					
push	3
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
call	_TT_Clear_CodeRange
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+636], 0
jbe	SHORT $LN7@tt_size_ru
push	0
push	2
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Goto_CodeRange
add	esp, 12					
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, BYTE PTR [ecx+292]
test	edx, edx
jne	SHORT $LN6@tt_size_ru
mov	eax, 4
imul	ecx, eax, 30
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN4@tt_size_ru
push	OFFSET $SG10718
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN5@tt_size_ru
mov	esi, esp
mov	eax, DWORD PTR _exec$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+652]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN1@tt_size_ru
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+304], ecx
mov	edx, 16384				
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+290], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+292], cx
mov	eax, 16384				
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+294], ax
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+296], dx
mov	ecx, 16384				
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+298], cx
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+300], ax
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+284], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+286], cx
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+288], ax
mov	edx, 1
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+344], dx
mov	ecx, 1
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+346], cx
mov	eax, 1
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+348], ax
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+304], 1
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 284				
mov	edi, DWORD PTR _size$[ebp]
add	edi, 172				
mov	ecx, 17					
rep movsd
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
call	_TT_Save_Context
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_run_fpgm PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN11@tt_size_ru
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+296]
mov	DWORD PTR _exec$[ebp], edx
jmp	SHORT $LN10@tt_size_ru
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _exec$[ebp], edx
cmp	DWORD PTR _exec$[ebp], 0
jne	SHORT $LN9@tt_size_ru
push	OFFSET $SG10684
push	761					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Load_Context
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@tt_size_ru
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+428], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+476], 64			
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+480], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+484], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	BYTE PTR [edx+488], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+564], 16384		
mov	ecx, DWORD PTR _exec$[ebp]
mov	dl, BYTE PTR _pedantic$[ebp]
mov	BYTE PTR [ecx+561], dl
mov	eax, DWORD PTR _exec$[ebp]
add	eax, 216				
mov	DWORD PTR _metrics$2[ebp], eax
mov	ecx, DWORD PTR _exec$[ebp]
add	ecx, 244				
mov	DWORD PTR _tt_metrics$1[ebp], ecx
xor	edx, edx
mov	eax, DWORD PTR _metrics$2[ebp]
mov	WORD PTR [eax], dx
xor	ecx, ecx
mov	edx, DWORD PTR _metrics$2[ebp]
mov	WORD PTR [edx+2], cx
mov	eax, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [ecx+8], 0
xor	edx, edx
mov	eax, DWORD PTR _tt_metrics$1[ebp]
mov	WORD PTR [eax+8], dx
mov	ecx, DWORD PTR _tt_metrics$1[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _tt_metrics$1[ebp]
mov	DWORD PTR [edx+12], 65536		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+628]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+632]
push	eax
push	1
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
call	_TT_Set_CodeRange
add	esp, 16					
push	2
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Clear_CodeRange
add	esp, 8
push	3
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Clear_CodeRange
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+628], 0
jbe	SHORT $LN7@tt_size_ru
push	0
push	1
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Goto_CodeRange
add	esp, 12					
mov	eax, 4
imul	ecx, eax, 30
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN5@tt_size_ru
push	OFFSET $SG10693
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN6@tt_size_ru
mov	esi, esp
mov	eax, DWORD PTR _exec$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+652]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN2@tt_size_ru
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+300], ecx
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@tt_size_ru
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Save_Context
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _ttsize$[ebp]
push	ecx
call	_tt_size_done_bytecode
add	esp, 4
mov	edx, DWORD PTR _size$[ebp]
mov	BYTE PTR [edx+108], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_init PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+300], -1
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+304], -1
mov	eax, DWORD PTR _size$[ebp]
mov	BYTE PTR [eax+108], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+112], -1
mov	eax, DWORD PTR _error$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_done PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN6@tt_face_do
jmp	$LN7@tt_face_do
mov	ecx, DWORD PTR _ttface$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+532]
mov	DWORD PTR _sfnt$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+660], 0
je	SHORT $LN5@tt_face_do
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+660]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN4@tt_face_do
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt$[ebp]
mov	edx, DWORD PTR [ecx+12]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_done_loca
add	esp, 4
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_free_hdmx
add	esp, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+648], 0
xor	eax, eax
jne	SHORT $LN3@tt_face_do
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+644], 0
mov	edx, DWORD PTR _face$[ebp]
add	edx, 632				
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 640				
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+628], 0
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+636], 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_tt_done_blend
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+676], 0
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_init PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 30
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN25@tt_face_in
push	OFFSET $SG10613
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN26@tt_face_in
mov	ecx, DWORD PTR _ttface$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$[ebp], eax
push	OFFSET $SG10615
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module_Interface
add	esp, 8
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
jne	SHORT $LN22@tt_face_in
push	OFFSET $SG10617
call	_FT_Message
add	esp, 4
push	OFFSET $SG10618
push	526					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$29
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@tt_face_in
jmp	$Exit$29
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
mov	DWORD PTR _stream$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@tt_face_in
jmp	$Exit$29
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+148], 65536		
je	SHORT $LN19@tt_face_in
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+148], 131072		
je	SHORT $LN19@tt_face_in
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+148], 1953658213		
je	SHORT $LN19@tt_face_in
mov	eax, 4
imul	ecx, eax, 30
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN17@tt_face_in
push	OFFSET $SG10633
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN18@tt_face_in
jmp	$Bad_Format$30
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+8]
or	ecx, 2048				
mov	edx, DWORD PTR _ttface$[ebp]
mov	DWORD PTR [edx+8], ecx
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN14@tt_face_in
xor	eax, eax
jmp	$LN27@tt_face_in
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@tt_face_in
jmp	$Exit$29
mov	ecx, DWORD PTR _ttface$[ebp]
push	ecx
call	_tt_check_trickyness
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN12@tt_face_in
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+8]
or	ecx, 8192				
mov	edx, DWORD PTR _ttface$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_load_hdmx
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@tt_face_in
jmp	$Exit$29
mov	edx, DWORD PTR _ttface$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	$LN10@tt_face_in
mov	ecx, DWORD PTR _ttface$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+48], 0
jne	SHORT $LN9@tt_face_in
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_load_loca
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN8@tt_face_in
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_load_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@tt_face_in
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_tt_face_load_fpgm
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN6@tt_face_in
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_load_prep
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _ttface$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax+48], 0
jne	SHORT $LN10@tt_face_in
mov	ecx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [ecx+28], 0
je	SHORT $LN10@tt_face_in
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+700], 0
je	SHORT $LN10@tt_face_in
mov	eax, DWORD PTR _ttface$[ebp]
push	eax
call	_tt_check_single_notdef
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN10@tt_face_in
mov	edx, 4
imul	eax, edx, 30
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN3@tt_face_in
push	OFFSET $SG10649
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN4@tt_face_in
mov	edx, DWORD PTR _ttface$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, -2					
mov	ecx, DWORD PTR _ttface$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_TT_Init_Glyph_Loading
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN27@tt_face_in
push	OFFSET $SG10650
push	660					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$29
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_glyphzone_new PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
push	36					
push	0
mov	eax, DWORD PTR _zone$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movzx	ecx, WORD PTR _maxPoints$[ebp]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN2@tt_glyphzo
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
movzx	eax, WORD PTR _maxPoints$[ebp]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+16], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@tt_glyphzo
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movzx	ecx, WORD PTR _maxPoints$[ebp]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+20], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@tt_glyphzo
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
movzx	eax, WORD PTR _maxPoints$[ebp]
push	eax
push	0
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+24], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@tt_glyphzo
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movsx	ecx, WORD PTR _maxContours$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+28], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_glyphzo
mov	edx, DWORD PTR _zone$[ebp]
push	edx
call	_tt_glyphzone_done
add	esp, 4
jmp	SHORT $LN1@tt_glyphzo
mov	eax, DWORD PTR _zone$[ebp]
mov	cx, WORD PTR _maxPoints$[ebp]
mov	WORD PTR [eax+4], cx
mov	edx, DWORD PTR _zone$[ebp]
mov	ax, WORD PTR _maxContours$[ebp]
mov	WORD PTR [edx+6], ax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@tt_glyphzo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN7@tt_glyphzo
DD	-8					
DD	4
DD	$LN6@tt_glyphzo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_glyphzone_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
cmp	DWORD PTR _memory$[ebp], 0
je	$LN17@tt_glyphzo
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+28], 0
xor	eax, eax
jne	SHORT $LN15@tt_glyphzo
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+24], 0
xor	edx, edx
jne	SHORT $LN12@tt_glyphzo
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _zone$[ebp]
mov	DWORD PTR [eax+16], 0
xor	ecx, ecx
jne	SHORT $LN9@tt_glyphzo
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+12], 0
xor	eax, eax
jne	SHORT $LN6@tt_glyphzo
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+20], 0
xor	edx, edx
jne	SHORT $LN3@tt_glyphzo
xor	eax, eax
mov	ecx, DWORD PTR _zone$[ebp]
mov	WORD PTR [ecx+8], ax
xor	edx, edx
mov	eax, DWORD PTR _zone$[ebp]
mov	WORD PTR [eax+4], dx
xor	ecx, ecx
mov	edx, DWORD PTR _zone$[ebp]
mov	WORD PTR [edx+10], cx
xor	eax, eax
mov	ecx, DWORD PTR _zone$[ebp]
mov	WORD PTR [ecx+6], ax
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_var_apply_tuple PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _apply$[ebp], 65536		
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN16@ft_var_app
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR [ecx]
jae	$LN14@ft_var_app
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _tuple_coords$[ebp]
cmp	DWORD PTR [ecx+eax*4], 0
jne	SHORT $LN13@ft_var_app
jmp	SHORT $LN15@ft_var_app
jmp	$LN12@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
cmp	DWORD PTR [eax+ecx*4], 0
je	SHORT $LN10@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
cmp	DWORD PTR [eax+ecx*4], 0
jge	SHORT $LN9@ft_var_app
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _tuple_coords$[ebp]
cmp	DWORD PTR [eax+edx*4], 0
jg	SHORT $LN10@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
cmp	DWORD PTR [edx+eax*4], 0
jle	SHORT $LN11@ft_var_app
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _tuple_coords$[ebp]
cmp	DWORD PTR [edx+ecx*4], 0
jge	SHORT $LN11@ft_var_app
mov	DWORD PTR _apply$[ebp], 0
jmp	$LN14@ft_var_app
jmp	$LN12@ft_var_app
movzx	eax, WORD PTR _tupleIndex$[ebp]
and	eax, 16384				
jne	SHORT $LN7@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
cmp	DWORD PTR [edx+eax*4], 0
jle	SHORT $LN19@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
mov	DWORD PTR tv135[ebp], ecx
jmp	SHORT $LN20@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
neg	edx
mov	DWORD PTR tv135[ebp], edx
mov	eax, DWORD PTR tv135[ebp]
push	eax
mov	ecx, DWORD PTR _apply$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _apply$[ebp], eax
jmp	$LN12@ft_var_app
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_start_coords$[ebp]
mov	eax, DWORD PTR [eax+ecx*4]
cmp	eax, DWORD PTR [esi+edx*4]
jle	SHORT $LN4@ft_var_app
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_end_coords$[ebp]
mov	edx, DWORD PTR [edx+eax*4]
cmp	edx, DWORD PTR [esi+ecx*4]
jl	SHORT $LN5@ft_var_app
mov	DWORD PTR _apply$[ebp], 0
jmp	$LN14@ft_var_app
jmp	$LN12@ft_var_app
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _tuple_coords$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
cmp	ecx, DWORD PTR [esi+eax*4]
jge	SHORT $LN2@ft_var_app
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _tuple_coords$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_start_coords$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
sub	edx, DWORD PTR [esi+ecx*4]
push	edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _im_start_coords$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
sub	ecx, DWORD PTR [esi+eax*4]
push	ecx
mov	edx, DWORD PTR _apply$[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _apply$[ebp], eax
jmp	SHORT $LN12@ft_var_app
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _im_end_coords$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _tuple_coords$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
sub	eax, DWORD PTR [esi+edx*4]
push	eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _im_end_coords$[ebp]
mov	esi, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
sub	eax, DWORD PTR [edx+esi*4]
push	eax
mov	ecx, DWORD PTR _apply$[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _apply$[ebp], eax
jmp	$LN15@ft_var_app
mov	eax, DWORD PTR _apply$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_ft_var_load_gvar PROC
push	ebp
mov	ebp, esp
sub	esp, 84					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 21					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	esi, esp
lea	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1735811442				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN25@ft_var_loa
jmp	$Exit$33
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _gvar_start$[ebp], eax
lea	eax, DWORD PTR _gvar_head$[ebp]
push	eax
push	OFFSET ?gvar_fields@?1??ft_var_load_gvar@@9@9
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@ft_var_loa
jmp	$Exit$33
movzx	edx, WORD PTR _gvar_head$[ebp+6]
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+24], edx
movzx	ecx, WORD PTR _gvar_head$[ebp+12]
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+32], ecx
mov	eax, DWORD PTR _gvar_start$[ebp]
add	eax, DWORD PTR _gvar_head$[ebp+16]
mov	DWORD PTR _offsetToData$[ebp], eax
cmp	DWORD PTR _gvar_head$[ebp], 65536	
jne	SHORT $LN22@ft_var_loa
movzx	ecx, WORD PTR _gvar_head$[ebp+4]
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+8]
movzx	edx, WORD PTR [eax]
cmp	ecx, edx
je	SHORT $LN23@ft_var_loa
push	OFFSET $SG13603
push	417					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$33
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+32]
add	edx, 1
push	edx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+36], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@ft_var_loa
jmp	$Exit$33
movzx	edx, WORD PTR _gvar_head$[ebp+14]
and	edx, 1
je	SHORT $LN20@ft_var_loa
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+32]
lea	edx, DWORD PTR [ecx*4+4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN19@ft_var_loa
jmp	$Exit$33
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN18@ft_var_loa
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+32]
ja	SHORT $LN16@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetULong
add	esp, 4
add	eax, DWORD PTR _offsetToData$[ebp]
mov	edx, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [edx+36]
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
jmp	SHORT $LN17@ft_var_loa
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	SHORT $LN15@ft_var_loa
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+32]
lea	eax, DWORD PTR [edx+edx+2]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@ft_var_loa
jmp	$Exit$33
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN13@ft_var_loa
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax+32]
ja	SHORT $LN11@ft_var_loa
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	eax, ax
mov	ecx, DWORD PTR _offsetToData$[ebp]
lea	edx, DWORD PTR [ecx+eax*2]
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN12@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExitFrame
add	esp, 4
mov	edx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [edx+24], 0
je	$Exit$33
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movzx	ecx, WORD PTR _gvar_head$[ebp+4]
mov	edx, DWORD PTR _blend$[ebp]
imul	ecx, DWORD PTR [edx+24]
push	ecx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+28], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@ft_var_loa
jmp	$Exit$33
mov	edx, DWORD PTR _gvar_start$[ebp]
add	edx, DWORD PTR _gvar_head$[ebp+8]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@ft_var_loa
movzx	ecx, WORD PTR _gvar_head$[ebp+4]
mov	edx, DWORD PTR _blend$[ebp]
imul	ecx, DWORD PTR [edx+24]
shl	ecx, 1
push	ecx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@ft_var_loa
jmp	SHORT $Exit$33
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN6@ft_var_loa
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+24]
jae	SHORT $LN4@ft_var_loa
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@ft_var_loa
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
movzx	edx, WORD PTR _gvar_head$[ebp+4]
cmp	DWORD PTR _j$[ebp], edx
jae	SHORT $LN1@ft_var_loa
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movsx	ecx, ax
shl	ecx, 2
movzx	edx, WORD PTR _gvar_head$[ebp+4]
imul	edx, DWORD PTR _i$[ebp]
add	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [eax+28]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN2@ft_var_loa
jmp	SHORT $LN5@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExitFrame
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN32@ft_var_loa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	3
DD	$LN31@ft_var_loa
DD	-24					
DD	4
DD	$LN28@ft_var_loa
DD	-44					
DD	4
DD	$LN29@ft_var_loa
DD	-80					
DD	20					
DD	$LN30@ft_var_loa
DB	103					
DB	118					
DB	97					
DB	114					
DB	95					
DB	104					
DB	101					
DB	97					
DB	100					
DB	0
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_var_load_avar PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	BYTE PTR [ecx+16], 1
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1635148146				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@ft_var_loa
jmp	$LN22@ft_var_loa
mov	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@ft_var_loa
jmp	$LN22@ft_var_loa
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetULong
add	esp, 4
mov	DWORD PTR _version$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetULong
add	esp, 4
mov	DWORD PTR _axisCount$[ebp], eax
cmp	DWORD PTR _version$[ebp], 65536		
jne	SHORT $LN18@ft_var_loa
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _axisCount$[ebp]
cmp	ecx, DWORD PTR [eax]
je	SHORT $LN19@ft_var_loa
jmp	$Exit$28
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _axisCount$[ebp]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+20], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN17@ft_var_loa
jmp	$Exit$28
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _blend$[ebp]
add	ecx, DWORD PTR [edx+20]
mov	DWORD PTR _segment$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN16@ft_var_loa
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _segment$[ebp]
add	ecx, 8
mov	DWORD PTR _segment$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _axisCount$[ebp]
jge	$Exit$28
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
mov	ecx, DWORD PTR _segment$[ebp]
mov	WORD PTR [ecx], ax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _segment$[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _segment$[ebp]
mov	DWORD PTR [ecx+4], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@ft_var_loa
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _j$[ebp], edx
jmp	SHORT $LN12@ft_var_loa
mov	eax, DWORD PTR _j$[ebp]
sub	eax, 1
mov	DWORD PTR _j$[ebp], eax
cmp	DWORD PTR _j$[ebp], 0
jl	SHORT $LN6@ft_var_loa
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR [edx+eax*8+4]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _j$[ebp]
mov	DWORD PTR [ecx+edx*8+4], 0
xor	eax, eax
jne	SHORT $LN9@ft_var_loa
jmp	SHORT $LN11@ft_var_loa
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+20], 0
xor	edx, edx
jne	SHORT $LN6@ft_var_loa
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+20], 0
jmp	SHORT $Exit$28
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@ft_var_loa
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _segment$[ebp]
movzx	eax, WORD PTR [edx]
cmp	DWORD PTR _j$[ebp], eax
jge	SHORT $LN1@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _segment$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR [ecx+eax*8], edx
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _segment$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR [ecx+eax*8+4], edx
jmp	SHORT $LN2@ft_var_loa
jmp	$LN15@ft_var_loa
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ExitFrame
add	esp, 4
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN27@ft_var_loa
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN26@ft_var_loa
DD	-24					
DD	4
DD	$LN24@ft_var_loa
DD	-52					
DD	4
DD	$LN25@ft_var_loa
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_var_readpackeddeltas PROC
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _deltas$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _delta_cnt$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _deltas$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@ft_var_rea
xor	eax, eax
jmp	$LN21@ft_var_rea
mov	DWORD PTR _i$[ebp], 0
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _delta_cnt$[ebp]
jae	$LN18@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetChar
add	esp, 4
movzx	edx, al
mov	DWORD PTR _runcnt$[ebp], edx
mov	eax, DWORD PTR _runcnt$[ebp]
and	eax, 128				
je	SHORT $LN17@ft_var_rea
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN16@ft_var_rea
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 63					
cmp	DWORD PTR _j$[ebp], edx
ja	SHORT $LN14@ft_var_rea
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _delta_cnt$[ebp]
jae	SHORT $LN14@ft_var_rea
xor	ecx, ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
mov	WORD PTR [eax+edx*2], cx
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN15@ft_var_rea
jmp	$LN13@ft_var_rea
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 64					
je	SHORT $LN12@ft_var_rea
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN11@ft_var_rea
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _runcnt$[ebp]
and	ecx, 63					
cmp	DWORD PTR _j$[ebp], ecx
ja	SHORT $LN9@ft_var_rea
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _delta_cnt$[ebp]
jae	SHORT $LN9@ft_var_rea
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _deltas$[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN10@ft_var_rea
jmp	SHORT $LN13@ft_var_rea
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN7@ft_var_rea
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 63					
cmp	DWORD PTR _j$[ebp], edx
ja	SHORT $LN13@ft_var_rea
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _delta_cnt$[ebp]
jae	SHORT $LN13@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetChar
add	esp, 4
movsx	dx, al
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
mov	WORD PTR [ecx+eax*2], dx
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
jmp	SHORT $LN6@ft_var_rea
mov	eax, DWORD PTR _runcnt$[ebp]
and	eax, 63					
cmp	DWORD PTR _j$[ebp], eax
ja	SHORT $LN4@ft_var_rea
mov	ecx, DWORD PTR _deltas$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@ft_var_rea
xor	eax, eax
jmp	SHORT $LN21@ft_var_rea
jmp	$LN19@ft_var_rea
mov	eax, DWORD PTR _deltas$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@ft_var_rea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN24@ft_var_rea
DD	-28					
DD	4
DD	$LN23@ft_var_rea
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_ft_var_readpackedpoints PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _points$[ebp], 0
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _error$[ebp]
mov	DWORD PTR _error$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetChar
add	esp, 4
movzx	ecx, al
mov	DWORD PTR _n$[ebp], ecx
mov	edx, DWORD PTR _point_cnt$[ebp]
mov	eax, DWORD PTR _n$[ebp]
mov	DWORD PTR [edx], eax
cmp	DWORD PTR _n$[ebp], 0
jne	SHORT $LN17@ft_var_rea
or	eax, -1
jmp	$LN18@ft_var_rea
mov	ecx, DWORD PTR _n$[ebp]
and	ecx, 128				
je	SHORT $LN16@ft_var_rea
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetChar
add	esp, 4
movzx	eax, al
mov	ecx, DWORD PTR _n$[ebp]
and	ecx, 127				
shl	ecx, 8
or	eax, ecx
mov	DWORD PTR _n$[ebp], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _n$[ebp]
push	eax
push	0
push	2
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _points$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@ft_var_rea
xor	eax, eax
jmp	$LN18@ft_var_rea
mov	DWORD PTR _i$[ebp], 0
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _n$[ebp]
jge	$Exit$23
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetChar
add	esp, 4
movzx	ecx, al
mov	DWORD PTR _runcnt$[ebp], ecx
mov	edx, DWORD PTR _runcnt$[ebp]
and	edx, 128				
je	$LN12@ft_var_rea
mov	eax, DWORD PTR _runcnt$[ebp]
and	eax, 127				
mov	DWORD PTR _runcnt$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
mov	WORD PTR tv95[ebp], ax
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _points$[ebp]
mov	cx, WORD PTR tv95[ebp]
mov	WORD PTR [eax+edx*2], cx
movzx	edx, WORD PTR tv95[ebp]
mov	DWORD PTR _first$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _runcnt$[ebp], 1
jl	SHORT $LN10@ft_var_rea
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, DWORD PTR _runcnt$[ebp]
cmp	ecx, DWORD PTR _n$[ebp]
jl	SHORT $LN11@ft_var_rea
jmp	$Exit$23
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN9@ft_var_rea
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _runcnt$[ebp]
jge	SHORT $LN7@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
add	edx, DWORD PTR _first$[ebp]
mov	DWORD PTR _first$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	dx, WORD PTR _first$[ebp]
mov	WORD PTR [ecx+eax*2], dx
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN8@ft_var_rea
jmp	$LN6@ft_var_rea
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetChar
add	esp, 4
movzx	dx, al
mov	WORD PTR tv147[ebp], dx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _points$[ebp]
mov	dx, WORD PTR tv147[ebp]
mov	WORD PTR [ecx+eax*2], dx
movzx	eax, WORD PTR tv147[ebp]
mov	DWORD PTR _first$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
cmp	DWORD PTR _runcnt$[ebp], 1
jl	SHORT $LN4@ft_var_rea
mov	edx, DWORD PTR _i$[ebp]
add	edx, DWORD PTR _runcnt$[ebp]
cmp	edx, DWORD PTR _n$[ebp]
jl	SHORT $LN5@ft_var_rea
jmp	SHORT $Exit$23
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN3@ft_var_rea
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _runcnt$[ebp]
jge	SHORT $LN6@ft_var_rea
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetChar
add	esp, 4
movzx	eax, al
add	eax, DWORD PTR _first$[ebp]
mov	DWORD PTR _first$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _points$[ebp]
mov	ax, WORD PTR _first$[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN2@ft_var_rea
jmp	$LN14@ft_var_rea
mov	eax, DWORD PTR _points$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@ft_var_rea
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN21@ft_var_rea
DD	-36					
DD	4
DD	$LN20@ft_var_rea
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_Ins_UNKNOWN PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+416]
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+408], 24
add	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], ecx
mov	edx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], edx
jmp	SHORT $LN5@Ins_UNKNOW
mov	eax, DWORD PTR _def$[ebp]
add	eax, 24					
mov	DWORD PTR _def$[ebp], eax
mov	ecx, DWORD PTR _def$[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jae	$LN3@Ins_UNKNOW
mov	edx, DWORD PTR _def$[ebp]
movzx	eax, BYTE PTR [edx+12]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
cmp	eax, edx
jne	$LN2@Ins_UNKNOW
mov	eax, DWORD PTR _def$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
je	$LN2@Ins_UNKNOW
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+428]
cmp	ecx, DWORD PTR [eax+432]
jl	SHORT $LN1@Ins_UNKNOW
push	OFFSET $SG13049
push	7866					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN6@Ins_UNKNOW
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+436]
mov	DWORD PTR _call$1[ebp], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
add	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+428], ecx
mov	eax, DWORD PTR _call$1[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 1
mov	edx, DWORD PTR _call$1[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _call$1[ebp]
mov	DWORD PTR [eax+8], 1
mov	ecx, DWORD PTR _call$1[ebp]
mov	edx, DWORD PTR _def$[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _def$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_Goto_CodeRange
add	esp, 12					
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
jmp	SHORT $LN6@Ins_UNKNOW
jmp	$LN4@Ins_UNKNOW
push	OFFSET $SG13050
push	7884					
push	128					
call	_FT_Throw
add	esp, 12					
or	eax, 128				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_GETINFO PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _K$[ebp], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 1
je	SHORT $LN4@Ins_GETINF
mov	DWORD PTR _K$[ebp], 35			
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, 2
je	SHORT $LN3@Ins_GETINF
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+281]
test	eax, eax
je	SHORT $LN3@Ins_GETINF
mov	ecx, DWORD PTR _K$[ebp]
or	ecx, 128				
mov	DWORD PTR _K$[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
and	edx, 4
je	SHORT $LN2@Ins_GETINF
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+282]
test	ecx, ecx
je	SHORT $LN2@Ins_GETINF
mov	edx, DWORD PTR _K$[ebp]
or	edx, 256				
mov	DWORD PTR _K$[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 32					
je	SHORT $LN1@Ins_GETINF
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+608]
test	edx, edx
je	SHORT $LN1@Ins_GETINF
mov	eax, DWORD PTR _K$[ebp]
or	eax, 4096				
mov	DWORD PTR _K$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR _K$[ebp]
mov	DWORD PTR [eax+edx], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_DELTAC PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	esi, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+592]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _P$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _nump$[ebp], eax
mov	DWORD PTR _k$[ebp], 1
jmp	SHORT $LN15@Ins_DELTAC
mov	ecx, DWORD PTR _k$[ebp]
add	ecx, 1
mov	DWORD PTR _k$[ebp], ecx
mov	edx, DWORD PTR _k$[ebp]
cmp	edx, DWORD PTR _nump$[ebp]
ja	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 2
jge	SHORT $LN12@Ins_DELTAC
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN11@Ins_DELTAC
push	OFFSET $SG13003
push	7665					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], 0
jmp	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR [eax+ecx*4+4]
mov	DWORD PTR _A$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR [edx+eax*4]
mov	DWORD PTR _B$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _A$[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN10@Ins_DELTAC
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN9@Ins_DELTAC
push	OFFSET $SG13010
push	7679					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN16@Ins_DELTAC
jmp	$LN8@Ins_DELTAC
mov	eax, DWORD PTR _B$[ebp]
and	eax, 240				
shr	eax, 4
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dl, BYTE PTR [ecx+368]
mov	BYTE PTR tv142[ebp], dl
cmp	BYTE PTR tv142[ebp], 116		
je	SHORT $LN4@Ins_DELTAC
cmp	BYTE PTR tv142[ebp], 117		
je	SHORT $LN3@Ins_DELTAC
jmp	SHORT $LN6@Ins_DELTAC
jmp	SHORT $LN6@Ins_DELTAC
mov	eax, DWORD PTR _C$[ebp]
add	eax, 16					
mov	DWORD PTR _C$[ebp], eax
jmp	SHORT $LN6@Ins_DELTAC
mov	ecx, DWORD PTR _C$[ebp]
add	ecx, 32					
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+332]
add	eax, DWORD PTR _C$[ebp]
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _P$[ebp]
cmp	ecx, DWORD PTR _C$[ebp]
jne	SHORT $LN8@Ins_DELTAC
mov	edx, DWORD PTR _B$[ebp]
and	edx, 15					
sub	edx, 8
mov	DWORD PTR _B$[ebp], edx
js	SHORT $LN1@Ins_DELTAC
mov	eax, DWORD PTR _B$[ebp]
add	eax, 1
mov	DWORD PTR _B$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+334]
mov	ecx, 6
sub	ecx, edx
mov	eax, 1
shl	eax, cl
imul	eax, DWORD PTR _B$[ebp]
mov	DWORD PTR _B$[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _B$[ebp]
push	ecx
mov	edx, DWORD PTR _A$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+604]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN14@Ins_DELTAC
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+32], edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_DELTAP PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	esi, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+592]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _P$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _nump$[ebp], eax
mov	DWORD PTR _k$[ebp], 1
jmp	SHORT $LN15@Ins_DELTAP
mov	ecx, DWORD PTR _k$[ebp]
add	ecx, 1
mov	DWORD PTR _k$[ebp], ecx
mov	edx, DWORD PTR _k$[ebp]
cmp	edx, DWORD PTR _nump$[ebp]
ja	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 2
jge	SHORT $LN12@Ins_DELTAP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN11@Ins_DELTAP
push	OFFSET $SG12964
push	7506					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], 0
jmp	$Fail$18
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	cx, WORD PTR [eax+ecx*4+4]
mov	WORD PTR _A$[ebp], cx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR [edx+eax*4]
mov	DWORD PTR _B$[ebp], eax
movzx	ecx, WORD PTR _A$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jae	$LN10@Ins_DELTAP
mov	ecx, DWORD PTR _B$[ebp]
and	ecx, 240				
shr	ecx, 4
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	al, BYTE PTR [edx+368]
mov	BYTE PTR tv135[ebp], al
cmp	BYTE PTR tv135[ebp], 113		
je	SHORT $LN6@Ins_DELTAP
cmp	BYTE PTR tv135[ebp], 114		
je	SHORT $LN5@Ins_DELTAP
jmp	SHORT $LN8@Ins_DELTAP
jmp	SHORT $LN8@Ins_DELTAP
mov	ecx, DWORD PTR _C$[ebp]
add	ecx, 16					
mov	DWORD PTR _C$[ebp], ecx
jmp	SHORT $LN8@Ins_DELTAP
mov	edx, DWORD PTR _C$[ebp]
add	edx, 32					
mov	DWORD PTR _C$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+332]
add	ecx, DWORD PTR _C$[ebp]
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _P$[ebp]
cmp	edx, DWORD PTR _C$[ebp]
jne	SHORT $LN4@Ins_DELTAP
mov	eax, DWORD PTR _B$[ebp]
and	eax, 15					
sub	eax, 8
mov	DWORD PTR _B$[ebp], eax
js	SHORT $LN3@Ins_DELTAP
mov	ecx, DWORD PTR _B$[ebp]
add	ecx, 1
mov	DWORD PTR _B$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+334]
mov	ecx, 6
sub	ecx, eax
mov	edx, 1
shl	edx, cl
imul	edx, DWORD PTR _B$[ebp]
mov	DWORD PTR _B$[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _B$[ebp]
push	eax
movzx	ecx, WORD PTR _A$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 36					
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+584]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN2@Ins_DELTAP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_DELTAP
push	OFFSET $SG12983
push	7615					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN14@Ins_DELTAP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+32], edx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IUP PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+154]
test	eax, eax
jne	SHORT $LN16@Ins_IUP
jmp	$LN17@Ins_IUP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 1
je	SHORT $LN15@Ins_IUP
mov	BYTE PTR _mask$[ebp], 8
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	DWORD PTR _V$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	DWORD PTR _V$[ebp+4], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+164]
mov	DWORD PTR _V$[ebp+8], edx
jmp	SHORT $LN14@Ins_IUP
mov	BYTE PTR _mask$[ebp], 16		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+156]
add	ecx, 4
mov	DWORD PTR _V$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+160]
add	eax, 4
mov	DWORD PTR _V$[ebp+4], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+164]
add	edx, 4
mov	DWORD PTR _V$[ebp+8], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+152]
mov	DWORD PTR _V$[ebp+12], ecx
xor	edx, edx
mov	WORD PTR _contour$[ebp], dx
mov	DWORD PTR _point$[ebp], 0
movsx	eax, WORD PTR _contour$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+172]
movzx	eax, WORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+176]
sub	eax, edx
mov	DWORD PTR _end_point$[ebp], eax
mov	eax, DWORD PTR _point$[ebp]
mov	DWORD PTR _first_point$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+152]
cmp	DWORD PTR _end_point$[ebp], edx
jb	SHORT $LN9@Ins_IUP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+152]
sub	ecx, 1
mov	DWORD PTR _end_point$[ebp], ecx
mov	edx, DWORD PTR _point$[ebp]
cmp	edx, DWORD PTR _end_point$[ebp]
ja	SHORT $LN8@Ins_IUP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+168]
mov	edx, DWORD PTR _point$[ebp]
movzx	eax, BYTE PTR [ecx+edx]
movzx	ecx, BYTE PTR _mask$[ebp]
and	eax, ecx
jne	SHORT $LN8@Ins_IUP
mov	edx, DWORD PTR _point$[ebp]
add	edx, 1
mov	DWORD PTR _point$[ebp], edx
jmp	SHORT $LN9@Ins_IUP
mov	eax, DWORD PTR _point$[ebp]
cmp	eax, DWORD PTR _end_point$[ebp]
ja	$LN7@Ins_IUP
mov	ecx, DWORD PTR _point$[ebp]
mov	DWORD PTR _first_touched$[ebp], ecx
mov	edx, DWORD PTR _point$[ebp]
mov	DWORD PTR _cur_touched$[ebp], edx
mov	eax, DWORD PTR _point$[ebp]
add	eax, 1
mov	DWORD PTR _point$[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
cmp	ecx, DWORD PTR _end_point$[ebp]
ja	SHORT $LN5@Ins_IUP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+168]
mov	ecx, DWORD PTR _point$[ebp]
movzx	edx, BYTE PTR [eax+ecx]
movzx	eax, BYTE PTR _mask$[ebp]
and	edx, eax
je	SHORT $LN4@Ins_IUP
mov	ecx, DWORD PTR _point$[ebp]
push	ecx
mov	edx, DWORD PTR _cur_touched$[ebp]
push	edx
mov	eax, DWORD PTR _point$[ebp]
sub	eax, 1
push	eax
mov	ecx, DWORD PTR _cur_touched$[ebp]
add	ecx, 1
push	ecx
lea	edx, DWORD PTR _V$[ebp]
push	edx
call	__iup_worker_interpolate
add	esp, 20					
mov	eax, DWORD PTR _point$[ebp]
mov	DWORD PTR _cur_touched$[ebp], eax
mov	ecx, DWORD PTR _point$[ebp]
add	ecx, 1
mov	DWORD PTR _point$[ebp], ecx
jmp	SHORT $LN6@Ins_IUP
mov	edx, DWORD PTR _cur_touched$[ebp]
cmp	edx, DWORD PTR _first_touched$[ebp]
jne	SHORT $LN3@Ins_IUP
mov	eax, DWORD PTR _cur_touched$[ebp]
push	eax
mov	ecx, DWORD PTR _end_point$[ebp]
push	ecx
mov	edx, DWORD PTR _first_point$[ebp]
push	edx
lea	eax, DWORD PTR _V$[ebp]
push	eax
call	__iup_worker_shift
add	esp, 16					
jmp	SHORT $LN7@Ins_IUP
mov	ecx, DWORD PTR _first_touched$[ebp]
push	ecx
mov	edx, DWORD PTR _cur_touched$[ebp]
push	edx
mov	eax, DWORD PTR _end_point$[ebp]
push	eax
mov	ecx, DWORD PTR _cur_touched$[ebp]
add	ecx, 1
movzx	edx, cx
push	edx
lea	eax, DWORD PTR _V$[ebp]
push	eax
call	__iup_worker_interpolate
add	esp, 20					
cmp	DWORD PTR _first_touched$[ebp], 0
jbe	SHORT $LN7@Ins_IUP
mov	ecx, DWORD PTR _first_touched$[ebp]
push	ecx
mov	edx, DWORD PTR _cur_touched$[ebp]
push	edx
mov	eax, DWORD PTR _first_touched$[ebp]
sub	eax, 1
push	eax
mov	ecx, DWORD PTR _first_point$[ebp]
push	ecx
lea	edx, DWORD PTR _V$[ebp]
push	edx
call	__iup_worker_interpolate
add	esp, 20					
mov	ax, WORD PTR _contour$[ebp]
add	ax, 1
mov	WORD PTR _contour$[ebp], ax
movsx	ecx, WORD PTR _contour$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+154]
cmp	ecx, eax
jl	$LN13@Ins_IUP
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN21@Ins_IUP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN20@Ins_IUP
DD	-20					
DD	16					
DD	$LN19@Ins_IUP
DB	86					
DB	0
ENDP
__iup_worker_interpolate PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _p1$[ebp]
cmp	eax, DWORD PTR _p2$[ebp]
jbe	SHORT $LN19@iup_worker
jmp	$LN20@iup_worker
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR _ref1$[ebp]
cmp	edx, DWORD PTR [ecx+12]
jae	SHORT $LN17@iup_worker
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR _ref2$[ebp]
cmp	ecx, DWORD PTR [eax+12]
jb	SHORT $LN18@iup_worker
jmp	$LN20@iup_worker
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR _ref1$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _orus1$[ebp], edx
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _ref2$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _orus2$[ebp], eax
mov	ecx, DWORD PTR _orus1$[ebp]
cmp	ecx, DWORD PTR _orus2$[ebp]
jle	SHORT $LN16@iup_worker
mov	edx, DWORD PTR _orus1$[ebp]
mov	DWORD PTR _tmp_o$6[ebp], edx
mov	eax, DWORD PTR _orus2$[ebp]
mov	DWORD PTR _orus1$[ebp], eax
mov	ecx, DWORD PTR _tmp_o$6[ebp]
mov	DWORD PTR _orus2$[ebp], ecx
mov	edx, DWORD PTR _ref1$[ebp]
mov	DWORD PTR _tmp_r$5[ebp], edx
mov	eax, DWORD PTR _ref2$[ebp]
mov	DWORD PTR _ref1$[ebp], eax
mov	ecx, DWORD PTR _tmp_r$5[ebp]
mov	DWORD PTR _ref2$[ebp], ecx
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _ref1$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _org1$[ebp], edx
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _ref2$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _org2$[ebp], eax
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _ref1$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
sub	ecx, DWORD PTR _org1$[ebp]
mov	DWORD PTR _delta1$[ebp], ecx
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _ref2$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
sub	edx, DWORD PTR _org2$[ebp]
mov	DWORD PTR _delta2$[ebp], edx
mov	eax, DWORD PTR _orus1$[ebp]
cmp	eax, DWORD PTR _orus2$[ebp]
jne	SHORT $LN15@iup_worker
mov	ecx, DWORD PTR _p1$[ebp]
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN14@iup_worker
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _p2$[ebp]
ja	SHORT $LN12@iup_worker
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
mov	DWORD PTR _x$4[ebp], ecx
mov	edx, DWORD PTR _x$4[ebp]
cmp	edx, DWORD PTR _org1$[ebp]
jg	SHORT $LN11@iup_worker
mov	eax, DWORD PTR _x$4[ebp]
add	eax, DWORD PTR _delta1$[ebp]
mov	DWORD PTR _x$4[ebp], eax
jmp	SHORT $LN10@iup_worker
mov	ecx, DWORD PTR _x$4[ebp]
add	ecx, DWORD PTR _delta2$[ebp]
mov	DWORD PTR _x$4[ebp], ecx
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _x$4[ebp]
mov	DWORD PTR [eax+ecx*8], edx
jmp	SHORT $LN13@iup_worker
jmp	$LN20@iup_worker
mov	DWORD PTR _scale$3[ebp], 0
mov	BYTE PTR _scale_valid$2[ebp], 0
mov	eax, DWORD PTR _p1$[ebp]
mov	DWORD PTR _i$[ebp], eax
jmp	SHORT $LN8@iup_worker
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _p2$[ebp]
ja	$LN20@iup_worker
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _x$1[ebp], eax
mov	ecx, DWORD PTR _x$1[ebp]
cmp	ecx, DWORD PTR _org1$[ebp]
jg	SHORT $LN5@iup_worker
mov	edx, DWORD PTR _x$1[ebp]
add	edx, DWORD PTR _delta1$[ebp]
mov	DWORD PTR _x$1[ebp], edx
jmp	SHORT $LN4@iup_worker
mov	eax, DWORD PTR _x$1[ebp]
cmp	eax, DWORD PTR _org2$[ebp]
jl	SHORT $LN3@iup_worker
mov	ecx, DWORD PTR _x$1[ebp]
add	ecx, DWORD PTR _delta2$[ebp]
mov	DWORD PTR _x$1[ebp], ecx
jmp	SHORT $LN4@iup_worker
movzx	edx, BYTE PTR _scale_valid$2[ebp]
test	edx, edx
jne	SHORT $LN1@iup_worker
mov	BYTE PTR _scale_valid$2[ebp], 1
mov	eax, DWORD PTR _orus2$[ebp]
sub	eax, DWORD PTR _orus1$[ebp]
push	eax
mov	ecx, DWORD PTR _org2$[ebp]
add	ecx, DWORD PTR _delta2$[ebp]
mov	edx, DWORD PTR _org1$[ebp]
add	edx, DWORD PTR _delta1$[ebp]
sub	ecx, edx
push	ecx
call	_FT_DivFix
add	esp, 8
mov	DWORD PTR _scale$3[ebp], eax
mov	esi, DWORD PTR _org1$[ebp]
add	esi, DWORD PTR _delta1$[ebp]
mov	eax, DWORD PTR _scale$3[ebp]
push	eax
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
sub	ecx, DWORD PTR _orus1$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	DWORD PTR _x$1[ebp], esi
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _x$1[ebp]
mov	DWORD PTR [eax+ecx*8], edx
jmp	$LN7@iup_worker
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__iup_worker_shift PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx]
mov	edx, DWORD PTR _p$[ebp]
mov	esi, DWORD PTR _p$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax+esi*8]
mov	DWORD PTR _dx$[ebp], ecx
je	SHORT $LN8@iup_worker
mov	edx, DWORD PTR _p1$[ebp]
mov	DWORD PTR _i$[ebp], edx
jmp	SHORT $LN6@iup_worker
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _p$[ebp]
jae	SHORT $LN4@iup_worker
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
add	edx, DWORD PTR _dx$[ebp]
mov	eax, DWORD PTR _worker$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _i$[ebp]
mov	DWORD PTR [ecx+eax*8], edx
jmp	SHORT $LN5@iup_worker
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
jmp	SHORT $LN3@iup_worker
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _p2$[ebp]
ja	SHORT $LN8@iup_worker
mov	ecx, DWORD PTR _worker$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR [edx+eax*8]
add	ecx, DWORD PTR _dx$[ebp]
mov	edx, DWORD PTR _worker$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR [eax+edx*8], ecx
jmp	SHORT $LN2@iup_worker
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_UTP PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN4@Ins_UTP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN3@Ins_UTP
push	OFFSET $SG12825
push	7197					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_UTP
mov	BYTE PTR _mask$[ebp], 255		
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+298]
test	eax, eax
je	SHORT $LN2@Ins_UTP
movzx	ecx, BYTE PTR _mask$[ebp]
and	ecx, -9					
mov	BYTE PTR _mask$[ebp], cl
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
test	eax, eax
je	SHORT $LN1@Ins_UTP
movzx	ecx, BYTE PTR _mask$[ebp]
and	ecx, -17				
mov	BYTE PTR _mask$[ebp], cl
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+60]
movzx	eax, BYTE PTR _mask$[ebp]
movzx	ecx, BYTE PTR [ecx+edx]
and	ecx, eax
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+60]
mov	BYTE PTR [eax+edx], cl
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IP	PROC
push	ebp
mov	ebp, esp
sub	esp, 76					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-76]
mov	ecx, 19					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jge	SHORT $LN26@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN25@Ins_IP
push	OFFSET $SG12760
push	7047					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$35
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+344]
test	eax, eax
je	SHORT $LN29@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+346]
test	edx, edx
je	SHORT $LN29@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+348]
test	ecx, ecx
je	SHORT $LN29@Ins_IP
mov	DWORD PTR tv85[ebp], 0
jmp	SHORT $LN30@Ins_IP
mov	DWORD PTR tv85[ebp], 1
mov	edx, DWORD PTR tv85[ebp]
mov	DWORD PTR _twilight$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+286]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN24@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN23@Ins_IP
push	OFFSET $SG12766
push	7061					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$35
cmp	DWORD PTR _twilight$[ebp], 0
je	SHORT $LN22@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+286]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+48]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _orus_base$[ebp], eax
jmp	SHORT $LN21@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+286]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+56]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _orus_base$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+286]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _cur_base$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+286]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+44]
cmp	eax, edx
jae	SHORT $LN19@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+288]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jb	SHORT $LN20@Ins_IP
mov	DWORD PTR _old_range$[ebp], 0
mov	DWORD PTR _cur_range$[ebp], 0
jmp	$LN18@Ins_IP
cmp	DWORD PTR _twilight$[ebp], 0
je	SHORT $LN17@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+288]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR _orus_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _old_range$[ebp], eax
jmp	$LN16@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN15@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+288]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+92]
mov	edx, DWORD PTR _orus_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+576]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _old_range$[ebp], eax
jmp	$LN16@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+220]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$6[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$6[ebp+4], eax
mov	esi, esp
mov	edx, DWORD PTR _vec$6[ebp+4]
push	edx
mov	eax, DWORD PTR _vec$6[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _old_range$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+288]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+88]
mov	eax, DWORD PTR _cur_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+288]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _cur_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_range$[ebp], eax
jmp	SHORT $LN13@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], ecx
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+304], 0
jle	$Fail$35
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, 1
mov	DWORD PTR tv262[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv262[ebp]
mov	DWORD PTR [eax+28], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR tv262[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _point$5[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+116]
cmp	DWORD PTR _point$5[ebp], ecx
jb	SHORT $LN10@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN9@Ins_IP
push	OFFSET $SG12797
push	7117					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN27@Ins_IP
jmp	$LN12@Ins_IP
cmp	DWORD PTR _twilight$[ebp], 0
je	SHORT $LN8@Ins_IP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+120]
mov	ecx, DWORD PTR _point$5[ebp]
mov	edx, DWORD PTR _orus_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+120]
mov	eax, DWORD PTR _point$5[ebp]
mov	ecx, DWORD PTR _orus_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$4[ebp], eax
jmp	$LN7@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN6@Ins_IP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR _point$5[ebp]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+4]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR _point$5[ebp]
mov	edx, DWORD PTR _orus_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8]
sub	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$4[ebp], eax
jmp	SHORT $LN7@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+220]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR _point$5[ebp]
mov	eax, DWORD PTR _orus_base$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR _point$5[ebp]
mov	ecx, DWORD PTR _orus_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp+4], eax
mov	esi, esp
mov	eax, DWORD PTR _vec$1[ebp+4]
push	eax
mov	ecx, DWORD PTR _vec$1[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+576]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$4[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+124]
mov	ecx, DWORD PTR _point$5[ebp]
mov	edx, DWORD PTR _cur_base$[ebp]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+124]
mov	eax, DWORD PTR _point$5[ebp]
mov	ecx, DWORD PTR _cur_base$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_dist$3[ebp], eax
cmp	DWORD PTR _org_dist$4[ebp], 0
je	SHORT $LN4@Ins_IP
cmp	DWORD PTR _old_range$[ebp], 0
je	SHORT $LN3@Ins_IP
mov	eax, DWORD PTR _old_range$[ebp]
push	eax
mov	ecx, DWORD PTR _cur_range$[ebp]
push	ecx
mov	edx, DWORD PTR _org_dist$4[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _new_dist$2[ebp], eax
jmp	SHORT $LN2@Ins_IP
mov	eax, DWORD PTR _org_dist$4[ebp]
mov	DWORD PTR _new_dist$2[ebp], eax
jmp	SHORT $LN1@Ins_IP
mov	DWORD PTR _new_dist$2[ebp], 0
mov	ecx, DWORD PTR _new_dist$2[ebp]
sub	ecx, DWORD PTR _cur_dist$3[ebp]
mov	esi, esp
push	ecx
movzx	edx, WORD PTR _point$5[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 108				
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+584]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN12@Ins_IP
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+304], 1
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR [edx+32], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN34@Ins_IP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 76					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	2
DD	$LN33@Ins_IP
DD	-32					
DD	8
DD	$LN31@Ins_IP
DD	-64					
DD	8
DD	$LN32@Ins_IP
DB	118					
DB	101					
DB	99					
DB	0
DB	118					
DB	101					
DB	99					
DB	0
ENDP
_Ins_ALIGNPTS PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _p1$[ebp], ax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _p2$[ebp], ax
movzx	ecx, WORD PTR _p1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jae	SHORT $LN2@Ins_ALIGNP
movzx	ecx, WORD PTR _p2$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN3@Ins_ALIGNP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_ALIGNP
push	OFFSET $SG12746
push	7012					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN4@Ins_ALIGNP
movzx	edx, WORD PTR _p2$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _p1$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	esi, esp
push	ecx
movzx	edx, WORD PTR _p2$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _p1$[ebp]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+88]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [edi+eax*8]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+572]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _distance$[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _distance$[ebp]
push	edx
movzx	eax, WORD PTR _p1$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _distance$[ebp]
neg	edx
mov	esi, esp
push	edx
movzx	eax, WORD PTR _p2$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 36					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_ISECT PROC
push	ebp
mov	ebp, esp
sub	esp, 80					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-80]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _a0$[ebp], ax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _a1$[ebp], ax
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _b0$[ebp], cx
mov	edx, 4
shl	edx, 2
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _b1$[ebp], cx
movzx	edx, WORD PTR _b0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _b1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _a0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+80]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _a1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+80]
cmp	edx, ecx
jae	SHORT $LN4@Ins_ISECT
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+116]
cmp	edx, ecx
jb	SHORT $LN5@Ins_ISECT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN3@Ins_ISECT
push	OFFSET $SG12725
push	6936					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN6@Ins_ISECT
movzx	edx, WORD PTR _b1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _b0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [esi+eax*8]
mov	DWORD PTR _dbx$[ebp], ecx
movzx	edx, WORD PTR _b1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _b0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	DWORD PTR _dby$[ebp], ecx
movzx	edx, WORD PTR _a1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+88]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [esi+eax*8]
mov	DWORD PTR _dax$[ebp], ecx
movzx	edx, WORD PTR _a1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+88]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	DWORD PTR _day$[ebp], ecx
movzx	edx, WORD PTR _b0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8]
sub	ecx, DWORD PTR [esi+eax*8]
mov	DWORD PTR _dx$[ebp], ecx
movzx	edx, WORD PTR _b0$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
movzx	eax, WORD PTR _a0$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [esi+eax*8+4]
mov	DWORD PTR _dy$[ebp], ecx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+132]
movzx	edx, BYTE PTR [ecx+edx]
or	edx, 24					
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+132]
mov	BYTE PTR [ecx+eax], dl
push	64					
mov	edx, DWORD PTR _dby$[ebp]
neg	edx
push	edx
mov	eax, DWORD PTR _dax$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
push	64					
mov	ecx, DWORD PTR _dbx$[ebp]
push	ecx
mov	edx, DWORD PTR _day$[ebp]
push	edx
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _discriminant$[ebp], esi
push	64					
mov	eax, DWORD PTR _dbx$[ebp]
push	eax
mov	ecx, DWORD PTR _dax$[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
push	64					
mov	edx, DWORD PTR _dby$[ebp]
push	edx
mov	eax, DWORD PTR _day$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _dotproduct$[ebp], esi
cmp	DWORD PTR _discriminant$[ebp], 0
jge	SHORT $LN8@Ins_ISECT
mov	ecx, DWORD PTR _discriminant$[ebp]
neg	ecx
mov	DWORD PTR tv233[ebp], ecx
jmp	SHORT $LN9@Ins_ISECT
mov	edx, DWORD PTR _discriminant$[ebp]
mov	DWORD PTR tv233[ebp], edx
cmp	DWORD PTR _dotproduct$[ebp], 0
jge	SHORT $LN10@Ins_ISECT
mov	eax, DWORD PTR _dotproduct$[ebp]
neg	eax
mov	DWORD PTR tv237[ebp], eax
jmp	SHORT $LN11@Ins_ISECT
mov	ecx, DWORD PTR _dotproduct$[ebp]
mov	DWORD PTR tv237[ebp], ecx
imul	edx, DWORD PTR tv233[ebp], 19
cmp	edx, DWORD PTR tv237[ebp]
jle	$LN2@Ins_ISECT
push	64					
mov	eax, DWORD PTR _dby$[ebp]
neg	eax
push	eax
mov	ecx, DWORD PTR _dx$[ebp]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	esi, eax
push	64					
mov	edx, DWORD PTR _dbx$[ebp]
push	edx
mov	eax, DWORD PTR _dy$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	esi, eax
mov	DWORD PTR _val$[ebp], esi
mov	ecx, DWORD PTR _discriminant$[ebp]
push	ecx
mov	edx, DWORD PTR _dax$[ebp]
push	edx
mov	eax, DWORD PTR _val$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _R$[ebp], eax
mov	ecx, DWORD PTR _discriminant$[ebp]
push	ecx
mov	edx, DWORD PTR _day$[ebp]
push	edx
mov	eax, DWORD PTR _val$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	DWORD PTR _R$[ebp+4], eax
movzx	ecx, WORD PTR _a0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	ecx, DWORD PTR [eax+ecx*8]
add	ecx, DWORD PTR _R$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+124]
mov	DWORD PTR [eax+edx*8], ecx
movzx	ecx, WORD PTR _a0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	ecx, DWORD PTR [eax+ecx*8+4]
add	ecx, DWORD PTR _R$[ebp+4]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+124]
mov	DWORD PTR [eax+edx*8+4], ecx
jmp	$LN6@Ins_ISECT
movzx	ecx, WORD PTR _a0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
movzx	edx, WORD PTR _a1$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	eax, DWORD PTR [eax+ecx*8]
add	eax, DWORD PTR [esi+edx*8]
movzx	ecx, WORD PTR _b0$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+52]
add	eax, DWORD PTR [edx+ecx*8]
movzx	ecx, WORD PTR _b1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+52]
add	eax, DWORD PTR [edx+ecx*8]
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+124]
mov	DWORD PTR [edx+ecx*8], eax
movzx	eax, WORD PTR _a0$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
movzx	ecx, WORD PTR _a1$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	eax, DWORD PTR [edx+eax*8+4]
add	eax, DWORD PTR [esi+ecx*8+4]
movzx	edx, WORD PTR _b0$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+52]
add	eax, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _b1$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+52]
add	eax, DWORD PTR [ecx+edx*8+4]
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+124]
mov	DWORD PTR [ecx+edx*8+4], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@Ins_ISECT
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 80					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN13@Ins_ISECT
DD	-68					
DD	8
DD	$LN12@Ins_ISECT
DB	82					
DB	0
ENDP
_Ins_ALIGNRP PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
push	edi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jl	SHORT $LN7@Ins_ALIGNR
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+284]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+44]
cmp	eax, edx
jb	SHORT $LN5@Ins_ALIGNR
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN6@Ins_ALIGNR
push	OFFSET $SG12674
push	6863					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$Fail$11
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+304], 0
jle	$Fail$11
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+28], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	dx, WORD PTR [ecx+edx*4]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jb	SHORT $LN3@Ins_ALIGNR
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_ALIGNR
push	OFFSET $SG12684
push	6877					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN9@Ins_ALIGNR
jmp	$LN1@Ins_ALIGNR
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	eax, DWORD PTR _distance$[ebp]
neg	eax
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _point$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 72					
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+584]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], ecx
jmp	$LN5@Ins_ALIGNR
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+304], 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR [ecx+32], eax
pop	edi
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MIRP PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+308]
mov	DWORD PTR _minimum_distance$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+320]
mov	DWORD PTR _control_value_cutin$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _point$[ebp], cx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
add	ecx, 1
mov	DWORD PTR _cvtEntry$[ebp], ecx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+80]
cmp	edx, ecx
jae	SHORT $LN20@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+380]
add	eax, 1
cmp	DWORD PTR _cvtEntry$[ebp], eax
jae	SHORT $LN20@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jb	SHORT $LN21@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN19@Ins_MIRP
push	OFFSET $SG12639
push	6651					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$28
cmp	DWORD PTR _cvtEntry$[ebp], 0
jne	SHORT $LN18@Ins_MIRP
mov	DWORD PTR _cvt_dist$[ebp], 0
jmp	SHORT $LN17@Ins_MIRP
mov	edx, DWORD PTR _cvtEntry$[ebp]
sub	edx, 1
mov	esi, esp
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+596]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cvt_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _cvt_dist$[ebp]
sub	ecx, DWORD PTR [eax+328]
jns	SHORT $LN24@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _cvt_dist$[ebp]
sub	eax, DWORD PTR [edx+328]
neg	eax
mov	DWORD PTR tv138[ebp], eax
jmp	SHORT $LN25@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _cvt_dist$[ebp]
sub	edx, DWORD PTR [ecx+328]
mov	DWORD PTR tv138[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv138[ebp]
cmp	ecx, DWORD PTR [eax+324]
jge	SHORT $LN16@Ins_MIRP
cmp	DWORD PTR _cvt_dist$[ebp], 0
jl	SHORT $LN15@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+328]
mov	DWORD PTR _cvt_dist$[ebp], eax
jmp	SHORT $LN16@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+328]
neg	edx
mov	DWORD PTR _cvt_dist$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+346]
test	ecx, ecx
jne	$LN13@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	esi, WORD PTR [edx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [eax+48]
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
push	edx
mov	eax, DWORD PTR _cvt_dist$[ebp]
push	eax
call	_TT_MulFix14
add	esp, 8
add	eax, DWORD PTR [edi+esi*8]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+84]
mov	DWORD PTR [edx+ecx*8], eax
mov	eax, DWORD PTR _exc$[ebp]
movzx	esi, WORD PTR [eax+284]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [ecx+48]
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
push	eax
mov	ecx, DWORD PTR _cvt_dist$[ebp]
push	ecx
call	_TT_MulFix14
add	esp, 8
add	eax, DWORD PTR [edi+esi*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+84]
mov	DWORD PTR [ecx+edx*8+4], eax
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+48]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+48]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+316]
test	ecx, ecx
je	SHORT $LN12@Ins_MIRP
mov	edx, DWORD PTR _org_dist$[ebp]
xor	edx, DWORD PTR _cvt_dist$[ebp]
jge	SHORT $LN12@Ins_MIRP
mov	eax, DWORD PTR _cvt_dist$[ebp]
neg	eax
mov	DWORD PTR _cvt_dist$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 4
je	$LN10@Ins_MIRP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+344]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+346]
cmp	ecx, eax
jne	SHORT $LN9@Ins_MIRP
mov	ecx, DWORD PTR _cvt_dist$[ebp]
sub	ecx, DWORD PTR _org_dist$[ebp]
jns	SHORT $LN26@Ins_MIRP
mov	edx, DWORD PTR _cvt_dist$[ebp]
sub	edx, DWORD PTR _org_dist$[ebp]
neg	edx
mov	DWORD PTR tv269[ebp], edx
jmp	SHORT $LN27@Ins_MIRP
mov	eax, DWORD PTR _cvt_dist$[ebp]
sub	eax, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR tv269[ebp], eax
mov	ecx, DWORD PTR tv269[ebp]
cmp	ecx, DWORD PTR _control_value_cutin$[ebp]
jle	SHORT $LN9@Ins_MIRP
mov	edx, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR _cvt_dist$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 3
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+ecx*4+264]
push	eax
mov	ecx, DWORD PTR _cvt_dist$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
jmp	SHORT $LN7@Ins_MIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 3
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+264]
push	edx
mov	eax, DWORD PTR _cvt_dist$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Round_None
add	esp, 12					
mov	DWORD PTR _distance$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 8
je	SHORT $LN6@Ins_MIRP
cmp	DWORD PTR _org_dist$[ebp], 0
jl	SHORT $LN5@Ins_MIRP
mov	ecx, DWORD PTR _distance$[ebp]
cmp	ecx, DWORD PTR _minimum_distance$[ebp]
jge	SHORT $LN4@Ins_MIRP
mov	edx, DWORD PTR _minimum_distance$[ebp]
mov	DWORD PTR _distance$[ebp], edx
jmp	SHORT $LN6@Ins_MIRP
mov	eax, DWORD PTR _minimum_distance$[ebp]
neg	eax
cmp	DWORD PTR _distance$[ebp], eax
jle	SHORT $LN6@Ins_MIRP
mov	ecx, DWORD PTR _minimum_distance$[ebp]
neg	ecx
mov	DWORD PTR _distance$[ebp], ecx
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _cur_dist$[ebp]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR [eax+284]
mov	WORD PTR [edx+286], cx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 16					
je	SHORT $LN1@Ins_MIRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+284], dx
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _point$[ebp]
mov	WORD PTR [eax+288], cx
pop	edi
pop	esi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MDRP PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+308]
mov	DWORD PTR _minimum_distance$[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jae	SHORT $LN18@Ins_MDRP
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+284]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN19@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN17@Ins_MDRP
push	OFFSET $SG12585
push	6500					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$27
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+344]
test	eax, eax
je	SHORT $LN15@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+346]
test	edx, edx
jne	SHORT $LN16@Ins_MDRP
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _vec1$5[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec2$4[ebp], edx
mov	eax, DWORD PTR _vec1$5[ebp]
mov	ecx, DWORD PTR _vec2$4[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	esi, esp
push	edx
mov	eax, DWORD PTR _vec1$5[ebp]
mov	ecx, DWORD PTR _vec2$4[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
jmp	$LN14@Ins_MDRP
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+92]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _vec1$3[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+56]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec2$2[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN13@Ins_MDRP
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	esi, esp
push	edx
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _org_dist$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _org_dist$[ebp], eax
jmp	SHORT $LN14@Ins_MDRP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _vec1$3[ebp]
mov	eax, DWORD PTR _vec2$2[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _vec1$3[ebp]
mov	edx, DWORD PTR _vec2$2[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp+4], eax
mov	esi, esp
mov	ecx, DWORD PTR _vec$1[ebp+4]
push	ecx
mov	edx, DWORD PTR _vec$1[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _org_dist$[ebp]
sub	ecx, DWORD PTR [eax+328]
jns	SHORT $LN22@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _org_dist$[ebp]
sub	eax, DWORD PTR [edx+328]
neg	eax
mov	DWORD PTR tv197[ebp], eax
jmp	SHORT $LN23@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _org_dist$[ebp]
sub	edx, DWORD PTR [ecx+328]
mov	DWORD PTR tv197[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv197[ebp]
cmp	ecx, DWORD PTR [eax+324]
jge	SHORT $LN11@Ins_MDRP
cmp	DWORD PTR _org_dist$[ebp], 0
jl	SHORT $LN10@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+328]
mov	DWORD PTR _org_dist$[ebp], eax
jmp	SHORT $LN11@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+328]
neg	edx
mov	DWORD PTR _org_dist$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 4
je	SHORT $LN8@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 3
mov	esi, esp
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4+264]
push	edx
mov	eax, DWORD PTR _org_dist$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+568]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
jmp	SHORT $LN7@Ins_MDRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 3
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+edx*4+264]
push	ecx
mov	edx, DWORD PTR _org_dist$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Round_None
add	esp, 12					
mov	DWORD PTR _distance$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 8
je	SHORT $LN6@Ins_MDRP
cmp	DWORD PTR _org_dist$[ebp], 0
jl	SHORT $LN5@Ins_MDRP
mov	eax, DWORD PTR _distance$[ebp]
cmp	eax, DWORD PTR _minimum_distance$[ebp]
jge	SHORT $LN4@Ins_MDRP
mov	ecx, DWORD PTR _minimum_distance$[ebp]
mov	DWORD PTR _distance$[ebp], ecx
jmp	SHORT $LN6@Ins_MDRP
mov	edx, DWORD PTR _minimum_distance$[ebp]
neg	edx
cmp	DWORD PTR _distance$[ebp], edx
jle	SHORT $LN6@Ins_MDRP
mov	eax, DWORD PTR _minimum_distance$[ebp]
neg	eax
mov	DWORD PTR _distance$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	edx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [edx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [esi+edx*8+4]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	edx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [edx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	eax, DWORD PTR [eax+ecx*8]
sub	eax, DWORD PTR [edi+edx*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+572]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR _org_dist$[ebp]
mov	esi, esp
push	ecx
movzx	edx, WORD PTR _point$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 72					
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+584]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR [edx+284]
mov	WORD PTR [ecx+286], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+288], dx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 16					
je	SHORT $LN20@Ins_MDRP
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+284], ax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@Ins_MDRP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN25@Ins_MDRP
DD	-44					
DD	8
DD	$LN24@Ins_MDRP
DB	118					
DB	101					
DB	99					
DB	0
ENDP
_Ins_MIAP PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+320]
mov	DWORD PTR _control_value_cutin$[ebp], ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _cvtEntry$[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+44]
cmp	eax, edx
jae	SHORT $LN5@Ins_MIAP
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _cvtEntry$[ebp]
cmp	ecx, DWORD PTR [eax+380]
jb	SHORT $LN6@Ins_MIAP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN4@Ins_MIAP
push	OFFSET $SG12560
push	6394					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$11
mov	esi, esp
mov	edx, DWORD PTR _cvtEntry$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+596]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+344]
test	ecx, ecx
jne	SHORT $LN3@Ins_MIAP
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+298]
push	eax
mov	ecx, DWORD PTR _distance$[ebp]
push	ecx
call	_TT_MulFix14
add	esp, 8
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+48]
mov	DWORD PTR [ecx+edx*8], eax
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
push	eax
mov	ecx, DWORD PTR _distance$[ebp]
push	ecx
call	_TT_MulFix14
add	esp, 8
movzx	edx, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+48]
mov	DWORD PTR [ecx+edx*8+4], eax
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+52]
mov	esi, esp
mov	eax, DWORD PTR [edx+eax*8+4]
push	eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
mov	ecx, DWORD PTR [eax+ecx*8]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+572]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _org_dist$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 1
je	SHORT $LN2@Ins_MIAP
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR _org_dist$[ebp]
jns	SHORT $LN9@Ins_MIAP
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _org_dist$[ebp]
neg	edx
mov	DWORD PTR tv176[ebp], edx
jmp	SHORT $LN10@Ins_MIAP
mov	eax, DWORD PTR _distance$[ebp]
sub	eax, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR tv176[ebp], eax
mov	ecx, DWORD PTR tv176[ebp]
cmp	ecx, DWORD PTR _control_value_cutin$[ebp]
jle	SHORT $LN1@Ins_MIAP
mov	edx, DWORD PTR _org_dist$[ebp]
mov	DWORD PTR _distance$[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+ecx+264]
push	eax
mov	ecx, DWORD PTR _distance$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _org_dist$[ebp]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 36					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+284], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+286], dx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MDAP PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jb	SHORT $LN4@Ins_MDAP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN3@Ins_MDAP
push	OFFSET $SG12537
push	6331					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN5@Ins_MDAP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 1
je	SHORT $LN2@Ins_MDAP
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
mov	esi, esp
mov	ecx, DWORD PTR [eax+ecx*8+4]
push	ecx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+52]
mov	edx, DWORD PTR [ecx+edx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _cur_dist$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+ecx+264]
push	eax
mov	ecx, DWORD PTR _cur_dist$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
sub	eax, DWORD PTR _cur_dist$[ebp]
mov	DWORD PTR _distance$[ebp], eax
jmp	SHORT $LN1@Ins_MDAP
mov	DWORD PTR _distance$[ebp], 0
mov	esi, esp
mov	edx, DWORD PTR _distance$[ebp]
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 36					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+284], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _point$[ebp]
mov	WORD PTR [ecx+286], dx
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MSIRP PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
push	edi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _point$[ebp], ax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jae	SHORT $LN4@Ins_MSIRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+44]
cmp	edx, ecx
jb	SHORT $LN5@Ins_MSIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN3@Ins_MSIRP
push	OFFSET $SG12520
push	6277					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN6@Ins_MSIRP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+346]
test	eax, eax
jne	$LN2@Ins_MSIRP
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+284]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+84]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
mov	eax, 4
shl	eax, 0
mov	esi, esp
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+588]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _point$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+52]
mov	edx, DWORD PTR [edx+eax*8+4]
sub	edx, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [ecx+284]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+52]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [edi+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _distance$[ebp], eax
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
sub	edx, DWORD PTR _distance$[ebp]
mov	esi, esp
push	edx
movzx	eax, WORD PTR _point$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 72					
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+584]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR [eax+284]
mov	WORD PTR [edx+286], cx
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _point$[ebp]
mov	WORD PTR [edx+288], ax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
and	edx, 1
je	SHORT $LN6@Ins_MSIRP
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _point$[ebp]
mov	WORD PTR [eax+284], cx
pop	edi
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SHPIX PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
add	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+16], ecx
jge	SHORT $LN7@Ins_SHPIX
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN6@Ins_SHPIX
push	OFFSET $SG12490
push	6110					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$Fail$10
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _dx$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _dy$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+304], 0
jle	$Fail$10
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+28], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	dx, WORD PTR [ecx+edx*4]
mov	WORD PTR _point$[ebp], dx
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	eax, edx
jb	SHORT $LN3@Ins_SHPIX
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_SHPIX
push	OFFSET $SG12502
push	6145					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $LN8@Ins_SHPIX
jmp	SHORT $LN1@Ins_SHPIX
push	1
mov	eax, DWORD PTR _dy$[ebp]
push	eax
mov	ecx, DWORD PTR _dx$[ebp]
push	ecx
movzx	edx, WORD PTR _point$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Move_Zp2_Point
add	esp, 20					
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+304]
sub	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+304], edx
jmp	$LN5@Ins_SHPIX
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+304], 1
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR [edx+32], ecx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SHZ PROC
push	ebp
mov	ebp, esp
sub	esp, 88					
push	edi
lea	edi, DWORD PTR [ebp-88]
mov	ecx, 22					
mov	eax, -858993460				
rep stosd
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 2
jb	SHORT $LN12@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN11@Ins_SHZ
push	OFFSET $SG12466
push	6064					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN13@Ins_SHZ
lea	eax, DWORD PTR _refp$[ebp]
push	eax
lea	ecx, DWORD PTR _zp$[ebp]
push	ecx
lea	edx, DWORD PTR _dy$[ebp]
push	edx
lea	eax, DWORD PTR _dx$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Point_Displacement
add	esp, 20					
movzx	edx, al
test	edx, edx
je	SHORT $LN10@Ins_SHZ
jmp	$LN13@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+348]
test	ecx, ecx
jne	SHORT $LN9@Ins_SHZ
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR [edx+116]
mov	WORD PTR _limit$[ebp], ax
jmp	SHORT $LN8@Ins_SHZ
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+348]
cmp	edx, 1
jne	SHORT $LN7@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+118]
test	ecx, ecx
jle	SHORT $LN7@Ins_SHZ
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+118]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+136]
movzx	eax, WORD PTR [edx+eax*2-2]
add	eax, 1
mov	WORD PTR _limit$[ebp], ax
jmp	SHORT $LN8@Ins_SHZ
xor	ecx, ecx
mov	WORD PTR _limit$[ebp], cx
xor	edx, edx
mov	WORD PTR _i$[ebp], dx
jmp	SHORT $LN5@Ins_SHZ
mov	ax, WORD PTR _i$[ebp]
add	ax, 1
mov	WORD PTR _i$[ebp], ax
movzx	ecx, WORD PTR _i$[ebp]
movzx	edx, WORD PTR _limit$[ebp]
cmp	ecx, edx
jge	SHORT $LN13@Ins_SHZ
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _zp$[ebp+16]
cmp	ecx, DWORD PTR [eax+124]
jne	SHORT $LN1@Ins_SHZ
movzx	edx, WORD PTR _refp$[ebp]
movzx	eax, WORD PTR _i$[ebp]
cmp	edx, eax
je	SHORT $LN2@Ins_SHZ
push	0
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
movzx	eax, WORD PTR _i$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Move_Zp2_Point
add	esp, 20					
jmp	SHORT $LN4@Ins_SHZ
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@Ins_SHZ
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 88					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN19@Ins_SHZ
DD	-40					
DD	36					
DD	$LN15@Ins_SHZ
DD	-52					
DD	2
DD	$LN16@Ins_SHZ
DD	-64					
DD	4
DD	$LN17@Ins_SHZ
DD	-76					
DD	4
DD	$LN18@Ins_SHZ
DB	100					
DB	121					
DB	0
DB	100					
DB	120					
DB	0
DB	114					
DB	101					
DB	102					
DB	112					
DB	0
DB	122					
DB	112					
DB	0
ENDP
_Ins_SHC PROC
push	ebp
mov	ebp, esp
sub	esp, 104				
push	edi
lea	edi, DWORD PTR [ebp-104]
mov	ecx, 26					
mov	eax, -858993460				
rep stosd
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _contour$[ebp], ax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+348]
test	edx, edx
jne	SHORT $LN15@Ins_SHC
mov	DWORD PTR tv71[ebp], 1
jmp	SHORT $LN16@Ins_SHC
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+118]
mov	DWORD PTR tv71[ebp], ecx
mov	dx, WORD PTR tv71[ebp]
mov	WORD PTR _bounds$[ebp], dx
movsx	eax, WORD PTR _contour$[ebp]
movsx	ecx, WORD PTR _bounds$[ebp]
cmp	eax, ecx
jb	SHORT $LN12@Ins_SHC
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN11@Ins_SHC
push	OFFSET $SG12437
push	6016					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN13@Ins_SHC
lea	edx, DWORD PTR _refp$[ebp]
push	edx
lea	eax, DWORD PTR _zp$[ebp]
push	eax
lea	ecx, DWORD PTR _dy$[ebp]
push	ecx
lea	edx, DWORD PTR _dx$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Point_Displacement
add	esp, 20					
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN10@Ins_SHC
jmp	$LN13@Ins_SHC
movsx	edx, WORD PTR _contour$[ebp]
test	edx, edx
jne	SHORT $LN9@Ins_SHC
xor	eax, eax
mov	WORD PTR _start$[ebp], ax
jmp	SHORT $LN8@Ins_SHC
movsx	ecx, WORD PTR _contour$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+136]
movzx	ecx, WORD PTR [eax+ecx*2-2]
add	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+140]
sub	ecx, eax
mov	WORD PTR _start$[ebp], cx
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+348]
test	edx, edx
jne	SHORT $LN7@Ins_SHC
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR [eax+116]
mov	WORD PTR _limit$[ebp], cx
jmp	SHORT $LN6@Ins_SHC
movsx	edx, WORD PTR _contour$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+136]
movzx	edx, WORD PTR [ecx+edx*2]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+140]
sub	edx, ecx
add	edx, 1
mov	WORD PTR _limit$[ebp], dx
mov	dx, WORD PTR _start$[ebp]
mov	WORD PTR _i$[ebp], dx
jmp	SHORT $LN5@Ins_SHC
mov	ax, WORD PTR _i$[ebp]
add	ax, 1
mov	WORD PTR _i$[ebp], ax
movzx	ecx, WORD PTR _i$[ebp]
movzx	edx, WORD PTR _limit$[ebp]
cmp	ecx, edx
jge	SHORT $LN13@Ins_SHC
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _zp$[ebp+16]
cmp	ecx, DWORD PTR [eax+124]
jne	SHORT $LN1@Ins_SHC
movzx	edx, WORD PTR _refp$[ebp]
movzx	eax, WORD PTR _i$[ebp]
cmp	edx, eax
je	SHORT $LN2@Ins_SHC
push	1
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
movzx	eax, WORD PTR _i$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Move_Zp2_Point
add	esp, 20					
jmp	SHORT $LN4@Ins_SHC
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@Ins_SHC
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 104				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	4
DD	$LN21@Ins_SHC
DD	-40					
DD	36					
DD	$LN17@Ins_SHC
DD	-52					
DD	2
DD	$LN18@Ins_SHC
DD	-64					
DD	4
DD	$LN19@Ins_SHC
DD	-76					
DD	4
DD	$LN20@Ins_SHC
DB	100					
DB	121					
DB	0
DB	100					
DB	120					
DB	0
DB	114					
DB	101					
DB	102					
DB	112					
DB	0
DB	122					
DB	112					
DB	0
ENDP
_Ins_SHP PROC
push	ebp
mov	ebp, esp
sub	esp, 84					
push	edi
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 21					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jge	SHORT $LN8@Ins_SHP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN7@Ins_SHP
push	OFFSET $SG12404
push	5950					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$17
lea	edx, DWORD PTR _refp$[ebp]
push	edx
lea	eax, DWORD PTR _zp$[ebp]
push	eax
lea	ecx, DWORD PTR _dy$[ebp]
push	ecx
lea	edx, DWORD PTR _dx$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Point_Displacement
add	esp, 20					
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN5@Ins_SHP
jmp	$LN9@Ins_SHP
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+304], 0
jle	$Fail$17
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	cx, WORD PTR [eax+ecx*4]
mov	WORD PTR _point$[ebp], cx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+116]
cmp	edx, ecx
jb	SHORT $LN3@Ins_SHP
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN2@Ins_SHP
push	OFFSET $SG12415
push	5966					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN9@Ins_SHP
jmp	SHORT $LN1@Ins_SHP
push	1
mov	edx, DWORD PTR _dy$[ebp]
push	edx
mov	eax, DWORD PTR _dx$[ebp]
push	eax
movzx	ecx, WORD PTR _point$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Move_Zp2_Point
add	esp, 20					
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+304]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], ecx
jmp	$LN5@Ins_SHP
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+304], 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR [ecx+32], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@Ins_SHP
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	4
DD	$LN15@Ins_SHP
DD	-40					
DD	36					
DD	$LN11@Ins_SHP
DD	-52					
DD	2
DD	$LN12@Ins_SHP
DD	-64					
DD	4
DD	$LN13@Ins_SHP
DD	-76					
DD	4
DD	$LN14@Ins_SHP
DB	100					
DB	121					
DB	0
DB	100					
DB	120					
DB	0
DB	114					
DB	101					
DB	102					
DB	112					
DB	0
DB	122					
DB	112					
DB	0
ENDP
_Move_Zp2_Point PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
test	ecx, ecx
je	SHORT $LN4@Move_Zp2_P
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	edx, DWORD PTR [ecx+edx*8]
add	edx, DWORD PTR _dx$[ebp]
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+124]
mov	DWORD PTR [ecx+eax*8], edx
movzx	edx, BYTE PTR _touch$[ebp]
test	edx, edx
je	SHORT $LN4@Move_Zp2_P
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 8
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+132]
mov	BYTE PTR [edx+ecx], al
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
test	ecx, ecx
je	SHORT $LN5@Move_Zp2_P
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	edx, DWORD PTR [ecx+edx*8+4]
add	edx, DWORD PTR _dy$[ebp]
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+124]
mov	DWORD PTR [ecx+eax*8+4], edx
movzx	edx, BYTE PTR _touch$[ebp]
test	edx, edx
je	SHORT $LN5@Move_Zp2_P
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+132]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 16					
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+132]
mov	BYTE PTR [edx+ecx], al
pop	ebp
ret	0
ENDP
_Compute_Point_Displacement PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 1
je	SHORT $LN4@Compute_Po
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 36					
mov	ecx, 9
lea	edi, DWORD PTR _zp$[ebp]
rep movsd
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR [edx+286]
mov	WORD PTR _p$[ebp], ax
jmp	SHORT $LN3@Compute_Po
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 72					
mov	ecx, 9
lea	edi, DWORD PTR _zp$[ebp]
rep movsd
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR [ecx+288]
mov	WORD PTR _p$[ebp], dx
movzx	eax, WORD PTR _p$[ebp]
movzx	ecx, WORD PTR _zp$[ebp+8]
cmp	eax, ecx
jb	SHORT $LN2@Compute_Po
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN1@Compute_Po
push	OFFSET $SG12372
push	5852					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
xor	edx, edx
mov	eax, DWORD PTR _refp$[ebp]
mov	WORD PTR [eax], dx
mov	al, 1
jmp	$LN5@Compute_Po
mov	ecx, 9
lea	esi, DWORD PTR _zp$[ebp]
mov	edi, DWORD PTR _zone$[ebp]
rep movsd
mov	ecx, DWORD PTR _refp$[ebp]
mov	dx, WORD PTR _p$[ebp]
mov	WORD PTR [ecx], dx
movzx	eax, WORD PTR _p$[ebp]
movzx	ecx, WORD PTR _p$[ebp]
mov	edx, DWORD PTR _zp$[ebp+16]
mov	esi, DWORD PTR _zp$[ebp+12]
mov	eax, DWORD PTR [edx+eax*8+4]
sub	eax, DWORD PTR [esi+ecx*8+4]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _p$[ebp]
movzx	edx, WORD PTR _p$[ebp]
mov	eax, DWORD PTR _zp$[ebp+16]
mov	edi, DWORD PTR _zp$[ebp+12]
mov	ecx, DWORD PTR [eax+ecx*8]
sub	ecx, DWORD PTR [edi+edx*8]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+572]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _d$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+564]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
push	edx
mov	eax, DWORD PTR _d$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+564]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+300]
push	edx
mov	eax, DWORD PTR _d$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
mov	ecx, DWORD PTR _y$[ebp]
mov	DWORD PTR [ecx], eax
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@Compute_Po
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN8@Compute_Po
DD	-40					
DD	36					
DD	$LN7@Compute_Po
DB	122					
DB	112					
DB	0
ENDP
_Ins_FLIPRGOFF PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _K$[ebp], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jae	SHORT $LN5@Ins_FLIPRG
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jb	SHORT $LN6@Ins_FLIPRG
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN4@Ins_FLIPRG
push	OFFSET $SG12347
push	5818					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_FLIPRG
mov	dx, WORD PTR _L$[ebp]
mov	WORD PTR _I$[ebp], dx
jmp	SHORT $LN3@Ins_FLIPRG
mov	ax, WORD PTR _I$[ebp]
add	ax, 1
mov	WORD PTR _I$[ebp], ax
movzx	ecx, WORD PTR _I$[ebp]
movzx	edx, WORD PTR _K$[ebp]
cmp	ecx, edx
jg	SHORT $LN7@Ins_FLIPRG
movzx	eax, WORD PTR _I$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+168]
movzx	eax, BYTE PTR [edx+eax]
and	eax, -2					
movzx	ecx, WORD PTR _I$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+168]
mov	BYTE PTR [edx+ecx], al
jmp	SHORT $LN2@Ins_FLIPRG
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_FLIPRGON PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _K$[ebp], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jae	SHORT $LN5@Ins_FLIPRG
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+152]
cmp	ecx, eax
jb	SHORT $LN6@Ins_FLIPRG
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN4@Ins_FLIPRG
push	OFFSET $SG12325
push	5790					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_FLIPRG
mov	dx, WORD PTR _L$[ebp]
mov	WORD PTR _I$[ebp], dx
jmp	SHORT $LN3@Ins_FLIPRG
mov	ax, WORD PTR _I$[ebp]
add	ax, 1
mov	WORD PTR _I$[ebp], ax
movzx	ecx, WORD PTR _I$[ebp]
movzx	edx, WORD PTR _K$[ebp]
cmp	ecx, edx
jg	SHORT $LN7@Ins_FLIPRG
movzx	eax, WORD PTR _I$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+168]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 1
movzx	ecx, WORD PTR _I$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [edx+168]
mov	BYTE PTR [edx+ecx], al
jmp	SHORT $LN2@Ins_FLIPRG
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_FLIPPT PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+16]
cmp	ecx, DWORD PTR [eax+304]
jge	SHORT $LN5@Ins_FLIPPT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN6@Ins_FLIPPT
push	OFFSET $SG12295
push	5741					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$Fail$10
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+304], 0
jle	$Fail$10
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+28], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	cx, WORD PTR [eax+ecx*4]
mov	WORD PTR _point$[ebp], cx
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+152]
cmp	edx, ecx
jb	SHORT $LN3@Ins_FLIPPT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN2@Ins_FLIPPT
push	OFFSET $SG12305
push	5755					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN8@Ins_FLIPPT
jmp	SHORT $LN1@Ins_FLIPPT
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+168]
movzx	edx, BYTE PTR [ecx+edx]
xor	edx, 1
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+168]
mov	BYTE PTR [ecx+eax], dl
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+304]
sub	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+304], eax
jmp	$LN5@Ins_FLIPPT
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+304], 1
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+32], edx
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SCANTYPE PROC
push	ebp
mov	ebp, esp
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 0
jl	SHORT $LN2@Ins_SCANTY
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+340], ecx
pop	ebp
ret	0
ENDP
_Ins_SCANCTRL PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 255				
mov	DWORD PTR _A$[ebp], eax
cmp	DWORD PTR _A$[ebp], 255			
jne	SHORT $LN9@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+337], 1
jmp	$LN10@Ins_SCANCT
jmp	SHORT $LN8@Ins_SCANCT
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN8@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+337], 0
jmp	$LN10@Ins_SCANCT
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 256				
je	SHORT $LN6@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+252]
cmp	edx, DWORD PTR _A$[ebp]
jg	SHORT $LN6@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+337], 1
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, 512				
je	SHORT $LN5@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+281]
test	eax, eax
je	SHORT $LN5@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+337], 1
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
and	edx, 1024				
je	SHORT $LN4@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+282]
test	ecx, ecx
je	SHORT $LN4@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+337], 1
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
and	eax, 2048				
je	SHORT $LN3@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+252]
cmp	edx, DWORD PTR _A$[ebp]
jle	SHORT $LN3@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+337], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, 4096				
je	SHORT $LN2@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+281]
test	eax, eax
je	SHORT $LN2@Ins_SCANCT
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+337], 0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
and	edx, 8192				
je	SHORT $LN10@Ins_SCANCT
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+282]
test	ecx, ecx
je	SHORT $LN10@Ins_SCANCT
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+337], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_INSTCTRL PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _K$[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _L$[ebp], eax
cmp	DWORD PTR _K$[ebp], 1
jl	SHORT $LN3@Ins_INSTCT
cmp	DWORD PTR _K$[ebp], 2
jle	SHORT $LN4@Ins_INSTCT
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN2@Ins_INSTCT
push	OFFSET $SG12255
push	5643					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_INSTCT
cmp	DWORD PTR _L$[ebp], 0
je	SHORT $LN1@Ins_INSTCT
mov	edx, DWORD PTR _K$[ebp]
mov	DWORD PTR _L$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+336]
movzx	edx, BYTE PTR _K$[ebp]
not	edx
and	ecx, edx
movzx	eax, BYTE PTR _L$[ebp]
or	ecx, eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+336], cl
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZPS PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZPS
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZPS
jmp	SHORT $LN2@Ins_SZPS
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZPS
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZPS
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZPS
push	OFFSET $SG12240
push	5612					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZPS
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+344], ax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+edx]
mov	WORD PTR [eax+346], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+ecx]
mov	WORD PTR [edx+348], cx
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZP2 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZP2
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZP2
jmp	SHORT $LN2@Ins_SZP2
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP2
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP2
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZP2
push	OFFSET $SG12223
push	5583					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZP2
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+348], ax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZP1 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZP1
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZP1
jmp	SHORT $LN2@Ins_SZP1
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP1
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP1
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZP1
push	OFFSET $SG12206
push	5554					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZP1
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+346], ax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SZP0 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv66[ebp], eax
cmp	DWORD PTR tv66[ebp], 0
je	SHORT $LN4@Ins_SZP0
cmp	DWORD PTR tv66[ebp], 1
je	SHORT $LN3@Ins_SZP0
jmp	SHORT $LN2@Ins_SZP0
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 180				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP0
mov	esi, DWORD PTR _exc$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exc$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
jmp	SHORT $LN5@Ins_SZP0
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@Ins_SZP0
push	OFFSET $SG12189
push	5525					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN7@Ins_SZP0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+344], ax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SDPVTL PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
mov	DWORD PTR _aOpc$[ebp], ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _p1$[ebp], cx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _p2$[ebp], dx
movzx	eax, WORD PTR _p2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jae	SHORT $LN6@Ins_SDPVTL
movzx	eax, WORD PTR _p1$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	eax, edx
jb	SHORT $LN7@Ins_SDPVTL
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN5@Ins_SDPVTL
push	OFFSET $SG12165
push	5441					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN8@Ins_SDPVTL
movzx	eax, WORD PTR _p2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _v1$4[ebp], eax
movzx	ecx, WORD PTR _p1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+120]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _v2$3[ebp], ecx
mov	edx, DWORD PTR _v1$4[ebp]
mov	eax, DWORD PTR _v2$3[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _A$[ebp], ecx
mov	edx, DWORD PTR _v1$4[ebp]
mov	eax, DWORD PTR _v2$3[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _B$[ebp], ecx
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN4@Ins_SDPVTL
cmp	DWORD PTR _B$[ebp], 0
jne	SHORT $LN4@Ins_SDPVTL
mov	DWORD PTR _A$[ebp], 16384		
mov	DWORD PTR _aOpc$[ebp], 0
mov	edx, DWORD PTR _aOpc$[ebp]
and	edx, 1
je	SHORT $LN3@Ins_SDPVTL
mov	eax, DWORD PTR _B$[ebp]
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _A$[ebp]
mov	DWORD PTR _B$[ebp], ecx
mov	edx, DWORD PTR _C$[ebp]
neg	edx
mov	DWORD PTR _A$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 290				
push	eax
mov	ecx, DWORD PTR _B$[ebp]
push	ecx
mov	edx, DWORD PTR _A$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Normalize
add	esp, 16					
movzx	ecx, WORD PTR _p2$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+88]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _v1$2[ebp], ecx
movzx	edx, WORD PTR _p1$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _v2$1[ebp], edx
mov	eax, DWORD PTR _v1$2[ebp]
mov	ecx, DWORD PTR _v2$1[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _A$[ebp], edx
mov	eax, DWORD PTR _v1$2[ebp]
mov	ecx, DWORD PTR _v2$1[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _B$[ebp], edx
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN2@Ins_SDPVTL
cmp	DWORD PTR _B$[ebp], 0
jne	SHORT $LN2@Ins_SDPVTL
mov	DWORD PTR _A$[ebp], 16384		
mov	DWORD PTR _aOpc$[ebp], 0
mov	eax, DWORD PTR _aOpc$[ebp]
and	eax, 1
je	SHORT $LN1@Ins_SDPVTL
mov	ecx, DWORD PTR _B$[ebp]
mov	DWORD PTR _C$[ebp], ecx
mov	edx, DWORD PTR _A$[ebp]
mov	DWORD PTR _B$[ebp], edx
mov	eax, DWORD PTR _C$[ebp]
neg	eax
mov	DWORD PTR _A$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 294				
push	ecx
mov	edx, DWORD PTR _B$[ebp]
push	edx
mov	eax, DWORD PTR _A$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Normalize
add	esp, 16					
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Compute_Funcs
add	esp, 4
pop	edi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MD	PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _K$[ebp], dx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+44]
cmp	ecx, eax
jae	SHORT $LN10@Ins_MD
movzx	ecx, WORD PTR _K$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+80]
cmp	ecx, eax
jb	SHORT $LN11@Ins_MD
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN9@Ins_MD
push	OFFSET $SG12124
push	5364					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	DWORD PTR _D$[ebp], 0
jmp	$LN8@Ins_MD
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
and	eax, 1
je	SHORT $LN7@Ins_MD
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
movzx	edx, WORD PTR _K$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+88]
mov	eax, DWORD PTR [eax+ecx*8+4]
sub	eax, DWORD PTR [esi+edx*8+4]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+52]
movzx	edx, WORD PTR _K$[ebp]
mov	edi, DWORD PTR _exc$[ebp]
mov	edi, DWORD PTR [edi+88]
mov	eax, DWORD PTR [eax+ecx*8]
sub	eax, DWORD PTR [edi+edx*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+572]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
jmp	$LN8@Ins_MD
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+344]
test	edx, edx
je	SHORT $LN4@Ins_MD
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+346]
test	ecx, ecx
jne	SHORT $LN5@Ins_MD
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+48]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec1$5[ebp], edx
movzx	eax, WORD PTR _K$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+84]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _vec2$4[ebp], eax
mov	ecx, DWORD PTR _vec1$5[ebp]
mov	edx, DWORD PTR _vec2$4[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _vec1$5[ebp]
mov	edx, DWORD PTR _vec2$4[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
jmp	$LN8@Ins_MD
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+56]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _vec1$3[ebp], ecx
movzx	edx, WORD PTR _K$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+92]
lea	edx, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _vec2$2[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+220]
cmp	edx, DWORD PTR [ecx+224]
jne	SHORT $LN2@Ins_MD
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax+4]
sub	edx, DWORD PTR [ecx+4]
mov	esi, esp
push	edx
mov	eax, DWORD PTR _vec1$3[ebp]
mov	ecx, DWORD PTR _vec2$2[ebp]
mov	edx, DWORD PTR [eax]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _D$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _D$[ebp], eax
jmp	SHORT $LN8@Ins_MD
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+220]
push	ecx
mov	edx, DWORD PTR _vec1$3[ebp]
mov	eax, DWORD PTR _vec2$2[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+224]
push	eax
mov	ecx, DWORD PTR _vec1$3[ebp]
mov	edx, DWORD PTR _vec2$2[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _vec$1[ebp+4], eax
mov	esi, esp
mov	ecx, DWORD PTR _vec$1[ebp+4]
push	ecx
mov	edx, DWORD PTR _vec$1[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+576]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _D$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR _D$[ebp]
mov	DWORD PTR [edx+ecx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@Ins_MD
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN15@Ins_MD
DD	-40					
DD	8
DD	$LN14@Ins_MD
DB	118					
DB	101					
DB	99					
DB	0
ENDP
_Ins_SCFS PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _L$[ebp], ax
movzx	ecx, WORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [edx+116]
cmp	ecx, eax
jb	SHORT $LN3@Ins_SCFS
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN2@Ins_SCFS
push	OFFSET $SG12104
push	5320					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN4@Ins_SCFS
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	esi, esp
mov	edx, DWORD PTR [ecx+edx*8+4]
push	edx
movzx	eax, WORD PTR _L$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+124]
mov	eax, DWORD PTR [edx+eax*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+572]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _K$[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
sub	eax, DWORD PTR _K$[ebp]
mov	esi, esp
push	eax
movzx	ecx, WORD PTR _L$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 108				
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+584]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+348]
test	ecx, ecx
jne	SHORT $LN4@Ins_SCFS
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR [ecx+edx*8+4]
movzx	edx, WORD PTR _L$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [esi+120]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_GC	PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _L$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	DWORD PTR _L$[ebp], edx
jb	SHORT $LN5@Ins_GC
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN4@Ins_GC
push	OFFSET $SG12087
push	5283					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	DWORD PTR _R$[ebp], 0
jmp	$LN3@Ins_GC
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
and	ecx, 1
je	SHORT $LN2@Ins_GC
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+120]
mov	esi, esp
mov	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR [eax+ecx*8+4]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+120]
mov	edx, DWORD PTR _L$[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+576]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _R$[ebp], eax
jmp	SHORT $LN3@Ins_GC
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+124]
mov	esi, esp
mov	eax, DWORD PTR _L$[ebp]
mov	ecx, DWORD PTR [edx+eax*8+4]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+124]
mov	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR [eax+ecx*8]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+572]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _R$[ebp], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR _R$[ebp]
mov	DWORD PTR [edx+ecx], eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_PUSHW PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
sub	ecx, 183				
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_PUSHW
push	OFFSET $SG12070
push	5240					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_PUSHW
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], eax
xor	edx, edx
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_PUSHW
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jge	SHORT $LN1@Ins_PUSHW
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_GetShortIns
add	esp, 4
movzx	ecx, WORD PTR _K$[ebp]
movsx	edx, ax
mov	eax, DWORD PTR _args$[ebp]
mov	DWORD PTR [eax+ecx*4], edx
jmp	SHORT $LN2@Ins_PUSHW
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+376], 0
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_PUSHB PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
sub	ecx, 175				
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_PUSHB
push	OFFSET $SG12054
push	5215					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_PUSHB
mov	edx, 1
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_PUSHB
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jg	SHORT $LN5@Ins_PUSHB
movzx	eax, WORD PTR _K$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
add	edx, eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
movzx	eax, WORD PTR _K$[ebp]
movzx	ecx, BYTE PTR [ecx+edx]
mov	edx, DWORD PTR _args$[ebp]
mov	DWORD PTR [edx+eax*4-4], ecx
jmp	SHORT $LN2@Ins_PUSHB
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_NPUSHW PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+356]
movzx	cx, BYTE PTR [eax+ecx+1]
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_NPUSHW
push	OFFSET $SG12038
push	5185					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_NPUSHW
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 2
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], eax
xor	edx, edx
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_NPUSHW
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jge	SHORT $LN1@Ins_NPUSHW
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_GetShortIns
add	esp, 4
movzx	ecx, WORD PTR _K$[ebp]
movsx	edx, ax
mov	eax, DWORD PTR _args$[ebp]
mov	DWORD PTR [eax+ecx*4], edx
jmp	SHORT $LN2@Ins_NPUSHW
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+376], 0
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+32]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+32], edx
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_NPUSHB PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+356]
movzx	cx, BYTE PTR [eax+ecx+1]
mov	WORD PTR _L$[ebp], cx
movzx	edx, WORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, 1
mov	eax, DWORD PTR _exc$[ebp]
sub	ecx, DWORD PTR [eax+16]
cmp	edx, ecx
jb	SHORT $LN4@Ins_NPUSHB
push	OFFSET $SG12022
push	5158					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN5@Ins_NPUSHB
mov	edx, 1
mov	WORD PTR _K$[ebp], dx
jmp	SHORT $LN3@Ins_NPUSHB
mov	ax, WORD PTR _K$[ebp]
add	ax, 1
mov	WORD PTR _K$[ebp], ax
movzx	ecx, WORD PTR _K$[ebp]
movzx	edx, WORD PTR _L$[ebp]
cmp	ecx, edx
jg	SHORT $LN1@Ins_NPUSHB
movzx	eax, WORD PTR _K$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
add	edx, eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
movzx	eax, WORD PTR _K$[ebp]
movzx	ecx, BYTE PTR [ecx+edx+1]
mov	edx, DWORD PTR _args$[ebp]
mov	DWORD PTR [edx+eax*4-4], ecx
jmp	SHORT $LN2@Ins_NPUSHB
movzx	eax, WORD PTR _L$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+32]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+32], eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IDEF PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+416]
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+408], 24
add	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$[ebp], eax
jmp	SHORT $LN15@Ins_IDEF
mov	ecx, DWORD PTR _def$[ebp]
add	ecx, 24					
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _def$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jae	SHORT $LN13@Ins_IDEF
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [edx+12]
cmp	edx, DWORD PTR [eax+ecx]
jne	SHORT $LN12@Ins_IDEF
jmp	SHORT $LN13@Ins_IDEF
jmp	SHORT $LN14@Ins_IDEF
mov	eax, DWORD PTR _def$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jne	SHORT $LN11@Ins_IDEF
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+408]
cmp	eax, DWORD PTR [edx+412]
jb	SHORT $LN10@Ins_IDEF
push	OFFSET $SG11992
push	5094					
push	141					
call	_FT_Throw
add	esp, 12					
or	eax, 141				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN16@Ins_IDEF
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+408]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+408], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [ecx+eax], 0
jl	SHORT $LN8@Ins_IDEF
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [ecx+eax], 255		
jle	SHORT $LN9@Ins_IDEF
push	OFFSET $SG11995
push	5103					
push	141					
call	_FT_Throw
add	esp, 12					
or	eax, 141				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN16@Ins_IDEF
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
movzx	eax, BYTE PTR [edx+ecx]
mov	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+352]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _def$[ebp]
mov	BYTE PTR [edx+16], 1
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+ecx]
cmp	ecx, DWORD PTR [eax+424]
jbe	SHORT $LN6@Ins_IDEF
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
movzx	edx, BYTE PTR [ecx+eax]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+424], edx
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_SkipCode
add	esp, 4
movzx	edx, al
test	edx, edx
jne	SHORT $LN16@Ins_IDEF
mov	eax, DWORD PTR _exc$[ebp]
mov	cl, BYTE PTR [eax+368]
mov	BYTE PTR tv156[ebp], cl
cmp	BYTE PTR tv156[ebp], 44			
je	SHORT $LN2@Ins_IDEF
cmp	BYTE PTR tv156[ebp], 45			
je	SHORT $LN1@Ins_IDEF
cmp	BYTE PTR tv156[ebp], 137		
je	SHORT $LN2@Ins_IDEF
jmp	SHORT $LN3@Ins_IDEF
push	OFFSET $SG12008
push	5124					
push	137					
call	_FT_Throw
add	esp, 12					
or	eax, 137				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $LN16@Ins_IDEF
jmp	SHORT $LN16@Ins_IDEF
jmp	SHORT $LN6@Ins_IDEF
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_LOOPCALL PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _F$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+420]
add	ecx, 1
cmp	DWORD PTR _F$[ebp], ecx
jb	SHORT $LN9@Ins_LOOPCA
jmp	$Fail$12
imul	edx, DWORD PTR _F$[ebp], 24
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+404]
mov	DWORD PTR _def$[ebp], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+420]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
cmp	edx, DWORD PTR [eax+396]
jne	SHORT $LN7@Ins_LOOPCA
mov	ecx, DWORD PTR _def$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	edx, DWORD PTR _F$[ebp]
je	SHORT $LN8@Ins_LOOPCA
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+404]
mov	DWORD PTR _def$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+396], 24
add	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$1[ebp], eax
mov	ecx, DWORD PTR _def$[ebp]
cmp	ecx, DWORD PTR _limit$1[ebp]
jae	SHORT $LN5@Ins_LOOPCA
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	eax, DWORD PTR _F$[ebp]
je	SHORT $LN5@Ins_LOOPCA
mov	ecx, DWORD PTR _def$[ebp]
add	ecx, 24					
mov	DWORD PTR _def$[ebp], ecx
jmp	SHORT $LN6@Ins_LOOPCA
mov	edx, DWORD PTR _def$[ebp]
cmp	edx, DWORD PTR _limit$1[ebp]
jne	SHORT $LN8@Ins_LOOPCA
jmp	$Fail$12
mov	eax, DWORD PTR _def$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
jne	SHORT $LN3@Ins_LOOPCA
jmp	$Fail$12
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+428]
cmp	ecx, DWORD PTR [eax+432]
jl	SHORT $LN2@Ins_LOOPCA
push	OFFSET $SG11973
push	5040					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN10@Ins_LOOPCA
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 0
jle	$LN1@Ins_LOOPCA
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+436]
mov	DWORD PTR _pCrec$[ebp], ecx
mov	eax, DWORD PTR _pCrec$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 1
mov	edx, DWORD PTR _pCrec$[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _pCrec$[ebp]
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+8], ecx
mov	edx, DWORD PTR _pCrec$[ebp]
mov	eax, DWORD PTR _def$[ebp]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+428]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+428], edx
mov	ecx, DWORD PTR _def$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _def$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_Goto_CodeRange
add	esp, 12					
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+376], 0
jmp	SHORT $LN10@Ins_LOOPCA
push	OFFSET $SG11976
push	5063					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_CALL PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _F$[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+420]
add	edx, 1
cmp	DWORD PTR _F$[ebp], edx
jb	SHORT $LN8@Ins_CALL
jmp	$Fail$11
imul	eax, DWORD PTR _F$[ebp], 24
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+404]
mov	DWORD PTR _def$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+420]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
cmp	eax, DWORD PTR [ecx+396]
jne	SHORT $LN6@Ins_CALL
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx+12]
cmp	eax, DWORD PTR _F$[ebp]
je	SHORT $LN7@Ins_CALL
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+404]
mov	DWORD PTR _def$[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
imul	ecx, DWORD PTR [eax+396], 24
add	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR _limit$1[ebp], ecx
mov	edx, DWORD PTR _def$[ebp]
cmp	edx, DWORD PTR _limit$1[ebp]
jae	SHORT $LN4@Ins_CALL
mov	eax, DWORD PTR _def$[ebp]
mov	ecx, DWORD PTR [eax+12]
cmp	ecx, DWORD PTR _F$[ebp]
je	SHORT $LN4@Ins_CALL
mov	edx, DWORD PTR _def$[ebp]
add	edx, 24					
mov	DWORD PTR _def$[ebp], edx
jmp	SHORT $LN5@Ins_CALL
mov	eax, DWORD PTR _def$[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jne	SHORT $LN7@Ins_CALL
jmp	$Fail$11
mov	ecx, DWORD PTR _def$[ebp]
movzx	edx, BYTE PTR [ecx+16]
test	edx, edx
jne	SHORT $LN2@Ins_CALL
jmp	$Fail$11
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+428]
cmp	edx, DWORD PTR [ecx+432]
jl	SHORT $LN1@Ins_CALL
push	OFFSET $SG11949
push	4954					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN9@Ins_CALL
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
shl	eax, 4
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+436]
mov	DWORD PTR _pCrec$[ebp], eax
mov	edx, DWORD PTR _pCrec$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+352]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _pCrec$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _pCrec$[ebp]
mov	DWORD PTR [edx+8], 1
mov	eax, DWORD PTR _pCrec$[ebp]
mov	ecx, DWORD PTR _def$[ebp]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+428], eax
mov	edx, DWORD PTR _def$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _def$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_Goto_CodeRange
add	esp, 12					
mov	ecx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [ecx+376], 0
jmp	SHORT $LN9@Ins_CALL
push	OFFSET $SG11950
push	4975					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_ENDF PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+428], 0
jg	SHORT $LN3@Ins_ENDF
push	OFFSET $SG11924
push	4858					
push	136					
call	_FT_Throw
add	esp, 12					
or	eax, 136				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN4@Ins_ENDF
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
sub	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+428], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+428]
shl	eax, 4
mov	ecx, DWORD PTR _exc$[ebp]
add	eax, DWORD PTR [ecx+436]
mov	DWORD PTR _pRec$[ebp], eax
mov	edx, DWORD PTR _pRec$[ebp]
mov	eax, DWORD PTR [edx+8]
sub	eax, 1
mov	ecx, DWORD PTR _pRec$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
mov	eax, DWORD PTR _pRec$[ebp]
cmp	DWORD PTR [eax+8], 0
jle	SHORT $LN2@Ins_ENDF
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+428]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+428], edx
mov	ecx, DWORD PTR _pRec$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax+360], ecx
jmp	SHORT $LN4@Ins_ENDF
mov	edx, DWORD PTR _pRec$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _pRec$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_Goto_CodeRange
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_FDEF PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+404]
mov	DWORD PTR _rec$[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+396], 24
add	eax, DWORD PTR _rec$[ebp]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _n$[ebp], ecx
jmp	SHORT $LN14@Ins_FDEF
mov	edx, DWORD PTR _rec$[ebp]
add	edx, 24					
mov	DWORD PTR _rec$[ebp], edx
mov	eax, DWORD PTR _rec$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jae	SHORT $LN12@Ins_FDEF
mov	ecx, DWORD PTR _rec$[ebp]
mov	edx, DWORD PTR [ecx+12]
cmp	edx, DWORD PTR _n$[ebp]
jne	SHORT $LN11@Ins_FDEF
jmp	SHORT $LN12@Ins_FDEF
jmp	SHORT $LN13@Ins_FDEF
mov	eax, DWORD PTR _rec$[ebp]
cmp	eax, DWORD PTR _limit$[ebp]
jne	SHORT $LN10@Ins_FDEF
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+396]
cmp	eax, DWORD PTR [edx+400]
jb	SHORT $LN9@Ins_FDEF
push	OFFSET $SG11900
push	4675					
push	140					
call	_FT_Throw
add	esp, 12					
or	eax, 140				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN15@Ins_FDEF
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+396]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+396], eax
cmp	DWORD PTR _n$[ebp], 65535		
jbe	SHORT $LN8@Ins_FDEF
push	OFFSET $SG11902
push	4685					
push	140					
call	_FT_Throw
add	esp, 12					
or	eax, 140				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LN15@Ins_FDEF
mov	eax, DWORD PTR _rec$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
movzx	eax, WORD PTR _n$[ebp]
mov	ecx, DWORD PTR _rec$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _rec$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _rec$[ebp]
mov	BYTE PTR [edx+16], 1
mov	eax, DWORD PTR _rec$[ebp]
mov	BYTE PTR [eax+17], 0
mov	ecx, DWORD PTR _rec$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _n$[ebp]
cmp	eax, DWORD PTR [edx+420]
jbe	SHORT $LN6@Ins_FDEF
movzx	ecx, WORD PTR _n$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+420], ecx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_SkipCode
add	esp, 4
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN15@Ins_FDEF
mov	edx, DWORD PTR _exc$[ebp]
mov	al, BYTE PTR [edx+368]
mov	BYTE PTR tv147[ebp], al
cmp	BYTE PTR tv147[ebp], 44			
je	SHORT $LN2@Ins_FDEF
cmp	BYTE PTR tv147[ebp], 45			
je	SHORT $LN1@Ins_FDEF
cmp	BYTE PTR tv147[ebp], 137		
je	SHORT $LN2@Ins_FDEF
jmp	SHORT $LN3@Ins_FDEF
push	OFFSET $SG11914
push	4827					
push	137					
call	_FT_Throw
add	esp, 12					
or	eax, 137				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN15@Ins_FDEF
mov	edx, DWORD PTR _rec$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	DWORD PTR [edx+8], ecx
jmp	SHORT $LN15@Ins_FDEF
jmp	SHORT $LN6@Ins_FDEF
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_ELSE PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _args$[ebp]
mov	DWORD PTR _args$[ebp], ecx
mov	DWORD PTR _nIfs$[ebp], 1
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_SkipCode
add	esp, 4
movzx	eax, al
cmp	eax, 1
jne	SHORT $LN5@Ins_ELSE
jmp	SHORT $LN9@Ins_ELSE
mov	ecx, DWORD PTR _exc$[ebp]
mov	dl, BYTE PTR [ecx+368]
mov	BYTE PTR tv70[ebp], dl
cmp	BYTE PTR tv70[ebp], 88			
je	SHORT $LN2@Ins_ELSE
cmp	BYTE PTR tv70[ebp], 89			
je	SHORT $LN1@Ins_ELSE
jmp	SHORT $LN7@Ins_ELSE
mov	eax, DWORD PTR _nIfs$[ebp]
add	eax, 1
mov	DWORD PTR _nIfs$[ebp], eax
jmp	SHORT $LN7@Ins_ELSE
mov	ecx, DWORD PTR _nIfs$[ebp]
sub	ecx, 1
mov	DWORD PTR _nIfs$[ebp], ecx
cmp	DWORD PTR _nIfs$[ebp], 0
jne	SHORT $LN8@Ins_ELSE
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_IF	PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
cmp	DWORD PTR [edx+ecx], 0
je	SHORT $LN10@Ins_IF
jmp	$LN11@Ins_IF
mov	DWORD PTR _nIfs$[ebp], 1
mov	BYTE PTR _Out$[ebp], 0
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_SkipCode
add	esp, 4
movzx	ecx, al
cmp	ecx, 1
jne	SHORT $LN6@Ins_IF
jmp	SHORT $LN11@Ins_IF
mov	edx, DWORD PTR _exc$[ebp]
mov	al, BYTE PTR [edx+368]
mov	BYTE PTR tv73[ebp], al
cmp	BYTE PTR tv73[ebp], 27			
je	SHORT $LN2@Ins_IF
cmp	BYTE PTR tv73[ebp], 88			
je	SHORT $LN3@Ins_IF
cmp	BYTE PTR tv73[ebp], 89			
je	SHORT $LN1@Ins_IF
jmp	SHORT $LN8@Ins_IF
mov	ecx, DWORD PTR _nIfs$[ebp]
add	ecx, 1
mov	DWORD PTR _nIfs$[ebp], ecx
jmp	SHORT $LN8@Ins_IF
cmp	DWORD PTR _nIfs$[ebp], 1
jne	SHORT $LN13@Ins_IF
mov	BYTE PTR tv76[ebp], 1
jmp	SHORT $LN14@Ins_IF
mov	BYTE PTR tv76[ebp], 0
mov	dl, BYTE PTR tv76[ebp]
mov	BYTE PTR _Out$[ebp], dl
jmp	SHORT $LN8@Ins_IF
mov	eax, DWORD PTR _nIfs$[ebp]
sub	eax, 1
mov	DWORD PTR _nIfs$[ebp], eax
jne	SHORT $LN15@Ins_IF
mov	BYTE PTR tv79[ebp], 1
jmp	SHORT $LN16@Ins_IF
mov	BYTE PTR tv79[ebp], 0
mov	cl, BYTE PTR tv79[ebp]
mov	BYTE PTR _Out$[ebp], cl
movzx	edx, BYTE PTR _Out$[ebp]
test	edx, edx
je	SHORT $LN9@Ins_IF
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_SkipCode PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+372]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+360], ecx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+360]
cmp	eax, DWORD PTR [edx+364]
jge	$Fail_Overflow$7
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
mov	eax, DWORD PTR _exc$[ebp]
mov	cl, BYTE PTR [ecx+edx]
mov	BYTE PTR [eax+368], cl
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
movsx	ecx, BYTE PTR _opcode_length[eax]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+372], ecx
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+372], 0
jge	SHORT $LN3@SkipCode
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
add	edx, 1
mov	eax, DWORD PTR _exc$[ebp]
cmp	edx, DWORD PTR [eax+364]
jl	SHORT $LN2@SkipCode
jmp	SHORT $Fail_Overflow$7
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+356]
movzx	edx, BYTE PTR [ecx+edx+1]
mov	eax, DWORD PTR _exc$[ebp]
imul	edx, DWORD PTR [eax+372]
mov	ecx, 2
sub	ecx, edx
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+372], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+372]
mov	eax, DWORD PTR _exc$[ebp]
cmp	ecx, DWORD PTR [eax+364]
jg	SHORT $Fail_Overflow$7
xor	al, al
jmp	SHORT $LN5@SkipCode
push	OFFSET $SG11845
push	4451					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Ins_ROLL PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, 4
shl	ecx, 1
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _A$[ebp], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _B$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR [eax+edx]
mov	DWORD PTR _C$[ebp], ecx
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR _C$[ebp]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$[ebp]
mov	ecx, DWORD PTR _A$[ebp]
mov	DWORD PTR [eax+edx], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$[ebp]
mov	edx, DWORD PTR _B$[ebp]
mov	DWORD PTR [ecx+eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_MINDEX PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _L$[ebp], eax
cmp	DWORD PTR _L$[ebp], 0
jle	SHORT $LN3@Ins_MINDEX
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _L$[ebp]
cmp	edx, DWORD PTR [ecx+28]
jle	SHORT $LN4@Ins_MINDEX
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN2@Ins_MINDEX
push	OFFSET $SG11825
push	4381					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	SHORT $LN5@Ins_MINDEX
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _K$[ebp], ecx
mov	edx, DWORD PTR _L$[ebp]
lea	eax, DWORD PTR [edx*4-4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
sub	edx, DWORD PTR _L$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
lea	edx, DWORD PTR [ecx+edx*4+4]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+28]
sub	ecx, DWORD PTR _L$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
lea	ecx, DWORD PTR [eax+ecx*4]
push	ecx
call	DWORD PTR __imp__memmove
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	ecx, DWORD PTR _K$[ebp]
mov	DWORD PTR [edx+eax*4-4], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_SxVTL PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
movzx	eax, WORD PTR _aIdx1$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+116]
cmp	eax, edx
jae	SHORT $LN4@Ins_SxVTL
movzx	eax, WORD PTR _aIdx2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+80]
cmp	eax, edx
jb	SHORT $LN5@Ins_SxVTL
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN3@Ins_SxVTL
push	OFFSET $SG11811
push	2760					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	al, 1
jmp	$LN6@Ins_SxVTL
movzx	eax, WORD PTR _aIdx2$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+88]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _p1$[ebp], eax
movzx	ecx, WORD PTR _aIdx1$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+124]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _p2$[ebp], ecx
mov	edx, DWORD PTR _p1$[ebp]
mov	eax, DWORD PTR _p2$[ebp]
mov	ecx, DWORD PTR [edx]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _A$[ebp], ecx
mov	edx, DWORD PTR _p1$[ebp]
mov	eax, DWORD PTR _p2$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _B$[ebp], ecx
cmp	DWORD PTR _A$[ebp], 0
jne	SHORT $LN2@Ins_SxVTL
cmp	DWORD PTR _B$[ebp], 0
jne	SHORT $LN2@Ins_SxVTL
mov	DWORD PTR _A$[ebp], 16384		
mov	DWORD PTR _aOpc$[ebp], 0
mov	edx, DWORD PTR _aOpc$[ebp]
and	edx, 1
je	SHORT $LN1@Ins_SxVTL
mov	eax, DWORD PTR _B$[ebp]
mov	DWORD PTR _C$[ebp], eax
mov	ecx, DWORD PTR _A$[ebp]
mov	DWORD PTR _B$[ebp], ecx
mov	edx, DWORD PTR _C$[ebp]
neg	edx
mov	DWORD PTR _A$[ebp], edx
mov	eax, DWORD PTR _Vec$[ebp]
push	eax
mov	ecx, DWORD PTR _B$[ebp]
push	ecx
mov	edx, DWORD PTR _A$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Normalize
add	esp, 16					
xor	al, al
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Normalize PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _Vx$[ebp], 0
jge	SHORT $LN5@Normalize
mov	ecx, DWORD PTR _Vx$[ebp]
neg	ecx
mov	DWORD PTR tv66[ebp], ecx
jmp	SHORT $LN6@Normalize
mov	edx, DWORD PTR _Vx$[ebp]
mov	DWORD PTR tv66[ebp], edx
cmp	DWORD PTR tv66[ebp], 16384		
jge	SHORT $LN2@Normalize
cmp	DWORD PTR _Vy$[ebp], 0
jge	SHORT $LN7@Normalize
mov	eax, DWORD PTR _Vy$[ebp]
neg	eax
mov	DWORD PTR tv70[ebp], eax
jmp	SHORT $LN8@Normalize
mov	ecx, DWORD PTR _Vy$[ebp]
mov	DWORD PTR tv70[ebp], ecx
cmp	DWORD PTR tv70[ebp], 16384		
jge	SHORT $LN2@Normalize
cmp	DWORD PTR _Vx$[ebp], 0
jne	SHORT $LN1@Normalize
cmp	DWORD PTR _Vy$[ebp], 0
jne	SHORT $LN1@Normalize
xor	al, al
jmp	SHORT $LN3@Normalize
mov	edx, DWORD PTR _Vx$[ebp]
shl	edx, 14					
mov	DWORD PTR _Vx$[ebp], edx
mov	eax, DWORD PTR _Vy$[ebp]
shl	eax, 14					
mov	DWORD PTR _Vy$[ebp], eax
mov	ecx, DWORD PTR _Vy$[ebp]
push	ecx
mov	edx, DWORD PTR _Vx$[ebp]
push	edx
call	_FT_Hypot
add	esp, 8
mov	DWORD PTR _W$[ebp], eax
mov	eax, DWORD PTR _W$[ebp]
shl	eax, 2
push	eax
mov	ecx, DWORD PTR _Vx$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _R$[ebp]
mov	WORD PTR [edx], ax
mov	eax, DWORD PTR _W$[ebp]
shl	eax, 2
push	eax
mov	ecx, DWORD PTR _Vy$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _R$[ebp]
mov	WORD PTR [edx+2], ax
xor	al, al
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Compute_Funcs PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
cmp	ecx, 16384				
jne	SHORT $LN17@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+564], eax
jmp	SHORT $LN16@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
cmp	eax, 16384				
jne	SHORT $LN15@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+296]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+564], edx
jmp	SHORT $LN16@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+294]
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
imul	edx, ecx
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+296]
mov	eax, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [eax+300]
imul	ecx, eax
add	edx, ecx
sar	edx, 14					
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+564], edx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
cmp	eax, 16384				
jne	SHORT $LN13@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+572], OFFSET _Project_x
jmp	SHORT $LN12@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+296]
cmp	eax, 16384				
jne	SHORT $LN11@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+572], OFFSET _Project_y
jmp	SHORT $LN12@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+572], OFFSET _Project
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+290]
cmp	ecx, 16384				
jne	SHORT $LN9@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+576], OFFSET _Project_x
jmp	SHORT $LN8@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+292]
cmp	ecx, 16384				
jne	SHORT $LN7@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+576], OFFSET _Project_y
jmp	SHORT $LN8@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+576], OFFSET _Dual_Project
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+584], OFFSET _Direct_Move
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+588], OFFSET _Direct_Move_Orig
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+564], 16384		
jne	SHORT $LN5@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
cmp	edx, 16384				
jne	SHORT $LN4@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+584], OFFSET _Direct_Move_X
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+588], OFFSET _Direct_Move_Orig_X
jmp	SHORT $LN5@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+300]
cmp	eax, 16384				
jne	SHORT $LN5@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+584], OFFSET _Direct_Move_Y
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+588], OFFSET _Direct_Move_Orig_Y
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+564], 0
jge	SHORT $LN20@Compute_Fu
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+564]
neg	edx
mov	DWORD PTR tv158[ebp], edx
jmp	SHORT $LN21@Compute_Fu
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
mov	DWORD PTR tv158[ebp], ecx
cmp	DWORD PTR tv158[ebp], 1024		
jge	SHORT $LN1@Compute_Fu
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+564], 16384		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+256], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Project_y PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _dx$[ebp]
mov	DWORD PTR _dx$[ebp], ecx
mov	eax, DWORD PTR _dy$[ebp]
pop	ebp
ret	0
ENDP
_Project_x PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
mov	ecx, DWORD PTR _dy$[ebp]
mov	DWORD PTR _dy$[ebp], ecx
mov	eax, DWORD PTR _dx$[ebp]
pop	ebp
ret	0
ENDP
_Dual_Project PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+292]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+290]
push	eax
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
call	_TT_DotFix14
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Project PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+296]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
push	eax
mov	ecx, DWORD PTR _dy$[ebp]
push	ecx
mov	edx, DWORD PTR _dx$[ebp]
push	edx
call	_TT_DotFix14
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_SetSuperRound PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _selector$[ebp]
and	eax, 192				
mov	DWORD PTR tv65[ebp], eax
cmp	DWORD PTR tv65[ebp], 192		
ja	SHORT $LN13@SetSuperRo
mov	ecx, DWORD PTR tv65[ebp]
movzx	edx, BYTE PTR $LN17@SetSuperRo[ecx]
jmp	DWORD PTR $LN19@SetSuperRo[edx*4]
mov	eax, DWORD PTR _GridPeriod$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+476], eax
jmp	SHORT $LN13@SetSuperRo
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _GridPeriod$[ebp]
mov	DWORD PTR [edx+476], eax
jmp	SHORT $LN13@SetSuperRo
mov	ecx, DWORD PTR _GridPeriod$[ebp]
shl	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+476], ecx
jmp	SHORT $LN13@SetSuperRo
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _GridPeriod$[ebp]
mov	DWORD PTR [eax+476], ecx
mov	edx, DWORD PTR _selector$[ebp]
and	edx, 48					
mov	DWORD PTR tv74[ebp], edx
cmp	DWORD PTR tv74[ebp], 48			
ja	SHORT $LN7@SetSuperRo
mov	eax, DWORD PTR tv74[ebp]
movzx	ecx, BYTE PTR $LN18@SetSuperRo[eax]
jmp	DWORD PTR $LN20@SetSuperRo[ecx*4]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+480], 0
jmp	SHORT $LN7@SetSuperRo
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+476]
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
jmp	SHORT $LN7@SetSuperRo
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+476]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
jmp	SHORT $LN7@SetSuperRo
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+476], 3
cdq
and	edx, 3
add	eax, edx
sar	eax, 2
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
mov	edx, DWORD PTR _selector$[ebp]
and	edx, 15					
jne	SHORT $LN2@SetSuperRo
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+476]
sub	ecx, 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+484], ecx
jmp	SHORT $LN1@SetSuperRo
mov	eax, DWORD PTR _selector$[ebp]
and	eax, 15					
sub	eax, 4
mov	ecx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [ecx+476]
cdq
and	edx, 7
add	eax, edx
sar	eax, 3
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+484], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+476]
cdq
and	edx, 255				
add	eax, edx
sar	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+476], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
cdq
and	edx, 255				
add	eax, edx
sar	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+480], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+484]
cdq
and	edx, 255				
add	eax, edx
sar	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+484], eax
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	$LN12@SetSuperRo
DD	$LN11@SetSuperRo
DD	$LN10@SetSuperRo
DD	$LN9@SetSuperRo
DD	$LN13@SetSuperRo
DB	0
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	1
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	2
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	3
npad	3
DD	$LN6@SetSuperRo
DD	$LN5@SetSuperRo
DD	$LN4@SetSuperRo
DD	$LN3@SetSuperRo
DD	$LN7@SetSuperRo
DB	0
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	1
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	2
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	3
ENDP
_Compute_Round PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
movzx	eax, BYTE PTR _round_mode$[ebp]
mov	DWORD PTR tv65[ebp], eax
cmp	DWORD PTR tv65[ebp], 7
ja	$LN11@Compute_Ro
mov	ecx, DWORD PTR tv65[ebp]
jmp	DWORD PTR $LN13@Compute_Ro[ecx*4]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_None
jmp	SHORT $LN11@Compute_Ro
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_To_Grid
jmp	SHORT $LN11@Compute_Ro
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_Up_To_Grid
jmp	SHORT $LN11@Compute_Ro
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_Down_To_Grid
jmp	SHORT $LN11@Compute_Ro
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_To_Half_Grid
jmp	SHORT $LN11@Compute_Ro
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_To_Double_Grid
jmp	SHORT $LN11@Compute_Ro
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_Super
jmp	SHORT $LN11@Compute_Ro
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_Super_45
mov	esp, ebp
pop	ebp
ret	0
DD	$LN4@Compute_Ro
DD	$LN7@Compute_Ro
DD	$LN3@Compute_Ro
DD	$LN5@Compute_Ro
DD	$LN6@Compute_Ro
DD	$LN8@Compute_Ro
DD	$LN2@Compute_Ro
DD	$LN1@Compute_Ro
ENDP
_Round_Super_45 PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Supe
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+484]
add	ecx, DWORD PTR _compensation$[ebp]
mov	esi, DWORD PTR _exc$[ebp]
mov	eax, ecx
cdq
idiv	DWORD PTR [esi+476]
mov	ecx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [ecx+476]
mov	DWORD PTR _val$[ebp], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _val$[ebp]
add	eax, DWORD PTR [edx+480]
mov	DWORD PTR _val$[ebp], eax
jns	SHORT $LN3@Round_Supe
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+480]
mov	DWORD PTR _val$[ebp], edx
jmp	SHORT $LN2@Round_Supe
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+484]
sub	eax, DWORD PTR [ecx+480]
sub	eax, DWORD PTR _distance$[ebp]
add	eax, DWORD PTR _compensation$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
cdq
idiv	DWORD PTR [ecx+476]
mov	edx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [edx+476]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _val$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Supe
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _val$[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_Super PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Supe
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _distance$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+484]
add	ecx, DWORD PTR _compensation$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+476]
neg	edx
and	ecx, edx
mov	DWORD PTR _val$[ebp], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _val$[ebp]
add	ecx, DWORD PTR [eax+480]
mov	DWORD PTR _val$[ebp], ecx
jns	SHORT $LN3@Round_Supe
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
mov	DWORD PTR _val$[ebp], eax
jmp	SHORT $LN2@Round_Supe
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+484]
sub	eax, DWORD PTR [edx+480]
sub	eax, DWORD PTR _distance$[ebp]
add	eax, DWORD PTR _compensation$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+476]
neg	edx
and	eax, edx
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _val$[ebp]
sub	ecx, DWORD PTR [eax+480]
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Supe
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+480]
neg	eax
mov	DWORD PTR _val$[ebp], eax
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_To_Double_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_To_D
mov	ecx, DWORD PTR _compensation$[ebp]
mov	edx, DWORD PTR _distance$[ebp]
lea	eax, DWORD PTR [edx+ecx+16]
and	eax, -32				
mov	DWORD PTR _val$[ebp], eax
jge	SHORT $LN3@Round_To_D
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_To_D
mov	ecx, DWORD PTR _compensation$[ebp]
sub	ecx, DWORD PTR _distance$[ebp]
add	ecx, 16					
and	ecx, -32				
neg	ecx
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_To_D
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_Up_To_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Up_T
mov	ecx, DWORD PTR _compensation$[ebp]
mov	edx, DWORD PTR _distance$[ebp]
lea	eax, DWORD PTR [edx+ecx+63]
and	eax, -64				
mov	DWORD PTR _val$[ebp], eax
jge	SHORT $LN3@Round_Up_T
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_Up_T
mov	ecx, DWORD PTR _compensation$[ebp]
sub	ecx, DWORD PTR _distance$[ebp]
add	ecx, 63					
and	ecx, -64				
neg	ecx
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Up_T
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_Down_To_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_Down
mov	ecx, DWORD PTR _distance$[ebp]
add	ecx, DWORD PTR _compensation$[ebp]
and	ecx, -64				
mov	DWORD PTR _val$[ebp], ecx
jge	SHORT $LN3@Round_Down
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_Down
mov	edx, DWORD PTR _compensation$[ebp]
sub	edx, DWORD PTR _distance$[ebp]
and	edx, -64				
neg	edx
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_Down
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_To_Half_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_To_H
mov	ecx, DWORD PTR _distance$[ebp]
add	ecx, DWORD PTR _compensation$[ebp]
and	ecx, -64				
add	ecx, 32					
mov	DWORD PTR _val$[ebp], ecx
jns	SHORT $LN3@Round_To_H
mov	DWORD PTR _val$[ebp], 32		
jmp	SHORT $LN2@Round_To_H
mov	edx, DWORD PTR _compensation$[ebp]
sub	edx, DWORD PTR _distance$[ebp]
and	edx, -64				
add	edx, 32					
neg	edx
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_To_H
mov	DWORD PTR _val$[ebp], -32		
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_To_Grid PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_To_G
mov	ecx, DWORD PTR _compensation$[ebp]
mov	edx, DWORD PTR _distance$[ebp]
lea	eax, DWORD PTR [edx+ecx+32]
and	eax, -64				
mov	DWORD PTR _val$[ebp], eax
jge	SHORT $LN3@Round_To_G
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_To_G
mov	ecx, DWORD PTR _compensation$[ebp]
sub	ecx, DWORD PTR _distance$[ebp]
add	ecx, 32					
and	ecx, -64				
neg	ecx
mov	DWORD PTR _val$[ebp], ecx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_To_G
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Round_None PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
cmp	DWORD PTR _distance$[ebp], 0
jl	SHORT $LN4@Round_None
mov	ecx, DWORD PTR _distance$[ebp]
add	ecx, DWORD PTR _compensation$[ebp]
mov	DWORD PTR _val$[ebp], ecx
jns	SHORT $LN3@Round_None
mov	DWORD PTR _val$[ebp], 0
jmp	SHORT $LN2@Round_None
mov	edx, DWORD PTR _distance$[ebp]
sub	edx, DWORD PTR _compensation$[ebp]
mov	DWORD PTR _val$[ebp], edx
cmp	DWORD PTR _val$[ebp], 0
jle	SHORT $LN2@Round_None
mov	DWORD PTR _val$[ebp], 0
mov	eax, DWORD PTR _val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Direct_Move_Orig_Y PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+ecx*8+4]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [eax+edx*8+4], ecx
pop	ebp
ret	0
ENDP
_Direct_Move_Orig_X PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [eax+ecx*8]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [eax+edx*8], ecx
pop	ebp
ret	0
ENDP
_Direct_Move_Y PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR [eax+ecx*8+4]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+16]
mov	DWORD PTR [eax+edx*8+4], ecx
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+24]
movzx	ecx, BYTE PTR [eax+ecx]
or	ecx, 16					
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+24]
mov	BYTE PTR [eax+edx], cl
pop	ebp
ret	0
ENDP
_Direct_Move_X PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR _exc$[ebp], eax
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR [eax+ecx*8]
add	ecx, DWORD PTR _distance$[ebp]
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+16]
mov	DWORD PTR [eax+edx*8], ecx
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+24]
movzx	ecx, BYTE PTR [eax+ecx]
or	ecx, 8
movzx	edx, WORD PTR _point$[ebp]
mov	eax, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [eax+24]
mov	BYTE PTR [eax+edx], cl
pop	ebp
ret	0
ENDP
_Direct_Move_Orig PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN2@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [edx+ecx*8], eax
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN3@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8+4]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [edx+ecx*8+4], eax
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Direct_Move PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+298]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN2@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+16]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [edx+ecx*8], eax
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+24]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 8
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+24]
mov	BYTE PTR [edx+ecx], al
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
mov	DWORD PTR _v$[ebp], ecx
cmp	DWORD PTR _v$[ebp], 0
je	SHORT $LN3@Direct_Mov
movzx	esi, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edi, DWORD PTR [edx+16]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+564]
push	ecx
mov	edx, DWORD PTR _v$[ebp]
push	edx
mov	eax, DWORD PTR _distance$[ebp]
push	eax
call	_FT_MulDiv
add	esp, 12					
add	eax, DWORD PTR [edi+esi*8+4]
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+16]
mov	DWORD PTR [edx+ecx*8+4], eax
movzx	eax, WORD PTR _point$[ebp]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+24]
movzx	eax, BYTE PTR [edx+eax]
or	eax, 16					
movzx	ecx, WORD PTR _point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [edx+24]
mov	BYTE PTR [edx+ecx], al
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Ins_Goto_CodeRange PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _aRange$[ebp], 1
jl	SHORT $LN3@Ins_Goto_C
cmp	DWORD PTR _aRange$[ebp], 3
jle	SHORT $LN4@Ins_Goto_C
push	OFFSET $SG11470
push	1795					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
jmp	$LN5@Ins_Goto_C
mov	edx, DWORD PTR _aRange$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
lea	ecx, DWORD PTR [eax+edx*8+436]
mov	DWORD PTR _range$[ebp], ecx
mov	edx, DWORD PTR _range$[ebp]
cmp	DWORD PTR [edx], 0
jne	SHORT $LN2@Ins_Goto_C
push	OFFSET $SG11473
push	1803					
push	138					
call	_FT_Throw
add	esp, 12					
or	eax, 138				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
jmp	SHORT $LN5@Ins_Goto_C
mov	edx, DWORD PTR _range$[ebp]
mov	eax, DWORD PTR _aIP$[ebp]
cmp	eax, DWORD PTR [edx+4]
jbe	SHORT $LN1@Ins_Goto_C
push	OFFSET $SG11475
push	1813					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	al, 1
jmp	SHORT $LN5@Ins_Goto_C
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _range$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx+356], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _range$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+364], ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _aIP$[ebp]
mov	DWORD PTR [edx+360], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _aRange$[ebp]
mov	DWORD PTR [ecx+352], edx
xor	al, al
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_GetShortIns PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+360], ecx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+356]
movzx	eax, BYTE PTR [eax+ecx-2]
shl	eax, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+356]
movzx	edx, BYTE PTR [ecx+edx-1]
add	eax, edx
pop	ebp
ret	0
ENDP
_Move_CVT_Stretched PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _exc$[ebp]
mov	esi, DWORD PTR [eax+384]
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Current_Ratio
add	esp, 4
push	eax
mov	edx, DWORD PTR _value$[ebp]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _idx$[ebp]
add	eax, DWORD PTR [esi+ecx*4]
mov	edx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Move_CVT PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
add	eax, DWORD PTR _value$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+384]
mov	ecx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
pop	ebp
ret	0
ENDP
_Write_CVT_Stretched PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Current_Ratio
add	esp, 4
push	eax
mov	ecx, DWORD PTR _value$[ebp]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Write_CVT PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR _value$[ebp]
mov	DWORD PTR [ecx+edx*4], eax
pop	ebp
ret	0
ENDP
_Read_CVT_Stretched PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Current_Ratio
add	esp, 4
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+384]
mov	eax, DWORD PTR _idx$[ebp]
mov	ecx, DWORD PTR [edx+eax*4]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Read_CVT PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+384]
mov	edx, DWORD PTR _idx$[ebp]
mov	eax, DWORD PTR [ecx+edx*4]
pop	ebp
ret	0
ENDP
_Current_Ppem_Stretched PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Current_Ratio
add	esp, 4
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+252]
push	edx
call	_FT_MulFix_i386
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_Current_Ppem PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _exc$[ebp]
movzx	eax, WORD PTR [eax+252]
pop	ebp
ret	0
ENDP
_Current_Ratio PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+256], 0
jne	$LN5@Current_Ra
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+296]
test	edx, edx
jne	SHORT $LN4@Current_Ra
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+244]
mov	DWORD PTR [eax+256], edx
jmp	SHORT $LN5@Current_Ra
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+294]
test	ecx, ecx
jne	SHORT $LN2@Current_Ra
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+248]
mov	DWORD PTR [edx+256], ecx
jmp	SHORT $LN5@Current_Ra
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+244]
push	edx
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _x$2[ebp], eax
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+296]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+248]
push	eax
call	_TT_MulFix14
add	esp, 8
mov	DWORD PTR _y$1[ebp], eax
mov	ecx, DWORD PTR _y$1[ebp]
push	ecx
mov	edx, DWORD PTR _x$2[ebp]
push	edx
call	_FT_Hypot
add	esp, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+256], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+256]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_DotFix14 PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _ax$[ebp]
and	eax, 65535				
imul	eax, DWORD PTR _bx$[ebp]
mov	DWORD PTR _l$[ebp], eax
mov	ecx, DWORD PTR _ax$[ebp]
sar	ecx, 16					
imul	ecx, DWORD PTR _bx$[ebp]
mov	DWORD PTR _m$[ebp], ecx
mov	edx, DWORD PTR _m$[ebp]
shl	edx, 16					
add	edx, DWORD PTR _l$[ebp]
mov	DWORD PTR _lo1$[ebp], edx
mov	eax, DWORD PTR _lo1$[ebp]
cmp	eax, DWORD PTR _l$[ebp]
jae	SHORT $LN3@TT_DotFix1
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN4@TT_DotFix1
mov	DWORD PTR tv74[ebp], 0
mov	ecx, DWORD PTR _m$[ebp]
sar	ecx, 16					
mov	edx, DWORD PTR _l$[ebp]
sar	edx, 31					
add	ecx, DWORD PTR tv74[ebp]
add	edx, ecx
mov	DWORD PTR _hi1$[ebp], edx
mov	eax, DWORD PTR _ay$[ebp]
and	eax, 65535				
imul	eax, DWORD PTR _by$[ebp]
mov	DWORD PTR _l$[ebp], eax
mov	ecx, DWORD PTR _ay$[ebp]
sar	ecx, 16					
imul	ecx, DWORD PTR _by$[ebp]
mov	DWORD PTR _m$[ebp], ecx
mov	edx, DWORD PTR _m$[ebp]
shl	edx, 16					
add	edx, DWORD PTR _l$[ebp]
mov	DWORD PTR _lo2$[ebp], edx
mov	eax, DWORD PTR _lo2$[ebp]
cmp	eax, DWORD PTR _l$[ebp]
jae	SHORT $LN5@TT_DotFix1
mov	DWORD PTR tv86[ebp], 1
jmp	SHORT $LN6@TT_DotFix1
mov	DWORD PTR tv86[ebp], 0
mov	ecx, DWORD PTR _m$[ebp]
sar	ecx, 16					
mov	edx, DWORD PTR _l$[ebp]
sar	edx, 31					
add	ecx, DWORD PTR tv86[ebp]
add	edx, ecx
mov	DWORD PTR _hi2$[ebp], edx
mov	eax, DWORD PTR _lo1$[ebp]
add	eax, DWORD PTR _lo2$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR _lo1$[ebp]
jae	SHORT $LN7@TT_DotFix1
mov	DWORD PTR tv91[ebp], 1
jmp	SHORT $LN8@TT_DotFix1
mov	DWORD PTR tv91[ebp], 0
mov	edx, DWORD PTR _hi1$[ebp]
add	edx, DWORD PTR _hi2$[ebp]
add	edx, DWORD PTR tv91[ebp]
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _hi$[ebp]
sar	eax, 31					
mov	DWORD PTR _s$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
add	ecx, DWORD PTR _s$[ebp]
mov	DWORD PTR _l$[ebp], ecx
mov	edx, DWORD PTR _l$[ebp]
cmp	edx, DWORD PTR _lo$[ebp]
jae	SHORT $LN9@TT_DotFix1
mov	DWORD PTR tv128[ebp], 1
jmp	SHORT $LN10@TT_DotFix1
mov	DWORD PTR tv128[ebp], 0
mov	eax, DWORD PTR _s$[ebp]
add	eax, DWORD PTR tv128[ebp]
add	eax, DWORD PTR _hi$[ebp]
mov	DWORD PTR _hi$[ebp], eax
mov	ecx, DWORD PTR _l$[ebp]
mov	DWORD PTR _lo$[ebp], ecx
mov	edx, DWORD PTR _lo$[ebp]
add	edx, 8192				
mov	DWORD PTR _l$[ebp], edx
mov	eax, DWORD PTR _l$[ebp]
cmp	eax, DWORD PTR _lo$[ebp]
jae	SHORT $LN11@TT_DotFix1
mov	DWORD PTR tv133[ebp], 1
jmp	SHORT $LN12@TT_DotFix1
mov	DWORD PTR tv133[ebp], 0
mov	ecx, DWORD PTR _hi$[ebp]
add	ecx, DWORD PTR tv133[ebp]
mov	DWORD PTR _hi$[ebp], ecx
mov	eax, DWORD PTR _hi$[ebp]
shl	eax, 18					
mov	edx, DWORD PTR _l$[ebp]
shr	edx, 14					
or	eax, edx
pop	edi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_MulFix14 PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _a$[ebp]
xor	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _sign$[ebp], eax
cmp	DWORD PTR _a$[ebp], 0
jge	SHORT $LN3@TT_MulFix1
mov	ecx, DWORD PTR _a$[ebp]
neg	ecx
mov	DWORD PTR _a$[ebp], ecx
cmp	DWORD PTR _b$[ebp], 0
jge	SHORT $LN2@TT_MulFix1
mov	edx, DWORD PTR _b$[ebp]
neg	edx
mov	DWORD PTR _b$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
sar	eax, 16					
and	eax, 65535				
mov	DWORD PTR _ah$[ebp], eax
mov	ecx, DWORD PTR _a$[ebp]
and	ecx, 65535				
mov	DWORD PTR _al$[ebp], ecx
mov	edx, DWORD PTR _al$[ebp]
imul	edx, DWORD PTR _b$[ebp]
mov	DWORD PTR _lo$[ebp], edx
mov	eax, DWORD PTR _ah$[ebp]
imul	eax, DWORD PTR _b$[ebp]
mov	DWORD PTR _mid$[ebp], eax
mov	ecx, DWORD PTR _mid$[ebp]
shr	ecx, 16					
mov	DWORD PTR _hi$[ebp], ecx
mov	edx, DWORD PTR _mid$[ebp]
shl	edx, 16					
add	edx, 8192				
mov	DWORD PTR _mid$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
add	eax, DWORD PTR _mid$[ebp]
mov	DWORD PTR _lo$[ebp], eax
mov	ecx, DWORD PTR _lo$[ebp]
cmp	ecx, DWORD PTR _mid$[ebp]
jae	SHORT $LN1@TT_MulFix1
mov	edx, DWORD PTR _hi$[ebp]
add	edx, 1
mov	DWORD PTR _hi$[ebp], edx
mov	eax, DWORD PTR _lo$[ebp]
shr	eax, 14					
mov	ecx, DWORD PTR _hi$[ebp]
shl	ecx, 18					
or	eax, ecx
mov	DWORD PTR _mid$[ebp], eax
cmp	DWORD PTR _sign$[ebp], 0
jl	SHORT $LN6@TT_MulFix1
mov	edx, DWORD PTR _mid$[ebp]
mov	DWORD PTR tv85[ebp], edx
jmp	SHORT $LN7@TT_MulFix1
mov	eax, DWORD PTR _mid$[ebp]
neg	eax
mov	DWORD PTR tv85[ebp], eax
mov	eax, DWORD PTR tv85[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_Init_Context PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN4@Init_Conte
mov	edx, DWORD PTR _exec$[ebp]
push	edx
push	OFFSET $SG11003
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN5@Init_Conte
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+432], 32			
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+432]
push	eax
push	0
push	16					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+436], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@Init_Conte
jmp	SHORT $Fail_Memory$11
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+440], ax
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+442], dx
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+20], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+388], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+24], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+392], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+4], 0
xor	eax, eax
jmp	SHORT $LN6@Init_Conte
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
push	OFFSET $SG11012
call	_FT_Message
add	esp, 8
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Done_Context
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@Init_Conte
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN9@Init_Conte
DD	-8					
DD	4
DD	$LN8@Init_Conte
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_size_init_bytecode PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _ftsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _ftsize$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 260				
mov	DWORD PTR _maxp$[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+300], -1
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+304], -1
mov	edx, DWORD PTR _maxp$[ebp]
movzx	eax, WORD PTR [edx+20]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+120], eax
mov	edx, DWORD PTR _maxp$[ebp]
movzx	eax, WORD PTR [edx+22]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+132], eax
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+116], 0
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+128], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+140], 0
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+144], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+644]
mov	DWORD PTR [eax+240], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _maxp$[ebp]
mov	dx, WORD PTR [ecx+18]
mov	WORD PTR [eax+248], dx
mov	eax, DWORD PTR _size$[ebp]
add	eax, 72					
mov	DWORD PTR _metrics$2[ebp], eax
mov	ecx, DWORD PTR _metrics$2[ebp]
mov	BYTE PTR [ecx+37], 0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	BYTE PTR [edx+38], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [edx+ecx+20], 0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [ecx+eax+20], 0
mov	edx, 4
shl	edx, 1
mov	eax, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [eax+edx+20], 0
mov	ecx, 4
imul	edx, ecx, 3
mov	eax, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [eax+edx+20], 0
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+120]
push	eax
push	0
push	24					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+124], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN4@tt_size_in
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+132]
push	edx
push	0
push	24					
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+136], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@tt_size_in
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+240]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+244], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN4@tt_size_in
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, WORD PTR [eax+248]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+252], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@tt_size_in
jmp	$Exit$11
mov	edx, DWORD PTR _maxp$[ebp]
mov	ax, WORD PTR [edx+16]
mov	WORD PTR _n_twilight$[ebp], ax
movzx	ecx, WORD PTR _n_twilight$[ebp]
add	ecx, 4
mov	WORD PTR _n_twilight$[ebp], cx
mov	edx, DWORD PTR _size$[ebp]
add	edx, 256				
push	edx
push	0
movzx	eax, WORD PTR _n_twilight$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_tt_glyphzone_new
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_size_in
jmp	SHORT $Exit$11
mov	edx, DWORD PTR _size$[ebp]
mov	ax, WORD PTR _n_twilight$[ebp]
mov	WORD PTR [edx+264], ax
mov	edi, DWORD PTR _size$[ebp]
add	edi, 172				
mov	ecx, 17					
mov	esi, OFFSET _tt_default_graphics_state
rep movsd
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$1[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _library$1[ebp]
mov	edx, DWORD PTR [ecx+edx+172]
mov	DWORD PTR [eax+652], edx
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+652], 0
jne	SHORT $LN2@tt_size_in
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+652], OFFSET _TT_RunIns
movzx	edx, BYTE PTR _pedantic$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_tt_size_run_fpgm
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@tt_size_in
mov	ecx, DWORD PTR _ftsize$[ebp]
push	ecx
call	_tt_size_done_bytecode
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@tt_size_in
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN9@tt_size_in
DD	-8					
DD	4
DD	$LN8@tt_size_in
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_size_done_bytecode PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ftsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _ftsize$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN12@tt_size_do
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+296], 0
mov	edx, DWORD PTR _size$[ebp]
mov	BYTE PTR [edx+292], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+244]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+244], 0
xor	ecx, ecx
jne	SHORT $LN12@tt_size_do
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+240], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+252]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+252], 0
xor	ecx, ecx
jne	SHORT $LN9@tt_size_do
xor	edx, edx
mov	eax, DWORD PTR _size$[ebp]
mov	WORD PTR [eax+248], dx
mov	ecx, DWORD PTR _size$[ebp]
add	ecx, 256				
push	ecx
call	_tt_glyphzone_done
add	esp, 4
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+124]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+124], 0
xor	eax, eax
jne	SHORT $LN6@tt_size_do
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+136]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+136], 0
xor	edx, edx
jne	SHORT $LN3@tt_size_do
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+116], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+120], 0
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+128], 0
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+132], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+140], 0
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+144], 0
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+300], -1
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+304], -1
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_check_single_notdef PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	BYTE PTR _result$[ebp], 0
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	DWORD PTR _glyph_index$[ebp], 0
mov	DWORD PTR _count$[ebp], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN9@tt_check_s
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx+696]
jae	SHORT $LN7@tt_check_s
lea	ecx, DWORD PTR _asize$[ebp]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_get_location
add	esp, 12					
cmp	DWORD PTR _asize$[ebp], 0
jbe	SHORT $LN6@tt_check_s
mov	ecx, DWORD PTR _count$[ebp]
add	ecx, 1
mov	DWORD PTR _count$[ebp], ecx
cmp	DWORD PTR _count$[ebp], 1
jbe	SHORT $LN5@tt_check_s
jmp	SHORT $LN7@tt_check_s
mov	edx, DWORD PTR _i$[ebp]
mov	DWORD PTR _glyph_index$[ebp], edx
jmp	SHORT $LN8@tt_check_s
cmp	DWORD PTR _count$[ebp], 1
jne	SHORT $LN4@tt_check_s
cmp	DWORD PTR _glyph_index$[ebp], 0
jne	SHORT $LN3@tt_check_s
mov	BYTE PTR _result$[ebp], 1
jmp	SHORT $LN4@tt_check_s
push	8
lea	eax, DWORD PTR _buf$1[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _ttface$[ebp]
push	edx
call	_FT_Get_Glyph_Name
add	esp, 16					
mov	DWORD PTR _error$2[ebp], eax
cmp	DWORD PTR _error$2[ebp], 0
jne	SHORT $LN4@tt_check_s
mov	eax, 1
imul	ecx, eax, 0
movsx	edx, BYTE PTR _buf$1[ebp+ecx]
cmp	edx, 46					
jne	SHORT $LN4@tt_check_s
mov	esi, esp
push	8
push	OFFSET $SG10592
lea	eax, DWORD PTR _buf$1[ebp]
push	eax
call	DWORD PTR __imp__strncmp
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
jne	SHORT $LN4@tt_check_s
mov	BYTE PTR _result$[ebp], 1
mov	al, BYTE PTR _result$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN15@tt_check_s
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN14@tt_check_s
DD	-20					
DD	4
DD	$LN12@tt_check_s
DD	-52					
DD	8
DD	$LN13@tt_check_s
DB	98					
DB	117					
DB	102					
DB	0
DB	97					
DB	115					
DB	105					
DB	122					
DB	101					
DB	0
ENDP
_tt_check_trickyness PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN3@tt_check_t
xor	al, al
jmp	SHORT $LN4@tt_check_t
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN2@tt_check_t
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
call	_tt_check_trickyness_family
add	esp, 4
movzx	eax, al
test	eax, eax
je	SHORT $LN2@tt_check_t
mov	al, 1
jmp	SHORT $LN4@tt_check_t
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_check_trickyness_sfnt_ids
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN1@tt_check_t
mov	al, 1
jmp	SHORT $LN4@tt_check_t
xor	al, al
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_tt_check_trickyness_sfnt_ids PROC
push	ebp
mov	ebp, esp
sub	esp, 104				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-104]
mov	ecx, 26					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	68					
push	0
lea	eax, DWORD PTR _num_matched_ids$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	BYTE PTR _has_cvt$[ebp], 0
mov	BYTE PTR _has_fpgm$[ebp], 0
mov	BYTE PTR _has_prep$[ebp], 0
xor	ecx, ecx
mov	WORD PTR _i$[ebp], cx
jmp	SHORT $LN23@tt_check_t
mov	dx, WORD PTR _i$[ebp]
add	dx, 1
mov	WORD PTR _i$[ebp], dx
movzx	eax, WORD PTR _i$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+152]
cmp	eax, edx
jge	$LN21@tt_check_t
mov	DWORD PTR _checksum$[ebp], 0
movzx	eax, WORD PTR _i$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR tv77[ebp], eax
cmp	DWORD PTR tv77[ebp], 1668707360		
je	SHORT $LN18@tt_check_t
cmp	DWORD PTR tv77[ebp], 1718642541		
je	SHORT $LN17@tt_check_t
cmp	DWORD PTR tv77[ebp], 1886545264		
je	SHORT $LN16@tt_check_t
jmp	SHORT $LN15@tt_check_t
mov	DWORD PTR _k$[ebp], 0
mov	BYTE PTR _has_cvt$[ebp], 1
jmp	SHORT $LN19@tt_check_t
mov	DWORD PTR _k$[ebp], 1
mov	BYTE PTR _has_fpgm$[ebp], 1
jmp	SHORT $LN19@tt_check_t
mov	DWORD PTR _k$[ebp], 2
mov	BYTE PTR _has_prep$[ebp], 1
jmp	SHORT $LN19@tt_check_t
jmp	$LN22@tt_check_t
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN14@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
cmp	DWORD PTR _j$[ebp], 17			
jge	SHORT $LN12@tt_check_t
movzx	edx, WORD PTR _i$[ebp]
shl	edx, 4
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+156]
imul	eax, DWORD PTR _j$[ebp], 24
mov	esi, DWORD PTR _k$[ebp]
mov	ecx, DWORD PTR [ecx+edx+12]
cmp	ecx, DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[eax+esi*8+4]
jne	SHORT $LN11@tt_check_t
cmp	DWORD PTR _checksum$[ebp], 0
jne	SHORT $LN10@tt_check_t
movzx	edx, WORD PTR _i$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_get_sfnt_checksum
add	esp, 8
mov	DWORD PTR _checksum$[ebp], eax
imul	ecx, DWORD PTR _j$[ebp], 24
mov	edx, DWORD PTR _k$[ebp]
mov	eax, DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[ecx+edx*8]
cmp	eax, DWORD PTR _checksum$[ebp]
jne	SHORT $LN9@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
mov	ecx, DWORD PTR _j$[ebp]
cmp	DWORD PTR _num_matched_ids$[ebp+ecx*4], 3
jne	SHORT $LN11@tt_check_t
mov	al, 1
jmp	$LN24@tt_check_t
jmp	$LN13@tt_check_t
jmp	$LN22@tt_check_t
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN7@tt_check_t
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
cmp	DWORD PTR _j$[ebp], 17			
jge	$LN5@tt_check_t
movzx	eax, BYTE PTR _has_cvt$[ebp]
test	eax, eax
jne	SHORT $LN4@tt_check_t
imul	ecx, DWORD PTR _j$[ebp], 24
mov	edx, 8
imul	eax, edx, 0
cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[ecx+eax+4], 0
jne	SHORT $LN4@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
movzx	ecx, BYTE PTR _has_fpgm$[ebp]
test	ecx, ecx
jne	SHORT $LN3@tt_check_t
imul	edx, DWORD PTR _j$[ebp], 24
mov	eax, 8
shl	eax, 0
cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[edx+eax+4], 0
jne	SHORT $LN3@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
movzx	ecx, BYTE PTR _has_prep$[ebp]
test	ecx, ecx
jne	SHORT $LN2@tt_check_t
imul	edx, DWORD PTR _j$[ebp], 24
mov	eax, 8
shl	eax, 1
cmp	DWORD PTR ?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[edx+eax+4], 0
jne	SHORT $LN2@tt_check_t
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _num_matched_ids$[ebp+ecx*4]
add	edx, 1
mov	eax, DWORD PTR _j$[ebp]
mov	DWORD PTR _num_matched_ids$[ebp+eax*4], edx
mov	ecx, DWORD PTR _j$[ebp]
cmp	DWORD PTR _num_matched_ids$[ebp+ecx*4], 3
jne	SHORT $LN1@tt_check_t
mov	al, 1
jmp	SHORT $LN24@tt_check_t
jmp	$LN6@tt_check_t
xor	al, al
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN28@tt_check_t
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 104				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN27@tt_check_t
DD	-80					
DD	68					
DD	$LN26@tt_check_t
DB	110					
DB	117					
DB	109					
DB	95					
DB	109					
DB	97					
DB	116					
DB	99					
DB	104					
DB	101					
DB	100					
DB	95					
DB	105					
DB	100					
DB	115					
DB	0
ENDP
_tt_get_sfnt_checksum PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+508], 0
jne	SHORT $LN2@tt_get_sfn
xor	eax, eax
jmp	SHORT $LN3@tt_get_sfn
mov	esi, esp
push	0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
push	edx
movzx	eax, WORD PTR _i$[ebp]
shl	eax, 4
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	eax, DWORD PTR [edx+eax]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@tt_get_sfn
xor	eax, eax
jmp	SHORT $LN3@tt_get_sfn
movzx	ecx, WORD PTR _i$[ebp]
shl	ecx, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+156]
mov	ecx, DWORD PTR [eax+ecx+12]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+104]
push	eax
call	_tt_synth_sfnt_checksum
add	esp, 8
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_tt_synth_sfnt_checksum PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _checksum$[ebp], 0
mov	eax, DWORD PTR _length$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@tt_synth_s
xor	eax, eax
jmp	SHORT $LN8@tt_synth_s
jmp	SHORT $LN6@tt_synth_s
mov	edx, DWORD PTR _length$[ebp]
sub	edx, 4
mov	DWORD PTR _length$[ebp], edx
cmp	DWORD PTR _length$[ebp], 3
jbe	SHORT $LN4@tt_synth_s
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetULong
add	esp, 4
add	eax, DWORD PTR _checksum$[ebp]
mov	DWORD PTR _checksum$[ebp], eax
jmp	SHORT $LN5@tt_synth_s
mov	DWORD PTR _i$[ebp], 3
jmp	SHORT $LN3@tt_synth_s
mov	ecx, DWORD PTR _length$[ebp]
sub	ecx, 1
mov	DWORD PTR _length$[ebp], ecx
mov	edx, DWORD PTR _i$[ebp]
sub	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _length$[ebp], 0
jbe	SHORT $LN1@tt_synth_s
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetChar
add	esp, 4
movzx	edx, al
mov	ecx, DWORD PTR _i$[ebp]
shl	ecx, 3
shl	edx, cl
add	edx, DWORD PTR _checksum$[ebp]
mov	DWORD PTR _checksum$[ebp], edx
jmp	SHORT $LN2@tt_synth_s
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	eax, DWORD PTR _checksum$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_check_trickyness_family PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@tt_check_t
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
cmp	DWORD PTR _nn$[ebp], 9
jge	SHORT $LN2@tt_check_t
imul	ecx, DWORD PTR _nn$[ebp], 20
add	ecx, OFFSET ?trick_names@?1??tt_check_trickyness_family@@9@9
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _name$[ebp]
push	edx
call	DWORD PTR __imp__strstr
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@tt_check_t
mov	al, 1
jmp	SHORT $LN5@tt_check_t
jmp	SHORT $LN3@tt_check_t
xor	al, al
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_loader_init PROC
push	ebp
mov	ebp, esp
sub	esp, 40					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-40]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 128				
mov	BYTE PTR _pedantic$[ebp], al
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
push	208					
push	0
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 2
jne	$LN29@tt_loader_
movzx	ecx, BYTE PTR _glyf_table_only$[ebp]
test	ecx, ecx
jne	$LN29@tt_loader_
mov	BYTE PTR _reexecute$3[ebp], 0
mov	edx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [edx+300], 0
jl	SHORT $LN27@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+304], 0
jge	SHORT $LN28@tt_loader_
movzx	ecx, BYTE PTR _pedantic$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
call	_tt_size_ready_bytecode
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@tt_loader_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN30@tt_loader_
jmp	SHORT $LN25@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+300], 0
je	SHORT $LN24@tt_loader_
mov	ecx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [ecx+300]
jmp	$LN30@tt_loader_
jmp	SHORT $LN25@tt_loader_
mov	edx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [edx+304], 0
je	SHORT $LN25@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [eax+304]
jmp	$LN30@tt_loader_
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, BYTE PTR [ecx+292]
test	edx, edx
je	SHORT $LN32@tt_loader_
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+296]
mov	DWORD PTR tv95[ebp], ecx
jmp	SHORT $LN33@tt_loader_
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+96]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR tv95[ebp], ecx
mov	edx, DWORD PTR tv95[ebp]
mov	DWORD PTR _exec$5[ebp], edx
cmp	DWORD PTR _exec$5[ebp], 0
jne	SHORT $LN21@tt_loader_
push	OFFSET $SG10324
push	2143					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	$LN30@tt_loader_
mov	eax, DWORD PTR _load_flags$[ebp]
sar	eax, 16					
and	eax, 15					
cmp	eax, 2
je	SHORT $LN34@tt_loader_
mov	BYTE PTR tv137[ebp], 1
jmp	SHORT $LN35@tt_loader_
mov	BYTE PTR tv137[ebp], 0
mov	cl, BYTE PTR tv137[ebp]
mov	BYTE PTR _grayscale$4[ebp], cl
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _exec$5[ebp]
push	ecx
call	_TT_Load_Context
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@tt_loader_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN30@tt_loader_
movzx	edx, BYTE PTR _grayscale$4[ebp]
mov	eax, DWORD PTR _exec$5[ebp]
movzx	ecx, BYTE PTR [eax+608]
cmp	edx, ecx
je	SHORT $LN19@tt_loader_
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 4
jl	SHORT $LN17@tt_loader_
push	OFFSET $SG10333
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN18@tt_loader_
mov	edx, DWORD PTR _exec$5[ebp]
mov	al, BYTE PTR _grayscale$4[ebp]
mov	BYTE PTR [edx+608], al
mov	BYTE PTR _reexecute$3[ebp], 1
movzx	ecx, BYTE PTR _reexecute$3[ebp]
test	ecx, ecx
je	SHORT $LN14@tt_loader_
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN13@tt_loader_
mov	edx, DWORD PTR _i$2[ebp]
add	edx, 1
mov	DWORD PTR _i$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _i$2[ebp]
cmp	ecx, DWORD PTR [eax+240]
jae	SHORT $LN11@tt_loader_
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+88]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
mov	eax, DWORD PTR _i$2[ebp]
movsx	ecx, WORD PTR [edx+eax*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [edx+244]
mov	edx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [ecx+edx*4], eax
jmp	SHORT $LN12@tt_loader_
movzx	eax, BYTE PTR _pedantic$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_tt_size_run_prep
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@tt_loader_
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN30@tt_loader_
mov	edx, DWORD PTR _exec$5[ebp]
movzx	eax, BYTE PTR [edx+336]
and	eax, 1
je	SHORT $LN9@tt_loader_
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 2
mov	DWORD PTR _load_flags$[ebp], ecx
mov	edx, DWORD PTR _exec$5[ebp]
movzx	eax, BYTE PTR [edx+336]
and	eax, 2
je	SHORT $LN8@tt_loader_
mov	edi, DWORD PTR _exec$5[ebp]
add	edi, 284				
mov	ecx, 17					
mov	esi, OFFSET _tt_default_graphics_state
rep movsd
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 128				
mov	edx, DWORD PTR _exec$5[ebp]
mov	BYTE PTR [edx+561], cl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _exec$5[ebp]
mov	DWORD PTR [eax+160], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _exec$5[ebp]
mov	ecx, DWORD PTR [eax+392]
mov	DWORD PTR [edx+164], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax+48], 0
je	SHORT $LN7@tt_loader_
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+84], 0
jmp	SHORT $LN6@tt_loader_
mov	esi, esp
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1735162214				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
and	eax, 255				
cmp	eax, 142				
jne	SHORT $LN5@tt_loader_
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+84], 0
jmp	SHORT $LN6@tt_loader_
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_loader_
push	OFFSET $SG10355
call	_FT_Message
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN30@tt_loader_
jmp	SHORT $LN6@tt_loader_
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+84], eax
movzx	edx, BYTE PTR _glyf_table_only$[ebp]
test	edx, edx
jne	SHORT $LN1@tt_loader_
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _gloader$1[ebp], edx
mov	eax, DWORD PTR _gloader$1[ebp]
push	eax
call	_FT_GlyphLoader_Rewind
add	esp, 4
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _gloader$1[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _load_flags$[ebp]
mov	DWORD PTR [eax+16], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+24], eax
xor	eax, eax
pop	edi
pop	esi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_load_sbit_image PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+532]
mov	DWORD PTR _sfnt$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
mov	DWORD PTR _stream$[ebp], edx
mov	esi, esp
lea	eax, DWORD PTR _metrics$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
add	ecx, 76					
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+112]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+72]
call	eax
add	esp, 28					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN3@load_sbit_
xor	ecx, ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [edx+110], cx
xor	eax, eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	WORD PTR [ecx+108], ax
movzx	edx, WORD PTR _metrics$[ebp+2]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+24], edx
movzx	ecx, WORD PTR _metrics$[ebp]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+28], ecx
movsx	eax, WORD PTR _metrics$[ebp+4]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+32], eax
movsx	edx, WORD PTR _metrics$[ebp+6]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+36], edx
movzx	ecx, WORD PTR _metrics$[ebp+8]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+40], ecx
movsx	eax, WORD PTR _metrics$[ebp+10]
shl	eax, 6
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+44], eax
movsx	edx, WORD PTR _metrics$[ebp+12]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+48], edx
movzx	ecx, WORD PTR _metrics$[ebp+14]
shl	ecx, 6
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+52], ecx
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+72], 1651078259		
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 16					
je	SHORT $LN2@load_sbit_
movsx	edx, WORD PTR _metrics$[ebp+10]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+100], edx
movsx	ecx, WORD PTR _metrics$[ebp+12]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+104], ecx
jmp	SHORT $LN3@load_sbit_
movsx	eax, WORD PTR _metrics$[ebp+4]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+100], eax
movsx	edx, WORD PTR _metrics$[ebp+6]
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+104], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@load_sbit_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN7@load_sbit_
DD	-40					
DD	16					
DD	$LN6@load_sbit_
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
ENDP
_compute_glyph_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 92					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-92]
mov	ecx, 23					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _glyph$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _size$[ebp], edx
mov	DWORD PTR _y_scale$[ebp], 65536		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
jne	SHORT $LN14@compute_gl
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _y_scale$[ebp], eax
mov	ecx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [ecx+72], 1668246896		
je	SHORT $LN13@compute_gl
lea	edx, DWORD PTR _bbox$[ebp]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Get_CBox
add	esp, 8
jmp	SHORT $LN12@compute_gl
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 36					
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _bbox$[ebp], edx
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR _bbox$[ebp+4], eax
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _bbox$[ebp+8], edx
mov	eax, DWORD PTR [ecx+12]
mov	DWORD PTR _bbox$[ebp+12], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+60]
mov	DWORD PTR [ecx+56], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _bbox$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _bbox$[ebp+12]
mov	DWORD PTR [eax+36], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [edx+76]
sub	ecx, DWORD PTR [eax+68]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+40], ecx
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+480], 0
jne	SHORT $LN11@compute_gl
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 2
jne	SHORT $LN11@compute_gl
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, WORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_get_device_metrics
add	esp, 12					
mov	DWORD PTR _widthp$7[ebp], eax
cmp	DWORD PTR _widthp$7[ebp], 0
je	SHORT $LN11@compute_gl
mov	ecx, DWORD PTR _widthp$7[ebp]
movzx	edx, BYTE PTR [ecx]
shl	edx, 6
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+40], edx
mov	ecx, DWORD PTR _bbox$[ebp+8]
sub	ecx, DWORD PTR _bbox$[ebp]
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _bbox$[ebp+12]
sub	eax, DWORD PTR _bbox$[ebp+4]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN9@compute_gl
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+330]
test	edx, edx
jle	SHORT $LN9@compute_gl
mov	eax, DWORD PTR _y_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+188]
sub	edx, DWORD PTR _bbox$[ebp+12]
push	edx
call	_FT_DivFix
add	esp, 8
cwde
mov	DWORD PTR _top$6[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [ecx+188]
cmp	eax, DWORD PTR [edx+196]
jg	SHORT $LN8@compute_gl
mov	DWORD PTR _advance$5[ebp], 0
jmp	SHORT $LN7@compute_gl
mov	ecx, DWORD PTR _y_scale$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [edx+188]
sub	ecx, DWORD PTR [eax+196]
push	ecx
call	_FT_DivFix
add	esp, 8
movzx	edx, ax
mov	DWORD PTR _advance$5[ebp], edx
jmp	SHORT $LN6@compute_gl
mov	eax, DWORD PTR _y_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _bbox$[ebp+12]
sub	ecx, DWORD PTR _bbox$[ebp+4]
push	ecx
call	_FT_DivFix
add	esp, 8
movsx	edx, ax
mov	DWORD PTR _height$4[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+364]
cmp	ecx, 65535				
je	SHORT $LN5@compute_gl
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+436]
sub	eax, edx
mov	DWORD PTR _advance$5[ebp], eax
jmp	SHORT $LN4@compute_gl
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+220]
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+222]
sub	ecx, eax
mov	DWORD PTR _advance$5[ebp], ecx
mov	eax, DWORD PTR _advance$5[ebp]
sub	eax, DWORD PTR _height$4[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _top$6[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _incr$3[ebp], eax
cmp	DWORD PTR _incr$3[ebp], 0
je	SHORT $LN3@compute_gl
mov	ecx, DWORD PTR _incr$3[ebp]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+8], 0
je	SHORT $LN3@compute_gl
mov	DWORD PTR _metrics$2[ebp], 0
mov	eax, DWORD PTR _top$6[ebp]
mov	DWORD PTR _metrics$2[ebp+4], eax
mov	ecx, DWORD PTR _advance$5[ebp]
mov	DWORD PTR _metrics$2[ebp+8], ecx
mov	esi, esp
lea	edx, DWORD PTR _metrics$2[ebp]
push	edx
push	1
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _incr$3[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _incr$3[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
je	SHORT $LN2@compute_gl
mov	eax, DWORD PTR _error$1[ebp]
jmp	SHORT $LN15@compute_gl
mov	eax, DWORD PTR _metrics$2[ebp+4]
mov	DWORD PTR _top$6[ebp], eax
mov	ecx, DWORD PTR _metrics$2[ebp+8]
mov	DWORD PTR _advance$5[ebp], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _advance$5[ebp]
mov	DWORD PTR [edx+60], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	SHORT $LN1@compute_gl
mov	eax, DWORD PTR _y_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _top$6[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _top$6[ebp], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _advance$5[ebp]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _advance$5[ebp], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [ecx+40]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [edx+32]
sub	ecx, eax
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _top$6[ebp]
mov	DWORD PTR [eax+48], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR _advance$5[ebp]
mov	DWORD PTR [edx+52], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@compute_gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 92					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	2
DD	$LN19@compute_gl
DD	-28					
DD	16					
DD	$LN17@compute_gl
DD	-84					
DD	16					
DD	$LN18@compute_gl
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
DB	98					
DB	98					
DB	111					
DB	120					
DB	0
ENDP
_load_truetype_glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 216				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-216]
mov	ecx, 54					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _gloader$[ebp], eax
mov	BYTE PTR _opened_frame$[ebp], 0
mov	DWORD PTR _deltas$[ebp], 0
mov	BYTE PTR _glyph_data_loaded$[ebp], 0
cmp	DWORD PTR _recurse_count$[ebp], 1
jbe	SHORT $LN62@load_truet
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+290]
cmp	DWORD PTR _recurse_count$[ebp], edx
jbe	SHORT $LN62@load_truet
push	OFFSET $SG10101
push	1428					
push	21					
call	_FT_Throw
add	esp, 12					
or	eax, 21					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$71
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _glyph_index$[ebp]
cmp	ecx, DWORD PTR [eax+16]
jb	SHORT $LN61@load_truet
push	OFFSET $SG10105
push	1435					
push	16					
call	_FT_Throw
add	esp, 12					
or	eax, 16					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$71
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _glyph_index$[ebp]
mov	DWORD PTR [edx+20], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	SHORT $LN60@load_truet
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+48]
mov	DWORD PTR _x_scale$[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR [ecx+52]
mov	DWORD PTR _y_scale$[ebp], edx
jmp	SHORT $LN59@load_truet
mov	DWORD PTR _x_scale$[ebp], 65536		
mov	DWORD PTR _y_scale$[ebp], 65536		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	$LN58@load_truet
mov	esi, esp
lea	edx, DWORD PTR _glyph_data$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN57@load_truet
jmp	$Exit$71
mov	BYTE PTR _glyph_data_loaded$[ebp], 1
mov	DWORD PTR _offset$[ebp], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _glyph_data$[ebp+4]
mov	DWORD PTR [ecx+28], edx
push	40					
push	0
lea	eax, DWORD PTR _inc_stream$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _glyph_data$[ebp+4]
push	ecx
mov	edx, DWORD PTR _glyph_data$[ebp]
push	edx
lea	eax, DWORD PTR _inc_stream$[ebp]
push	eax
call	_FT_Stream_OpenMemory
add	esp, 12					
mov	ecx, DWORD PTR _loader$[ebp]
lea	edx, DWORD PTR _inc_stream$[ebp]
mov	DWORD PTR [ecx+24], edx
jmp	SHORT $LN56@load_truet
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 28					
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_tt_face_get_location
add	esp, 12					
mov	DWORD PTR _offset$[ebp], eax
mov	eax, DWORD PTR _loader$[ebp]
cmp	DWORD PTR [eax+28], 0
jle	$LN55@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
cmp	DWORD PTR [ecx+84], 0
jne	SHORT $LN54@load_truet
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax+48], 0
jne	SHORT $LN54@load_truet
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN52@load_truet
push	OFFSET $SG10120
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN53@load_truet
push	OFFSET $SG10121
push	1497					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$71
mov	esi, esp
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+84]
add	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+512]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN49@load_truet
jmp	$Exit$71
mov	BYTE PTR _opened_frame$[ebp], 1
mov	esi, esp
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+520]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN48@load_truet
jmp	$Exit$71
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_tt_get_metrics
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN47@load_truet
jmp	$Exit$71
movzx	edx, BYTE PTR _header_only$[ebp]
test	edx, edx
je	SHORT $LN55@load_truet
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
cmp	DWORD PTR [eax+28], 0
je	SHORT $LN44@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
movsx	edx, WORD PTR [ecx+32]
test	edx, edx
jne	$LN32@load_truet
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+36], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+44], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+40], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+48], 0
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_tt_get_metrics
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN43@load_truet
jmp	$Exit$71
movzx	eax, BYTE PTR _header_only$[ebp]
test	eax, eax
je	SHORT $LN41@load_truet
jmp	$Exit$71
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [ecx+36]
sub	eax, DWORD PTR [edx+52]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+72], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	edx, DWORD PTR _loader$[ebp]
add	ecx, DWORD PTR [edx+56]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], ecx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+80], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+184], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR _loader$[ebp]
add	ecx, DWORD PTR [edx+176]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+188], ecx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [edx+188]
sub	ecx, DWORD PTR [eax+180]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+196], ecx
xor	eax, eax
jne	$LN41@load_truet
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_tt_get_metrics_incr_overrides
add	esp, 8
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
movzx	edx, BYTE PTR [ecx+672]
test	edx, edx
je	$LN38@load_truet
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$17[ebp], edx
push	4
lea	eax, DWORD PTR _deltas$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_TT_Vary_Get_Glyph_Deltas
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN37@load_truet
jmp	$Exit$71
mov	ecx, 8
imul	edx, ecx, 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	eax, DWORD PTR _deltas$[ebp]
add	ecx, DWORD PTR [eax+edx]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+68], ecx
mov	eax, 8
imul	ecx, eax, 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+72]
mov	edx, DWORD PTR _deltas$[ebp]
add	eax, DWORD PTR [edx+ecx+4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+72], eax
mov	edx, 8
shl	edx, 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	eax, DWORD PTR _deltas$[ebp]
add	ecx, DWORD PTR [eax+edx]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], ecx
mov	eax, 8
shl	eax, 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+80]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+80], edx
mov	ecx, 8
shl	ecx, 1
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+184]
mov	edx, DWORD PTR _deltas$[ebp]
add	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], eax
mov	edx, 8
shl	edx, 1
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+188]
mov	eax, DWORD PTR _deltas$[ebp]
add	ecx, DWORD PTR [eax+edx+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], ecx
mov	eax, 8
imul	ecx, eax, 3
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	edx, DWORD PTR _deltas$[ebp]
add	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], eax
mov	edx, 8
imul	eax, edx, 3
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+196]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+196], edx
mov	ecx, DWORD PTR _deltas$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$17[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	eax, eax
jne	SHORT $LN36@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	$LN33@load_truet
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+68]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], eax
mov	edx, DWORD PTR _x_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+188]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+192]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+196]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+196], eax
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [eax+36]
sub	edx, DWORD PTR [ecx+52]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+68], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+72], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	ecx, DWORD PTR _loader$[ebp]
add	eax, DWORD PTR [ecx+56]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+80], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR _loader$[ebp]
add	eax, DWORD PTR [ecx+176]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+192], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [ecx+188]
sub	eax, DWORD PTR [edx+180]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+196], eax
xor	edx, edx
jne	$LN32@load_truet
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_tt_get_metrics_incr_overrides
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
movsx	eax, WORD PTR [edx+32]
test	eax, eax
jle	SHORT $LN29@load_truet
mov	esi, esp
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+524]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN28@load_truet
jmp	$Exit$71
mov	esi, esp
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+516]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR _opened_frame$[ebp], 0
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_TT_Process_Simple_Glyph
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@load_truet
jmp	$Exit$71
mov	edx, DWORD PTR _gloader$[ebp]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
movsx	ecx, WORD PTR [eax+32]
cmp	ecx, -1
jne	$LN25@load_truet
mov	edx, DWORD PTR _gloader$[ebp]
movsx	eax, WORD PTR [edx+22]
mov	DWORD PTR _start_point$16[ebp], eax
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+20]
mov	DWORD PTR _start_contour$15[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _loader$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+528]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN24@load_truet
jmp	$Exit$71
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+168]
mov	DWORD PTR _ins_pos$14[ebp], ecx
mov	esi, esp
mov	edx, DWORD PTR _loader$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+516]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR _opened_frame$[ebp], 0
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, BYTE PTR [edx+672]
test	eax, eax
je	$LN23@load_truet
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$10[ebp], edx
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+84]
add	ecx, 4
push	ecx
lea	edx, DWORD PTR _deltas$[ebp]
push	edx
mov	eax, DWORD PTR _glyph_index$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Vary_Get_Glyph_Deltas
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN22@load_truet
jmp	$Exit$71
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+48]
shl	eax, 5
mov	ecx, DWORD PTR _gloader$[ebp]
add	eax, DWORD PTR [ecx+88]
mov	DWORD PTR _subglyph$11[ebp], eax
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	DWORD PTR _limit$12[ebp], eax
mov	DWORD PTR _i$13[ebp], 0
jmp	SHORT $LN21@load_truet
mov	ecx, DWORD PTR _i$13[ebp]
add	ecx, 1
mov	DWORD PTR _i$13[ebp], ecx
mov	edx, DWORD PTR _subglyph$11[ebp]
add	edx, 32					
mov	DWORD PTR _subglyph$11[ebp], edx
mov	eax, DWORD PTR _i$13[ebp]
cmp	eax, DWORD PTR _limit$12[ebp]
jge	SHORT $LN19@load_truet
mov	ecx, DWORD PTR _subglyph$11[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 2
je	SHORT $LN18@load_truet
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
movsx	edx, WORD PTR [ecx+eax*8]
mov	eax, DWORD PTR _subglyph$11[ebp]
add	edx, DWORD PTR [eax+8]
mov	ecx, DWORD PTR _subglyph$11[ebp]
mov	DWORD PTR [ecx+8], edx
mov	edx, DWORD PTR _i$13[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
movsx	ecx, WORD PTR [eax+edx*8+4]
mov	edx, DWORD PTR _subglyph$11[ebp]
add	ecx, DWORD PTR [edx+12]
mov	eax, DWORD PTR _subglyph$11[ebp]
mov	DWORD PTR [eax+12], ecx
jmp	SHORT $LN20@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+68]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+68], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+72]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+72], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+8]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+80]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+12]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+80], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+16]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+184], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+188]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+20]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+188], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+192]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+24]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+192], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+196]
mov	eax, DWORD PTR _i$13[ebp]
mov	ecx, DWORD PTR _deltas$[ebp]
add	edx, DWORD PTR [ecx+eax*8+28]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+196], edx
mov	ecx, DWORD PTR _deltas$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$10[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	eax, eax
jne	SHORT $LN17@load_truet
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 1
jne	$LN14@load_truet
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+68]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], eax
mov	edx, DWORD PTR _x_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+76], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+188]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+188], eax
mov	eax, DWORD PTR _x_scale$[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+192]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], eax
mov	edx, DWORD PTR _y_scale$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+196]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+196], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1024				
je	SHORT $LN13@load_truet
mov	edx, DWORD PTR _gloader$[ebp]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+72], 1668246896		
jmp	$Exit$71
mov	DWORD PTR _subglyph$7[ebp], 0
mov	edx, DWORD PTR _start_point$16[ebp]
mov	DWORD PTR _num_points$6[ebp], edx
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	DWORD PTR _num_subglyphs$5[ebp], ecx
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _num_base_subgs$4[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _old_stream$3[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _old_byte_len$2[ebp], ecx
mov	edx, DWORD PTR _gloader$[ebp]
push	edx
call	_FT_GlyphLoader_Add
add	esp, 4
mov	DWORD PTR _n$9[ebp], 0
jmp	SHORT $LN12@load_truet
mov	eax, DWORD PTR _n$9[ebp]
add	eax, 1
mov	DWORD PTR _n$9[ebp], eax
mov	ecx, DWORD PTR _n$9[ebp]
cmp	ecx, DWORD PTR _num_subglyphs$5[ebp]
jae	$LN10@load_truet
mov	edx, DWORD PTR _num_base_subgs$4[ebp]
shl	edx, 5
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+52]
add	ecx, edx
mov	edx, DWORD PTR _n$9[ebp]
shl	edx, 5
add	ecx, edx
mov	DWORD PTR _subglyph$7[ebp], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+68]
mov	edx, DWORD PTR [eax+72]
mov	eax, 8
imul	eax, eax, 0
mov	DWORD PTR _pp$1[ebp+eax], ecx
mov	DWORD PTR _pp$1[ebp+eax+4], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+76]
mov	eax, DWORD PTR [ecx+80]
mov	ecx, 8
shl	ecx, 0
mov	DWORD PTR _pp$1[ebp+ecx], edx
mov	DWORD PTR _pp$1[ebp+ecx+4], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+184]
mov	ecx, DWORD PTR [edx+188]
mov	edx, 8
shl	edx, 1
mov	DWORD PTR _pp$1[ebp+edx], eax
mov	DWORD PTR _pp$1[ebp+edx+4], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+192]
mov	edx, DWORD PTR [eax+196]
mov	eax, 8
imul	eax, eax, 3
mov	DWORD PTR _pp$1[ebp+eax], ecx
mov	DWORD PTR _pp$1[ebp+eax+4], edx
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+22]
mov	DWORD PTR _num_base_points$8[ebp], edx
push	0
mov	eax, DWORD PTR _recurse_count$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _subglyph$7[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_load_truetype_glyph
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@load_truet
jmp	$Exit$71
mov	ecx, DWORD PTR _num_base_subgs$4[ebp]
shl	ecx, 5
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+52]
add	eax, ecx
mov	ecx, DWORD PTR _n$9[ebp]
shl	ecx, 5
add	eax, ecx
mov	DWORD PTR _subglyph$7[ebp], eax
mov	edx, DWORD PTR _subglyph$7[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 512				
jne	$LN8@load_truet
mov	ecx, 8
imul	edx, ecx, 0
mov	eax, DWORD PTR _pp$1[ebp+edx]
mov	ecx, DWORD PTR _pp$1[ebp+edx+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+68], eax
mov	DWORD PTR [edx+72], ecx
mov	eax, 8
shl	eax, 0
mov	ecx, DWORD PTR _pp$1[ebp+eax]
mov	edx, DWORD PTR _pp$1[ebp+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], ecx
mov	DWORD PTR [eax+80], edx
mov	ecx, 8
shl	ecx, 1
mov	edx, DWORD PTR _pp$1[ebp+ecx]
mov	eax, DWORD PTR _pp$1[ebp+ecx+4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], edx
mov	DWORD PTR [ecx+188], eax
mov	edx, 8
imul	eax, edx, 3
mov	ecx, DWORD PTR _pp$1[ebp+eax]
mov	edx, DWORD PTR _pp$1[ebp+eax+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+192], ecx
mov	DWORD PTR [eax+196], edx
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+22]
mov	DWORD PTR _num_points$6[ebp], edx
mov	eax, DWORD PTR _num_points$6[ebp]
cmp	eax, DWORD PTR _num_base_points$8[ebp]
jne	SHORT $LN7@load_truet
jmp	$LN11@load_truet
mov	ecx, DWORD PTR _num_base_points$8[ebp]
push	ecx
mov	edx, DWORD PTR _start_point$16[ebp]
push	edx
mov	eax, DWORD PTR _subglyph$7[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_TT_Process_Composite_Component
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN6@load_truet
jmp	$Exit$71
jmp	$LN11@load_truet
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _old_stream$3[ebp]
mov	DWORD PTR [edx+24], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR _old_byte_len$2[ebp]
mov	DWORD PTR [ecx+28], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _ins_pos$14[ebp]
mov	DWORD PTR [eax+168], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 2
jne	SHORT $LN5@load_truet
mov	ecx, DWORD PTR _subglyph$7[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 256				
je	SHORT $LN5@load_truet
mov	eax, DWORD PTR _num_points$6[ebp]
cmp	eax, DWORD PTR _start_point$16[ebp]
jbe	SHORT $LN5@load_truet
mov	ecx, DWORD PTR _start_contour$15[ebp]
push	ecx
mov	edx, DWORD PTR _start_point$16[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
push	eax
call	_TT_Process_Composite_Glyph
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@load_truet
jmp	SHORT $Exit$71
jmp	SHORT $Exit$71
push	OFFSET $SG10216
push	1820					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
mov	DWORD PTR _error$[ebp], eax
movzx	ecx, BYTE PTR _opened_frame$[ebp]
test	ecx, ecx
je	SHORT $LN2@load_truet
mov	esi, esp
mov	edx, DWORD PTR _loader$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+516]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
movzx	edx, BYTE PTR _glyph_data_loaded$[ebp]
test	edx, edx
je	SHORT $LN1@load_truet
mov	esi, esp
lea	eax, DWORD PTR _glyph_data$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN70@load_truet
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 216				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	4
DD	$LN69@load_truet
DD	-40					
DD	4
DD	$LN65@load_truet
DD	-88					
DD	40					
DD	$LN66@load_truet
DD	-104					
DD	8
DD	$LN67@load_truet
DD	-212					
DD	32					
DD	$LN68@load_truet
DB	112					
DB	112					
DB	0
DB	103					
DB	108					
DB	121					
DB	112					
DB	104					
DB	95					
DB	100					
DB	97					
DB	116					
DB	97					
DB	0
DB	105					
DB	110					
DB	99					
DB	95					
DB	115					
DB	116					
DB	114					
DB	101					
DB	97					
DB	109					
DB	0
DB	100					
DB	101					
DB	108					
DB	116					
DB	97					
DB	115					
DB	0
ENDP
_TT_Process_Composite_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 20					
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
add	eax, 4
je	SHORT $LN23@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
movsx	eax, WORD PTR [edx+22]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
movsx	ecx, WORD PTR [edx+58]
add	eax, ecx
mov	edx, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [edx+2]
lea	edx, DWORD PTR [eax+ecx+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+4]
ja	SHORT $LN24@TT_Process
mov	edx, 1
test	edx, edx
je	SHORT $LN24@TT_Process
mov	DWORD PTR tv93[ebp], 0
jmp	SHORT $LN25@TT_Process
push	0
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
add	ecx, 4
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv93[ebp], eax
mov	ecx, DWORD PTR tv93[ebp]
mov	DWORD PTR _error$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	ecx, DWORD PTR [edx+72]
mov	edx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [edx+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+edx*8], eax
mov	DWORD PTR [esi+edx*8+4], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	edx, DWORD PTR [eax+80]
mov	eax, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [eax+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+eax*8+8], ecx
mov	DWORD PTR [esi+eax*8+12], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
mov	eax, DWORD PTR [ecx+188]
mov	ecx, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [ecx+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+ecx*8+16], edx
mov	DWORD PTR [esi+ecx*8+20], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	ecx, DWORD PTR [edx+196]
mov	edx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [edx+2]
mov	esi, DWORD PTR _outline$[ebp]
mov	esi, DWORD PTR [esi+4]
mov	DWORD PTR [esi+edx*8+24], eax
mov	DWORD PTR [esi+edx*8+28], ecx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	BYTE PTR [eax+ecx], 0
mov	ecx, DWORD PTR _outline$[ebp]
movsx	edx, WORD PTR [ecx+2]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	BYTE PTR [ecx+edx+1], 0
mov	edx, DWORD PTR _outline$[ebp]
movsx	eax, WORD PTR [edx+2]
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	BYTE PTR [edx+eax+2], 0
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	BYTE PTR [eax+ecx+3], 0
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR _stream$4[ebp], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+168]
push	ecx
mov	edx, DWORD PTR _stream$4[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN18@TT_Process
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_ReadUShort
add	esp, 8
mov	WORD PTR _n_ins$3[ebp], ax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN17@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN16@TT_Process
movzx	ecx, WORD PTR _n_ins$3[ebp]
push	ecx
push	OFFSET $SG10054
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN17@TT_Process
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	dx, WORD PTR [ecx+286]
mov	WORD PTR _max_ins$2[ebp], dx
movzx	eax, WORD PTR _n_ins$3[ebp]
movzx	ecx, WORD PTR _max_ins$2[ebp]
cmp	eax, ecx
jle	$LN13@TT_Process
movzx	edx, WORD PTR _n_ins$3[ebp]
mov	eax, DWORD PTR _loader$[ebp]
cmp	edx, DWORD PTR [eax+28]
jle	SHORT $LN12@TT_Process
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 1
jl	SHORT $LN10@TT_Process
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+28]
push	ecx
movzx	edx, WORD PTR _n_ins$3[ebp]
push	edx
push	OFFSET $SG10063
call	_FT_Message
add	esp, 12					
xor	eax, eax
jne	SHORT $LN11@TT_Process
push	OFFSET $SG10064
push	1224					
push	22					
call	_FT_Throw
add	esp, 12					
or	eax, 22					
jmp	$LN21@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	eax, DWORD PTR [edx+388]
mov	DWORD PTR _tmp$1[ebp], eax
movzx	ecx, WORD PTR _n_ins$3[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
add	eax, 392				
push	eax
push	1
lea	ecx, DWORD PTR _tmp$1[ebp]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
movzx	ecx, WORD PTR _tmp$1[ebp]
mov	DWORD PTR [eax+388], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN7@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
jmp	SHORT $LN6@TT_Process
movzx	edx, WORD PTR _n_ins$3[ebp]
test	edx, edx
jne	SHORT $LN6@TT_Process
xor	eax, eax
jmp	$LN21@TT_Process
movzx	eax, WORD PTR _n_ins$3[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	eax, DWORD PTR [edx+392]
push	eax
mov	ecx, DWORD PTR _stream$4[ebp]
push	ecx
call	_FT_Stream_Read
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN21@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR [eax+392]
mov	DWORD PTR [edx+136], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
movzx	eax, WORD PTR _n_ins$3[ebp]
mov	DWORD PTR [edx+140], eax
mov	ecx, DWORD PTR _start_contour$[ebp]
push	ecx
mov	edx, DWORD PTR _start_point$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
add	ecx, 20					
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
add	edx, 124				
push	edx
call	_tt_prepare_zone
add	esp, 16					
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN3@TT_Process
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
movzx	edx, WORD PTR [ecx+132]
cmp	DWORD PTR _i$[ebp], edx
jae	SHORT $LN1@TT_Process
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+148]
mov	edx, DWORD PTR _i$[ebp]
movzx	eax, BYTE PTR [ecx+edx]
and	eax, -25				
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+148]
mov	ecx, DWORD PTR _i$[ebp]
mov	BYTE PTR [edx+ecx], al
jmp	SHORT $LN2@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
movzx	eax, WORD PTR [edx+132]
add	eax, 4
mov	ecx, DWORD PTR _loader$[ebp]
mov	WORD PTR [ecx+132], ax
push	1
mov	edx, DWORD PTR _loader$[ebp]
push	edx
call	_TT_Hint_Glyph
add	esp, 8
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN29@TT_Process
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	2
DD	$LN28@TT_Process
DD	-8					
DD	4
DD	$LN26@TT_Process
DD	-40					
DD	4
DD	$LN27@TT_Process
DB	116					
DB	109					
DB	112					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Process_Composite_Component PROC
push	ebp
mov	ebp, esp
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _gloader$[ebp], ecx
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	DWORD PTR _base_vec$[ebp], eax
mov	ecx, DWORD PTR _gloader$[ebp]
movsx	edx, WORD PTR [ecx+22]
mov	DWORD PTR _num_points$[ebp], edx
mov	eax, DWORD PTR _subglyph$[ebp]
movzx	ecx, WORD PTR [eax+4]
and	ecx, 200				
mov	BYTE PTR _have_scale$[ebp], cl
movzx	edx, BYTE PTR _have_scale$[ebp]
test	edx, edx
je	SHORT $LN14@TT_Process
mov	eax, DWORD PTR _num_base_points$[ebp]
mov	DWORD PTR _i$9[ebp], eax
jmp	SHORT $LN13@TT_Process
mov	ecx, DWORD PTR _i$9[ebp]
add	ecx, 1
mov	DWORD PTR _i$9[ebp], ecx
mov	edx, DWORD PTR _i$9[ebp]
cmp	edx, DWORD PTR _num_points$[ebp]
jae	SHORT $LN14@TT_Process
mov	eax, DWORD PTR _subglyph$[ebp]
add	eax, 16					
push	eax
mov	ecx, DWORD PTR _i$9[ebp]
mov	edx, DWORD PTR _base_vec$[ebp]
lea	eax, DWORD PTR [edx+ecx*8]
push	eax
call	_FT_Vector_Transform
add	esp, 8
jmp	SHORT $LN12@TT_Process
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 2
jne	$LN10@TT_Process
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _k$8[ebp], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _l$7[ebp], eax
mov	ecx, DWORD PTR _k$8[ebp]
add	ecx, DWORD PTR _start_point$[ebp]
mov	DWORD PTR _k$8[ebp], ecx
mov	edx, DWORD PTR _l$7[ebp]
add	edx, DWORD PTR _num_base_points$[ebp]
mov	DWORD PTR _l$7[ebp], edx
mov	eax, DWORD PTR _k$8[ebp]
cmp	eax, DWORD PTR _num_base_points$[ebp]
jae	SHORT $LN8@TT_Process
mov	ecx, DWORD PTR _l$7[ebp]
cmp	ecx, DWORD PTR _num_points$[ebp]
jb	SHORT $LN9@TT_Process
push	OFFSET $SG10006
push	1060					
push	21					
call	_FT_Throw
add	esp, 12					
or	eax, 21					
jmp	$LN15@TT_Process
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	ecx, DWORD PTR _k$8[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _p1$6[ebp], edx
mov	eax, DWORD PTR _gloader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR _l$7[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	DWORD PTR _p2$5[ebp], eax
mov	ecx, DWORD PTR _p1$6[ebp]
mov	edx, DWORD PTR _p2$5[ebp]
mov	eax, DWORD PTR [ecx]
sub	eax, DWORD PTR [edx]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _p1$6[ebp]
mov	edx, DWORD PTR _p2$5[ebp]
mov	eax, DWORD PTR [ecx+4]
sub	eax, DWORD PTR [edx+4]
mov	DWORD PTR _y$[ebp], eax
jmp	$LN7@TT_Process
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _x$[ebp], edx
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _y$[ebp], ecx
cmp	DWORD PTR _x$[ebp], 0
jne	SHORT $LN6@TT_Process
cmp	DWORD PTR _y$[ebp], 0
jne	SHORT $LN6@TT_Process
xor	eax, eax
jmp	$LN15@TT_Process
movzx	edx, BYTE PTR _have_scale$[ebp]
test	edx, edx
je	SHORT $LN5@TT_Process
mov	eax, DWORD PTR _subglyph$[ebp]
movzx	ecx, WORD PTR [eax+4]
and	ecx, 2048				
je	SHORT $LN5@TT_Process
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
call	_FT_Hypot
add	esp, 8
mov	DWORD PTR _mac_xscale$4[ebp], eax
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR [eax+24]
push	ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
call	_FT_Hypot
add	esp, 8
mov	DWORD PTR _mac_yscale$3[ebp], eax
mov	ecx, DWORD PTR _mac_xscale$4[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _x$[ebp], eax
mov	eax, DWORD PTR _mac_yscale$3[ebp]
push	eax
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _y$[ebp], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 1
jne	SHORT $LN7@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR _x_scale$2[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR _y_scale$1[ebp], eax
mov	ecx, DWORD PTR _x_scale$2[ebp]
push	ecx
mov	edx, DWORD PTR _x$[ebp]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _x$[ebp], eax
mov	eax, DWORD PTR _y_scale$1[ebp]
push	eax
mov	ecx, DWORD PTR _y$[ebp]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	DWORD PTR _y$[ebp], eax
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 4
je	SHORT $LN7@TT_Process
mov	ecx, DWORD PTR _x$[ebp]
add	ecx, 32					
and	ecx, -64				
mov	DWORD PTR _x$[ebp], ecx
mov	edx, DWORD PTR _y$[ebp]
add	edx, 32					
and	edx, -64				
mov	DWORD PTR _y$[ebp], edx
cmp	DWORD PTR _x$[ebp], 0
jne	SHORT $LN1@TT_Process
cmp	DWORD PTR _y$[ebp], 0
je	SHORT $LN2@TT_Process
mov	eax, DWORD PTR _y$[ebp]
push	eax
mov	ecx, DWORD PTR _x$[ebp]
push	ecx
mov	edx, DWORD PTR _num_base_points$[ebp]
mov	eax, DWORD PTR _base_vec$[ebp]
lea	ecx, DWORD PTR [eax+edx*8]
push	ecx
mov	edx, DWORD PTR _num_points$[ebp]
sub	edx, DWORD PTR _num_base_points$[ebp]
push	edx
call	_translate_array
add	esp, 16					
xor	eax, eax
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Process_Simple_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _gloader$[ebp], ecx
mov	DWORD PTR _error$[ebp], 0
mov	edx, DWORD PTR _gloader$[ebp]
add	edx, 56					
mov	DWORD PTR _outline$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
movsx	ecx, WORD PTR [eax+2]
mov	DWORD PTR _n_points$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	ecx, DWORD PTR [edx+72]
mov	edx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [edx+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [edx+esi*8], eax
mov	DWORD PTR [edx+esi*8+4], ecx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+76]
mov	edx, DWORD PTR [eax+80]
mov	eax, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [eax+esi*8+8], ecx
mov	DWORD PTR [eax+esi*8+12], edx
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+184]
mov	eax, DWORD PTR [ecx+188]
mov	ecx, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [ecx+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [ecx+esi*8+16], edx
mov	DWORD PTR [ecx+esi*8+20], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	ecx, DWORD PTR [edx+196]
mov	edx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [edx+4]
mov	esi, DWORD PTR _n_points$[ebp]
mov	DWORD PTR [edx+esi*8+24], eax
mov	DWORD PTR [edx+esi*8+28], ecx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx], 0
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx+1], 0
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx+2], 0
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _n_points$[ebp]
mov	BYTE PTR [ecx+edx+3], 0
mov	eax, DWORD PTR _n_points$[ebp]
add	eax, 4
mov	DWORD PTR _n_points$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx]
movzx	eax, BYTE PTR [edx+672]
test	eax, eax
je	$LN15@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$7[ebp], eax
mov	ecx, DWORD PTR _n_points$[ebp]
push	ecx
lea	edx, DWORD PTR _deltas$8[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_TT_Vary_Get_Glyph_Deltas
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@TT_Process
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN16@TT_Process
mov	DWORD PTR _i$6[ebp], 0
jmp	SHORT $LN13@TT_Process
mov	ecx, DWORD PTR _i$6[ebp]
add	ecx, 1
mov	DWORD PTR _i$6[ebp], ecx
mov	edx, DWORD PTR _i$6[ebp]
cmp	edx, DWORD PTR _n_points$[ebp]
jge	SHORT $LN10@TT_Process
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _i$6[ebp]
mov	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _i$6[ebp]
mov	edx, DWORD PTR _deltas$8[ebp]
add	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _i$6[ebp]
mov	DWORD PTR [edx+ecx*8], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$6[ebp]
mov	edx, DWORD PTR [eax+ecx*8+4]
mov	eax, DWORD PTR _i$6[ebp]
mov	ecx, DWORD PTR _deltas$8[ebp]
add	edx, DWORD PTR [ecx+eax*8+4]
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _i$6[ebp]
mov	DWORD PTR [ecx+eax*8+4], edx
jmp	SHORT $LN12@TT_Process
mov	ecx, DWORD PTR _deltas$8[ebp]
push	ecx
mov	edx, DWORD PTR _memory$7[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$8[ebp], 0
xor	eax, eax
jne	SHORT $LN10@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+16]
and	edx, 2
jne	SHORT $LN7@TT_Process
push	0
push	0
mov	eax, DWORD PTR _gloader$[ebp]
add	eax, 56					
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
add	ecx, 124				
push	ecx
call	_tt_prepare_zone
add	esp, 16					
mov	edx, DWORD PTR _loader$[ebp]
movzx	eax, WORD PTR [edx+132]
lea	ecx, DWORD PTR [eax*8+32]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+140]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+144]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR _vec$5[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _limit$4[ebp], edx
mov	DWORD PTR _x_scale$3[ebp], 0
mov	DWORD PTR _y_scale$2[ebp], 0
mov	BYTE PTR _do_scale$1[ebp], 0
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
jne	SHORT $LN6@TT_Process
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+48]
mov	DWORD PTR _x_scale$3[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+52]
mov	DWORD PTR _y_scale$2[ebp], ecx
mov	BYTE PTR _do_scale$1[ebp], 1
movzx	edx, BYTE PTR _do_scale$1[ebp]
test	edx, edx
je	$LN5@TT_Process
jmp	SHORT $LN4@TT_Process
mov	eax, DWORD PTR _vec$5[ebp]
add	eax, 8
mov	DWORD PTR _vec$5[ebp], eax
mov	ecx, DWORD PTR _vec$5[ebp]
cmp	ecx, DWORD PTR _limit$4[ebp]
jae	SHORT $LN2@TT_Process
mov	edx, DWORD PTR _x_scale$3[ebp]
push	edx
mov	eax, DWORD PTR _vec$5[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _vec$5[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _y_scale$2[ebp]
push	eax
mov	ecx, DWORD PTR _vec$5[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _vec$5[ebp]
mov	DWORD PTR [ecx+4], eax
jmp	SHORT $LN3@TT_Process
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-32]
mov	eax, DWORD PTR [eax+ecx*8-28]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], edx
mov	DWORD PTR [ecx+72], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-24]
mov	eax, DWORD PTR [eax+ecx*8-20]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+76], edx
mov	DWORD PTR [ecx+80], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-16]
mov	eax, DWORD PTR [eax+ecx*8-12]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+184], edx
mov	DWORD PTR [ecx+188], eax
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR [eax+ecx*8-8]
mov	eax, DWORD PTR [eax+ecx*8-4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], edx
mov	DWORD PTR [ecx+196], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 2
jne	SHORT $LN1@TT_Process
mov	ecx, DWORD PTR _loader$[ebp]
movzx	edx, WORD PTR [ecx+132]
add	edx, 4
mov	eax, DWORD PTR _loader$[ebp]
mov	WORD PTR [eax+132], dx
push	0
mov	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_TT_Hint_Glyph
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@TT_Process
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN19@TT_Process
DD	-24					
DD	4
DD	$LN18@TT_Process
DB	100					
DB	101					
DB	108					
DB	116					
DB	97					
DB	115					
DB	0
ENDP
_TT_Hint_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
add	eax, 124				
mov	DWORD PTR _zone$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	DWORD PTR [edx+140], 65535		
jle	SHORT $LN14@TT_Hint_Gl
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN12@TT_Hint_Gl
push	OFFSET $SG9916
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN13@TT_Hint_Gl
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN8@TT_Hint_Gl
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR [eax+140]
push	ecx
push	OFFSET $SG9921
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN9@TT_Hint_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR [ecx+140]
mov	DWORD PTR _n_ins$[ebp], edx
cmp	DWORD PTR _n_ins$[ebp], 0
jbe	SHORT $LN5@TT_Hint_Gl
mov	eax, DWORD PTR _zone$[ebp]
movzx	ecx, WORD PTR [eax+8]
shl	ecx, 3
push	ecx
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
push	eax
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _loader$[ebp]
mov	esi, DWORD PTR [eax+4]
add	esi, 172				
mov	ecx, DWORD PTR _loader$[ebp]
mov	edi, DWORD PTR [ecx+160]
add	edi, 284				
mov	ecx, 17					
rep movsd
movzx	edx, BYTE PTR _is_composite$[ebp]
test	edx, edx
je	SHORT $LN4@TT_Hint_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	DWORD PTR [ecx+220], 65536		
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	DWORD PTR [eax+224], 65536		
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
shl	edx, 3
push	edx
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
call	_memcpy
add	esp, 12					
jmp	SHORT $LN3@TT_Hint_Gl
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	edx, DWORD PTR [edx+48]
mov	DWORD PTR [ecx+220], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR [ecx+52]
mov	DWORD PTR [eax+224], ecx
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-32]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-32], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-24]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-24], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-12]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-12], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	eax, DWORD PTR [edx+eax*8-4]
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [ecx+edx*8-4], eax
cmp	DWORD PTR _n_ins$[ebp], 0
jbe	$LN2@TT_Hint_Gl
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _gloader$2[ebp], eax
mov	ecx, DWORD PTR _gloader$2[ebp]
add	ecx, 56					
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _current_outline$1[ebp], edx
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR _current_outline$1[ebp+4], eax
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _current_outline$1[ebp+8], edx
mov	eax, DWORD PTR [ecx+12]
mov	DWORD PTR _current_outline$1[ebp+12], eax
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR _current_outline$1[ebp+16], ecx
mov	edx, DWORD PTR _n_ins$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	edx, DWORD PTR [ecx+392]
push	edx
push	3
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
push	ecx
call	_TT_Set_CodeRange
add	esp, 16					
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	cl, BYTE PTR _is_composite$[ebp]
mov	BYTE PTR [eax+560], cl
mov	edx, DWORD PTR _loader$[ebp]
mov	edi, DWORD PTR [edx+160]
add	edi, 144				
mov	ecx, 9
mov	esi, DWORD PTR _zone$[ebp]
rep movsd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 1
jne	SHORT $LN17@TT_Hint_Gl
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+4]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN17@TT_Hint_Gl
mov	BYTE PTR tv238[ebp], 1
jmp	SHORT $LN18@TT_Hint_Gl
mov	BYTE PTR tv238[ebp], 0
mov	dl, BYTE PTR tv238[ebp]
mov	BYTE PTR _debug$4[ebp], dl
movzx	eax, BYTE PTR _debug$4[ebp]
push	eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+160]
push	edx
call	_TT_Run_Context
add	esp, 8
mov	DWORD PTR _error$3[ebp], eax
cmp	DWORD PTR _error$3[ebp], 0
je	SHORT $LN1@TT_Hint_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+160]
movzx	edx, BYTE PTR [ecx+561]
test	edx, edx
je	SHORT $LN1@TT_Hint_Gl
mov	eax, DWORD PTR _error$3[ebp]
jmp	$LN15@TT_Hint_Gl
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	edx, DWORD PTR [eax+340]
shl	edx, 5
or	edx, 4
mov	eax, DWORD PTR _current_outline$1[ebp+8]
movsx	ecx, BYTE PTR [eax+ecx]
or	ecx, edx
mov	edx, 1
imul	eax, edx, 0
mov	edx, DWORD PTR _current_outline$1[ebp+8]
mov	BYTE PTR [edx+eax], cl
mov	eax, DWORD PTR _zone$[ebp]
movzx	ecx, WORD PTR [eax+8]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	edx, DWORD PTR [eax+ecx*8-32]
mov	eax, DWORD PTR [eax+ecx*8-28]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+68], edx
mov	DWORD PTR [ecx+72], eax
mov	edx, DWORD PTR _zone$[ebp]
movzx	eax, WORD PTR [edx+8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	ecx, DWORD PTR [edx+eax*8-24]
mov	edx, DWORD PTR [edx+eax*8-20]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+76], ecx
mov	DWORD PTR [eax+80], edx
mov	ecx, DWORD PTR _zone$[ebp]
movzx	edx, WORD PTR [ecx+8]
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	eax, DWORD PTR [ecx+edx*8-16]
mov	ecx, DWORD PTR [ecx+edx*8-12]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+184], eax
mov	DWORD PTR [edx+188], ecx
mov	eax, DWORD PTR _zone$[ebp]
movzx	ecx, WORD PTR [eax+8]
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	edx, DWORD PTR [eax+ecx*8-8]
mov	eax, DWORD PTR [eax+ecx*8-4]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+192], edx
mov	DWORD PTR [ecx+196], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN21@TT_Hint_Gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN20@TT_Hint_Gl
DD	-44					
DD	20					
DD	$LN19@TT_Hint_Gl
DB	99					
DB	117					
DB	114					
DB	114					
DB	101					
DB	110					
DB	116					
DB	95					
DB	111					
DB	117					
DB	116					
DB	108					
DB	105					
DB	110					
DB	101					
DB	0
ENDP
_tt_prepare_zone PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _load$[ebp]
movsx	ecx, WORD PTR [eax+2]
sub	ecx, DWORD PTR _start_point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	WORD PTR [edx+8], cx
mov	eax, DWORD PTR _load$[ebp]
movsx	ecx, WORD PTR [eax]
sub	ecx, DWORD PTR _start_contour$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	WORD PTR [edx+10], cx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	edx, DWORD PTR _start_point$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _start_point$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	eax, DWORD PTR _zone$[ebp]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	eax, DWORD PTR _start_point$[ebp]
lea	ecx, DWORD PTR [edx+eax*8]
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+20], ecx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, DWORD PTR _start_point$[ebp]
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+24], ecx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	edx, DWORD PTR _start_contour$[ebp]
lea	eax, DWORD PTR [ecx+edx*2]
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	edx, DWORD PTR _zone$[ebp]
mov	ax, WORD PTR _start_point$[ebp]
mov	WORD PTR [edx+32], ax
pop	ebp
ret	0
ENDP
_TT_Load_Composite_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 48					
push	edi
lea	edi, DWORD PTR [ebp-48]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+200]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+204]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _gloader$[ebp], edx
mov	DWORD PTR _num_subglyphs$[ebp], 0
mov	eax, DWORD PTR _num_subglyphs$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _gloader$[ebp]
push	ecx
call	_FT_GlyphLoader_CheckSubGlyphs
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@TT_Load_Co
jmp	$Fail$22
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN15@TT_Load_Co
jmp	$Invalid_Composite$23
mov	eax, DWORD PTR _num_subglyphs$[ebp]
shl	eax, 5
mov	ecx, DWORD PTR _gloader$[ebp]
add	eax, DWORD PTR [ecx+88]
mov	DWORD PTR _subglyph$[ebp], eax
mov	edx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [edx+12], 0
mov	eax, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	WORD PTR [ecx+4], dx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	eax, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [eax], edx
mov	DWORD PTR _count$2[ebp], 2
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 1
je	SHORT $LN14@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 2
mov	DWORD PTR _count$2[ebp], eax
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 8
je	SHORT $LN13@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 2
mov	DWORD PTR _count$2[ebp], eax
jmp	SHORT $LN12@TT_Load_Co
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 64					
je	SHORT $LN11@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 4
mov	DWORD PTR _count$2[ebp], eax
jmp	SHORT $LN12@TT_Load_Co
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 128				
je	SHORT $LN12@TT_Load_Co
mov	eax, DWORD PTR _count$2[ebp]
add	eax, 8
mov	DWORD PTR _count$2[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, DWORD PTR _count$2[ebp]
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN8@TT_Load_Co
jmp	$Invalid_Composite$23
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 1
je	SHORT $LN7@TT_Load_Co
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN6@TT_Load_Co
mov	edx, DWORD PTR _p$[ebp]
movsx	eax, BYTE PTR [edx]
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _p$[ebp]
add	edx, 1
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
movsx	ecx, BYTE PTR [eax]
mov	edx, DWORD PTR _subglyph$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
mov	DWORD PTR _yy$4[ebp], 65536		
mov	ecx, DWORD PTR _yy$4[ebp]
mov	DWORD PTR _xx$6[ebp], ecx
mov	DWORD PTR _yx$3[ebp], 0
mov	edx, DWORD PTR _yx$3[ebp]
mov	DWORD PTR _xy$5[ebp], edx
mov	eax, DWORD PTR _subglyph$[ebp]
movzx	ecx, WORD PTR [eax+4]
and	ecx, 8
je	SHORT $LN5@TT_Load_Co
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
shl	edx, 2
mov	DWORD PTR _xx$6[ebp], edx
mov	eax, DWORD PTR _xx$6[ebp]
mov	DWORD PTR _yy$4[ebp], eax
jmp	$LN4@TT_Load_Co
mov	ecx, DWORD PTR _subglyph$[ebp]
movzx	edx, WORD PTR [ecx+4]
and	edx, 64					
je	SHORT $LN3@TT_Load_Co
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
shl	eax, 2
mov	DWORD PTR _xx$6[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
shl	ecx, 2
mov	DWORD PTR _yy$4[ebp], ecx
jmp	$LN4@TT_Load_Co
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 128				
je	$LN4@TT_Load_Co
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
shl	ecx, 2
mov	DWORD PTR _xx$6[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
shl	edx, 2
mov	DWORD PTR _yx$3[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
shl	eax, 2
mov	DWORD PTR _xy$5[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
shl	ecx, 2
mov	DWORD PTR _yy$4[ebp], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR _xx$6[ebp]
mov	DWORD PTR [edx+16], eax
mov	ecx, DWORD PTR _subglyph$[ebp]
mov	edx, DWORD PTR _xy$5[ebp]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _subglyph$[ebp]
mov	ecx, DWORD PTR _yx$3[ebp]
mov	DWORD PTR [eax+24], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
mov	eax, DWORD PTR _yy$4[ebp]
mov	DWORD PTR [edx+28], eax
mov	ecx, DWORD PTR _num_subglyphs$[ebp]
add	ecx, 1
mov	DWORD PTR _num_subglyphs$[ebp], ecx
mov	edx, DWORD PTR _subglyph$[ebp]
movzx	eax, WORD PTR [edx+4]
and	eax, 32					
jne	$LN19@TT_Load_Co
mov	ecx, DWORD PTR _gloader$[ebp]
mov	edx, DWORD PTR _num_subglyphs$[ebp]
mov	DWORD PTR [ecx+84], edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _stream$1[ebp], ecx
mov	edx, DWORD PTR _stream$1[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
add	eax, DWORD PTR _p$[ebp]
sub	eax, DWORD PTR _limit$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+168], eax
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _p$[ebp]
mov	DWORD PTR [edx+200], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN20@TT_Load_Co
push	OFFSET $SG9884
push	688					
push	21					
call	_FT_Throw
add	esp, 12					
or	eax, 21					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$22
pop	edi
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Load_Simple_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+200]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+204]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _gloader$[ebp], edx
mov	eax, DWORD PTR _load$[ebp]
movsx	ecx, WORD PTR [eax+32]
mov	DWORD PTR _n_contours$[ebp], ecx
mov	DWORD PTR _xy_size$[ebp], 0
mov	edx, 1
test	edx, edx
je	SHORT $LN60@TT_Load_Si
cmp	DWORD PTR _n_contours$[ebp], 0
je	SHORT $LN59@TT_Load_Si
mov	eax, DWORD PTR _gloader$[ebp]
movsx	ecx, WORD PTR [eax+20]
mov	edx, DWORD PTR _gloader$[ebp]
movsx	eax, WORD PTR [edx+56]
add	ecx, DWORD PTR _n_contours$[ebp]
add	eax, ecx
mov	ecx, DWORD PTR _gloader$[ebp]
cmp	eax, DWORD PTR [ecx+8]
ja	SHORT $LN60@TT_Load_Si
mov	DWORD PTR tv83[ebp], 0
jmp	SHORT $LN61@TT_Load_Si
mov	edx, DWORD PTR _n_contours$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _gloader$[ebp]
push	eax
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv83[ebp], eax
mov	ecx, DWORD PTR tv83[ebp]
mov	DWORD PTR _error$[ebp], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN56@TT_Load_Si
jmp	$Fail$68
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+68]
mov	DWORD PTR _cont$[ebp], eax
mov	ecx, DWORD PTR _n_contours$[ebp]
mov	edx, DWORD PTR _cont$[ebp]
lea	eax, DWORD PTR [edx+ecx*2]
mov	DWORD PTR _cont_limit$[ebp], eax
cmp	DWORD PTR _n_contours$[ebp], 4095	
jge	SHORT $LN54@TT_Load_Si
mov	ecx, DWORD PTR _n_contours$[ebp]
mov	edx, DWORD PTR _p$[ebp]
lea	eax, DWORD PTR [edx+ecx*2+2]
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN55@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
mov	WORD PTR _prev_cont$[ebp], dx
cmp	DWORD PTR _n_contours$[ebp], 0
jle	SHORT $LN53@TT_Load_Si
mov	ecx, 2
imul	edx, ecx, 0
mov	eax, DWORD PTR _cont$[ebp]
mov	cx, WORD PTR _prev_cont$[ebp]
mov	WORD PTR [eax+edx], cx
movsx	edx, WORD PTR _prev_cont$[ebp]
test	edx, edx
jge	SHORT $LN52@TT_Load_Si
jmp	$Invalid_Outline$69
mov	eax, DWORD PTR _cont$[ebp]
add	eax, 2
mov	DWORD PTR _cont$[ebp], eax
jmp	SHORT $LN51@TT_Load_Si
mov	ecx, DWORD PTR _cont$[ebp]
add	ecx, 2
mov	DWORD PTR _cont$[ebp], ecx
mov	edx, DWORD PTR _cont$[ebp]
cmp	edx, DWORD PTR _cont_limit$[ebp]
jae	SHORT $LN49@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
mov	eax, 2
imul	edx, eax, 0
mov	eax, DWORD PTR _cont$[ebp]
mov	WORD PTR [eax+edx], cx
mov	ecx, 2
imul	edx, ecx, 0
mov	eax, DWORD PTR _cont$[ebp]
movsx	ecx, WORD PTR [eax+edx]
movsx	edx, WORD PTR _prev_cont$[ebp]
cmp	ecx, edx
jg	SHORT $LN48@TT_Load_Si
jmp	$Invalid_Outline$69
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _cont$[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _prev_cont$[ebp], ax
jmp	SHORT $LN50@TT_Load_Si
mov	DWORD PTR _n_points$[ebp], 0
cmp	DWORD PTR _n_contours$[ebp], 0
jle	SHORT $LN47@TT_Load_Si
mov	ecx, 2
imul	edx, ecx, -1
mov	eax, DWORD PTR _cont$[ebp]
movsx	ecx, WORD PTR [eax+edx]
add	ecx, 1
mov	DWORD PTR _n_points$[ebp], ecx
jns	SHORT $LN47@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _n_points$[ebp]
add	edx, 4
je	SHORT $LN62@TT_Load_Si
mov	eax, DWORD PTR _gloader$[ebp]
movsx	ecx, WORD PTR [eax+22]
mov	edx, DWORD PTR _gloader$[ebp]
movsx	eax, WORD PTR [edx+58]
add	ecx, eax
mov	edx, DWORD PTR _n_points$[ebp]
lea	eax, DWORD PTR [ecx+edx+4]
mov	ecx, DWORD PTR _gloader$[ebp]
cmp	eax, DWORD PTR [ecx+4]
ja	SHORT $LN63@TT_Load_Si
mov	edx, 1
test	edx, edx
je	SHORT $LN63@TT_Load_Si
mov	DWORD PTR tv189[ebp], 0
jmp	SHORT $LN64@TT_Load_Si
push	0
mov	eax, DWORD PTR _n_points$[ebp]
add	eax, 4
push	eax
mov	ecx, DWORD PTR _gloader$[ebp]
push	ecx
call	_FT_GlyphLoader_CheckPoints
add	esp, 12					
mov	DWORD PTR tv189[ebp], eax
mov	edx, DWORD PTR tv189[ebp]
mov	DWORD PTR _error$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN45@TT_Load_Si
jmp	$Fail$68
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+140], 0
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [eax+136], 0
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN44@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
mov	WORD PTR _n_ins$[ebp], ax
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN42@TT_Load_Si
movzx	ecx, WORD PTR _n_ins$[ebp]
push	ecx
push	OFFSET $SG9688
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN43@TT_Load_Si
mov	eax, DWORD PTR _limit$[ebp]
sub	eax, DWORD PTR _p$[ebp]
movzx	ecx, WORD PTR _n_ins$[ebp]
cmp	eax, ecx
jge	SHORT $LN39@TT_Load_Si
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 0
jl	SHORT $LN37@TT_Load_Si
push	OFFSET $SG9694
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN38@TT_Load_Si
push	OFFSET $SG9695
push	423					
push	22					
call	_FT_Throw
add	esp, 12					
or	eax, 22					
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail$68
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+16]
and	eax, 2
jne	$LN34@TT_Load_Si
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+160]
mov	eax, DWORD PTR [edx+388]
mov	DWORD PTR _tmp$[ebp], eax
movzx	ecx, WORD PTR _n_ins$[ebp]
push	ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
add	eax, 392				
push	eax
push	1
lea	ecx, DWORD PTR _tmp$[ebp]
push	ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
movzx	ecx, WORD PTR _tmp$[ebp]
mov	DWORD PTR [eax+388], ecx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN33@TT_Load_Si
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN57@TT_Load_Si
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+8]
movzx	ecx, WORD PTR _n_ins$[ebp]
mov	DWORD PTR [eax+140], ecx
mov	edx, DWORD PTR _load$[ebp]
mov	eax, DWORD PTR [edx+160]
mov	ecx, DWORD PTR _load$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR [eax+392]
mov	DWORD PTR [edx+136], eax
movzx	ecx, WORD PTR _n_ins$[ebp]
push	ecx
mov	edx, DWORD PTR _p$[ebp]
push	edx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR [eax+160]
mov	edx, DWORD PTR [ecx+392]
push	edx
call	_memcpy
add	esp, 12					
movzx	eax, WORD PTR _n_ins$[ebp]
add	eax, DWORD PTR _p$[ebp]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _gloader$[ebp]
add	ecx, 56					
mov	DWORD PTR _outline$[ebp], ecx
mov	edx, DWORD PTR _outline$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR _flag$[ebp], eax
mov	ecx, DWORD PTR _flag$[ebp]
add	ecx, DWORD PTR _n_points$[ebp]
mov	DWORD PTR _flag_limit$[ebp], ecx
cmp	DWORD PTR _flag$[ebp], 0
jne	SHORT $LN31@TT_Load_Si
push	OFFSET $SG9708
push	461					
push	OFFSET $SG9709
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN32@TT_Load_Si
mov	eax, DWORD PTR _flag$[ebp]
cmp	eax, DWORD PTR _flag_limit$[ebp]
jae	$LN27@TT_Load_Si
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN26@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
mov	al, BYTE PTR [edx]
mov	BYTE PTR _c$[ebp], al
mov	ecx, DWORD PTR _flag$[ebp]
mov	dl, BYTE PTR _c$[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _flag$[ebp]
add	eax, 1
mov	DWORD PTR _flag$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 1
mov	DWORD PTR _p$[ebp], ecx
movzx	edx, BYTE PTR _c$[ebp]
and	edx, 8
je	SHORT $LN25@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN24@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR _count$[ebp], dl
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
movzx	ecx, BYTE PTR _count$[ebp]
add	ecx, DWORD PTR _flag$[ebp]
cmp	ecx, DWORD PTR _flag_limit$[ebp]
jbe	SHORT $LN23@TT_Load_Si
jmp	$Invalid_Outline$69
jmp	SHORT $LN22@TT_Load_Si
mov	dl, BYTE PTR _count$[ebp]
sub	dl, 1
mov	BYTE PTR _count$[ebp], dl
movzx	eax, BYTE PTR _count$[ebp]
test	eax, eax
jle	SHORT $LN25@TT_Load_Si
mov	ecx, DWORD PTR _flag$[ebp]
mov	dl, BYTE PTR _c$[ebp]
mov	BYTE PTR [ecx], dl
mov	eax, DWORD PTR _flag$[ebp]
add	eax, 1
mov	DWORD PTR _flag$[ebp], eax
jmp	SHORT $LN21@TT_Load_Si
jmp	$LN28@TT_Load_Si
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _vec$[ebp], edx
mov	eax, DWORD PTR _n_points$[ebp]
mov	ecx, DWORD PTR _vec$[ebp]
lea	edx, DWORD PTR [ecx+eax*8]
mov	DWORD PTR _vec_limit$[ebp], edx
mov	eax, DWORD PTR _outline$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _flag$[ebp], ecx
mov	DWORD PTR _x$[ebp], 0
mov	edx, DWORD PTR _p$[ebp]
add	edx, DWORD PTR _xy_size$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN19@TT_Load_Si
jmp	$Invalid_Outline$69
jmp	SHORT $LN18@TT_Load_Si
mov	eax, DWORD PTR _vec$[ebp]
add	eax, 8
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _flag$[ebp]
add	ecx, 1
mov	DWORD PTR _flag$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
cmp	edx, DWORD PTR _vec_limit$[ebp]
jae	$LN16@TT_Load_Si
mov	DWORD PTR _y$4[ebp], 0
mov	eax, DWORD PTR _flag$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR _f$3[ebp], cl
movzx	edx, BYTE PTR _f$3[ebp]
and	edx, 2
je	SHORT $LN15@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN14@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _y$4[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
movzx	ecx, BYTE PTR _f$3[ebp]
and	ecx, 16					
jne	SHORT $LN13@TT_Load_Si
mov	edx, DWORD PTR _y$4[ebp]
neg	edx
mov	DWORD PTR _y$4[ebp], edx
jmp	SHORT $LN12@TT_Load_Si
movzx	eax, BYTE PTR _f$3[ebp]
and	eax, 16					
jne	SHORT $LN12@TT_Load_Si
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN10@TT_Load_Si
jmp	$Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
mov	DWORD PTR _y$4[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _y$4[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx], edx
movzx	eax, BYTE PTR _f$3[ebp]
and	eax, -19				
mov	ecx, DWORD PTR _flag$[ebp]
mov	BYTE PTR [ecx], al
jmp	$LN17@TT_Load_Si
mov	edx, DWORD PTR _gloader$[ebp]
mov	eax, DWORD PTR [edx+60]
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _n_points$[ebp]
mov	edx, DWORD PTR _vec$[ebp]
lea	eax, DWORD PTR [edx+ecx*8]
mov	DWORD PTR _vec_limit$[ebp], eax
mov	ecx, DWORD PTR _outline$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _flag$[ebp], edx
mov	DWORD PTR _x$[ebp], 0
jmp	SHORT $LN9@TT_Load_Si
mov	eax, DWORD PTR _vec$[ebp]
add	eax, 8
mov	DWORD PTR _vec$[ebp], eax
mov	ecx, DWORD PTR _flag$[ebp]
add	ecx, 1
mov	DWORD PTR _flag$[ebp], ecx
mov	edx, DWORD PTR _vec$[ebp]
cmp	edx, DWORD PTR _vec_limit$[ebp]
jae	$LN7@TT_Load_Si
mov	DWORD PTR _y$2[ebp], 0
mov	eax, DWORD PTR _flag$[ebp]
mov	cl, BYTE PTR [eax]
mov	BYTE PTR _f$1[ebp], cl
movzx	edx, BYTE PTR _f$1[ebp]
and	edx, 4
je	SHORT $LN6@TT_Load_Si
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
cmp	eax, DWORD PTR _limit$[ebp]
jbe	SHORT $LN5@TT_Load_Si
jmp	$Invalid_Outline$69
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx]
mov	DWORD PTR _y$2[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 1
mov	DWORD PTR _p$[ebp], eax
movzx	ecx, BYTE PTR _f$1[ebp]
and	ecx, 32					
jne	SHORT $LN4@TT_Load_Si
mov	edx, DWORD PTR _y$2[ebp]
neg	edx
mov	DWORD PTR _y$2[ebp], edx
jmp	SHORT $LN3@TT_Load_Si
movzx	eax, BYTE PTR _f$1[ebp]
and	eax, 32					
jne	SHORT $LN3@TT_Load_Si
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN1@TT_Load_Si
jmp	SHORT $Invalid_Outline$69
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
mov	DWORD PTR _y$2[ebp], edx
mov	eax, DWORD PTR _x$[ebp]
add	eax, DWORD PTR _y$2[ebp]
mov	DWORD PTR _x$[ebp], eax
mov	ecx, DWORD PTR _vec$[ebp]
mov	edx, DWORD PTR _x$[ebp]
mov	DWORD PTR [ecx+4], edx
movzx	eax, BYTE PTR _f$1[ebp]
and	eax, 1
mov	ecx, DWORD PTR _flag$[ebp]
mov	BYTE PTR [ecx], al
jmp	$LN8@TT_Load_Si
mov	edx, DWORD PTR _outline$[ebp]
mov	ax, WORD PTR _n_points$[ebp]
mov	WORD PTR [edx+2], ax
mov	ecx, DWORD PTR _outline$[ebp]
mov	dx, WORD PTR _n_contours$[ebp]
mov	WORD PTR [ecx], dx
mov	eax, DWORD PTR _load$[ebp]
mov	ecx, DWORD PTR _p$[ebp]
mov	DWORD PTR [eax+200], ecx
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN57@TT_Load_Si
push	OFFSET $SG9770
push	567					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Fail$68
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN67@TT_Load_Si
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN66@TT_Load_Si
DD	-40					
DD	4
DD	$LN65@TT_Load_Si
DB	116					
DB	109					
DB	112					
DB	0
ENDP
_TT_Load_Glyph_Header PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+200]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+204]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 10					
cmp	ecx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN13@TT_Load_Gl
push	OFFSET $SG9577
push	322					
push	20					
call	_FT_Throw
add	esp, 12					
or	eax, 20					
jmp	$LN14@TT_Load_Gl
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	WORD PTR [edx+32], ax
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+36], eax
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movsx	edx, ax
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+40], edx
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movsx	ecx, dx
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movsx	eax, cx
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+48], eax
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN11@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp]
movsx	edx, WORD PTR [ecx+32]
push	edx
push	OFFSET $SG9612
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN12@TT_Load_Gl
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN7@TT_Load_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+44]
push	ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+36]
push	eax
push	OFFSET $SG9617
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN8@TT_Load_Gl
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN3@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp]
mov	edx, DWORD PTR [ecx+48]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+40]
push	ecx
push	OFFSET $SG9622
call	_FT_Message
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@TT_Load_Gl
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR _p$[ebp]
mov	DWORD PTR [eax+200], ecx
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Forget_Glyph_Frame PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExitFrame
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Access_Glyph_Frame PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	DWORD PTR _glyph_index$[ebp], edx
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN5@TT_Access_
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	OFFSET $SG9560
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN6@TT_Access_
mov	ecx, DWORD PTR _offset$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@TT_Access_
mov	eax, DWORD PTR _byte_count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@TT_Access_
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN7@TT_Access_
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR [edx+200], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	DWORD PTR [edx+204], ecx
xor	eax, eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_translate_array PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _delta_x$[ebp], 0
je	SHORT $LN8@translate_
mov	DWORD PTR _k$[ebp], 0
jmp	SHORT $LN7@translate_
mov	eax, DWORD PTR _k$[ebp]
add	eax, 1
mov	DWORD PTR _k$[ebp], eax
mov	ecx, DWORD PTR _k$[ebp]
cmp	ecx, DWORD PTR _n$[ebp]
jae	SHORT $LN8@translate_
mov	edx, DWORD PTR _k$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR [eax+edx*8]
add	ecx, DWORD PTR _delta_x$[ebp]
mov	edx, DWORD PTR _k$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	DWORD PTR [eax+edx*8], ecx
jmp	SHORT $LN6@translate_
cmp	DWORD PTR _delta_y$[ebp], 0
je	SHORT $LN9@translate_
mov	DWORD PTR _k$[ebp], 0
jmp	SHORT $LN3@translate_
mov	ecx, DWORD PTR _k$[ebp]
add	ecx, 1
mov	DWORD PTR _k$[ebp], ecx
mov	edx, DWORD PTR _k$[ebp]
cmp	edx, DWORD PTR _n$[ebp]
jae	SHORT $LN9@translate_
mov	eax, DWORD PTR _k$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+4]
add	edx, DWORD PTR _delta_y$[ebp]
mov	eax, DWORD PTR _k$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
mov	DWORD PTR [ecx+eax*8+4], edx
jmp	SHORT $LN2@translate_
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_get_metrics_incr_overrides PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
xor	edx, edx
mov	WORD PTR _left_bearing$[ebp], dx
xor	eax, eax
mov	WORD PTR _top_bearing$[ebp], ax
xor	ecx, ecx
mov	WORD PTR _advance_width$[ebp], cx
xor	edx, edx
mov	WORD PTR _advance_height$[ebp], dx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
je	$Exit$9
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+128]
mov	ecx, DWORD PTR [eax+48]
mov	edx, DWORD PTR [ecx]
cmp	DWORD PTR [edx+8], 0
je	$Exit$9
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+52]
mov	DWORD PTR _metrics$2[ebp], ecx
mov	DWORD PTR _metrics$2[ebp+4], 0
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+56]
mov	DWORD PTR _metrics$2[ebp+8], eax
mov	DWORD PTR _metrics$2[ebp+12], 0
mov	esi, esp
lea	ecx, DWORD PTR _metrics$2[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	edx, DWORD PTR [ecx+48]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+128]
mov	eax, DWORD PTR [edx+48]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [ecx+8]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$1[ebp], eax
cmp	DWORD PTR _error$1[ebp], 0
je	SHORT $LN2@tt_get_met
jmp	SHORT $Exit$9
mov	ax, WORD PTR _metrics$2[ebp]
mov	WORD PTR _left_bearing$[ebp], ax
mov	cx, WORD PTR _metrics$2[ebp+8]
mov	WORD PTR _advance_width$[ebp], cx
movsx	edx, WORD PTR _left_bearing$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+52], edx
movzx	ecx, WORD PTR _advance_width$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+56], ecx
movsx	eax, WORD PTR _top_bearing$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+176], eax
movzx	edx, WORD PTR _advance_height$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+180], edx
mov	ecx, DWORD PTR _loader$[ebp]
movzx	edx, BYTE PTR [ecx+64]
test	edx, edx
jne	SHORT $Exit$9
mov	eax, DWORD PTR _loader$[ebp]
mov	BYTE PTR [eax+64], 1
movzx	ecx, WORD PTR _advance_width$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+60], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@tt_get_met
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN7@tt_get_met
DD	-44					
DD	16					
DD	$LN6@tt_get_met
DB	109					
DB	101					
DB	116					
DB	114					
DB	105					
DB	99					
DB	115					
DB	0
ENDP
_tt_get_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 64					
push	edi
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _loader$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	DWORD PTR _stream$[ebp], eax
xor	ecx, ecx
mov	WORD PTR _left_bearing$[ebp], cx
xor	edx, edx
mov	WORD PTR _top_bearing$[ebp], dx
xor	eax, eax
mov	WORD PTR _advance_width$[ebp], ax
xor	ecx, ecx
mov	WORD PTR _advance_height$[ebp], cx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _pos$[ebp], eax
lea	eax, DWORD PTR _advance_width$[ebp]
push	eax
lea	ecx, DWORD PTR _left_bearing$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_TT_Get_HMetrics
add	esp, 16					
lea	ecx, DWORD PTR _advance_height$[ebp]
push	ecx
lea	edx, DWORD PTR _top_bearing$[ebp]
push	edx
mov	eax, DWORD PTR _loader$[ebp]
mov	ecx, DWORD PTR [eax+48]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_TT_Get_VMetrics
add	esp, 20					
mov	ecx, DWORD PTR _pos$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@tt_get_met
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@tt_get_met
movsx	eax, WORD PTR _left_bearing$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+52], eax
movzx	edx, WORD PTR _advance_width$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+56], edx
movsx	ecx, WORD PTR _top_bearing$[ebp]
mov	edx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [edx+176], ecx
movzx	eax, WORD PTR _advance_height$[ebp]
mov	ecx, DWORD PTR _loader$[ebp]
mov	DWORD PTR [ecx+180], eax
mov	edx, DWORD PTR _loader$[ebp]
movzx	eax, BYTE PTR [edx+64]
test	eax, eax
jne	SHORT $LN1@tt_get_met
mov	ecx, DWORD PTR _loader$[ebp]
mov	BYTE PTR [ecx+64], 1
movzx	edx, WORD PTR _advance_width$[ebp]
mov	eax, DWORD PTR _loader$[ebp]
mov	DWORD PTR [eax+60], edx
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@tt_get_met
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	4
DD	$LN9@tt_get_met
DD	-20					
DD	2
DD	$LN5@tt_get_met
DD	-32					
DD	2
DD	$LN6@tt_get_met
DD	-44					
DD	2
DD	$LN7@tt_get_met
DD	-56					
DD	2
DD	$LN8@tt_get_met
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	95					
DB	104					
DB	101					
DB	105					
DB	103					
DB	104					
DB	116					
DB	0
DB	97					
DB	100					
DB	118					
DB	97					
DB	110					
DB	99					
DB	101					
DB	95					
DB	119					
DB	105					
DB	100					
DB	116					
DB	104					
DB	0
DB	116					
DB	111					
DB	112					
DB	95					
DB	98					
DB	101					
DB	97					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
DB	108					
DB	101					
DB	102					
DB	116					
DB	95					
DB	98					
DB	101					
DB	97					
DB	114					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
_FT_MulFix_i386 PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _b$[ebp]
imul	edx
mov	ecx, edx
sar	ecx, 31					
add	ecx, 32768				
add	eax, ecx
adc	edx, 0
shr	eax, 16					
shl	edx, 16					
add	eax, edx
mov	DWORD PTR _result$[ebp], eax
mov	eax, DWORD PTR _result$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_get_interface PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _tt_interface$[ebp]
push	eax
push	OFFSET _tt_services
call	_ft_service_list_lookup
add	esp, 8
mov	DWORD PTR _result$[ebp], eax
cmp	DWORD PTR _result$[ebp], 0
je	SHORT $LN5@tt_get_int
mov	eax, DWORD PTR _result$[ebp]
jmp	SHORT $LN6@tt_get_int
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN4@tt_get_int
xor	eax, eax
jmp	SHORT $LN6@tt_get_int
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR _library$[ebp], edx
cmp	DWORD PTR _library$[ebp], 0
jne	SHORT $LN3@tt_get_int
xor	eax, eax
jmp	SHORT $LN6@tt_get_int
push	OFFSET $SG8923
mov	eax, DWORD PTR _library$[ebp]
push	eax
call	_FT_Get_Module
add	esp, 8
mov	DWORD PTR _sfntd$[ebp], eax
cmp	DWORD PTR _sfntd$[ebp], 0
je	SHORT $LN2@tt_get_int
mov	ecx, DWORD PTR _sfntd$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+20]
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN2@tt_get_int
mov	esi, esp
mov	ecx, DWORD PTR _tt_interface$[ebp]
push	ecx
mov	edx, DWORD PTR _driver$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$[ebp]
mov	ecx, DWORD PTR [eax+16]
call	ecx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN6@tt_get_int
xor	eax, eax
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_glyph_load PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ttslot$[ebp]
mov	DWORD PTR _slot$[ebp], eax
mov	ecx, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR _size$[ebp], ecx
mov	edx, DWORD PTR _ttslot$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _slot$[ebp], 0
jne	SHORT $LN9@tt_glyph_l
push	OFFSET $SG8874
push	367					
push	37					
call	_FT_Throw
add	esp, 12					
or	eax, 37					
jmp	$LN10@tt_glyph_l
cmp	DWORD PTR _size$[ebp], 0
jne	SHORT $LN8@tt_glyph_l
push	OFFSET $SG8876
push	370					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN10@tt_glyph_l
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN7@tt_glyph_l
push	OFFSET $SG8878
push	373					
push	35					
call	_FT_Throw
add	esp, 12					
or	eax, 35					
jmp	$LN10@tt_glyph_l
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _glyph_index$[ebp]
cmp	edx, DWORD PTR [ecx+16]
jb	SHORT $LN6@tt_glyph_l
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+128]
cmp	DWORD PTR [ecx+48], 0
jne	SHORT $LN6@tt_glyph_l
push	OFFSET $SG8881
push	381					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	SHORT $LN10@tt_glyph_l
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 2
je	SHORT $LN5@tt_glyph_l
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 8192				
je	SHORT $LN4@tt_glyph_l
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, -3					
mov	DWORD PTR _load_flags$[ebp], edx
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 32768				
je	SHORT $LN5@tt_glyph_l
mov	ecx, DWORD PTR _load_flags$[ebp]
or	ecx, 2
mov	DWORD PTR _load_flags$[ebp], ecx
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1025				
je	SHORT $LN2@tt_glyph_l
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 9
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+8]
and	edx, 8192				
jne	SHORT $LN2@tt_glyph_l
mov	eax, DWORD PTR _load_flags$[ebp]
or	eax, 2
mov	DWORD PTR _load_flags$[ebp], eax
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
mov	eax, DWORD PTR _slot$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
push	ecx
call	_TT_Load_Glyph
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_request PROC
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR _ttsize$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
and	eax, 2
je	SHORT $LN4@tt_size_re
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _ttface$3[ebp], edx
mov	eax, DWORD PTR _ttface$3[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$2[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _strike_index$1[ebp]
push	edx
mov	eax, DWORD PTR _req$[ebp]
push	eax
mov	ecx, DWORD PTR _ttface$3[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$2[ebp]
mov	eax, DWORD PTR [edx+104]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_size_re
mov	ecx, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR [ecx+112], -1
jmp	SHORT $LN4@tt_size_re
mov	edx, DWORD PTR _strike_index$1[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_tt_size_select
add	esp, 8
jmp	SHORT $LN5@tt_size_re
mov	ecx, DWORD PTR _req$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	_FT_Request_Metrics
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	SHORT $LN1@tt_size_re
mov	ecx, DWORD PTR _ttsize$[ebp]
push	ecx
call	_tt_size_reset
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
mov	esi, DWORD PTR _ttsize$[ebp]
add	esi, 44					
mov	edi, DWORD PTR _ttsize$[ebp]
add	edi, 12					
mov	ecx, 7
rep movsd
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@tt_size_re
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN8@tt_size_re
DD	-24					
DD	4
DD	$LN7@tt_size_re
DB	115					
DB	116					
DB	114					
DB	105					
DB	107					
DB	101					
DB	95					
DB	105					
DB	110					
DB	100					
DB	101					
DB	120					
DB	0
ENDP
_tt_size_select PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _ttface$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR _ttsize$[ebp], edx
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _ttsize$[ebp]
mov	ecx, DWORD PTR _strike_index$[ebp]
mov	DWORD PTR [eax+112], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
and	ecx, 1
je	SHORT $LN3@tt_size_se
mov	edx, DWORD PTR _strike_index$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	_FT_Select_Metrics
add	esp, 8
mov	edx, DWORD PTR _ttsize$[ebp]
push	edx
call	_tt_size_reset
add	esp, 4
jmp	SHORT $LN2@tt_size_se
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	DWORD PTR _sfnt$2[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
add	edx, 12					
mov	DWORD PTR _metrics$1[ebp], edx
mov	esi, esp
mov	eax, DWORD PTR _metrics$1[ebp]
push	eax
mov	ecx, DWORD PTR _strike_index$[ebp]
push	ecx
mov	edx, DWORD PTR _ttface$[ebp]
push	edx
mov	eax, DWORD PTR _sfnt$2[ebp]
mov	ecx, DWORD PTR [eax+108]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@tt_size_se
mov	edx, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR [edx+112], -1
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_get_advances PROC
push	ebp
mov	ebp, esp
sub	esp, 56					
push	edi
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 16					
je	SHORT $LN8@tt_get_adv
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN7@tt_get_adv
mov	edx, DWORD PTR _nn$[ebp]
add	edx, 1
mov	DWORD PTR _nn$[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN5@tt_get_adv
lea	ecx, DWORD PTR _ah$3[ebp]
push	ecx
lea	edx, DWORD PTR _tsb$4[ebp]
push	edx
push	0
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Get_VMetrics
add	esp, 20					
movzx	edx, WORD PTR _ah$3[ebp]
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN6@tt_get_adv
jmp	SHORT $LN4@tt_get_adv
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN3@tt_get_adv
mov	edx, DWORD PTR _nn$[ebp]
add	edx, 1
mov	DWORD PTR _nn$[ebp], edx
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jae	SHORT $LN4@tt_get_adv
lea	ecx, DWORD PTR _aw$1[ebp]
push	ecx
lea	edx, DWORD PTR _lsb$2[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
add	eax, DWORD PTR _nn$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Get_HMetrics
add	esp, 16					
movzx	edx, WORD PTR _aw$1[ebp]
mov	eax, DWORD PTR _nn$[ebp]
mov	ecx, DWORD PTR _advances$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN2@tt_get_adv
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@tt_get_adv
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	4
DD	$LN15@tt_get_adv
DD	-16					
DD	2
DD	$LN11@tt_get_adv
DD	-28					
DD	2
DD	$LN12@tt_get_adv
DD	-40					
DD	2
DD	$LN13@tt_get_adv
DD	-52					
DD	2
DD	$LN14@tt_get_adv
DB	97					
DB	119					
DB	0
DB	108					
DB	115					
DB	98					
DB	0
DB	97					
DB	104					
DB	0
DB	116					
DB	115					
DB	98					
DB	0
ENDP
_tt_get_kerning PROC
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	DWORD PTR _sfnt$[ebp], edx
mov	eax, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx+4], 0
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN1@tt_get_ker
mov	esi, esp
mov	edx, DWORD PTR _right_glyph$[ebp]
push	edx
mov	eax, DWORD PTR _left_glyph$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+84]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _kerning$[ebp]
mov	DWORD PTR [ecx], eax
xor	eax, eax
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_property_get PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR [ecx+68]
mov	DWORD PTR _interpreter_version$[ebp], edx
push	OFFSET $SG8768
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@tt_propert
mov	ecx, DWORD PTR _value$[ebp]
mov	DWORD PTR _val$1[ebp], ecx
mov	edx, DWORD PTR _val$1[ebp]
mov	eax, DWORD PTR _interpreter_version$[ebp]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN6@tt_propert
mov	ecx, 4
imul	edx, ecx, 27
cmp	DWORD PTR _ft_trace_levels[edx], 0
jl	SHORT $LN3@tt_propert
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
push	OFFSET $SG8775
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_propert
push	OFFSET $SG8776
push	114					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_property_set PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _module$[ebp]
mov	DWORD PTR _driver$[ebp], eax
push	OFFSET $SG8744
mov	ecx, DWORD PTR _property_name$[ebp]
push	ecx
call	_strcmp
add	esp, 8
test	eax, eax
jne	SHORT $LN4@tt_propert
mov	edx, DWORD PTR _value$[ebp]
mov	DWORD PTR _interpreter_version$1[ebp], edx
mov	eax, DWORD PTR _interpreter_version$1[ebp]
cmp	DWORD PTR [eax], 35			
je	SHORT $LN6@tt_propert
mov	DWORD PTR _error$[ebp], 7
jmp	SHORT $LN5@tt_propert
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _interpreter_version$1[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx+68], eax
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN8@tt_propert
mov	ecx, 4
imul	edx, ecx, 27
cmp	DWORD PTR _ft_trace_levels[edx], 0
jl	SHORT $LN3@tt_propert
mov	eax, DWORD PTR _property_name$[ebp]
push	eax
push	OFFSET $SG8753
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_propert
push	OFFSET $SG8754
push	87					
push	12					
call	_FT_Throw
add	esp, 12					
or	eax, 12					
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_done_blend PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _blend$[ebp], 0
je	$LN27@tt_done_bl
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+4], 0
xor	ecx, ecx
jne	SHORT $LN25@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+8], 0
xor	eax, eax
jne	SHORT $LN22@tt_done_bl
mov	ecx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [ecx+20], 0
je	SHORT $LN9@tt_done_bl
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN18@tt_done_bl
mov	edx, DWORD PTR _i$1[ebp]
add	edx, 1
mov	DWORD PTR _i$1[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR _i$1[ebp]
cmp	ecx, DWORD PTR [eax]
jae	SHORT $LN12@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+20]
mov	ecx, DWORD PTR _i$1[ebp]
mov	edx, DWORD PTR [eax+ecx*8+4]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	eax, DWORD PTR _i$1[ebp]
mov	DWORD PTR [edx+eax*8+4], 0
xor	ecx, ecx
jne	SHORT $LN15@tt_done_bl
jmp	SHORT $LN17@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+20], 0
xor	eax, eax
jne	SHORT $LN12@tt_done_bl
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+28]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [ecx+28], 0
xor	edx, edx
jne	SHORT $LN9@tt_done_bl
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _blend$[ebp]
mov	DWORD PTR [eax+36], 0
xor	ecx, ecx
jne	SHORT $LN6@tt_done_bl
mov	edx, DWORD PTR _blend$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _blend$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN3@tt_done_bl
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Vary_Get_Glyph_Deltas PROC
push	ebp
mov	ebp, esp
sub	esp, 128				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-128]
mov	ecx, 32					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	DWORD PTR _delta_xy$[ebp], 0
mov	DWORD PTR _tuple_coords$[ebp], 0
mov	DWORD PTR _im_start_coords$[ebp], 0
mov	DWORD PTR _im_end_coords$[ebp], 0
mov	DWORD PTR _spoint_count$[ebp], 0
mov	DWORD PTR _sharedpoints$[ebp], 0
mov	DWORD PTR _localpoints$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+672]
test	ecx, ecx
je	SHORT $LN64@TT_Vary_Ge
cmp	DWORD PTR _blend$[ebp], 0
jne	SHORT $LN65@TT_Vary_Ge
push	OFFSET $SG14188
push	1328					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN66@TT_Vary_Ge
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _n_points$[ebp]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _delta_xy$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN63@TT_Vary_Ge
jmp	$Exit$77
mov	edx, DWORD PTR _deltas$[ebp]
mov	eax, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _glyph_index$[ebp]
cmp	edx, DWORD PTR [ecx+32]
jae	SHORT $LN61@TT_Vary_Ge
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	edx, DWORD PTR _glyph_index$[ebp]
mov	esi, DWORD PTR _glyph_index$[ebp]
mov	ecx, DWORD PTR [ecx+edx*4]
cmp	ecx, DWORD PTR [eax+esi*4+4]
jne	SHORT $LN62@TT_Vary_Ge
xor	eax, eax
jmp	$LN66@TT_Vary_Ge
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR _glyph_index$[ebp]
mov	edx, DWORD PTR [eax+ecx*4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN59@TT_Vary_Ge
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	eax, DWORD PTR _glyph_index$[ebp]
mov	esi, DWORD PTR _glyph_index$[ebp]
mov	edx, DWORD PTR [edx+eax*4+4]
sub	edx, DWORD PTR [ecx+esi*4]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN60@TT_Vary_Ge
jmp	$Fail1$78
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [ecx+32]
sub	eax, DWORD PTR [edx]
mov	DWORD PTR _glyph_start$[ebp], eax
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _tuple_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN57@TT_Vary_Ge
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_start_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN57@TT_Vary_Ge
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_end_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN58@TT_Vary_Ge
jmp	$Fail2$79
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
mov	DWORD PTR _tupleCount$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movzx	ecx, ax
add	ecx, DWORD PTR _glyph_start$[ebp]
mov	DWORD PTR _offsetToData$[ebp], ecx
mov	edx, DWORD PTR _tupleCount$[ebp]
and	edx, 32768				
je	SHORT $LN56@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+32]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _here$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _offsetToData$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
lea	eax, DWORD PTR _spoint_count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_ft_var_readpackedpoints
add	esp, 8
mov	DWORD PTR _sharedpoints$[ebp], eax
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+32]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _offsetToData$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, DWORD PTR _here$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [ecx+32], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN55@TT_Vary_Ge
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _tupleCount$[ebp]
and	eax, 4095				
cmp	DWORD PTR _i$[ebp], eax
jae	$Fail3$80
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
mov	DWORD PTR _tupleDataSize$3[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movzx	ecx, ax
mov	DWORD PTR _tupleIndex$2[ebp], ecx
mov	edx, DWORD PTR _tupleIndex$2[ebp]
and	edx, 32768				
je	SHORT $LN52@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN51@TT_Vary_Ge
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR [ecx]
jae	SHORT $LN49@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movsx	ecx, ax
shl	ecx, 2
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _tuple_coords$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN50@TT_Vary_Ge
jmp	SHORT $LN48@TT_Vary_Ge
mov	ecx, DWORD PTR _tupleIndex$2[ebp]
and	ecx, 4095				
mov	edx, DWORD PTR _blend$[ebp]
cmp	ecx, DWORD PTR [edx+24]
jb	SHORT $LN47@TT_Vary_Ge
push	OFFSET $SG14230
push	1388					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail3$80
jmp	SHORT $LN48@TT_Vary_Ge
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax]
shl	ecx, 2
push	ecx
mov	edx, DWORD PTR _tupleIndex$2[ebp]
and	edx, 4095				
mov	eax, DWORD PTR _blend$[ebp]
imul	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [ecx+28]
lea	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	edx, DWORD PTR _tuple_coords$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, DWORD PTR _tupleIndex$2[ebp]
and	eax, 16384				
je	SHORT $LN45@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN44@TT_Vary_Ge
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN42@TT_Vary_Ge
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _im_start_coords$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN43@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN41@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR [eax]
jae	SHORT $LN45@TT_Vary_Ge
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
cwde
shl	eax, 2
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _im_end_coords$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN40@TT_Vary_Ge
mov	eax, DWORD PTR _im_end_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _im_start_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _tuple_coords$[ebp]
push	edx
movzx	eax, WORD PTR _tupleIndex$2[ebp]
push	eax
mov	ecx, DWORD PTR _blend$[ebp]
push	ecx
call	_ft_var_apply_tuple
add	esp, 20					
mov	DWORD PTR _apply$1[ebp], eax
cmp	DWORD PTR _apply$1[ebp], 0
jne	SHORT $LN38@TT_Vary_Ge
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$3[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
jmp	$LN54@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+32]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _here$[ebp], edx
mov	eax, DWORD PTR _tupleIndex$2[ebp]
and	eax, 8192				
je	SHORT $LN37@TT_Vary_Ge
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, DWORD PTR _offsetToData$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	DWORD PTR [eax+32], edx
lea	ecx, DWORD PTR _point_count$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_ft_var_readpackedpoints
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], eax
mov	eax, DWORD PTR _localpoints$[ebp]
mov	DWORD PTR _points$[ebp], eax
jmp	SHORT $LN36@TT_Vary_Ge
mov	ecx, DWORD PTR _sharedpoints$[ebp]
mov	DWORD PTR _points$[ebp], ecx
mov	edx, DWORD PTR _spoint_count$[ebp]
mov	DWORD PTR _point_count$[ebp], edx
cmp	DWORD PTR _point_count$[ebp], 0
jne	SHORT $LN68@TT_Vary_Ge
mov	eax, DWORD PTR _n_points$[ebp]
mov	DWORD PTR tv279[ebp], eax
jmp	SHORT $LN69@TT_Vary_Ge
mov	ecx, DWORD PTR _point_count$[ebp]
mov	DWORD PTR tv279[ebp], ecx
mov	edx, DWORD PTR tv279[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_ft_var_readpackeddeltas
add	esp, 8
mov	DWORD PTR _deltas_x$[ebp], eax
cmp	DWORD PTR _point_count$[ebp], 0
jne	SHORT $LN70@TT_Vary_Ge
mov	ecx, DWORD PTR _n_points$[ebp]
mov	DWORD PTR tv284[ebp], ecx
jmp	SHORT $LN71@TT_Vary_Ge
mov	edx, DWORD PTR _point_count$[ebp]
mov	DWORD PTR tv284[ebp], edx
mov	eax, DWORD PTR tv284[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_ft_var_readpackeddeltas
add	esp, 8
mov	DWORD PTR _deltas_y$[ebp], eax
cmp	DWORD PTR _points$[ebp], 0
je	SHORT $LN34@TT_Vary_Ge
cmp	DWORD PTR _deltas_y$[ebp], 0
je	SHORT $LN34@TT_Vary_Ge
cmp	DWORD PTR _deltas_x$[ebp], 0
jne	SHORT $LN35@TT_Vary_Ge
jmp	$LN33@TT_Vary_Ge
cmp	DWORD PTR _points$[ebp], -1
jne	SHORT $LN32@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN31@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _n_points$[ebp]
jae	SHORT $LN29@TT_Vary_Ge
mov	ecx, DWORD PTR _apply$1[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas_x$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [ecx+edx*8]
mov	edx, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [ecx+edx*8], eax
mov	edx, DWORD PTR _apply$1[ebp]
push	edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _deltas_y$[ebp]
movsx	edx, WORD PTR [ecx+eax*2]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [edx+ecx*8+4]
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [edx+ecx*8+4], eax
jmp	SHORT $LN30@TT_Vary_Ge
jmp	$LN33@TT_Vary_Ge
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN27@TT_Vary_Ge
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
cmp	ecx, DWORD PTR _point_count$[ebp]
jae	$LN33@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _localpoints$[ebp]
movzx	ecx, WORD PTR [eax+edx*2]
cmp	ecx, DWORD PTR _n_points$[ebp]
jb	SHORT $LN24@TT_Vary_Ge
jmp	SHORT $LN26@TT_Vary_Ge
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _localpoints$[ebp]
movzx	esi, WORD PTR [eax+edx*2]
mov	ecx, DWORD PTR _apply$1[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas_x$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [edx+esi*8]
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _localpoints$[ebp]
movzx	ecx, WORD PTR [edx+ecx*2]
mov	edx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [edx+ecx*8], eax
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _localpoints$[ebp]
movzx	esi, WORD PTR [ecx+eax*2]
mov	edx, DWORD PTR _apply$1[ebp]
push	edx
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _deltas_y$[ebp]
movsx	edx, WORD PTR [ecx+eax*2]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _delta_xy$[ebp]
add	eax, DWORD PTR [ecx+esi*8+4]
mov	edx, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _localpoints$[ebp]
movzx	edx, WORD PTR [ecx+edx*2]
mov	ecx, DWORD PTR _delta_xy$[ebp]
mov	DWORD PTR [ecx+edx*8+4], eax
jmp	$LN26@TT_Vary_Ge
cmp	DWORD PTR _localpoints$[ebp], -1
je	SHORT $LN19@TT_Vary_Ge
mov	edx, DWORD PTR _localpoints$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN22@TT_Vary_Ge
mov	edx, DWORD PTR _deltas_x$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas_x$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN19@TT_Vary_Ge
mov	edx, DWORD PTR _deltas_y$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas_y$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN16@TT_Vary_Ge
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$3[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _here$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
jmp	$LN54@TT_Vary_Ge
mov	eax, DWORD PTR _tuple_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _tuple_coords$[ebp], 0
xor	edx, edx
jne	SHORT $Fail3$80
mov	eax, DWORD PTR _im_start_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_start_coords$[ebp], 0
xor	edx, edx
jne	SHORT $LN10@TT_Vary_Ge
mov	eax, DWORD PTR _im_end_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_end_coords$[ebp], 0
xor	edx, edx
jne	SHORT $LN7@TT_Vary_Ge
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $Exit$77
mov	ecx, DWORD PTR _delta_xy$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _delta_xy$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@TT_Vary_Ge
mov	ecx, DWORD PTR _deltas$[ebp]
mov	DWORD PTR [ecx], 0
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN76@TT_Vary_Ge
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 128				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN75@TT_Vary_Ge
DD	-24					
DD	4
DD	$LN72@TT_Vary_Ge
DD	-72					
DD	4
DD	$LN73@TT_Vary_Ge
DD	-84					
DD	4
DD	$LN74@TT_Vary_Ge
DB	115					
DB	112					
DB	111					
DB	105					
DB	110					
DB	116					
DB	95					
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	112					
DB	111					
DB	105					
DB	110					
DB	116					
DB	95					
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_vary_cvt PROC
push	ebp
mov	ebp, esp
sub	esp, 108				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-108]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	DWORD PTR _tuple_coords$[ebp], 0
mov	DWORD PTR _im_start_coords$[ebp], 0
mov	DWORD PTR _im_end_coords$[ebp], 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	DWORD PTR _blend$[ebp], eax
mov	ecx, 4
shl	ecx, 5
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN74@tt_face_va
push	OFFSET $SG14023
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN75@tt_face_va
cmp	DWORD PTR _blend$[ebp], 0
jne	SHORT $LN71@tt_face_va
mov	eax, 4
shl	eax, 5
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN69@tt_face_va
push	OFFSET $SG14030
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN70@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+648], 0
jne	SHORT $LN66@tt_face_va
mov	eax, 4
shl	eax, 5
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN64@tt_face_va
push	OFFSET $SG14038
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN65@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1668702578				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN61@tt_face_va
mov	ecx, 4
shl	ecx, 5
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN59@tt_face_va
push	OFFSET $SG14049
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN60@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN56@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$85
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [edx+32]
sub	ecx, DWORD PTR [eax]
mov	DWORD PTR _table_start$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetULong
add	esp, 4
cmp	eax, 65536				
je	SHORT $LN55@tt_face_va
mov	eax, 4
shl	eax, 5
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN53@tt_face_va
push	OFFSET $SG14059
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN54@tt_face_va
mov	DWORD PTR _error$[ebp], 0
jmp	$FExit$86
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
push	0
push	4
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _tuple_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN49@tt_face_va
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	0
push	4
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_start_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN49@tt_face_va
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _im_end_coords$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN50@tt_face_va
jmp	$FExit$86
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	eax, ax
mov	DWORD PTR _tupleCount$[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
add	edx, DWORD PTR _table_start$[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN48@tt_face_va
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _tupleCount$[ebp]
and	ecx, 4095				
cmp	DWORD PTR _i$[ebp], ecx
jae	$FExit$86
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	eax, ax
mov	DWORD PTR _tupleDataSize$4[ebp], eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movzx	edx, ax
mov	DWORD PTR _tupleIndex$3[ebp], edx
mov	eax, DWORD PTR _tupleIndex$3[ebp]
and	eax, 32768				
je	SHORT $LN45@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN44@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN42@tt_face_va
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _tuple_coords$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN43@tt_face_va
jmp	SHORT $LN41@tt_face_va
mov	edx, DWORD PTR _tupleIndex$3[ebp]
and	edx, 16384				
je	SHORT $LN40@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN39@tt_face_va
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx]
shl	edx, 1
cmp	DWORD PTR _j$[ebp], edx
jae	SHORT $LN40@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
jmp	SHORT $LN38@tt_face_va
mov	ecx, DWORD PTR _offsetToData$[ebp]
add	ecx, DWORD PTR _tupleDataSize$4[ebp]
mov	DWORD PTR _offsetToData$[ebp], ecx
jmp	$LN47@tt_face_va
mov	edx, DWORD PTR _tupleIndex$3[ebp]
and	edx, 16384				
je	SHORT $LN36@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN35@tt_face_va
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _j$[ebp]
cmp	edx, DWORD PTR [ecx]
jae	SHORT $LN33@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movsx	ecx, ax
shl	ecx, 2
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _im_start_coords$[ebp]
mov	DWORD PTR [eax+edx*4], ecx
jmp	SHORT $LN34@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN32@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN36@tt_face_va
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
movsx	edx, ax
shl	edx, 2
mov	eax, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR _im_end_coords$[ebp]
mov	DWORD PTR [ecx+eax*4], edx
jmp	SHORT $LN31@tt_face_va
mov	edx, DWORD PTR _im_end_coords$[ebp]
push	edx
mov	eax, DWORD PTR _im_start_coords$[ebp]
push	eax
mov	ecx, DWORD PTR _tuple_coords$[ebp]
push	ecx
movzx	edx, WORD PTR _tupleIndex$3[ebp]
push	edx
mov	eax, DWORD PTR _blend$[ebp]
push	eax
call	_ft_var_apply_tuple
add	esp, 20					
mov	DWORD PTR _apply$2[ebp], eax
cmp	DWORD PTR _apply$2[ebp], 0
je	SHORT $LN28@tt_face_va
mov	ecx, DWORD PTR _tupleIndex$3[ebp]
and	ecx, 8192				
jne	SHORT $LN29@tt_face_va
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$4[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
jmp	$LN47@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [eax+32]
sub	edx, DWORD PTR [ecx]
mov	DWORD PTR _here$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _offsetToData$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
lea	eax, DWORD PTR _point_count$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_ft_var_readpackedpoints
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], eax
cmp	DWORD PTR _point_count$[ebp], 0
jne	SHORT $LN78@tt_face_va
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+644]
mov	DWORD PTR tv247[ebp], eax
jmp	SHORT $LN79@tt_face_va
mov	ecx, DWORD PTR _point_count$[ebp]
mov	DWORD PTR tv247[ebp], ecx
mov	edx, DWORD PTR tv247[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_ft_var_readpackeddeltas
add	esp, 8
mov	DWORD PTR _deltas$[ebp], eax
cmp	DWORD PTR _localpoints$[ebp], 0
je	SHORT $LN26@tt_face_va
cmp	DWORD PTR _deltas$[ebp], 0
jne	SHORT $LN27@tt_face_va
jmp	$LN25@tt_face_va
cmp	DWORD PTR _localpoints$[ebp], -1
jne	SHORT $LN24@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN23@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR [edx+644]
jae	SHORT $LN21@tt_face_va
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
mov	eax, DWORD PTR _j$[ebp]
movsx	esi, WORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _apply$2[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
mov	ecx, DWORD PTR _j$[ebp]
mov	WORD PTR [eax+ecx*2], si
jmp	SHORT $LN22@tt_face_va
jmp	SHORT $LN25@tt_face_va
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN19@tt_face_va
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
mov	eax, DWORD PTR _j$[ebp]
cmp	eax, DWORD PTR _point_count$[ebp]
jae	SHORT $LN25@tt_face_va
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _localpoints$[ebp]
movzx	eax, WORD PTR [edx+ecx*2]
mov	DWORD PTR _pindex$1[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
mov	eax, DWORD PTR _pindex$1[ebp]
movsx	esi, WORD PTR [edx+eax*2]
mov	ecx, DWORD PTR _apply$2[ebp]
push	ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _deltas$[ebp]
movsx	ecx, WORD PTR [eax+edx*2]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
add	esi, eax
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
mov	ecx, DWORD PTR _pindex$1[ebp]
mov	WORD PTR [eax+ecx*2], si
jmp	SHORT $LN18@tt_face_va
cmp	DWORD PTR _localpoints$[ebp], -1
je	SHORT $LN12@tt_face_va
mov	edx, DWORD PTR _localpoints$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _localpoints$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN15@tt_face_va
mov	edx, DWORD PTR _deltas$[ebp]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _deltas$[ebp], 0
xor	ecx, ecx
jne	SHORT $LN12@tt_face_va
mov	edx, DWORD PTR _offsetToData$[ebp]
add	edx, DWORD PTR _tupleDataSize$4[ebp]
mov	DWORD PTR _offsetToData$[ebp], edx
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, DWORD PTR _here$[ebp]
mov	edx, DWORD PTR _stream$[ebp]
mov	DWORD PTR [edx+32], ecx
jmp	$LN47@tt_face_va
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	ecx, DWORD PTR _tuple_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _tuple_coords$[ebp], 0
xor	eax, eax
jne	SHORT $Exit$85
mov	ecx, DWORD PTR _im_start_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_start_coords$[ebp], 0
xor	eax, eax
jne	SHORT $LN6@tt_face_va
mov	ecx, DWORD PTR _im_end_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _im_end_coords$[ebp], 0
xor	eax, eax
jne	SHORT $LN3@tt_face_va
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN84@tt_face_va
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 108				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	3
DD	$LN83@tt_face_va
DD	-8					
DD	4
DD	$LN80@tt_face_va
DD	-28					
DD	4
DD	$LN81@tt_face_va
DD	-76					
DD	4
DD	$LN82@tt_face_va
DB	112					
DB	111					
DB	105					
DB	110					
DB	116					
DB	95					
DB	99					
DB	111					
DB	117					
DB	110					
DB	116					
DB	0
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Get_MM_Var PROC
push	ebp
mov	ebp, esp
sub	esp, 124				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 31					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+100]
mov	DWORD PTR _memory$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _mmvar$[ebp], 0
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+676], 0
jne	$LN41@TT_Get_MM_
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1735811442				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN40@TT_Get_MM_
jmp	$Exit$50
mov	esi, esp
lea	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1719034226				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN39@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _fvar_start$[ebp], eax
lea	ecx, DWORD PTR _fvar_head$[ebp]
push	ecx
push	OFFSET ?fvar_fields@?1??TT_Get_MM_Var@@9@9
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN38@TT_Get_MM_
jmp	$Exit$50
cmp	DWORD PTR _fvar_head$[ebp], 65536	
jne	SHORT $LN36@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+6]
cmp	eax, 2
jne	SHORT $LN36@TT_Get_MM_
movzx	ecx, WORD PTR _fvar_head$[ebp+10]
cmp	ecx, 20					
jne	SHORT $LN36@TT_Get_MM_
movzx	edx, WORD PTR _fvar_head$[ebp+8]
cmp	edx, 16382				
jg	SHORT $LN36@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+14]
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
lea	edx, DWORD PTR [ecx*4+4]
cmp	eax, edx
jne	SHORT $LN36@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+12]
cmp	eax, 32511				
jg	SHORT $LN36@TT_Get_MM_
movzx	ecx, WORD PTR _fvar_head$[ebp+4]
movzx	edx, WORD PTR _fvar_head$[ebp+8]
imul	eax, edx, 20
add	ecx, eax
movzx	edx, WORD PTR _fvar_head$[ebp+12]
movzx	eax, WORD PTR _fvar_head$[ebp+14]
imul	edx, eax
add	ecx, edx
cmp	ecx, DWORD PTR _table_len$[ebp]
jbe	SHORT $LN37@TT_Get_MM_
push	OFFSET $SG13793
push	686					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$50
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	40					
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_alloc
add	esp, 12					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+676], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN35@TT_Get_MM_
jmp	$Exit$50
movzx	edx, WORD PTR _fvar_head$[ebp+8]
imul	eax, edx, 24
movzx	ecx, WORD PTR _fvar_head$[ebp+12]
lea	edx, DWORD PTR [eax+ecx*8+20]
movzx	eax, WORD PTR _fvar_head$[ebp+12]
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
imul	eax, ecx
lea	edx, DWORD PTR [edx+eax*4]
movzx	eax, WORD PTR _fvar_head$[ebp+8]
imul	ecx, eax, 5
add	edx, ecx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+676]
mov	DWORD PTR [ecx+12], edx
lea	edx, DWORD PTR _error$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+676]
mov	edx, DWORD PTR [ecx+12]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _mmvar$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN34@TT_Get_MM_
jmp	$Exit$50
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	eax, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+8], eax
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [eax+4], -1
movzx	ecx, WORD PTR _fvar_head$[ebp+12]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, 20					
shl	eax, 0
add	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [ecx+12], eax
movzx	edx, WORD PTR _fvar_head$[ebp+8]
imul	eax, edx, 24
mov	ecx, DWORD PTR _mmvar$[ebp]
add	eax, DWORD PTR [ecx+12]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+16], eax
movzx	eax, WORD PTR _fvar_head$[ebp+12]
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	edx, DWORD PTR [ecx+16]
lea	eax, DWORD PTR [edx+eax*8]
mov	DWORD PTR _next_coords$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN33@TT_Get_MM_
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
movzx	edx, WORD PTR _fvar_head$[ebp+12]
cmp	DWORD PTR _i$[ebp], edx
jge	SHORT $LN31@TT_Get_MM_
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax+16]
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR [ecx+edx*8], eax
movzx	ecx, WORD PTR _fvar_head$[ebp+8]
mov	edx, DWORD PTR _next_coords$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _next_coords$[ebp], eax
jmp	SHORT $LN32@TT_Get_MM_
mov	ecx, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR _next_name$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN30@TT_Get_MM_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
movzx	eax, WORD PTR _fvar_head$[ebp+8]
cmp	DWORD PTR _i$[ebp], eax
jge	SHORT $LN28@TT_Get_MM_
imul	ecx, DWORD PTR _i$[ebp], 24
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	edx, DWORD PTR _next_name$[ebp]
mov	DWORD PTR [eax+ecx], edx
mov	eax, DWORD PTR _next_name$[ebp]
add	eax, 5
mov	DWORD PTR _next_name$[ebp], eax
jmp	SHORT $LN29@TT_Get_MM_
movzx	ecx, WORD PTR _fvar_head$[ebp+4]
add	ecx, DWORD PTR _fvar_start$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN27@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR _a$[ebp], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN26@TT_Get_MM_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
movzx	eax, WORD PTR _fvar_head$[ebp+8]
cmp	DWORD PTR _i$[ebp], eax
jge	$LN24@TT_Get_MM_
lea	ecx, DWORD PTR _axis_rec$2[ebp]
push	ecx
push	OFFSET ?fvaraxis_fields@?1??TT_Get_MM_Var@@9@9
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReadFields
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN23@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR _axis_rec$2[ebp]
mov	DWORD PTR [eax+16], ecx
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR _axis_rec$2[ebp+4]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _axis_rec$2[ebp+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR _axis_rec$2[ebp+12]
mov	DWORD PTR [eax+12], ecx
movzx	edx, WORD PTR _axis_rec$2[ebp+18]
mov	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR [eax+20], edx
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 24					
mov	eax, 1
imul	ecx, eax, 0
mov	eax, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [eax]
mov	BYTE PTR [ecx+eax], dl
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx+16]
shr	edx, 16					
and	edx, 255				
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [ecx]
mov	BYTE PTR [eax+ecx], dl
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [edx+16]
shr	eax, 8
and	eax, 255				
mov	ecx, 1
shl	ecx, 1
mov	edx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [edx]
mov	BYTE PTR [ecx+edx], al
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [eax+16]
and	ecx, 255				
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [edx]
mov	BYTE PTR [eax+edx], cl
mov	eax, 1
shl	eax, 2
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [ecx]
mov	BYTE PTR [eax+edx], 0
mov	eax, DWORD PTR _a$[ebp]
add	eax, 24					
mov	DWORD PTR _a$[ebp], eax
jmp	$LN25@TT_Get_MM_
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR _ns$[ebp], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN22@TT_Get_MM_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _ns$[ebp]
add	ecx, 8
mov	DWORD PTR _ns$[ebp], ecx
movzx	edx, WORD PTR _fvar_head$[ebp+12]
cmp	DWORD PTR _i$[ebp], edx
jge	$LN41@TT_Get_MM_
movzx	eax, WORD PTR _fvar_head$[ebp+8]
lea	ecx, DWORD PTR [eax*4+4]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN19@TT_Get_MM_
jmp	$Exit$50
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
movzx	ecx, ax
mov	edx, DWORD PTR _ns$[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetUShort
add	esp, 4
mov	DWORD PTR _j$[ebp], 0
jmp	SHORT $LN18@TT_Get_MM_
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
movzx	edx, WORD PTR _fvar_head$[ebp+8]
cmp	DWORD PTR _j$[ebp], edx
jge	SHORT $LN16@TT_Get_MM_
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_GetULong
add	esp, 4
mov	ecx, DWORD PTR _ns$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _j$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN17@TT_Get_MM_
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExitFrame
add	esp, 4
jmp	$LN21@TT_Get_MM_
cmp	DWORD PTR _master$[ebp], 0
je	$Exit$50
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _mmvar$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN14@TT_Get_MM_
jmp	$Exit$50
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _mmvar$[ebp]
push	edx
call	_memcpy
add	esp, 12					
mov	eax, 20					
shl	eax, 0
add	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _mmvar$[ebp]
imul	eax, DWORD PTR [edx], 24
mov	ecx, DWORD PTR _mmvar$[ebp]
add	eax, DWORD PTR [ecx+12]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [edx+16], eax
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+16]
lea	ecx, DWORD PTR [eax+ecx*8]
mov	DWORD PTR _next_coords$[ebp], ecx
mov	DWORD PTR _n$1[ebp], 0
jmp	SHORT $LN13@TT_Get_MM_
mov	edx, DWORD PTR _n$1[ebp]
add	edx, 1
mov	DWORD PTR _n$1[ebp], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _n$1[ebp]
cmp	ecx, DWORD PTR [eax+8]
jae	SHORT $LN11@TT_Get_MM_
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+16]
mov	ecx, DWORD PTR _n$1[ebp]
mov	edx, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR [eax+ecx*8], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR _next_coords$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	DWORD PTR _next_coords$[ebp], eax
jmp	SHORT $LN12@TT_Get_MM_
mov	ecx, DWORD PTR _mmvar$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _next_coords$[ebp]
mov	DWORD PTR _next_name$[ebp], eax
mov	DWORD PTR _n$1[ebp], 0
jmp	SHORT $LN10@TT_Get_MM_
mov	ecx, DWORD PTR _n$1[ebp]
add	ecx, 1
mov	DWORD PTR _n$1[ebp], ecx
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR _n$1[ebp]
cmp	eax, DWORD PTR [edx]
jae	SHORT $LN8@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR _next_name$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _a$[ebp]
cmp	DWORD PTR [eax+16], 2003265652		
jne	SHORT $LN7@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR [ecx], OFFSET $SG13857
jmp	SHORT $LN6@TT_Get_MM_
mov	edx, DWORD PTR _a$[ebp]
cmp	DWORD PTR [edx+16], 2003072104		
jne	SHORT $LN5@TT_Get_MM_
mov	eax, DWORD PTR _a$[ebp]
mov	DWORD PTR [eax], OFFSET $SG13866
jmp	SHORT $LN6@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
cmp	DWORD PTR [ecx+16], 1869640570		
jne	SHORT $LN3@TT_Get_MM_
mov	edx, DWORD PTR _a$[ebp]
mov	DWORD PTR [edx], OFFSET $SG13875
jmp	SHORT $LN6@TT_Get_MM_
mov	eax, DWORD PTR _a$[ebp]
cmp	DWORD PTR [eax+16], 1936486004		
jne	SHORT $LN6@TT_Get_MM_
mov	ecx, DWORD PTR _a$[ebp]
mov	DWORD PTR [ecx], OFFSET $SG13884
mov	edx, DWORD PTR _next_name$[ebp]
add	edx, 5
mov	DWORD PTR _next_name$[ebp], edx
mov	eax, DWORD PTR _a$[ebp]
add	eax, 24					
mov	DWORD PTR _a$[ebp], eax
jmp	$LN9@TT_Get_MM_
mov	ecx, DWORD PTR _master$[ebp]
mov	edx, DWORD PTR _mmvar$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN49@TT_Get_MM_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	4
DD	$LN48@TT_Get_MM_
DD	-20					
DD	4
DD	$LN44@TT_Get_MM_
DD	-32					
DD	4
DD	$LN45@TT_Get_MM_
DD	-88					
DD	16					
DD	$LN46@TT_Get_MM_
DD	-116					
DD	20					
DD	$LN47@TT_Get_MM_
DB	97					
DB	120					
DB	105					
DB	115					
DB	95					
DB	114					
DB	101					
DB	99					
DB	0
DB	102					
DB	118					
DB	97					
DB	114					
DB	95					
DB	104					
DB	101					
DB	97					
DB	100					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_TT_Set_Var_Design PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _error$[ebp], 0
mov	DWORD PTR _normalized$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+676], 0
jne	SHORT $LN25@TT_Set_Var
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_TT_Get_MM_Var
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN25@TT_Set_Var
jmp	$Exit$31
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+676]
mov	DWORD PTR _blend$[ebp], edx
mov	eax, DWORD PTR _blend$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _mmvar$[ebp], ecx
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR _num_coords$[ebp]
cmp	eax, DWORD PTR [edx]
je	SHORT $LN23@TT_Set_Var
push	OFFSET $SG13966
push	1009					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$31
lea	ecx, DWORD PTR _error$[ebp]
push	ecx
push	0
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	DWORD PTR _normalized$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN22@TT_Set_Var
jmp	$Exit$31
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _a$[ebp], eax
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN21@TT_Set_Var
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _a$[ebp]
add	edx, 24					
mov	DWORD PTR _a$[ebp], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR [eax]
jae	$LN19@TT_Set_Var
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
cmp	edx, DWORD PTR [ecx+12]
jg	SHORT $LN17@TT_Set_Var
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
cmp	eax, DWORD PTR [edx+4]
jge	SHORT $LN18@TT_Set_Var
push	OFFSET $SG13975
push	1025					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$31
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _coords$[ebp]
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [edx+ecx*4]
cmp	ecx, DWORD PTR [eax+8]
jge	SHORT $LN16@TT_Set_Var
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [edx+4]
sub	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
sub	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
neg	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN15@TT_Set_Var
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+12]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN14@TT_Set_Var
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [ecx+eax*4], 0
jmp	SHORT $LN15@TT_Set_Var
mov	edx, DWORD PTR _a$[ebp]
mov	eax, DWORD PTR _a$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _coords$[ebp]
mov	ecx, DWORD PTR _a$[ebp]
mov	edx, DWORD PTR [eax+edx*4]
sub	edx, DWORD PTR [ecx+8]
push	edx
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	$LN20@TT_Set_Var
mov	eax, DWORD PTR _blend$[ebp]
movzx	ecx, BYTE PTR [eax+16]
test	ecx, ecx
jne	SHORT $LN12@TT_Set_Var
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_ft_var_load_avar
add	esp, 4
mov	eax, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [eax+20], 0
je	$LN11@TT_Set_Var
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR _av$[ebp], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN10@TT_Set_Var
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _av$[ebp]
add	ecx, 8
mov	DWORD PTR _av$[ebp], ecx
mov	edx, DWORD PTR _mmvar$[ebp]
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR [edx]
jae	$LN11@TT_Set_Var
mov	DWORD PTR _j$[ebp], 1
jmp	SHORT $LN7@TT_Set_Var
mov	ecx, DWORD PTR _j$[ebp]
add	ecx, 1
mov	DWORD PTR _j$[ebp], ecx
mov	edx, DWORD PTR _av$[ebp]
movzx	eax, WORD PTR [edx]
cmp	DWORD PTR _j$[ebp], eax
jae	$LN5@TT_Set_Var
mov	ecx, DWORD PTR _av$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _normalized$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR [ecx+eax*4]
cmp	eax, DWORD PTR [edx+esi*8]
jge	SHORT $LN4@TT_Set_Var
mov	ecx, DWORD PTR _av$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _av$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _j$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR [edx+eax*8]
sub	edx, DWORD PTR [ecx+esi*8-8]
push	edx
mov	eax, DWORD PTR _av$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR _av$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _j$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR [ecx+edx*8+4]
sub	ecx, DWORD PTR [eax+esi*8-4]
push	ecx
mov	edx, DWORD PTR _av$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	esi, DWORD PTR _j$[ebp]
mov	ecx, DWORD PTR [edx+ecx*4]
sub	ecx, DWORD PTR [eax+esi*8-8]
push	ecx
call	_FT_MulDiv
add	esp, 12					
mov	edx, DWORD PTR _av$[ebp]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _j$[ebp]
add	eax, DWORD PTR [ecx+edx*8-4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _normalized$[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN5@TT_Set_Var
jmp	$LN6@TT_Set_Var
jmp	$LN9@TT_Set_Var
mov	eax, DWORD PTR _normalized$[ebp]
push	eax
mov	ecx, DWORD PTR _num_coords$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_TT_Set_MM_Blend
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _normalized$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _normalized$[ebp], 0
xor	edx, edx
jne	SHORT $Exit$31
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN30@TT_Set_Var
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN29@TT_Set_Var
DD	-8					
DD	4
DD	$LN28@TT_Set_Var
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Set_MM_Blend PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+100]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	BYTE PTR [edx+672], 0
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+676], 0
jne	SHORT $LN26@TT_Set_MM_
push	0
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_TT_Get_MM_Var
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN26@TT_Set_MM_
jmp	$Exit$32
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
mov	DWORD PTR _blend$[ebp], eax
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR _mmvar$[ebp], edx
mov	eax, DWORD PTR _mmvar$[ebp]
mov	ecx, DWORD PTR _num_coords$[ebp]
cmp	ecx, DWORD PTR [eax]
je	SHORT $LN24@TT_Set_MM_
push	OFFSET $SG13908
push	880					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$32
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN23@TT_Set_MM_
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
cmp	eax, DWORD PTR _num_coords$[ebp]
jae	SHORT $LN21@TT_Set_MM_
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _coords$[ebp]
cmp	DWORD PTR [edx+ecx*4], -65536		
jl	SHORT $LN19@TT_Set_MM_
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _coords$[ebp]
cmp	DWORD PTR [ecx+eax*4], 65536		
jle	SHORT $LN20@TT_Set_MM_
push	OFFSET $SG13914
push	887					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$32
jmp	SHORT $LN22@TT_Set_MM_
mov	edx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [edx+36], 0
jne	SHORT $LN18@TT_Set_MM_
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_ft_var_load_gvar
add	esp, 4
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN18@TT_Set_MM_
jmp	$Exit$32
mov	ecx, DWORD PTR _blend$[ebp]
cmp	DWORD PTR [ecx+4], 0
jne	SHORT $LN16@TT_Set_MM_
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_coords$[ebp]
push	eax
push	0
push	4
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _blend$[ebp]
mov	DWORD PTR [edx+4], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@TT_Set_MM_
jmp	$Exit$32
mov	DWORD PTR _manageCvt$[ebp], 1
jmp	SHORT $LN14@TT_Set_MM_
mov	DWORD PTR _manageCvt$[ebp], 0
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN13@TT_Set_MM_
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _num_coords$[ebp]
jae	SHORT $LN14@TT_Set_MM_
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _coords$[ebp]
mov	eax, DWORD PTR [eax+ecx*4]
cmp	eax, DWORD PTR [esi+edx*4]
je	SHORT $LN10@TT_Set_MM_
mov	DWORD PTR _manageCvt$[ebp], 2
jmp	SHORT $LN14@TT_Set_MM_
jmp	SHORT $LN12@TT_Set_MM_
mov	ecx, DWORD PTR _blend$[ebp]
mov	edx, DWORD PTR _num_coords$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _num_coords$[ebp]
shl	eax, 2
push	eax
mov	ecx, DWORD PTR _coords$[ebp]
push	ecx
mov	edx, DWORD PTR _blend$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	_memcpy
add	esp, 12					
mov	ecx, DWORD PTR _face$[ebp]
mov	BYTE PTR [ecx+672], 1
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+648], 0
je	SHORT $Exit$32
mov	eax, DWORD PTR _manageCvt$[ebp]
mov	DWORD PTR tv159[ebp], eax
cmp	DWORD PTR tv159[ebp], 1
je	SHORT $LN2@TT_Set_MM_
cmp	DWORD PTR tv159[ebp], 2
je	SHORT $LN5@TT_Set_MM_
jmp	SHORT $Exit$32
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+648]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+648], 0
xor	edx, edx
jne	SHORT $LN5@TT_Set_MM_
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+648], 0
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_load_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$32
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_vary_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN31@TT_Set_MM_
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN30@TT_Set_MM_
DD	-8					
DD	4
DD	$LN29@TT_Set_MM_
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_get_device_metrics PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _result$[ebp], 0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+716]
mov	DWORD PTR _record_size$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+704]
add	eax, 8
mov	DWORD PTR _record$[ebp], eax
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN5@tt_face_ge
mov	ecx, DWORD PTR _nn$[ebp]
add	ecx, 1
mov	DWORD PTR _nn$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _nn$[ebp]
cmp	eax, DWORD PTR [edx+712]
jae	SHORT $LN3@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+720]
mov	eax, DWORD PTR _nn$[ebp]
movzx	ecx, BYTE PTR [edx+eax]
cmp	ecx, DWORD PTR _ppem$[ebp]
jne	SHORT $LN2@tt_face_ge
mov	edx, DWORD PTR _gindex$[ebp]
add	edx, 2
mov	DWORD PTR _gindex$[ebp], edx
mov	eax, DWORD PTR _gindex$[ebp]
cmp	eax, DWORD PTR _record_size$[ebp]
jae	SHORT $LN1@tt_face_ge
mov	ecx, DWORD PTR _nn$[ebp]
imul	ecx, DWORD PTR _record_size$[ebp]
add	ecx, DWORD PTR _record$[ebp]
add	ecx, DWORD PTR _gindex$[ebp]
mov	DWORD PTR _result$[ebp], ecx
jmp	SHORT $LN3@tt_face_ge
jmp	SHORT $LN4@tt_face_ge
mov	eax, DWORD PTR _result$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_free_hdmx PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
mov	eax, DWORD PTR [edx+28]
mov	DWORD PTR _memory$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+720]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+720], 0
xor	edx, edx
jne	SHORT $LN3@tt_face_fr
mov	eax, DWORD PTR _face$[ebp]
add	eax, 704				
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_load_hdmx PROC
push	ebp
mov	ebp, esp
sub	esp, 52					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	esi, esp
lea	edx, DWORD PTR _table_size$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1751412088				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN10@tt_face_lo
cmp	DWORD PTR _table_size$[ebp], 8
jae	SHORT $LN11@tt_face_lo
xor	eax, eax
jmp	$LN12@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 704				
push	ecx
mov	edx, DWORD PTR _table_size$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@tt_face_lo
jmp	$Exit$18
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+704]
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, DWORD PTR _table_size$[ebp]
mov	DWORD PTR _limit$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 2
mov	DWORD PTR _p$[ebp], ecx
mov	edx, 1
imul	eax, edx, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+eax-2]
shl	edx, 8
mov	eax, 1
shl	eax, 0
mov	ecx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [ecx+eax-2]
or	edx, eax
movzx	ecx, dx
mov	DWORD PTR _version$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-2]
shl	eax, 8
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-2]
or	eax, ecx
movzx	edx, ax
mov	DWORD PTR _num_records$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 4
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-4]
shl	ecx, 24					
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-4]
shl	edx, 16					
or	ecx, edx
mov	eax, 1
shl	eax, 1
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
shl	eax, 8
or	ecx, eax
mov	edx, 1
imul	eax, edx, 3
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+eax-4]
or	ecx, eax
mov	DWORD PTR _record_size$[ebp], ecx
cmp	DWORD PTR _record_size$[ebp], -65536	
jb	SHORT $LN8@tt_face_lo
mov	ecx, DWORD PTR _record_size$[ebp]
and	ecx, 65535				
mov	DWORD PTR _record_size$[ebp], ecx
cmp	DWORD PTR _version$[ebp], 0
jne	SHORT $LN6@tt_face_lo
cmp	DWORD PTR _num_records$[ebp], 255	
ja	SHORT $LN6@tt_face_lo
cmp	DWORD PTR _record_size$[ebp], 65537	
ja	SHORT $LN6@tt_face_lo
cmp	DWORD PTR _record_size$[ebp], 4
jae	SHORT $LN7@tt_face_lo
push	OFFSET $SG9245
push	530					
push	3
call	_FT_Throw
add	esp, 12					
or	eax, 3
mov	DWORD PTR _error$[ebp], eax
jmp	$Fail$19
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _num_records$[ebp]
push	eax
push	0
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+720], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN5@tt_face_lo
jmp	SHORT $Fail$19
mov	DWORD PTR _nn$[ebp], 0
jmp	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _nn$[ebp]
add	eax, 1
mov	DWORD PTR _nn$[ebp], eax
mov	ecx, DWORD PTR _nn$[ebp]
cmp	ecx, DWORD PTR _num_records$[ebp]
jae	SHORT $LN2@tt_face_lo
mov	edx, DWORD PTR _p$[ebp]
add	edx, DWORD PTR _record_size$[ebp]
cmp	edx, DWORD PTR _limit$[ebp]
jbe	SHORT $LN1@tt_face_lo
jmp	SHORT $LN2@tt_face_lo
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+720]
mov	edx, DWORD PTR _nn$[ebp]
mov	esi, DWORD PTR _p$[ebp]
mov	cl, BYTE PTR [esi+ecx]
mov	BYTE PTR [eax+edx], cl
mov	edx, DWORD PTR _p$[ebp]
add	edx, DWORD PTR _record_size$[ebp]
mov	DWORD PTR _p$[ebp], edx
jmp	SHORT $LN3@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _nn$[ebp]
mov	DWORD PTR [eax+712], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _table_size$[ebp]
mov	DWORD PTR [edx+708], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _record_size$[ebp]
mov	DWORD PTR [ecx+716], edx
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN12@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
add	eax, 704				
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+708], 0
jmp	SHORT $Exit$18
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN17@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	2
DD	$LN16@tt_face_lo
DD	-8					
DD	4
DD	$LN14@tt_face_lo
DD	-36					
DD	4
DD	$LN15@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	115					
DB	105					
DB	122					
DB	101					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_load_prep PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN14@tt_face_lo
push	OFFSET $SG9172
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN15@tt_face_lo
mov	esi, esp
lea	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1886545264				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+640], 0
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+636], 0
mov	DWORD PTR _error$[ebp], 0
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN9@tt_face_lo
push	OFFSET $SG9184
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN10@tt_face_lo
jmp	SHORT $Exit$21
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _table_len$[ebp]
mov	DWORD PTR [ecx+636], edx
mov	eax, DWORD PTR _face$[ebp]
add	eax, 640				
push	eax
mov	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@tt_face_lo
jmp	SHORT $Exit$21
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN3@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+636]
push	eax
push	OFFSET $SG9194
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN19@tt_face_lo
DD	-12					
DD	4
DD	$LN18@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_tt_face_load_fpgm PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN14@tt_face_lo
push	OFFSET $SG9138
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN15@tt_face_lo
mov	esi, esp
lea	eax, DWORD PTR _table_len$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1718642541				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+632], 0
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+628], 0
mov	DWORD PTR _error$[ebp], 0
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN9@tt_face_lo
push	OFFSET $SG9150
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN10@tt_face_lo
jmp	SHORT $Exit$21
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _table_len$[ebp]
mov	DWORD PTR [ecx+628], edx
mov	eax, DWORD PTR _face$[ebp]
add	eax, 632				
push	eax
mov	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@tt_face_lo
jmp	SHORT $Exit$21
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN3@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+628]
push	eax
push	OFFSET $SG9160
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN19@tt_face_lo
DD	-12					
DD	4
DD	$LN18@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_tt_face_load_cvt PROC
push	ebp
mov	ebp, esp
sub	esp, 36					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _stream$[ebp]
mov	ecx, DWORD PTR [eax+28]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN18@tt_face_lo
push	OFFSET $SG9096
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN19@tt_face_lo
mov	esi, esp
lea	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
push	1668707360				
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+508]
call	eax
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN15@tt_face_lo
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN13@tt_face_lo
push	OFFSET $SG9107
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN14@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+644], 0
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+648], 0
mov	DWORD PTR _error$[ebp], 0
jmp	$Exit$26
mov	eax, DWORD PTR _table_len$[ebp]
shr	eax, 1
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+644], eax
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+644]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+648], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN10@tt_face_lo
jmp	$Exit$26
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+644]
shl	eax, 1
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_EnterFrame
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN9@tt_face_lo
jmp	$Exit$26
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
mov	DWORD PTR _cur$2[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+644]
mov	eax, DWORD PTR _cur$2[ebp]
lea	ecx, DWORD PTR [eax+edx*2]
mov	DWORD PTR _limit$1[ebp], ecx
jmp	SHORT $LN8@tt_face_lo
mov	edx, DWORD PTR _cur$2[ebp]
add	edx, 2
mov	DWORD PTR _cur$2[ebp], edx
mov	eax, DWORD PTR _cur$2[ebp]
cmp	eax, DWORD PTR _limit$1[ebp]
jae	SHORT $LN6@tt_face_lo
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
call	_FT_Stream_GetUShort
add	esp, 4
mov	edx, DWORD PTR _cur$2[ebp]
mov	WORD PTR [edx], ax
jmp	SHORT $LN7@tt_face_lo
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExitFrame
add	esp, 4
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN4@tt_face_lo
push	OFFSET $SG9125
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN5@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, BYTE PTR [ecx+672]
test	edx, edx
je	SHORT $Exit$26
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_vary_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	2
DD	$LN24@tt_face_lo
DD	-8					
DD	4
DD	$LN22@tt_face_lo
DD	-24					
DD	4
DD	$LN23@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_face_done_loca PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 700				
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+696], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_get_location PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _pos2$[ebp], 0
mov	eax, DWORD PTR _pos2$[ebp]
mov	DWORD PTR _pos1$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _gindex$[ebp]
cmp	edx, DWORD PTR [ecx+696]
jae	$LN17@tt_face_ge
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+210]
test	ecx, ecx
je	$LN16@tt_face_ge
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+700]
mov	ecx, DWORD PTR _gindex$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _p$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+696]
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+700]
lea	ecx, DWORD PTR [eax+ecx*4]
mov	DWORD PTR _p_limit$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-4]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-4]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
or	eax, edx
mov	DWORD PTR _pos1$[ebp], eax
mov	eax, DWORD PTR _pos1$[ebp]
mov	DWORD PTR _pos2$[ebp], eax
mov	ecx, DWORD PTR _p$[ebp]
add	ecx, 4
cmp	ecx, DWORD PTR _p_limit$[ebp]
ja	SHORT $LN15@tt_face_ge
mov	edx, DWORD PTR _p$[ebp]
add	edx, 4
mov	DWORD PTR _p$[ebp], edx
mov	eax, 1
imul	ecx, eax, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	eax, BYTE PTR [edx+ecx-4]
shl	eax, 24					
mov	ecx, 1
shl	ecx, 0
mov	edx, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [edx+ecx-4]
shl	ecx, 16					
or	eax, ecx
mov	edx, 1
shl	edx, 1
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
shl	edx, 8
or	eax, edx
mov	ecx, 1
imul	edx, ecx, 3
mov	ecx, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [ecx+edx-4]
or	eax, edx
mov	DWORD PTR _pos2$[ebp], eax
jmp	$LN17@tt_face_ge
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+700]
mov	edx, DWORD PTR _gindex$[ebp]
lea	eax, DWORD PTR [ecx+edx*2]
mov	DWORD PTR _p$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+696]
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+700]
lea	edx, DWORD PTR [ecx+edx*2]
mov	DWORD PTR _p_limit$[ebp], edx
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movzx	eax, cx
mov	DWORD PTR _pos1$[ebp], eax
mov	ecx, DWORD PTR _pos1$[ebp]
mov	DWORD PTR _pos2$[ebp], ecx
mov	edx, DWORD PTR _p$[ebp]
add	edx, 2
cmp	edx, DWORD PTR _p_limit$[ebp]
ja	SHORT $LN13@tt_face_ge
mov	eax, DWORD PTR _p$[ebp]
add	eax, 2
mov	DWORD PTR _p$[ebp], eax
mov	ecx, 1
imul	edx, ecx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	ecx, BYTE PTR [eax+edx-2]
shl	ecx, 8
mov	edx, 1
shl	edx, 0
mov	eax, DWORD PTR _p$[ebp]
movzx	edx, BYTE PTR [eax+edx-2]
or	ecx, edx
movzx	eax, cx
mov	DWORD PTR _pos2$[ebp], eax
mov	ecx, DWORD PTR _pos1$[ebp]
shl	ecx, 1
mov	DWORD PTR _pos1$[ebp], ecx
mov	edx, DWORD PTR _pos2$[ebp]
shl	edx, 1
mov	DWORD PTR _pos2$[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR _pos1$[ebp]
cmp	ecx, DWORD PTR [eax+668]
jbe	SHORT $LN12@tt_face_ge
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 1
jl	SHORT $LN10@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+668]
push	edx
mov	eax, DWORD PTR _gindex$[ebp]
push	eax
mov	ecx, DWORD PTR _pos1$[ebp]
push	ecx
push	OFFSET $SG9068
call	_FT_Message
add	esp, 16					
xor	edx, edx
jne	SHORT $LN11@tt_face_ge
mov	eax, DWORD PTR _asize$[ebp]
mov	DWORD PTR [eax], 0
xor	eax, eax
jmp	SHORT $LN18@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR _pos2$[ebp]
cmp	edx, DWORD PTR [ecx+668]
jbe	SHORT $LN7@tt_face_ge
mov	eax, 4
imul	ecx, eax, 31
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN5@tt_face_ge
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+668]
push	eax
mov	ecx, DWORD PTR _gindex$[ebp]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR _pos2$[ebp]
push	edx
push	OFFSET $SG9074
call	_FT_Message
add	esp, 16					
xor	eax, eax
jne	SHORT $LN6@tt_face_ge
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+668]
mov	DWORD PTR _pos2$[ebp], edx
mov	eax, DWORD PTR _pos2$[ebp]
cmp	eax, DWORD PTR _pos1$[ebp]
jb	SHORT $LN2@tt_face_ge
mov	ecx, DWORD PTR _pos2$[ebp]
sub	ecx, DWORD PTR _pos1$[ebp]
mov	edx, DWORD PTR _asize$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN1@tt_face_ge
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+668]
sub	ecx, DWORD PTR _pos1$[ebp]
mov	edx, DWORD PTR _asize$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR _pos1$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_load_loca PROC
push	ebp
mov	ebp, esp
sub	esp, 44					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-44]
mov	ecx, 11					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR _face$[ebp]
add	eax, 668				
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
push	1735162214				
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+508]
call	ecx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _error$[ebp]
and	edx, 255				
cmp	edx, 142				
jne	SHORT $LN41@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+668], 0
jmp	SHORT $LN38@tt_face_lo
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN38@tt_face_lo
jmp	$Exit$47
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN37@tt_face_lo
push	OFFSET $SG8956
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN38@tt_face_lo
mov	esi, esp
lea	ecx, DWORD PTR _table_len$[ebp]
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
push	1819239265				
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+508]
call	edx
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN34@tt_face_lo
push	OFFSET $SG8963
push	84					
push	144					
call	_FT_Throw
add	esp, 12					
or	eax, 144				
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$47
mov	eax, DWORD PTR _face$[ebp]
movsx	ecx, WORD PTR [eax+210]
test	ecx, ecx
je	SHORT $LN33@tt_face_lo
mov	DWORD PTR _shift$[ebp], 2
cmp	DWORD PTR _table_len$[ebp], 262144	
jb	SHORT $LN32@tt_face_lo
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN30@tt_face_lo
push	OFFSET $SG8970
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN31@tt_face_lo
push	OFFSET $SG8971
push	95					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$47
mov	edx, DWORD PTR _table_len$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shr	edx, cl
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+696], edx
jmp	SHORT $LN27@tt_face_lo
mov	DWORD PTR _shift$[ebp], 1
cmp	DWORD PTR _table_len$[ebp], 131072	
jb	SHORT $LN26@tt_face_lo
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN24@tt_face_lo
push	OFFSET $SG8978
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN25@tt_face_lo
push	OFFSET $SG8979
push	107					
push	8
call	_FT_Throw
add	esp, 12					
or	eax, 8
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$47
mov	edx, DWORD PTR _table_len$[ebp]
mov	ecx, DWORD PTR _shift$[ebp]
shr	edx, cl
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+696], edx
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+16]
add	edx, 1
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+696], edx
je	$LN21@tt_face_lo
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN19@tt_face_lo
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+696]
sub	eax, 1
push	eax
push	OFFSET $SG8986
call	_FT_Message
add	esp, 12					
xor	ecx, ecx
jne	SHORT $LN20@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [edx+696]
cmp	ecx, DWORD PTR [eax+16]
ja	$LN21@tt_face_lo
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+16]
add	eax, 1
mov	ecx, DWORD PTR _shift$[ebp]
shl	eax, cl
mov	DWORD PTR _new_loca_len$6[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+156]
mov	DWORD PTR _entry$5[ebp], edx
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+152]
shl	ecx, 4
add	ecx, DWORD PTR _entry$5[ebp]
mov	DWORD PTR _limit$4[ebp], ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Pos
add	esp, 4
mov	DWORD PTR _pos$3[ebp], eax
mov	DWORD PTR _dist$2[ebp], 2147483647	
jmp	SHORT $LN15@tt_face_lo
mov	eax, DWORD PTR _entry$5[ebp]
add	eax, 16					
mov	DWORD PTR _entry$5[ebp], eax
mov	ecx, DWORD PTR _entry$5[ebp]
cmp	ecx, DWORD PTR _limit$4[ebp]
jae	SHORT $LN13@tt_face_lo
mov	edx, DWORD PTR _entry$5[ebp]
mov	eax, DWORD PTR [edx+8]
sub	eax, DWORD PTR _pos$3[ebp]
mov	DWORD PTR _diff$1[ebp], eax
cmp	DWORD PTR _diff$1[ebp], 0
jle	SHORT $LN12@tt_face_lo
mov	ecx, DWORD PTR _diff$1[ebp]
cmp	ecx, DWORD PTR _dist$2[ebp]
jge	SHORT $LN12@tt_face_lo
mov	edx, DWORD PTR _diff$1[ebp]
mov	DWORD PTR _dist$2[ebp], edx
jmp	SHORT $LN14@tt_face_lo
mov	eax, DWORD PTR _entry$5[ebp]
cmp	eax, DWORD PTR _limit$4[ebp]
jne	SHORT $LN11@tt_face_lo
mov	ecx, DWORD PTR _stream$[ebp]
mov	edx, DWORD PTR [ecx+4]
sub	edx, DWORD PTR _pos$3[ebp]
mov	DWORD PTR _dist$2[ebp], edx
mov	eax, DWORD PTR _new_loca_len$6[ebp]
cmp	eax, DWORD PTR _dist$2[ebp]
jg	SHORT $LN21@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+16]
add	edx, 1
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+696], edx
mov	ecx, DWORD PTR _new_loca_len$6[ebp]
mov	DWORD PTR _table_len$[ebp], ecx
mov	edx, 4
imul	eax, edx, 31
cmp	DWORD PTR _ft_trace_levels[eax], 2
jl	SHORT $LN8@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+696]
push	edx
push	OFFSET $SG9006
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN9@tt_face_lo
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 700				
push	ecx
mov	edx, DWORD PTR _table_len$[ebp]
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ExtractFrame
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN4@tt_face_lo
jmp	SHORT $Exit$47
mov	ecx, 4
imul	edx, ecx, 31
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN3@tt_face_lo
push	OFFSET $SG9014
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN4@tt_face_lo
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN46@tt_face_lo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN45@tt_face_lo
DD	-12					
DD	4
DD	$LN44@tt_face_lo
DB	116					
DB	97					
DB	98					
DB	108					
DB	101					
DB	95					
DB	108					
DB	101					
DB	110					
DB	0
ENDP
_TT_Load_Glyph PROC
push	ebp
mov	ebp, esp
sub	esp, 228				
push	edi
lea	edi, DWORD PTR [ebp-228]
mov	ecx, 57					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN26@TT_Load_Gl
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
push	OFFSET $SG10377
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN27@TT_Load_Gl
mov	ecx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [ecx+112], -1
je	$LN23@TT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 8
jne	$LN23@TT_Load_Gl
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_load_sbit_image
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN23@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	$LN21@TT_Load_Gl
push	1
mov	ecx, DWORD PTR _load_flags$[ebp]
push	ecx
mov	edx, DWORD PTR _glyph$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
lea	ecx, DWORD PTR _loader$[ebp]
push	ecx
call	_tt_loader_init
add	esp, 20					
push	1
push	0
mov	edx, DWORD PTR _glyph_index$[ebp]
push	edx
lea	eax, DWORD PTR _loader$[ebp]
push	eax
call	_load_truetype_glyph
add	esp, 16					
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp+60]
mov	DWORD PTR [ecx+56], edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR _loader$[ebp+180]
mov	DWORD PTR [eax+60], ecx
mov	edx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [edx+40], 0
jne	SHORT $LN20@TT_Load_Gl
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+56], 0
je	SHORT $LN20@TT_Load_Gl
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+16]
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+56]
push	ecx
call	_FT_MulFix_i386
add	esp, 8
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+40], eax
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+52], 0
jne	SHORT $LN21@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [ecx+60], 0
je	SHORT $LN21@TT_Load_Gl
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+60]
push	edx
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+52], eax
xor	eax, eax
jmp	$LN28@TT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 1
jne	SHORT $LN18@TT_Load_Gl
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, BYTE PTR [eax+108]
test	ecx, ecx
jne	SHORT $LN18@TT_Load_Gl
push	OFFSET $SG10390
push	2401					
push	36					
call	_FT_Throw
add	esp, 12					
or	eax, 36					
jmp	$LN28@TT_Load_Gl
mov	edx, DWORD PTR _load_flags$[ebp]
and	edx, 16384				
je	SHORT $LN17@TT_Load_Gl
push	OFFSET $SG10392
push	2404					
push	6
call	_FT_Throw
add	esp, 12					
or	eax, 6
jmp	$LN28@TT_Load_Gl
push	0
mov	eax, DWORD PTR _load_flags$[ebp]
push	eax
mov	ecx, DWORD PTR _glyph$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
lea	eax, DWORD PTR _loader$[ebp]
push	eax
call	_tt_loader_init
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN16@TT_Load_Gl
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN28@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+72], 1869968492		
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+128], 0
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], 0
push	0
push	0
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
lea	edx, DWORD PTR _loader$[ebp]
push	edx
call	_load_truetype_glyph
add	esp, 16					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN15@TT_Load_Gl
mov	eax, DWORD PTR _glyph$[ebp]
cmp	DWORD PTR [eax+72], 1668246896		
jne	SHORT $LN14@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp+12]
mov	eax, DWORD PTR [edx+48]
mov	DWORD PTR [ecx+128], eax
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR _loader$[ebp+12]
mov	eax, DWORD PTR [edx+52]
mov	DWORD PTR [ecx+132], eax
jmp	SHORT $LN13@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp+12]
add	ecx, 20					
mov	edx, DWORD PTR _glyph$[ebp]
add	edx, 108				
mov	eax, DWORD PTR [ecx]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR [ecx+8]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR [ecx+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _glyph$[ebp]
mov	eax, DWORD PTR [edx+124]
and	eax, -513				
mov	ecx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [ecx+124], eax
cmp	DWORD PTR _loader$[ebp+68], 0
je	SHORT $LN13@TT_Load_Gl
push	0
mov	edx, DWORD PTR _loader$[ebp+68]
neg	edx
push	edx
mov	eax, DWORD PTR _glyph$[ebp]
add	eax, 108				
push	eax
call	_FT_Outline_Translate
add	esp, 12					
mov	ecx, DWORD PTR _load_flags$[ebp]
and	ecx, 2
jne	$LN11@TT_Load_Gl
mov	edx, DWORD PTR _loader$[ebp+160]
movzx	eax, BYTE PTR [edx+337]
test	eax, eax
je	SHORT $LN10@TT_Load_Gl
mov	ecx, DWORD PTR _loader$[ebp+160]
mov	edx, DWORD PTR [ecx+340]
mov	DWORD PTR tv204[ebp], edx
cmp	DWORD PTR tv204[ebp], 5
ja	SHORT $LN3@TT_Load_Gl
mov	eax, DWORD PTR tv204[ebp]
jmp	DWORD PTR $LN33@TT_Load_Gl[eax*4]
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 32					
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN8@TT_Load_Gl
jmp	SHORT $LN8@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 48					
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN8@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 16					
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN8@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 8
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
jmp	SHORT $LN11@TT_Load_Gl
mov	ecx, DWORD PTR _glyph$[ebp]
mov	edx, DWORD PTR [ecx+124]
or	edx, 8
mov	eax, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [eax+124], edx
mov	ecx, DWORD PTR _glyph_index$[ebp]
push	ecx
lea	edx, DWORD PTR _loader$[ebp]
push	edx
call	_compute_glyph_metrics
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _load_flags$[ebp]
and	eax, 1
jne	SHORT $LN1@TT_Load_Gl
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, WORD PTR [ecx+14]
cmp	edx, 24					
jge	SHORT $LN1@TT_Load_Gl
mov	eax, DWORD PTR _glyph$[ebp]
mov	ecx, DWORD PTR [eax+124]
or	ecx, 256				
mov	edx, DWORD PTR _glyph$[ebp]
mov	DWORD PTR [edx+124], ecx
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN32@TT_Load_Gl
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 228				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN31@TT_Load_Gl
DD	-220					
DD	208					
DD	$LN30@TT_Load_Gl
DB	108					
DB	111					
DB	97					
DB	100					
DB	101					
DB	114					
DB	0
npad	1
DD	$LN7@TT_Load_Gl
DD	$LN6@TT_Load_Gl
DD	$LN3@TT_Load_Gl
DD	$LN3@TT_Load_Gl
DD	$LN5@TT_Load_Gl
DD	$LN4@TT_Load_Gl
ENDP
_TT_Get_VMetrics PROC
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, BYTE PTR [eax+292]
test	ecx, ecx
je	SHORT $LN12@TT_Get_VMe
mov	esi, esp
mov	edx, DWORD PTR _ah$[ebp]
push	edx
mov	eax, DWORD PTR _tsb$[ebp]
push	eax
mov	ecx, DWORD PTR _idx$[ebp]
push	ecx
push	1
mov	edx, DWORD PTR _face$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+532]
mov	edx, DWORD PTR [ecx+112]
call	edx
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN8@TT_Get_VMe
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+364]
cmp	ecx, 65535				
je	SHORT $LN10@TT_Get_VMe
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
sub	eax, DWORD PTR _yMax$[ebp]
mov	ecx, DWORD PTR _tsb$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+434]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+436]
sub	eax, edx
mov	ecx, DWORD PTR _ah$[ebp]
mov	WORD PTR [ecx], ax
jmp	SHORT $LN8@TT_Get_VMe
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+220]
sub	eax, DWORD PTR _yMax$[ebp]
mov	ecx, DWORD PTR _tsb$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, DWORD PTR _face$[ebp]
movsx	eax, WORD PTR [edx+220]
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+222]
sub	eax, edx
mov	ecx, DWORD PTR _ah$[ebp]
mov	WORD PTR [ecx], ax
mov	edx, 4
imul	eax, edx, 28
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN7@TT_Get_VMe
mov	ecx, DWORD PTR _ah$[ebp]
movzx	edx, WORD PTR [ecx]
push	edx
push	OFFSET $SG9481
call	_FT_Message
add	esp, 8
xor	eax, eax
jne	SHORT $LN8@TT_Get_VMe
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN3@TT_Get_VMe
mov	eax, DWORD PTR _tsb$[ebp]
movsx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG9486
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN4@TT_Get_VMe
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Get_HMetrics PROC
push	ebp
mov	ebp, esp
push	esi
mov	esi, esp
mov	eax, DWORD PTR _aw$[ebp]
push	eax
mov	ecx, DWORD PTR _lsb$[ebp]
push	ecx
mov	edx, DWORD PTR _idx$[ebp]
push	edx
push	0
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+532]
mov	eax, DWORD PTR [edx+112]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 28
cmp	DWORD PTR _ft_trace_levels[edx], 5
jl	SHORT $LN7@TT_Get_HMe
mov	eax, DWORD PTR _aw$[ebp]
movzx	ecx, WORD PTR [eax]
push	ecx
push	OFFSET $SG9453
call	_FT_Message
add	esp, 8
xor	edx, edx
jne	SHORT $LN8@TT_Get_HMe
mov	eax, 4
imul	ecx, eax, 28
cmp	DWORD PTR _ft_trace_levels[ecx], 5
jl	SHORT $LN3@TT_Get_HMe
mov	edx, DWORD PTR _lsb$[ebp]
movsx	eax, WORD PTR [edx]
push	eax
push	OFFSET $SG9458
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@TT_Get_HMe
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Init_Glyph_Loading PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+512], OFFSET _TT_Access_Glyph_Frame
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+520], OFFSET _TT_Load_Glyph_Header
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+524], OFFSET _TT_Load_Simple_Glyph
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+528], OFFSET _TT_Load_Composite_Glyph
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+516], OFFSET _TT_Forget_Glyph_Frame
pop	ebp
ret	0
ENDP
_TT_RunIns PROC
push	ebp
mov	ebp, esp
sub	esp, 148				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-148]
mov	ecx, 37					
mov	eax, -858993460				
rep stosd
mov	DWORD PTR _ins_counter$[ebp], 0
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+256], 0
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+216]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+218]
cmp	edx, ecx
je	SHORT $LN220@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+592], OFFSET _Current_Ppem_Stretched
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+596], OFFSET _Read_CVT_Stretched
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+600], OFFSET _Write_CVT_Stretched
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+604], OFFSET _Move_CVT_Stretched
jmp	SHORT $LN219@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+592], OFFSET _Current_Ppem
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+596], OFFSET _Read_CVT
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+600], OFFSET _Write_CVT
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+604], OFFSET _Move_CVT
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Funcs
add	esp, 4
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+312]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Round
add	esp, 8
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+356]
mov	ecx, DWORD PTR _exc$[ebp]
mov	dl, BYTE PTR [edx+eax]
mov	BYTE PTR [ecx+368], dl
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 7
jl	SHORT $LN214@TT_RunIns
push	OFFSET $SG13066
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN215@TT_RunIns
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 7
jl	SHORT $LN210@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
mov	ecx, DWORD PTR _opcode_name[eax*4]
push	ecx
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN211@TT_RunIns
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 7
jl	SHORT $LN206@TT_RunIns
push	OFFSET $SG13075
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN207@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
movsx	edx, BYTE PTR _opcode_length[ecx]
mov	DWORD PTR tv143[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR tv143[ebp]
mov	DWORD PTR [eax+372], ecx
cmp	DWORD PTR tv143[ebp], 0
jge	SHORT $LN203@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
add	eax, 1
mov	ecx, DWORD PTR _exc$[ebp]
cmp	eax, DWORD PTR [ecx+364]
jl	SHORT $LN202@TT_RunIns
jmp	$LErrorCodeOverflow_$248
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+356]
movzx	eax, BYTE PTR [edx+eax+1]
mov	ecx, DWORD PTR _exc$[ebp]
imul	eax, DWORD PTR [ecx+372]
mov	edx, 2
sub	edx, eax
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+372], edx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+372]
mov	ecx, DWORD PTR _exc$[ebp]
cmp	edx, DWORD PTR [ecx+364]
jle	SHORT $LN201@TT_RunIns
jmp	$LErrorCodeOverflow_$248
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
movzx	ecx, BYTE PTR _Pop_Push_Count[eax]
sar	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+16]
sub	eax, ecx
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+28], eax
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+28], 0
jge	$LN200@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN199@TT_RunIns
push	OFFSET $SG13082
push	8289					
push	129					
call	_FT_Throw
add	esp, 12					
or	eax, 129				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LErrorLabel_$249
xor	eax, eax
mov	WORD PTR _i$[ebp], ax
jmp	SHORT $LN198@TT_RunIns
mov	cx, WORD PTR _i$[ebp]
add	cx, 1
mov	WORD PTR _i$[ebp], cx
movzx	edx, WORD PTR _i$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+368]
movzx	eax, BYTE PTR _Pop_Push_Count[ecx]
sar	eax, 4
cmp	edx, eax
jge	SHORT $LN196@TT_RunIns
movzx	ecx, WORD PTR _i$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+24]
mov	DWORD PTR [eax+ecx*4], 0
jmp	SHORT $LN197@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+28], 0
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
movzx	ecx, BYTE PTR _Pop_Push_Count[eax]
and	ecx, 15					
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+32], ecx
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [ecx+32]
cmp	eax, DWORD PTR [edx+20]
jbe	SHORT $LN195@TT_RunIns
push	OFFSET $SG13088
push	8306					
push	130					
call	_FT_Throw
add	esp, 12					
or	eax, 130				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LErrorLabel_$249
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 1
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+24]
lea	edx, DWORD PTR [ecx+edx*4]
mov	DWORD PTR _args$20[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	cl, BYTE PTR [eax+368]
mov	BYTE PTR _opcode$19[ebp], cl
movzx	edx, BYTE PTR _opcode$19[ebp]
mov	DWORD PTR tv224[ebp], edx
cmp	DWORD PTR tv224[ebp], 143		
ja	$LN30@TT_RunIns
mov	eax, DWORD PTR tv224[ebp]
jmp	DWORD PTR $LN247@TT_RunIns[eax*4]
movzx	ecx, BYTE PTR _opcode$19[ebp]
and	ecx, 1
shl	ecx, 14					
mov	WORD PTR _AA$18[ebp], cx
movsx	edx, WORD PTR _AA$18[ebp]
xor	edx, 16384				
mov	WORD PTR _BB$17[ebp], dx
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 4
jge	SHORT $LN190@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _AA$18[ebp]
mov	WORD PTR [ecx+294], dx
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _BB$17[ebp]
mov	WORD PTR [eax+296], cx
mov	edx, DWORD PTR _exc$[ebp]
mov	ax, WORD PTR _AA$18[ebp]
mov	WORD PTR [edx+290], ax
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _BB$17[ebp]
mov	WORD PTR [ecx+292], dx
movzx	eax, BYTE PTR _opcode$19[ebp]
and	eax, 2
jne	SHORT $LN188@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	dx, WORD PTR _AA$18[ebp]
mov	WORD PTR [ecx+298], dx
mov	eax, DWORD PTR _exc$[ebp]
mov	cx, WORD PTR _BB$17[ebp]
mov	WORD PTR [eax+300], cx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
add	eax, 294				
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
movzx	eax, WORD PTR [edx+ecx]
push	eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
movzx	eax, WORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SxVTL
add	esp, 20					
movzx	edx, al
test	edx, edx
jne	SHORT $LN186@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+294]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+290], ecx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 298				
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
push	eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
movzx	ecx, WORD PTR [eax+edx]
push	ecx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
movzx	ecx, WORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SxVTL
add	esp, 20					
movzx	eax, al
test	eax, eax
jne	SHORT $LN184@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	cx, WORD PTR [eax+edx]
mov	WORD PTR _S$16[ebp], cx
movsx	edx, WORD PTR _S$16[ebp]
mov	DWORD PTR _Y$14[ebp], edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _S$16[ebp], ax
movsx	ecx, WORD PTR _S$16[ebp]
mov	DWORD PTR _X$15[ebp], ecx
mov	edx, DWORD PTR _exc$[ebp]
add	edx, 294				
push	edx
mov	eax, DWORD PTR _Y$14[ebp]
push	eax
mov	ecx, DWORD PTR _X$15[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Normalize
add	esp, 16					
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+294]
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+290], ecx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+ecx]
mov	WORD PTR _S$13[ebp], ax
movsx	ecx, WORD PTR _S$13[ebp]
mov	DWORD PTR _Y$11[ebp], ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	dx, WORD PTR [ecx+eax]
mov	WORD PTR _S$13[ebp], dx
movsx	eax, WORD PTR _S$13[ebp]
mov	DWORD PTR _X$12[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
add	ecx, 298				
push	ecx
mov	edx, DWORD PTR _Y$11[ebp]
push	edx
mov	eax, DWORD PTR _X$12[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Normalize
add	esp, 16					
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
movsx	eax, WORD PTR [edx+294]
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+ecx], eax
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+296]
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], edx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
movsx	edx, WORD PTR [ecx+298]
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], edx
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _exc$[ebp]
movsx	ecx, WORD PTR [eax+300]
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+294]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+298], edx
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Compute_Funcs
add	esp, 4
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ISECT
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _args$20[ebp]
mov	dx, WORD PTR [ecx+edx]
mov	WORD PTR [eax+284], dx
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$20[ebp]
mov	cx, WORD PTR [eax+ecx]
mov	WORD PTR [edx+286], cx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+288], ax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SZP0
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SZP1
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_SZP2
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SZPS
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jge	SHORT $LN169@TT_RunIns
push	OFFSET $SG13143
push	8462					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN168@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+304], eax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+312], 1
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_To_Grid
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_To_Half_Grid
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+308], eax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_ELSE
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	SHORT $LN162@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 0
jne	SHORT $LN162@TT_RunIns
push	OFFSET $SG13153
push	8482					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	ecx, DWORD PTR _args$20[ebp]
add	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+360], edx
mov	ecx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [ecx+360], 0
jl	SHORT $LN160@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+428], 0
jle	SHORT $LN161@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
sub	ecx, 1
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+436]
mov	ecx, DWORD PTR [eax+ecx+12]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
cmp	eax, DWORD PTR [ecx+8]
jle	SHORT $LN161@TT_RunIns
push	OFFSET $SG13156
push	8482					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+ecx]
mov	DWORD PTR [edx+320], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
mov	DWORD PTR [ecx+324], eax
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+260]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+328], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+32], 0
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _L$10[ebp], edx
mov	eax, 4
shl	eax, 0
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR _L$10[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _L$9[ebp], edx
cmp	DWORD PTR _L$9[ebp], 0
jle	SHORT $LN149@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _L$9[ebp]
cmp	ecx, DWORD PTR [eax+28]
jle	SHORT $LN150@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN148@TT_RunIns
push	OFFSET $SG13175
push	8518					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], 0
jmp	SHORT $LN147@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+28]
sub	eax, DWORD PTR _L$9[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	ecx, 4
imul	ecx, ecx, 0
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [edx+eax*4]
mov	DWORD PTR [esi+ecx], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MINDEX
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ALIGNPTS
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_UTP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_LOOPCALL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_CALL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_FDEF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ENDF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_MDAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_IUP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_SHP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SHC
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SHZ
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_SHPIX
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_IP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MSIRP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_ALIGNRP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+312], 2
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_To_Double_Grid
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MIAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_NPUSHB
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_NPUSHW
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$8[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, WORD PTR [ecx+468]
cmp	DWORD PTR _I$8[ebp], edx
jb	SHORT $LN124@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN123@TT_RunIns
jmp	SHORT $Set_Invalid_Ref$250
jmp	SHORT $LN122@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+472]
mov	eax, DWORD PTR _I$8[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [ecx+eax*4], edx
jmp	$LN193@TT_RunIns
push	OFFSET $SG13208
push	8617					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
mov	DWORD PTR _I$7[ebp], edx
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, WORD PTR [eax+468]
cmp	DWORD PTR _I$7[ebp], ecx
jb	SHORT $LN120@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+561]
test	eax, eax
je	SHORT $LN119@TT_RunIns
jmp	SHORT $Set_Invalid_Ref$250
jmp	SHORT $LN118@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+edx], 0
jmp	SHORT $LN117@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+472]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _I$7[ebp]
mov	edx, DWORD PTR [edx+esi*4]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$6[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _I$6[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN115@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN114@TT_RunIns
jmp	$Set_Invalid_Ref$250
jmp	SHORT $LN113@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	esi, esp
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _I$6[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+600]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$5[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _I$5[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN111@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN110@TT_RunIns
jmp	$Set_Invalid_Ref$250
jmp	SHORT $LN109@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+eax], 0
jmp	SHORT $LN108@TT_RunIns
mov	esi, esp
mov	edx, DWORD PTR _I$5[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+596]
call	edx
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_GC
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SCFS
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_MD
add	esp, 8
jmp	$LN193@TT_RunIns
mov	esi, esp
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+592]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, 4
imul	ecx, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	esi, esp
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+592]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+316], 1
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+316], 0
jmp	$LN193@TT_RunIns
push	OFFSET $SG13243
push	8663					
push	135					
call	_FT_Throw
add	esp, 12					
or	eax, 135				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jge	SHORT $LN223@TT_RunIns
mov	DWORD PTR tv589[ebp], 1
jmp	SHORT $LN224@TT_RunIns
mov	DWORD PTR tv589[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv589[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jg	SHORT $LN225@TT_RunIns
mov	DWORD PTR tv597[ebp], 1
jmp	SHORT $LN226@TT_RunIns
mov	DWORD PTR tv597[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv597[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jle	SHORT $LN227@TT_RunIns
mov	DWORD PTR tv605[ebp], 1
jmp	SHORT $LN228@TT_RunIns
mov	DWORD PTR tv605[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv605[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jl	SHORT $LN229@TT_RunIns
mov	DWORD PTR tv613[ebp], 1
jmp	SHORT $LN230@TT_RunIns
mov	DWORD PTR tv613[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv613[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
jne	SHORT $LN231@TT_RunIns
mov	DWORD PTR tv621[ebp], 1
jmp	SHORT $LN232@TT_RunIns
mov	DWORD PTR tv621[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv621[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+eax]
cmp	eax, DWORD PTR [esi+ecx]
je	SHORT $LN233@TT_RunIns
mov	DWORD PTR tv629[ebp], 1
jmp	SHORT $LN234@TT_RunIns
mov	DWORD PTR tv629[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv629[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	esi, esp
push	0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+568]
call	edx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
and	eax, 127				
cmp	eax, 64					
jne	SHORT $LN235@TT_RunIns
mov	DWORD PTR tv641[ebp], 1
jmp	SHORT $LN236@TT_RunIns
mov	DWORD PTR tv641[ebp], 0
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR tv641[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	esi, esp
push	0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+568]
call	ecx
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
and	eax, 127				
jne	SHORT $LN237@TT_RunIns
mov	DWORD PTR tv653[ebp], 1
jmp	SHORT $LN238@TT_RunIns
mov	DWORD PTR tv653[ebp], 0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR tv653[ebp]
mov	DWORD PTR [ecx+eax], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_IF
add	esp, 8
jmp	$LN193@TT_RunIns
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
je	SHORT $LN239@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
je	SHORT $LN239@TT_RunIns
mov	DWORD PTR tv664[ebp], 1
jmp	SHORT $LN240@TT_RunIns
mov	DWORD PTR tv664[ebp], 0
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv664[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
jne	SHORT $LN241@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
jne	SHORT $LN241@TT_RunIns
mov	DWORD PTR tv673[ebp], 0
jmp	SHORT $LN242@TT_RunIns
mov	DWORD PTR tv673[ebp], 1
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv673[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
jne	SHORT $LN243@TT_RunIns
mov	DWORD PTR tv679[ebp], 1
jmp	SHORT $LN244@TT_RunIns
mov	DWORD PTR tv679[ebp], 0
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR tv679[ebp]
mov	DWORD PTR [ecx+eax], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_DELTAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+332], ax
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 6
jbe	SHORT $LN83@TT_RunIns
push	OFFSET $SG13263
push	8727					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN82@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _args$20[ebp]
mov	ax, WORD PTR [edx+eax]
mov	WORD PTR [ecx+334], ax
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+edx]
mov	ecx, DWORD PTR _args$20[ebp]
add	edx, DWORD PTR [ecx+eax]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, 4
shl	eax, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+edx]
sub	edx, DWORD PTR [esi+eax]
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	SHORT $LN78@TT_RunIns
push	OFFSET $SG13270
push	8739					
push	133					
call	_FT_Throw
add	esp, 12					
or	eax, 133				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LN77@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
push	64					
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_FT_MulDiv_No_Round
add	esp, 12					
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
push	64					
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
push	edx
call	_FT_MulDiv
add	esp, 12					
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [ecx+eax], 0
jge	SHORT $LN245@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
neg	edx
mov	DWORD PTR tv750[ebp], edx
jmp	SHORT $LN246@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR tv750[ebp], eax
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR tv750[ebp]
mov	DWORD PTR [eax+edx], ecx
jmp	$LN193@TT_RunIns
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [ecx+eax]
neg	edx
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
and	ecx, -64				
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+eax], ecx
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
add	eax, 63					
and	eax, -64				
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
mov	esi, esp
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4-152]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+568]
call	eax
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+368]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+eax*4-168]
push	edx
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Round_None
add	esp, 12					
mov	edx, 4
imul	ecx, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	DWORD PTR [edx+ecx], eax
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
mov	DWORD PTR _I$4[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR _I$4[ebp]
cmp	edx, DWORD PTR [ecx+380]
jb	SHORT $LN68@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+561]
test	ecx, ecx
je	SHORT $LN67@TT_RunIns
jmp	$Set_Invalid_Ref$250
jmp	SHORT $LN66@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+260]
push	eax
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+384]
mov	ecx, DWORD PTR _I$4[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_DELTAP
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_DELTAC
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [edx+ecx]
push	eax
push	16384					
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_SetSuperRound
add	esp, 12					
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+312], 6
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+568], OFFSET _Round_Super
jmp	$LN193@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [eax+edx]
push	ecx
push	11585					
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_SetSuperRound
add	esp, 12					
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 7
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_Super_45
jmp	$LN193@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
je	$LN60@TT_RunIns
mov	ecx, 4
imul	edx, ecx, 0
mov	eax, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [eax+edx], 0
jne	SHORT $LN59@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [ecx+28], 0
jne	SHORT $LN59@TT_RunIns
push	OFFSET $SG13298
push	8800					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
mov	edx, DWORD PTR _args$20[ebp]
add	eax, DWORD PTR [edx+ecx]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], eax
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+360], 0
jl	SHORT $LN57@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+428], 0
jle	SHORT $LN58@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+428]
sub	edx, 1
shl	edx, 4
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+436]
mov	edx, DWORD PTR [ecx+edx+12]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
cmp	ecx, DWORD PTR [edx+8]
jle	SHORT $LN58@TT_RunIns
push	OFFSET $SG13301
push	8800					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
mov	eax, DWORD PTR _exc$[ebp]
mov	BYTE PTR [eax+376], 0
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	$LN55@TT_RunIns
mov	eax, 4
imul	ecx, eax, 0
mov	edx, DWORD PTR _args$20[ebp]
cmp	DWORD PTR [edx+ecx], 0
jne	SHORT $LN54@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+28], 0
jne	SHORT $LN54@TT_RunIns
push	OFFSET $SG13305
push	8804					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, 4
imul	eax, edx, 0
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	ecx, DWORD PTR _args$20[ebp]
add	edx, DWORD PTR [ecx+eax]
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+360], edx
mov	ecx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [ecx+360], 0
jl	SHORT $LN52@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+428], 0
jle	SHORT $LN53@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
sub	ecx, 1
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+436]
mov	ecx, DWORD PTR [eax+ecx+12]
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+360]
cmp	eax, DWORD PTR [ecx+8]
jle	SHORT $LN53@TT_RunIns
push	OFFSET $SG13308
push	8804					
push	132					
call	_FT_Throw
add	esp, 12					
or	eax, 132				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
mov	BYTE PTR [edx+376], 0
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 5
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_None
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+312], 4
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+568], OFFSET _Round_Up_To_Grid
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	DWORD PTR [eax+312], 3
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+568], OFFSET _Round_Down_To_Grid
jmp	$LN193@TT_RunIns
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_FLIPPT
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_FLIPRGON
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_FLIPRGOFF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_SCANCTRL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SDPVTL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_GETINFO
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_IDEF
add	esp, 8
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_ROLL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [eax+edx]
cmp	edx, DWORD PTR [esi+ecx]
jle	SHORT $LN36@TT_RunIns
mov	eax, 4
shl	eax, 0
mov	ecx, 4
imul	edx, ecx, 0
mov	ecx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	eax, DWORD PTR [esi+eax]
mov	DWORD PTR [ecx+edx], eax
jmp	$LN193@TT_RunIns
mov	ecx, 4
shl	ecx, 0
mov	edx, 4
imul	eax, edx, 0
mov	edx, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	ecx, DWORD PTR [edx+ecx]
cmp	ecx, DWORD PTR [esi+eax]
jge	SHORT $LN34@TT_RunIns
mov	edx, 4
shl	edx, 0
mov	eax, 4
imul	ecx, eax, 0
mov	eax, DWORD PTR _args$20[ebp]
mov	esi, DWORD PTR _args$20[ebp]
mov	edx, DWORD PTR [esi+edx]
mov	DWORD PTR [eax+ecx], edx
jmp	$LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_SCANTYPE
add	esp, 8
jmp	$LN193@TT_RunIns
mov	edx, DWORD PTR _args$20[ebp]
push	edx
mov	eax, DWORD PTR _exc$[ebp]
push	eax
call	_Ins_INSTCTRL
add	esp, 8
jmp	$LN193@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_UNKNOWN
add	esp, 8
jmp	$LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 224				
jl	SHORT $LN29@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_MIRP
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 192				
jl	SHORT $LN27@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_MDRP
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 184				
jl	SHORT $LN25@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_PUSHW
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
movzx	eax, BYTE PTR _opcode$19[ebp]
cmp	eax, 176				
jl	SHORT $LN23@TT_RunIns
mov	ecx, DWORD PTR _args$20[ebp]
push	ecx
mov	edx, DWORD PTR _exc$[ebp]
push	edx
call	_Ins_PUSHB
add	esp, 8
jmp	SHORT $LN193@TT_RunIns
mov	eax, DWORD PTR _args$20[ebp]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_UNKNOWN
add	esp, 8
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+12], 0
je	$LN21@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR tv980[ebp], ecx
cmp	DWORD PTR tv980[ebp], 128		
je	SHORT $LN18@TT_RunIns
jmp	$LN11@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+416]
mov	DWORD PTR _def$3[ebp], eax
mov	ecx, DWORD PTR _exc$[ebp]
imul	edx, DWORD PTR [ecx+408], 24
add	edx, DWORD PTR _def$3[ebp]
mov	DWORD PTR _limit$2[ebp], edx
jmp	SHORT $LN17@TT_RunIns
mov	eax, DWORD PTR _def$3[ebp]
add	eax, 24					
mov	DWORD PTR _def$3[ebp], eax
mov	ecx, DWORD PTR _def$3[ebp]
cmp	ecx, DWORD PTR _limit$2[ebp]
jae	$LN15@TT_RunIns
mov	edx, DWORD PTR _def$3[ebp]
movzx	eax, BYTE PTR [edx+16]
test	eax, eax
je	$LN14@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
movzx	edx, BYTE PTR [ecx+368]
mov	eax, DWORD PTR _def$3[ebp]
movzx	ecx, BYTE PTR [eax+12]
cmp	edx, ecx
jne	$LN14@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [edx+428]
cmp	ecx, DWORD PTR [eax+432]
jl	SHORT $LN13@TT_RunIns
push	OFFSET $SG13357
push	8927					
push	134					
call	_FT_Throw
add	esp, 12					
or	eax, 134				
mov	edx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [edx+12], eax
jmp	$LErrorLabel_$249
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+428]
shl	ecx, 4
mov	edx, DWORD PTR _exc$[ebp]
add	ecx, DWORD PTR [edx+436]
mov	DWORD PTR _callrec$1[ebp], ecx
mov	eax, DWORD PTR _callrec$1[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+352]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+360]
add	ecx, 1
mov	edx, DWORD PTR _callrec$1[ebp]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _callrec$1[ebp]
mov	DWORD PTR [eax+8], 1
mov	ecx, DWORD PTR _callrec$1[ebp]
mov	edx, DWORD PTR _def$3[ebp]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _def$3[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _def$3[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _exc$[ebp]
push	ecx
call	_Ins_Goto_CodeRange
add	esp, 12					
movzx	edx, al
cmp	edx, 1
jne	SHORT $LN12@TT_RunIns
jmp	$LErrorLabel_$249
jmp	$LSuiteLabel_$251
jmp	$LN16@TT_RunIns
push	OFFSET $SG13360
push	8946					
push	128					
call	_FT_Throw
add	esp, 12					
or	eax, 128				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	$LErrorLabel_$249
jmp	$LErrorLabel_$249
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR [eax+32]
mov	DWORD PTR [edx+16], ecx
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+376]
test	eax, eax
je	SHORT $LN10@TT_RunIns
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+360]
mov	eax, DWORD PTR _exc$[ebp]
add	edx, DWORD PTR [eax+372]
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+360], edx
mov	edx, DWORD PTR _ins_counter$[ebp]
add	edx, 1
mov	DWORD PTR _ins_counter$[ebp], edx
cmp	DWORD PTR _ins_counter$[ebp], 1000000	
jle	SHORT $LSuiteLabel_$251
push	OFFSET $SG13364
push	8972					
push	139					
call	_FT_Throw
add	esp, 12					
or	eax, 139				
jmp	$LN221@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [eax+360]
cmp	edx, DWORD PTR [ecx+364]
jl	SHORT $LN217@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [eax+428], 0
jle	SHORT $LN7@TT_RunIns
push	OFFSET $SG13367
push	8979					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
jmp	SHORT $LErrorLabel_$249
jmp	SHORT $LN217@TT_RunIns
jmp	SHORT $LNo_Error_$252
mov	edx, DWORD PTR _exc$[ebp]
movzx	eax, BYTE PTR [edx+488]
test	eax, eax
je	$LN218@TT_RunIns
xor	eax, eax
jmp	$LN221@TT_RunIns
push	OFFSET $SG13370
push	8996					
push	131					
call	_FT_Throw
add	esp, 12					
or	eax, 131				
mov	ecx, DWORD PTR _exc$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+12], 0
je	SHORT $LN5@TT_RunIns
mov	eax, DWORD PTR _exc$[ebp]
movzx	ecx, BYTE PTR [eax+488]
test	ecx, ecx
jne	SHORT $LN5@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
cmp	DWORD PTR [edx+352], 3
jne	SHORT $LN5@TT_RunIns
mov	eax, 4
imul	ecx, eax, 29
cmp	DWORD PTR _ft_trace_levels[ecx], 1
jl	SHORT $LN3@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
push	OFFSET $SG13376
call	_FT_Message
add	esp, 8
xor	ecx, ecx
jne	SHORT $LN4@TT_RunIns
mov	edx, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [eax+300], -1
mov	ecx, DWORD PTR _exc$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [edx+304], -1
mov	eax, DWORD PTR _exc$[ebp]
mov	eax, DWORD PTR [eax+12]
pop	edi
pop	esi
add	esp, 148				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN192@TT_RunIns
DD	$LN187@TT_RunIns
DD	$LN187@TT_RunIns
DD	$LN185@TT_RunIns
DD	$LN185@TT_RunIns
DD	$LN183@TT_RunIns
DD	$LN182@TT_RunIns
DD	$LN181@TT_RunIns
DD	$LN180@TT_RunIns
DD	$LN179@TT_RunIns
DD	$LN178@TT_RunIns
DD	$LN177@TT_RunIns
DD	$LN176@TT_RunIns
DD	$LN175@TT_RunIns
DD	$LN174@TT_RunIns
DD	$LN173@TT_RunIns
DD	$LN172@TT_RunIns
DD	$LN171@TT_RunIns
DD	$LN170@TT_RunIns
DD	$LN167@TT_RunIns
DD	$LN166@TT_RunIns
DD	$LN165@TT_RunIns
DD	$LN164@TT_RunIns
DD	$LN163@TT_RunIns
DD	$LN159@TT_RunIns
DD	$LN158@TT_RunIns
DD	$LN157@TT_RunIns
DD	$LN156@TT_RunIns
DD	$LN155@TT_RunIns
DD	$LN154@TT_RunIns
DD	$LN153@TT_RunIns
DD	$LN152@TT_RunIns
DD	$LN151@TT_RunIns
DD	$LN146@TT_RunIns
DD	$LN145@TT_RunIns
DD	$LN144@TT_RunIns
DD	$LN143@TT_RunIns
DD	$LN142@TT_RunIns
DD	$LN141@TT_RunIns
DD	$LN140@TT_RunIns
DD	$LN139@TT_RunIns
DD	$LN138@TT_RunIns
DD	$LN138@TT_RunIns
DD	$LN137@TT_RunIns
DD	$LN137@TT_RunIns
DD	$LN136@TT_RunIns
DD	$LN136@TT_RunIns
DD	$LN135@TT_RunIns
DD	$LN135@TT_RunIns
DD	$LN134@TT_RunIns
DD	$LN134@TT_RunIns
DD	$LN133@TT_RunIns
DD	$LN132@TT_RunIns
DD	$LN131@TT_RunIns
DD	$LN131@TT_RunIns
DD	$LN130@TT_RunIns
DD	$LN129@TT_RunIns
DD	$LN128@TT_RunIns
DD	$LN128@TT_RunIns
DD	$LN127@TT_RunIns
DD	$LN126@TT_RunIns
DD	$LN125@TT_RunIns
DD	$LN121@TT_RunIns
DD	$LN116@TT_RunIns
DD	$LN112@TT_RunIns
DD	$LN107@TT_RunIns
DD	$LN107@TT_RunIns
DD	$LN106@TT_RunIns
DD	$LN105@TT_RunIns
DD	$LN105@TT_RunIns
DD	$LN104@TT_RunIns
DD	$LN103@TT_RunIns
DD	$LN102@TT_RunIns
DD	$LN101@TT_RunIns
DD	$LN100@TT_RunIns
DD	$LN99@TT_RunIns
DD	$LN98@TT_RunIns
DD	$LN97@TT_RunIns
DD	$LN96@TT_RunIns
DD	$LN95@TT_RunIns
DD	$LN94@TT_RunIns
DD	$LN93@TT_RunIns
DD	$LN92@TT_RunIns
DD	$LN91@TT_RunIns
DD	$LN90@TT_RunIns
DD	$LN89@TT_RunIns
DD	$LN88@TT_RunIns
DD	$LN87@TT_RunIns
DD	$LN86@TT_RunIns
DD	$LN85@TT_RunIns
DD	$LN84@TT_RunIns
DD	$LN81@TT_RunIns
DD	$LN80@TT_RunIns
DD	$LN79@TT_RunIns
DD	$LN76@TT_RunIns
DD	$LN75@TT_RunIns
DD	$LN74@TT_RunIns
DD	$LN73@TT_RunIns
DD	$LN72@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN71@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN70@TT_RunIns
DD	$LN69@TT_RunIns
DD	$LN65@TT_RunIns
DD	$LN65@TT_RunIns
DD	$LN64@TT_RunIns
DD	$LN64@TT_RunIns
DD	$LN64@TT_RunIns
DD	$LN63@TT_RunIns
DD	$LN62@TT_RunIns
DD	$LN61@TT_RunIns
DD	$LN56@TT_RunIns
DD	$LN51@TT_RunIns
DD	$LN50@TT_RunIns
DD	$LN49@TT_RunIns
DD	$LN48@TT_RunIns
DD	$LN47@TT_RunIns
DD	$LN47@TT_RunIns
DD	$LN46@TT_RunIns
DD	$LN45@TT_RunIns
DD	$LN44@TT_RunIns
DD	$LN43@TT_RunIns
DD	$LN43@TT_RunIns
DD	$LN42@TT_RunIns
DD	$LN41@TT_RunIns
DD	$LN41@TT_RunIns
DD	$LN40@TT_RunIns
DD	$LN39@TT_RunIns
DD	$LN38@TT_RunIns
DD	$LN37@TT_RunIns
DD	$LN35@TT_RunIns
DD	$LN33@TT_RunIns
DD	$LN32@TT_RunIns
DD	$LN31@TT_RunIns
ENDP
_TT_Run_Context PROC
push	ebp
mov	ebp, esp
push	esi
push	edi
push	0
push	3
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Goto_CodeRange
add	esp, 12					
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	ecx, 1
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+344], cx
mov	eax, 1
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+346], ax
mov	edx, 1
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+348], dx
mov	ecx, 16384				
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+294], cx
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+296], ax
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+294]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+298], eax
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+294]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+290], eax
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+312], 1
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+304], 1
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+428], 0
mov	al, BYTE PTR _debug$[ebp]
mov	BYTE PTR _debug$[ebp], al
mov	esi, esp
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+652]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
pop	edi
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Save_Context PROC
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+396]
mov	DWORD PTR [eax+116], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+408]
mov	DWORD PTR [eax+128], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+420]
mov	DWORD PTR [eax+140], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+424]
mov	DWORD PTR [eax+144], edx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN3@TT_Save_Co
mov	eax, DWORD PTR _i$[ebp]
add	eax, 1
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _i$[ebp], 3
jge	SHORT $LN4@TT_Save_Co
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR [edx+ecx*8+444]
mov	ecx, DWORD PTR [edx+ecx*8+448]
mov	edx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _size$[ebp]
mov	DWORD PTR [esi+edx*8+148], eax
mov	DWORD PTR [esi+edx*8+152], ecx
jmp	SHORT $LN2@TT_Save_Co
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_Load_Context PROC
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _face$[ebp]
add	edx, 260				
mov	DWORD PTR _maxp$[ebp], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+4], ecx
cmp	DWORD PTR _size$[ebp], 0
je	$LN6@TT_Load_Co
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+116]
mov	DWORD PTR [edx+396], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+120]
mov	DWORD PTR [edx+400], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+128]
mov	DWORD PTR [edx+408], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+132]
mov	DWORD PTR [edx+412], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+124]
mov	DWORD PTR [edx+404], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+136]
mov	DWORD PTR [edx+416], ecx
mov	esi, DWORD PTR _size$[ebp]
add	esi, 72					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 244				
mov	ecx, 10					
rep movsd
mov	esi, DWORD PTR _size$[ebp]
add	esi, 44					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 216				
mov	ecx, 7
rep movsd
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+140]
mov	DWORD PTR [edx+420], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+144]
mov	DWORD PTR [edx+424], ecx
mov	DWORD PTR _i$[ebp], 0
jmp	SHORT $LN5@TT_Load_Co
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
cmp	DWORD PTR _i$[ebp], 3
jge	SHORT $LN3@TT_Load_Co
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+eax*8+148]
mov	eax, DWORD PTR [ecx+eax*8+152]
mov	ecx, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _exec$[ebp]
mov	DWORD PTR [esi+ecx*8+444], edx
mov	DWORD PTR [esi+ecx*8+448], eax
jmp	SHORT $LN4@TT_Load_Co
mov	esi, DWORD PTR _size$[ebp]
add	esi, 172				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 284				
mov	ecx, 17					
rep movsd
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+240]
mov	DWORD PTR [edx+380], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+244]
mov	DWORD PTR [edx+384], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	cx, WORD PTR [eax+248]
mov	WORD PTR [edx+468], cx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax+252]
mov	DWORD PTR [edx+472], ecx
mov	esi, DWORD PTR _size$[ebp]
add	esi, 256				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 180				
mov	ecx, 9
rep movsd
push	36					
push	0
mov	edx, DWORD PTR _exec$[ebp]
add	edx, 36					
push	edx
call	_memset
add	esp, 12					
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 36					
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR _tmp$[ebp], ecx
mov	edx, DWORD PTR _maxp$[ebp]
movzx	eax, WORD PTR [edx+24]
add	eax, 32					
push	eax
mov	ecx, DWORD PTR _exec$[ebp]
add	ecx, 24					
push	ecx
push	4
lea	edx, DWORD PTR _tmp$[ebp]
push	edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _tmp$[ebp]
mov	DWORD PTR [edx+20], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN2@TT_Load_Co
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN7@TT_Load_Co
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+388]
mov	DWORD PTR _tmp$[ebp], edx
mov	eax, DWORD PTR _maxp$[ebp]
movzx	ecx, WORD PTR [eax+26]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
add	edx, 392				
push	edx
push	1
lea	eax, DWORD PTR _tmp$[ebp]
push	eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	_Update_Max
add	esp, 20					
mov	DWORD PTR _error$[ebp], eax
movzx	eax, WORD PTR _tmp$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+388], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@TT_Load_Co
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN7@TT_Load_Co
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+152], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+154], cx
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 72					
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 108				
mov	ecx, 9
rep movsd
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 144				
mov	edi, DWORD PTR _exec$[ebp]
add	edi, 36					
mov	ecx, 9
rep movsd
mov	eax, DWORD PTR _exec$[ebp]
mov	BYTE PTR [eax+488], 0
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@TT_Load_Co
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN10@TT_Load_Co
DD	-12					
DD	4
DD	$LN9@TT_Load_Co
DB	116					
DB	109					
DB	112					
DB	0
ENDP
_TT_Done_Context PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$[ebp], ecx
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+440], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+442], cx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+24]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+24], 0
xor	ecx, ecx
jne	SHORT $LN12@TT_Done_Co
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+20], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR [eax+436]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+436], 0
xor	ecx, ecx
jne	SHORT $LN9@TT_Done_Co
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+432], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+428], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	edx, DWORD PTR [ecx+392]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+392], 0
xor	edx, edx
jne	SHORT $LN6@TT_Done_Co
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+388], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _exec$[ebp]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	DWORD PTR _exec$[ebp], 0
xor	edx, edx
jne	SHORT $LN3@TT_Done_Co
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_TT_New_Context PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
cmp	DWORD PTR _driver$[ebp], 0
jne	SHORT $LN4@TT_New_Con
jmp	SHORT $Fail$10
mov	eax, DWORD PTR _driver$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _memory$[ebp], ecx
mov	edx, DWORD PTR _driver$[ebp]
cmp	DWORD PTR [edx+28], 0
jne	SHORT $LN3@TT_New_Con
lea	eax, DWORD PTR _error$2[ebp]
push	eax
push	612					
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_alloc
add	esp, 12					
mov	DWORD PTR _exec$1[ebp], eax
cmp	DWORD PTR _error$2[ebp], 0
je	SHORT $LN2@TT_New_Con
jmp	SHORT $Fail$10
mov	edx, DWORD PTR _memory$[ebp]
push	edx
mov	eax, DWORD PTR _exec$1[ebp]
push	eax
call	_Init_Context
add	esp, 8
mov	DWORD PTR _error$2[ebp], eax
cmp	DWORD PTR _error$2[ebp], 0
je	SHORT $LN1@TT_New_Con
jmp	SHORT $Fail$10
mov	ecx, DWORD PTR _driver$[ebp]
mov	edx, DWORD PTR _exec$1[ebp]
mov	DWORD PTR [ecx+28], edx
mov	eax, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [eax+28]
jmp	SHORT $LN5@TT_New_Con
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@TT_New_Con
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN8@TT_New_Con
DD	-12					
DD	4
DD	$LN7@TT_New_Con
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_Update_Max PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR __pbuff$[ebp]
mov	DWORD PTR _pbuff$[ebp], eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
cmp	edx, DWORD PTR _new_max$[ebp]
jae	SHORT $LN2@Update_Max
lea	eax, DWORD PTR _error$[ebp]
push	eax
mov	ecx, DWORD PTR _pbuff$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _new_max$[ebp]
imul	eax, DWORD PTR _multiplier$[ebp]
push	eax
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
imul	edx, DWORD PTR _multiplier$[ebp]
push	edx
push	1
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _pbuff$[ebp]
mov	DWORD PTR [ecx], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN1@Update_Max
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN3@Update_Max
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR _new_max$[ebp]
mov	DWORD PTR [edx], eax
xor	eax, eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@Update_Max
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	2
DD	1
DD	$LN6@Update_Max
DD	-8					
DD	4
DD	$LN5@Update_Max
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_TT_Clear_CodeRange PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _range$[ebp], 1
jl	SHORT $LN1@TT_Clear_C
cmp	DWORD PTR _range$[ebp], 3
jle	SHORT $LN4@TT_Clear_C
push	OFFSET $SG10967
push	358					
push	OFFSET $SG10968
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@TT_Clear_C
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+ecx*8+436], 0
mov	eax, DWORD PTR _range$[ebp]
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+eax*8+440], 0
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Set_CodeRange PROC
push	ebp
mov	ebp, esp
cmp	DWORD PTR _range$[ebp], 1
jl	SHORT $LN1@TT_Set_Cod
cmp	DWORD PTR _range$[ebp], 3
jle	SHORT $LN4@TT_Set_Cod
push	OFFSET $SG10954
push	333					
push	OFFSET $SG10955
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN5@TT_Set_Cod
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _base$[ebp]
mov	DWORD PTR [edx+ecx*8+436], eax
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _length$[ebp]
mov	DWORD PTR [edx+ecx*8+440], eax
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_TT_Goto_CodeRange PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR _range$[ebp], 1
jl	SHORT $LN9@TT_Goto_Co
cmp	DWORD PTR _range$[ebp], 3
jle	SHORT $LN12@TT_Goto_Co
push	OFFSET $SG10924
push	290					
push	OFFSET $SG10925
call	_FT_Panic
add	esp, 12					
xor	eax, eax
jne	SHORT $LN13@TT_Goto_Co
mov	ecx, DWORD PTR _range$[ebp]
mov	edx, DWORD PTR _exec$[ebp]
lea	eax, DWORD PTR [edx+ecx*8+436]
mov	DWORD PTR _coderange$[ebp], eax
mov	ecx, DWORD PTR _coderange$[ebp]
cmp	DWORD PTR [ecx], 0
jne	SHORT $LN7@TT_Goto_Co
push	OFFSET $SG10931
push	294					
push	OFFSET $SG10932
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN8@TT_Goto_Co
mov	eax, DWORD PTR _coderange$[ebp]
mov	ecx, DWORD PTR _IP$[ebp]
cmp	ecx, DWORD PTR [eax+4]
jbe	SHORT $LN3@TT_Goto_Co
push	OFFSET $SG10938
push	300					
push	OFFSET $SG10939
call	_FT_Panic
add	esp, 12					
xor	edx, edx
jne	SHORT $LN4@TT_Goto_Co
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _coderange$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax+356], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _coderange$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+364], edx
mov	eax, DWORD PTR _exec$[ebp]
mov	ecx, DWORD PTR _IP$[ebp]
mov	DWORD PTR [eax+360], ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	eax, DWORD PTR _range$[ebp]
mov	DWORD PTR [edx+352], eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_slot_init PROC
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _slot$[ebp]
mov	ecx, DWORD PTR [eax+156]
mov	edx, DWORD PTR [ecx]
push	edx
call	_FT_GlyphLoader_CreateExtra
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
_tt_driver_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttdriver$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
cmp	DWORD PTR [ecx+28], 0
je	SHORT $LN2@tt_driver_
mov	edx, DWORD PTR _driver$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
call	_TT_Done_Context
add	esp, 4
mov	ecx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [ecx+28], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_driver_init PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttdriver$[ebp]
mov	DWORD PTR _driver$[ebp], eax
mov	ecx, DWORD PTR _driver$[ebp]
push	ecx
call	_TT_New_Context
add	esp, 4
test	eax, eax
jne	SHORT $LN1@tt_driver_
push	OFFSET $SG10846
push	1264					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	SHORT $LN2@tt_driver_
mov	edx, DWORD PTR _driver$[ebp]
mov	DWORD PTR [edx+68], 35			
xor	eax, eax
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_reset PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
mov	BYTE PTR [eax+108], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _face$[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
add	eax, 44					
mov	DWORD PTR _metrics$[ebp], eax
mov	esi, DWORD PTR _size$[ebp]
add	esi, 12					
mov	ecx, 7
mov	edi, DWORD PTR _metrics$[ebp]
rep movsd
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx]
cmp	edx, 1
jl	SHORT $LN5@tt_size_re
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
cmp	ecx, 1
jge	SHORT $LN6@tt_size_re
push	OFFSET $SG10827
push	1187					
push	151					
call	_FT_Throw
add	esp, 12					
or	eax, 151				
jmp	$LN7@tt_size_re
mov	edx, DWORD PTR _face$[ebp]
movzx	eax, WORD PTR [edx+176]
and	eax, 8
je	$LN4@tt_size_re
mov	ecx, DWORD PTR _face$[ebp]
movzx	edx, WORD PTR [ecx+68]
push	edx
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax]
shl	ecx, 6
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _face$[ebp]
movzx	ecx, WORD PTR [eax+68]
push	ecx
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx+2]
shl	eax, 6
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+70]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+72]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+74]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+20], eax
mov	edx, DWORD PTR _metrics$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
movsx	edx, WORD PTR [ecx+76]
push	edx
call	_FT_MulFix_i386
add	esp, 8
add	eax, 32					
and	eax, -64				
mov	ecx, DWORD PTR _metrics$[ebp]
mov	DWORD PTR [ecx+24], eax
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx]
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx+2]
cmp	eax, edx
jl	SHORT $LN3@tt_size_re
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+88], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	dx, WORD PTR [ecx]
mov	WORD PTR [eax+80], dx
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+72], 65536		
mov	ecx, DWORD PTR _metrics$[ebp]
movzx	edx, WORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
push	ecx
call	_FT_DivFix
add	esp, 8
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+76], eax
jmp	SHORT $LN2@tt_size_re
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+88], edx
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _metrics$[ebp]
mov	dx, WORD PTR [ecx+2]
mov	WORD PTR [eax+80], dx
mov	eax, DWORD PTR _metrics$[ebp]
movzx	ecx, WORD PTR [eax+2]
push	ecx
mov	edx, DWORD PTR _metrics$[ebp]
movzx	eax, WORD PTR [edx]
push	eax
call	_FT_DivFix
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+72], eax
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+76], 65536		
mov	eax, DWORD PTR _size$[ebp]
mov	DWORD PTR [eax+304], -1
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@tt_size_re
mov	ecx, DWORD PTR _size$[ebp]
mov	BYTE PTR [ecx+108], 1
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_ready_bytecode PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+300], 0
jge	SHORT $LN13@tt_size_re
movzx	ecx, BYTE PTR _pedantic$[ebp]
push	ecx
mov	edx, DWORD PTR _size$[ebp]
push	edx
call	_tt_size_init_bytecode
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN11@tt_size_re
mov	eax, DWORD PTR _size$[ebp]
cmp	DWORD PTR [eax+300], 0
je	SHORT $LN12@tt_size_re
jmp	$Exit$16
mov	ecx, DWORD PTR _size$[ebp]
cmp	DWORD PTR [ecx+304], 0
jge	$Exit$16
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR _face$1[ebp], eax
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN9@tt_size_re
mov	ecx, DWORD PTR _i$2[ebp]
add	ecx, 1
mov	DWORD PTR _i$2[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR _i$2[ebp]
cmp	eax, DWORD PTR [edx+240]
jae	SHORT $LN7@tt_size_re
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+88]
push	edx
mov	eax, DWORD PTR _face$1[ebp]
mov	ecx, DWORD PTR [eax+648]
mov	edx, DWORD PTR _i$2[ebp]
movsx	eax, WORD PTR [ecx+edx*2]
push	eax
call	_FT_MulFix_i386
add	esp, 8
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+244]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [edx+ecx*4], eax
jmp	SHORT $LN8@tt_size_re
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN6@tt_size_re
mov	edx, DWORD PTR _i$2[ebp]
add	edx, 1
mov	DWORD PTR _i$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, WORD PTR [eax+264]
cmp	DWORD PTR _i$2[ebp], ecx
jae	SHORT $LN4@tt_size_re
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+268]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8], 0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+268]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8+4], 0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+272]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8], 0
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+272]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*8+4], 0
jmp	SHORT $LN5@tt_size_re
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN3@tt_size_re
mov	edx, DWORD PTR _i$2[ebp]
add	edx, 1
mov	DWORD PTR _i$2[ebp], edx
mov	eax, DWORD PTR _size$[ebp]
movzx	ecx, WORD PTR [eax+248]
cmp	DWORD PTR _i$2[ebp], ecx
jae	SHORT $LN1@tt_size_re
mov	edx, DWORD PTR _size$[ebp]
mov	eax, DWORD PTR [edx+252]
mov	ecx, DWORD PTR _i$2[ebp]
mov	DWORD PTR [eax+ecx*4], 0
jmp	SHORT $LN2@tt_size_re
mov	edi, DWORD PTR _size$[ebp]
add	edi, 172				
mov	ecx, 17					
mov	esi, OFFSET _tt_default_graphics_state
rep movsd
movzx	edx, BYTE PTR _pedantic$[ebp]
push	edx
mov	eax, DWORD PTR _size$[ebp]
push	eax
call	_tt_size_run_prep
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_run_prep PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
push	edi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN11@tt_size_ru
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+296]
mov	DWORD PTR _exec$[ebp], edx
jmp	SHORT $LN10@tt_size_ru
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _exec$[ebp], edx
cmp	DWORD PTR _exec$[ebp], 0
jne	SHORT $LN9@tt_size_ru
push	OFFSET $SG10710
push	855					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Load_Context
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@tt_size_ru
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+428], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	BYTE PTR [edx+488], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	cl, BYTE PTR _pedantic$[ebp]
mov	BYTE PTR [eax+561], cl
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+636]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+640]
push	edx
push	2
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Set_CodeRange
add	esp, 16					
push	3
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
call	_TT_Clear_CodeRange
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+636], 0
jbe	SHORT $LN7@tt_size_ru
push	0
push	2
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Goto_CodeRange
add	esp, 12					
mov	ecx, DWORD PTR _size$[ebp]
movzx	edx, BYTE PTR [ecx+292]
test	edx, edx
jne	SHORT $LN6@tt_size_ru
mov	eax, 4
imul	ecx, eax, 30
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN4@tt_size_ru
push	OFFSET $SG10718
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN5@tt_size_ru
mov	esi, esp
mov	eax, DWORD PTR _exec$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+652]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN1@tt_size_ru
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+304], ecx
mov	edx, 16384				
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+290], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+292], cx
mov	eax, 16384				
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+294], ax
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+296], dx
mov	ecx, 16384				
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+298], cx
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+300], ax
xor	edx, edx
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+284], dx
xor	ecx, ecx
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+286], cx
xor	eax, eax
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+288], ax
mov	edx, 1
mov	eax, DWORD PTR _exec$[ebp]
mov	WORD PTR [eax+344], dx
mov	ecx, 1
mov	edx, DWORD PTR _exec$[ebp]
mov	WORD PTR [edx+346], cx
mov	eax, 1
mov	ecx, DWORD PTR _exec$[ebp]
mov	WORD PTR [ecx+348], ax
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+304], 1
mov	esi, DWORD PTR _exec$[ebp]
add	esi, 284				
mov	edi, DWORD PTR _size$[ebp]
add	edi, 172				
mov	ecx, 17					
rep movsd
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
call	_TT_Save_Context
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
pop	edi
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_run_fpgm PROC
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _face$[ebp], ecx
mov	edx, DWORD PTR _size$[ebp]
movzx	eax, BYTE PTR [edx+292]
test	eax, eax
je	SHORT $LN11@tt_size_ru
mov	ecx, DWORD PTR _size$[ebp]
mov	edx, DWORD PTR [ecx+296]
mov	DWORD PTR _exec$[ebp], edx
jmp	SHORT $LN10@tt_size_ru
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+96]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR _exec$[ebp], edx
cmp	DWORD PTR _exec$[ebp], 0
jne	SHORT $LN9@tt_size_ru
push	OFFSET $SG10684
push	761					
push	153					
call	_FT_Throw
add	esp, 12					
or	eax, 153				
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _size$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Load_Context
add	esp, 12					
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN8@tt_size_ru
mov	eax, DWORD PTR _error$[ebp]
jmp	$LN12@tt_size_ru
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+428], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [edx+476], 64			
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+480], 0
mov	ecx, DWORD PTR _exec$[ebp]
mov	DWORD PTR [ecx+484], 0
mov	edx, DWORD PTR _exec$[ebp]
mov	BYTE PTR [edx+488], 0
mov	eax, DWORD PTR _exec$[ebp]
mov	DWORD PTR [eax+564], 16384		
mov	ecx, DWORD PTR _exec$[ebp]
mov	dl, BYTE PTR _pedantic$[ebp]
mov	BYTE PTR [ecx+561], dl
mov	eax, DWORD PTR _exec$[ebp]
add	eax, 216				
mov	DWORD PTR _metrics$2[ebp], eax
mov	ecx, DWORD PTR _exec$[ebp]
add	ecx, 244				
mov	DWORD PTR _tt_metrics$1[ebp], ecx
xor	edx, edx
mov	eax, DWORD PTR _metrics$2[ebp]
mov	WORD PTR [eax], dx
xor	ecx, ecx
mov	edx, DWORD PTR _metrics$2[ebp]
mov	WORD PTR [edx+2], cx
mov	eax, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _metrics$2[ebp]
mov	DWORD PTR [ecx+8], 0
xor	edx, edx
mov	eax, DWORD PTR _tt_metrics$1[ebp]
mov	WORD PTR [eax+8], dx
mov	ecx, DWORD PTR _tt_metrics$1[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _tt_metrics$1[ebp]
mov	DWORD PTR [edx+12], 65536		
mov	eax, DWORD PTR _face$[ebp]
mov	ecx, DWORD PTR [eax+628]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+632]
push	eax
push	1
mov	ecx, DWORD PTR _exec$[ebp]
push	ecx
call	_TT_Set_CodeRange
add	esp, 16					
push	2
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Clear_CodeRange
add	esp, 8
push	3
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Clear_CodeRange
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+628], 0
jbe	SHORT $LN7@tt_size_ru
push	0
push	1
mov	edx, DWORD PTR _exec$[ebp]
push	edx
call	_TT_Goto_CodeRange
add	esp, 12					
mov	eax, 4
imul	ecx, eax, 30
cmp	DWORD PTR _ft_trace_levels[ecx], 4
jl	SHORT $LN5@tt_size_ru
push	OFFSET $SG10693
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN6@tt_size_ru
mov	esi, esp
mov	eax, DWORD PTR _exec$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+652]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $LN2@tt_size_ru
mov	DWORD PTR _error$[ebp], 0
mov	eax, DWORD PTR _size$[ebp]
mov	ecx, DWORD PTR _error$[ebp]
mov	DWORD PTR [eax+300], ecx
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN1@tt_size_ru
mov	edx, DWORD PTR _size$[ebp]
push	edx
mov	eax, DWORD PTR _exec$[ebp]
push	eax
call	_TT_Save_Context
add	esp, 8
mov	eax, DWORD PTR _error$[ebp]
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	ecx, DWORD PTR _ttsize$[ebp]
push	ecx
call	_tt_size_done_bytecode
add	esp, 4
mov	edx, DWORD PTR _size$[ebp]
mov	BYTE PTR [edx+108], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_size_init PROC
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _ttsize$[ebp]
mov	DWORD PTR _size$[ebp], eax
mov	DWORD PTR _error$[ebp], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+300], -1
mov	edx, DWORD PTR _size$[ebp]
mov	DWORD PTR [edx+304], -1
mov	eax, DWORD PTR _size$[ebp]
mov	BYTE PTR [eax+108], 0
mov	ecx, DWORD PTR _size$[ebp]
mov	DWORD PTR [ecx+112], -1
mov	eax, DWORD PTR _error$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_done PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
cmp	DWORD PTR _face$[ebp], 0
jne	SHORT $LN6@tt_face_do
jmp	$LN7@tt_face_do
mov	ecx, DWORD PTR _ttface$[ebp]
mov	edx, DWORD PTR [ecx+100]
mov	DWORD PTR _memory$[ebp], edx
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+104]
mov	DWORD PTR _stream$[ebp], ecx
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+532]
mov	DWORD PTR _sfnt$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+660], 0
je	SHORT $LN5@tt_face_do
mov	esi, esp
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+656]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+660]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
cmp	DWORD PTR _sfnt$[ebp], 0
je	SHORT $LN4@tt_face_do
mov	esi, esp
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _sfnt$[ebp]
mov	edx, DWORD PTR [ecx+12]
call	edx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_done_loca
add	esp, 4
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_free_hdmx
add	esp, 4
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+648]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+648], 0
xor	eax, eax
jne	SHORT $LN3@tt_face_do
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+644], 0
mov	edx, DWORD PTR _face$[ebp]
add	edx, 632				
push	edx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	ecx, DWORD PTR _face$[ebp]
add	ecx, 640				
push	ecx
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_ReleaseFrame
add	esp, 8
mov	eax, DWORD PTR _face$[ebp]
mov	DWORD PTR [eax+628], 0
mov	ecx, DWORD PTR _face$[ebp]
mov	DWORD PTR [ecx+636], 0
mov	edx, DWORD PTR _face$[ebp]
mov	eax, DWORD PTR [edx+676]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_tt_done_blend
add	esp, 8
mov	edx, DWORD PTR _face$[ebp]
mov	DWORD PTR [edx+676], 0
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_face_init PROC
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	eax, DWORD PTR _ttface$[ebp]
mov	DWORD PTR _face$[ebp], eax
mov	ecx, 4
imul	edx, ecx, 30
cmp	DWORD PTR _ft_trace_levels[edx], 2
jl	SHORT $LN25@tt_face_in
push	OFFSET $SG10613
call	_FT_Message
add	esp, 4
xor	eax, eax
jne	SHORT $LN26@tt_face_in
mov	ecx, DWORD PTR _ttface$[ebp]
mov	edx, DWORD PTR [ecx+96]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR _library$[ebp], eax
push	OFFSET $SG10615
mov	ecx, DWORD PTR _library$[ebp]
push	ecx
call	_FT_Get_Module_Interface
add	esp, 8
mov	DWORD PTR _sfnt$[ebp], eax
cmp	DWORD PTR _sfnt$[ebp], 0
jne	SHORT $LN22@tt_face_in
push	OFFSET $SG10617
call	_FT_Message
add	esp, 4
push	OFFSET $SG10618
push	526					
push	11					
call	_FT_Throw
add	esp, 12					
or	eax, 11					
mov	DWORD PTR _error$[ebp], eax
jmp	$Exit$29
push	0
mov	edx, DWORD PTR _stream$[ebp]
push	edx
call	_FT_Stream_Seek
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN21@tt_face_in
jmp	$Exit$29
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
mov	ecx, DWORD PTR _face$[ebp]
mov	edx, DWORD PTR [ecx+104]
mov	DWORD PTR _stream$[ebp], edx
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN20@tt_face_in
jmp	$Exit$29
mov	eax, DWORD PTR _face$[ebp]
cmp	DWORD PTR [eax+148], 65536		
je	SHORT $LN19@tt_face_in
mov	ecx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [ecx+148], 131072		
je	SHORT $LN19@tt_face_in
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+148], 1953658213		
je	SHORT $LN19@tt_face_in
mov	eax, 4
imul	ecx, eax, 30
cmp	DWORD PTR _ft_trace_levels[ecx], 2
jl	SHORT $LN17@tt_face_in
push	OFFSET $SG10633
call	_FT_Message
add	esp, 4
xor	edx, edx
jne	SHORT $LN18@tt_face_in
jmp	$Bad_Format$30
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+8]
or	ecx, 2048				
mov	edx, DWORD PTR _ttface$[ebp]
mov	DWORD PTR [edx+8], ecx
cmp	DWORD PTR _face_index$[ebp], 0
jge	SHORT $LN14@tt_face_in
xor	eax, eax
jmp	$LN27@tt_face_in
mov	esi, esp
mov	eax, DWORD PTR _params$[ebp]
push	eax
mov	ecx, DWORD PTR _num_params$[ebp]
push	ecx
mov	edx, DWORD PTR _face_index$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _sfnt$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN13@tt_face_in
jmp	$Exit$29
mov	ecx, DWORD PTR _ttface$[ebp]
push	ecx
call	_tt_check_trickyness
add	esp, 4
movzx	edx, al
test	edx, edx
je	SHORT $LN12@tt_face_in
mov	eax, DWORD PTR _ttface$[ebp]
mov	ecx, DWORD PTR [eax+8]
or	ecx, 8192				
mov	edx, DWORD PTR _ttface$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_load_hdmx
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN11@tt_face_in
jmp	$Exit$29
mov	edx, DWORD PTR _ttface$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 1
je	$LN10@tt_face_in
mov	ecx, DWORD PTR _ttface$[ebp]
mov	edx, DWORD PTR [ecx+128]
cmp	DWORD PTR [edx+48], 0
jne	SHORT $LN9@tt_face_in
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_load_loca
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN8@tt_face_in
mov	edx, DWORD PTR _stream$[ebp]
push	edx
mov	eax, DWORD PTR _face$[ebp]
push	eax
call	_tt_face_load_cvt
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN7@tt_face_in
mov	ecx, DWORD PTR _stream$[ebp]
push	ecx
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_tt_face_load_fpgm
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN6@tt_face_in
mov	eax, DWORD PTR _stream$[ebp]
push	eax
mov	ecx, DWORD PTR _face$[ebp]
push	ecx
call	_tt_face_load_prep
add	esp, 8
mov	DWORD PTR _error$[ebp], eax
mov	edx, DWORD PTR _ttface$[ebp]
mov	eax, DWORD PTR [edx+128]
cmp	DWORD PTR [eax+48], 0
jne	SHORT $LN10@tt_face_in
mov	ecx, DWORD PTR _ttface$[ebp]
cmp	DWORD PTR [ecx+28], 0
je	SHORT $LN10@tt_face_in
mov	edx, DWORD PTR _face$[ebp]
cmp	DWORD PTR [edx+700], 0
je	SHORT $LN10@tt_face_in
mov	eax, DWORD PTR _ttface$[ebp]
push	eax
call	_tt_check_single_notdef
add	esp, 4
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN10@tt_face_in
mov	edx, 4
imul	eax, edx, 30
cmp	DWORD PTR _ft_trace_levels[eax], 5
jl	SHORT $LN3@tt_face_in
push	OFFSET $SG10649
call	_FT_Message
add	esp, 4
xor	ecx, ecx
jne	SHORT $LN4@tt_face_in
mov	edx, DWORD PTR _ttface$[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, -2					
mov	ecx, DWORD PTR _ttface$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _face$[ebp]
push	edx
call	_TT_Init_Glyph_Loading
add	esp, 4
mov	eax, DWORD PTR _error$[ebp]
jmp	SHORT $LN27@tt_face_in
push	OFFSET $SG10650
push	660					
push	2
call	_FT_Throw
add	esp, 12					
or	eax, 2
mov	DWORD PTR _error$[ebp], eax
jmp	SHORT $Exit$29
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
_tt_glyphzone_new PROC
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
push	36					
push	0
mov	eax, DWORD PTR _zone$[ebp]
push	eax
call	_memset
add	esp, 12					
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR _memory$[ebp]
mov	DWORD PTR [ecx], edx
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movzx	ecx, WORD PTR _maxPoints$[ebp]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+12], eax
cmp	DWORD PTR _error$[ebp], 0
jne	$LN2@tt_glyphzo
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
movzx	eax, WORD PTR _maxPoints$[ebp]
push	eax
push	0
push	8
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+16], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@tt_glyphzo
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movzx	ecx, WORD PTR _maxPoints$[ebp]
push	ecx
push	0
push	8
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+20], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@tt_glyphzo
lea	edx, DWORD PTR _error$[ebp]
push	edx
push	0
movzx	eax, WORD PTR _maxPoints$[ebp]
push	eax
push	0
push	1
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_realloc
add	esp, 24					
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+24], eax
cmp	DWORD PTR _error$[ebp], 0
jne	SHORT $LN2@tt_glyphzo
lea	eax, DWORD PTR _error$[ebp]
push	eax
push	0
movsx	ecx, WORD PTR _maxContours$[ebp]
push	ecx
push	0
push	2
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_realloc
add	esp, 24					
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+28], eax
cmp	DWORD PTR _error$[ebp], 0
je	SHORT $LN3@tt_glyphzo
mov	edx, DWORD PTR _zone$[ebp]
push	edx
call	_tt_glyphzone_done
add	esp, 4
jmp	SHORT $LN1@tt_glyphzo
mov	eax, DWORD PTR _zone$[ebp]
mov	cx, WORD PTR _maxPoints$[ebp]
mov	WORD PTR [eax+4], cx
mov	edx, DWORD PTR _zone$[ebp]
mov	ax, WORD PTR _maxContours$[ebp]
mov	WORD PTR [edx+6], ax
mov	eax, DWORD PTR _error$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@tt_glyphzo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN7@tt_glyphzo
DD	-8					
DD	4
DD	$LN6@tt_glyphzo
DB	101					
DB	114					
DB	114					
DB	111					
DB	114					
DB	0
ENDP
_tt_glyphzone_done PROC
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _memory$[ebp], ecx
cmp	DWORD PTR _memory$[ebp], 0
je	$LN17@tt_glyphzo
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+28]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+28], 0
xor	eax, eax
jne	SHORT $LN15@tt_glyphzo
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+24], 0
xor	edx, edx
jne	SHORT $LN12@tt_glyphzo
mov	eax, DWORD PTR _zone$[ebp]
mov	ecx, DWORD PTR [eax+16]
push	ecx
mov	edx, DWORD PTR _memory$[ebp]
push	edx
call	_ft_mem_free
add	esp, 8
mov	eax, DWORD PTR _zone$[ebp]
mov	DWORD PTR [eax+16], 0
xor	ecx, ecx
jne	SHORT $LN9@tt_glyphzo
mov	edx, DWORD PTR _zone$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
mov	ecx, DWORD PTR _memory$[ebp]
push	ecx
call	_ft_mem_free
add	esp, 8
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx+12], 0
xor	eax, eax
jne	SHORT $LN6@tt_glyphzo
mov	ecx, DWORD PTR _zone$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _memory$[ebp]
push	eax
call	_ft_mem_free
add	esp, 8
mov	ecx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [ecx+20], 0
xor	edx, edx
jne	SHORT $LN3@tt_glyphzo
xor	eax, eax
mov	ecx, DWORD PTR _zone$[ebp]
mov	WORD PTR [ecx+8], ax
xor	edx, edx
mov	eax, DWORD PTR _zone$[ebp]
mov	WORD PTR [eax+4], dx
xor	ecx, ecx
mov	edx, DWORD PTR _zone$[ebp]
mov	WORD PTR [edx+10], cx
xor	eax, eax
mov	ecx, DWORD PTR _zone$[ebp]
mov	WORD PTR [ecx+6], ax
mov	edx, DWORD PTR _zone$[ebp]
mov	DWORD PTR [edx], 0
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
