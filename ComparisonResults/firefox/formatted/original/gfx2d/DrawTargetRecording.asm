??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z PROC 
sub	ecx, DWORD PTR [ecx-4]
jmp	??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR $T2[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv74[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	edx, DWORD PTR tv74[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR $T2[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv74[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	edx, DWORD PTR tv74[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z 
add	esp, 4
mov	edx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z 
add	esp, 4
mov	edx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	8
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
mov	edx, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
mov	edx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Al$[ebp]
push	edx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z 
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@AAPAU31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@AAPAU31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@_KAB_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_KAB_K@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@_KAB_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_KAB_K@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@PBXPBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PBXPBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX$$QAPBX@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Al$[ebp]
push	edx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z 
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_range2@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	esi, esp
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Iter_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Iter_cat
DD	-5					
DD	1
DD	$LN3@Iter_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$_Debug_range2@PAE@std@@YAXPAE0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	esi, esp
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Iter_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Iter_cat
DD	-5					
DD	1
DD	$LN3@Iter_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$_Allocate@U?$_List_node@_KPAX@std@@@std@@YAPAU?$_List_node@_KPAX@0@IPAU10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 268435455	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 4
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@U?$_List_node@PBXPAX@std@@@std@@YAPAU?$_List_node@PBXPAX@0@IPAU10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 357913941	
ja	SHORT $LN1@Allocate
imul	eax, DWORD PTR __Count$[ebp], 12
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAU?$_List_node@_KPAX@std@@@std@@YAAAPAU?$_List_node@_KPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@AAPAU31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAU?$_List_node@PBXPAX@std@@@std@@YAAAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@AAPAU31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@_KAB_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_KAB_K@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@_KAB_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_KAB_K@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@PBXPBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PBXPBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX$$QAPBX@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Al$[ebp]
push	edx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z 
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	esi, esp
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	DWORD PTR [ebp-20], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	438					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z 
add	esp, 16					
push	439					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_mov
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 4
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 4
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_mov
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z 
jmp	SHORT $LN5@Uninit_mov
jmp	SHORT $LN10@Uninit_mov
jmp	SHORT $LN3@Uninit_mov
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 4
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_mov
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
jmp	SHORT $LN2@Uninit_mov
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_mov
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA$$QAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	esi, esp
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Debug_range@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z PROC		
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	esi, esp
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Debug_range@PAE@std@@YAXPAE0PB_WI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAE@std@@YA?AUrandom_access_iterator_tag@0@ABQAE@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAE@std@@YAXPAE0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@UPathOp@gfx@mozilla@@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 24					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Prev$[ebp]
push	eax
mov	ecx, DWORD PTR __Next$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z 
mov	DWORD PTR __Pnode$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR _<_Val_0>$[ebp]
push	edx
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
mov	DWORD PTR tv133[ebp], eax
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z 
add	esp, 4
mov	DWORD PTR tv134[ebp], eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	DWORD PTR tv135[ebp], eax
mov	edx, DWORD PTR tv133[ebp]
push	edx
mov	eax, DWORD PTR tv134[ebp]
push	eax
call	??$addressof@_K@std@@YAPA_KAA_K@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv135[ebp]
call	??$construct@_KAB_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_KAB_K@Z 
jmp	SHORT $LN4@Buynode
push	1
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN7@Buynode
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Pnode$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__ehhandler$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 24					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Prev$[ebp]
push	eax
mov	ecx, DWORD PTR __Next$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z 
mov	DWORD PTR __Pnode$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR _<_Val_0>$[ebp]
push	edx
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
mov	DWORD PTR tv133[ebp], eax
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z 
add	esp, 4
mov	DWORD PTR tv134[ebp], eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	DWORD PTR tv135[ebp], eax
mov	edx, DWORD PTR tv133[ebp]
push	edx
mov	eax, DWORD PTR tv134[ebp]
push	eax
call	??$addressof@PBX@std@@YAPAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv135[ebp]
call	??$construct@PBXPBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX$$QAPBX@Z 
jmp	SHORT $LN4@Buynode
push	1
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN7@Buynode
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Pnode$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__ehhandler$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	esi, esp
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Iter_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Iter_cat
DD	-5					
DD	1
DD	$LN3@Iter_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Al$[ebp]
push	edx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z 
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	esi, esp
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	DWORD PTR [ebp-20], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	438					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z 
add	esp, 16					
push	439					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_mov
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 4
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 4
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_mov
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAV21@@Z 
jmp	SHORT $LN5@Uninit_mov
jmp	SHORT $LN10@Uninit_mov
jmp	SHORT $LN3@Uninit_mov
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 4
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_mov
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
jmp	SHORT $LN2@Uninit_mov
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_mov
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@PAV123@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
push	470					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0PB_WI@Z 
add	esp, 16					
push	471					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __First$[ebp]
sar	eax, 2
mov	DWORD PTR __Count$[ebp], eax
mov	ecx, DWORD PTR __Count$[ebp]
shl	ecx, 2
mov	esi, esp
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
call	DWORD PTR __imp__memmove
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __Count$[ebp]
lea	eax, DWORD PTR [eax+ecx*4]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Val_type@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
push	470					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAE@std@@YAXPAE0PB_WI@Z	
add	esp, 16					
push	471					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@E@std@@YAXPAEPB_WI@Z	
add	esp, 12					
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __First$[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
call	DWORD PTR __imp__memmove
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
add	eax, DWORD PTR __Count$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@UPathOp@gfx@mozilla@@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UPathOp@gfx@mozilla@@@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Insert@AB_K@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
mov	DWORD PTR __Pnode$[ebp], eax
mov	eax, DWORD PTR _<_Val_0>$[ebp]
push	eax
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
push	edx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Buynode@AB_K@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@1@PAU21@0AB_K@Z 
mov	DWORD PTR __Newnode$[ebp], eax
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Incsize@?$list@_KV?$allocator@_K@std@@@std@@QAEXI@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR __Newnode$[ebp]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR __Newnode$[ebp]
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR __Newnode$[ebp]
mov	DWORD PTR [eax], edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Insert@PBX@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
mov	DWORD PTR __Pnode$[ebp], eax
mov	eax, DWORD PTR _<_Val_0>$[ebp]
push	eax
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
push	edx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Buynode@PBX@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@1@PAU21@0$$QAPBX@Z 
mov	DWORD PTR __Newnode$[ebp], eax
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Incsize@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXI@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR __Newnode$[ebp]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR __Newnode$[ebp]
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR __Newnode$[ebp]
mov	DWORD PTR [eax], edx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	DWORD PTR [ebp-20], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	eax, DWORD PTR __First$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_fil
mov	ecx, DWORD PTR __Count$[ebp]
sub	ecx, 1
mov	DWORD PTR __Count$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 4
mov	DWORD PTR __First$[ebp], edx
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN4@Uninit_fil
mov	eax, DWORD PTR __Pval$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z 
jmp	SHORT $LN5@Uninit_fil
jmp	SHORT $LN10@Uninit_fil
jmp	SHORT $LN3@Uninit_fil
mov	edx, DWORD PTR __Next$[ebp]
add	edx, 4
mov	DWORD PTR __Next$[ebp], edx
mov	eax, DWORD PTR __Next$[ebp]
cmp	eax, DWORD PTR __First$[ebp]
je	SHORT $LN1@Uninit_fil
mov	ecx, DWORD PTR __Next$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
jmp	SHORT $LN2@Uninit_fil
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_fil
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT $LN9@Uninit_fil
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN1@Copy_backw
mov	ecx, DWORD PTR __Last$[ebp]
sub	ecx, 4
mov	DWORD PTR __Last$[ebp], ecx
mov	edx, DWORD PTR __Dest$[ebp]
sub	edx, 4
mov	DWORD PTR __Dest$[ebp], edx
mov	eax, DWORD PTR __Last$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Dest$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN2@Copy_backw
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Fill
mov	eax, DWORD PTR __First$[ebp]
add	eax, 4
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Fill
mov	edx, DWORD PTR __Val$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __First$[ebp]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN2@Fill
pop	ebp
ret	0
ENDP
??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Buynode_if_nil@ABQBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABQBXV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$forward@ABQBX@std@@YAABQBXABQBX@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	esi, esp
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Iter_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Iter_cat
DD	-5					
DD	1
DD	$LN3@Iter_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_K@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Rechecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@std@@YAAAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAPAV123@PAPAV123@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@PAV123@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z PROC	
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAE@std@@YAPAEPAE@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@EEE@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@PAE@std@@YAPAEPAE@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@UPathOp@gfx@mozilla@@@?$allocator_traits@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@UPathOp@gfx@mozilla@@@1@PAUPathOp@gfx@mozilla@@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$forward@_N@std@@YA$$QA_NAA_N@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	
add	esp, 4
mov	edx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z 
add	esp, 4
mov	edx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T3[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
push	esi
mov	esi, esp
push	0
mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A 
call	DWORD PTR __imp_??0id@locale@std@@QAE@I@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
push	esi
mov	esi, esp
push	0
mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A 
call	DWORD PTR __imp_??0id@locale@std@@QAE@I@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 1073741823	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 2
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __First$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Pval$[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z PROC 
push	ebp
mov	ebp, esp
push	2622					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z 
add	esp, 16					
mov	edx, DWORD PTR __Val$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
call	??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Umove
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
npad	1
DD	1
DD	$LN4@Umove
DD	-9					
DD	1
DD	$LN3@Umove
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@operator
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN8@operator
DD	-32					
DD	12					
DD	$LN6@operator
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Off$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pvector$[ebp]
push	eax
mov	ecx, DWORD PTR __Parg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	esi, DWORD PTR [ecx+edx*4]
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [edx+ecx*4]
cmp	DWORD PTR [eax+8], edx
jae	$LN2@operator
mov	esi, esp
push	159					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BNO@ICKBMIEL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [ecx+edx*4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Pvector$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 160				
push	ebx
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-176]
mov	ecx, 40					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv201[ebp], eax
mov	ecx, DWORD PTR tv201[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z 
mov	DWORD PTR tv163[ebp], eax
mov	edx, DWORD PTR tv163[ebp]
mov	DWORD PTR __Bucket$[ebp], edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T8[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv221[ebp], eax
mov	edx, DWORD PTR tv221[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Where$[ebp], eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
lea	edx, DWORD PTR $T7[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv222[ebp], eax
mov	eax, DWORD PTR tv222[ebp]
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
mov	BYTE PTR tv223[ebp], al
movzx	ecx, BYTE PTR tv223[ebp]
test	ecx, ecx
je	$LN7@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	DWORD PTR tv224[ebp], eax
mov	ecx, DWORD PTR tv224[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ 
mov	DWORD PTR tv225[ebp], eax
mov	edx, DWORD PTR tv225[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv226[ebp], eax
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv227[ebp], eax
mov	ecx, DWORD PTR tv226[ebp]
push	ecx
mov	edx, DWORD PTR tv227[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z 
mov	BYTE PTR tv228[ebp], al
movzx	eax, BYTE PTR tv228[ebp]
test	eax, eax
je	SHORT $LN6@Insert
jmp	$LN5@Insert
xor	ecx, ecx
jne	SHORT $LN3@Insert
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv229[ebp], eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ 
mov	DWORD PTR tv230[ebp], eax
mov	eax, DWORD PTR tv230[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv231[ebp], eax
mov	ecx, DWORD PTR tv229[ebp]
push	ecx
mov	edx, DWORD PTR tv231[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z 
mov	BYTE PTR tv232[ebp], al
movzx	eax, BYTE PTR tv232[ebp]
test	eax, eax
je	SHORT $LN4@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
jmp	SHORT $LN7@Insert
jmp	SHORT $LN5@Insert
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	BYTE PTR $T6[ebp], 0
mov	edx, DWORD PTR __Where$[ebp]
push	edx
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv233[ebp], eax
mov	ecx, DWORD PTR tv233[ebp]
mov	DWORD PTR tv212[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 1
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	eax, DWORD PTR tv212[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	$LN11@Insert
jmp	$LN8@Insert
jmp	SHORT $LN12@Insert
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN19@Insert
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
push	eax
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KV21@@Z 
mov	eax, DWORD PTR __Plist$[ebp]
mov	DWORD PTR __Next$[ebp], eax
lea	ecx, DWORD PTR __Next$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@Insert
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_splice@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@00@Z 
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	eax, DWORD PTR __Where$[ebp]
push	eax
mov	ecx, DWORD PTR __Plist$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Insert_bucket@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Check_size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ 
mov	BYTE PTR $T4[ebp], 1
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv234[ebp], eax
mov	ecx, DWORD PTR tv234[ebp]
mov	DWORD PTR tv219[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], 3
lea	edx, DWORD PTR $T4[ebp]
push	edx
mov	eax, DWORD PTR tv219[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@Insert
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 176				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
npad	3
DD	3
DD	$LN24@Insert
DD	-32					
DD	4
DD	$LN20@Insert
DD	-44					
DD	4
DD	$LN21@Insert
DD	-56					
DD	4
DD	$LN22@Insert
DB	95					
DB	78					
DB	101					
DB	120					
DB	116					
DB	0
DB	95					
DB	80					
DB	108					
DB	105					
DB	115					
DB	116					
DB	0
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$2 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-180]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 160				
push	ebx
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-176]
mov	ecx, 40					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv201[ebp], eax
mov	ecx, DWORD PTR tv201[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z 
mov	DWORD PTR tv163[ebp], eax
mov	edx, DWORD PTR tv163[ebp]
mov	DWORD PTR __Bucket$[ebp], edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T8[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv221[ebp], eax
mov	edx, DWORD PTR tv221[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Where$[ebp], eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
lea	edx, DWORD PTR $T7[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv222[ebp], eax
mov	eax, DWORD PTR tv222[ebp]
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
mov	BYTE PTR tv223[ebp], al
movzx	ecx, BYTE PTR tv223[ebp]
test	ecx, ecx
je	$LN7@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	DWORD PTR tv224[ebp], eax
mov	ecx, DWORD PTR tv224[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
mov	DWORD PTR tv225[ebp], eax
mov	edx, DWORD PTR tv225[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv226[ebp], eax
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv227[ebp], eax
mov	ecx, DWORD PTR tv226[ebp]
push	ecx
mov	edx, DWORD PTR tv227[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
mov	BYTE PTR tv228[ebp], al
movzx	eax, BYTE PTR tv228[ebp]
test	eax, eax
je	SHORT $LN6@Insert
jmp	$LN5@Insert
xor	ecx, ecx
jne	SHORT $LN3@Insert
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv229[ebp], eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
mov	DWORD PTR tv230[ebp], eax
mov	eax, DWORD PTR tv230[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv231[ebp], eax
mov	ecx, DWORD PTR tv229[ebp]
push	ecx
mov	edx, DWORD PTR tv231[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
mov	BYTE PTR tv232[ebp], al
movzx	eax, BYTE PTR tv232[ebp]
test	eax, eax
je	SHORT $LN4@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
jmp	SHORT $LN7@Insert
jmp	SHORT $LN5@Insert
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	BYTE PTR $T6[ebp], 0
mov	edx, DWORD PTR __Where$[ebp]
push	edx
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv233[ebp], eax
mov	ecx, DWORD PTR tv233[ebp]
mov	DWORD PTR tv212[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 1
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	eax, DWORD PTR tv212[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	$LN11@Insert
jmp	$LN8@Insert
jmp	SHORT $LN12@Insert
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN19@Insert
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$forward@ABQBX@std@@YAABQBXABQBX@Z	
add	esp, 4
push	eax
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Buynode_if_nil@ABQBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABQBXV21@@Z 
mov	eax, DWORD PTR __Plist$[ebp]
mov	DWORD PTR __Next$[ebp], eax
lea	ecx, DWORD PTR __Next$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@Insert
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_splice@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@00@Z 
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	eax, DWORD PTR __Where$[ebp]
push	eax
mov	ecx, DWORD PTR __Plist$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Insert_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Check_size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ 
mov	BYTE PTR $T4[ebp], 1
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv234[ebp], eax
mov	ecx, DWORD PTR tv234[ebp]
mov	DWORD PTR tv219[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], 3
lea	edx, DWORD PTR $T4[ebp]
push	edx
mov	eax, DWORD PTR tv219[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@Insert
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 176				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
npad	3
DD	3
DD	$LN24@Insert
DD	-32					
DD	4
DD	$LN20@Insert
DD	-44					
DD	4
DD	$LN21@Insert
DD	-56					
DD	4
DD	$LN22@Insert
DB	95					
DB	78					
DB	101					
DB	120					
DB	116					
DB	0
DB	95					
DB	80					
DB	108					
DB	105					
DB	115					
DB	116					
DB	0
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$2 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-180]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?Release@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	DWORD PTR [ebp-20], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	eax, DWORD PTR __First$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_fil
mov	ecx, DWORD PTR __Count$[ebp]
sub	ecx, 1
mov	DWORD PTR __Count$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 4
mov	DWORD PTR __First$[ebp], edx
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN4@Uninit_fil
mov	eax, DWORD PTR __Pval$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@ABV21@@Z 
jmp	SHORT $LN5@Uninit_fil
jmp	SHORT $LN10@Uninit_fil
jmp	SHORT $LN3@Uninit_fil
mov	edx, DWORD PTR __Next$[ebp]
add	edx, 4
mov	DWORD PTR __Next$[ebp], edx
mov	eax, DWORD PTR __Next$[ebp]
cmp	eax, DWORD PTR __First$[ebp]
je	SHORT $LN1@Uninit_fil
mov	ecx, DWORD PTR __Next$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
jmp	SHORT $LN2@Uninit_fil
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_fil
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT $LN9@Uninit_fil
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN1@Copy_backw
mov	ecx, DWORD PTR __Last$[ebp]
sub	ecx, 4
mov	DWORD PTR __Last$[ebp], ecx
mov	edx, DWORD PTR __Dest$[ebp]
sub	edx, 4
mov	DWORD PTR __Dest$[ebp], edx
mov	eax, DWORD PTR __Last$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Dest$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN2@Copy_backw
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Fill
mov	eax, DWORD PTR __First$[ebp]
add	eax, 4
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Fill
mov	edx, DWORD PTR __Val$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __First$[ebp]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN2@Fill
pop	ebp
ret	0
ENDP
??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAPAV10@PAV10@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$destroy@_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_K@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@_K@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPA_K@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PBX@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPBX@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 4
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
jmp	SHORT $LN2@Destroy_ra
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	al, BYTE PTR __Cat$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ptr_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Ptr_cat
DD	-5					
DD	1
DD	$LN3@Ptr_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 4
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
jmp	SHORT $LN2@Destroy_ra
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	al, BYTE PTR __Cat$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ptr_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Ptr_cat
DD	-5					
DD	1
DD	$LN3@Ptr_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@@std@@YAAAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAPAV123@PAPAV123@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	al, BYTE PTR __Cat$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ptr_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Ptr_cat
DD	-5					
DD	1
DD	$LN3@Ptr_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAE@std@@YAPAEPAE@Z	
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAE@std@@YAPAEPAE@Z	
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAE@std@@YAPAEPAE@Z	
add	esp, 4
push	eax
call	??$_Uninit_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAEPAE@std@@YAAAPAEAAPAEPAE@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 28					
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UPathOp@gfx@mozilla@@@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@@Z 
jmp	SHORT $LN2@Destroy_ra
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	al, BYTE PTR __Cat$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ptr_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Ptr_cat
DD	-5					
DD	1
DD	$LN3@Ptr_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	al, BYTE PTR __Cat$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ptr_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Ptr_cat
DD	-5					
DD	1
DD	$LN3@Ptr_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KU_Nil@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?push_front@?$list@_KV?$allocator@_K@std@@@std@@QAEXAB_K@Z 
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$forward@AB_K@std@@YAAB_KAB_K@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val1$[ebp]
push	eax
call	??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Val2$[ebp]
push	ecx
call	??$forward@_N@std@@YA$$QA_NAA_N@Z	
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR [eax]
mov	BYTE PTR [edx+12], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __Last$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z 
mov	BYTE PTR __Ans$[ebp], al
mov	cl, BYTE PTR __Ans$[ebp]
mov	BYTE PTR __Ans$[ebp], cl
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Buynode_if_nil@PBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBXU_Nil@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?push_front@?$list@PBXV?$allocator@PBX@std@@@std@@QAEX$$QAPBX@Z 
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val1$[ebp]
push	eax
call	??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Val2$[ebp]
push	ecx
call	??$forward@_N@std@@YA$$QA_NAA_N@Z	
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR [eax]
mov	BYTE PTR [edx+12], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aB$[ebp]
push	eax
call	??$Forward@V?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@YA$$QAV?$DefaultDelete@$$BY0A@E@0@AAV10@@Z 
add	esp, 4
mov	ecx, DWORD PTR _aA$[ebp]
push	ecx
call	??$Forward@AAPAE@mozilla@@YAAAPAEAAPAE@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$Forward@V?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@YA$$QAV?$DefaultDelete@$$BY0A@E@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aX$[ebp]
pop	ebp
ret	0
ENDP
??$Forward@AAPAE@mozilla@@YAAAPAEAAPAE@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aX$[ebp]
pop	ebp
ret	0
ENDP
??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV345@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
jmp	SHORT $LN3@Distance2
lea	ecx, DWORD PTR __First$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ 
lea	eax, DWORD PTR __Last$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@Distance2
mov	edx, DWORD PTR __Off$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, 1
mov	ecx, DWORD PTR __Off$[ebp]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN2@Distance2
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Iter_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Iter_cat
DD	-5					
DD	1
DD	$LN3@Iter_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	?_Fill_n@std@@YAPAEPAEIE@Z		
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	al, BYTE PTR __Cat$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ptr_cat
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Ptr_cat
DD	-5					
DD	1
DD	$LN3@Ptr_cat
DB	95					
DB	67					
DB	97					
DB	116					
DB	0
ENDP
??$_Val_type@PAE@std@@YAPAEPAE@Z PROC			
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$Forward@AAW4FillRule@gfx@mozilla@@@mozilla@@YAAAW4FillRule@gfx@0@AAW4120@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aX$[ebp]
pop	ebp
ret	0
ENDP
??$Forward@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAV1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aX$[ebp]
pop	ebp
ret	0
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@CAXPAVDrawTargetRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?forget@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	DWORD PTR _temp$[ebp], 0
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?swap@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAEXAAPAVDrawTargetRecording@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR _temp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@forget
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
DD	1
DD	$LN6@forget
DD	-12					
DD	4
DD	$LN5@forget
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
?swap@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAEXAAPAVDrawTargetRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _temp$[ebp], ecx
mov	edx, DWORD PTR _aRhs$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _temp$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VDrawTargetRecording@gfx@mozilla@@@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@SAXPAVDrawTargetRecording@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$Forward@AAW4SurfaceFormat@gfx@mozilla@@@mozilla@@YAAAW4SurfaceFormat@gfx@0@AAW4120@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aX$[ebp]
pop	ebp
ret	0
ENDP
??$Forward@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@mozilla@@YAABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@0@ABU120@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aX$[ebp]
pop	ebp
ret	0
ENDP
??$Forward@QBVDrawTargetRecording@gfx@mozilla@@@mozilla@@YA$$QBQBVDrawTargetRecording@gfx@0@ABQBV120@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aX$[ebp]
pop	ebp
ret	0
ENDP
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A 
call	??1_System_error_category@std@@UAE@XZ
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A 
call	??0_System_error_category@std@@QAE@XZ	
push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ 
call	_atexit
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A 
call	??1_Iostream_error_category@std@@UAE@XZ
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A 
call	??0_Iostream_error_category@std@@QAE@XZ	
push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ 
call	_atexit
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A 
call	??1_Generic_error_category@std@@UAE@XZ
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A 
call	??0_Generic_error_category@std@@QAE@XZ	
push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ 
call	_atexit
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 1073741823	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 2
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __First$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Pval$[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z PROC 
push	ebp
mov	ebp, esp
push	2622					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0PB_WI@Z 
add	esp, 16					
mov	edx, DWORD PTR __Val$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Unchecked@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@@Z 
add	esp, 4
push	eax
call	??$_Fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Umove
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
npad	1
DD	1
DD	$LN4@Umove
DD	-9					
DD	1
DD	$LN3@Umove
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Allocate@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@IPAPAV123@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 1073741823	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 2
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_K@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@_K@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PA_K@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$addressof@_K@std@@YAPA_KAA_K@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@operator
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN8@operator
DD	-32					
DD	12					
DD	$LN6@operator
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Off$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pvector$[ebp]
push	eax
mov	ecx, DWORD PTR __Parg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	esi, DWORD PTR [ecx+edx*4]
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [edx+ecx*4]
cmp	DWORD PTR [eax+8], edx
jae	$LN2@operator
mov	esi, esp
push	159					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BNG@JIGEKGDI@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [ecx+edx*4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Pvector$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PBX@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPBX@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$addressof@PBX@std@@YAPAPBXAAPBX@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Allocate@E@std@@YAPAEIPAE@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], -1
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 536870911	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 3
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PAU?$_List_node@_KPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@_KPAX@std@@@1@PAPAU?$_List_node@_KPAX@1@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PAU?$_List_node@PBXPAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@PBXPAX@std@@@1@PAPAU?$_List_node@PBXPAX@1@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aT$[ebp]
pop	ebp
ret	0
ENDP
??$_Umove@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV234@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV123@00AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z 
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Umove
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
npad	1
DD	1
DD	$LN4@Umove
DD	-9					
DD	1
DD	$LN3@Umove
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAEPAEU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAPAEPAE00AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z 
add	esp, 16					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Umove
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
npad	1
DD	1
DD	$LN4@Umove
DD	-9					
DD	1
DD	$LN3@Umove
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@UPathOp@gfx@mozilla@@U123@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUPathOp@gfx@mozilla@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@MM@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAM0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	8
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR [eax+4]
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv74[ebp], edx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	eax, DWORD PTR tv74[ebp]
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN3@operator
mov	DWORD PTR tv67[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 160				
push	ebx
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-176]
mov	ecx, 40					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv201[ebp], eax
mov	ecx, DWORD PTR tv201[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z 
mov	DWORD PTR tv163[ebp], eax
mov	edx, DWORD PTR tv163[ebp]
mov	DWORD PTR __Bucket$[ebp], edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T8[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv221[ebp], eax
mov	edx, DWORD PTR tv221[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Where$[ebp], eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
lea	edx, DWORD PTR $T7[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv222[ebp], eax
mov	eax, DWORD PTR tv222[ebp]
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
mov	BYTE PTR tv223[ebp], al
movzx	ecx, BYTE PTR tv223[ebp]
test	ecx, ecx
je	$LN7@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	DWORD PTR tv224[ebp], eax
mov	ecx, DWORD PTR tv224[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ 
mov	DWORD PTR tv225[ebp], eax
mov	edx, DWORD PTR tv225[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv226[ebp], eax
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv227[ebp], eax
mov	ecx, DWORD PTR tv226[ebp]
push	ecx
mov	edx, DWORD PTR tv227[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z 
mov	BYTE PTR tv228[ebp], al
movzx	eax, BYTE PTR tv228[ebp]
test	eax, eax
je	SHORT $LN6@Insert
jmp	$LN5@Insert
xor	ecx, ecx
jne	SHORT $LN3@Insert
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv229[ebp], eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ 
mov	DWORD PTR tv230[ebp], eax
mov	eax, DWORD PTR tv230[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
mov	DWORD PTR tv231[ebp], eax
mov	ecx, DWORD PTR tv229[ebp]
push	ecx
mov	edx, DWORD PTR tv231[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z 
mov	BYTE PTR tv232[ebp], al
movzx	eax, BYTE PTR tv232[ebp]
test	eax, eax
je	SHORT $LN4@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
jmp	SHORT $LN7@Insert
jmp	SHORT $LN5@Insert
movzx	ecx, BYTE PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z 
mov	BYTE PTR $T6[ebp], 0
mov	edx, DWORD PTR __Where$[ebp]
push	edx
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv233[ebp], eax
mov	ecx, DWORD PTR tv233[ebp]
mov	DWORD PTR tv212[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 1
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	eax, DWORD PTR tv212[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	$LN11@Insert
jmp	$LN8@Insert
jmp	SHORT $LN12@Insert
movzx	edx, BYTE PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN19@Insert
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
movzx	eax, BYTE PTR __Pnode$[ebp]
push	eax
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$forward@AB_K@std@@YAAB_KAB_K@Z	
add	esp, 4
push	eax
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Buynode_if_nil@AB_K@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_KU_Nil@1@@Z 
mov	eax, DWORD PTR __Plist$[ebp]
mov	DWORD PTR __Next$[ebp], eax
lea	ecx, DWORD PTR __Next$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@Insert
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_splice@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@00@Z 
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	eax, DWORD PTR __Where$[ebp]
push	eax
mov	ecx, DWORD PTR __Plist$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Insert_bucket@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Check_size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ 
mov	BYTE PTR $T4[ebp], 1
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv234[ebp], eax
mov	ecx, DWORD PTR tv234[ebp]
mov	DWORD PTR tv219[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], 3
lea	edx, DWORD PTR $T4[ebp]
push	edx
mov	eax, DWORD PTR tv219[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@Insert
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 176				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
DD	3
DD	$LN24@Insert
DD	-32					
DD	4
DD	$LN20@Insert
DD	-44					
DD	4
DD	$LN21@Insert
DD	-56					
DD	4
DD	$LN22@Insert
DB	95					
DB	78					
DB	101					
DB	120					
DB	116					
DB	0
DB	95					
DB	80					
DB	108					
DB	105					
DB	115					
DB	116					
DB	0
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$2 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-180]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val1$[ebp]
push	eax
call	??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Val2$[ebp]
push	ecx
call	??$forward@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN3@operator
mov	DWORD PTR tv67[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T5[ebp]
push	ecx
call	??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z 
add	esp, 8
movzx	edx, BYTE PTR $T4[ebp]
push	edx
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv146[ebp], eax
mov	eax, DWORD PTR tv146[ebp]
mov	DWORD PTR tv140[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv143[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Debug_range2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WIUinput_iterator_tag@0@@Z 
add	esp, 36					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 160				
push	ebx
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-176]
mov	ecx, 40					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv201[ebp], eax
mov	ecx, DWORD PTR tv201[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z 
mov	DWORD PTR tv163[ebp], eax
mov	edx, DWORD PTR tv163[ebp]
mov	DWORD PTR __Bucket$[ebp], edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T8[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv221[ebp], eax
mov	edx, DWORD PTR tv221[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Where$[ebp], eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
lea	edx, DWORD PTR $T7[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR tv222[ebp], eax
mov	eax, DWORD PTR tv222[ebp]
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
mov	BYTE PTR tv223[ebp], al
movzx	ecx, BYTE PTR tv223[ebp]
test	ecx, ecx
je	$LN7@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	DWORD PTR tv224[ebp], eax
mov	ecx, DWORD PTR tv224[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
mov	DWORD PTR tv225[ebp], eax
mov	edx, DWORD PTR tv225[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv226[ebp], eax
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv227[ebp], eax
mov	ecx, DWORD PTR tv226[ebp]
push	ecx
mov	edx, DWORD PTR tv227[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
mov	BYTE PTR tv228[ebp], al
movzx	eax, BYTE PTR tv228[ebp]
test	eax, eax
je	SHORT $LN6@Insert
jmp	$LN5@Insert
xor	ecx, ecx
jne	SHORT $LN3@Insert
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv229[ebp], eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
mov	DWORD PTR tv230[ebp], eax
mov	eax, DWORD PTR tv230[ebp]
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
mov	DWORD PTR tv231[ebp], eax
mov	ecx, DWORD PTR tv229[ebp]
push	ecx
mov	edx, DWORD PTR tv231[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
mov	BYTE PTR tv232[ebp], al
movzx	eax, BYTE PTR tv232[ebp]
test	eax, eax
je	SHORT $LN4@Insert
lea	ecx, DWORD PTR __Where$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
jmp	SHORT $LN7@Insert
jmp	SHORT $LN5@Insert
movzx	ecx, BYTE PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z 
mov	BYTE PTR $T6[ebp], 0
mov	edx, DWORD PTR __Where$[ebp]
push	edx
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv233[ebp], eax
mov	ecx, DWORD PTR tv233[ebp]
mov	DWORD PTR tv212[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 1
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	eax, DWORD PTR tv212[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	$LN11@Insert
jmp	$LN8@Insert
jmp	SHORT $LN12@Insert
movzx	edx, BYTE PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN19@Insert
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
movzx	eax, BYTE PTR __Pnode$[ebp]
push	eax
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Buynode_if_nil@PBX@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBXU_Nil@1@@Z 
mov	eax, DWORD PTR __Plist$[ebp]
mov	DWORD PTR __Next$[ebp], eax
lea	ecx, DWORD PTR __Next$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@Insert
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_splice@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@00@Z 
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	eax, DWORD PTR __Where$[ebp]
push	eax
mov	ecx, DWORD PTR __Plist$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Insert_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Check_size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ 
mov	BYTE PTR $T4[ebp], 1
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv234[ebp], eax
mov	ecx, DWORD PTR tv234[ebp]
mov	DWORD PTR tv219[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], 3
lea	edx, DWORD PTR $T4[ebp]
push	edx
mov	eax, DWORD PTR tv219[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_NX@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@$$QA_N@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN25@Insert
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 176				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
DD	3
DD	$LN24@Insert
DD	-32					
DD	4
DD	$LN20@Insert
DD	-44					
DD	4
DD	$LN21@Insert
DD	-56					
DD	4
DD	$LN22@Insert
DB	95					
DB	78					
DB	101					
DB	120					
DB	116					
DB	0
DB	95					
DB	80					
DB	108					
DB	105					
DB	115					
DB	116					
DB	0
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$2 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-180]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Allocate@D@std@@YAPADIPAD@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], -1
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
mov	esi, esp
call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$addressof@D@std@@YAPADAAD@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?Release@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$Pair@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aB$[ebp]
push	eax
call	??$Forward@V?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@YA$$QAV?$DefaultDelete@$$BY0A@E@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _aA$[ebp]
push	ecx
call	??$Forward@AAPAE@mozilla@@YAAAPAEAAPAE@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@2@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAXAAV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@1@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV345@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$addressof@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
call	??$_Iter_cat@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv141[ebp], eax
mov	eax, DWORD PTR tv141[ebp]
mov	DWORD PTR tv135[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv138[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Distance2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z 
add	esp, 32					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$forward@PBX@std@@YA$$QAPBXAAPBX@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEAAEXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEABEXZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pvector$[ebp]
push	eax
mov	ecx, DWORD PTR __Parg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEABEXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+8]
ja	SHORT $LN2@operator
mov	esi, esp
push	72					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	73					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	73					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1NI@PPPKFEAA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Pvector$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@EHPBEABEU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __First$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@EE@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAE0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAE@std@@YAPAEPAE@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Uninit_def_fill_n@EIE@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z 
add	esp, 20					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?Release@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsReleaseHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRef@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?AddRefTraitsAddRefHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	al, BYTE PTR [eax+4]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
call	DWORD PTR __imp_?uncaught_exception@std@@YA_NXZ
cmp	esi, esp
call	__RTC_CheckEsp
movzx	eax, al
test	eax, eax
jne	SHORT $LN2@sentry
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx]
call	DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ 
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	esi
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ostr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Ostr$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [edx+4]
mov	esi, esp
call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
cmp	esi, esp
call	__RTC_CheckEsp
movzx	eax, al
test	eax, eax
je	SHORT $LN1@sentry
mov	ecx, DWORD PTR __Ostr$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [edx+4]
mov	esi, esp
call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN1@sentry
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, DWORD PTR __Ostr$[ebp]
je	SHORT $LN1@sentry
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
mov	ecx, eax
call	DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+4], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv72[ebp], ecx
mov	edx, DWORD PTR tv72[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv72[ebp]
add	ecx, DWORD PTR [eax+4]
mov	esi, esp
call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN2@Sentry_bas
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR tv86[ebp], edx
mov	eax, DWORD PTR tv86[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR tv86[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv92[ebp], eax
mov	eax, DWORD PTR tv92[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv92[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ostr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv73[ebp], eax
mov	ecx, DWORD PTR tv73[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv73[ebp]
add	ecx, DWORD PTR [edx+4]
mov	esi, esp
call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN2@Sentry_bas
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR tv87[ebp], ecx
mov	edx, DWORD PTR tv87[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv87[ebp]
add	ecx, DWORD PTR [eax+4]
mov	esi, esp
call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv93[ebp], eax
mov	ecx, DWORD PTR tv93[ebp]
mov	edx, DWORD PTR [ecx]
mov	esi, esp
mov	ecx, DWORD PTR tv93[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??B?$fpos@H@std@@QBE_JXZ PROC				
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
add	edx, DWORD PTR [ecx+8]
mov	esi, DWORD PTR [eax+4]
adc	esi, DWORD PTR [ecx+12]
mov	eax, edx
mov	edx, esi
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$fpos@H@std@@QAE@_J@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Off$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Off$[ebp+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	DWORD PTR [eax+12], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$?4VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aRhs$[ebp]
call	?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign_assuming_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$downcast@VPathRecording@gfx@mozilla@@@?$already_AddRefed@VPath@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _tmp$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _tmp$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR $T1[ebp]
or	ecx, 1
mov	DWORD PTR $T1[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@CAXPAVPathBuilderRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??C?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?forget@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	DWORD PTR _temp$[ebp], 0
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?swap@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAEXAAPAVPathBuilderRecording@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR _temp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@forget
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
DD	1
DD	$LN6@forget
DD	-12					
DD	4
DD	$LN5@forget
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
?swap@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAEXAAPAVPathBuilderRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _temp$[ebp], ecx
mov	edx, DWORD PTR _aRhs$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _temp$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VPathBuilderRecording@gfx@mozilla@@@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@SAXPAVPathBuilderRecording@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$?0VGradientStops@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VGradientStops@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aPtr$[ebp]
call	?get@?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ 
cdq
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
call	?take@?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAEPAVGradientStops@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAEPAVGradientStops@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0VPathBuilderRecording@gfx@mozilla@@@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aOther$[ebp]
call	?take@?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAEPAVPathBuilderRecording@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAEPAVPathBuilderRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR $T2[ebp], 0
push	32					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@MakeAndAdd
mov	eax, DWORD PTR _<aArgs_1>$[ebp]
push	eax
call	??$Forward@AAW4FillRule@gfx@mozilla@@@mozilla@@YAAAW4FillRule@gfx@0@AAW4120@@Z 
add	esp, 4
mov	cl, BYTE PTR [eax]
movzx	edx, cl
push	edx
mov	eax, DWORD PTR _<aArgs_0>$[ebp]
push	eax
call	??$Forward@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAV1@@Z 
add	esp, 4
mov	ecx, eax
call	??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T3[ebp]
call	??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z 
mov	DWORD PTR tv81[ebp], eax
jmp	SHORT $LN4@MakeAndAdd
mov	DWORD PTR tv81[ebp], 0
mov	ecx, DWORD PTR tv81[ebp]
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR $T4[ebp]
push	edx
lea	ecx, DWORD PTR _p$[ebp]
call	??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
lea	ecx, DWORD PTR _p$[ebp]
call	?forget@?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@XZ 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _p$[ebp]
call	??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@MakeAndAdd
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN11@MakeAndAdd
DD	-20					
DD	4
DD	$LN9@MakeAndAdd
DB	112					
DB	0
ENDP
__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$0 PROC
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$1 PROC
lea	ecx, DWORD PTR _p$[ebp]
jmp	??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z$2 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN8@MakeAndAdd
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
call	?take@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAEPAVPathBuilder@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAEPAVPathBuilder@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$?0VDrawTargetRecording@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aOther$[ebp]
call	?take@?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAEPAVDrawTargetRecording@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAEPAVDrawTargetRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR $T2[ebp], 0
push	68					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@MakeAndAdd
mov	eax, DWORD PTR _<aArgs_2>$[ebp]
push	eax
call	??$Forward@AAW4SurfaceFormat@gfx@mozilla@@@mozilla@@YAAAW4SurfaceFormat@gfx@0@AAW4120@@Z 
add	esp, 4
mov	cl, BYTE PTR [eax]
movzx	edx, cl
push	edx
mov	eax, DWORD PTR _<aArgs_1>$[ebp]
push	eax
call	??$Forward@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@mozilla@@YAABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@0@ABU120@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _<aArgs_0>$[ebp]
push	ecx
call	??$Forward@QBVDrawTargetRecording@gfx@mozilla@@@mozilla@@YA$$QBQBVDrawTargetRecording@gfx@0@ABQBV120@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
push	edx
mov	ecx, DWORD PTR $T3[ebp]
call	??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z 
mov	DWORD PTR tv82[ebp], eax
jmp	SHORT $LN4@MakeAndAdd
mov	DWORD PTR tv82[ebp], 0
mov	eax, DWORD PTR tv82[ebp]
mov	DWORD PTR $T4[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T4[ebp]
push	ecx
lea	ecx, DWORD PTR _p$[ebp]
call	??0?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@PAVDrawTargetRecording@gfx@mozilla@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	ecx, DWORD PTR _p$[ebp]
call	?forget@?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@XZ 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _p$[ebp]
call	??1?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@MakeAndAdd
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN11@MakeAndAdd
DD	-20					
DD	4
DD	$LN9@MakeAndAdd
DB	112					
DB	0
ENDP
__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$0 PROC
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$1 PROC
lea	ecx, DWORD PTR _p$[ebp]
jmp	??1?$RefPtr@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z$2 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN8@MakeAndAdd
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?4VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aRhs$[ebp]
call	?take@?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAEPAVDataSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign_assuming_AddRef@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@AAEXPAVDataSourceSurface@gfx@mozilla@@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0VFilterNode@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VFilterNode@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aPtr$[ebp]
call	?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
cdq
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
call	?take@?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAEPAVFilterNode@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAEPAVFilterNode@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0VSourceSurface@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VSourceSurface@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aPtr$[ebp]
call	?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
cdq
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 60					
push	edi
lea	edi, DWORD PTR [ebp-72]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	eax, DWORD PTR _aUserData$[ebp]
mov	DWORD PTR _userData$[ebp], eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR _userData$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T5[ebp]
call	??0RecordedScaledFontDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	ecx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv95[ebp]
push	edx
mov	ecx, DWORD PTR _userData$[ebp]
add	ecx, 4
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T5[ebp]
call	??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR _userData$[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR $T3[ebp], ecx
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@RecordingF
push	1
mov	ecx, DWORD PTR $T3[ebp]
call	??_GRecordingFontUserData@gfx@mozilla@@QAEPAXI@Z
mov	DWORD PTR tv93[ebp], eax
jmp	SHORT $LN1@RecordingF
mov	DWORD PTR tv93[ebp], 0
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 72					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z$0 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-68]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordingFontUserData@gfx@mozilla@@QAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordingFontUserData@gfx@mozilla@@QAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordingFontUserData@gfx@mozilla@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0RecordingFontUserData@gfx@mozilla@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aPtr$[ebp]
call	?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
cdq
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
call	?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAEPAVPathRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VPathRecording@gfx@mozilla@@@@CAXPAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	DWORD PTR _temp$[ebp], 0
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?swap@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEXAAPAVPathRecording@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR _temp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@PAVPathRecording@gfx@mozilla@@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@forget
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
DD	1
DD	$LN6@forget
DD	-12					
DD	4
DD	$LN5@forget
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
?swap@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEXAAPAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _temp$[ebp], ecx
mov	edx, DWORD PTR _aRhs$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _temp$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
??4?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@PAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign_with_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?assign_assuming_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _oldPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aNewPtr$[ebp]
mov	DWORD PTR [edx], eax
cmp	DWORD PTR _oldPtr$[ebp], 0
je	SHORT $LN2@assign_ass
mov	ecx, DWORD PTR _oldPtr$[ebp]
push	ecx
call	?Release@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign_with_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _aRawPtr$[ebp], 0
je	SHORT $LN1@assign_wit
mov	eax, DWORD PTR _aRawPtr$[ebp]
push	eax
call	?AddRef@?$AddRefTraits@VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@SAXPAVPathRecording@gfx@mozilla@@@Z 
add	esp, 4
mov	ecx, DWORD PTR _aRawPtr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign_assuming_AddRef@?$RefPtr@VPathRecording@gfx@mozilla@@@@AAEXPAVPathRecording@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
call	?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 100				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-112]
mov	ecx, 25					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+56]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx]
mov	esi, esp
mov	ecx, DWORD PTR [edx+56]
mov	edx, DWORD PTR [eax+4]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
movsx	eax, al
mov	DWORD PTR tv73[ebp], eax
cmp	DWORD PTR tv73[ebp], 3
ja	$LN1@Pattern
mov	ecx, DWORD PTR tv73[ebp]
jmp	DWORD PTR $LN23@Pattern[ecx*4]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+56]
jmp	$LN8@Pattern
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+56]
mov	DWORD PTR _surfPat$14[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
push	52					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T10[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T10[ebp], 0
je	SHORT $LN10@Pattern
lea	ecx, DWORD PTR $T9[ebp]
call	??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ 
push	eax
mov	eax, DWORD PTR _surfPat$14[ebp]
movzx	ecx, BYTE PTR [eax+9]
push	ecx
mov	edx, DWORD PTR _surfPat$14[ebp]
add	edx, 12					
push	edx
mov	eax, DWORD PTR _surfPat$14[ebp]
movzx	ecx, BYTE PTR [eax+8]
push	ecx
mov	ecx, DWORD PTR _surfPat$14[ebp]
add	ecx, 4
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
call	?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR $T10[ebp]
call	??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z 
mov	DWORD PTR tv142[ebp], eax
jmp	SHORT $LN11@Pattern
mov	DWORD PTR tv142[ebp], 0
mov	edx, DWORD PTR tv142[ebp]
mov	DWORD PTR $T11[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR $T11[ebp]
mov	DWORD PTR [eax+60], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+60]
jmp	$LN8@Pattern
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+56]
mov	DWORD PTR _linGradPat$13[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
push	48					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T7[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
cmp	DWORD PTR $T7[ebp], 0
je	SHORT $LN12@Pattern
mov	eax, DWORD PTR _linGradPat$13[ebp]
add	eax, 24					
push	eax
mov	ecx, DWORD PTR _linGradPat$13[ebp]
add	ecx, 20					
call	??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ 
push	eax
call	?GetGradientStops@gfx@mozilla@@YAPAVGradientStops@12@PAV312@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _linGradPat$13[ebp]
add	ecx, 12					
push	ecx
mov	edx, DWORD PTR _linGradPat$13[ebp]
add	edx, 4
push	edx
mov	ecx, DWORD PTR $T7[ebp]
call	??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z 
mov	DWORD PTR tv176[ebp], eax
jmp	SHORT $LN13@Pattern
mov	DWORD PTR tv176[ebp], 0
mov	eax, DWORD PTR tv176[ebp]
mov	DWORD PTR $T8[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR $T8[ebp]
mov	DWORD PTR [ecx+60], edx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+60]
jmp	$LN8@Pattern
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+56]
mov	DWORD PTR _radGradPat$12[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
push	56					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T5[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 2
cmp	DWORD PTR $T5[ebp], 0
je	SHORT $LN14@Pattern
mov	ecx, DWORD PTR _radGradPat$12[ebp]
add	ecx, 32					
push	ecx
mov	ecx, DWORD PTR _radGradPat$12[ebp]
add	ecx, 28					
call	??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ 
push	eax
call	?GetGradientStops@gfx@mozilla@@YAPAVGradientStops@12@PAV312@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR _radGradPat$12[ebp]
push	ecx
movss	xmm0, DWORD PTR [edx+24]
movss	DWORD PTR [esp], xmm0
mov	eax, DWORD PTR _radGradPat$12[ebp]
push	ecx
movss	xmm0, DWORD PTR [eax+20]
movss	DWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _radGradPat$12[ebp]
add	ecx, 12					
push	ecx
mov	edx, DWORD PTR _radGradPat$12[ebp]
add	edx, 4
push	edx
mov	ecx, DWORD PTR $T5[ebp]
call	??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z 
mov	DWORD PTR tv214[ebp], eax
jmp	SHORT $LN15@Pattern
mov	DWORD PTR tv214[ebp], 0
mov	eax, DWORD PTR tv214[ebp]
mov	DWORD PTR $T6[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR $T6[ebp]
mov	DWORD PTR [ecx+60], edx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+60]
jmp	SHORT $LN8@Pattern
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
push	20					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 3
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN16@Pattern
lea	ecx, DWORD PTR $T2[ebp]
call	??0Color@gfx@mozilla@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR $T3[ebp]
call	??0ColorPattern@gfx@mozilla@@QAE@ABUColor@12@@Z 
mov	DWORD PTR tv233[ebp], eax
jmp	SHORT $LN17@Pattern
mov	DWORD PTR tv233[ebp], 0
mov	edx, DWORD PTR tv233[ebp]
mov	DWORD PTR $T4[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR $T4[ebp]
jmp	SHORT $LN8@Pattern
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+60]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 112				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	$LN5@Pattern
DD	$LN4@Pattern
DD	$LN3@Pattern
DD	$LN2@Pattern
ENDP
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$0 PROC
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	eax, DWORD PTR $T10[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$1 PROC
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	eax, DWORD PTR $T7[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$2 PROC
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	eax, DWORD PTR $T5[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__unwindfunclet$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ$3 PROC
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-112]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1AdjustedPattern@gfx@mozilla@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+60], 0
je	SHORT $LN2@AdjustedPa
mov	esi, esp
push	0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+60]
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+60]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+60], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aPattern$[ebp]
mov	DWORD PTR [ecx+56], edx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	16					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	16					
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	12					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	12					
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	80					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	80					
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	92					
ENDP
__unwindfunclet$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	24					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	24					
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	36					
ENDP
__unwindfunclet$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	8
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	8
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	16					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	16					
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	16					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	16					
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	8
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	8
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	8
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	8
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	8
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	8
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	4
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	4
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	4
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	4
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aArgType$[ebp]
mov	DWORD PTR [ecx+36], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
push	1
lea	eax, DWORD PTR _aArgument$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GFilterNodeRecording@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1FilterNodeRecording@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VFilterNode@gfx@mozilla@@@@CAXPAVFilterNode@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?forget@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	DWORD PTR _temp$[ebp], 0
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?swap@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAEXAAPAVFilterNode@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR _temp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@forget
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
DD	1
DD	$LN6@forget
DD	-12					
DD	4
DD	$LN5@forget
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
?swap@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAEXAAPAVFilterNode@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _temp$[ebp], ecx
mov	edx, DWORD PTR _aRhs$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _temp$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@SAXPAVFilterNode@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetBackendType@FilterNodeRecording@gfx@mozilla@@UAE?AW4FilterBackend@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aSize$[ebp]
push	eax
mov	ecx, DWORD PTR _aFloat$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z 
mov	DWORD PTR tv129[ebp], eax
mov	ecx, DWORD PTR tv129[ebp]
mov	DWORD PTR tv128[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv128[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aSize$[ebp]
push	eax
mov	ecx, DWORD PTR _aFloat$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+16]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIPBMI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	12					
mov	eax, DWORD PTR _aValue$[ebp]
sub	esp, 16					
mov	ecx, esp
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0UColor@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IUColor@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aValue$[ebp]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABUColor@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	11					
mov	eax, DWORD PTR _aValue$[ebp]
sub	esp, 12					
mov	ecx, esp
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0U?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aValue$[ebp]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	10					
mov	esi, DWORD PTR _aValue$[ebp]
sub	esp, 80					
mov	ecx, 20					
mov	edi, esp
rep movsd
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0VMatrix5x4@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix5x4@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv95[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aValue$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+28]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	9
mov	eax, DWORD PTR _aValue$[ebp]
sub	esp, 24					
mov	ecx, esp
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	edx, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], edx
mov	edx, DWORD PTR [eax+16]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR [eax+20]
mov	DWORD PTR [ecx+20], eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0VMatrix@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IVMatrix@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aValue$[ebp]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+32]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABVMatrix@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	8
mov	eax, DWORD PTR _aValue$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR [eax]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv95[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aValue$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+36]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	7
mov	eax, DWORD PTR _aValue$[ebp]
sub	esp, 16					
mov	ecx, esp
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0U?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aValue$[ebp]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+40]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	6
mov	eax, DWORD PTR _aValue$[ebp]
sub	esp, 16					
mov	ecx, esp
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR [ecx+4], edx
mov	edx, DWORD PTR [eax+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [ecx+12], eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0U?$RectTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aValue$[ebp]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+44]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	5
mov	eax, DWORD PTR _aValue$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR [eax]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv95[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aValue$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+48]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	4
mov	eax, DWORD PTR _aValue$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR [eax]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv95[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aValue$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+52]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
mov	eax, DWORD PTR _aValue$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR [eax]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0U?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@12@W4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv95[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aValue$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+56]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	2
push	ecx
movss	xmm0, DWORD PTR _aValue$[ebp]
movss	DWORD PTR [esp], xmm0
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0M@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IMW4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv95[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
push	ecx
movss	xmm0, DWORD PTR _aValue$[ebp]
movss	DWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax+60]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXIM@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR _aValue$[ebp]
push	eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0I@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IIW4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aValue$[ebp]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+64]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXII@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	1
movzx	eax, BYTE PTR _aValue$[ebp]
push	eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0_N@RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@I_NW4ArgType@012@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	esi, esp
movzx	edx, BYTE PTR _aValue$[ebp]
push	edx
mov	eax, DWORD PTR _aIndex$[ebp]
push	eax
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx+68]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetAttribute@FilterNodeRecording@gfx@mozilla@@UAEXI_N@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@SetInput
mov	ecx, DWORD PTR _aFilter$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z 
mov	DWORD PTR tv130[ebp], eax
mov	ecx, DWORD PTR tv130[ebp]
mov	DWORD PTR tv129[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv129[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv89[ebp], eax
mov	eax, DWORD PTR _aFilter$[ebp]
push	eax
call	?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z 
add	esp, 4
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR tv89[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv89[ebp]
mov	edx, DWORD PTR [eax+8]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVFilterNode@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_08KOAGOIFI@SetInput?$AA@
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z 
add	esp, 12					
mov	ecx, DWORD PTR _aSurface$[ebp]
push	ecx
mov	edx, DWORD PTR _aIndex$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z 
mov	DWORD PTR tv135[ebp], eax
mov	ecx, DWORD PTR tv135[ebp]
mov	DWORD PTR tv134[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv134[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??C?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	DWORD PTR tv94[ebp], eax
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
call	?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z 
add	esp, 4
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR tv94[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv94[ebp]
mov	edx, DWORD PTR [eax+12]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetInput@FilterNodeRecording@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 200				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-212]
mov	ecx, 50					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	eax, DWORD PTR _aNode$[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR _aNode$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 2
je	SHORT $LN1@GetFilterN
push	OFFSET ??_C@_0DK@JJEBLML@Non?5recording?5filter?5node?5used?5w@
push	-1
push	0
call	?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z 
mov	DWORD PTR tv88[ebp], eax
mov	ecx, DWORD PTR tv88[ebp]
mov	DWORD PTR tv87[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv87[ebp]
call	??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ 
mov	eax, DWORD PTR _aNode$[ebp]
jmp	SHORT $LN2@GetFilterN
mov	ecx, DWORD PTR _aNode$[ebp]
add	ecx, 8
call	??B?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 212				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ 
ENDP
__ehhandler$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-212]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1FilterNodeRecording@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 52					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7FilterNodeRecording@gfx@mozilla@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 2
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedFilterNodeDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z 
mov	DWORD PTR tv162[ebp], eax
mov	ecx, DWORD PTR tv162[ebp]
mov	DWORD PTR tv155[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR tv155[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1FilterNode@gfx@mozilla@@UAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1FilterNode@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ$3 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1FilterNodeRecording@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0FilterNode@gfx@mozilla@@IAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7FilterNodeRecording@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aFinalFilterNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _aRecorder$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1FilterNode@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__ehhandler$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?GetGradientStops@gfx@mozilla@@YAPAVGradientStops@12@PAV312@@Z PROC 
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _aStops$[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR _aStops$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
cmp	al, 6
je	SHORT $LN1@GetGradien
mov	eax, DWORD PTR _aStops$[ebp]
jmp	SHORT $LN2@GetGradien
mov	ecx, DWORD PTR _aStops$[ebp]
add	ecx, 8
call	??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ 
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z PROC 
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
cmp	al, 10					
je	SHORT $LN1@GetSourceS
mov	eax, DWORD PTR _aSurface$[ebp]
jmp	SHORT $LN2@GetSourceS
mov	ecx, DWORD PTR _aSurface$[ebp]
add	ecx, 16					
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??_GGradientStopsRecording@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1GradientStopsRecording@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetBackendType@GradientStopsRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 6
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1GradientStopsRecording@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 52					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7GradientStopsRecording@gfx@mozilla@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 2
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedGradientStopsDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z 
mov	DWORD PTR tv162[ebp], eax
mov	ecx, DWORD PTR tv162[ebp]
mov	DWORD PTR tv155[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR tv155[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1GradientStops@gfx@mozilla@@UAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1GradientStops@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ$3 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1GradientStopsRecording@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0GradientStops@gfx@mozilla@@IAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7GradientStopsRecording@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aFinalGradientStops$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _aRecorder$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1GradientStops@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__ehhandler$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GSourceSurfaceRecording@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetDataSurface@SourceSurfaceRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR $T1[ebp]
or	ecx, 1
mov	DWORD PTR $T1[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetFormat@SourceSurfaceRecording@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetSize@SourceSurfaceRecording@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetType@SourceSurfaceRecording@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 10					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 52					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7SourceSurfaceRecording@gfx@mozilla@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 2
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedSourceSurfaceDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z 
mov	DWORD PTR tv162[ebp], eax
mov	ecx, DWORD PTR tv162[ebp]
mov	DWORD PTR tv155[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR tv155[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
call	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1SourceSurface@gfx@mozilla@@UAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1SourceSurface@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ$3 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1SourceSurfaceRecording@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0SourceSurface@gfx@mozilla@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7SourceSurfaceRecording@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aFinalSurface$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _aRecorder$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
call	??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1SourceSurface@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__ehhandler$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
call	?take@?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAEPAVDataSourceSurface@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAEPAVDataSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 48					
push	esi
push	edi
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _aRecorder$[ebp]
call	?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@EnsureSurf
jmp	$LN2@EnsureSurf
mov	esi, esp
lea	edx, DWORD PTR $T5[ebp]
push	edx
mov	eax, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv160[ebp], eax
mov	ecx, DWORD PTR tv160[ebp]
mov	DWORD PTR tv156[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv156[ebp]
push	edx
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR _reason$[ebp]
push	eax
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _aSurface$[ebp]
push	ecx
mov	edx, DWORD PTR _aRecorder$[ebp]
push	edx
call	?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z 
add	esp, 16					
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _aRecorder$[ebp]
call	?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
push	8
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN4@EnsureSurf
mov	ecx, DWORD PTR $T2[ebp]
call	??0RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ
mov	DWORD PTR tv147[ebp], eax
jmp	SHORT $LN5@EnsureSurf
mov	DWORD PTR tv147[ebp], 0
mov	ecx, DWORD PTR tv147[ebp]
mov	DWORD PTR $T3[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR $T3[ebp]
mov	DWORD PTR _userData$[ebp], edx
mov	eax, DWORD PTR _userData$[ebp]
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _aRecorder$[ebp]
push	edx
mov	ecx, DWORD PTR _userData$[ebp]
add	ecx, 4
call	??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
push	OFFSET ?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z 
mov	eax, DWORD PTR _userData$[ebp]
push	eax
mov	ecx, DWORD PTR _aRecorder$[ebp]
push	ecx
mov	ecx, DWORD PTR _aSurface$[ebp]
call	?AddUserData@SourceSurface@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@EnsureSurf
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN11@EnsureSurf
DD	-20					
DD	4
DD	$LN9@EnsureSurf
DB	100					
DB	97					
DB	116					
DB	97					
DB	83					
DB	117					
DB	114					
DB	102					
DB	0
ENDP
__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$0 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$1 PROC
lea	ecx, DWORD PTR _dataSurf$[ebp]
jmp	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z$2 PROC
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__ehhandler$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?reset@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAEX$$T@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAPAEXZ 
mov	eax, DWORD PTR [eax]
mov	DWORD PTR _old$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAPAEXZ 
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _old$[ebp], 0
je	SHORT $LN2@reset
mov	ecx, DWORD PTR _old$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?second@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAV?$DefaultDelete@$$BY0A@E@3@XZ 
mov	ecx, eax
call	??R?$DefaultDelete@$$BY0A@E@mozilla@@QBEXPAE@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?get@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QBEPAEXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IBEABQAEXZ 
mov	eax, DWORD PTR [eax]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?reset@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAEX$$T@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@PAE@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T1[ebp]
call	??0?$DefaultDelete@$$BY0A@E@mozilla@@QAE@XZ 
push	eax
lea	eax, DWORD PTR _aPtr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$?0AAPAEV?$DefaultDelete@$$BY0A@E@mozilla@@@?$Pair@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@AAPAE$$QAV?$DefaultDelete@$$BY0A@E@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?second@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAV?$DefaultDelete@$$BY0A@E@3@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IBEABQAEXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?first@?$PairHelper@PAEV?$DefaultDelete@$$BY0A@E@mozilla@@$00$0A@@detail@mozilla@@IAEAAPAEXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??R?$DefaultDelete@$$BY0A@E@mozilla@@QBEXPAE@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPtr$[ebp]
mov	DWORD PTR $T1[ebp], eax
mov	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??_V@YAXPAX@Z				
add	esp, 4
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$DefaultDelete@$$BY0A@E@mozilla@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ 
movzx	eax, al
test	eax, eax
je	SHORT $LN7@WriteLog
mov	ecx, DWORD PTR _this$[ebp]
call	?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ 
movzx	ecx, al
push	ecx
push	2
mov	edx, DWORD PTR _aString$[ebp]
push	edx
call	?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z 
add	esp, 12					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+176]
and	ecx, 4
je	SHORT $LN5@WriteLog
xor	edx, edx
jne	SHORT $LN3@WriteLog
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+176]
and	ecx, 8
je	SHORT $LN7@WriteLog
mov	ecx, DWORD PTR _this$[ebp]
call	?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ 
movzx	edx, al
test	edx, edx
je	SHORT $LN7@WriteLog
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
push	ecx
call	?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aOptions$[ebp]
mov	DWORD PTR [eax+176], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aReason$[ebp]
mov	DWORD PTR [edx+180], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _aLogIt$[ebp]
mov	BYTE PTR [ecx+184], dl
mov	eax, DWORD PTR _this$[ebp]
movzx	ecx, BYTE PTR [eax+184]
test	ecx, ecx
je	$LN6@Init
mov	ecx, DWORD PTR _this$[ebp]
call	?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ 
movzx	edx, al
test	edx, edx
je	$LN4@Init
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+176]
and	ecx, 4
je	SHORT $LN3@Init
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN8@Init
mov	edx, DWORD PTR _this$[ebp]
add	edx, 16					
mov	DWORD PTR tv84[ebp], edx
jmp	SHORT $LN9@Init
mov	DWORD PTR tv84[ebp], 0
mov	esi, esp
push	2
push	OFFSET ??_C@_04HGKILAJC@?$FLGFX?$AA@
mov	eax, DWORD PTR tv84[ebp]
push	eax
call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z 
add	esp, 8
mov	ecx, eax
call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN4@Init
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN10@Init
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
mov	DWORD PTR tv132[ebp], ecx
jmp	SHORT $LN11@Init
mov	DWORD PTR tv132[ebp], 0
push	OFFSET ??_C@_01JOAMLHOP@?9?$AA@
mov	esi, esp
push	2
push	OFFSET ??_C@_04HGKILAJC@?$FLGFX?$AA@
mov	edx, DWORD PTR tv132[ebp]
push	edx
call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z 
add	esp, 8
mov	ecx, eax
call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z 
add	esp, 8
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+176]
and	ecx, 8
je	SHORT $LN1@Init
mov	ecx, DWORD PTR _this$[ebp]
call	?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ 
movzx	edx, al
test	edx, edx
je	SHORT $LN1@Init
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN12@Init
mov	eax, DWORD PTR _this$[ebp]
add	eax, 16					
mov	DWORD PTR tv154[ebp], eax
jmp	SHORT $LN13@Init
mov	DWORD PTR tv154[ebp], 0
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+180]
push	edx
push	OFFSET ??_C@_01CLKCMJKC@?5?$AA@
mov	eax, DWORD PTR tv154[ebp]
push	eax
call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z 
add	esp, 8
mov	ecx, eax
call	DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN14@Init
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
mov	DWORD PTR tv169[ebp], ecx
jmp	SHORT $LN15@Init
mov	DWORD PTR tv169[ebp], 0
push	OFFSET ??_C@_03FLKELDHI@?$FN?3?5?$AA@
mov	edx, DWORD PTR tv169[ebp]
push	edx
call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z 
add	esp, 8
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+180], -1
jle	SHORT $LN3@ValidReaso
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+180], 101		
jge	SHORT $LN3@ValidReaso
mov	DWORD PTR tv68[ebp], 1
jmp	SHORT $LN4@ValidReaso
mov	DWORD PTR tv68[ebp], 0
mov	al, BYTE PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+176]
and	ecx, 2
je	SHORT $LN3@AutoPrefix
mov	BYTE PTR tv67[ebp], 1
jmp	SHORT $LN4@AutoPrefix
mov	BYTE PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+176]
and	eax, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	al, BYTE PTR [eax+184]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ 
movzx	eax, al
test	eax, eax
je	SHORT $LN1@operator
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN4@operator
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
mov	DWORD PTR tv75[ebp], ecx
jmp	SHORT $LN5@operator
mov	DWORD PTR tv75[ebp], 0
mov	edx, DWORD PTR _aStr$[ebp]
push	edx
mov	eax, DWORD PTR tv75[ebp]
push	eax
call	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z 
add	esp, 8
mov	eax, DWORD PTR _this$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ 
movzx	eax, al
test	eax, eax
jne	SHORT $LN2@Flush
jmp	SHORT $LN3@Flush
lea	ecx, DWORD PTR _str$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _str$[ebp]
call	?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ 
movzx	edx, al
test	edx, edx
jne	SHORT $LN1@Flush
lea	eax, DWORD PTR _str$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z 
push	OFFSET ??_C@_00CNPNBAHC@?$AA@
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _str$[ebp]
call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@Flush
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN9@Flush
DD	-52					
DD	28					
DD	$LN7@Flush
DB	115					
DB	116					
DB	114					
DB	0
ENDP
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0 PROC
lea	ecx, DWORD PTR _str$[ebp]
jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
ENDP
__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-80]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
ENDP
__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	1
push	3
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+176], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+184], 0
mov	edx, DWORD PTR _aReason$[ebp]
push	edx
push	2
call	?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z 
add	esp, 4
movzx	eax, al
push	eax
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
ENDP
__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
movzx	eax, BYTE PTR _aWithAssert$[ebp]
test	eax, eax
je	SHORT $LN3@DefaultOpt
mov	DWORD PTR tv66[ebp], 4
jmp	SHORT $LN4@DefaultOpt
mov	DWORD PTR tv66[ebp], 0
mov	eax, DWORD PTR tv66[ebp]
or	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 424				
push	esi
push	edi
lea	edi, DWORD PTR [ebp-436]
mov	ecx, 106				
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
cmp	DWORD PTR _aDataSurf$[ebp], 0
jne	$LN2@StoreSourc
mov	eax, DWORD PTR _reason$[ebp]
push	eax
push	OFFSET $SG85048
push	-1
push	0
call	?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T12[ebp]
call	??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z 
mov	DWORD PTR tv244[ebp], eax
mov	ecx, DWORD PTR tv244[ebp]
mov	DWORD PTR tv237[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv237[ebp]
call	??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z 
mov	ecx, eax
call	??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T12[ebp]
call	??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ 
mov	esi, esp
lea	edx, DWORD PTR $T11[ebp]
push	edx
mov	eax, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [ecx]
mov	edi, esp
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
cmp	edi, esp
call	__RTC_CheckEsp
movzx	ecx, al
push	ecx
call	?BytesPerPixel@gfx@mozilla@@YAHW4SurfaceFormat@12@@Z 
add	esp, 4
imul	eax, DWORD PTR [esi]
mov	DWORD PTR _stride$15[ebp], eax
mov	esi, esp
lea	edx, DWORD PTR $T9[ebp]
push	edx
mov	eax, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _stride$15[ebp]
imul	ecx, DWORD PTR [eax+4]
mov	DWORD PTR $T10[ebp], ecx
mov	edx, DWORD PTR $T10[ebp]
push	edx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T8[ebp], eax
cmp	DWORD PTR $T8[ebp], 0
je	SHORT $LN5@StoreSourc
mov	eax, DWORD PTR $T10[ebp]
push	eax
push	0
mov	ecx, DWORD PTR $T8[ebp]
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR $T8[ebp]
mov	DWORD PTR tv143[ebp], edx
jmp	SHORT $LN6@StoreSourc
mov	DWORD PTR tv143[ebp], 0
mov	eax, DWORD PTR tv143[ebp]
push	eax
lea	ecx, DWORD PTR _sourceData$14[ebp]
call	??0?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@PAE@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [ecx]
mov	esi, esp
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, al
push	ecx
mov	esi, esp
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	eax, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
mov	ecx, DWORD PTR _stride$15[ebp]
push	ecx
lea	ecx, DWORD PTR _sourceData$14[ebp]
call	?get@?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QBEPAEXZ 
push	eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
mov	edx, DWORD PTR _aSurface$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T7[ebp]
call	??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR tv240[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR tv240[ebp]
push	ecx
mov	ecx, DWORD PTR _aRecorder$[ebp]
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T7[ebp]
call	??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _sourceData$14[ebp]
call	??1?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@XZ 
jmp	$LN3@StoreSourc
push	0
mov	edx, DWORD PTR _aDataSurf$[ebp]
push	edx
lea	ecx, DWORD PTR _map$13[ebp]
call	??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR _aDataSurf$[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR _aDataSurf$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, al
push	ecx
mov	esi, esp
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	eax, DWORD PTR _aDataSurf$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _aDataSurf$[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
lea	ecx, DWORD PTR _map$13[ebp]
call	?GetStride@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEHXZ 
push	eax
lea	ecx, DWORD PTR _map$13[ebp]
call	?GetData@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEPAEXZ 
push	eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _aSurface$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z 
mov	DWORD PTR tv186[ebp], eax
mov	eax, DWORD PTR tv186[ebp]
mov	DWORD PTR tv243[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR tv243[ebp]
push	ecx
mov	ecx, DWORD PTR _aRecorder$[ebp]
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _map$13[ebp]
call	??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@StoreSourc
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 436				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	2
DD	$LN15@StoreSourc
DD	-24					
DD	4
DD	$LN12@StoreSourc
DD	-52					
DD	20					
DD	$LN13@StoreSourc
DB	109					
DB	97					
DB	112					
DB	0
DB	115					
DB	111					
DB	117					
DB	114					
DB	99					
DB	101					
DB	68					
DB	97					
DB	116					
DB	97					
DB	0
ENDP
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$0 PROC
lea	ecx, DWORD PTR $T12[ebp]
jmp	??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ 
ENDP
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$1 PROC
lea	ecx, DWORD PTR _sourceData$14[ebp]
jmp	??1?$UniquePtr@$$BY0A@EV?$DefaultDelete@$$BY0A@E@mozilla@@@mozilla@@QAE@XZ 
ENDP
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$2 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ 
ENDP
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$3 PROC
lea	ecx, DWORD PTR _map$13[ebp]
jmp	??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ 
ENDP
__unwindfunclet$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z$4 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ 
ENDP
__ehhandler$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-436]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 64					
push	edi
lea	edi, DWORD PTR [ebp-76]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	eax, DWORD PTR _aUserData$[ebp]
mov	DWORD PTR _userData$[ebp], eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
mov	edx, DWORD PTR _userData$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _userData$[ebp]
add	ecx, 4
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR _userData$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T5[ebp]
call	??0RecordedSourceSurfaceDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z 
mov	DWORD PTR tv144[ebp], eax
mov	ecx, DWORD PTR tv144[ebp]
mov	DWORD PTR tv143[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv143[ebp]
push	edx
mov	ecx, DWORD PTR _userData$[ebp]
add	ecx, 4
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T5[ebp]
call	??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR _userData$[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	ecx, DWORD PTR $T2[ebp]
mov	DWORD PTR $T3[ebp], ecx
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@RecordingS
push	1
mov	ecx, DWORD PTR $T3[ebp]
call	??_GRecordingSourceSurfaceUserData@gfx@mozilla@@QAEPAXI@Z
mov	DWORD PTR tv141[ebp], eax
jmp	SHORT $LN1@RecordingS
mov	DWORD PTR tv141[ebp], 0
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 76					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z$0 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-72]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?RecordingSourceSurfaceUserDataFunc@gfx@mozilla@@YAXPAX@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordingSourceSurfaceUserData@gfx@mozilla@@QAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0RecordingSourceSurfaceUserData@gfx@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GFilterNode@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1FilterNode@gfx@mozilla@@UAE@XZ	
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0FilterNode@gfx@mozilla@@IAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7FilterNode@gfx@mozilla@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIPBMI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 501			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABUColor@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 500			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$Point3DTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 499			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABVMatrix5x4@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 498			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABVMatrix@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 497			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 496			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 495			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 494			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 493			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 492			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIABU?$SizeTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 491			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXIM@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 490			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXII@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 489			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetAttribute@FilterNode@gfx@mozilla@@UAEXI_N@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetAttribu
int	3
mov	DWORD PTR ds:0, 488			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetAttribu
xor	edx, edx
jne	SHORT $LN5@SetAttribu
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetInput@FilterNode@gfx@mozilla@@UAEXIPAV123@@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetInput
int	3
mov	DWORD PTR ds:0, 486			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetInput
xor	edx, edx
jne	SHORT $LN5@SetInput
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?SetInput@FilterNode@gfx@mozilla@@UAEXIPAVSourceSurface@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@SetInput
int	3
mov	DWORD PTR ds:0, 485			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@SetInput
xor	edx, edx
jne	SHORT $LN5@SetInput
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1FilterNode@gfx@mozilla@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7FilterNode@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VFilterNode@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN3@Release
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
sub	edx, 1
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR _cnt$[ebp], edx
cmp	DWORD PTR _cnt$[ebp], 0
jne	SHORT $LN5@Release
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN7@Release
mov	eax, DWORD PTR _this$[ebp]
sub	eax, 4
mov	DWORD PTR tv73[ebp], eax
jmp	SHORT $LN8@Release
mov	DWORD PTR tv73[ebp], 0
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T1[ebp], ecx
mov	edx, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], edx
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN9@Release
mov	esi, esp
push	1
mov	eax, DWORD PTR $T2[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
jmp	SHORT $LN5@Release
mov	DWORD PTR tv81[ebp], 0
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRef@?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@AddRef
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@RefCounted
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VFilterNode@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR ?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA 
cmp	eax, DWORD PTR _aLevel$[ebp]
jl	SHORT $LN4@OutputMess
cmp	DWORD PTR ?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA, 4 
jge	SHORT $LN1@OutputMess
cmp	DWORD PTR _aLevel$[ebp], 3
jge	SHORT $LN4@OutputMess
movzx	ecx, BYTE PTR _aNoNewline$[ebp]
test	ecx, ecx
je	SHORT $LN6@OutputMess
mov	DWORD PTR tv70[ebp], OFFSET ??_C@_00CNPNBAHC@?$AA@
jmp	SHORT $LN7@OutputMess
mov	DWORD PTR tv70[ebp], OFFSET ??_C@_01EEMJAFIK@?6?$AA@
mov	esi, esp
mov	edx, DWORD PTR tv70[ebp]
push	edx
mov	ecx, DWORD PTR _aString$[ebp]
call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ 
push	eax
push	OFFSET ??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@
call	DWORD PTR __imp__printf
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z PROC 
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR ?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA 
cmp	eax, DWORD PTR _aLevel$[ebp]
jl	SHORT $LN3@ShouldOutp
cmp	DWORD PTR ?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA, 4 
jge	SHORT $LN1@ShouldOutp
cmp	DWORD PTR _aLevel$[ebp], 3
jge	SHORT $LN3@ShouldOutp
mov	al, 1
jmp	SHORT $LN4@ShouldOutp
xor	al, al
pop	ebp
ret	0
ENDP
?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@Orphan_ran
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN12@Orphan_ran
DD	-24					
DD	4
DD	$LN10@Orphan_ran
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reserve@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEII@Z 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z 
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z 
mov	DWORD PTR __Ptr$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAPAVDrawEventRecorderPrivate@gfx@mozilla@@@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@PAPAV234@00@Z 
jmp	SHORT $LN5@Reallocate
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Reallocate
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Size$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN1@Reallocate
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+12]
sub	edx, DWORD PTR [ecx+4]
sar	edx, 2
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR __Size$[ebp]
mov	edx, DWORD PTR __Ptr$[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Ptr$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__ehhandler$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Inside@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBE_NPBQAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
cmp	ecx, DWORD PTR [eax+8]
jae	SHORT $LN3@Inside
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
mov	DWORD PTR tv76[ebp], 1
jmp	SHORT $LN4@Inside
mov	DWORD PTR tv76[ebp], 0
mov	al, BYTE PTR tv76[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow_to@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@YAXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@0@@Z 
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Destroy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN4@Destroy
DD	-9					
DD	1
DD	$LN3@Destroy
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
?max_size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Unused_capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?push_back@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEX$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBE_NPBQAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
movzx	ecx, al
test	ecx, ecx
je	$LN4@push_back
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	??$addressof@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	DWORD PTR __Idx$3[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN3@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR __Idx$3[ebp]
lea	eax, DWORD PTR [ecx+edx*4]
push	eax
call	??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 4
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
jmp	SHORT $LN5@push_back
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+12]
jne	SHORT $LN1@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IAEXI@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@IBEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@0@Z 
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	??$forward@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YA$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@AAPAV123@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PAVDrawEventRecorderPrivate@gfx@mozilla@@PAV123@@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@$$QAPAV234@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 4
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAIABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@SAIABV?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QBEIXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 1073741823				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@YAPAPAVDrawEventRecorderPrivate@gfx@mozilla@@IPAPAV123@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAEXPAPAVDrawEventRecorderPrivate@gfx@mozilla@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GPathBuilderRecording@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1PathBuilderRecording@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1PathBuilderRecording@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1PathBuilder@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1PathBuilder@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1PathBuilderRecording@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VPathBuilder@gfx@mozilla@@@@CAXPAVPathBuilder@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@PAVPathBuilder@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@SAXPAVPathBuilder@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetBackendType@PathBuilderRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 6
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Arc@PathBuilderRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@MMM_N@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	20					
ENDP
??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0PathBuilder@gfx@mozilla@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7PathBuilderRecording@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aBuilder$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@PAVPathBuilder@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR _aFillRule$[ebp]
mov	BYTE PTR [edx+12], al
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1PathBuilder@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
ENDP
__ehhandler$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GDrawTargetRecording@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1DrawTargetRecording@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@CAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign_with_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@ABV0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign_with_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@ABV0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?assign_assuming_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _oldPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aNewPtr$[ebp]
mov	DWORD PTR [edx], eax
cmp	DWORD PTR _oldPtr$[ebp], 0
je	SHORT $LN2@assign_ass
mov	ecx, DWORD PTR _oldPtr$[ebp]
push	ecx
call	?Release@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign_with_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _aRawPtr$[ebp], 0
je	SHORT $LN1@assign_wit
mov	eax, DWORD PTR _aRawPtr$[ebp]
push	eax
call	?AddRef@?$AddRefTraits@VDrawEventRecorderPrivate@gfx@mozilla@@@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@SAXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
mov	ecx, DWORD PTR _aRawPtr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign_assuming_AddRef@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@AAEXPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPattern$[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR _aPattern$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
movsx	ecx, al
mov	DWORD PTR tv69[ebp], ecx
cmp	DWORD PTR tv69[ebp], 3
ja	SHORT $LN13@EnsurePatt
mov	edx, DWORD PTR tv69[ebp]
jmp	DWORD PTR $LN15@EnsurePatt[edx*4]
jmp	SHORT $LN13@EnsurePatt
xor	eax, eax
jne	SHORT $LN7@EnsurePatt
jmp	SHORT $LN13@EnsurePatt
xor	ecx, ecx
jne	SHORT $LN3@EnsurePatt
jmp	SHORT $LN13@EnsurePatt
mov	edx, DWORD PTR _aPattern$[ebp]
mov	DWORD PTR _pat$1[ebp], edx
push	OFFSET $SG87311
mov	ecx, DWORD PTR _pat$1[ebp]
add	ecx, 4
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z 
add	esp, 12					
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
npad	3
DD	$LN10@EnsurePatt
DD	$LN1@EnsurePatt
DD	$LN7@EnsurePatt
DD	$LN3@EnsurePatt
ENDP
?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 180				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-192]
mov	ecx, 45					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??0?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR _aPath$[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR _aPath$[ebp]
mov	eax, DWORD PTR [edx+4]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
cmp	al, 6
jne	SHORT $LN2@EnsurePath
mov	ecx, DWORD PTR _aPath$[ebp]
push	ecx
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??4?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@PAVPathRecording@gfx@mozilla@@@Z 
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T11[ebp], esp
mov	edx, DWORD PTR _aPath$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN5@EnsurePath
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ 
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	$LN7@EnsurePath
jmp	$LN4@EnsurePath
xor	eax, eax
jne	SHORT $LN2@EnsurePath
mov	ecx, DWORD PTR _aPath$[ebp]
mov	edx, DWORD PTR [ecx]
mov	esi, esp
mov	ecx, DWORD PTR _aPath$[ebp]
mov	eax, DWORD PTR [edx+36]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR _fillRule$14[ebp], al
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv143[ebp], eax
mov	esi, esp
movzx	ecx, BYTE PTR _fillRule$14[ebp]
push	ecx
lea	edx, DWORD PTR $T10[ebp]
push	edx
mov	eax, DWORD PTR tv143[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv143[ebp]
mov	eax, DWORD PTR [edx+144]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv262[ebp], eax
mov	ecx, DWORD PTR tv262[ebp]
mov	DWORD PTR tv249[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR tv249[ebp]
push	edx
lea	ecx, DWORD PTR _builder$13[ebp]
call	??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 4
lea	ecx, DWORD PTR $T10[ebp]
call	??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
push	32					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T8[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
cmp	DWORD PTR $T8[ebp], 0
je	SHORT $LN9@EnsurePath
movzx	eax, BYTE PTR _fillRule$14[ebp]
push	eax
lea	ecx, DWORD PTR _builder$13[ebp]
call	??B?$RefPtr@VPathBuilder@gfx@mozilla@@@@QBEPAVPathBuilder@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T8[ebp]
call	??0PathBuilderRecording@gfx@mozilla@@QAE@PAVPathBuilder@12@W4FillRule@12@@Z 
mov	DWORD PTR tv166[ebp], eax
jmp	SHORT $LN10@EnsurePath
mov	DWORD PTR tv166[ebp], 0
mov	ecx, DWORD PTR tv166[ebp]
mov	DWORD PTR $T9[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	edx, DWORD PTR $T9[ebp]
push	edx
lea	ecx, DWORD PTR _builderRecording$12[ebp]
call	??0?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@PAVPathBuilderRecording@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 6
lea	ecx, DWORD PTR _builderRecording$12[ebp]
call	??B?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ 
mov	esi, esp
push	eax
mov	eax, DWORD PTR _aPath$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _aPath$[ebp]
mov	eax, DWORD PTR [edx+32]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
lea	ecx, DWORD PTR _builderRecording$12[ebp]
call	??C?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QBEPAVPathBuilderRecording@gfx@mozilla@@XZ 
mov	DWORD PTR tv187[ebp], eax
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	esi, esp
lea	edx, DWORD PTR $T7[ebp]
push	edx
mov	eax, DWORD PTR tv187[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv187[ebp]
mov	eax, DWORD PTR [edx+32]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv154[ebp], eax
mov	ecx, DWORD PTR tv154[ebp]
mov	DWORD PTR tv254[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	ecx, DWORD PTR tv254[ebp]
call	??$downcast@VPathRecording@gfx@mozilla@@@?$already_AddRefed@VPath@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ 
mov	DWORD PTR tv264[ebp], eax
mov	edx, DWORD PTR tv264[ebp]
mov	DWORD PTR tv256[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 8
mov	eax, DWORD PTR tv256[ebp]
push	eax
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??$?4VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 7
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 6
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 4
lea	ecx, DWORD PTR _builderRecording$12[ebp]
call	??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR _builder$13[ebp]
call	??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??B?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR $T5[ebp]
call	??0RecordedPathCreation@gfx@mozilla@@QAE@PAVPathRecording@12@@Z 
mov	DWORD PTR tv265[ebp], eax
mov	ecx, DWORD PTR tv265[ebp]
mov	DWORD PTR tv258[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	edx, DWORD PTR tv258[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T5[ebp]
call	??1RecordedPathCreation@gfx@mozilla@@UAE@XZ 
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	eax, DWORD PTR _pathRecording$[ebp]
push	eax
call	??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	DWORD PTR $T3[ebp], eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
add	eax, 36					
mov	ecx, eax
call	?push_back@?$vector@PAVDrawEventRecorderPrivate@gfx@mozilla@@V?$allocator@PAVDrawEventRecorderPrivate@gfx@mozilla@@@std@@@std@@QAEX$$QAPAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	?forget@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@XZ 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN26@EnsurePath
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 192				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	3
DD	3
DD	$LN25@EnsurePath
DD	-24					
DD	4
DD	$LN21@EnsurePath
DD	-40					
DD	4
DD	$LN22@EnsurePath
DD	-52					
DD	4
DD	$LN23@EnsurePath
DB	98					
DB	117					
DB	105					
DB	108					
DB	100					
DB	101					
DB	114					
DB	82					
DB	101					
DB	99					
DB	111					
DB	114					
DB	100					
DB	105					
DB	110					
DB	103					
DB	0
DB	98					
DB	117					
DB	105					
DB	108					
DB	100					
DB	101					
DB	114					
DB	0
DB	112					
DB	97					
DB	116					
DB	104					
DB	82					
DB	101					
DB	99					
DB	111					
DB	114					
DB	100					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$0 PROC
lea	ecx, DWORD PTR _pathRecording$[ebp]
jmp	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN13@EnsurePath
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$2 PROC
lea	ecx, DWORD PTR $T10[ebp]
jmp	??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$3 PROC
lea	ecx, DWORD PTR _builder$13[ebp]
jmp	??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$4 PROC
mov	eax, DWORD PTR $T8[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$5 PROC
lea	ecx, DWORD PTR _builderRecording$12[ebp]
jmp	??1?$RefPtr@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$6 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$already_AddRefed@VPath@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$7 PROC
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z$8 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1RecordedPathCreation@gfx@mozilla@@UAE@XZ 
ENDP
__ehhandler$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-192]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?IsCurrentGroupOpaque@DrawTargetRecording@gfx@mozilla@@UAE_NXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+176]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetNativeSurface@DrawTargetRecording@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR _aType$[ebp]
push	eax
mov	ecx, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+160]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-84]
mov	ecx, 18					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aTransform$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedSetTransform@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVMatrix@12@@Z 
mov	DWORD PTR tv131[ebp], eax
mov	edx, DWORD PTR tv131[ebp]
mov	DWORD PTR tv130[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv130[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedSetTransform@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _aTransform$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv93[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aTransform$[ebp]
push	edx
mov	eax, DWORD PTR tv93[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv93[ebp]
mov	eax, DWORD PTR [edx+156]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 84					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedSetTransform@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?SetTransform@DrawTargetRecording@gfx@mozilla@@UAEXABVMatrix@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 112				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 28					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv70[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR _aType$[ebp]
push	eax
lea	ecx, DWORD PTR $T7[ebp]
push	ecx
mov	edx, DWORD PTR tv70[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv70[ebp]
mov	edx, DWORD PTR [eax+152]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv176[ebp], eax
mov	eax, DWORD PTR tv176[ebp]
mov	DWORD PTR tv164[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv164[ebp]
push	ecx
lea	ecx, DWORD PTR _node$[ebp]
call	??$?0VFilterNode@gfx@mozilla@@@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ 
push	16					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T5[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
cmp	DWORD PTR $T5[ebp], 0
je	SHORT $LN3@CreateFilt
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _node$[ebp]
call	??B?$RefPtr@VFilterNode@gfx@mozilla@@@@QBEPAVFilterNode@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T5[ebp]
call	??0FilterNodeRecording@gfx@mozilla@@QAE@PAVFilterNode@12@PAVDrawEventRecorderPrivate@12@@Z 
mov	DWORD PTR tv131[ebp], eax
jmp	SHORT $LN4@CreateFilt
mov	DWORD PTR tv131[ebp], 0
mov	edx, DWORD PTR tv131[ebp]
mov	DWORD PTR $T6[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR $T6[ebp]
push	eax
lea	ecx, DWORD PTR _retNode$[ebp]
call	??0?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@PAVFilterNode@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
movzx	ecx, BYTE PTR _aType$[ebp]
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR _retNode$[ebp]
push	edx
call	??$?0VFilterNode@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VFilterNode@gfx@mozilla@@@@@Z 
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedFilterNodeCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4FilterType@12@@Z 
mov	DWORD PTR tv81[ebp], eax
mov	eax, DWORD PTR tv81[ebp]
mov	DWORD PTR tv169[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR tv169[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedFilterNodeCreation@gfx@mozilla@@UAE@XZ 
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	ecx, DWORD PTR _retNode$[ebp]
call	?forget@?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@XZ 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR _retNode$[ebp]
call	??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _node$[ebp]
call	??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@CreateFilt
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	2
DD	$LN15@CreateFilt
DD	-24					
DD	4
DD	$LN12@CreateFilt
DD	-36					
DD	4
DD	$LN13@CreateFilt
DB	114					
DB	101					
DB	116					
DB	78					
DB	111					
DB	100					
DB	101					
DB	0
DB	110					
DB	111					
DB	100					
DB	101					
DB	0
ENDP
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$0 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$1 PROC
lea	ecx, DWORD PTR _node$[ebp]
jmp	??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$2 PROC
mov	eax, DWORD PTR $T5[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$3 PROC
lea	ecx, DWORD PTR _retNode$[ebp]
jmp	??1?$RefPtr@VFilterNode@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$4 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedFilterNodeCreation@gfx@mozilla@@UAE@XZ 
ENDP
__unwindfunclet$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z$5 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN11@CreateFilt
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VFilterNode@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-124]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CreateFilter@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 120				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-132]
mov	ecx, 30					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv70[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR _aExtendMode$[ebp]
push	eax
mov	ecx, DWORD PTR _aNumStops$[ebp]
push	ecx
mov	edx, DWORD PTR _aStops$[ebp]
push	edx
lea	eax, DWORD PTR $T7[ebp]
push	eax
mov	ecx, DWORD PTR tv70[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv70[ebp]
mov	eax, DWORD PTR [edx+148]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv180[ebp], eax
mov	ecx, DWORD PTR tv180[ebp]
mov	DWORD PTR tv168[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR tv168[ebp]
push	edx
lea	ecx, DWORD PTR _stops$[ebp]
call	??$?0VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ 
push	16					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T5[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
cmp	DWORD PTR $T5[ebp], 0
je	SHORT $LN3@CreateGrad
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _stops$[ebp]
call	??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T5[ebp]
call	??0GradientStopsRecording@gfx@mozilla@@QAE@PAVGradientStops@12@PAVDrawEventRecorderPrivate@12@@Z 
mov	DWORD PTR tv133[ebp], eax
jmp	SHORT $LN4@CreateGrad
mov	DWORD PTR tv133[ebp], 0
mov	eax, DWORD PTR tv133[ebp]
mov	DWORD PTR $T6[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR $T6[ebp]
push	ecx
lea	ecx, DWORD PTR _retStops$[ebp]
call	??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
movzx	edx, BYTE PTR _aExtendMode$[ebp]
push	edx
mov	eax, DWORD PTR _aNumStops$[ebp]
push	eax
mov	ecx, DWORD PTR _aStops$[ebp]
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR _retStops$[ebp]
push	edx
call	??$?0VGradientStops@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VGradientStops@gfx@mozilla@@@@@Z 
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedGradientStopsCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAUGradientStop@12@IW4ExtendMode@12@@Z 
mov	DWORD PTR tv83[ebp], eax
mov	eax, DWORD PTR tv83[ebp]
mov	DWORD PTR tv173[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR tv173[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedGradientStopsCreation@gfx@mozilla@@UAE@XZ 
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	ecx, DWORD PTR _retStops$[ebp]
call	?forget@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@XZ 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR _retStops$[ebp]
call	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _stops$[ebp]
call	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@CreateGrad
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 132				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
npad	1
DD	2
DD	$LN15@CreateGrad
DD	-24					
DD	4
DD	$LN12@CreateGrad
DD	-36					
DD	4
DD	$LN13@CreateGrad
DB	114					
DB	101					
DB	116					
DB	83					
DB	116					
DB	111					
DB	112					
DB	115					
DB	0
DB	115					
DB	116					
DB	111					
DB	112					
DB	115					
DB	0
ENDP
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$0 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$1 PROC
lea	ecx, DWORD PTR _stops$[ebp]
jmp	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$2 PROC
mov	eax, DWORD PTR $T5[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$3 PROC
lea	ecx, DWORD PTR _retStops$[ebp]
jmp	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$4 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedGradientStopsCreation@gfx@mozilla@@UAE@XZ 
ENDP
__unwindfunclet$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z$5 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN11@CreateGrad
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-132]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CreateGradientStops@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 48					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv70[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR _aFillRule$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	edx, DWORD PTR tv70[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv70[ebp]
mov	edx, DWORD PTR [eax+144]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv132[ebp], eax
mov	eax, DWORD PTR tv132[ebp]
mov	DWORD PTR tv91[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv91[ebp]
push	ecx
lea	ecx, DWORD PTR _builder$[ebp]
call	??$?0VPathBuilder@gfx@mozilla@@@?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
lea	edx, DWORD PTR _aFillRule$[ebp]
push	edx
lea	eax, DWORD PTR _builder$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
call	??$MakeAndAddRef@VPathBuilderRecording@gfx@mozilla@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@23@@mozilla@@YA?AU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@AAV?$RefPtr@VPathBuilder@gfx@mozilla@@@@AAW4FillRule@gfx@0@@Z 
add	esp, 12					
mov	DWORD PTR tv65[ebp], eax
mov	edx, DWORD PTR tv65[ebp]
mov	DWORD PTR tv94[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	eax, DWORD PTR tv94[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0VPathBuilderRecording@gfx@mozilla@@@?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _builder$[ebp]
call	??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@CreatePath
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	3
DD	1
DD	$LN10@CreatePath
DD	-24					
DD	4
DD	$LN8@CreatePath
DB	98					
DB	117					
DB	105					
DB	108					
DB	100					
DB	101					
DB	114					
DB	0
ENDP
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$0 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$1 PROC
lea	ecx, DWORD PTR _builder$[ebp]
jmp	??1?$RefPtr@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$2 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$already_AddRefed@VPathBuilderRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z$3 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN7@CreatePath
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CreatePathBuilder@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR $T4[ebp], eax
lea	ecx, DWORD PTR _aFormat$[ebp]
push	ecx
mov	edx, DWORD PTR _aSize$[ebp]
push	edx
lea	eax, DWORD PTR $T4[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
call	??$MakeAndAddRef@VDrawTargetRecording@gfx@mozilla@@QBV123@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@AAW4SurfaceFormat@23@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@$$QBQBVDrawTargetRecording@gfx@0@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@30@AAW4SurfaceFormat@30@@Z 
add	esp, 16					
mov	DWORD PTR tv81[ebp], eax
mov	edx, DWORD PTR tv81[ebp]
mov	DWORD PTR tv76[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR tv76[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0VDrawTargetRecording@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$already_AddRefed@VDrawTargetRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN5@CreateSimi
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CreateSimilarDrawTarget@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 88					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-100]
mov	ecx, 22					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv70[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	edx, DWORD PTR tv70[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv70[ebp]
mov	edx, DWORD PTR [eax+128]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv178[ebp], eax
mov	eax, DWORD PTR tv178[ebp]
mov	DWORD PTR tv164[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv164[ebp]
push	ecx
lea	ecx, DWORD PTR _surf$[ebp]
call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	24					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T4[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
cmp	DWORD PTR $T4[ebp], 0
je	SHORT $LN3@CreateSour
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _surf$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T4[ebp]
call	??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z 
mov	DWORD PTR tv131[ebp], eax
jmp	SHORT $LN4@CreateSour
mov	DWORD PTR tv131[ebp], 0
mov	edx, DWORD PTR tv131[ebp]
mov	DWORD PTR $T5[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR $T5[ebp]
push	eax
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR _surf$[ebp]
call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
mov	DWORD PTR tv139[ebp], eax
mov	esi, esp
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	edx, DWORD PTR tv139[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv139[ebp]
mov	edx, DWORD PTR [eax+20]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
mov	eax, DWORD PTR tv81[ebp]
mov	DWORD PTR tv169[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR tv169[ebp]
push	ecx
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	OFFSET $SG86796
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z 
add	esp, 16					
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	ecx, DWORD PTR _retSurf$[ebp]
call	?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _surf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@CreateSour
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 100				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	2
DD	3
DD	$LN17@CreateSour
DD	-24					
DD	4
DD	$LN13@CreateSour
DD	-36					
DD	4
DD	$LN14@CreateSour
DD	-48					
DD	4
DD	$LN15@CreateSour
DB	100					
DB	97					
DB	116					
DB	97					
DB	83					
DB	117					
DB	114					
DB	102					
DB	0
DB	114					
DB	101					
DB	116					
DB	83					
DB	117					
DB	114					
DB	102					
DB	0
DB	115					
DB	117					
DB	114					
DB	102					
DB	0
ENDP
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$0 PROC
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$1 PROC
lea	ecx, DWORD PTR _surf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$2 PROC
mov	eax, DWORD PTR $T4[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$3 PROC
lea	ecx, DWORD PTR _retSurf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$5 PROC
lea	ecx, DWORD PTR _dataSurf$[ebp]
jmp	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z$6 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN12@CreateSour
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-100]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CreateSourceSurfaceFromNativeSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 100				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-112]
mov	ecx, 25					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv70[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
lea	ecx, DWORD PTR $T7[ebp]
push	ecx
mov	edx, DWORD PTR tv70[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv70[ebp]
mov	edx, DWORD PTR [eax+124]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv192[ebp], eax
mov	eax, DWORD PTR tv192[ebp]
mov	DWORD PTR tv176[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv176[ebp]
push	ecx
lea	ecx, DWORD PTR _surf$[ebp]
call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	24					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T5[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
cmp	DWORD PTR $T5[ebp], 0
je	SHORT $LN4@OptimizeSo
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _surf$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T5[ebp]
call	??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z 
mov	DWORD PTR tv131[ebp], eax
jmp	SHORT $LN5@OptimizeSo
mov	DWORD PTR tv131[ebp], 0
mov	edx, DWORD PTR tv131[ebp]
mov	DWORD PTR $T6[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR $T6[ebp]
push	eax
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR _surf$[ebp]
call	??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
mov	DWORD PTR tv139[ebp], eax
mov	esi, esp
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	edx, DWORD PTR tv139[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv139[ebp]
mov	edx, DWORD PTR [eax+20]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
mov	eax, DWORD PTR tv81[ebp]
mov	DWORD PTR tv181[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR tv181[ebp]
push	ecx
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??$?0VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ 
test	eax, eax
jne	SHORT $LN1@OptimizeSo
mov	esi, esp
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	eax, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv135[ebp], eax
mov	ecx, DWORD PTR tv135[ebp]
mov	DWORD PTR tv184[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	edx, DWORD PTR tv184[ebp]
push	edx
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??$?4VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAEAAV0@$$QAU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	OFFSET $SG86776
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?StoreSourceSurface@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PAVDataSourceSurface@12@PBD@Z 
add	esp, 16					
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
lea	ecx, DWORD PTR _retSurf$[ebp]
call	?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR _dataSurf$[ebp]
call	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _surf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@OptimizeSo
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 112				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	2
DD	3
DD	$LN19@OptimizeSo
DD	-24					
DD	4
DD	$LN15@OptimizeSo
DD	-36					
DD	4
DD	$LN16@OptimizeSo
DD	-48					
DD	4
DD	$LN17@OptimizeSo
DB	100					
DB	97					
DB	116					
DB	97					
DB	83					
DB	117					
DB	114					
DB	102					
DB	0
DB	114					
DB	101					
DB	116					
DB	83					
DB	117					
DB	114					
DB	102					
DB	0
DB	115					
DB	117					
DB	114					
DB	102					
DB	0
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$0 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$1 PROC
lea	ecx, DWORD PTR _surf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$2 PROC
mov	eax, DWORD PTR $T5[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$3 PROC
lea	ecx, DWORD PTR _retSurf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$4 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$5 PROC
lea	ecx, DWORD PTR _dataSurf$[ebp]
jmp	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$6 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z$7 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN14@OptimizeSo
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-112]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?OptimizeSourceSurface@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 128				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-140]
mov	ecx, 32					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv70[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR _aFormat$[ebp]
push	eax
mov	ecx, DWORD PTR _aStride$[ebp]
push	ecx
mov	edx, DWORD PTR _aSize$[ebp]
push	edx
mov	eax, DWORD PTR _aData$[ebp]
push	eax
lea	ecx, DWORD PTR $T7[ebp]
push	ecx
mov	edx, DWORD PTR tv70[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv70[ebp]
mov	edx, DWORD PTR [eax+120]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv182[ebp], eax
mov	eax, DWORD PTR tv182[ebp]
mov	DWORD PTR tv170[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv170[ebp]
push	ecx
lea	ecx, DWORD PTR _surf$[ebp]
call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	24					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T5[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
cmp	DWORD PTR $T5[ebp], 0
je	SHORT $LN3@CreateSour
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _surf$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T5[ebp]
call	??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z 
mov	DWORD PTR tv134[ebp], eax
jmp	SHORT $LN4@CreateSour
mov	DWORD PTR tv134[ebp], 0
mov	edx, DWORD PTR tv134[ebp]
mov	DWORD PTR $T6[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR $T6[ebp]
push	eax
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
movzx	ecx, BYTE PTR _aFormat$[ebp]
push	ecx
mov	edx, DWORD PTR _aSize$[ebp]
push	edx
mov	eax, DWORD PTR _aStride$[ebp]
push	eax
mov	ecx, DWORD PTR _aData$[ebp]
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR _retSurf$[ebp]
push	edx
call	??$?0VSourceSurface@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VSourceSurface@gfx@mozilla@@@@@Z 
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z 
mov	DWORD PTR tv84[ebp], eax
mov	eax, DWORD PTR tv84[ebp]
mov	DWORD PTR tv175[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR tv175[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ 
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	ecx, DWORD PTR _retSurf$[ebp]
call	?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _surf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@CreateSour
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 140				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
npad	2
DD	2
DD	$LN15@CreateSour
DD	-24					
DD	4
DD	$LN12@CreateSour
DD	-36					
DD	4
DD	$LN13@CreateSour
DB	114					
DB	101					
DB	116					
DB	83					
DB	117					
DB	114					
DB	102					
DB	0
DB	115					
DB	117					
DB	114					
DB	102					
DB	0
ENDP
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$0 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$1 PROC
lea	ecx, DWORD PTR _surf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$2 PROC
mov	eax, DWORD PTR $T5[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$3 PROC
lea	ecx, DWORD PTR _retSurf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$4 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ 
ENDP
__unwindfunclet$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z$5 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN11@CreateSour
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-140]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CreateSourceSurfaceFromData@DrawTargetRecording@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 48					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedPopLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z 
mov	DWORD PTR tv91[ebp], eax
mov	ecx, DWORD PTR tv91[ebp]
mov	DWORD PTR tv90[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv90[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedPopLayer@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv86[ebp], eax
mov	eax, DWORD PTR tv86[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv86[ebp]
mov	eax, DWORD PTR [edx+116]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedPopLayer@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?PopLayer@DrawTargetRecording@gfx@mozilla@@UAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 120				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-132]
mov	ecx, 30					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _aMask$[ebp], 0
je	SHORT $LN1@PushLayer
push	OFFSET $SG86719
mov	eax, DWORD PTR _aMask$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z 
add	esp, 12					
movss	xmm0, DWORD PTR _aOpacity$[ebp]
ucomiss	xmm0, DWORD PTR __real@00000000
lahf
test	ah, 68					
jnp	SHORT $LN4@PushLayer
mov	BYTE PTR tv86[ebp], 1
jmp	SHORT $LN5@PushLayer
mov	BYTE PTR tv86[ebp], 0
movzx	ecx, BYTE PTR _aCopyBackground$[ebp]
push	ecx
mov	edx, DWORD PTR _aBounds$[ebp]
push	edx
mov	eax, DWORD PTR _aMaskTransform$[ebp]
push	eax
mov	ecx, DWORD PTR _aMask$[ebp]
push	ecx
push	ecx
movss	xmm0, DWORD PTR _aOpacity$[ebp]
movss	DWORD PTR [esp], xmm0
movzx	edx, BYTE PTR tv86[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z 
mov	DWORD PTR tv146[ebp], eax
mov	ecx, DWORD PTR tv146[ebp]
mov	DWORD PTR tv145[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv145[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedPushLayer@gfx@mozilla@@UAE@XZ
movss	xmm0, DWORD PTR _aOpacity$[ebp]
ucomiss	xmm0, DWORD PTR __real@00000000
lahf
test	ah, 68					
jnp	SHORT $LN6@PushLayer
mov	BYTE PTR tv142[ebp], 1
jmp	SHORT $LN7@PushLayer
mov	BYTE PTR tv142[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv133[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR _aCopyBackground$[ebp]
push	eax
mov	ecx, DWORD PTR _aBounds$[ebp]
push	ecx
mov	edx, DWORD PTR _aMaskTransform$[ebp]
push	edx
mov	eax, DWORD PTR _aMask$[ebp]
push	eax
push	ecx
movss	xmm0, DWORD PTR _aOpacity$[ebp]
movss	DWORD PTR [esp], xmm0
movzx	ecx, BYTE PTR tv142[ebp]
push	ecx
mov	edx, DWORD PTR tv133[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv133[ebp]
mov	edx, DWORD PTR [eax+112]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 132				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedPushLayer@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-132]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?PushLayer@DrawTargetRecording@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 48					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedPopClip@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z 
mov	DWORD PTR tv91[ebp], eax
mov	ecx, DWORD PTR tv91[ebp]
mov	DWORD PTR tv90[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv90[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedPopClip@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv86[ebp], eax
mov	eax, DWORD PTR tv86[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv86[ebp]
mov	eax, DWORD PTR [edx+108]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedPopClip@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?PopClip@DrawTargetRecording@gfx@mozilla@@UAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 64					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-76]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRect$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedPushClipRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z 
mov	DWORD PTR tv93[ebp], eax
mov	edx, DWORD PTR tv93[ebp]
mov	DWORD PTR tv92[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv92[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv87[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aRect$[ebp]
push	ecx
mov	edx, DWORD PTR tv87[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv87[ebp]
mov	edx, DWORD PTR [eax+104]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 76					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-76]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?PushClipRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 84					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-96]
mov	ecx, 21					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPath$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z 
mov	DWORD PTR tv153[ebp], eax
mov	edx, DWORD PTR tv153[ebp]
mov	DWORD PTR tv149[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv149[ebp]
push	eax
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR _pathRecording$[ebp]
push	edx
call	??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z 
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedPushClip@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@@Z 
mov	DWORD PTR tv65[ebp], eax
mov	ecx, DWORD PTR tv65[ebp]
mov	DWORD PTR tv152[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR tv152[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedPushClip@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv139[ebp], eax
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
add	eax, 12					
mov	ecx, eax
call	??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ 
mov	esi, esp
push	eax
mov	eax, DWORD PTR tv139[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv139[ebp]
mov	eax, DWORD PTR [edx+100]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@PushClip
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 96					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
npad	1
DD	1
DD	$LN8@PushClip
DD	-24					
DD	4
DD	$LN6@PushClip
DB	112					
DB	97					
DB	116					
DB	104					
DB	82					
DB	101					
DB	99					
DB	111					
DB	114					
DB	100					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$0 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$1 PROC
lea	ecx, DWORD PTR _pathRecording$[ebp]
jmp	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z$2 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedPushClip@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-96]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?PushClip@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 212				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-224]
mov	ecx, 53					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aSource$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
push	OFFSET $SG86522
mov	ecx, DWORD PTR _aMask$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z 
add	esp, 12					
mov	edx, DWORD PTR _aOptions$[ebp]
push	edx
lea	eax, DWORD PTR _aOffset$[ebp]
push	eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
mov	edx, DWORD PTR _aMask$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR _aSource$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv160[ebp], eax
mov	edx, DWORD PTR tv160[ebp]
mov	DWORD PTR tv157[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv157[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv140[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aOffset$[ebp+4]
push	edx
mov	eax, DWORD PTR _aOffset$[ebp]
push	eax
mov	ecx, DWORD PTR _aMask$[ebp]
push	ecx
call	?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR _aSource$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv161[ebp], eax
mov	eax, DWORD PTR tv161[ebp]
mov	DWORD PTR tv159[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv159[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
mov	ecx, DWORD PTR tv140[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv140[ebp]
mov	eax, DWORD PTR [edx+96]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 224				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__ehhandler$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-224]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?MaskSurface@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 320				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-332]
mov	ecx, 80					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aSource$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	ecx, DWORD PTR _aMask$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	edx, DWORD PTR _aOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aMask$[ebp]
push	eax
mov	ecx, DWORD PTR _aSource$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z 
mov	DWORD PTR tv151[ebp], eax
mov	eax, DWORD PTR tv151[ebp]
mov	DWORD PTR tv146[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv146[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedMask@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv93[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aMask$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv152[ebp], eax
mov	ecx, DWORD PTR tv152[ebp]
mov	DWORD PTR tv148[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv148[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
mov	edx, DWORD PTR _aSource$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv153[ebp], eax
mov	eax, DWORD PTR tv153[ebp]
mov	DWORD PTR tv150[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR tv150[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
mov	ecx, DWORD PTR tv93[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv93[ebp]
mov	eax, DWORD PTR [edx+92]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T2[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 332				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedMask@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__unwindfunclet$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$2 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__ehhandler$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-332]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?Mask@DrawTargetRecording@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 324				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-336]
mov	ecx, 81					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _aFont$[ebp]
call	?GetUserData@ScaledFont@gfx@mozilla@@QAEPAXPAUUserDataKey@23@@Z 
test	eax, eax
jne	$LN3@FillGlyphs
mov	ecx, DWORD PTR _aFont$[ebp]
push	ecx
lea	ecx, DWORD PTR _fontData$10[ebp]
call	??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	edx, DWORD PTR _fontDetails$9[ebp]
push	edx
lea	ecx, DWORD PTR _fontData$10[ebp]
call	?GetFontDetails@RecordedFontData@gfx@mozilla@@QAE_NAAURecordedFontDetails@23@@Z 
movzx	eax, al
test	eax, eax
je	$LN2@FillGlyphs
mov	ecx, DWORD PTR _fontDetails$9[ebp+4]
push	ecx
mov	edx, DWORD PTR _fontDetails$9[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z 
movzx	eax, al
test	eax, eax
jne	SHORT $LN1@FillGlyphs
lea	ecx, DWORD PTR _fontData$10[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	edx, DWORD PTR _fontDetails$9[ebp+4]
push	edx
mov	eax, DWORD PTR _fontDetails$9[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?AddStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAEX_K@Z 
sub	esp, 24					
mov	ecx, esp
mov	edx, DWORD PTR _fontDetails$9[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _fontDetails$9[ebp+4]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _fontDetails$9[ebp+8]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _fontDetails$9[ebp+12]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR _fontDetails$9[ebp+16]
mov	DWORD PTR [ecx+16], edx
mov	eax, DWORD PTR _fontDetails$9[ebp+20]
mov	DWORD PTR [ecx+20], eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
mov	edx, DWORD PTR _aFont$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T7[ebp]
call	??0RecordedScaledFontCreation@gfx@mozilla@@QAE@UReferencePtr@12@URecordedFontDetails@12@@Z 
mov	DWORD PTR tv74[ebp], eax
mov	eax, DWORD PTR tv74[ebp]
mov	DWORD PTR tv229[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv229[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T7[ebp]
call	??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ
push	8
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T4[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
cmp	DWORD PTR $T4[ebp], 0
je	SHORT $LN6@FillGlyphs
mov	ecx, DWORD PTR $T4[ebp]
call	??0RecordingFontUserData@gfx@mozilla@@QAE@XZ
mov	DWORD PTR tv168[ebp], eax
jmp	SHORT $LN7@FillGlyphs
mov	DWORD PTR tv168[ebp], 0
mov	edx, DWORD PTR tv168[ebp]
mov	DWORD PTR $T5[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T5[ebp]
mov	DWORD PTR _userData$8[ebp], eax
mov	ecx, DWORD PTR _userData$8[ebp]
mov	edx, DWORD PTR _aFont$[ebp]
mov	DWORD PTR [ecx], edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 60					
push	eax
mov	ecx, DWORD PTR _userData$8[ebp]
add	ecx, 4
call	??4?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAEAAV0@ABV0@@Z 
push	OFFSET ?RecordingFontUserDataDestroyFunc@gfx@mozilla@@YAXPAX@Z 
mov	ecx, DWORD PTR _userData$8[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	?get@?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR _aFont$[ebp]
call	?AddUserData@ScaledFont@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _fontData$10[ebp]
call	??1RecordedFontData@gfx@mozilla@@UAE@XZ	
mov	edx, DWORD PTR _aBuffer$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _aBuffer$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _aOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _aFont$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z 
mov	DWORD PTR tv235[ebp], eax
mov	ecx, DWORD PTR tv235[ebp]
mov	DWORD PTR tv232[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR tv232[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedFillGlyphs@gfx@mozilla@@UAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv219[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aRenderingOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aPattern$[ebp]
push	edx
mov	eax, DWORD PTR _aBuffer$[ebp]
push	eax
mov	ecx, DWORD PTR _aFont$[ebp]
push	ecx
mov	edx, DWORD PTR tv219[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv219[ebp]
mov	edx, DWORD PTR [eax+88]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@FillGlyphs
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 336				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
npad	3
DD	2
DD	$LN15@FillGlyphs
DD	-88					
DD	64					
DD	$LN12@FillGlyphs
DD	-120					
DD	24					
DD	$LN13@FillGlyphs
DB	102					
DB	111					
DB	110					
DB	116					
DB	68					
DB	101					
DB	116					
DB	97					
DB	105					
DB	108					
DB	115					
DB	0
DB	102					
DB	111					
DB	110					
DB	116					
DB	68					
DB	97					
DB	116					
DB	97					
DB	0
ENDP
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR _fontData$10[ebp]
jmp	??1RecordedFontData@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$2 PROC
mov	eax, DWORD PTR $T4[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$3 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedFillGlyphs@gfx@mozilla@@UAE@XZ 
ENDP
__ehhandler$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-336]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?FillGlyphs@DrawTargetRecording@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 228				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-240]
mov	ecx, 57					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPath$[ebp]
push	eax
lea	ecx, DWORD PTR $T5[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z 
mov	DWORD PTR tv168[ebp], eax
mov	edx, DWORD PTR tv168[ebp]
mov	DWORD PTR tv162[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv162[ebp]
push	eax
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	edx, DWORD PTR _aOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR _pathRecording$[ebp]
push	edx
call	??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z 
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv65[ebp], eax
mov	ecx, DWORD PTR tv65[ebp]
mov	DWORD PTR tv165[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR tv165[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedFill@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv143[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv169[ebp], eax
mov	edx, DWORD PTR tv169[ebp]
mov	DWORD PTR tv167[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR tv167[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
add	eax, 12					
mov	ecx, eax
call	??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ 
push	eax
mov	eax, DWORD PTR tv143[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv143[ebp]
mov	eax, DWORD PTR [edx+84]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T2[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@Fill
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 240				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
npad	2
DD	1
DD	$LN9@Fill
DD	-24					
DD	4
DD	$LN7@Fill
DB	112					
DB	97					
DB	116					
DB	104					
DB	82					
DB	101					
DB	99					
DB	111					
DB	114					
DB	100					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR _pathRecording$[ebp]
jmp	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$2 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedFill@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$3 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__ehhandler$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-240]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?Fill@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 252				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-264]
mov	ecx, 63					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPath$[ebp]
push	eax
lea	ecx, DWORD PTR $T5[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePathStored@DrawTargetRecording@gfx@mozilla@@AAE?AU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@PBVPath@23@@Z 
mov	DWORD PTR tv170[ebp], eax
mov	edx, DWORD PTR tv170[ebp]
mov	DWORD PTR tv164[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv164[ebp]
push	eax
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??$?0VPathRecording@gfx@mozilla@@@?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VPathRecording@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	edx, DWORD PTR _aOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aStrokeOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR _pathRecording$[ebp]
push	edx
call	??$?0VPathRecording@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VPathRecording@gfx@mozilla@@@@@Z 
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv65[ebp], eax
mov	ecx, DWORD PTR tv65[ebp]
mov	DWORD PTR tv167[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR tv167[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedStroke@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv144[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aStrokeOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aPattern$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv171[ebp], eax
mov	eax, DWORD PTR tv171[ebp]
mov	DWORD PTR tv169[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR tv169[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??C?$RefPtr@VPathRecording@gfx@mozilla@@@@QBEPAVPathRecording@gfx@mozilla@@XZ 
add	eax, 12					
mov	ecx, eax
call	??B?$RefPtr@VPath@gfx@mozilla@@@@QBEPAVPath@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR tv144[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv144[ebp]
mov	eax, DWORD PTR [edx+80]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T2[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _pathRecording$[ebp]
call	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN10@Stroke
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 264				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
npad	2
DD	1
DD	$LN9@Stroke
DD	-24					
DD	4
DD	$LN7@Stroke
DB	112					
DB	97					
DB	116					
DB	104					
DB	82					
DB	101					
DB	99					
DB	111					
DB	114					
DB	100					
DB	105					
DB	110					
DB	103					
DB	0
ENDP
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$already_AddRefed@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR _pathRecording$[ebp]
jmp	??1?$RefPtr@VPathRecording@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$2 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedStroke@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$3 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__ehhandler$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-264]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?Stroke@DrawTargetRecording@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 232				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-244]
mov	ecx, 58					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aStrokeOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _aEnd$[ebp]
push	ecx
mov	edx, DWORD PTR _aBegin$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv144[ebp], eax
mov	ecx, DWORD PTR tv144[ebp]
mov	DWORD PTR tv141[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv141[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv93[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aStrokeOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aPattern$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv145[ebp], eax
mov	eax, DWORD PTR tv145[ebp]
mov	DWORD PTR tv143[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv143[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
mov	ecx, DWORD PTR _aEnd$[ebp]
push	ecx
mov	edx, DWORD PTR _aBegin$[ebp]
push	edx
mov	eax, DWORD PTR tv93[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR tv93[ebp]
mov	eax, DWORD PTR [edx+76]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 244				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__ehhandler$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-244]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?StrokeLine@DrawTargetRecording@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 232				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-244]
mov	ecx, 58					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aStrokeOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _aRect$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv142[ebp], eax
mov	eax, DWORD PTR tv142[ebp]
mov	DWORD PTR tv139[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv139[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv92[ebp], eax
mov	esi, esp
mov	edx, DWORD PTR _aOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aStrokeOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv143[ebp], eax
mov	edx, DWORD PTR tv143[ebp]
mov	DWORD PTR tv141[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv141[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
mov	eax, DWORD PTR _aRect$[ebp]
push	eax
mov	ecx, DWORD PTR tv92[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv92[ebp]
mov	eax, DWORD PTR [edx+72]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 244				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__ehhandler$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-244]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?StrokeRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 208				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-220]
mov	ecx, 52					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?EnsurePatternDependenciesStored@DrawTargetRecording@gfx@mozilla@@AAEXABVPattern@23@@Z 
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aPattern$[ebp]
push	edx
mov	eax, DWORD PTR _aRect$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv140[ebp], eax
mov	edx, DWORD PTR tv140[ebp]
mov	DWORD PTR tv137[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv137[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedFillRect@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv91[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aPattern$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??0AdjustedPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z 
mov	DWORD PTR tv141[ebp], eax
mov	eax, DWORD PTR tv141[ebp]
mov	DWORD PTR tv139[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv139[ebp]
call	??BAdjustedPattern@gfx@mozilla@@QAEPAVPattern@12@XZ 
push	eax
mov	ecx, DWORD PTR _aRect$[ebp]
push	ecx
mov	edx, DWORD PTR tv91[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv91[ebp]
mov	edx, DWORD PTR [eax+68]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 220				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedFillRect@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1AdjustedPattern@gfx@mozilla@@QAE@XZ	
ENDP
__ehhandler$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-220]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?FillRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 84					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-96]
mov	ecx, 21					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET $SG86688
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z 
add	esp, 12					
mov	ecx, DWORD PTR _aDestination$[ebp]
push	ecx
mov	edx, DWORD PTR _aSourceRect$[ebp]
push	edx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedCopySurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@@Z 
mov	DWORD PTR tv147[ebp], eax
mov	edx, DWORD PTR tv147[ebp]
mov	DWORD PTR tv146[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv146[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedCopySurface@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv137[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aDestination$[ebp]
push	ecx
mov	edx, DWORD PTR _aSourceRect$[ebp]
push	edx
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
call	?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv137[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv137[ebp]
mov	eax, DWORD PTR [edx+60]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 96					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedCopySurface@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-96]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CopySurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 64					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-76]
mov	ecx, 16					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRect$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0RecordedClearRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z 
mov	DWORD PTR tv93[ebp], eax
mov	edx, DWORD PTR tv93[ebp]
mov	DWORD PTR tv92[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv92[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1RecordedClearRect@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv87[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _aRect$[ebp]
push	ecx
mov	edx, DWORD PTR tv87[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv87[ebp]
mov	edx, DWORD PTR [eax+56]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 76					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1RecordedClearRect@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-76]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?ClearRect@DrawTargetRecording@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 100				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-112]
mov	ecx, 25					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET $SG86581
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z 
add	esp, 12					
movzx	ecx, BYTE PTR _aOp$[ebp]
push	ecx
push	ecx
movss	xmm0, DWORD PTR _aSigma$[ebp]
movss	DWORD PTR [esp], xmm0
mov	edx, DWORD PTR _aOffset$[ebp]
push	edx
mov	eax, DWORD PTR _aColor$[ebp]
push	eax
mov	ecx, DWORD PTR _aDest$[ebp]
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _aSurface$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedDrawSurfaceWithShadow@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUColor@12@2MW4CompositionOp@12@@Z 
mov	DWORD PTR tv153[ebp], eax
mov	ecx, DWORD PTR tv153[ebp]
mov	DWORD PTR tv152[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv152[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv140[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR _aOp$[ebp]
push	eax
push	ecx
movss	xmm0, DWORD PTR _aSigma$[ebp]
movss	DWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _aOffset$[ebp]
push	ecx
mov	edx, DWORD PTR _aColor$[ebp]
push	edx
mov	eax, DWORD PTR _aDest$[ebp]
push	eax
mov	ecx, DWORD PTR _aSurface$[ebp]
push	ecx
call	?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR tv140[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv140[ebp]
mov	edx, DWORD PTR [eax+52]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 112				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-112]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?DrawSurfaceWithShadow@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 92					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-104]
mov	ecx, 23					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@DrawFilter
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aDestPoint$[ebp]
push	edx
mov	eax, DWORD PTR _aSourceRect$[ebp]
push	eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _aNode$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedDrawFilter@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv144[ebp], eax
mov	ecx, DWORD PTR tv144[ebp]
mov	DWORD PTR tv143[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv143[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv133[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aDestPoint$[ebp]
push	ecx
mov	edx, DWORD PTR _aSourceRect$[ebp]
push	edx
mov	eax, DWORD PTR _aNode$[ebp]
push	eax
call	?GetFilterNode@FilterNodeRecording@gfx@mozilla@@SAPAVFilterNode@23@PAV423@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv133[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv133[ebp]
mov	eax, DWORD PTR [edx+48]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 104				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-104]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?DrawFilter@DrawTargetRecording@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 108				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-120]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET $SG86569
mov	eax, DWORD PTR _aSurface$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
call	?EnsureSurfaceStored@gfx@mozilla@@YAXPAVDrawEventRecorderPrivate@12@PAVSourceSurface@12@PBD@Z 
add	esp, 12					
mov	ecx, DWORD PTR _aOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aSurfOptions$[ebp]
push	edx
mov	eax, DWORD PTR _aSource$[ebp]
push	eax
mov	ecx, DWORD PTR _aDest$[ebp]
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _aSurface$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedDrawSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@2ABUDrawSurfaceOptions@12@ABUDrawOptions@12@@Z 
mov	DWORD PTR tv151[ebp], eax
mov	ecx, DWORD PTR tv151[ebp]
mov	DWORD PTR tv150[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv150[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv139[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR _aOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _aSurfOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _aSource$[ebp]
push	edx
mov	eax, DWORD PTR _aDest$[ebp]
push	eax
mov	ecx, DWORD PTR _aSurface$[ebp]
push	ecx
call	?GetSourceSurface@gfx@mozilla@@YAPAVSourceSurface@12@PAV312@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR tv139[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv139[ebp]
mov	edx, DWORD PTR [eax+44]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 120				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-120]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?DrawSurface@DrawTargetRecording@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?Flush@DrawTargetRecording@gfx@mozilla@@UAEXXZ PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+36]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetSize@DrawTargetRecording@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 112				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 28					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv70[ebp], eax
mov	esi, esp
lea	eax, DWORD PTR $T7[ebp]
push	eax
mov	ecx, DWORD PTR tv70[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv70[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv179[ebp], eax
mov	ecx, DWORD PTR tv179[ebp]
mov	DWORD PTR tv167[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR tv167[ebp]
push	edx
lea	ecx, DWORD PTR _surf$[ebp]
call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	24					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T5[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
cmp	DWORD PTR $T5[ebp], 0
je	SHORT $LN3@Snapshot
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??B?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
push	eax
lea	ecx, DWORD PTR _surf$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	ecx, DWORD PTR $T5[ebp]
call	??0SourceSurfaceRecording@gfx@mozilla@@QAE@PAVSourceSurface@12@PAVDrawEventRecorderPrivate@12@@Z 
mov	DWORD PTR tv130[ebp], eax
jmp	SHORT $LN4@Snapshot
mov	DWORD PTR tv130[ebp], 0
mov	eax, DWORD PTR tv130[ebp]
mov	DWORD PTR $T6[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR $T6[ebp]
push	ecx
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
mov	edx, DWORD PTR _this$[ebp]
push	edx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	eax, DWORD PTR _retSurf$[ebp]
push	eax
call	??$?0VSourceSurface@gfx@mozilla@@@ReferencePtr@gfx@mozilla@@QAE@ABV?$RefPtr@VSourceSurface@gfx@mozilla@@@@@Z 
lea	ecx, DWORD PTR $T4[ebp]
call	??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR tv80[ebp], eax
mov	ecx, DWORD PTR tv80[ebp]
mov	DWORD PTR tv172[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	edx, DWORD PTR tv172[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T4[ebp]
call	??1RecordedSnapshot@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
lea	ecx, DWORD PTR _retSurf$[ebp]
call	?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR _retSurf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _surf$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN16@Snapshot
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
npad	2
DD	2
DD	$LN15@Snapshot
DD	-24					
DD	4
DD	$LN12@Snapshot
DD	-36					
DD	4
DD	$LN13@Snapshot
DB	114					
DB	101					
DB	116					
DB	83					
DB	117					
DB	114					
DB	102					
DB	0
DB	115					
DB	117					
DB	114					
DB	102					
DB	0
ENDP
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1 PROC
lea	ecx, DWORD PTR _surf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$2 PROC
mov	eax, DWORD PTR $T5[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$3 PROC
lea	ecx, DWORD PTR _retSurf$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$4 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1RecordedSnapshot@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$5 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN11@Snapshot
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__ehhandler$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-124]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?Snapshot@DrawTargetRecording@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?IsRecording@DrawTargetRecording@gfx@mozilla@@UBE_NXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetBackendType@DrawTargetRecording@gfx@mozilla@@UBE?AW4BackendType@23@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetType@DrawTargetRecording@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv68[ebp]
mov	eax, DWORD PTR [edx+8]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1DrawTargetRecording@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 56					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-68]
mov	ecx, 14					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7DrawTargetRecording@gfx@mozilla@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 2
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedDrawTargetDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z 
mov	DWORD PTR tv147[ebp], eax
mov	eax, DWORD PTR tv147[ebp]
mov	DWORD PTR tv140[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR tv140[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1DrawTarget@gfx@mozilla@@UAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 68					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1DrawTarget@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ$3 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-64]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1DrawTargetRecording@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 80					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-92]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0DrawTarget@gfx@mozilla@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7DrawTargetRecording@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aDT$[ebp]
add	ecx, 60					
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@ABV0@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _aDT$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv94[ebp], eax
mov	esi, esp
movzx	edx, BYTE PTR _aFormat$[ebp]
push	edx
mov	eax, DWORD PTR _aSize$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	edx, DWORD PTR tv94[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv94[ebp]
mov	edx, DWORD PTR [eax+132]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv184[ebp], eax
mov	eax, DWORD PTR tv184[ebp]
mov	DWORD PTR tv178[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR tv178[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 4
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ 
movzx	edx, BYTE PTR _aFormat$[ebp]
push	edx
mov	eax, DWORD PTR _aSize$[ebp]
push	eax
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T3[ebp]
call	??0RecordedCreateSimilarDrawTarget@gfx@mozilla@@QAE@UReferencePtr@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z 
mov	DWORD PTR tv187[ebp], eax
mov	eax, DWORD PTR tv187[ebp]
mov	DWORD PTR tv182[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
mov	ecx, DWORD PTR tv182[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 4
lea	ecx, DWORD PTR $T3[ebp]
call	??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	ecx, eax
call	?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ 
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+57], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 92					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1DrawTarget@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$2 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$3 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-92]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0DrawTargetRecording@gfx@mozilla@@QAE@PBV012@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 140				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-152]
mov	ecx, 35					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
call	??0DrawTarget@gfx@mozilla@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7DrawTargetRecording@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aRecorder$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??0?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@PAVDrawEventRecorderPrivate@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _aDT$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
movzx	eax, BYTE PTR _aHasData$[ebp]
test	eax, eax
je	SHORT $LN3@DrawTarget
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv134[ebp], eax
mov	esi, esp
lea	ecx, DWORD PTR $T7[ebp]
push	ecx
mov	edx, DWORD PTR tv134[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR tv134[ebp]
mov	edx, DWORD PTR [eax+20]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv239[ebp], eax
mov	eax, DWORD PTR tv239[ebp]
mov	DWORD PTR tv223[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	edx, DWORD PTR tv223[ebp]
mov	DWORD PTR tv148[ebp], edx
jmp	SHORT $LN4@DrawTarget
push	0
lea	ecx, DWORD PTR $T6[ebp]
call	??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z 
mov	DWORD PTR tv243[ebp], eax
mov	eax, DWORD PTR tv243[ebp]
mov	DWORD PTR tv228[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 2
mov	DWORD PTR $T2[ebp], ecx
mov	edx, DWORD PTR tv228[ebp]
mov	DWORD PTR tv148[ebp], edx
mov	eax, DWORD PTR tv148[ebp]
mov	DWORD PTR $T8[ebp], eax
mov	ecx, DWORD PTR $T8[ebp]
push	ecx
lea	ecx, DWORD PTR _snapshot$[ebp]
call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 6
mov	edx, DWORD PTR $T2[ebp]
and	edx, 2
je	SHORT $LN13@DrawTarget
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	SHORT $LN14@DrawTarget
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv174[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	DWORD PTR tv184[ebp], eax
lea	ecx, DWORD PTR _snapshot$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
movzx	ecx, BYTE PTR _aHasData$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	ecx, eax
call	?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ 
movzx	edx, al
push	edx
mov	esi, esp
lea	eax, DWORD PTR $T4[ebp]
push	eax
mov	ecx, DWORD PTR tv174[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv174[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
mov	esi, esp
mov	ecx, DWORD PTR tv184[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR tv184[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
movzx	ecx, al
push	ecx
sub	esp, 8
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
lea	ecx, DWORD PTR $T5[ebp]
call	??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z 
mov	DWORD PTR tv129[ebp], eax
mov	eax, DWORD PTR tv129[ebp]
mov	DWORD PTR tv235[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 8
mov	ecx, DWORD PTR tv235[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
call	??C?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QBEPAVDrawEventRecorderPrivate@gfx@mozilla@@XZ 
mov	ecx, eax
call	?RecordEvent@DrawEventRecorderPrivate@gfx@mozilla@@QAEXABVRecordedEvent@23@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 7
lea	ecx, DWORD PTR $T5[ebp]
call	??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
mov	ecx, eax
call	?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ 
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+57], al
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR _snapshot$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN19@DrawTarget
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 152				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
DD	1
DD	$LN18@DrawTarget
DD	-24					
DD	4
DD	$LN16@DrawTarget
DB	115					
DB	110					
DB	97					
DB	112					
DB	115					
DB	104					
DB	111					
DB	116					
DB	0
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1DrawTarget@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 60					
jmp	??1?$RefPtr@VDrawEventRecorderPrivate@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
jmp	??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$3 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN9@DrawTarget
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$4 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 2
je	$LN11@DrawTarget
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ret	0
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$5 PROC
lea	ecx, DWORD PTR _snapshot$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z$6 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-152]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0DrawTargetRecording@gfx@mozilla@@QAE@PAVDrawEventRecorder@12@PAVDrawTarget@12@_N@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	$LN2@operator
mov	esi, esp
push	289					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1OC@LGMEKDCA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN7@operator
mov	DWORD PTR tv146[ebp], 1
jmp	SHORT $LN8@operator
mov	DWORD PTR tv146[ebp], 0
mov	al, BYTE PTR tv146[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAEAAV01@XZ 
lea	ecx, DWORD PTR __Tmp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@operator
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN8@operator
DD	-32					
DD	12					
DD	$LN6@operator
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
ENDP
__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jne	$LN2@operator
mov	esi, esp
push	230					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1OC@BGDJEKOF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@_KHPB_KAB_KU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	$LN2@operator
mov	esi, esp
push	289					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1NK@BJPMEIHF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN7@operator
mov	DWORD PTR tv146[ebp], 1
jmp	SHORT $LN8@operator
mov	DWORD PTR tv146[ebp], 0
mov	al, BYTE PTR tv146[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ 
lea	ecx, DWORD PTR __Tmp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN9@operator
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN8@operator
DD	-32					
DD	12					
DD	$LN6@operator
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
ENDP
__unwindfunclet$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jne	$LN2@operator
mov	esi, esp
push	230					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1NK@LJABKBLA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBEABQBXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jne	$LN2@operator
mov	esi, esp
push	210					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	211					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
mov	esi, esp
push	0
push	211					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1NI@GGDPCAJH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z 
add	esp, 4
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
push	eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@PBXHPBQBXABQBXU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?insert@?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?insert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@Orphan_ran
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN12@Orphan_ran
DD	-24					
DD	4
DD	$LN10@Orphan_ran
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Pval$[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
mov	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR __Ptr$[ebp]
lea	eax, DWORD PTR [eax+edx*4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ufill
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
DD	1
DD	$LN4@Ufill
DD	-9					
DD	1
DD	$LN3@Ufill
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 80					
push	ebx
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-96]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN13@Insert_n
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN13@Insert_n
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Where$[ebp+8]
jae	SHORT $LN14@Insert_n
mov	esi, esp
push	1658					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
sub	edx, DWORD PTR [ecx+4]
sar	edx, 2
mov	DWORD PTR __Off$[ebp], edx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN12@Insert_n
jmp	$LN11@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	$LN10@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
sub	eax, esi
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN9@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z 
mov	DWORD PTR __Capacity$13[ebp], eax
mov	eax, DWORD PTR __Capacity$13[ebp]
push	eax
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR __Newvec$12[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Where$[ebp+8]
sub	eax, DWORD PTR [edx+4]
sar	eax, 2
mov	DWORD PTR __Whereoff$11[ebp], eax
mov	DWORD PTR __Ncopied$10[ebp], 0
mov	BYTE PTR __$EHRec$[ebp+12], 1
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Whereoff$11[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z 
mov	eax, DWORD PTR __Ncopied$10[ebp]
add	eax, 1
mov	DWORD PTR __Ncopied$10[ebp], eax
mov	ecx, DWORD PTR __Newvec$12[ebp]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
mov	edx, DWORD PTR __Ncopied$10[ebp]
add	edx, 1
mov	DWORD PTR __Ncopied$10[ebp], edx
mov	eax, DWORD PTR __Whereoff$11[ebp]
add	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
jmp	SHORT $LN17@Insert_n
cmp	DWORD PTR __Ncopied$10[ebp], 1
jle	SHORT $LN7@Insert_n
mov	eax, DWORD PTR __Whereoff$11[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR __Newvec$12[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z 
cmp	DWORD PTR __Ncopied$10[ebp], 0
jle	SHORT $LN6@Insert_n
mov	ecx, DWORD PTR __Whereoff$11[ebp]
mov	edx, DWORD PTR __Newvec$12[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
push	edx
mov	eax, DWORD PTR __Whereoff$11[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	eax, DWORD PTR __Capacity$13[ebp]
push	eax
mov	ecx, DWORD PTR __Newvec$12[ebp]
push	ecx
lea	edx, DWORD PTR $T5[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN26@Insert_n
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT __tryend$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN5@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 2
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR __Capacity$13[ebp]
mov	eax, DWORD PTR __Newvec$12[ebp]
lea	ecx, DWORD PTR [eax+edx*4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Newvec$12[ebp]
mov	DWORD PTR [ecx+4], edx
jmp	$LN11@Insert_n
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, DWORD PTR __Where$[ebp+8]
sar	ecx, 2
cmp	ecx, DWORD PTR __Count$[ebp]
jae	$LN3@Insert_n
mov	edx, DWORD PTR __Val$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Tmp$9[ebp], eax
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Where$[ebp+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
mov	BYTE PTR __$EHRec$[ebp+12], 3
lea	ecx, DWORD PTR __Tmp$9[ebp]
push	ecx
call	??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
sub	eax, DWORD PTR __Where$[ebp+8]
sar	eax, 2
mov	ecx, DWORD PTR __Count$[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z 
jmp	SHORT $LN19@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*4]
push	ecx
mov	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR __Where$[ebp+8]
lea	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN28@Insert_n
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT __tryend$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$3
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Where$[ebp+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z 
lea	ecx, DWORD PTR __Tmp$9[ebp]
push	ecx
mov	edx, DWORD PTR __Count$[ebp]
shl	edx, 2
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, edx
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
call	??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z 
add	esp, 12					
jmp	SHORT $LN11@Insert_n
mov	eax, DWORD PTR __Val$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Tmp$8[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR __Oldend$7[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Oldend$7[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
shl	ecx, 2
mov	edx, DWORD PTR __Oldend$7[ebp]
sub	edx, ecx
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	edx, DWORD PTR __Oldend$7[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 2
mov	ecx, DWORD PTR __Oldend$7[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
call	??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z 
add	esp, 12					
lea	eax, DWORD PTR __Tmp$8[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
call	??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z 
add	esp, 12					
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv422[ebp], eax
mov	eax, DWORD PTR tv422[ebp]
mov	DWORD PTR tv430[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 5
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, DWORD PTR tv430[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN33@Insert_n
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 96					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
npad	2
DD	2
DD	$LN32@Insert_n
DD	-48					
DD	4
DD	$LN29@Insert_n
DD	-60					
DD	4
DD	$LN30@Insert_n
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
ENDP
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$4 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$5 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-100]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Destroy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN4@Destroy
DD	-9					
DD	1
DD	$LN3@Destroy
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Where$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv89[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv66[ebp], eax
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 48					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ 
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv133[ebp], eax
mov	eax, DWORD PTR tv133[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR tv95[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv131[ebp], eax
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv66[ebp], eax
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-56]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Pos$[ebp]
ja	$LN1@operator
mov	esi, esp
push	1201					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN4@operator
xor	ecx, ecx
jne	SHORT $LN5@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	1202					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN5@operator
int	3
mov	esi, esp
push	0
push	1202					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CNE@DOHGKKOB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR __Pos$[ebp]
lea	eax, DWORD PTR [ecx+edx*4]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 1073741823				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T1[ebp], eax
cmp	DWORD PTR $T1[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR __Val$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR $T1[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR $T1[ebp]
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN1@construct
mov	DWORD PTR tv69[ebp], 0
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reinsert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
lea	ecx, DWORD PTR __Last$[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	ecx, eax
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN5@Reinsert
lea	ecx, DWORD PTR __Last$[ebp]
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
lea	ecx, DWORD PTR __First$4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
lea	edx, DWORD PTR __Last$[ebp]
push	edx
lea	ecx, DWORD PTR __First$4[ebp]
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
mov	BYTE PTR __Done$3[ebp], al
mov	eax, DWORD PTR __First$4[ebp]
push	eax
lea	ecx, DWORD PTR __First$4[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ 
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@@Z 
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@XZ
movzx	edx, BYTE PTR __Done$3[ebp]
test	edx, edx
je	SHORT $LN1@Reinsert
jmp	SHORT $LN5@Reinsert
jmp	SHORT $LN3@Reinsert
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@Reinsert
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	2
DD	$LN10@Reinsert
DD	-12					
DD	4
DD	$LN8@Reinsert
DD	-24					
DD	4
DD	$LN9@Reinsert
DB	95					
DB	70					
DB	105					
DB	114					
DB	115					
DB	116					
DB	0
DB	95					
DB	76					
DB	97					
DB	115					
DB	116					
DB	0
ENDP
?_Check_size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?max_load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ 
fstp	DWORD PTR tv86[ebp]
movss	xmm0, DWORD PTR tv86[ebp]
mov	ecx, DWORD PTR _this$[ebp]
movss	DWORD PTR tv131[ebp], xmm0
call	?load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ 
fstp	DWORD PTR tv90[ebp]
movss	xmm0, DWORD PTR tv90[ebp]
movss	xmm1, DWORD PTR tv131[ebp]
comiss	xmm0, xmm1
jbe	SHORT $LN4@Check_size
mov	ecx, DWORD PTR _this$[ebp]
call	?bucket_count@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Newsize$1[ebp], eax
cmp	DWORD PTR __Newsize$1[ebp], 512		
jae	SHORT $LN3@Check_size
mov	eax, DWORD PTR __Newsize$1[ebp]
shl	eax, 3
mov	DWORD PTR __Newsize$1[ebp], eax
jmp	SHORT $LN1@Check_size
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
shr	eax, 1
cmp	DWORD PTR __Newsize$1[ebp], eax
jae	SHORT $LN1@Check_size
mov	ecx, DWORD PTR __Newsize$1[ebp]
shl	ecx, 1
mov	DWORD PTR __Newsize$1[ebp], ecx
mov	edx, DWORD PTR __Newsize$1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Init@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXI@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reinsert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXXZ 
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Init@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
push	eax
mov	ecx, DWORD PTR __Buckets$[ebp]
shl	ecx, 1
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	edx, DWORD PTR __Buckets$[ebp]
sub	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+28], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Buckets$[ebp]
mov	DWORD PTR [ecx+32], edx
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBEIAB_K@Z 
mov	ecx, DWORD PTR _this$[ebp]
and	eax, DWORD PTR [ecx+28]
mov	DWORD PTR __Num$[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+32]
cmp	eax, DWORD PTR __Num$[ebp]
ja	SHORT $LN1@Hashval
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+28]
shr	edx, 1
add	edx, 1
mov	eax, DWORD PTR __Num$[ebp]
sub	eax, edx
mov	DWORD PTR __Num$[ebp], eax
mov	eax, DWORD PTR __Num$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Insert_bucket@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@0I@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
push	eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN5@Insert_buc
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN6@Insert_buc
lea	edx, DWORD PTR __Where$[ebp]
push	edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN3@Insert_buc
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN6@Insert_buc
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	ecx, eax
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN6@Insert_buc
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
push	eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN2@End
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@End
jmp	SHORT $LN3@End
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	edx, DWORD PTR [eax]
mov	DWORD PTR __Ans$2[ebp], edx
lea	ecx, DWORD PTR __Ans$2[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR [eax]
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@End
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN6@End
DD	-12					
DD	4
DD	$LN5@End
DB	95					
DB	65					
DB	110					
DB	115					
DB	0
ENDP
?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Vec_hi@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Bucket$[ebp]
lea	ecx, DWORD PTR [eax+eax+1]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Vec_lo@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Bucket$[ebp]
shl	eax, 1
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T2[ebp], esp
mov	ecx, DWORD PTR __Plist$[ebp]
push	ecx
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv85[ebp], eax
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z 
mov	DWORD PTR tv86[ebp], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 76					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-88]
mov	ecx, 19					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IBEIAB_K@Z 
mov	DWORD PTR __Bucket$[ebp], eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
lea	edx, DWORD PTR __Where$7[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
jmp	SHORT $LN4@lower_boun
lea	ecx, DWORD PTR __Where$7[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@I@Z 
push	eax
lea	ecx, DWORD PTR __Where$7[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	$LN2@lower_boun
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
lea	ecx, DWORD PTR __Where$7[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ 
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z 
movzx	ecx, al
test	ecx, ecx
jne	$LN1@lower_boun
lea	ecx, DWORD PTR __Where$7[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEAB_KXZ 
push	eax
call	?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Keyval$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN7@lower_boun
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ 
mov	DWORD PTR tv165[ebp], eax
mov	edx, DWORD PTR tv165[ebp]
mov	DWORD PTR tv172[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	ecx, DWORD PTR tv172[ebp]
mov	DWORD PTR tv161[ebp], ecx
jmp	SHORT $LN8@lower_boun
mov	edx, DWORD PTR __Where$7[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv189[ebp], eax
mov	ecx, DWORD PTR tv189[ebp]
mov	DWORD PTR tv177[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR $T2[ebp]
or	edx, 2
mov	DWORD PTR $T2[ebp], edx
mov	eax, DWORD PTR tv177[ebp]
mov	DWORD PTR tv161[ebp], eax
mov	ecx, DWORD PTR tv161[ebp]
mov	DWORD PTR $T5[ebp], ecx
mov	edx, DWORD PTR $T5[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR $T2[ebp]
or	eax, 4
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
and	ecx, 2
je	SHORT $LN15@lower_boun
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	edx, DWORD PTR $T2[ebp]
and	edx, 1
je	SHORT $LN16@lower_boun
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN5@lower_boun
jmp	$LN3@lower_boun
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 4
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@lower_boun
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 88					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN19@lower_boun
DD	-28					
DD	4
DD	$LN17@lower_boun
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN10@lower_boun
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 2
je	$LN12@lower_boun
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?find@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?lower_bound@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?insert@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
movzx	eax, BYTE PTR __Nil_obj
push	eax
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@AB_KU_Nil@std@@@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@1@AB_KU_Nil@1@@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?max_load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR [eax+36]
movss	DWORD PTR tv68[ebp], xmm0
fld	DWORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?load_factor@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEMXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ 
mov	DWORD PTR tv74[ebp], eax
cvtsi2sd xmm0, DWORD PTR tv74[ebp]
mov	eax, DWORD PTR tv74[ebp]
shr	eax, 31					
addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
movsd	QWORD PTR tv77[ebp], xmm0
cvtsd2ss xmm0, QWORD PTR tv77[ebp]
mov	ecx, DWORD PTR _this$[ebp]
movss	DWORD PTR tv95[ebp], xmm0
call	?bucket_count@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ 
mov	DWORD PTR tv83[ebp], eax
cvtsi2sd xmm0, DWORD PTR tv83[ebp]
mov	ecx, DWORD PTR tv83[ebp]
shr	ecx, 31					
addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
movsd	QWORD PTR tv86[ebp], xmm0
cvtsd2ss xmm0, QWORD PTR tv86[ebp]
movss	xmm1, DWORD PTR tv95[ebp]
divss	xmm1, xmm0
movss	DWORD PTR tv91[ebp], xmm1
fld	DWORD PTR tv91[ebp]
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?bucket_count@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+32]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR __Where$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv65[ebp], eax
mov	edx, DWORD PTR tv65[ebp]
mov	DWORD PTR tv80[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv80[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unchecked_end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked_begin@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	esi, esp
mov	ecx, DWORD PTR __Cont$[ebp]
call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ptr
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN2@Orphan_ptr
cmp	DWORD PTR __Ptr$[ebp], 0
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
cmp	ecx, DWORD PTR __Ptr$[ebp]
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN5@Orphan_ptr
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@Orphan_ptr
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN12@Orphan_ptr
DD	-24					
DD	4
DD	$LN10@Orphan_ptr
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Incsize@?$list@_KV?$allocator@_K@std@@@std@@QAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR _this$[ebp]
sub	eax, DWORD PTR [ecx+8]
sub	eax, 1
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Incsize
mov	esi, esp
push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked_splice@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
mov	esi, eax
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR [eax], esi
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
mov	esi, eax
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR [eax], esi
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
mov	esi, eax
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR [eax], esi
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
mov	DWORD PTR __Pnode$[ebp], eax
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [esi]
mov	DWORD PTR [eax], ecx
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [esi]
mov	DWORD PTR [eax], edx
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-48], eax
mov	DWORD PTR [ebp-44], eax
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T4[ebp], esp
push	0
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE?AV01@H@Z 
mov	DWORD PTR tv140[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z 
mov	DWORD PTR tv141[ebp], eax
mov	ecx, DWORD PTR tv141[ebp]
mov	DWORD PTR __Pnode$[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freenode@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z 
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	eax, DWORD PTR __Where$[ebp]
push	eax
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv143[ebp], eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z 
mov	DWORD PTR tv144[ebp], eax
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-40]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-24], -858993460		
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN1@Unlinknode
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN2@Unlinknode
mov	esi, esp
push	1439					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@_KPAX@2@XZ 
mov	DWORD PTR __Pnode$[ebp], eax
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_ptr@?$list@_KV?$allocator@_K@std@@@std@@QBEXAAV12@PAU?$_List_node@_KPAX@2@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [esi]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [esi]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Unlinknode@?$list@_KV?$allocator@_K@std@@@std@@QAEPAU?$_List_node@_KPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?push_front@?$list@_KV?$allocator@_K@std@@@std@@QAEXAB_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR $T2[ebp], ecx
mov	edx, DWORD PTR __Val$[ebp]
push	edx
mov	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@AB_K@?$list@_KV?$allocator@_K@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@1@AB_K@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QBEIXZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$list@_KV?$allocator@_K@std@@@std@@QBEIXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Make_iter@?$list@_KV?$allocator@_K@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
?_Unchecked_end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked_begin@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?end@?$list@_KV?$allocator@_K@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@PAU?$_List_node@_KPAX@1@PBV?$_List_val@U?$_List_simple_types@_K@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Freenode@?$_List_buy@_KV?$allocator@_K@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z 
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@_KPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z 
add	esp, 4
push	eax
call	??$addressof@_K@std@@YAPA_KAA_K@Z	
add	esp, 4
push	eax
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@_K@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPA_K@Z 
push	1
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 28					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-44], eax
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
push	1
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z 
mov	DWORD PTR __Pnode$[ebp], eax
cmp	DWORD PTR __Next$[ebp], 0
jne	SHORT $LN2@Buynode0
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR __Next$[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR __Prev$[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR tv132[ebp], eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	DWORD PTR tv133[ebp], eax
lea	edx, DWORD PTR __Next$[ebp]
push	edx
mov	eax, DWORD PTR tv132[ebp]
push	eax
call	??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv133[ebp]
call	??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR tv134[ebp], eax
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	DWORD PTR tv135[ebp], eax
lea	eax, DWORD PTR __Prev$[ebp]
push	eax
mov	ecx, DWORD PTR tv134[ebp]
push	ecx
call	??$addressof@PAU?$_List_node@_KPAX@std@@@std@@YAPAPAU?$_List_node@_KPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv135[ebp]
call	??$construct@PAU?$_List_node@_KPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@_KPAX@1@AAPAU21@@Z 
jmp	SHORT $LN5@Buynode0
push	1
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Buynode0
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Pnode$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-48]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@_KV?$allocator@_K@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@PAU32@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Myval@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAA_KPAU?$_List_node@_KPAX@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 8
pop	ebp
ret	0
ENDP
?_Prevnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 4
pop	ebp
ret	0
ENDP
?_Nextnode@?$_List_val@U?$_List_simple_types@_K@std@@@std@@SAAAPAU?$_List_node@_KPAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
pop	ebp
ret	0
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@_KPAX@std@@@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@U?$_List_node@_KPAX@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@_KPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@_KPAX@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@U?$_List_node@_KPAX@std@@@std@@QBEIXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$allocator@U?$_List_node@_KPAX@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 268435455				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEPAU?$_List_node@_KPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@U?$_List_node@_KPAX@std@@@std@@YAPAU?$_List_node@_KPAX@0@IPAU10@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@U?$_List_node@_KPAX@std@@@std@@QAEXPAU?$_List_node@_KPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@U?$_List_node@_KPAX@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Kfn@?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@SAAB_KAB_K@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE_NAB_K0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Keyval2$[ebp]
push	eax
mov	ecx, DWORD PTR __Keyval1$[ebp]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE?AU?$equal_to@_K@2@XZ 
mov	ecx, eax
call	??R?$equal_to@_K@std@@QBE_NAB_K0@Z	
movzx	eax, al
test	eax, eax
jne	SHORT $LN3@operator
mov	DWORD PTR tv77[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv77[ebp], 0
mov	al, BYTE PTR tv77[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??R?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBEIAB_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Gethash@?$_Hash_oper1@$0A@U?$hash@_K@std@@@std@@QBE?AU?$hash@_K@2@XZ 
mov	ecx, eax
call	??R?$_Bitwise_hash@_K@std@@QBEIAB_K@Z	
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@_K@std@@U?$equal_to@_K@2@@std@@QBE?AU?$equal_to@_K@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Gethash@?$_Hash_oper1@$0A@U?$hash@_K@std@@@std@@QBE?AU?$hash@_K@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??R?$equal_to@_K@std@@QBE_NAB_K0@Z PROC			
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Left$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	DWORD PTR tv69[ebp], eax
mov	DWORD PTR tv70[ebp], ecx
mov	edx, DWORD PTR tv69[ebp]
mov	eax, DWORD PTR tv70[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax]
jne	SHORT $LN3@operator
mov	edx, DWORD PTR tv69[ebp]
mov	eax, DWORD PTR tv70[ebp]
mov	ecx, DWORD PTR [edx+4]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN3@operator
mov	DWORD PTR tv65[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv65[ebp], 0
mov	al, BYTE PTR tv65[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?insert@?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?insert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@Orphan_ran
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN12@Orphan_ran
DD	-24					
DD	4
DD	$LN10@Orphan_ran
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Pval$[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	??$_Uninitialized_fill_n@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
mov	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR __Ptr$[ebp]
lea	eax, DWORD PTR [eax+edx*4]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Ufill
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
DD	1
DD	$LN4@Ufill
DD	-9					
DD	1
DD	$LN3@Ufill
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 80					
push	ebx
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-96]
mov	ecx, 20					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN13@Insert_n
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN13@Insert_n
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Where$[ebp+8]
jae	SHORT $LN14@Insert_n
mov	esi, esp
push	1658					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
sub	edx, DWORD PTR [ecx+4]
sar	edx, 2
mov	DWORD PTR __Off$[ebp], edx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN12@Insert_n
jmp	$LN11@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	$LN10@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
sub	eax, esi
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN9@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z 
mov	DWORD PTR __Capacity$13[ebp], eax
mov	eax, DWORD PTR __Capacity$13[ebp]
push	eax
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR __Newvec$12[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Where$[ebp+8]
sub	eax, DWORD PTR [edx+4]
sar	eax, 2
mov	DWORD PTR __Whereoff$11[ebp], eax
mov	DWORD PTR __Ncopied$10[ebp], 0
mov	BYTE PTR __$EHRec$[ebp+12], 1
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$addressof@$$CBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPBV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Whereoff$11[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z 
mov	eax, DWORD PTR __Ncopied$10[ebp]
add	eax, 1
mov	DWORD PTR __Ncopied$10[ebp], eax
mov	ecx, DWORD PTR __Newvec$12[ebp]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
mov	edx, DWORD PTR __Ncopied$10[ebp]
add	edx, 1
mov	DWORD PTR __Ncopied$10[ebp], edx
mov	eax, DWORD PTR __Whereoff$11[ebp]
add	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
jmp	SHORT $LN17@Insert_n
cmp	DWORD PTR __Ncopied$10[ebp], 1
jle	SHORT $LN7@Insert_n
mov	eax, DWORD PTR __Whereoff$11[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR __Newvec$12[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z 
cmp	DWORD PTR __Ncopied$10[ebp], 0
jle	SHORT $LN6@Insert_n
mov	ecx, DWORD PTR __Whereoff$11[ebp]
mov	edx, DWORD PTR __Newvec$12[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
push	edx
mov	eax, DWORD PTR __Whereoff$11[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	eax, DWORD PTR __Capacity$13[ebp]
push	eax
mov	ecx, DWORD PTR __Newvec$12[ebp]
push	ecx
lea	edx, DWORD PTR $T5[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN26@Insert_n
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT __tryend$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN5@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 2
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR __Capacity$13[ebp]
mov	eax, DWORD PTR __Newvec$12[ebp]
lea	ecx, DWORD PTR [eax+edx*4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Newvec$12[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Newvec$12[ebp]
mov	DWORD PTR [ecx+4], edx
jmp	$LN11@Insert_n
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, DWORD PTR __Where$[ebp+8]
sar	ecx, 2
cmp	ecx, DWORD PTR __Count$[ebp]
jae	$LN3@Insert_n
mov	edx, DWORD PTR __Val$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Tmp$9[ebp], eax
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Where$[ebp+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
mov	BYTE PTR __$EHRec$[ebp+12], 3
lea	ecx, DWORD PTR __Tmp$9[ebp]
push	ecx
call	??$addressof@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
sub	eax, DWORD PTR __Where$[ebp+8]
sar	eax, 2
mov	ecx, DWORD PTR __Count$[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Ufill@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@PAV32@IPBV32@@Z 
jmp	SHORT $LN19@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*4]
push	ecx
mov	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR __Where$[ebp+8]
lea	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN28@Insert_n
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT __tryend$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$3
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Where$[ebp+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z 
lea	ecx, DWORD PTR __Tmp$9[ebp]
push	ecx
mov	edx, DWORD PTR __Count$[ebp]
shl	edx, 2
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, edx
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
call	??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z 
add	esp, 12					
jmp	SHORT $LN11@Insert_n
mov	eax, DWORD PTR __Val$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Tmp$8[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR __Oldend$7[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Oldend$7[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
shl	ecx, 2
mov	edx, DWORD PTR __Oldend$7[ebp]
sub	edx, ecx
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PAV21@00@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	edx, DWORD PTR __Oldend$7[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 2
mov	ecx, DWORD PTR __Oldend$7[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
call	??$_Copy_backward@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@PAV12@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@PAV10@00@Z 
add	esp, 12					
lea	eax, DWORD PTR __Tmp$8[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
call	??$fill@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@V12@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0ABV10@@Z 
add	esp, 12					
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv422[ebp], eax
mov	eax, DWORD PTR tv422[ebp]
mov	DWORD PTR tv430[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 5
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, DWORD PTR tv430[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN33@Insert_n
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 96					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
npad	2
DD	2
DD	$LN32@Insert_n
DD	-48					
DD	4
DD	$LN29@Insert_n
DD	-60					
DD	4
DD	$LN30@Insert_n
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
DB	95					
DB	84					
DB	109					
DB	112					
DB	0
ENDP
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$4 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$5 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-100]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Grow_to@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@0@@Z 
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Destroy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN4@Destroy
DD	-9					
DD	1
DD	$LN3@Destroy
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Where$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv89[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Insert_n@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv66[ebp], eax
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 48					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXXZ 
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv133[ebp], eax
mov	eax, DWORD PTR tv133[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR tv95[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv131[ebp], eax
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?insert@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@IABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv66[ebp], eax
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-56]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Pos$[ebp]
ja	$LN1@operator
mov	esi, esp
push	1201					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN4@operator
xor	ecx, ecx
jne	SHORT $LN5@operator
mov	esi, esp
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	1202					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN5@operator
int	3
mov	esi, esp
push	0
push	1202					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CME@JIAKHOAG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAu?$AAn?$AAc@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR __Pos$[ebp]
lea	eax, DWORD PTR [ecx+edx*4]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?begin@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@PBU_Container_base12@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unused_capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@1@@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 1073741823				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?construct@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@ABV32@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T1[ebp], eax
cmp	DWORD PTR $T1[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR __Val$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR $T1[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR $T1[ebp]
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN1@construct
mov	DWORD PTR tv69[ebp], 0
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@YAPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@0@IPAV10@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAEXPAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reinsert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 52					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-52]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
lea	ecx, DWORD PTR __Last$[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	ecx, eax
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN5@Reinsert
lea	ecx, DWORD PTR __Last$[ebp]
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
lea	ecx, DWORD PTR __First$4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
lea	edx, DWORD PTR __Last$[ebp]
push	edx
lea	ecx, DWORD PTR __First$4[ebp]
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
mov	BYTE PTR __Done$3[ebp], al
mov	eax, DWORD PTR __First$4[ebp]
push	eax
lea	ecx, DWORD PTR __First$4[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@ABQBXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@@Z 
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@XZ
movzx	edx, BYTE PTR __Done$3[ebp]
test	edx, edx
je	SHORT $LN1@Reinsert
jmp	SHORT $LN5@Reinsert
jmp	SHORT $LN3@Reinsert
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@Reinsert
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
add	esp, 52					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	2
DD	$LN10@Reinsert
DD	-12					
DD	4
DD	$LN8@Reinsert
DD	-24					
DD	4
DD	$LN9@Reinsert
DB	95					
DB	70					
DB	105					
DB	114					
DB	115					
DB	116					
DB	0
DB	95					
DB	76					
DB	97					
DB	115					
DB	116					
DB	0
ENDP
?_Check_size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?max_load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ 
fstp	DWORD PTR tv86[ebp]
movss	xmm0, DWORD PTR tv86[ebp]
mov	ecx, DWORD PTR _this$[ebp]
movss	DWORD PTR tv131[ebp], xmm0
call	?load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ 
fstp	DWORD PTR tv90[ebp]
movss	xmm0, DWORD PTR tv90[ebp]
movss	xmm1, DWORD PTR tv131[ebp]
comiss	xmm0, xmm1
jbe	SHORT $LN4@Check_size
mov	ecx, DWORD PTR _this$[ebp]
call	?bucket_count@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Newsize$1[ebp], eax
cmp	DWORD PTR __Newsize$1[ebp], 512		
jae	SHORT $LN3@Check_size
mov	eax, DWORD PTR __Newsize$1[ebp]
shl	eax, 3
mov	DWORD PTR __Newsize$1[ebp], eax
jmp	SHORT $LN1@Check_size
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?max_size@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QBEIXZ 
shr	eax, 1
cmp	DWORD PTR __Newsize$1[ebp], eax
jae	SHORT $LN1@Check_size
mov	ecx, DWORD PTR __Newsize$1[ebp]
shl	ecx, 1
mov	DWORD PTR __Newsize$1[ebp], ecx
mov	edx, DWORD PTR __Newsize$1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reinsert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXXZ 
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
push	eax
mov	ecx, DWORD PTR __Buckets$[ebp]
shl	ecx, 1
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?assign@?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	edx, DWORD PTR __Buckets$[ebp]
sub	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+28], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Buckets$[ebp]
mov	DWORD PTR [ecx+32], edx
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBEIABQBX@Z 
mov	ecx, DWORD PTR _this$[ebp]
and	eax, DWORD PTR [ecx+28]
mov	DWORD PTR __Num$[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+32]
cmp	eax, DWORD PTR __Num$[ebp]
ja	SHORT $LN1@Hashval
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+28]
shr	edx, 1
add	edx, 1
mov	eax, DWORD PTR __Num$[ebp]
sub	eax, edx
mov	DWORD PTR __Num$[ebp], eax
mov	eax, DWORD PTR __Num$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Insert_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@0I@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
push	eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN5@Insert_buc
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN6@Insert_buc
lea	edx, DWORD PTR __Where$[ebp]
push	edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN3@Insert_buc
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR __Plist$[ebp]
mov	DWORD PTR [eax], ecx
jmp	SHORT $LN6@Insert_buc
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	ecx, eax
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN6@Insert_buc
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	eax, DWORD PTR __Plist$[ebp]
push	eax
lea	ecx, DWORD PTR __Plist_arg$[ebp]
call	?_Unchecked@?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
lea	ecx, DWORD PTR __Plist$[ebp]
push	ecx
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN5@Erase_buck
lea	ecx, DWORD PTR __Plist$[ebp]
push	ecx
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN4@Erase_buck
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	esi, DWORD PTR [eax]
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR [eax], esi
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	esi, DWORD PTR [eax]
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR [eax], esi
jmp	SHORT $LN3@Erase_buck
lea	ecx, DWORD PTR __Plist$[ebp]
call	??F?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	esi, DWORD PTR [eax]
mov	edx, DWORD PTR __Bucket$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR [eax], esi
jmp	SHORT $LN2@Erase_buck
lea	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN2@Erase_buck
lea	ecx, DWORD PTR __Plist$[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	esi, DWORD PTR [eax]
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	DWORD PTR [eax], esi
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Plist_arg$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@Erase_buck
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
npad	3
DD	1
DD	$LN11@Erase_buck
DD	-24					
DD	4
DD	$LN9@Erase_buck
DB	95					
DB	80					
DB	108					
DB	105					
DB	115					
DB	116					
DB	0
ENDP
__unwindfunclet$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z$0 PROC
lea	ecx, DWORD PTR __Plist_arg$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
push	eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, eax
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN2@End
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@End
jmp	SHORT $LN3@End
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	edx, DWORD PTR [eax]
mov	DWORD PTR __Ans$2[ebp], edx
lea	ecx, DWORD PTR __Ans$2[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR [eax]
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@End
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN6@End
DD	-12					
DD	4
DD	$LN5@End
DB	95					
DB	65					
DB	110					
DB	115					
DB	0
ENDP
?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Vec_hi@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Bucket$[ebp]
lea	ecx, DWORD PTR [eax+eax+1]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Vec_lo@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Bucket$[ebp]
shl	eax, 1
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??A?$vector@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@@std@@@2@@std@@QAEAAV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXU_Nil@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy_if_not_nil@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T2[ebp], esp
mov	ecx, DWORD PTR __Plist$[ebp]
push	ecx
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv85[ebp], eax
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z 
mov	DWORD PTR tv86[ebp], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 124				
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-136]
mov	ecx, 31					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z 
mov	DWORD PTR __Bucket$[ebp], eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
lea	edx, DWORD PTR __Where$10[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
jmp	SHORT $LN9@equal_rang
lea	ecx, DWORD PTR __Where$10[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T8[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
push	eax
lea	ecx, DWORD PTR __Where$10[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	$LN7@equal_rang
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
lea	ecx, DWORD PTR __Where$10[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
movzx	ecx, al
test	ecx, ecx
jne	$LN6@equal_rang
mov	edx, DWORD PTR __Where$10[ebp]
mov	DWORD PTR __First$9[ebp], edx
jmp	SHORT $LN5@equal_rang
lea	ecx, DWORD PTR __Where$10[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T7[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
push	eax
lea	ecx, DWORD PTR __Where$10[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN3@equal_rang
lea	ecx, DWORD PTR __Where$10[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN2@equal_rang
jmp	SHORT $LN3@equal_rang
jmp	SHORT $LN4@equal_rang
lea	edx, DWORD PTR __Where$10[ebp]
push	edx
lea	ecx, DWORD PTR __First$9[ebp]
call	??8?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN1@equal_rang
jmp	SHORT $LN7@equal_rang
mov	ecx, DWORD PTR __Where$10[ebp]
push	ecx
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv181[ebp], eax
mov	eax, DWORD PTR tv181[ebp]
mov	DWORD PTR tv196[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv196[ebp]
push	ecx
mov	edx, DWORD PTR __First$9[ebp]
push	edx
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv164[ebp], eax
mov	ecx, DWORD PTR tv164[ebp]
mov	DWORD PTR tv198[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR tv198[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN10@equal_rang
jmp	$LN8@equal_rang
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	DWORD PTR tv208[ebp], eax
mov	edx, DWORD PTR tv208[ebp]
mov	DWORD PTR tv204[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	eax, DWORD PTR tv204[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	DWORD PTR tv209[ebp], eax
mov	edx, DWORD PTR tv209[ebp]
mov	DWORD PTR tv206[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR tv206[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??$?0V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V01@X@?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@$$QAV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@1@0@Z 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN22@equal_rang
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 136				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	2
DD	$LN21@equal_rang
DD	-28					
DD	4
DD	$LN18@equal_rang
DD	-40					
DD	4
DD	$LN19@equal_rang
DB	95					
DB	70					
DB	105					
DB	114					
DB	115					
DB	116					
DB	0
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$0 PROC
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$1 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$3 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-132]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 76					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-88]
mov	ecx, 19					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z 
mov	DWORD PTR __Bucket$[ebp], eax
mov	ecx, DWORD PTR __Bucket$[ebp]
push	ecx
lea	edx, DWORD PTR __Where$7[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
jmp	SHORT $LN4@lower_boun
lea	ecx, DWORD PTR __Where$7[ebp]
call	??E?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_End@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@I@Z 
push	eax
lea	ecx, DWORD PTR __Where$7[ebp]
call	??9?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	$LN2@lower_boun
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
lea	ecx, DWORD PTR __Where$7[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
movzx	ecx, al
test	ecx, ecx
jne	$LN1@lower_boun
lea	ecx, DWORD PTR __Where$7[ebp]
call	??D?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEABQBXXZ 
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Keyval$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN7@lower_boun
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	DWORD PTR tv165[ebp], eax
mov	edx, DWORD PTR tv165[ebp]
mov	DWORD PTR tv172[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	ecx, DWORD PTR tv172[ebp]
mov	DWORD PTR tv161[ebp], ecx
jmp	SHORT $LN8@lower_boun
mov	edx, DWORD PTR __Where$7[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv189[ebp], eax
mov	ecx, DWORD PTR tv189[ebp]
mov	DWORD PTR tv177[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR $T2[ebp]
or	edx, 2
mov	DWORD PTR $T2[ebp], edx
mov	eax, DWORD PTR tv177[ebp]
mov	DWORD PTR tv161[ebp], eax
mov	ecx, DWORD PTR tv161[ebp]
mov	DWORD PTR $T5[ebp], ecx
mov	edx, DWORD PTR $T5[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR $T2[ebp]
or	eax, 4
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
and	ecx, 2
je	SHORT $LN15@lower_boun
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	edx, DWORD PTR $T2[ebp]
and	edx, 1
je	SHORT $LN16@lower_boun
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN5@lower_boun
jmp	$LN3@lower_boun
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 4
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN20@lower_boun
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 88					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN19@lower_boun
DD	-28					
DD	4
DD	$LN17@lower_boun
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN10@lower_boun
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__unwindfunclet$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 2
je	$LN12@lower_boun
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?find@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?lower_bound@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?clear@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ 
push	8
mov	ecx, DWORD PTR _this$[ebp]
call	?_Init@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXI@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 108				
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-120]
mov	ecx, 27					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?equal_range@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@2@ABQBX@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __Num$[ebp], 0
lea	edx, DWORD PTR __Num$[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T7[ebp], esp
lea	eax, DWORD PTR __Where$[ebp+12]
push	eax
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv65[ebp], eax
mov	ecx, DWORD PTR tv65[ebp]
mov	DWORD PTR tv163[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 1
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
lea	edx, DWORD PTR __Where$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv166[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
call	??$_Distance@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@I@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0AAI@Z 
add	esp, 28					
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	eax, DWORD PTR __Where$[ebp+12]
push	eax
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv176[ebp], eax
mov	ecx, DWORD PTR tv176[ebp]
mov	DWORD PTR tv168[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __Where$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv172[ebp], eax
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z 
mov	DWORD PTR tv169[ebp], eax
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __Num$[ebp]
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@erase
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 120				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
DD	2
DD	$LN12@erase
DD	-44					
DD	24					
DD	$LN9@erase
DD	-56					
DD	4
DD	$LN10@erase
DB	95					
DB	78					
DB	117					
DB	109					
DB	0
DB	95					
DB	87					
DB	104					
DB	101					
DB	114					
DB	101					
DB	0
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@V12@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$1 PROC
mov	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z$3 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-116]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 112				
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 28					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 1
push	692					
push	OFFSET ??_C@_1IK@IMDFCBHM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T10[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv153[ebp], eax
mov	ecx, DWORD PTR tv153[ebp]
mov	DWORD PTR tv203[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T9[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv206[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Debug_range@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@@std@@YAXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@0@0PB_WI@Z 
add	esp, 32					
lea	eax, DWORD PTR $T7[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	DWORD PTR tv238[ebp], eax
mov	ecx, DWORD PTR tv238[ebp]
mov	DWORD PTR tv211[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	eax, DWORD PTR tv211[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN7@erase
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	DWORD PTR tv242[ebp], eax
mov	eax, DWORD PTR tv242[ebp]
mov	DWORD PTR tv216[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 2
mov	DWORD PTR $T2[ebp], ecx
mov	edx, DWORD PTR tv216[ebp]
push	edx
lea	ecx, DWORD PTR __Last$[ebp]
call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN7@erase
mov	DWORD PTR tv147[ebp], 1
jmp	SHORT $LN8@erase
mov	DWORD PTR tv147[ebp], 0
mov	cl, BYTE PTR tv147[ebp]
mov	BYTE PTR $T8[ebp], cl
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR $T2[ebp]
and	edx, 2
je	SHORT $LN17@erase
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	SHORT $LN18@erase
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
movzx	ecx, BYTE PTR $T8[ebp]
test	ecx, ecx
je	SHORT $LN2@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEXXZ 
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	eax, DWORD PTR $T2[ebp]
or	eax, 4
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	$LN5@erase
jmp	$LN3@erase
lea	ecx, DWORD PTR __Last$[ebp]
push	ecx
lea	ecx, DWORD PTR __First$[ebp]
call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN1@erase
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T5[ebp], esp
push	0
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z 
mov	DWORD PTR tv228[ebp], eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z 
mov	DWORD PTR tv229[ebp], eax
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
jmp	SHORT $LN2@erase
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv232[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z 
mov	DWORD PTR tv233[ebp], eax
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 4
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN5@erase
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$2 PROC
mov	ecx, DWORD PTR $T10[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$4 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN14@erase
and	DWORD PTR $T2[ebp], -2			
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z$5 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 2
je	$LN16@erase
and	DWORD PTR $T2[ebp], -3			
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-120]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 60					
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-72]
mov	ecx, 15					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Plist$[ebp]
call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBEABQBXXZ 
push	eax
call	?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Hashval@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IBEIABQBX@Z 
mov	DWORD PTR __Bucket$[ebp], eax
mov	eax, DWORD PTR __Bucket$[ebp]
push	eax
sub	esp, 12					
mov	esi, esp
mov	DWORD PTR $T6[ebp], esp
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv165[ebp], eax
push	esi
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z 
mov	DWORD PTR tv166[ebp], eax
mov	eax, DWORD PTR tv166[ebp]
mov	DWORD PTR tv168[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Erase_bucket@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAEXV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@I@Z 
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __Plist$[ebp]
push	edx
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv170[ebp], eax
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z 
mov	DWORD PTR tv171[ebp], eax
mov	ecx, DWORD PTR tv171[ebp]
mov	DWORD PTR tv173[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR tv173[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Plist$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
add	esp, 72					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0 PROC
lea	ecx, DWORD PTR __Plist$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$4 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-72]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR [eax+36]
movss	DWORD PTR tv68[ebp], xmm0
fld	DWORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?load_factor@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEMXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ 
mov	DWORD PTR tv74[ebp], eax
cvtsi2sd xmm0, DWORD PTR tv74[ebp]
mov	eax, DWORD PTR tv74[ebp]
shr	eax, 31					
addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
movsd	QWORD PTR tv77[ebp], xmm0
cvtsd2ss xmm0, QWORD PTR tv77[ebp]
mov	ecx, DWORD PTR _this$[ebp]
movss	DWORD PTR tv95[ebp], xmm0
call	?bucket_count@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ 
mov	DWORD PTR tv83[ebp], eax
cvtsi2sd xmm0, DWORD PTR tv83[ebp]
mov	ecx, DWORD PTR tv83[ebp]
shr	ecx, 31					
addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
movsd	QWORD PTR tv86[ebp], xmm0
cvtsd2ss xmm0, QWORD PTR tv86[ebp]
movss	xmm1, DWORD PTR tv95[ebp]
divss	xmm1, xmm0
movss	DWORD PTR tv91[ebp], xmm1
fld	DWORD PTR tv91[ebp]
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?bucket_count@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+32]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-48], eax
mov	DWORD PTR [ebp-44], eax
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	eax, DWORD PTR __Where$[ebp]
push	eax
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv95[ebp], eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv130[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR tv130[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z$2 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-40]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V32@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR __Where$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z 
mov	DWORD PTR tv65[ebp], eax
mov	edx, DWORD PTR tv65[ebp]
mov	DWORD PTR tv80[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv80[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QBE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unchecked_end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked_begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [edx], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?begin@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?insert@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
movzx	eax, BYTE PTR __Nil_obj
push	eax
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@PBXU_Nil@std@@@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@IAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@1@$$QAPBXU_Nil@1@@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	esi, esp
mov	ecx, DWORD PTR __Cont$[ebp]
call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ptr
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN2@Orphan_ptr
cmp	DWORD PTR __Ptr$[ebp], 0
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
cmp	ecx, DWORD PTR __Ptr$[ebp]
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN5@Orphan_ptr
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@Orphan_ptr
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN12@Orphan_ptr
DD	-24					
DD	4
DD	$LN10@Orphan_ptr
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Incsize@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR _this$[ebp]
sub	eax, DWORD PTR [ecx+8]
sub	eax, 1
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Incsize
mov	esi, esp
push	OFFSET ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked_splice@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
mov	esi, eax
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR [eax], esi
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
mov	esi, eax
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR [eax], esi
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
mov	esi, eax
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR [eax], esi
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
mov	DWORD PTR __Pnode$[ebp], eax
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [esi]
mov	DWORD PTR [eax], ecx
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
lea	ecx, DWORD PTR __Last$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [esi]
mov	DWORD PTR [eax], edx
lea	ecx, DWORD PTR __First$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
push	eax
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax], ecx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?clear@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
mov	DWORD PTR __Pnode$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], 0
jmp	SHORT $LN3@clear
mov	eax, DWORD PTR __Pnext$1[ebp]
mov	DWORD PTR __Pnode$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Pnode$[ebp]
cmp	edx, DWORD PTR [ecx+4]
je	SHORT $LN4@clear
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Pnext$1[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z 
jmp	SHORT $LN2@clear
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 36					
mov	eax, -858993460				
mov	DWORD PTR [ebp-48], eax
mov	DWORD PTR [ebp-44], eax
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T4[ebp], esp
push	0
push	eax
lea	ecx, DWORD PTR __Where$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE?AV01@H@Z 
mov	DWORD PTR tv140[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z 
mov	DWORD PTR tv141[ebp], eax
mov	ecx, DWORD PTR tv141[ebp]
mov	DWORD PTR __Pnode$[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z 
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	eax, DWORD PTR __Where$[ebp]
push	eax
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv143[ebp], eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z 
mov	DWORD PTR tv144[ebp], eax
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 48					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-40]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-24], -858993460		
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN1@Unlinknode
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN2@Unlinknode
mov	esi, esp
push	1439					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EE@BBMFLDOC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa?$AAn?$AAg@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Mynode@?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base12@2@@std@@QBEPAU?$_List_node@PBXPAX@2@XZ 
mov	DWORD PTR __Pnode$[ebp], eax
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_ptr@?$list@PBXV?$allocator@PBX@std@@@std@@QBEXAAV12@PAU?$_List_node@PBXPAX@2@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [esi]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	esi, eax
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR [esi]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Unlinknode@?$list@PBXV?$allocator@PBX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QBEIXZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$list@PBXV?$allocator@PBX@std@@@std@@QBEIXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Make_iter@?$list@PBXV?$allocator@PBX@std@@@std@@QBE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
?_Unchecked_end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked_begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?end@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@PAU?$_List_node@PBXPAX@1@PBV?$_List_val@U?$_List_simple_types@PBX@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?push_front@?$list@PBXV?$allocator@PBX@std@@@std@@QAEX$$QAPBX@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_begin@?$list@PBXV?$allocator@PBX@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR $T2[ebp], ecx
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	??$forward@PBX@std@@YA$$QAPBXAAPBX@Z	
add	esp, 4
push	eax
mov	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@PBX@?$list@PBXV?$allocator@PBX@std@@@std@@QAEXV?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@U_Iterator_base0@2@@1@$$QAPBX@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Freenode@?$_List_buy@PBXV?$allocator@PBX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z 
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@PBXPAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z 
add	esp, 4
push	eax
call	??$addressof@PBX@std@@YAPAPBXAAPBX@Z	
add	esp, 4
push	eax
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PBX@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPBX@Z 
push	1
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 28					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-44], eax
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
push	1
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z 
mov	DWORD PTR __Pnode$[ebp], eax
cmp	DWORD PTR __Next$[ebp], 0
jne	SHORT $LN2@Buynode0
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR __Next$[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR __Prev$[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR tv132[ebp], eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	DWORD PTR tv133[ebp], eax
lea	edx, DWORD PTR __Next$[ebp]
push	edx
mov	eax, DWORD PTR tv132[ebp]
push	eax
call	??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv133[ebp]
call	??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z 
add	esp, 4
mov	DWORD PTR tv134[ebp], eax
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	DWORD PTR tv135[ebp], eax
lea	eax, DWORD PTR __Prev$[ebp]
push	eax
mov	ecx, DWORD PTR tv134[ebp]
push	ecx
call	??$addressof@PAU?$_List_node@PBXPAX@std@@@std@@YAPAPAU?$_List_node@PBXPAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR tv135[ebp]
call	??$construct@PAU?$_List_node@PBXPAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@PBXPAX@1@AAPAU21@@Z 
jmp	SHORT $LN5@Buynode0
push	1
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Buynode0
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Pnode$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-48]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@PBXV?$allocator@PBX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@PAU32@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Myval@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPBXPAU?$_List_node@PBXPAX@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 8
pop	ebp
ret	0
ENDP
?_Prevnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 4
pop	ebp
ret	0
ENDP
?_Nextnode@?$_List_val@U?$_List_simple_types@PBX@std@@@std@@SAAAPAU?$_List_node@PBXPAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
pop	ebp
ret	0
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PBXPAX@std@@@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@U?$_List_node@PBXPAX@std@@@std@@@std@@SAIABV?$allocator@U?$_List_node@PBXPAX@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QBEIXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 357913941				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEPAU?$_List_node@PBXPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@U?$_List_node@PBXPAX@std@@@std@@YAPAU?$_List_node@PBXPAX@0@IPAU10@@Z 
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAEXPAU?$_List_node@PBXPAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@U?$_List_node@PBXPAX@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Kfn@?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@SAABQBXABQBX@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE_NABQBX0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Keyval2$[ebp]
push	eax
mov	ecx, DWORD PTR __Keyval1$[ebp]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE?AU?$equal_to@PBX@2@XZ 
mov	ecx, eax
call	??R?$equal_to@PBX@std@@QBE_NABQBX0@Z	
movzx	eax, al
test	eax, eax
jne	SHORT $LN3@operator
mov	DWORD PTR tv77[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv77[ebp], 0
mov	al, BYTE PTR tv77[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??R?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBEIABQBX@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Gethash@?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QBE?AU?$hash@PBX@2@XZ 
mov	ecx, eax
call	??R?$_Bitwise_hash@PBX@std@@QBEIABQBX@Z	
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Getkeyeq@?$_Hash_oper2@$0A@U?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@QBE?AU?$equal_to@PBX@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Gethash@?$_Hash_oper1@$0A@U?$hash@PBX@std@@@std@@QBE?AU?$hash@PBX@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??R?$_Bitwise_hash@PBX@std@@QBEIABQBX@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	4
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
call	?_Hash_seq@std@@YAIPBEI@Z		
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??R?$equal_to@PBX@std@@QBE_NABQBX0@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Left$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN3@operator
mov	DWORD PTR tv65[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv65[ebp], 0
mov	al, BYTE PTR tv65[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 48					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-60]
mov	ecx, 12					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 52					
call	?end@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@XZ 
mov	DWORD PTR tv92[ebp], eax
mov	ecx, DWORD PTR tv92[ebp]
mov	DWORD PTR tv89[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv89[ebp]
push	edx
lea	eax, DWORD PTR _aFontDataKey$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 52					
call	?find@?$_Hash@V?$_Uset_traits@_KV?$_Uhash_compare@_KU?$hash@_K@std@@U?$equal_to@_K@2@@std@@V?$allocator@_K@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@2@AB_K@Z 
mov	DWORD PTR tv93[ebp], eax
mov	edx, DWORD PTR tv93[ebp]
mov	DWORD PTR tv91[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv91[ebp]
call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QBE_NABV01@@Z 
mov	BYTE PTR $T4[ebp], al
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
mov	al, BYTE PTR $T4[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 60					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z$1 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-56]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?HasStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAE_N_K@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?AddStoredFontData@DrawEventRecorderPrivate@gfx@mozilla@@QAEX_K@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR _aFontDataKey$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 52					
call	?insert@?$unordered_set@_KU?$hash@_K@std@@U?$equal_to@_K@2@V?$allocator@_K@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@2@AB_K@Z 
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@_K@std@@@std@@@std@@_N@std@@QAE@XZ
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 52					
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-64]
mov	ecx, 13					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR _aObject$[ebp]
call	??BReferencePtr@gfx@mozilla@@QBEPAXXZ	
mov	DWORD PTR $T4[ebp], eax
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?end@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@XZ 
mov	DWORD PTR tv94[ebp], eax
mov	ecx, DWORD PTR tv94[ebp]
mov	DWORD PTR tv91[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv91[ebp]
push	edx
lea	eax, DWORD PTR $T4[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?find@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAE?AV?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@2@ABQBX@Z 
mov	DWORD PTR tv95[ebp], eax
mov	edx, DWORD PTR tv95[ebp]
mov	DWORD PTR tv93[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv93[ebp]
call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QBE_NABV01@@Z 
mov	BYTE PTR $T5[ebp], al
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
mov	al, BYTE PTR $T5[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
add	esp, 64					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z$1 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?HasStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAE_NUReferencePtr@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?RemoveStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR _aObject$[ebp]
call	??BReferencePtr@gfx@mozilla@@QBEPAXXZ	
mov	DWORD PTR $T1[ebp], eax
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?erase@?$_Hash@V?$_Uset_traits@PBXV?$_Uhash_compare@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@@std@@V?$allocator@PBX@2@$0A@@std@@@std@@QAEIABQBX@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?AddStoredObject@DrawEventRecorderPrivate@gfx@mozilla@@QAEXUReferencePtr@23@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR _aObject$[ebp]
call	??BReferencePtr@gfx@mozilla@@QBEPAXXZ	
mov	DWORD PTR $T2[ebp], eax
lea	eax, DWORD PTR $T2[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?insert@?$unordered_set@PBXU?$hash@PBX@std@@U?$equal_to@PBX@2@V?$allocator@PBX@2@@std@@QAE?AU?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@2@$$QAPBX@Z 
lea	ecx, DWORD PTR $T1[ebp]
call	??1?$pair@V?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@PBX@std@@@std@@@std@@_N@std@@QAE@XZ
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedFilterNodeSetInput@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedFilterNodeSetInput@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedFilterNodeSetInput@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedFilterNodeSetInput@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_08KOAGOIFI@SetInput?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	31					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetInput@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
push	0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	ecx, DWORD PTR _aInputSurface$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@IPAVSourceSurface@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	31					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetInput@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aInputNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
push	0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__ehhandler$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedFilterNodeSetInput@gfx@mozilla@@QAE@PAVFilterNode@12@I0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedFilterNodeSetAttribute@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedFilterNodeSetAttribute@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN13@Orphan_ran
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN12@Orphan_ran
DD	-24					
DD	4
DD	$LN10@Orphan_ran
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z 
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z 
mov	DWORD PTR __Ptr$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z 
jmp	SHORT $LN5@Reallocate
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Reallocate
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
mov	DWORD PTR __Size$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN1@Reallocate
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+12]
sub	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ptr$[ebp]
add	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR __Ptr$[ebp]
add	edx, DWORD PTR __Size$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Ptr$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__ehhandler$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Grow_to@?$vector@EV?$allocator@E@std@@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAE0AAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z 
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Destroy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN4@Destroy
DD	-9					
DD	1
DD	$LN3@Destroy
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Ptr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@EV?$allocator@E@std@@@std@@IBEXPAE0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Ptr$[ebp]
mov	DWORD PTR [edx+8], eax
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ 
mov	DWORD PTR tv73[ebp], eax
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR tv72[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv72[ebp]
call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QBEAAEXZ 
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T3[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
cmp	DWORD PTR __Newsize$[ebp], eax
jae	SHORT $LN4@resize
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
sub	eax, DWORD PTR __Newsize$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Pop_back_n@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
jmp	$LN6@resize
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Newsize$[ebp]
jae	$LN6@resize
lea	eax, DWORD PTR __Alval$2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Newsize$[ebp]
sub	ecx, eax
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@EV?$allocator@E@std@@@std@@IAEXI@Z 
mov	DWORD PTR __$EHRec$[ebp+12], 0
lea	edx, DWORD PTR __Alval$2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Newsize$[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	??$_Uninitialized_default_fill_n@PAEIU?$_Wrap_alloc@V?$allocator@E@std@@@std@@@std@@YAXPAEIAAU?$_Wrap_alloc@V?$allocator@E@std@@@0@@Z 
add	esp, 12					
jmp	SHORT $LN7@resize
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN10@resize
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Newsize$[ebp]
sub	ecx, eax
mov	edx, DWORD PTR _this$[ebp]
add	ecx, DWORD PTR [edx+8]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], ecx
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN14@resize
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
npad	2
DD	1
DD	$LN13@resize
DD	-25					
DD	1
DD	$LN11@resize
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
__ehhandler$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@E@std@@@std@@@std@@QAE@PAEPBU_Container_base12@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unused_capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@EV?$allocator@E@std@@@std@@IAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T1[ebp]
call	??0?$allocator@E@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@E@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Free_proxy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN4@Free_proxy
DD	-9					
DD	1
DD	$LN3@Free_proxy
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Alloc_prox
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Alloc_prox
DD	-9					
DD	1
DD	$LN3@Alloc_prox
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@EV?$allocator@E@std@@@std@@@std@@QAE@ABV?$allocator@E@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_val@U?$_Simple_types@E@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEXPAEI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@E@std@@QAEXPAEI@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAEPAEI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@E@std@@QAEPAEI@Z	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@E@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@E@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@E@std@@@std@@SAIABV?$allocator@E@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@E@std@@QBEIXZ	
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$allocator@E@std@@QBEIXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
or	eax, -1
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@E@std@@QAEPAEI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@E@std@@YAPAEIPAE@Z		
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@E@std@@QAEXPAEI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@E@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedFilterNodeSetAttribute@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0N@OOIBANPL@SetAttribute?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	30					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeSetAttribute@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aNode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aIndex$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+36], 13			
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _aSize$[ebp]
shl	edx, 2
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?resize@?$vector@EV?$allocator@E@std@@@std@@QAEXI@Z 
mov	eax, DWORD PTR _aSize$[ebp]
shl	eax, 2
push	eax
mov	ecx, DWORD PTR _aFloat$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	?front@?$vector@EV?$allocator@E@std@@@std@@QAEAAEXZ 
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__unwindfunclet$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
jmp	??1?$vector@EV?$allocator@E@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedFilterNodeSetAttribute@gfx@mozilla@@QAE@PAVFilterNode@12@IPBMI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedMaskSurface@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedMaskSurface@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedMaskSurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0M@JMBELIOH@MaskSurface?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	26					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedMaskSurface@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aRefMask$[ebp]
mov	DWORD PTR [edx+96], eax
mov	ecx, DWORD PTR _aRefMask$[ebp+4]
mov	DWORD PTR [edx+100], ecx
mov	edx, DWORD PTR _aOffset$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+104], eax
mov	DWORD PTR [edx+108], ecx
mov	eax, DWORD PTR _aOptions$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+112], ecx
mov	DWORD PTR [eax+116], edx
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 32					
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedMaskSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedScaledFontDestruction@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedScaledFontDestruction@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedScaledFontDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedScaledFontDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BH@BBDNGHMD@ScaledFont?5Destruction?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedScaledFontDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	25					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedScaledFontDestruction@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedScaledFontCreation@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedScaledFontCreation@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedScaledFontCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedScaledFontCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BE@JGKBADFK@ScaledFont?5Creation?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedScaledFontCreation@gfx@mozilla@@QAE@UReferencePtr@12@URecordedFontDetails@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	24					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedScaledFontCreation@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aFontDetails$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _aFontDetails$[ebp+4]
mov	DWORD PTR [ecx+36], eax
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR _aFontDetails$[ebp+16]
movss	DWORD PTR [ecx+40], xmm0
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aFontDetails$[ebp+12]
mov	DWORD PTR [edx+44], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	32					
ENDP
??_GRecordedFontData@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFontData@gfx@mozilla@@UAE@XZ	
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetObjectRef@RecordedFontData@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedFontData@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_09NHBGBJBJ@Font?5Data?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	esi
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	33					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFontData@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+56], 0
mov	esi, esp
mov	eax, DWORD PTR _this$[ebp]
push	eax
push	OFFSET ?FontDataProc@RecordedFontData@gfx@mozilla@@SAXPBEIIMPAX@Z 
mov	ecx, DWORD PTR _aScaledFont$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _aScaledFont$[ebp]
mov	eax, DWORD PTR [edx+16]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+56], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__ehhandler$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedFontData@gfx@mozilla@@QAE@PAVScaledFont@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?FontDataProc@RecordedFontData@gfx@mozilla@@SAXPBEIIMPAX@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR _aBaton$[ebp]
mov	DWORD PTR _recordedFontData$[ebp], eax
push	ecx
movss	xmm0, DWORD PTR _aGlyphSize$[ebp]
movss	DWORD PTR [esp], xmm0
mov	ecx, DWORD PTR _aIndex$[ebp]
push	ecx
mov	edx, DWORD PTR _aSize$[ebp]
push	edx
mov	eax, DWORD PTR _aData$[ebp]
push	eax
mov	ecx, DWORD PTR _recordedFontData$[ebp]
call	?SetFontData@RecordedFontData@gfx@mozilla@@QAEXPBEIIM@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GRecordedSnapshot@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedSnapshot@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedSnapshot@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedSnapshot@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedSnapshot@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_08PJJDBLOH@Snapshot?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	23					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedSnapshot@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	ecx, DWORD PTR _aDT$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__ehhandler$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedSnapshot@gfx@mozilla@@QAE@UReferencePtr@12@PAVDrawTarget@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedGradientStopsDestruction@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedGradientStopsDestruction@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedGradientStopsDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedGradientStopsDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BK@HEGJICH@GradientStops?5Destruction?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedGradientStopsDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	22					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedGradientStopsDestruction@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedGradientStopsCreation@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedGradientStopsCreation@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetObjectRef@RecordedGradientStopsCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedGradientStopsCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BH@IBJOEPML@GradientStops?5Creation?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedGradientStopsCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAUGradientStop@12@IW4ExtendMode@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	21					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedGradientStopsCreation@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aStops$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aNumStops$[ebp]
mov	DWORD PTR [eax+36], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR _aExtendMode$[ebp]
mov	BYTE PTR [edx+40], al
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+41], 0
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
??_GRecordedFilterNodeDestruction@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedFilterNodeDestruction@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedFilterNodeDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedFilterNodeDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BH@JDMCLJID@FilterNode?5Destruction?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFilterNodeDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	28					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeDestruction@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedFilterNodeCreation@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFilterNodeCreation@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetObjectRef@RecordedFilterNodeCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedFilterNodeCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BE@PCJMNMPN@FilterNode?5Creation?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFilterNodeCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4FilterType@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	27					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedFilterNodeCreation@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _aType$[ebp]
mov	BYTE PTR [ecx+32], dl
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??_GRecordedSourceSurfaceDestruction@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedSourceSurfaceDestruction@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedSourceSurfaceDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BK@MBHBMPIO@SourceSurface?5Destruction?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedSourceSurfaceDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	20					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedSourceSurfaceDestruction@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedSourceSurfaceCreation@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedSourceSurfaceCreation@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetObjectRef@RecordedSourceSurfaceCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedSourceSurfaceCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BH@GPIFHBMB@SourceSurface?5Creation?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedSourceSurfaceCreation@gfx@mozilla@@QAE@UReferencePtr@12@PAEHABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	19					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedSourceSurfaceCreation@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aData$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aStride$[ebp]
mov	DWORD PTR [eax+36], ecx
mov	edx, DWORD PTR _aSize$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+40], eax
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	cl, BYTE PTR _aFormat$[ebp]
mov	BYTE PTR [eax+48], cl
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+49], 0
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
mov	eax, ecx
cdq
mov	ecx, 28					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Destroy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXPAUPathOp@gfx@mozilla@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@YAXPAUPathOp@gfx@mozilla@@0AAU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@0@@Z 
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Destroy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN4@Destroy
DD	-9					
DD	1
DD	$LN3@Destroy
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
??1?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@IAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$vector@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T1[ebp]
call	??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Free_proxy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN4@Free_proxy
DD	-9					
DD	1
DD	$LN3@Free_proxy
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Alloc_prox
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Alloc_prox
DD	-9					
DD	1
DD	$LN3@Alloc_prox
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UPathOp@gfx@mozilla@@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@@std@@QAE@ABV?$allocator@UPathOp@gfx@mozilla@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_val@U?$_Simple_types@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Wrap_alloc@V?$allocator@UPathOp@gfx@mozilla@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$allocator@UPathOp@gfx@mozilla@@@std@@QAEXPAUPathOp@gfx@mozilla@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@UPathOp@gfx@mozilla@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GRecordedDrawFilter@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedDrawFilter@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedDrawFilter@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0L@OHCNNFM@DrawFilter?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedDrawFilter@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	29					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedDrawFilter@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aNode$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aNode$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 40					
mov	eax, DWORD PTR _aSourceRect$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _aDestPoint$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+56], edx
mov	DWORD PTR [ecx+60], eax
mov	edx, DWORD PTR _aOptions$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+64], eax
mov	DWORD PTR [edx+68], ecx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
??_GRecordedDrawSurfaceWithShadow@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedDrawSurfaceWithShadow@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedDrawSurfaceWithShadow@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BG@KGEGJOEN@DrawSurfaceWithShadow?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedDrawSurfaceWithShadow@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@ABUColor@12@2MW4CompositionOp@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	16					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedDrawSurfaceWithShadow@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aRefSource$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aRefSource$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	edx, DWORD PTR _aDest$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+40], eax
mov	DWORD PTR [edx+44], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 48					
mov	ecx, DWORD PTR _aColor$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], ecx
mov	edx, DWORD PTR _aOffset$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+64], eax
mov	DWORD PTR [edx+68], ecx
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR _aSigma$[ebp]
movss	DWORD PTR [eax+72], xmm0
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _aOp$[ebp]
mov	BYTE PTR [ecx+76], dl
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	32					
ENDP
??_GRecordedDrawSurface@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedDrawSurface@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedDrawSurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0M@FPAGMAAM@DrawSurface?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedDrawSurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@2ABUDrawSurfaceOptions@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	15					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedDrawSurface@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aRefSource$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aRefSource$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 40					
mov	eax, DWORD PTR _aDest$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 56					
mov	edx, DWORD PTR _aSource$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _aDSOptions$[ebp]
mov	cx, WORD PTR [eax]
mov	edx, DWORD PTR _this$[ebp]
mov	WORD PTR [edx+72], cx
mov	eax, DWORD PTR _aOptions$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+76], ecx
mov	DWORD PTR [eax+80], edx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
??_GRecordedSetTransform@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedSetTransform@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedSetTransform@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedSetTransform@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0N@GMAEDBFE@SetTransform?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedSetTransform@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVMatrix@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	7
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedSetTransform@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
add	edx, 32					
mov	eax, DWORD PTR _aTransform$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], ecx
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR [eax+20]
mov	DWORD PTR [edx+20], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedPopLayer@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedPopLayer@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedPopLayer@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedPopLayer@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_08BHONKBFI@PopLayer?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedPopLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	35					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedPopLayer@gfx@mozilla@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_GRecordedPushLayer@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedPushLayer@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedPushLayer@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedPushLayer@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_09BMDJGKOJ@PushLayer?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	34					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedPushLayer@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR _aOpaque$[ebp]
mov	BYTE PTR [edx+32], al
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR _aOpacity$[ebp]
movss	DWORD PTR [ecx+36], xmm0
mov	edx, DWORD PTR _aMask$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR _this$[ebp]
add	eax, 48					
mov	ecx, DWORD PTR _aMaskTransform$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR [ecx+20]
mov	DWORD PTR [eax+20], ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 72					
mov	eax, DWORD PTR _aBounds$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _aCopyBackground$[ebp]
mov	BYTE PTR [ecx+88], dl
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedPushLayer@gfx@mozilla@@QAE@PAVDrawTarget@12@_NMPAVSourceSurface@12@ABVMatrix@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@1@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedPopClip@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedPopClip@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedPopClip@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedPopClip@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_07LPLNABOG@PopClip?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedPopClip@gfx@mozilla@@QAE@PAVDrawTarget@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	10					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedPopClip@gfx@mozilla@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_GRecordedPushClipRect@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedPushClipRect@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedPushClipRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0N@NKKGNEEO@PushClipRect?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedPushClipRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	9
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedPushClipRect@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
add	edx, 32					
mov	eax, DWORD PTR _aRect$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedPushClip@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedPushClip@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedPushClip@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedPushClip@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_08LAKJJBCJ@PushClip?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedPushClip@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	8
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedPushClip@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aPath$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aPath$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??_GRecordedCopySurface@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedCopySurface@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedCopySurface@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedCopySurface@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0M@EOFCJBAL@CopySurface?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedCopySurface@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	6
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedCopySurface@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aSourceSurface$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aSourceSurface$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 40					
mov	eax, DWORD PTR _aSourceRect$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _aDest$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+56], edx
mov	DWORD PTR [ecx+60], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
??_GRecordedClearRect@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedClearRect@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedClearRect@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedClearRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_09GPGGEOMP@ClearRect?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedClearRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	5
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedClearRect@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
add	edx, 32					
mov	eax, DWORD PTR _aRect$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedStroke@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedStroke@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedStroke@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedStroke@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_06FMECHDKF@Stroke?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	14					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedStroke@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aPath$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aPath$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 100				
mov	eax, DWORD PTR _aStrokeOptions$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], ecx
mov	ecx, DWORD PTR [eax+16]
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR [eax+20]
mov	DWORD PTR [edx+20], eax
mov	ecx, DWORD PTR _aOptions$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+124], edx
mov	DWORD PTR [ecx+128], eax
mov	edx, DWORD PTR _aPattern$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 40					
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedStroke@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedMask@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedMask@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedMask@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedMask@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_04MKJKGABJ@Mask?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	13					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedMask@gfx@mozilla@@6B@
mov	edx, DWORD PTR _aOptions$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+152], eax
mov	DWORD PTR [edx+156], ecx
mov	eax, DWORD PTR _aSource$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	edx, DWORD PTR _aMask$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 92					
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedMask@gfx@mozilla@@QAE@PAVDrawTarget@12@ABVPattern@12@1ABUDrawOptions@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedFillGlyphs@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFillGlyphs@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedFillGlyphs@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0L@JJNFGDBI@FillGlyphs?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	12					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedFillGlyphs@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aScaledFont$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aScaledFont$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	edx, DWORD PTR _aOptions$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+100], eax
mov	DWORD PTR [edx+104], ecx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aNumGlyphs$[ebp]
mov	DWORD PTR [edx+112], eax
mov	ecx, DWORD PTR _aNumGlyphs$[ebp]
mov	DWORD PTR $T4[ebp], ecx
xor	ecx, ecx
mov	eax, DWORD PTR $T4[ebp]
mov	edx, 12					
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T2[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN3@RecordedFi
push	OFFSET ??0Glyph@gfx@mozilla@@QAE@XZ
mov	eax, DWORD PTR $T4[ebp]
push	eax
push	12					
mov	ecx, DWORD PTR $T2[ebp]
push	ecx
call	??_H@YGXPAXIHP6EPAX0@Z@Z
mov	edx, DWORD PTR $T2[ebp]
mov	DWORD PTR tv141[ebp], edx
jmp	SHORT $LN4@RecordedFi
mov	DWORD PTR tv141[ebp], 0
mov	eax, DWORD PTR tv141[ebp]
mov	DWORD PTR $T3[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR $T3[ebp]
mov	DWORD PTR [ecx+108], edx
imul	eax, DWORD PTR _aNumGlyphs$[ebp], 12
push	eax
mov	ecx, DWORD PTR _aGlyphs$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+108]
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__unwindfunclet$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??_V@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__ehhandler$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedFillGlyphs@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@PBUGlyph@12@I@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedFill@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFill@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedFill@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedFill@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_04CAMFALGN@Fill?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	11					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedFill@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aPath$[ebp]
mov	DWORD PTR [edx+32], eax
mov	ecx, DWORD PTR _aPath$[ebp+4]
mov	DWORD PTR [edx+36], ecx
mov	edx, DWORD PTR _aOptions$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+100], eax
mov	DWORD PTR [edx+104], ecx
mov	eax, DWORD PTR _aPattern$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedFill@gfx@mozilla@@QAE@PAVDrawTarget@12@UReferencePtr@12@ABVPattern@12@ABUDrawOptions@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedStrokeLine@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedStrokeLine@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedStrokeLine@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0L@NHOHLGP@StrokeLine?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	4
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedStrokeLine@gfx@mozilla@@6B@
mov	edx, DWORD PTR _aBegin$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+32], eax
mov	DWORD PTR [edx+36], ecx
mov	eax, DWORD PTR _aEnd$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+40], ecx
mov	DWORD PTR [eax+44], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 108				
mov	edx, DWORD PTR _aStrokeOptions$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR [edx+20]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _aOptions$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+132], ecx
mov	DWORD PTR [eax+136], edx
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 48					
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedStrokeLine@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@1ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedStrokeRect@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedStrokeRect@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedStrokeRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0L@MDHJFNHH@StrokeRect?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	3
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedStrokeRect@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
add	edx, 32					
mov	eax, DWORD PTR _aRect$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 108				
mov	edx, DWORD PTR _aStrokeOptions$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR [edx+20]
mov	DWORD PTR [ecx+20], edx
mov	eax, DWORD PTR _aOptions$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+132], ecx
mov	DWORD PTR [eax+136], edx
mov	ecx, DWORD PTR _aPattern$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 48					
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedStrokeRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUStrokeOptions@12@ABUDrawOptions@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedFillRect@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedFillRect@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedFillRect@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetName@RecordedFillRect@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_08HBDJBON@FillRect?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aDT$[ebp]
push	eax
push	2
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedFillRect@gfx@mozilla@@6B@
mov	edx, DWORD PTR _this$[ebp]
add	edx, 32					
mov	eax, DWORD PTR _aRect$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	ecx, DWORD PTR _aOptions$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+108], edx
mov	DWORD PTR [ecx+112], eax
mov	edx, DWORD PTR _aPattern$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 48					
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?StorePattern@RecordedEvent@gfx@mozilla@@QBEXAAUPatternStorage@23@ABVPattern@23@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
ENDP
__ehhandler$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedFillRect@gfx@mozilla@@QAE@PAVDrawTarget@12@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@12@ABVPattern@12@ABUDrawOptions@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedCreateSimilarDrawTarget@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedCreateSimilarDrawTarget@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedCreateSimilarDrawTarget@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BI@HAALHLCF@CreateSimilarDrawTarget?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedCreateSimilarDrawTarget@gfx@mozilla@@QAE@UReferencePtr@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	32					
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedCreateSimilarDrawTarget@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	ecx, DWORD PTR _aSize$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	DWORD PTR [ecx+36], eax
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR _aFormat$[ebp]
mov	BYTE PTR [edx+40], al
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
??_GRecordedDrawTargetDestruction@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedDrawTargetDestruction@gfx@mozilla@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetObjectRef@RecordedDrawTargetDestruction@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedDrawTargetDestruction@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BH@OLFOHOKF@DrawTarget?5Destruction?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedDrawTargetDestruction@gfx@mozilla@@QAE@UReferencePtr@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedDrawTargetDestruction@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??_GRecordedDrawTargetCreation@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__ehhandler$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1RecordedDrawTargetCreation@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?GetObjectRef@RecordedDrawTargetCreation@gfx@mozilla@@UBE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetName@RecordedDrawTargetCreation@gfx@mozilla@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
push	OFFSET ??_C@_0BE@EEEOOOM@DrawTarget?5Creation?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedDrawTargetCreation@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aRefPtr$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR _aRefPtr$[ebp+4]
mov	DWORD PTR [ecx+28], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _aType$[ebp]
mov	BYTE PTR [ecx+32], dl
mov	eax, DWORD PTR _aSize$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+36], ecx
mov	DWORD PTR [eax+40], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _aFormat$[ebp]
mov	BYTE PTR [ecx+44], dl
mov	eax, DWORD PTR _this$[ebp]
mov	cl, BYTE PTR _aHasExistingData$[ebp]
mov	BYTE PTR [eax+45], cl
mov	edx, DWORD PTR _aExistingData$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__ehhandler$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedDrawTargetCreation@gfx@mozilla@@QAE@UReferencePtr@12@W4BackendType@12@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@12@W4SurfaceFormat@12@_NPAVSourceSurface@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRecordedDrawingEvent@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedDrawingEvent@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aType$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0RecordedEvent@gfx@mozilla@@IAE@H@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7RecordedDrawingEvent@gfx@mozilla@@6B@
mov	edx, DWORD PTR _aTarget$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
ENDP
__ehhandler$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RecordedDrawingEvent@gfx@mozilla@@IAE@W4EventType@RecordedEvent@12@PAVDrawTarget@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?GetDestinedDT@RecordedDrawingEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
mov	edx, DWORD PTR [eax+28]
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_GRecordedEvent@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RecordedEvent@gfx@mozilla@@UAE@XZ	
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 2
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAEXPAMI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Destroy@?$vector@MV?$allocator@M@std@@@std@@IAEXPAM0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@M@std@@@std@@@std@@YAXPAM0AAU?$_Wrap_alloc@V?$allocator@M@std@@@0@@Z 
add	esp, 12					
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Destroy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
npad	1
DD	1
DD	$LN4@Destroy
DD	-9					
DD	1
DD	$LN3@Destroy
DB	95					
DB	65					
DB	108					
DB	118					
DB	97					
DB	108					
DB	0
ENDP
??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@MV?$allocator@M@std@@@std@@IAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T1[ebp]
call	??0?$allocator@M@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@M@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Free_proxy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN4@Free_proxy
DD	-9					
DD	1
DD	$LN3@Free_proxy
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Alloc_prox
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Alloc_prox
DD	-9					
DD	1
DD	$LN3@Alloc_prox
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@MV?$allocator@M@std@@@std@@@std@@QAE@ABV?$allocator@M@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_val@U?$_Simple_types@M@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAEXPAMI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@M@std@@QAEXPAMI@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Wrap_alloc@V?$allocator@M@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@M@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$allocator@M@std@@QAEXPAMI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@M@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0RecordedEvent@gfx@mozilla@@IAE@H@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedEvent@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _aType$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0?$vector@MV?$allocator@M@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetDestinedDT@RecordedEvent@gfx@mozilla@@UAE?AUReferencePtr@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z	
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?OutputSimpleEventInfo@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?RecordToStream@RecordedEvent@gfx@mozilla@@UBEXAAV?$basic_ostream@DU?$char_traits@D@std@@@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?PlayEvent@RecordedEvent@gfx@mozilla@@UBEXPAVTranslator@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RecordedEvent@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RecordedEvent@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??1?$vector@MV?$allocator@M@std@@@std@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 120				
push	ebx
push	esi
push	edi
lea	edi, DWORD PTR [ebp-136]
mov	ecx, 30					
mov	eax, -858993460				
rep stosd
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR __State$[ebp], 0
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	?length@?$char_traits@D@std@@SAIPBD@Z	
add	esp, 4
xor	ecx, ecx
mov	DWORD PTR __Count$[ebp], eax
mov	DWORD PTR __Count$[ebp+4], ecx
mov	edx, DWORD PTR __Ostr$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [eax+4]
mov	esi, esp
call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv328[ebp], eax
mov	DWORD PTR tv328[ebp+4], edx
cmp	DWORD PTR tv328[ebp+4], 0
jl	SHORT $LN17@operator
jg	SHORT $LN24@operator
cmp	DWORD PTR tv328[ebp], 0
jbe	SHORT $LN17@operator
mov	ecx, DWORD PTR __Ostr$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [edx+4]
mov	esi, esp
call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv342[ebp], eax
mov	DWORD PTR tv342[ebp+4], edx
mov	eax, DWORD PTR tv342[ebp+4]
cmp	eax, DWORD PTR __Count$[ebp+4]
jl	SHORT $LN17@operator
jg	SHORT $LN25@operator
mov	ecx, DWORD PTR tv342[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jbe	SHORT $LN17@operator
mov	edx, DWORD PTR __Ostr$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [eax+4]
mov	esi, esp
call	DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
cmp	esi, esp
call	__RTC_CheckEsp
sub	eax, DWORD PTR __Count$[ebp]
sbb	edx, DWORD PTR __Count$[ebp+4]
mov	DWORD PTR tv135[ebp], eax
mov	DWORD PTR tv135[ebp+4], edx
jmp	SHORT $LN18@operator
xorpd	xmm0, xmm0
movlpd	QWORD PTR tv135[ebp], xmm0
mov	ecx, DWORD PTR tv135[ebp]
mov	DWORD PTR __Pad$[ebp], ecx
mov	edx, DWORD PTR tv135[ebp+4]
mov	DWORD PTR __Pad$[ebp+4], edx
mov	eax, DWORD PTR __Ostr$[ebp]
push	eax
lea	ecx, DWORD PTR __Ok$[ebp]
call	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z 
mov	DWORD PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR __Ok$[ebp]
call	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN14@operator
mov	edx, DWORD PTR __State$[ebp]
or	edx, 4
mov	DWORD PTR __State$[ebp], edx
jmp	$LN13@operator
mov	BYTE PTR __$EHRec$[ebp+12], 1
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv137[ebp], eax
mov	eax, DWORD PTR tv137[ebp]
and	eax, 448				
cmp	eax, 64					
je	$LN11@operator
jmp	SHORT $LN10@operator
mov	ecx, DWORD PTR __Pad$[ebp]
sub	ecx, 1
mov	edx, DWORD PTR __Pad$[ebp+4]
sbb	edx, 0
mov	DWORD PTR __Pad$[ebp], ecx
mov	DWORD PTR __Pad$[ebp+4], edx
cmp	DWORD PTR __Pad$[ebp+4], 0
jl	$LN11@operator
jg	SHORT $LN26@operator
cmp	DWORD PTR __Pad$[ebp], 0
jbe	$LN11@operator
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR tv283[ebp], al
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv284[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR tv283[ebp]
push	eax
mov	ecx, DWORD PTR tv284[ebp]
call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv285[ebp], eax
mov	ecx, DWORD PTR tv285[ebp]
mov	DWORD PTR $T6[ebp], ecx
call	?eof@?$char_traits@D@std@@SAHXZ		
mov	DWORD PTR $T5[ebp], eax
lea	edx, DWORD PTR $T6[ebp]
push	edx
lea	eax, DWORD PTR $T5[ebp]
push	eax
call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z 
add	esp, 8
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN7@operator
mov	edx, DWORD PTR __State$[ebp]
or	edx, 4
mov	DWORD PTR __State$[ebp], edx
jmp	SHORT $LN11@operator
jmp	$LN9@operator
cmp	DWORD PTR __State$[ebp], 0
jne	SHORT $LN6@operator
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	ecx, edx
call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv286[ebp], eax
mov	esi, esp
mov	eax, DWORD PTR __Count$[ebp+4]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Val$[ebp]
push	edx
mov	ecx, DWORD PTR tv286[ebp]
call	DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv287[ebp], eax
mov	DWORD PTR tv287[ebp+4], edx
mov	eax, DWORD PTR tv287[ebp]
cmp	eax, DWORD PTR __Count$[ebp]
jne	SHORT $LN27@operator
mov	ecx, DWORD PTR tv287[ebp+4]
cmp	ecx, DWORD PTR __Count$[ebp+4]
je	SHORT $LN6@operator
mov	edx, DWORD PTR __State$[ebp]
or	edx, 4
mov	DWORD PTR __State$[ebp], edx
cmp	DWORD PTR __State$[ebp], 0
jne	$LN5@operator
jmp	SHORT $LN4@operator
mov	eax, DWORD PTR __Pad$[ebp]
sub	eax, 1
mov	ecx, DWORD PTR __Pad$[ebp+4]
sbb	ecx, 0
mov	DWORD PTR __Pad$[ebp], eax
mov	DWORD PTR __Pad$[ebp+4], ecx
cmp	DWORD PTR __Pad$[ebp+4], 0
jl	$LN5@operator
jg	SHORT $LN28@operator
cmp	DWORD PTR __Pad$[ebp], 0
jbe	$LN5@operator
mov	edx, DWORD PTR __Ostr$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [eax+4]
mov	esi, esp
call	DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR tv288[ebp], al
mov	ecx, DWORD PTR __Ostr$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [edx+4]
mov	esi, esp
call	DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv289[ebp], eax
mov	esi, esp
movzx	eax, BYTE PTR tv288[ebp]
push	eax
mov	ecx, DWORD PTR tv289[ebp]
call	DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv290[ebp], eax
mov	ecx, DWORD PTR tv290[ebp]
mov	DWORD PTR $T4[ebp], ecx
call	?eof@?$char_traits@D@std@@SAHXZ		
mov	DWORD PTR $T3[ebp], eax
lea	edx, DWORD PTR $T4[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z 
add	esp, 8
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@operator
mov	edx, DWORD PTR __State$[ebp]
or	edx, 4
mov	DWORD PTR __State$[ebp], edx
jmp	SHORT $LN5@operator
jmp	$LN3@operator
mov	esi, esp
push	0
push	0
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	ecx, edx
call	DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN19@operator
mov	esi, esp
push	1
push	4
mov	eax, DWORD PTR __Ostr$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Ostr$[ebp]
add	edx, DWORD PTR [ecx+4]
mov	ecx, edx
call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, $LN23@operator
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN13@operator
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	esi, esp
push	0
mov	eax, DWORD PTR __State$[ebp]
push	eax
mov	ecx, DWORD PTR __Ostr$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR __Ostr$[ebp]
add	ecx, DWORD PTR [edx+4]
call	DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Ostr$[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR __Ok$[ebp]
call	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR $T2[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN32@operator
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 136				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN31@operator
DD	-48					
DD	8
DD	$LN29@operator
DB	95					
DB	79					
DB	107					
DB	0
ENDP
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 PROC
lea	ecx, DWORD PTR __Ok$[ebp]
jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-140]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 104				
call	??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 104				
mov	esi, esp
call	DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
sub	ecx, 104				
call	??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
sub	ecx, 104				
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
sub	eax, 104				
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __State$[ebp], 0
mov	eax, DWORD PTR __Mode$[ebp]
and	eax, 1
jne	SHORT $LN4@Getstate
mov	ecx, DWORD PTR __State$[ebp]
or	ecx, 4
mov	DWORD PTR __State$[ebp], ecx
mov	edx, DWORD PTR __Mode$[ebp]
and	edx, 2
jne	SHORT $LN3@Getstate
mov	eax, DWORD PTR __State$[ebp]
or	eax, 2
mov	DWORD PTR __State$[ebp], eax
mov	ecx, DWORD PTR __Mode$[ebp]
and	ecx, 8
je	SHORT $LN2@Getstate
mov	edx, DWORD PTR __State$[ebp]
or	edx, 8
mov	DWORD PTR __State$[ebp], edx
mov	eax, DWORD PTR __Mode$[ebp]
and	eax, 4
je	SHORT $LN1@Getstate
mov	ecx, DWORD PTR __State$[ebp]
or	ecx, 16					
mov	DWORD PTR __State$[ebp], ecx
mov	eax, DWORD PTR __State$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 1
je	SHORT $LN1@Tidy
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN4@Tidy
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv88[ebp], eax
jmp	SHORT $LN5@Tidy
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv88[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR tv88[ebp]
sub	edx, eax
push	edx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	?deallocate@?$allocator@D@std@@QAEXPADI@Z 
mov	esi, esp
push	0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+56], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+60]
and	edx, -2					
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+60], edx
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+56], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __State$[ebp]
mov	DWORD PTR [ecx+60], edx
cmp	DWORD PTR __Count$[ebp], 0
je	$LN5@Init
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 6
cmp	ecx, 6
je	$LN5@Init
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	?allocate@?$allocator@D@std@@QAEPADI@Z	
mov	DWORD PTR __Pnew$1[ebp], eax
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Pnew$1[ebp]
push	edx
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Pnew$1[ebp]
add	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+56], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+60]
and	eax, 4
jne	SHORT $LN3@Init
mov	ecx, DWORD PTR __Pnew$1[ebp]
add	ecx, DWORD PTR __Count$[ebp]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR __Pnew$1[ebp]
push	edx
mov	eax, DWORD PTR __Pnew$1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+60]
and	edx, 2
jne	SHORT $LN2@Init
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 24					
je	SHORT $LN7@Init
mov	edx, DWORD PTR __Pnew$1[ebp]
add	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR tv137[ebp], edx
jmp	SHORT $LN8@Init
mov	eax, DWORD PTR __Pnew$1[ebp]
mov	DWORD PTR tv137[ebp], eax
mov	ecx, DWORD PTR __Pnew$1[ebp]
add	ecx, DWORD PTR __Count$[ebp]
mov	esi, esp
push	ecx
mov	edx, DWORD PTR tv137[ebp]
push	edx
mov	eax, DWORD PTR __Pnew$1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
jne	SHORT $LN2@Init
mov	esi, esp
mov	ecx, DWORD PTR __Pnew$1[ebp]
push	ecx
push	0
mov	edx, DWORD PTR __Pnew$1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
or	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+60], ecx
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Ptr$[ebp]
call	??B?$fpos@H@std@@QBE_JXZ		
mov	DWORD PTR __Off$[ebp], eax
mov	DWORD PTR __Off$[ebp+4], edx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN12@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+56], eax
jae	SHORT $LN12@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+56], eax
mov	eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	DWORD PTR tv259[ebp], eax
mov	ecx, DWORD PTR tv259[ebp]
mov	edx, DWORD PTR __Off$[ebp]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN11@seekpos
mov	eax, DWORD PTR tv259[ebp]
mov	ecx, DWORD PTR __Off$[ebp+4]
cmp	ecx, DWORD PTR [eax+4]
jne	SHORT $LN11@seekpos
jmp	$LN10@seekpos
mov	edx, DWORD PTR __Mode$[ebp]
and	edx, 1
je	$LN9@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	$LN9@seekpos
cmp	DWORD PTR __Off$[ebp+4], 0
jl	$LN8@seekpos
jg	SHORT $LN15@seekpos
cmp	DWORD PTR __Off$[ebp], 0
jb	$LN8@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+56]
sub	edx, eax
mov	eax, edx
cdq
mov	DWORD PTR tv282[ebp], eax
mov	DWORD PTR tv282[ebp+4], edx
mov	eax, DWORD PTR __Off$[ebp+4]
cmp	eax, DWORD PTR tv282[ebp+4]
jg	$LN8@seekpos
jl	SHORT $LN16@seekpos
mov	ecx, DWORD PTR __Off$[ebp]
cmp	ecx, DWORD PTR tv282[ebp]
ja	$LN8@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
mov	eax, esi
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR __Mode$[ebp]
and	edx, 2
je	SHORT $LN7@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN7@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
push	eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN6@seekpos
mov	eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Off$[ebp], ecx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR __Off$[ebp+4], edx
jmp	$LN10@seekpos
mov	eax, DWORD PTR __Mode$[ebp]
and	eax, 2
je	$LN4@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	$LN4@seekpos
cmp	DWORD PTR __Off$[ebp+4], 0
jl	$LN3@seekpos
jg	SHORT $LN17@seekpos
cmp	DWORD PTR __Off$[ebp], 0
jb	SHORT $LN3@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+56]
sub	edx, eax
mov	eax, edx
cdq
mov	DWORD PTR tv342[ebp], eax
mov	DWORD PTR tv342[ebp+4], edx
mov	eax, DWORD PTR __Off$[ebp+4]
cmp	eax, DWORD PTR tv342[ebp+4]
jg	SHORT $LN3@seekpos
jl	SHORT $LN18@seekpos
mov	ecx, DWORD PTR __Off$[ebp]
cmp	ecx, DWORD PTR tv342[ebp]
ja	SHORT $LN3@seekpos
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
mov	eax, esi
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN2@seekpos
mov	edx, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Off$[ebp], eax
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR __Off$[ebp+4], ecx
jmp	SHORT $LN10@seekpos
mov	edx, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Off$[ebp], eax
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR __Off$[ebp+4], ecx
mov	edx, DWORD PTR __Off$[ebp+4]
push	edx
mov	eax, DWORD PTR __Off$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$fpos@H@std@@QAE@_J@Z		
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	edi
pop	esi
add	esp, 32					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	32					
ENDP
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN21@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+56], eax
jae	SHORT $LN21@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+56], eax
mov	eax, DWORD PTR __Which$[ebp]
and	eax, 1
je	$LN20@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	$LN20@seekoff
cmp	DWORD PTR __Way$[ebp], 2
jne	SHORT $LN19@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+56]
sub	edx, eax
mov	eax, edx
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	DWORD PTR __Off$[ebp], eax
mov	DWORD PTR __Off$[ebp+4], edx
jmp	SHORT $LN18@seekoff
cmp	DWORD PTR __Way$[ebp], 1
jne	SHORT $LN17@seekoff
mov	eax, DWORD PTR __Which$[ebp]
and	eax, 2
jne	SHORT $LN17@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
mov	eax, esi
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	DWORD PTR __Off$[ebp], eax
mov	DWORD PTR __Off$[ebp+4], edx
jmp	SHORT $LN18@seekoff
cmp	DWORD PTR __Way$[ebp], 0
je	SHORT $LN18@seekoff
mov	ecx, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR __Off$[ebp], edx
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR __Off$[ebp+4], eax
cmp	DWORD PTR __Off$[ebp+4], 0
jl	$LN14@seekoff
jg	SHORT $LN24@seekoff
cmp	DWORD PTR __Off$[ebp], 0
jb	$LN14@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+56]
sub	edx, eax
mov	eax, edx
cdq
mov	DWORD PTR tv360[ebp], eax
mov	DWORD PTR tv360[ebp+4], edx
mov	eax, DWORD PTR __Off$[ebp+4]
cmp	eax, DWORD PTR tv360[ebp+4]
jg	$LN14@seekoff
jl	SHORT $LN25@seekoff
mov	ecx, DWORD PTR __Off$[ebp]
cmp	ecx, DWORD PTR tv360[ebp]
ja	$LN14@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
mov	eax, esi
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR __Which$[ebp]
and	edx, 2
je	SHORT $LN13@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN13@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
push	eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN12@seekoff
mov	eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Off$[ebp], ecx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR __Off$[ebp+4], edx
jmp	$LN11@seekoff
mov	eax, DWORD PTR __Which$[ebp]
and	eax, 2
je	$LN10@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	$LN10@seekoff
cmp	DWORD PTR __Way$[ebp], 2
jne	SHORT $LN9@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+56]
sub	edx, eax
mov	eax, edx
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	DWORD PTR __Off$[ebp], eax
mov	DWORD PTR __Off$[ebp+4], edx
jmp	SHORT $LN8@seekoff
cmp	DWORD PTR __Way$[ebp], 1
jne	SHORT $LN7@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
mov	eax, esi
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	DWORD PTR __Off$[ebp], eax
mov	DWORD PTR __Off$[ebp+4], edx
jmp	SHORT $LN8@seekoff
cmp	DWORD PTR __Way$[ebp], 0
je	SHORT $LN8@seekoff
mov	eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Off$[ebp], ecx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR __Off$[ebp+4], edx
cmp	DWORD PTR __Off$[ebp+4], 0
jl	$LN4@seekoff
jg	SHORT $LN26@seekoff
cmp	DWORD PTR __Off$[ebp], 0
jb	SHORT $LN4@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+56]
sub	edx, eax
mov	eax, edx
cdq
mov	DWORD PTR tv453[ebp], eax
mov	DWORD PTR tv453[ebp+4], edx
mov	eax, DWORD PTR __Off$[ebp+4]
cmp	eax, DWORD PTR tv453[ebp+4]
jg	SHORT $LN4@seekoff
jl	SHORT $LN27@seekoff
mov	ecx, DWORD PTR __Off$[ebp]
cmp	ecx, DWORD PTR tv453[ebp]
ja	SHORT $LN4@seekoff
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
mov	eax, esi
cdq
add	eax, DWORD PTR __Off$[ebp]
adc	edx, DWORD PTR __Off$[ebp+4]
mov	esi, esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN3@seekoff
mov	edx, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Off$[ebp], eax
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR __Off$[ebp+4], ecx
jmp	SHORT $LN11@seekoff
mov	edx, DWORD PTR __Off$[ebp]
or	edx, DWORD PTR __Off$[ebp+4]
je	SHORT $LN11@seekoff
mov	eax, DWORD PTR __imp_?_BADOFF@std@@3_JB
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Off$[ebp], ecx
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR __Off$[ebp+4], edx
mov	eax, DWORD PTR __Off$[ebp+4]
push	eax
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$fpos@H@std@@QAE@_J@Z		
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	edi
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
jne	SHORT $LN8@underflow
call	?eof@?$char_traits@D@std@@SAHXZ		
jmp	$LN9@underflow
jmp	$LN9@underflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
cmp	esi, eax
jae	SHORT $LN6@underflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
call	?to_int_type@?$char_traits@D@std@@SAHABD@Z 
add	esp, 4
jmp	$LN9@underflow
jmp	$LN9@underflow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 4
jne	SHORT $LN3@underflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN3@underflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
cmp	esi, eax
ja	SHORT $LN4@underflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+56], eax
ja	SHORT $LN4@underflow
call	?eof@?$char_traits@D@std@@SAHXZ		
jmp	$LN9@underflow
jmp	$LN9@underflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+56], eax
jae	SHORT $LN1@underflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+56], eax
mov	esi, esp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+56]
push	ecx
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
call	?to_int_type@?$char_traits@D@std@@SAHABD@Z 
add	esp, 4
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	$LN3@pbackfail
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
cmp	esi, eax
jbe	SHORT $LN3@pbackfail
call	?eof@?$char_traits@D@std@@SAHXZ		
mov	DWORD PTR $T3[ebp], eax
lea	eax, DWORD PTR __Meta$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z 
add	esp, 8
movzx	edx, al
test	edx, edx
jne	SHORT $LN4@pbackfail
lea	eax, DWORD PTR __Meta$[ebp]
push	eax
call	?to_char_type@?$char_traits@D@std@@SADABH@Z 
add	esp, 4
mov	BYTE PTR $T2[ebp], al
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, 1
imul	edx, ecx, -1
add	eax, edx
push	eax
lea	eax, DWORD PTR $T2[ebp]
push	eax
call	?eq@?$char_traits@D@std@@SA_NABD0@Z	
add	esp, 8
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN4@pbackfail
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+60]
and	eax, 2
je	SHORT $LN4@pbackfail
call	?eof@?$char_traits@D@std@@SAHXZ		
jmp	SHORT $LN5@pbackfail
jmp	SHORT $LN5@pbackfail
mov	esi, esp
push	-1
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z
cmp	esi, esp
call	__RTC_CheckEsp
call	?eof@?$char_traits@D@std@@SAHXZ		
mov	DWORD PTR $T1[ebp], eax
lea	ecx, DWORD PTR __Meta$[ebp]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z 
add	esp, 8
movzx	eax, al
test	eax, eax
jne	SHORT $LN1@pbackfail
lea	ecx, DWORD PTR __Meta$[ebp]
push	ecx
call	?to_char_type@?$char_traits@D@std@@SADABH@Z 
add	esp, 4
mov	bl, al
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR [eax], bl
lea	edx, DWORD PTR __Meta$[ebp]
push	edx
call	?not_eof@?$char_traits@D@std@@SAHABH@Z	
add	esp, 4
pop	edi
pop	esi
pop	ebx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 36					
push	ebx
push	esi
push	edi
mov	eax, -858993460				
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 2
je	SHORT $LN17@overflow
call	?eof@?$char_traits@D@std@@SAHXZ		
jmp	$LN18@overflow
jmp	SHORT $LN16@overflow
call	?eof@?$char_traits@D@std@@SAHXZ		
mov	DWORD PTR $T1[ebp], eax
lea	edx, DWORD PTR __Meta$[ebp]
push	edx
lea	eax, DWORD PTR $T1[ebp]
push	eax
call	?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z 
add	esp, 8
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN16@overflow
lea	edx, DWORD PTR __Meta$[ebp]
push	edx
call	?not_eof@?$char_traits@D@std@@SAHABH@Z	
add	esp, 4
jmp	$LN18@overflow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 8
je	SHORT $LN14@overflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN14@overflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
cmp	eax, DWORD PTR [edx+56]
jae	SHORT $LN14@overflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
push	eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+56]
push	ecx
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN13@overflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
cmp	esi, eax
jae	SHORT $LN13@overflow
lea	edx, DWORD PTR __Meta$[ebp]
push	edx
call	?to_char_type@?$char_traits@D@std@@SADABH@Z 
add	esp, 4
mov	bl, al
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR [eax], bl
mov	eax, DWORD PTR __Meta$[ebp]
jmp	$LN18@overflow
jmp	$LN18@overflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
jne	SHORT $LN20@overflow
mov	DWORD PTR tv195[ebp], 0
jmp	SHORT $LN21@overflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
mov	DWORD PTR tv195[ebp], esi
mov	eax, DWORD PTR tv195[ebp]
mov	DWORD PTR __Oldsize$6[ebp], eax
mov	ecx, DWORD PTR __Oldsize$6[ebp]
mov	DWORD PTR __Newsize$5[ebp], ecx
mov	edx, DWORD PTR __Newsize$5[ebp]
shr	edx, 1
cmp	edx, 32					
jae	SHORT $LN22@overflow
mov	DWORD PTR tv199[ebp], 32		
jmp	SHORT $LN23@overflow
mov	eax, DWORD PTR __Newsize$5[ebp]
shr	eax, 1
mov	DWORD PTR tv199[ebp], eax
mov	ecx, DWORD PTR tv199[ebp]
mov	DWORD PTR __Inc$4[ebp], ecx
cmp	DWORD PTR __Inc$4[ebp], 0
jbe	SHORT $LN10@overflow
mov	edx, 2147483647				
sub	edx, DWORD PTR __Inc$4[ebp]
cmp	edx, DWORD PTR __Newsize$5[ebp]
jae	SHORT $LN10@overflow
mov	eax, DWORD PTR __Inc$4[ebp]
shr	eax, 1
mov	DWORD PTR __Inc$4[ebp], eax
jmp	SHORT $LN11@overflow
cmp	DWORD PTR __Inc$4[ebp], 0
jne	SHORT $LN9@overflow
call	?eof@?$char_traits@D@std@@SAHXZ		
jmp	$LN18@overflow
mov	ecx, DWORD PTR __Newsize$5[ebp]
add	ecx, DWORD PTR __Inc$4[ebp]
mov	DWORD PTR __Newsize$5[ebp], ecx
mov	edx, DWORD PTR __Newsize$5[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	?allocate@?$allocator@D@std@@QAEPADI@Z	
mov	DWORD PTR __Newptr$3[ebp], eax
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Oldptr$2[ebp], eax
cmp	DWORD PTR __Oldsize$6[ebp], 0
jbe	SHORT $LN8@overflow
mov	eax, DWORD PTR __Oldsize$6[ebp]
push	eax
mov	ecx, DWORD PTR __Oldptr$2[ebp]
push	ecx
mov	edx, DWORD PTR __Newptr$3[ebp]
push	edx
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
cmp	DWORD PTR __Oldsize$6[ebp], 0
jne	SHORT $LN7@overflow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newptr$3[ebp]
mov	DWORD PTR [eax+56], ecx
mov	edx, DWORD PTR __Newptr$3[ebp]
add	edx, DWORD PTR __Newsize$5[ebp]
mov	esi, esp
push	edx
mov	eax, DWORD PTR __Newptr$3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+60]
and	edx, 4
je	SHORT $LN6@overflow
mov	esi, esp
mov	eax, DWORD PTR __Newptr$3[ebp]
push	eax
push	0
mov	ecx, DWORD PTR __Newptr$3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN5@overflow
mov	edx, DWORD PTR __Newptr$3[ebp]
add	edx, 1
mov	esi, esp
push	edx
mov	eax, DWORD PTR __Newptr$3[ebp]
push	eax
mov	ecx, DWORD PTR __Newptr$3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	$LN4@overflow
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+56]
sub	eax, DWORD PTR __Oldptr$2[ebp]
add	eax, DWORD PTR __Newptr$3[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+56], eax
mov	edx, DWORD PTR __Newptr$3[ebp]
add	edx, DWORD PTR __Newsize$5[ebp]
mov	esi, esp
push	edx
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	eax, DWORD PTR __Oldptr$2[ebp]
add	eax, DWORD PTR __Newptr$3[ebp]
push	eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	eax, DWORD PTR __Oldptr$2[ebp]
add	eax, DWORD PTR __Newptr$3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 4
je	SHORT $LN3@overflow
mov	esi, esp
mov	edx, DWORD PTR __Newptr$3[ebp]
push	edx
push	0
mov	eax, DWORD PTR __Newptr$3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN4@overflow
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
add	eax, 1
mov	esi, esp
push	eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	eax, DWORD PTR __Oldptr$2[ebp]
add	eax, DWORD PTR __Newptr$3[ebp]
push	eax
mov	ecx, DWORD PTR __Newptr$3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+60]
and	eax, 1
je	SHORT $LN1@overflow
mov	ecx, DWORD PTR __Oldsize$6[ebp]
push	ecx
mov	edx, DWORD PTR __Oldptr$2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	?deallocate@?$allocator@D@std@@QAEXPADI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
or	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+60], ecx
lea	eax, DWORD PTR __Meta$[ebp]
push	eax
call	?to_char_type@?$char_traits@D@std@@SADABH@Z 
add	esp, 4
mov	bl, al
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	BYTE PTR [eax], bl
mov	eax, DWORD PTR __Meta$[ebp]
pop	edi
pop	esi
pop	ebx
add	esp, 36					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
push	ecx
mov	ecx, DWORD PTR __Newstr$[ebp]
call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
push	eax
mov	ecx, DWORD PTR __Newstr$[ebp]
call	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 124				
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-124]
mov	ecx, 31					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+60]
and	ecx, 2
jne	$LN4@str
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	$LN4@str
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+56], eax
jae	SHORT $LN7@str
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv91[ebp], eax
jmp	SHORT $LN8@str
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+56]
mov	DWORD PTR tv91[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	edx, DWORD PTR tv91[ebp]
sub	edx, eax
push	edx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
lea	ecx, DWORD PTR __Str$4[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z 
lea	eax, DWORD PTR __Str$4[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z 
mov	ecx, DWORD PTR $T1[ebp]
or	ecx, 1
mov	DWORD PTR $T1[ebp], ecx
lea	ecx, DWORD PTR __Str$4[ebp]
call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	$LN5@str
jmp	$LN5@str
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+60]
and	eax, 4
jne	SHORT $LN2@str
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN2@str
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	esi, eax
mov	edi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	edi, esp
call	__RTC_CheckEsp
sub	esi, eax
push	esi
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ
cmp	esi, esp
call	__RTC_CheckEsp
push	eax
lea	ecx, DWORD PTR __Str$3[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z 
lea	ecx, DWORD PTR __Str$3[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
lea	ecx, DWORD PTR __Str$3[ebp]
call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN5@str
jmp	SHORT $LN5@str
lea	ecx, DWORD PTR __Nul$2[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
lea	eax, DWORD PTR __Nul$2[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z 
mov	ecx, DWORD PTR $T1[ebp]
or	ecx, 1
mov	DWORD PTR $T1[ebp], ecx
lea	ecx, DWORD PTR __Nul$2[ebp]
call	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN18@str
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	edi
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
add	esp, 124				
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
npad	1
DD	3
DD	$LN17@str
DD	-40					
DD	28					
DD	$LN14@str
DD	-76					
DD	28					
DD	$LN15@str
DD	-112					
DD	28					
DD	$LN16@str
DB	95					
DB	78					
DB	117					
DB	108					
DB	0
DB	95					
DB	83					
DB	116					
DB	114					
DB	0
DB	95					
DB	83					
DB	116					
DB	114					
DB	0
ENDP
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	esi
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 64					
call	??0?$allocator@D@std@@QAE@XZ		
mov	ecx, DWORD PTR __Mode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z 
push	eax
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 PROC
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Newstr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ 
mov	ecx, DWORD PTR $T1[ebp]
or	ecx, 1
mov	DWORD PTR $T1[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax-104]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+edx-104], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx-104]
mov	eax, DWORD PTR [edx+4]
sub	eax, 104				
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx-104]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+ecx-108], eax
mov	ecx, DWORD PTR _this$[ebp]
sub	ecx, 80					
call	??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
sub	ecx, 72					
mov	esi, esp
call	DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
cmp	DWORD PTR _$initVBases$[ebp], 0
je	SHORT $LN1@basic_stri
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+16], OFFSET ??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 104				
mov	esi, esp
call	DWORD PTR __imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	esi, esp
push	0
mov	eax, DWORD PTR _this$[ebp]
add	eax, 24					
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+eax], OFFSET ??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+4]
sub	ecx, 104				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+edx-4], ecx
mov	ecx, DWORD PTR __Mode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
call	??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN5@basic_stri
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 104				
mov	esi, esp
call	DWORD PTR __imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ret	0
ENDP
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
mov	esi, esp
call	DWORD PTR __imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??BReferencePtr@gfx@mozilla@@QBEPAXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0ReferencePtr@gfx@mozilla@@QAE@PBX@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aLongPtr$[ebp]
cdq
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN3@Release
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
sub	edx, 1
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR _cnt$[ebp], edx
cmp	DWORD PTR _cnt$[ebp], 0
jne	SHORT $LN5@Release
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN7@Release
mov	eax, DWORD PTR _this$[ebp]
sub	eax, 4
mov	DWORD PTR tv73[ebp], eax
jmp	SHORT $LN8@Release
mov	DWORD PTR tv73[ebp], 0
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T1[ebp], ecx
mov	edx, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], edx
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN9@Release
mov	esi, esp
push	1
mov	eax, DWORD PTR $T2[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
jmp	SHORT $LN5@Release
mov	DWORD PTR tv81[ebp], 0
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRef@?$RefCounted@VDrawEventRecorder@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@AddRef
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _aSmartPtr$[ebp]
call	?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _rawPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
mov	eax, DWORD PTR _rawPtr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@already_Ad
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_GDrawTarget@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1DrawTarget@gfx@mozilla@@UAE@XZ	
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, BYTE PTR _aPermitSubpixelAA$[ebp]
and	al, 1
shl	al, 1
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR [ecx+56]
and	dl, 253					
or	dl, al
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax+56], dl
mov	esp, ebp
pop	ebp
ret	4
ENDP
?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ 
cmp	al, 1
jne	SHORT $LN3@IsCurrentG
mov	DWORD PTR tv67[ebp], 1
jmp	SHORT $LN4@IsCurrentG
mov	DWORD PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	al, al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	al, al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	al, BYTE PTR [eax+57]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 16					
mov	ecx, DWORD PTR _aTransform$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR [ecx+20]
mov	DWORD PTR [eax+20], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR [edx+56]
or	al, 1
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+56], al
mov	esp, ebp
pop	ebp
ret	4
ENDP
?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	esi, esp
movzx	eax, BYTE PTR _aFormat$[ebp]
push	eax
mov	ecx, DWORD PTR _aSize$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+132]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR $T1[ebp]
or	ecx, 1
mov	DWORD PTR $T1[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@PopLayer
int	3
mov	DWORD PTR ds:0, 998			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@PopLayer
xor	edx, edx
jne	SHORT $LN5@PopLayer
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
push	edi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN5@PushLayer
int	3
mov	DWORD PTR ds:0, 991			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@PushLayer
xor	edx, edx
jne	SHORT $LN5@PushLayer
pop	edi
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv86[ebp], eax
mov	ecx, DWORD PTR tv86[ebp]
mov	DWORD PTR tv84[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv84[ebp]
push	edx
lea	ecx, DWORD PTR _source$[ebp]
call	??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	esi, esp
mov	eax, DWORD PTR _aDestination$[ebp]
push	eax
mov	ecx, DWORD PTR _aSourceRect$[ebp]
push	ecx
lea	ecx, DWORD PTR _source$[ebp]
call	??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+60]
call	edx
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _source$[ebp]
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN8@CopyRect
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 40					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN7@CopyRect
DD	-24					
DD	4
DD	$LN5@CopyRect
DB	115					
DB	111					
DB	117					
DB	114					
DB	99					
DB	101					
DB	0
ENDP
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1 PROC
lea	ecx, DWORD PTR _source$[ebp]
jmp	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	al, al
mov	esp, ebp
pop	ebp
ret	20					
ENDP
?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	al, al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1DrawTarget@gfx@mozilla@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7DrawTarget@gfx@mozilla@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??1UserData@gfx@mozilla@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ 
ENDP
__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1DrawTarget@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0DrawTarget@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7DrawTarget@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0UserData@gfx@mozilla@@QAE@XZ		
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??0Matrix@gfx@mozilla@@QAE@XZ		
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 40					
call	??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR [ecx+56]
and	dl, 254					
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax+56], dl
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR [ecx+56]
and	dl, 253					
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax+56], dl
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ 
ENDP
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1UserData@gfx@mozilla@@QAE@XZ		
ENDP
__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0DrawTarget@gfx@mozilla@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN3@Release
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
sub	edx, 1
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR _cnt$[ebp], edx
cmp	DWORD PTR _cnt$[ebp], 0
jne	SHORT $LN5@Release
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN7@Release
mov	eax, DWORD PTR _this$[ebp]
sub	eax, 4
mov	DWORD PTR tv73[ebp], eax
jmp	SHORT $LN8@Release
mov	DWORD PTR tv73[ebp], 0
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T1[ebp], ecx
mov	edx, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], edx
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN9@Release
mov	esi, esp
push	1
mov	eax, DWORD PTR $T2[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
jmp	SHORT $LN5@Release
mov	DWORD PTR tv81[ebp], 0
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@AddRef
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@RefCounted
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetUserData@ScaledFont@gfx@mozilla@@QAEPAXPAUUserDataKey@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _key$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	?Get@UserData@gfx@mozilla@@QBEPAXPAUUserDataKey@23@@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?AddUserData@ScaledFont@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _destroy$[ebp]
push	eax
mov	ecx, DWORD PTR _userData$[ebp]
push	ecx
mov	edx, DWORD PTR _key$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	?Add@UserData@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??0Glyph@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GPathBuilder@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1PathBuilder@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1PathBuilder@gfx@mozilla@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1PathSink@gfx@mozilla@@UAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0PathBuilder@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0PathSink@gfx@mozilla@@QAE@XZ
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7PathBuilder@gfx@mozilla@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN3@Release
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
sub	edx, 1
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR _cnt$[ebp], edx
cmp	DWORD PTR _cnt$[ebp], 0
jne	SHORT $LN5@Release
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN7@Release
mov	eax, DWORD PTR _this$[ebp]
sub	eax, 4
mov	DWORD PTR tv73[ebp], eax
jmp	SHORT $LN8@Release
mov	DWORD PTR tv73[ebp], 0
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T1[ebp], ecx
mov	edx, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], edx
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN9@Release
mov	esi, esp
push	1
mov	eax, DWORD PTR $T2[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
jmp	SHORT $LN5@Release
mov	DWORD PTR tv81[ebp], 0
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRef@?$RefCounted@VPath@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@AddRef
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GPathSink@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1PathSink@gfx@mozilla@@UAE@XZ		
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0PathSink@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7PathSink@gfx@mozilla@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1PathSink@gfx@mozilla@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7PathSink@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VPathSink@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN3@Release
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
sub	edx, 1
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR _cnt$[ebp], edx
cmp	DWORD PTR _cnt$[ebp], 0
jne	SHORT $LN5@Release
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN7@Release
mov	eax, DWORD PTR _this$[ebp]
sub	eax, 4
mov	DWORD PTR tv73[ebp], eax
jmp	SHORT $LN8@Release
mov	DWORD PTR tv73[ebp], 0
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T1[ebp], ecx
mov	edx, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], edx
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN9@Release
mov	esi, esp
push	1
mov	eax, DWORD PTR $T2[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
jmp	SHORT $LN5@Release
mov	DWORD PTR tv81[ebp], 0
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRef@?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@AddRef
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@RefCounted
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VPathSink@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GScopedMap@DataSourceSurface@gfx@mozilla@@UAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@CAXPAVDataSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??C?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@PAVDataSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?assign_assuming_AddRef@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@AAEXPAVDataSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _oldPtr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _aNewPtr$[ebp]
mov	DWORD PTR [edx], eax
cmp	DWORD PTR _oldPtr$[ebp], 0
je	SHORT $LN2@assign_ass
mov	ecx, DWORD PTR _oldPtr$[ebp]
push	ecx
call	?Release@?$AddRefTraits@VDataSourceSurface@gfx@mozilla@@@?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@SAXPAVDataSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?GetStride@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEHXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@GetStride
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx+12]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetData@ScopedMap@DataSourceSurface@gfx@mozilla@@QBEPAEXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@GetData
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7ScopedMap@DataSourceSurface@gfx@mozilla@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
movzx	edx, BYTE PTR [ecx+16]
test	edx, edx
je	SHORT $LN2@ScopedMap
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??C?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QBEPAVDataSourceSurface@gfx@mozilla@@XZ 
mov	DWORD PTR tv74[ebp], eax
mov	eax, DWORD PTR tv74[ebp]
mov	edx, DWORD PTR [eax]
mov	esi, esp
mov	ecx, DWORD PTR tv74[ebp]
mov	eax, DWORD PTR [edx+44]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__ehhandler$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1ScopedMap@DataSourceSurface@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	esi
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7ScopedMap@DataSourceSurface@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aSurface$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@PAVDataSourceSurface@gfx@mozilla@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR _this$[ebp]
add	edx, 8
mov	esi, esp
push	edx
mov	eax, DWORD PTR _aType$[ebp]
push	eax
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _aSurface$[ebp]
mov	eax, DWORD PTR [edx+40]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+16], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$RefPtr@VDataSourceSurface@gfx@mozilla@@@@QAE@XZ 
ENDP
__ehhandler$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0ScopedMap@DataSourceSurface@gfx@mozilla@@QAE@PAV123@W4MapType@123@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GSourceSurface@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1SourceSurface@gfx@mozilla@@UAE@XZ	
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0SourceSurface@gfx@mozilla@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7SourceSurface@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0UserData@gfx@mozilla@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ 
ENDP
__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0SourceSurface@gfx@mozilla@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddUserData@SourceSurface@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _destroy$[ebp]
push	eax
mov	ecx, DWORD PTR _userData$[ebp]
push	ecx
mov	edx, DWORD PTR _key$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	?Add@UserData@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1SourceSurface@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7SourceSurface@gfx@mozilla@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??1UserData@gfx@mozilla@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ 
ENDP
__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1SourceSurface@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 24					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN3@Release
mov	ecx, DWORD PTR _this$[ebp]
call	??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ 
mov	DWORD PTR _cnt$[ebp], eax
cmp	DWORD PTR _cnt$[ebp], 0
jne	SHORT $LN5@Release
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN7@Release
mov	ecx, DWORD PTR _this$[ebp]
sub	ecx, 4
mov	DWORD PTR tv77[ebp], ecx
jmp	SHORT $LN8@Release
mov	DWORD PTR tv77[ebp], 0
mov	edx, DWORD PTR tv77[ebp]
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], eax
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN9@Release
mov	esi, esp
push	1
mov	ecx, DWORD PTR $T2[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv85[ebp], eax
jmp	SHORT $LN5@Release
mov	DWORD PTR tv85[ebp], 0
pop	esi
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@AddRef
mov	ecx, DWORD PTR _this$[ebp]
call	??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@RefCounted
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$Atomic@I$01X@mozilla@@QAE@I@Z	
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GSurfacePattern@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1SurfacePattern@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1SurfacePattern@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1Pattern@gfx@mozilla@@UAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Pattern@gfx@mozilla@@UAE@XZ		
ENDP
__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1SurfacePattern@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?forget@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	DWORD PTR _temp$[ebp], 0
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?swap@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAEXAAPAVSourceSurface@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR _temp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@forget
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
DD	1
DD	$LN6@forget
DD	-12					
DD	4
DD	$LN5@forget
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
?swap@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAEXAAPAVSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _temp$[ebp], ecx
mov	edx, DWORD PTR _aRhs$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _temp$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0Pattern@gfx@mozilla@@IAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7SurfacePattern@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aSourceSurface$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	al, BYTE PTR _aExtendMode$[ebp]
mov	BYTE PTR [edx+8], al
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _aFilter$[ebp]
mov	BYTE PTR [ecx+9], dl
mov	eax, DWORD PTR _this$[ebp]
add	eax, 12					
mov	ecx, DWORD PTR _aMatrix$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR [ecx+20]
mov	DWORD PTR [eax+20], ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 36					
mov	eax, DWORD PTR _aSamplingRect$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	ecx, DWORD PTR [eax+4]
mov	DWORD PTR [edx+4], ecx
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Pattern@gfx@mozilla@@UAE@XZ		
ENDP
__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GRadialGradientPattern@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1RadialGradientPattern@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1RadialGradientPattern@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 28					
call	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1Pattern@gfx@mozilla@@UAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Pattern@gfx@mozilla@@UAE@XZ		
ENDP
__ehhandler$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1RadialGradientPattern@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?GetType@RadialGradientPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 3
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0Pattern@gfx@mozilla@@IAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7RadialGradientPattern@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aCenter1$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _aCenter2$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], eax
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR _aRadius1$[ebp]
movss	DWORD PTR [eax+20], xmm0
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR _aRadius2$[ebp]
movss	DWORD PTR [ecx+24], xmm0
mov	edx, DWORD PTR _aStops$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 28					
call	??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	eax, 32					
mov	ecx, DWORD PTR _aMatrix$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+16], edx
mov	ecx, DWORD PTR [ecx+20]
mov	DWORD PTR [eax+20], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Pattern@gfx@mozilla@@UAE@XZ		
ENDP
__ehhandler$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0RadialGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0MMPAVGradientStops@12@ABVMatrix@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GLinearGradientPattern@gfx@mozilla@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1LinearGradientPattern@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1LinearGradientPattern@gfx@mozilla@@UAE@XZ PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
call	??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1Pattern@gfx@mozilla@@UAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Pattern@gfx@mozilla@@UAE@XZ		
ENDP
__ehhandler$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1LinearGradientPattern@gfx@mozilla@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?AddRefTraitsReleaseHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?Release@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?AddRefTraitsAddRefHelper@?$RefPtr@VGradientStops@gfx@mozilla@@@@CAXPAVGradientStops@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR _aPtr$[ebp]
add	ecx, 4
call	?AddRef@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??B?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?get@?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?get@?$RefPtr@VGradientStops@gfx@mozilla@@@@QBEPAVGradientStops@gfx@mozilla@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?forget@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 20					
mov	eax, -858993460				
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	DWORD PTR _temp$[ebp], 0
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?swap@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAEXAAPAVGradientStops@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR _temp$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$already_AddRefed@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z 
mov	edx, DWORD PTR $T1[ebp]
or	edx, 1
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN7@forget
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
DD	1
DD	$LN6@forget
DD	-12					
DD	4
DD	$LN5@forget
DB	116					
DB	101					
DB	109					
DB	112					
DB	0
ENDP
?swap@?$RefPtr@VGradientStops@gfx@mozilla@@@@QAEXAAPAVGradientStops@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aRhs$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR _temp$[ebp], ecx
mov	edx, DWORD PTR _aRhs$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR [edx], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _temp$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _aRawPtr$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx], 0
je	SHORT $LN2@RefPtr
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
call	?AddRef@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z 
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@RefPtr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
call	?Release@?$AddRefTraits@VGradientStops@gfx@mozilla@@@?$RefPtr@VGradientStops@gfx@mozilla@@@@SAXPAVGradientStops@gfx@mozilla@@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetType@LinearGradientPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0Pattern@gfx@mozilla@@IAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7LinearGradientPattern@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _aBegin$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _aEnd$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [edx+4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], eax
mov	DWORD PTR [edx+16], ecx
mov	eax, DWORD PTR _aStops$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 20					
call	??0?$RefPtr@VGradientStops@gfx@mozilla@@@@QAE@PAVGradientStops@gfx@mozilla@@@Z 
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 24					
mov	edx, DWORD PTR _aMatrix$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], eax
mov	eax, DWORD PTR [edx+16]
mov	DWORD PTR [ecx+16], eax
mov	edx, DWORD PTR [edx+20]
mov	DWORD PTR [ecx+20], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Pattern@gfx@mozilla@@UAE@XZ		
ENDP
__ehhandler$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0LinearGradientPattern@gfx@mozilla@@QAE@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@12@0PAVGradientStops@12@ABVMatrix@12@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GColorPattern@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1ColorPattern@gfx@mozilla@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1ColorPattern@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1Pattern@gfx@mozilla@@UAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?GetType@ColorPattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	al, al
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0ColorPattern@gfx@mozilla@@QAE@ABUColor@12@@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0Pattern@gfx@mozilla@@IAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7ColorPattern@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
mov	edx, DWORD PTR _aColor$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [ecx], eax
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR [edx+12]
mov	DWORD PTR [ecx+12], edx
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_GPattern@gfx@mozilla@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1Pattern@gfx@mozilla@@UAE@XZ		
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0Pattern@gfx@mozilla@@IAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7Pattern@gfx@mozilla@@6B@
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1Pattern@gfx@mozilla@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7Pattern@gfx@mozilla@@6B@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GGradientStops@gfx@mozilla@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1GradientStops@gfx@mozilla@@UAE@XZ	
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0GradientStops@gfx@mozilla@@IAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7GradientStops@gfx@mozilla@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?IsValid@GradientStops@gfx@mozilla@@UBE_NXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	al, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1GradientStops@gfx@mozilla@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7GradientStops@gfx@mozilla@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VGradientStops@gfx@mozilla@@@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Release@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 28					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN3@Release
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
sub	edx, 1
mov	DWORD PTR tv67[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv67[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR _cnt$[ebp], edx
cmp	DWORD PTR _cnt$[ebp], 0
jne	SHORT $LN5@Release
cmp	DWORD PTR _this$[ebp], 0
je	SHORT $LN7@Release
mov	eax, DWORD PTR _this$[ebp]
sub	eax, 4
mov	DWORD PTR tv73[ebp], eax
jmp	SHORT $LN8@Release
mov	DWORD PTR tv73[ebp], 0
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T1[ebp], ecx
mov	edx, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], edx
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN9@Release
mov	esi, esp
push	1
mov	eax, DWORD PTR $T2[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR $T2[ebp]
mov	eax, DWORD PTR [edx]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv81[ebp], eax
jmp	SHORT $LN5@Release
mov	DWORD PTR tv81[ebp], 0
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?AddRef@?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@AddRef
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], edx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
jne	SHORT $LN2@RefCounted
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$RefCounted@VGradientStops@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$Atomic@I$01X@mozilla@@QAE@I@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aInit$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z 
add	esp, 4
sub	eax, 1
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z 
add	esp, 4
add	eax, 1
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aInit$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _aInit$[ebp]
push	eax
call	?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$atomic@I@std@@QAE@I@Z		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	1
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	1
mov	eax, DWORD PTR _aPtr$[ebp]
push	eax
call	?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z PROC 
push	ebp
mov	ebp, esp
push	5
mov	eax, DWORD PTR _aVal$[ebp]
push	eax
mov	ecx, DWORD PTR _aPtr$[ebp]
call	?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z PROC 
push	ebp
mov	ebp, esp
push	5
mov	eax, DWORD PTR _aVal$[ebp]
push	eax
mov	ecx, DWORD PTR _aPtr$[ebp]
call	?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z 
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Order$[ebp]
push	eax
mov	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR __Atom$[ebp]
push	edx
call	?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Order$[ebp]
push	eax
mov	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR __Atom$[ebp]
push	edx
call	?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?atomic_store@std@@YAXPAUatomic_uint@1@I@Z PROC		
push	ebp
mov	ebp, esp
push	5
mov	eax, DWORD PTR __Value$[ebp]
push	eax
mov	ecx, DWORD PTR __Atom$[ebp]
push	ecx
call	?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Order$[ebp]
push	eax
mov	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR __Atom$[ebp]
push	edx
call	?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??0?$atomic@I@std@@QAE@I@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??4atomic_uint@std@@QAEII@Z		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Order$[ebp]
push	eax
mov	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Order$[ebp]
push	eax
mov	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z 
add	esp, 12					
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??4atomic_uint@std@@QAEII@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Value$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	?atomic_store@std@@YAXPAUatomic_uint@1@I@Z 
add	esp, 8
mov	eax, DWORD PTR __Value$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Fetch_add_release_4@std@@YAKPCKK@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Value$[ebp]
mov	ecx, DWORD PTR __Tgt$[ebp]
lock	 xadd	 DWORD PTR [ecx], eax
pop	ebp
ret	0
ENDP
?_Fetch_add_acquire_4@std@@YAKPCKK@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Value$[ebp]
mov	ecx, DWORD PTR __Tgt$[ebp]
lock	 xadd	 DWORD PTR [ecx], eax
pop	ebp
ret	0
ENDP
?_Fetch_add_relaxed_4@std@@YAKPCKK@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Value$[ebp]
mov	ecx, DWORD PTR __Tgt$[ebp]
lock	 xadd	 DWORD PTR [ecx], eax
pop	ebp
ret	0
ENDP
?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Value$[ebp]
mov	ecx, DWORD PTR __Tgt$[ebp]
lock	 xadd	 DWORD PTR [ecx], eax
pop	ebp
ret	0
ENDP
?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Order$[ebp]
mov	DWORD PTR tv64[ebp], eax
cmp	DWORD PTR tv64[ebp], 0
je	SHORT $LN4@Atomic_sto
cmp	DWORD PTR tv64[ebp], 3
je	SHORT $LN3@Atomic_sto
cmp	DWORD PTR tv64[ebp], 5
je	SHORT $LN2@Atomic_sto
jmp	SHORT $LN1@Atomic_sto
mov	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR __Tgt$[ebp]
push	edx
call	?_Store_relaxed_4@std@@YAXPCKK@Z	
add	esp, 8
jmp	$LN7@Atomic_sto
mov	eax, DWORD PTR __Value$[ebp]
push	eax
mov	ecx, DWORD PTR __Tgt$[ebp]
push	ecx
call	?_Store_release_4@std@@YAXPCKK@Z	
add	esp, 8
jmp	$LN7@Atomic_sto
mov	edx, DWORD PTR __Value$[ebp]
push	edx
mov	eax, DWORD PTR __Tgt$[ebp]
push	eax
call	?_Store_seq_cst_4@std@@YAXPCKK@Z	
add	esp, 8
jmp	$LN7@Atomic_sto
mov	esi, esp
push	1399					
push	OFFSET ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	ecx, ecx
je	SHORT $LN9@Atomic_sto
xor	edx, edx
jne	SHORT $LN10@Atomic_sto
mov	esi, esp
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	1399					
push	OFFSET ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN10@Atomic_sto
int	3
mov	esi, esp
push	0
push	1399					
push	OFFSET ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Store_seq_cst_4@std@@YAXPCKK@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Value$[ebp]
mov	ecx, DWORD PTR __Tgt$[ebp]
xchg	DWORD PTR [ecx], eax
pop	ebp
ret	0
ENDP
?_Store_release_4@std@@YAXPCKK@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Tgt$[ebp]
mov	ecx, DWORD PTR __Value$[ebp]
mov	DWORD PTR [eax], ecx
pop	ebp
ret	0
ENDP
?_Store_relaxed_4@std@@YAXPCKK@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Tgt$[ebp]
mov	ecx, DWORD PTR __Value$[ebp]
mov	DWORD PTR [eax], ecx
pop	ebp
ret	0
ENDP
??1UserData@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?Destroy@UserData@gfx@mozilla@@QAEXXZ	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Destroy@UserData@gfx@mozilla@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN4@Destroy
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR [ecx]
jge	SHORT $LN2@Destroy
imul	eax, DWORD PTR _i$1[ebp], 12
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
cmp	DWORD PTR [edx+eax+8], 0
je	SHORT $LN1@Destroy
imul	eax, DWORD PTR _i$1[ebp], 12
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	esi, esp
mov	eax, DWORD PTR [edx+eax+4]
push	eax
imul	ecx, DWORD PTR _i$1[ebp], 12
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	ecx, DWORD PTR [eax+ecx+8]
call	ecx
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN3@Destroy
mov	esi, esp
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	DWORD PTR __imp__free
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], 0
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?Get@UserData@gfx@mozilla@@QBEPAXPAUUserDataKey@23@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN4@Get
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR [ecx]
jge	SHORT $LN2@Get
imul	eax, DWORD PTR _i$1[ebp], 12
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _key$[ebp]
cmp	ecx, DWORD PTR [edx+eax]
jne	SHORT $LN1@Get
imul	edx, DWORD PTR _i$1[ebp], 12
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	eax, DWORD PTR [ecx+edx+4]
jmp	SHORT $LN5@Get
jmp	SHORT $LN3@Get
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
?Add@UserData@gfx@mozilla@@QAEXPAUUserDataKey@23@PAXP6AX1@Z@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
push	edi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN15@Add
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR [ecx]
jge	SHORT $LN13@Add
imul	eax, DWORD PTR _i$1[ebp], 12
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _key$[ebp]
cmp	ecx, DWORD PTR [edx+eax]
jne	SHORT $LN12@Add
imul	edx, DWORD PTR _i$1[ebp], 12
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
cmp	DWORD PTR [ecx+edx+8], 0
je	SHORT $LN11@Add
imul	edx, DWORD PTR _i$1[ebp], 12
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	esi, esp
mov	edx, DWORD PTR [ecx+edx+4]
push	edx
imul	eax, DWORD PTR _i$1[ebp], 12
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	eax, DWORD PTR [edx+eax+8]
call	eax
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
imul	ecx, DWORD PTR _i$1[ebp], 12
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _userData$[ebp]
mov	DWORD PTR [eax+ecx+4], edx
imul	eax, DWORD PTR _i$1[ebp], 12
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR _destroy$[ebp]
mov	DWORD PTR [edx+eax+8], ecx
jmp	$LN17@Add
jmp	$LN14@Add
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
add	eax, 1
imul	ecx, eax, 12
mov	esi, esp
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	DWORD PTR __imp__realloc
add	esp, 8
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN10@Add
xor	eax, eax
jne	SHORT $LN5@Add
int	3
mov	DWORD PTR ds:0, 48			
mov	esi, esp
push	3
mov	edi, esp
call	DWORD PTR __imp__GetCurrentProcess@0
cmp	edi, esp
call	__RTC_CheckEsp
push	eax
call	DWORD PTR __imp__TerminateProcess@8
cmp	esi, esp
call	__RTC_CheckEsp
call	_MOZ_NoReturn
xor	ecx, ecx
jne	SHORT $LN3@Add
xor	edx, edx
jne	SHORT $LN5@Add
mov	eax, DWORD PTR _this$[ebp]
imul	ecx, DWORD PTR [eax], 12
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _key$[ebp]
mov	DWORD PTR [eax+ecx], edx
mov	eax, DWORD PTR _this$[ebp]
imul	ecx, DWORD PTR [eax], 12
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _userData$[ebp]
mov	DWORD PTR [eax+ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
imul	ecx, DWORD PTR [eax], 12
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	edx, DWORD PTR _destroy$[ebp]
mov	DWORD PTR [eax+ecx+8], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], ecx
pop	edi
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??0UserData@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0Matrix@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@3f800000
movss	DWORD PTR [eax], xmm0
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [ecx+4], xmm0
mov	edx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [edx+8], xmm0
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@3f800000
movss	DWORD PTR [eax+12], xmm0
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [ecx+16], xmm0
mov	edx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [edx+20], xmm0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?BytesPerPixel@gfx@mozilla@@YAHW4SurfaceFormat@12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	al, BYTE PTR _aFormat$[ebp]
mov	BYTE PTR tv65[ebp], al
cmp	BYTE PTR tv65[ebp], 6
je	SHORT $LN2@BytesPerPi
cmp	BYTE PTR tv65[ebp], 7
je	SHORT $LN3@BytesPerPi
jmp	SHORT $LN1@BytesPerPi
mov	eax, 1
jmp	SHORT $LN6@BytesPerPi
mov	eax, 2
jmp	SHORT $LN6@BytesPerPi
mov	eax, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$BasePoint@MU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@gfx@mozilla@@U?$CoordTyped@UUnknownUnits@gfx@mozilla@@M@23@@gfx@mozilla@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [eax], xmm0
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [ecx+4], xmm0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_G_System_error_category@std@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_System_error_category@std@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1_System_error_category@std@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Generic_error_category@std@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	eax, DWORD PTR __Errval$[ebp]
push	eax
call	DWORD PTR __imp_?_Syserror_map@std@@YAPBDH@Z
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
test	eax, eax
je	SHORT $LN2@default_er
call	?generic_category@std@@YAABVerror_category@1@XZ 
push	eax
mov	ecx, DWORD PTR __Errval$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0error_condition@std@@QAE@HABVerror_category@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@default_er
jmp	SHORT $LN3@default_er
call	?system_category@std@@YAABVerror_category@1@XZ 
push	eax
mov	edx, DWORD PTR __Errval$[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0error_condition@std@@QAE@HABVerror_category@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	esi, esp
mov	eax, DWORD PTR __Errcode$[ebp]
push	eax
call	DWORD PTR __imp_?_Winerror_map@std@@YAPBDH@Z
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Name$[ebp], eax
cmp	DWORD PTR __Name$[ebp], 0
je	SHORT $LN3@message
mov	ecx, DWORD PTR __Name$[ebp]
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN4@message
mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
mov	edx, DWORD PTR tv69[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?name@_System_error_category@std@@UBEPBDXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_System_error_category@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Generic_error_category@std@@QAE@XZ	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iostream_error_category@std@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1_Iostream_error_category@std@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Generic_error_category@std@@UAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
cmp	DWORD PTR __Errcode$[ebp], 1
jne	SHORT $LN2@message
push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@message
jmp	SHORT $LN3@message
mov	ecx, DWORD PTR __Errcode$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Iostream_error_category@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Generic_error_category@std@@QAE@XZ	
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Generic_error_category@std@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1_Generic_error_category@std@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1error_category@std@@UAE@XZ		
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T1[ebp], 0
mov	esi, esp
mov	eax, DWORD PTR __Errcode$[ebp]
push	eax
call	DWORD PTR __imp_?_Syserror_map@std@@YAPBDH@Z
add	esp, 4
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __Name$[ebp], eax
cmp	DWORD PTR __Name$[ebp], 0
je	SHORT $LN3@message
mov	ecx, DWORD PTR __Name$[ebp]
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN4@message
mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
mov	edx, DWORD PTR tv69[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	eax, DWORD PTR $T1[ebp]
or	eax, 1
mov	DWORD PTR $T1[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?name@_Generic_error_category@std@@UBEPBDXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Generic_error_category@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0error_category@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??8error_condition@std@@QBE_NABV01@@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?category@error_condition@std@@QBEABVerror_category@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?category@error_condition@std@@QBEABVerror_category@2@XZ 
mov	ecx, eax
call	??8error_category@std@@QBE_NABV01@@Z	
movzx	eax, al
test	eax, eax
je	SHORT $LN3@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?value@error_condition@std@@QBEHXZ	
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?value@error_condition@std@@QBEHXZ	
cmp	esi, eax
jne	SHORT $LN3@operator
mov	DWORD PTR tv78[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv78[ebp], 0
mov	al, BYTE PTR tv78[ebp]
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?value@error_condition@std@@QBEHXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Val$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Cat$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?category@error_code@std@@QBEABVerror_category@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?value@error_code@std@@QBEHXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_Gerror_category@std@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1error_category@std@@UAE@XZ		
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8error_category@std@@QBE_NABV01@@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	eax, DWORD PTR __Right$[ebp]
jne	SHORT $LN3@operator
mov	DWORD PTR tv65[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv65[ebp], 0
mov	al, BYTE PTR tv65[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Code$[ebp]
call	?category@error_code@std@@QBEABVerror_category@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8error_category@std@@QBE_NABV01@@Z	
movzx	eax, al
test	eax, eax
je	SHORT $LN3@equivalent
mov	ecx, DWORD PTR __Code$[ebp]
call	?value@error_code@std@@QBEHXZ		
cmp	eax, DWORD PTR __Errval$[ebp]
jne	SHORT $LN3@equivalent
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN4@equivalent
mov	DWORD PTR tv74[ebp], 0
mov	al, BYTE PTR tv74[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
push	esi
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Cond$[ebp]
push	eax
mov	esi, esp
mov	ecx, DWORD PTR __Errval$[ebp]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, eax
call	??8error_condition@std@@QBE_NABV01@@Z	
pop	esi
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Errval$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0error_condition@std@@QAE@HABVerror_category@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1error_category@std@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0error_category@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?system_category@std@@YAABVerror_category@1@XZ PROC	
push	ebp
mov	ebp, esp
mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A 
pop	ebp
ret	0
ENDP
?generic_category@std@@YAABVerror_category@1@XZ PROC	
push	ebp
mov	ebp, esp
mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A 
pop	ebp
ret	0
ENDP
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		
push	ebp
mov	ebp, esp
push	esi
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	esi, esp
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR __Built$[ebp]
test	eax, eax
jne	SHORT $LN4@Tidy
jmp	SHORT $LN3@Tidy
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+24], 16			
jb	SHORT $LN3@Tidy
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR __Ptr$3[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z 
cmp	DWORD PTR __Newsize$[ebp], 0
jbe	SHORT $LN1@Tidy
mov	eax, DWORD PTR __Newsize$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$3[ebp]
push	ecx
call	??$addressof@D@std@@YAPADAAD@Z		
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
add	edx, 4
push	edx
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR __Ptr$3[ebp]
push	edx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+24], 15			
mov	edx, DWORD PTR __Newsize$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Ptr$[ebp], 0
je	SHORT $LN2@Inside
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
cmp	DWORD PTR __Ptr$[ebp], eax
jb	SHORT $LN2@Inside
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+20]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
xor	al, al
jmp	SHORT $LN4@Inside
jmp	SHORT $LN4@Inside
mov	al, 1
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Newsize$[ebp]
jae	SHORT $LN6@Grow
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
cmp	ecx, DWORD PTR __Newsize$[ebp]
jae	SHORT $LN5@Grow
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR __Newsize$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z 
jmp	SHORT $LN4@Grow
movzx	edx, BYTE PTR __Trim$[ebp]
test	edx, edx
je	SHORT $LN3@Grow
cmp	DWORD PTR __Newsize$[ebp], 16		
jae	SHORT $LN3@Grow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newsize$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	SHORT $LN9@Grow
mov	edx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR tv129[ebp], edx
jmp	SHORT $LN10@Grow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR tv129[ebp], ecx
mov	edx, DWORD PTR tv129[ebp]
push	edx
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
jmp	SHORT $LN4@Grow
cmp	DWORD PTR __Newsize$[ebp], 0
jne	SHORT $LN4@Grow
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
cmp	DWORD PTR __Newsize$[ebp], 0
jbe	SHORT $LN11@Grow
mov	DWORD PTR tv136[ebp], 1
jmp	SHORT $LN12@Grow
mov	DWORD PTR tv136[ebp], 0
mov	al, BYTE PTR tv136[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	BYTE PTR $T1[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR [eax+20], ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
add	eax, DWORD PTR __Newsize$[ebp]
push	eax
call	?assign@?$char_traits@D@std@@SAXAADABD@Z 
add	esp, 8
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 40					
push	ebx
push	esi
push	edi
push	ecx
lea	edi, DWORD PTR [ebp-56]
mov	ecx, 10					
mov	eax, -858993460				
rep stosd
pop	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Newsize$[ebp]
or	eax, 15					
mov	DWORD PTR __Newres$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Newres$[ebp]
jae	SHORT $LN9@Copy
mov	ecx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR __Newres$[ebp], ecx
jmp	SHORT $LN8@Copy
mov	eax, DWORD PTR __Newres$[ebp]
xor	edx, edx
mov	ecx, 3
div	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+24]
shr	ecx, 1
cmp	ecx, eax
ja	SHORT $LN7@Copy
jmp	SHORT $LN8@Copy
mov	edx, DWORD PTR _this$[ebp]
mov	esi, DWORD PTR [edx+24]
shr	esi, 1
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
sub	eax, esi
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+24], eax
ja	SHORT $LN5@Copy
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+24]
shr	eax, 1
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+24]
mov	DWORD PTR __Newres$[ebp], eax
jmp	SHORT $LN8@Copy
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
mov	DWORD PTR __Newres$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
lea	edx, DWORD PTR $T4[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	DWORD PTR tv202[ebp], eax
mov	eax, DWORD PTR __Newres$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR tv202[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z 
mov	DWORD PTR tv203[ebp], eax
mov	ecx, DWORD PTR tv203[ebp]
mov	DWORD PTR __Ptr$[ebp], ecx
jmp	SHORT $LN12@Copy
mov	DWORD PTR __$EHRec$[ebp], esp
mov	edx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR __Newres$[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+12], 2
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	DWORD PTR tv204[ebp], eax
mov	ecx, DWORD PTR __Newres$[ebp]
add	ecx, 1
push	ecx
mov	ecx, DWORD PTR tv204[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z 
mov	DWORD PTR tv205[ebp], eax
mov	edx, DWORD PTR tv205[ebp]
mov	DWORD PTR __Ptr$[ebp], edx
jmp	SHORT $LN14@Copy
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN17@Copy
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 1
jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
mov	DWORD PTR __$EHRec$[ebp+12], 1
mov	eax, $LN19@Copy
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
mov	DWORD PTR __$EHRec$[ebp+12], -1
cmp	DWORD PTR __Oldlen$[ebp], 0
jbe	SHORT $LN1@Copy
mov	eax, DWORD PTR __Oldlen$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
lea	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Newres$[ebp]
mov	DWORD PTR [edx+24], eax
mov	ecx, DWORD PTR __Oldlen$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN23@Copy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
add	esp, 56					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
DD	1
DD	$LN22@Copy
DD	-32					
DD	4
DD	$LN20@Copy
DB	95					
DB	80					
DB	116					
DB	114					
DB	0
ENDP
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+20], 0
jne	SHORT $LN3@empty
mov	DWORD PTR tv70[ebp], 1
jmp	SHORT $LN4@empty
mov	DWORD PTR tv70[ebp], 0
mov	al, BYTE PTR tv70[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ 
mov	DWORD PTR __Num$[ebp], eax
cmp	DWORD PTR __Num$[ebp], 1
ja	SHORT $LN3@max_size
mov	DWORD PTR tv75[ebp], 1
jmp	SHORT $LN4@max_size
mov	ecx, DWORD PTR __Num$[ebp]
sub	ecx, 1
mov	DWORD PTR tv75[ebp], ecx
mov	eax, DWORD PTR tv75[ebp]
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+20]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR [ebp-12], -858993460		
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jae	SHORT $LN4@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __Off$[ebp]
cmp	eax, DWORD PTR __Count$[ebp]
ja	SHORT $LN3@erase
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
jmp	SHORT $LN2@erase
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN2@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
add	eax, DWORD PTR __Off$[ebp]
mov	DWORD PTR __Ptr$2[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Newsize$1[ebp], eax
mov	ecx, DWORD PTR __Newsize$1[ebp]
sub	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$2[ebp]
add	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Ptr$2[ebp]
push	eax
call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Newsize$1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jae	SHORT $LN1@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	edx, DWORD PTR __Off$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	1168					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	?length@?$char_traits@D@std@@SAIPBD@Z	
add	esp, 4
push	eax
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Count$[ebp], 0
je	SHORT $LN3@assign
push	1151					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN2@assign
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
mov	ecx, DWORD PTR __Ptr$[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z 
jmp	SHORT $LN4@assign
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@assign
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
push	eax
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Roff$[ebp]
jae	SHORT $LN5@assign
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
sub	eax, DWORD PTR __Roff$[ebp]
mov	DWORD PTR __Num$[ebp], eax
mov	eax, DWORD PTR __Count$[ebp]
cmp	eax, DWORD PTR __Num$[ebp]
jae	SHORT $LN4@assign
mov	ecx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Num$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	edx, DWORD PTR __Right$[ebp]
jne	SHORT $LN3@assign
mov	eax, DWORD PTR __Roff$[ebp]
add	eax, DWORD PTR __Num$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z 
mov	ecx, DWORD PTR __Roff$[ebp]
push	ecx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z 
jmp	SHORT $LN2@assign
push	0
mov	edx, DWORD PTR __Num$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN2@assign
mov	ecx, DWORD PTR __Num$[ebp]
push	ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ 
add	eax, DWORD PTR __Roff$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
push	eax
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Num$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
cmp	DWORD PTR [eax+24], 16			
jae	SHORT $LN2@Assign_rv
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx+20]
add	edx, 1
push	edx
mov	eax, DWORD PTR __Right$[ebp]
add	eax, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
push	ecx
call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
jmp	SHORT $LN1@Assign_rv
mov	edx, DWORD PTR __Right$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z 
mov	edx, DWORD PTR __Right$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR [eax+20], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR [eax+24], edx
push	0
push	0
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z 
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
mov	ecx, DWORD PTR __Right$[ebp]
push	ecx
call	??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@D@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@D@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	DWORD PTR [ebp-20], -858993460		
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@D@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 20					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_?_Orphan_all@_Container_base12@std@@QAEXXZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Free_proxy
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
DD	1
DD	$LN4@Free_proxy
DD	-9					
DD	1
DD	$LN3@Free_proxy
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, -858993460				
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Alloc_prox
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
add	esp, 24					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	1
DD	$LN4@Alloc_prox
DD	-9					
DD	1
DD	$LN3@Alloc_prox
DB	95					
DB	65					
DB	108					
DB	112					
DB	114					
DB	111					
DB	120					
DB	121					
DB	0
ENDP
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	DWORD PTR [ebp-16], -858993460		
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??1_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+24], 16			
jb	SHORT $LN3@Myptr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	??$addressof@D@std@@YAPADAAD@Z		
add	esp, 4
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN4@Myptr
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	DWORD PTR tv72[ebp], eax
mov	eax, DWORD PTR tv72[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+24], 16			
jb	SHORT $LN3@Myptr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	??$addressof@D@std@@YAPADAAD@Z		
add	esp, 4
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN4@Myptr
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	DWORD PTR tv72[ebp], eax
mov	eax, DWORD PTR tv72[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
mov	ecx, DWORD PTR _this$[ebp]
call	DWORD PTR __imp_??0_Container_base12@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	eax, DWORD PTR _this$[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z 
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@D@std@@QAEXPADI@Z 
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@D@std@@QAEPADI@Z	
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@D@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@D@std@@QBEIXZ	
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?max_size@?$allocator@D@std@@QBEIXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
or	eax, -1
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@D@std@@YAPADIPAD@Z		
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@D@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Order$[ebp]
push	eax
xor	ecx, ecx
sub	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR __Tgt$[ebp]
push	edx
call	?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z 
add	esp, 12					
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Order$[ebp]
mov	DWORD PTR tv64[ebp], eax
cmp	DWORD PTR tv64[ebp], 5
ja	SHORT $LN1@Atomic_fet
mov	ecx, DWORD PTR tv64[ebp]
jmp	DWORD PTR $LN12@Atomic_fet[ecx*4]
mov	edx, DWORD PTR __Value$[ebp]
push	edx
mov	eax, DWORD PTR __Tgt$[ebp]
push	eax
call	?_Fetch_add_relaxed_4@std@@YAKPCKK@Z	
add	esp, 8
jmp	$LN8@Atomic_fet
mov	ecx, DWORD PTR __Value$[ebp]
push	ecx
mov	edx, DWORD PTR __Tgt$[ebp]
push	edx
call	?_Fetch_add_acquire_4@std@@YAKPCKK@Z	
add	esp, 8
jmp	$LN8@Atomic_fet
mov	eax, DWORD PTR __Value$[ebp]
push	eax
mov	ecx, DWORD PTR __Tgt$[ebp]
push	ecx
call	?_Fetch_add_release_4@std@@YAKPCKK@Z	
add	esp, 8
jmp	$LN8@Atomic_fet
mov	edx, DWORD PTR __Value$[ebp]
push	edx
mov	eax, DWORD PTR __Tgt$[ebp]
push	eax
call	?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z	
add	esp, 8
jmp	$LN8@Atomic_fet
mov	esi, esp
push	1688					
push	OFFSET ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	ecx, ecx
je	SHORT $LN10@Atomic_fet
xor	edx, edx
jne	SHORT $LN11@Atomic_fet
mov	esi, esp
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	1688					
push	OFFSET ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	DWORD PTR __imp___CrtDbgReportW
add	esp, 24					
cmp	esi, esp
call	__RTC_CheckEsp
cmp	eax, 1
jne	SHORT $LN11@Atomic_fet
int	3
mov	esi, esp
push	0
push	1688					
push	OFFSET ??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	DWORD PTR __imp___invalid_parameter
add	esp, 20					
cmp	esi, esp
call	__RTC_CheckEsp
xor	eax, eax
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	$LN5@Atomic_fet
DD	$LN4@Atomic_fet
DD	$LN4@Atomic_fet
DD	$LN3@Atomic_fet
DD	$LN2@Atomic_fet
DD	$LN2@Atomic_fet
ENDP
??__Eallocator_arg@std@@YAXXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
xor	eax, eax
mov	BYTE PTR $T1[ebp], al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Fill_n@std@@YAPAEPAEIE@Z PROC				
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Count$[ebp]
push	eax
movzx	ecx, BYTE PTR __Val$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	_memset
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
add	eax, DWORD PTR __Count$[ebp]
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN5@Orphan_me
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 4
mov	DWORD PTR __Pnext$1[ebp], edx
mov	eax, DWORD PTR __Pnext$1[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@Orphan_me
mov	ecx, DWORD PTR __Pnext$1[ebp]
mov	edx, DWORD PTR [ecx]
cmp	edx, DWORD PTR _this$[ebp]
je	SHORT $LN2@Orphan_me
mov	eax, DWORD PTR __Pnext$1[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, 4
mov	DWORD PTR __Pnext$1[ebp], ecx
jmp	SHORT $LN3@Orphan_me
mov	edx, DWORD PTR __Pnext$1[ebp]
cmp	DWORD PTR [edx], 0
jne	SHORT $LN1@Orphan_me
mov	esi, esp
push	201					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
call	DWORD PTR __imp_?_Debug_message@std@@YAXPB_W0I@Z
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR __Pnext$1[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
pop	esi
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN3@Getcont
mov	DWORD PTR tv68[ebp], 0
jmp	SHORT $LN4@Getcont
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 32					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-44], eax
mov	DWORD PTR [ebp-40], eax
mov	DWORD PTR [ebp-36], eax
mov	DWORD PTR [ebp-32], eax
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Parent$[ebp], 0
jne	SHORT $LN3@Adopt
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$4[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$4[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
jmp	SHORT $LN4@Adopt
mov	eax, DWORD PTR __Parent$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Parent_proxy$3[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
cmp	eax, DWORD PTR __Parent_proxy$3[ebp]
je	SHORT $LN4@Adopt
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$2[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Parent_proxy$3[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parent_proxy$3[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$2[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN12@Adopt
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 44					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
npad	2
DD	2
DD	$LN11@Adopt
DD	-24					
DD	4
DD	$LN8@Adopt
DD	-40					
DD	4
DD	$LN9@Adopt
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$4[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$2[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-40]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1_Iterator_base12@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR _this$[ebp], ecx
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	esi, esp
lea	ecx, DWORD PTR __Lock$[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN5@Iterator_b
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
pop	esi
add	esp, 16					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
npad	3
DD	1
DD	$LN4@Iterator_b
DD	-12					
DD	4
DD	$LN3@Iterator_b
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
push	esi
mov	eax, -858993460				
mov	DWORD PTR [ebp-28], eax
mov	DWORD PTR [ebp-24], eax
mov	DWORD PTR [ebp-20], eax
mov	DWORD PTR [ebp-16], eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN4@operator
jmp	SHORT $LN3@operator
mov	eax, DWORD PTR __Right$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@operator
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
jmp	SHORT $LN3@operator
mov	esi, esp
push	3
lea	ecx, DWORD PTR __Lock$2[ebp]
call	DWORD PTR __imp_??0_Lockit@std@@QAE@H@Z
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	esi, esp
lea	ecx, DWORD PTR __Lock$2[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
call	__RTC_CheckEsp
mov	eax, DWORD PTR _this$[ebp]
push	edx
mov	ecx, ebp
push	eax
lea	edx, DWORD PTR $LN11@operator
call	@_RTC_CheckStackVars@8
pop	eax
pop	edx
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
add	esp, 28					
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
npad	2
DD	1
DD	$LN10@operator
DD	-24					
DD	4
DD	$LN8@operator
DB	95					
DB	76					
DB	111					
DB	99					
DB	107					
DB	0
ENDP
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 PROC
mov	esi, esp
lea	ecx, DWORD PTR __Lock$2[ebp]
call	DWORD PTR __imp_??1_Lockit@std@@QAE@XZ
cmp	esi, esp
jmp	__RTC_CheckEsp
ENDP
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR __Right$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z 
mov	eax, DWORD PTR _this$[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0_Iterator_base12@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Container_proxy@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??__Epiecewise_construct@std@@YAXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
xor	eax, eax
mov	BYTE PTR $T1[ebp], al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?eof@?$char_traits@D@std@@SAHXZ PROC			
push	ebp
mov	ebp, esp
or	eax, -1
pop	ebp
ret	0
ENDP
?not_eof@?$char_traits@D@std@@SAHABH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR [ebp-8], -858993460		
mov	DWORD PTR [ebp-4], -858993460		
call	?eof@?$char_traits@D@std@@SAHXZ		
mov	ecx, DWORD PTR __Meta$[ebp]
cmp	DWORD PTR [ecx], eax
je	SHORT $LN5@not_eof
mov	edx, DWORD PTR __Meta$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN6@not_eof
call	?eof@?$char_traits@D@std@@SAHXZ		
test	eax, eax
jne	SHORT $LN3@not_eof
mov	DWORD PTR tv68[ebp], 1
jmp	SHORT $LN4@not_eof
mov	DWORD PTR tv68[ebp], 0
mov	ecx, DWORD PTR tv68[ebp]
mov	DWORD PTR tv69[ebp], ecx
mov	eax, DWORD PTR tv69[ebp]
add	esp, 8
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Left$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN3@eq_int_typ
mov	DWORD PTR tv65[ebp], 1
jmp	SHORT $LN4@eq_int_typ
mov	DWORD PTR tv65[ebp], 0
mov	al, BYTE PTR tv65[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?to_int_type@?$char_traits@D@std@@SAHABD@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ch$[ebp]
movzx	eax, BYTE PTR [eax]
pop	ebp
ret	0
ENDP
?to_char_type@?$char_traits@D@std@@SADABH@Z PROC	
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Meta$[ebp]
mov	al, BYTE PTR [eax]
pop	ebp
ret	0
ENDP
?eq@?$char_traits@D@std@@SA_NABD0@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __Left$[ebp]
movsx	ecx, BYTE PTR [eax]
mov	edx, DWORD PTR __Right$[ebp]
movsx	eax, BYTE PTR [edx]
cmp	ecx, eax
jne	SHORT $LN3@eq
mov	DWORD PTR tv67[ebp], 1
jmp	SHORT $LN4@eq
mov	DWORD PTR tv67[ebp], 0
mov	al, BYTE PTR tv67[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Left$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR [eax], dl
pop	ebp
ret	0
ENDP
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@move
mov	eax, DWORD PTR __First1$[ebp]
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@move
mov	esi, esp
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __First2$[ebp]
push	edx
mov	eax, DWORD PTR __First1$[ebp]
push	eax
call	DWORD PTR __imp__memmove
add	esp, 12					
cmp	esi, esp
call	__RTC_CheckEsp
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
pop	esi
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@copy
mov	eax, DWORD PTR __First1$[ebp]
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@copy
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __First2$[ebp]
push	edx
mov	eax, DWORD PTR __First1$[ebp]
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
?length@?$char_traits@D@std@@SAIPBD@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	eax, DWORD PTR __First$[ebp]
movsx	ecx, BYTE PTR [eax]
test	ecx, ecx
jne	SHORT $LN3@length
mov	DWORD PTR tv68[ebp], 0
jmp	SHORT $LN4@length
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	_strlen
add	esp, 4
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	0
ENDP
??3@YAXPAX0@Z PROC					
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??2@YAPAXIPAX@Z PROC					
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Where$[ebp]
pop	ebp
ret	0
ENDP
??R?$_Bitwise_hash@_K@std@@QBEIAB_K@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
push	8
mov	eax, DWORD PTR __Keyval$[ebp]
push	eax
call	?_Hash_seq@std@@YAIPBEI@Z		
add	esp, 8
add	esp, 4
cmp	ebp, esp
call	__RTC_CheckEsp
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Hash_seq@std@@YAIPBEI@Z PROC				
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, -858993460				
mov	DWORD PTR [ebp-16], eax
mov	DWORD PTR [ebp-12], eax
mov	DWORD PTR [ebp-8], eax
mov	DWORD PTR [ebp-4], eax
mov	DWORD PTR __FNV_offset_basis$[ebp], -2128831035 
mov	DWORD PTR __FNV_prime$[ebp], 16777619	
mov	DWORD PTR __Val$[ebp], -2128831035	
mov	DWORD PTR __Next$1[ebp], 0
jmp	SHORT $LN3@Hash_seq
mov	eax, DWORD PTR __Next$1[ebp]
add	eax, 1
mov	DWORD PTR __Next$1[ebp], eax
mov	ecx, DWORD PTR __Next$1[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Hash_seq
mov	edx, DWORD PTR __First$[ebp]
add	edx, DWORD PTR __Next$1[ebp]
movzx	eax, BYTE PTR [edx]
xor	eax, DWORD PTR __Val$[ebp]
mov	DWORD PTR __Val$[ebp], eax
imul	ecx, DWORD PTR __Val$[ebp], 16777619
mov	DWORD PTR __Val$[ebp], ecx
jmp	SHORT $LN2@Hash_seq
mov	eax, DWORD PTR __Val$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_hypot	PROC						
push	ebp
mov	ebp, esp
push	esi
mov	esi, esp
sub	esp, 8
movsd	xmm0, QWORD PTR __Y$[ebp]
movsd	QWORD PTR [esp], xmm0
sub	esp, 8
movsd	xmm0, QWORD PTR __X$[ebp]
movsd	QWORD PTR [esp], xmm0
call	DWORD PTR __imp___hypot
add	esp, 16					
cmp	esi, esp
call	__RTC_CheckEsp
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	0
ENDP
??0Color@gfx@mozilla@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR [ebp-4], -858993460		
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [eax], xmm0
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [ecx+4], xmm0
mov	edx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [edx+8], xmm0
mov	eax, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@00000000
movss	DWORD PTR [eax+12], xmm0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
_MOZ_NoReturn PROC					
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				
push	ebp
mov	ebp, esp
push	esi
mov	eax, DWORD PTR ___n$[ebp]
sub	eax, 1
mov	DWORD PTR ___n$[ebp], eax
js	SHORT $LN3@vector
mov	esi, esp
mov	ecx, DWORD PTR ___t$[ebp]
call	DWORD PTR ___f$[ebp]
cmp	esi, esp
call	__RTC_CheckEsp
mov	ecx, DWORD PTR ___t$[ebp]
add	ecx, DWORD PTR ___s$[ebp]
mov	DWORD PTR ___t$[ebp], ecx
jmp	SHORT $LN2@vector
pop	esi
cmp	ebp, esp
call	__RTC_CheckEsp
pop	ebp
ret	16					
ENDP
