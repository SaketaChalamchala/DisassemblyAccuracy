endp
_uprv_checkValidMemory proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['al,', 'ds:_gValidMemorySink']
mov ['[ebp+var_11],', 'al']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_83']
mov ['eax,', 'ds:?__LINE__Var@?1??uprv_checkValidMemory@@9@9']
add ['eax,', '0Bh']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FI@CJNEAOGH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1CC@EAFADDBO@?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_95']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_B1']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_20]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
movsx ['edx,', '[ebp+var_11]']
xor ['edx,', 'ecx']
mov ['[ebp+var_11],', 'dl']
jmp ['short', 'loc_8C']
mov ['al,', '[ebp+var_11]']
mov ['ds:_gValidMemorySink,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1CC@EAFADDBO@?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@']
unicode ['0,', '<p', '!=', '((void', '*)0)>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1FI@CJNEAOGH@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\cmemory.c>,0']
assume ['cs:_data']
public ['?__LINE__Var@?1??uprv_checkValidMemory@@9@9']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_malloc_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_1C0']
cmp ['ds:_pAlloc,', '0']
jz ['short', 'loc_1A6']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', 'ds:_pContext']
push ['ecx']
call ['ds:_pAlloc']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1C5']
jmp ['short', 'loc_1BE']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Size]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__malloc']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_1C5']
jmp ['short', 'loc_1C5']
mov ['eax,', 'offset', '_zeroMem']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_realloc_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Memory],', 'offset', '_zeroMem']
jnz ['short', 'loc_219']
mov ['eax,', '[ebp+NewSize]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
jmp ['loc_2AE']
jmp ['loc_2AE']
cmp ['[ebp+NewSize],', '0']
jnz ['short', 'loc_266']
cmp ['ds:_pFree,', '0']
jz ['short', 'loc_247']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Memory]']
push ['eax']
mov ['ecx,', 'ds:_pContext']
push ['ecx']
call ['ds:_pFree']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_25D']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Memory]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__free']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '_zeroMem']
jmp ['short', 'loc_2AE']
jmp ['short', 'loc_2AE']
cmp ['ds:_pRealloc,', '0']
jz ['short', 'loc_294']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+NewSize]']
push ['eax']
mov ['ecx,', '[ebp+Memory]']
push ['ecx']
mov ['edx,', 'ds:_pContext']
push ['edx']
call ['ds:_pRealloc']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_2AE']
jmp ['short', 'loc_2AE']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+NewSize]']
push ['eax']
mov ['ecx,', '[ebp+Memory]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__realloc']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_free_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Memory],', 'offset', '_zeroMem']
jz ['short', 'loc_329']
cmp ['ds:_pFree,', '0']
jz ['short', 'loc_313']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Memory]']
push ['eax']
mov ['ecx,', 'ds:_pContext']
push ['ecx']
call ['ds:_pFree']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_329']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Memory]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__free']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_calloc_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+Dst],', '0']
mov ['eax,', '[ebp+Size]']
imul ['eax,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+Size]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_396']
mov ['eax,', '[ebp+Size]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_setMemoryFunctions_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3D8']
jmp ['short', 'loc_415']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_3EA']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_3EA']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_3F5']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_415']
mov ['eax,', '[ebp+arg_0]']
mov ['ds:_pContext,', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ds:_pAlloc,', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ds:_pRealloc,', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ds:_pFree,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_cmemory_cleanup_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['ds:_pContext,', '0']
mov ['ds:_pAlloc,', '0']
mov ['ds:_pRealloc,', '0']
mov ['ds:_pFree,', '0']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__imp___wassert:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__imp__malloc:near']
extrn ['__imp__realloc:near']
extrn ['__imp__free:near']
extrn ['_memset:near']
end
