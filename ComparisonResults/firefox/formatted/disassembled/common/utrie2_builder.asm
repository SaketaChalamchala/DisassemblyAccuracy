endp
??2@YAPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??2UMemory@icu_56@@SAPAXIPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??3UMemory@icu_56@@SAXPAX0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??0UObject@icu_56@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7UObject@icu_56@@6B@']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4UObject@icu_56@@6B@']
public ['??_7UObject@icu_56@@6B@']
dd ['offset', '?getDynamicClassID@UObject@icu_56@@UBEPAXXZ']
assume ['cs:_rdata$r']
public ['??_R4UObject@icu_56@@6B@']
dd ['offset', '??_R0?AVUObject@icu_56@@@8']
dd ['offset', '??_R3UObject@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVUObject@icu_56@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3UObject@icu_56@@8']
dd ['2']
dd ['offset', '??_R2UObject@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2UObject@icu_56@@8']
dd ['offset', '??_R13?0A@EA@UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@UObject@icu_56@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '??3@YAXPAX@Z']
dd ['offset', '??_R3UObject@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@UMemory@icu_56@@8']
dd ['0']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '??3@YAXPAX@Z']
dd ['offset', '??_R3UMemory@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVUMemory@icu_56@@@8']
align ['8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3UMemory@icu_56@@8']
dd ['1']
dd ['offset', '??_R2UMemory@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@UMemory@icu_56@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '??3@YAXPAX@Z']
dd ['offset', '??_R3UMemory@icu_56@@8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??0UObject@icu_56@@QAE@ABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_24B']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+var_D0],', 'eax']
jmp ['short', 'loc_255']
mov ['[ebp+var_D0],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7UObject@icu_56@@6B@']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??4UObject@icu_56@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??_GUObject@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??1UObject@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_2DB']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??_EUObject@icu_56@@UAEPAXI@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_355']
push ['offset', '??1UObject@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax-4]']
push ['ecx']
push ['4']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_34D']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
push ['eax']
call ['??_VUMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
jmp ['short', 'loc_374']
mov ['ecx,', '[ebp+var_8]']
call ['??1UObject@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_371']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??_FMutex@icu_56@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['??0Mutex@icu_56@@QAE@PAUUMutex@@@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??0Mutex@icu_56@@QAE@PAUUMutex@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_umtx_lock_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??1Mutex@icu_56@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_umtx_unlock_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_open_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_4A6']
xor ['eax,', 'eax']
jmp ['loc_846']
push ['38h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
push ['453BCh']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_14],', 'eax']
push ['10000h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_4E5']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_4E5']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_519']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['loc_846']
push ['38h']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+18h],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+1Ch],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+20h],', '110000h']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+34h],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+23300h],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+23310h],', '4000h']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+23304h],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+23308h],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+23324h],', '110000h']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+23318h],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+23328h],', '0']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_5B5']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '80h']
jge ['short', 'loc_5D2']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_5AC']
jmp ['short', 'loc_5DD']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0C0h']
jge ['short', 'loc_5FA']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_5D4']
mov ['[ebp+var_2C],', '0C0h']
jmp ['short', 'loc_60C']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '100h']
jge ['short', 'loc_629']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_603']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+23320h],', '0C0h']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+23314h],', '100h']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_38],', '0']
jmp ['short', 'loc_665']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_38],', '80h']
jge ['short', 'loc_691']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+eax*4+880h],', 'edx']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4+2332Ch],', '1']
jmp ['short', 'loc_653']
jmp ['short', 'loc_6A5']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_38],', '0C0h']
jge ['short', 'loc_6C1']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4+2332Ch],', '0']
jmp ['short', 'loc_693']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4+2332Ch],', '881Dh']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '20h']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_6F8']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_38],', '100h']
jge ['short', 'loc_714']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4+2332Ch],', '0']
jmp ['short', 'loc_6E6']
mov ['[ebp+var_2C],', '4']
jmp ['short', 'loc_726']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '820h']
jge ['short', 'loc_742']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4+880h],', '0C0h']
jmp ['short', 'loc_71D']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_754']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '240h']
jge ['short', 'loc_770']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4+2900h],', '0FFFFFFFFh']
jmp ['short', 'loc_74B']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_782']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '40h']
jge ['short', 'loc_79B']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4+3200h],', '0C0h']
jmp ['short', 'loc_779']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+2331Ch],', '0A60h']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+2330Ch],', '0AA0h']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_38],', '0']
jmp ['short', 'loc_7D7']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '40h']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_2C],', '20h']
jge ['short', 'loc_7EB']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_7C5']
jmp ['short', 'loc_7F6']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '220h']
jge ['short', 'loc_80E']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+eax*4],', '0A60h']
jmp ['short', 'loc_7ED']
mov ['[ebp+var_2C],', '80h']
jmp ['short', 'loc_820']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '20h']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '800h']
jge ['short', 'loc_843']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_utrie2_set32_56']
add ['esp,', '10h']
jmp ['short', 'loc_817']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setnle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_clone_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_8C2']
xor ['eax,', 'eax']
jmp ['loc_A2F']
cmp ['[ebp+Src],', '0']
jz ['short', 'loc_8DA']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jnz ['short', 'loc_8EA']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+34h],', '0']
jnz ['short', 'loc_8EA']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_A2F']
push ['38h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_904']
xor ['eax,', 'eax']
jmp ['loc_A2F']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['38h']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jz ['loc_9F2']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+2Ch]']
push ['ecx']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+28h],', 'eax']
mov ['eax,', '[ebp+Dst]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jz ['loc_9F0']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+30h],', '1']
push ['1']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+2Ch]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+28h]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[eax]']
sub ['edx,', '[ecx+28h]']
sar ['edx,', '1']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+28h]']
lea ['edx,', '[ecx+edx*2]']
mov ['eax,', '[ebp+Dst]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_9C9']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+28h]']
sar ['edx,', '1']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+28h]']
lea ['edx,', '[ecx+edx*2]']
mov ['eax,', '[ebp+Dst]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_9F0']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[eax+8]']
sub ['edx,', '[ecx+28h]']
sar ['edx,', '2']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+28h]']
lea ['edx,', '[ecx+edx*4]']
mov ['eax,', '[ebp+Dst]']
mov ['[eax+8],', 'edx']
jmp ['short', 'loc_A07']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
call ['?cloneBuilder@@YAPAUUNewTrie2@@PBU1@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+34h],', 'eax']
mov ['eax,', '[ebp+Dst]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jnz ['short', 'loc_A2C']
mov ['eax,', '[ebp+Dst]']
cmp ['dword', 'ptr', '[eax+34h],', '0']
jnz ['short', 'loc_A2C']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['[ebp+Dst],', '0']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?cloneBuilder@@YAPAUUNewTrie2@@PBU1@@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['453BCh']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_A7F']
xor ['eax,', 'eax']
jmp ['loc_C69']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+23310h]']
shl ['ecx,', '2']
push ['ecx']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+23300h],', 'eax']
mov ['eax,', '[ebp+Dst]']
cmp ['dword', 'ptr', '[eax+23300h],', '0']
jnz ['short', 'loc_ABC']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['loc_C69']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23310h]']
mov ['[eax+23310h],', 'edx']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['880h']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['1']
mov ['eax,', '[ebp+Src]']
add ['eax,', '880h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+2330Ch]']
shl ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '880h']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '880h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+2331Ch]']
mov ['[eax+2331Ch],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+2330Ch]']
mov ['[eax+2330Ch],', 'edx']
push ['1']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+23300h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+23314h]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23300h]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+23300h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23320h]']
mov ['[eax+23320h],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23314h]']
mov ['[eax+23314h],', 'edx']
mov ['eax,', '[ebp+Src]']
movsx ['ecx,', 'byte', 'ptr', '[eax+23328h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_BCE']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+23318h],', '0']
jmp ['short', 'loc_C1E']
push ['1']
mov ['eax,', '[ebp+Src]']
add ['eax,', '2332Ch']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23314h]']
sar ['edx,', '5']
shl ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '2332Ch']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '2332Ch']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23318h]']
mov ['[eax+23318h],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23304h]']
mov ['[eax+23304h],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23308h]']
mov ['[eax+23308h],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+23324h]']
mov ['[eax+23324h],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['dl,', '[ecx+23328h]']
mov ['[eax+23328h],', 'dl']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_cloneAsThawed_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0ECh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_EC]']
mov ['ecx,', '3Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_CBA']
xor ['eax,', 'eax']
jmp ['loc_E46']
cmp ['[ebp+Src],', '0']
jz ['short', 'loc_CD2']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jnz ['short', 'loc_CE2']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+34h],', '0']
jnz ['short', 'loc_CE2']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_E46']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+34h],', '0']
jz ['short', 'loc_D11']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+34h]']
movsx ['edx,', 'byte', 'ptr', '[ecx+23328h]']
test ['edx,', 'edx']
jnz ['short', 'loc_D11']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['_utrie2_clone_56']
add ['esp,', '8']
jmp ['loc_E46']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_utrie2_open_56']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_D4A']
xor ['eax,', 'eax']
jmp ['loc_E46']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
push ['offset', '?copyEnumRange@@YACPBXHHI@Z']
push ['0']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['_utrie2_enum_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['eax,', '0D800h']
mov ['[ebp+var_1C],', 'ax']
jmp ['short', 'loc_D8C']
mov ['ax,', '[ebp+var_1C]']
add ['ax,', '1']
mov ['[ebp+var_1C],', 'ax']
movzx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0DC00h']
jge ['loc_E1B']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jnz ['short', 'loc_DCC']
movzx ['eax,', '[ebp+var_1C]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
movzx ['ecx,', '[ebp+var_1C]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_DF2']
movzx ['eax,', '[ebp+var_1C]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
movzx ['ecx,', '[ebp+var_1C]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ecx+edx*4]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[eax+18h]']
jz ['short', 'loc_E16']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
movzx ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_utrie2_set32ForLeadSurrogateCodeUnit_56']
add ['esp,', '10h']
jmp ['loc_D80']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_E43']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_utrie2_close_56']
add ['esp,', '4']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0ECh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN16']
dd ['offset', '$LN15']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?copyEnumRange@@YACPBXHHI@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_C]']
cmp ['edx,', '[ecx+18h]']
jz ['short', 'loc_F2A']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_ECD']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_EF4']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_utrie2_set32_56']
add ['esp,', '10h']
jmp ['short', 'loc_F17']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '4']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_utrie2_setRange32_56']
add ['esp,', '18h']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
jmp ['short', 'loc_F2C']
jmp ['short', 'loc_F2C']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_fromUTrie_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0ECh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_EC]']
mov ['ecx,', '3Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_FA6']
xor ['eax,', 'eax']
jmp ['loc_1120']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_FBC']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_1120']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
call ['_utrie2_open_56']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_FF2']
xor ['eax,', 'eax']
jmp ['loc_1120']
mov ['[ebp+var_8],', '1']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
push ['offset', '?copyEnumRange@@YACPBXHHI@Z']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie_enum_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['eax,', '0D800h']
mov ['[ebp+var_1C],', 'ax']
jmp ['short', 'loc_1034']
mov ['ax,', '[ebp+var_1C]']
add ['ax,', '1']
mov ['[ebp+var_1C],', 'ax']
movzx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0DC00h']
jge ['loc_10C3']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_1074']
movzx ['eax,', '[ebp+var_1C]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
movzx ['ecx,', '[ebp+var_1C]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_109A']
movzx ['eax,', '[ebp+var_1C]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
movzx ['ecx,', '[ebp+var_1C]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+edx*4]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[eax+14h]']
jz ['short', 'loc_10BE']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
movzx ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_utrie2_set32ForLeadSurrogateCodeUnit_56']
add ['esp,', '10h']
jmp ['loc_1028']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_10F5']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx+4],', '0']
setnz ['dl']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_utrie2_freeze_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_111D']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_utrie2_close_56']
add ['esp,', '4']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0ECh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN15_0']
dd ['offset', '$LN14']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_set32_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1199']
jmp ['short', 'loc_11CA']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_11AD']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_11CA']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
call ['?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z']
add ['esp,', '14h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1212']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+23328h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_121D']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1Eh']
jmp ['short', 'loc_125E']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?getDataBlock@@YAHPAUUNewTrie2@@HC@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_1246']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['short', 'loc_125E']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23300h]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[edx+eax*4],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?getDataBlock@@YAHPAUUNewTrie2@@HC@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_12B5']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1325']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+880h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?isWritableBlock@@YACPAUUNewTrie2@@H@Z']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_12F0']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_1325']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?allocDataBlock@@YAHPAUUNewTrie2@@H@Z']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jge ['short', 'loc_130E']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1325']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_20]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_1378']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_1378']
mov ['eax,', '800h']
jmp ['short', 'loc_13C4']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Bh']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+2331Ch]']
jnz ['short', 'loc_13C1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?allocIndex2Block@@YAHPAUUNewTrie2@@@Z']
add ['esp,', '4']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jge ['short', 'loc_13B5']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_13C4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?allocIndex2Block@@YAHPAUUNewTrie2@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2330Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '40h']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '8AA0h']
jle ['short', 'loc_1419']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1475']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+2330Ch],', 'ecx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2331Ch]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*4+880h]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['100h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2331Ch]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*4+880h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*4+880h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?allocDataBlock@@YAHPAUUNewTrie2@@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+23318h],', '0']
jz ['short', 'loc_14E2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23318h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+2332Ch]']
neg ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+23318h],', 'edx']
jmp ['loc_15CE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23314h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '20h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+23310h]']
jle ['loc_15C2']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+23310h],', '20000h']
jge ['short', 'loc_1521']
mov ['[ebp+var_20],', '20000h']
jmp ['short', 'loc_1541']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+23310h],', '110480h']
jge ['short', 'loc_1539']
mov ['[ebp+var_20],', '110480h']
jmp ['short', 'loc_1541']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_162C']
mov ['eax,', '[ebp+var_20]']
shl ['eax,', '2']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_1561']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_162C']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+23314h]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23300h]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax+23300h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+23310h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+23314h],', 'ecx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[ecx+edx*4]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23300h]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+23300h]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*4+2332Ch],', '0']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?isWritableBlock@@YACPAUUNewTrie2@@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+23320h]']
jz ['short', 'loc_1688']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+edx*4+2332Ch],', '1']
jnz ['short', 'loc_1688']
mov ['[ebp+var_C1],', '1']
jmp ['short', 'loc_168F']
mov ['[ebp+var_C1],', '0']
mov ['al,', '[ebp+var_C1]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+2332Ch]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+880h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+2332Ch]']
sub ['edx,', '1']
mov ['[ebp+var_D0],', 'edx']
mov ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_D0]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
cmp ['[ebp+var_D0],', '0']
jnz ['short', 'loc_1735']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?releaseDataBlock@@YAXPAUUNewTrie2@@H@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+eax*4+880h],', 'edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?releaseDataBlock@@YAXPAUUNewTrie2@@H@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23318h]']
neg ['ecx']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx*4+2332Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+23318h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_set32ForLeadSurrogateCodeUnit_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_17DD']
jmp ['short', 'loc_1814']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_17F7']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_1814']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
call ['?set32@@YAXPAUUNewTrie2@@HCIPAW4UErrorCode@@@Z']
add ['esp,', '14h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_setRange32_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1860']
jmp ['loc_1BBA']
cmp ['[ebp+arg_4],', '10FFFFh']
ja ['short', 'loc_187A']
cmp ['[ebp+arg_8],', '10FFFFh']
ja ['short', 'loc_187A']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jle ['short', 'loc_1888']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_1BBA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_18A5']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+23328h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_18B3']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1Eh']
jmp ['loc_1BBA']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jnz ['short', 'loc_18CE']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+23304h]']
jnz ['short', 'loc_18CE']
jmp ['loc_1BBA']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
jz ['loc_199A']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?getDataBlock@@YAHPAUUNewTrie2@@HC@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jge ['short', 'loc_190C']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_1BBA']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFE0h']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_38]']
jg ['short', 'loc_195C']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23304h]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['20h']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+23300h]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
call ['?fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_199A']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23304h]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
and ['ecx,', '1Fh']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[ecx+edx*4]']
push ['eax']
call ['?fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
jmp ['loc_1BBA']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '1Fh']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '0FFFFFFE0h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+23304h]']
jnz ['short', 'loc_19C8']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23320h]']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_19CF']
mov ['[ebp+var_2C],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_38]']
jge ['loc_1B5D']
mov ['[ebp+var_59],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+23304h]']
jnz ['short', 'loc_1A11']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?isInNullBlock@@YACPAUUNewTrie2@@HC@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1A11']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '20h']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_19CF']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?getIndex2Block@@YAHPAUUNewTrie2@@HC@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '0']
jge ['short', 'loc_1A3A']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '5']
jmp ['loc_1BBA']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['eax,', '[ebp+var_50]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax*4+880h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?isWritableBlock@@YACPAUUNewTrie2@@H@Z']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1AB8']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['short', 'loc_1A87']
cmp ['[ebp+var_14],', '880h']
jl ['short', 'loc_1A87']
mov ['[ebp+var_59],', '1']
jmp ['short', 'loc_1AB6']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23304h]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['20h']
push ['0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23300h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
call ['?fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
jmp ['short', 'loc_1AE6']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ecx+edx*4]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_1AE6']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jnz ['short', 'loc_1AE2']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+23320h]']
jnz ['short', 'loc_1AE6']
mov ['[ebp+var_59],', '1']
movsx ['eax,', '[ebp+var_59]']
test ['eax,', 'eax']
jz ['short', 'loc_1B4F']
cmp ['[ebp+var_2C],', '0']
jl ['short', 'loc_1B0A']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['?setIndex2Entry@@YAXPAUUNewTrie2@@HH@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_1B4F']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?getDataBlock@@YAHPAUUNewTrie2@@HC@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jge ['short', 'loc_1B33']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_1BBA']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23300h]']
mov ['eax,', '[ebp+var_2C]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
call ['?writeBlock@@YAXPAII@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '20h']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_19CF']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_1BBA']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?getDataBlock@@YAHPAUUNewTrie2@@HC@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jge ['short', 'loc_1B89']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['short', 'loc_1BBA']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23304h]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+23300h]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
call ['?fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?isInNullBlock@@YACPAUUNewTrie2@@HC@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_1C15']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_1C15']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
add ['eax,', '140h']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1C2D']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Bh']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
and ['ecx,', '3Fh']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+880h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+23320h]']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?writeBlock@@YAXPAII@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '80h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1C98']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_1C7D']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?fillBlock@@YAXPAIHHIIC@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+arg_0],', 'edx']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['short', 'loc_1CFB']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1CF9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_1CDE']
jmp ['short', 'loc_1D20']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1D20']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_10]']
jnz ['short', 'loc_1D15']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_1CFB']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_freeze_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '154h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_154]']
mov ['ecx,', '55h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1D60']
jmp ['loc_2230']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1D72']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_1D72']
cmp ['[ebp+arg_4],', '2']
jl ['short', 'loc_1D80']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_2230']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1DB4']
mov ['eax,', '[ebp+arg_0]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+4],', '0']
setz ['cl']
mov ['[ebp+var_74],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_74]']
jz ['short', 'loc_1DAF']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_2230']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+23328h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1DEC']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?compactTrie@@YAXPAUUTrie2@@PAW4UErrorCode@@@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1DEC']
jmp ['loc_2230']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_68],', 'ecx']
cmp ['[ebp+var_68],', '10000h']
jg ['short', 'loc_1E07']
mov ['[ebp+var_50],', '840h']
jmp ['short', 'loc_1E13']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+2330Ch]']
mov ['[ebp+var_50],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1E21']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_1E28']
mov ['[ebp+var_5C],', '0']
cmp ['[ebp+var_50],', '0FFFFh']
jg ['short', 'loc_1E68']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_5C]']
add ['ecx,', '[eax+23320h]']
cmp ['ecx,', '0FFFFh']
jg ['short', 'loc_1E68']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '880h']
cmp ['eax,', '0FFFFh']
jg ['short', 'loc_1E68']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_5C]']
add ['ecx,', '[eax+23314h]']
cmp ['ecx,', '3FFFCh']
jle ['short', 'loc_1E76']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '8']
jmp ['loc_2230']
mov ['eax,', '[ebp+var_50]']
lea ['ecx,', '[eax+eax+10h]']
mov ['[ebp+var_44],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1E9A']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
mov ['edx,', '[ebp+var_44]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_1EAC']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
mov ['edx,', '[ebp+var_44]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+28h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jnz ['short', 'loc_1ED5']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_2230']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_44]']
mov ['[eax+2Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+30h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_50]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23314h]']
mov ['[eax+10h],', 'edx']
cmp ['[ebp+var_68],', '10000h']
jg ['short', 'loc_1F14']
mov ['eax,', '0FFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'ax']
jmp ['short', 'loc_1F25']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[ecx+2331Ch]']
mov ['[eax+14h],', 'dx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_5C]']
add ['ecx,', '[eax+23320h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+16h],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_5C]']
lea ['eax,', '[edx+ecx-4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+24h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax],', '54726932h']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[eax+4],', 'cx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+0Ch]']
mov ['[eax+6],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
sar ['ecx,', '2']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+8],', 'cx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+14h]']
mov ['[eax+0Ah],', 'dx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+16h]']
mov ['[eax+0Ch],', 'dx']
mov ['eax,', '[ebp+var_68]']
sar ['eax,', '0Bh']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+0Eh],', 'ax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '10h']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '880h']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_38],', '820h']
jmp ['short', 'loc_1FDD']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_2008']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_5C]']
add ['ecx,', '[eax]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+Dst]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '2']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '4']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_1FD4']
mov ['[ebp+var_38],', '0']
jmp ['short', 'loc_201A']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '2']
jge ['short', 'loc_2039']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '80h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '2']
mov ['[ebp+Dst],', 'edx']
jmp ['short', 'loc_2011']
jmp ['short', 'loc_2044']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '20h']
jge ['short', 'loc_206D']
mov ['eax,', '[ebp+var_38]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_5C]']
add ['edx,', '[ecx+eax*4+880h]']
mov ['eax,', '[ebp+Dst]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '2']
mov ['[ebp+Dst],', 'ecx']
jmp ['short', 'loc_203B']
cmp ['[ebp+var_68],', '10000h']
jle ['loc_2133']
mov ['eax,', '[ebp+var_68]']
sub ['eax,', '10000h']
sar ['eax,', '0Bh']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '840h']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '80h']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_20B2']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_20D8']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_20]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '2']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '4']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_20A9']
mov ['eax,', '[ebp+var_8C]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*4+880h]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+2330Ch]']
sub ['ecx,', '[ebp+var_8C]']
mov ['[ebp+var_38],', 'ecx']
jmp ['short', 'loc_2108']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_2133']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_5C]']
add ['ecx,', '[eax]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+Dst]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '2']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '4']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_20FF']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_154],', 'eax']
cmp ['[ebp+var_154],', '0']
jz ['short', 'loc_2153']
cmp ['[ebp+var_154],', '1']
jz ['short', 'loc_21B1']
jmp ['loc_21FD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23300h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
mov ['[ebp+var_38],', 'ecx']
jmp ['short', 'loc_2189']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_21AF']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_20]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '2']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '4']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_2180']
jmp ['short', 'loc_2208']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax+8],', 'ecx']
push ['1']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23300h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+23314h]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+23300h]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_2208']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_2230']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23300h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '154h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?compactTrie@@YAXPAUUTrie2@@PAW4UErrorCode@@@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_8],', 'ecx']
push ['10FFFFh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_utrie2_get32_56']
add ['esp,', '8']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?findHighStart@@YAHPAUUNewTrie2@@I@Z']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '7FFh']
and ['eax,', '0FFFFF800h']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '110000h']
jnz ['short', 'loc_22B4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+23324h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+20h],', 'eax']
cmp ['[ebp+var_14],', '110000h']
jge ['short', 'loc_2335']
cmp ['[ebp+var_14],', '10000h']
jg ['short', 'loc_22E7']
mov ['[ebp+var_F4],', '10000h']
jmp ['short', 'loc_22F0']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_F4],', 'eax']
mov ['ecx,', '[ebp+var_F4]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
push ['10FFFFh']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie2_setRange32_56']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2335']
jmp ['loc_23CD']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?compactData@@YAXPAUUNewTrie2@@@Z']
add ['esp,', '4']
cmp ['[ebp+var_14],', '10000h']
jle ['short', 'loc_2356']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?compactIndex2@@YAXPAUUNewTrie2@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+23300h]']
mov ['edx,', '[ebp+var_2C]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+23314h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
and ['ecx,', '3']
jz ['short', 'loc_23C3']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+23300h]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+23314h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+23314h],', 'ecx']
jmp ['short', 'loc_2383']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+23328h],', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?findHighStart@@YAHPAUUNewTrie2@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '168h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_168]']
mov ['ecx,', '5Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23304h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2331Ch]']
mov ['[ebp+var_80],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23320h]']
mov ['[ebp+var_A4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_20]']
jnz ['short', 'loc_2451']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_A4]']
mov ['[ebp+var_98],', 'eax']
jmp ['short', 'loc_2462']
mov ['[ebp+var_74],', '0FFFFFFFFh']
mov ['[ebp+var_98],', '0FFFFFFFFh']
mov ['[ebp+var_38],', '110000h']
mov ['[ebp+var_44],', '220h']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jle ['loc_259D']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_74]']
jnz ['short', 'loc_24AA']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '800h']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_2476']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_80]']
jnz ['short', 'loc_24D8']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_20]']
jz ['short', 'loc_24C8']
mov ['eax,', '[ebp+var_2C]']
jmp ['loc_259F']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '800h']
mov ['[ebp+var_2C],', 'eax']
jmp ['loc_2598']
mov ['[ebp+var_50],', '40h']
cmp ['[ebp+var_50],', '0']
jle ['loc_2598']
mov ['eax,', '[ebp+var_50]']
sub ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_68]']
add ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+880h]']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[ebp+var_98]']
jnz ['short', 'loc_2521']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '20h']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_24DF']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[ebp+var_A4]']
jnz ['short', 'loc_2553']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_20]']
jz ['short', 'loc_2548']
mov ['eax,', '[ebp+var_2C]']
jmp ['short', 'loc_259F']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '20h']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_2593']
mov ['[ebp+var_5C],', '20h']
cmp ['[ebp+var_5C],', '0']
jle ['short', 'loc_2593']
mov ['eax,', '[ebp+var_5C]']
sub ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_8C]']
add ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_2588']
mov ['eax,', '[ebp+var_2C]']
jmp ['short', 'loc_259F']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_255A']
jmp ['loc_24DF']
jmp ['loc_2476']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?compactData@@YAXPAUUNewTrie2@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0C0h']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_25EF']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '20h']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_44]']
add ['ecx,', '1']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_2609']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
jmp ['short', 'loc_25DD']
mov ['[ebp+var_2C],', '40h']
mov ['eax,', '[ebp+var_2C]']
sar ['eax,', '5']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+23314h]']
jge ['loc_2836']
cmp ['[ebp+var_8],', '880h']
jnz ['short', 'loc_2648']
mov ['[ebp+var_2C],', '20h']
mov ['[ebp+var_5C],', '1']
mov ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4+2332Ch],', '0']
jg ['short', 'loc_2666']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_261F']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
push ['ecx']
call ['?findSameDataBlock@@YAHPBIHHH@Z']
add ['esp,', '10h']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jl ['short', 'loc_26DF']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sar ['ecx,', '5']
mov ['[ebp+var_50],', 'ecx']
jmp ['short', 'loc_26A7']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_44],', '0']
jle ['short', 'loc_26D1']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '20h']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_269E']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_261F']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '4']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_26F3']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '4']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_2731']
mov ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23300h]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
lea ['edx,', '[ecx+edx*4]']
push ['edx']
call ['?equal_uint32@@YACPBI0H@Z']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_2731']
jmp ['short', 'loc_26EA']
cmp ['[ebp+var_38],', '0']
jg ['short', 'loc_2743']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_8]']
jge ['loc_27E7']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '[ebp+var_38]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sar ['ecx,', '5']
mov ['[ebp+var_50],', 'ecx']
jmp ['short', 'loc_2766']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_44],', '0']
jle ['short', 'loc_2790']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '20h']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_275D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_38]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '[ebp+var_38]']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_27AD']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_44],', '0']
jle ['short', 'loc_27E5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+23300h]']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[ebp+var_8]']
mov ['ecx,', '[ecx+esi*4]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_27A4']
jmp ['short', 'loc_2831']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sar ['ecx,', '5']
mov ['[ebp+var_50],', 'ecx']
jmp ['short', 'loc_2801']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_44],', '0']
jle ['short', 'loc_282B']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '20h']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_27F8']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
jmp ['loc_261F']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_2848']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[eax+2330Ch]']
jge ['short', 'loc_2893']
cmp ['[ebp+var_44],', '820h']
jnz ['short', 'loc_286A']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '240h']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+880h]']
sar ['edx,', '5']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[esi+edx*4+2332Ch]']
mov ['[ecx+eax*4+880h],', 'edx']
jmp ['short', 'loc_283F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23320h]']
sar ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+ecx*4+2332Ch]']
mov ['[edx+23320h],', 'ecx']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '3']
jz ['short', 'loc_28DD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23300h]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+23304h]']
mov ['[ecx+edx*4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_28B2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+23314h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?equal_uint32@@YACPBI0H@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_294D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_294D']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_291E']
cmp ['[ebp+arg_8],', '0']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?findSameDataBlock@@YAHPBIHHH@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_C]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_2995']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jg ['short', 'loc_29CB']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
call ['?equal_uint32@@YACPBI0H@Z']
add ['esp,', '0Ch']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_29C9']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_29CE']
jmp ['short', 'loc_298C']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?compactIndex2@@YAXPAUUNewTrie2@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_20],', '820h']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_2A2B']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '40h']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_20]']
jge ['short', 'loc_2A45']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
jmp ['short', 'loc_2A19']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23324h]']
sub ['ecx,', '10000h']
sar ['ecx,', '0Bh']
mov ['edx,', '[ebp+var_20]']
lea ['eax,', '[edx+ecx+20h]']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_14],', '0A60h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+2330Ch]']
jge ['loc_2BA7']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '880h']
push ['edx']
call ['?findSameIndex2Block@@YAHPBHHH@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jl ['short', 'loc_2ABB']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '40h']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_2A68']
mov ['[ebp+var_38],', '3Fh']
jmp ['short', 'loc_2ACD']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_2B07']
mov ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*4+880h]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
sub ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*4+880h]']
push ['eax']
call ['?equal_int32@@YACPBH0H@Z']
add ['esp,', '0Ch']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_2B07']
jmp ['short', 'loc_2AC4']
cmp ['[ebp+var_38],', '0']
jg ['short', 'loc_2B15']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_2B80']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_14]']
sar ['ecx,', '6']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*4+2332Ch],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_38]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '40h']
sub ['eax,', '[ebp+var_38]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_2B4A']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_2B7E']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[esi+edx*4+880h]']
mov ['[ecx+eax*4+880h],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_2B41']
jmp ['short', 'loc_2BA2']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4+2332Ch],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '40h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_2A68']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_2BB9']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '220h']
jge ['short', 'loc_2BE3']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4]']
sar ['edx,', '6']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[esi+edx*4+2332Ch]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_2BB0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2331Ch]']
sar ['ecx,', '6']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+ecx*4+2332Ch]']
mov ['[edx+2331Ch],', 'ecx']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '3']
jz ['short', 'loc_2C26']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*4+880h],', '3FFFCh']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_2C02']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+2330Ch],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?equal_int32@@YACPBH0H@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_2C95']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_2C95']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_2C66']
cmp ['[ebp+arg_8],', '0']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?findSameIndex2Block@@YAHPBHHH@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '40h']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_2CDD']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jg ['short', 'loc_2D11']
push ['40h']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['?equal_int32@@YACPBH0H@Z']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_2D0F']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_2D14']
jmp ['short', 'loc_2CD4']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie2_swapAnyVersion_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2DD0']
push ['1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_utrie2_getVersion_56']
add ['esp,', '0Ch']
mov ['[ebp+var_C4],', 'eax']
cmp ['[ebp+var_C4],', '1']
jz ['short', 'loc_2D87']
cmp ['[ebp+var_C4],', '2']
jz ['short', 'loc_2DA5']
jmp ['short', 'loc_2DC3']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie_swap_56']
add ['esp,', '14h']
jmp ['short', 'loc_2DD2']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie2_swap_56']
add ['esp,', '14h']
jmp ['short', 'loc_2DD2']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '3']
xor ['eax,', 'eax']
jmp ['short', 'loc_2DD2']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['??_7type_info@@6B@:near']
extrn ['?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:near']
extrn ['??3UMemory@icu_56@@SAXPAX@Z:near']
extrn ['??1UObject@icu_56@@UAE@XZ:near']
extrn ['__RTC_CheckEsp:near']
extrn ['??_VUMemory@icu_56@@SAXPAX@Z:near']
extrn ['??_M@YGXPAXIHP6EX0@Z@Z:near']
extrn ['_umtx_lock_56:near']
extrn ['_umtx_unlock_56:near']
extrn ['_memset:near']
extrn ['_uprv_free_56:near']
extrn ['_uprv_malloc_56:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_utrie2_close_56:near']
extrn ['_utrie2_enum_56:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_utrie_enum_56:near']
extrn ['_utrie2_get32_56:near']
extrn ['_utrie2_swap_56:near']
extrn ['_utrie_swap_56:near']
extrn ['_utrie2_getVersion_56:near']
end
