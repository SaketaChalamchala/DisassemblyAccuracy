endp
_u_charsToUChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_3A2']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
movzx ['ax,', '[ebp+var_11]']
mov ['[ebp+var_8],', 'ax']
movzx ['eax,', '[ebp+var_8]']
test ['eax,', 'eax']
jnz ['short', 'loc_384']
movzx ['ecx,', '[ebp+var_11]']
test ['ecx,', 'ecx']
jz ['short', 'loc_384']
mov ['edx,', 'ds:?__LINE__Var@?1??u_charsToUChars_56@@9@9']
add ['edx,', '0Ch']
mov ['esi,', 'esp']
push ['edx']
push ['offset', '??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1BO@OMJPKALG@?$AA?$CI?$AAu?$AA?$CB?$AA?$DN?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AA?$DN?$AA?$DN?$AA0?$AA?$CJ?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[ebp+var_8]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_32E']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_1BO@OMJPKALG@?$AA?$CI?$AAu?$AA?$CB?$AA?$DN?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAc?$AA?$DN?$AA?$DN?$AA0?$AA?$CJ?$AA?$AA@']
unicode ['0,', '<(u!=0', '||', 'c==0)>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\uinvchar.c>,0']
align ['4']
assume ['cs:_data']
public ['?__LINE__Var@?1??u_charsToUChars_56@@9@9']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_UCharsToChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['loc_4F1']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', '[ebp+var_8]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_4A2']
movzx ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_4D2']
xor ['eax,', 'eax']
jnz ['short', 'loc_4CC']
mov ['ecx,', 'ds:?__LINE__Var@?1??u_UCharsToChars_56@@9@9']
add ['ecx,', '6']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FK@HJLLJGBM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_13COJANIEC@?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['eax,', 'eax']
mov ['[ebp+var_8],', 'ax']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['loc_45E']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_13COJANIEC@?$AA0?$AA?$AA@']
assume ['cs:_data']
public ['?__LINE__Var@?1??u_UCharsToChars_56@@9@9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_isInvariantString_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_551']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_5],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', '[ebp+var_5]']
test ['eax,', 'eax']
jnz ['short', 'loc_54F']
jmp ['short', 'loc_5AA']
jmp ['short', 'loc_57D']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_559']
jmp ['short', 'loc_5AA']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_5],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', '[ebp+var_5]']
test ['eax,', 'eax']
jnz ['short', 'loc_57D']
jmp ['short', 'loc_52E']
movzx ['eax,', '[ebp+var_5]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_5A4']
movzx ['eax,', '[ebp+var_5]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_5]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_5A8']
xor ['al,', 'al']
jmp ['short', 'loc_5AC']
jmp ['short', 'loc_52E']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_isInvariantUString_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_5F7']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', '[ebp+var_8]']
test ['eax,', 'eax']
jnz ['short', 'loc_5F5']
jmp ['short', 'loc_648']
jmp ['short', 'loc_61B']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_5FF']
jmp ['short', 'loc_648']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', '[ebp+var_8]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_642']
movzx ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_646']
xor ['al,', 'al']
jmp ['short', 'loc_64A']
jmp ['short', 'loc_5D2']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_ebcdicFromAscii_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_680']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_687']
xor ['eax,', 'eax']
jmp ['loc_75B']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_6A5']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_6A5']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_6A5']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_6B5']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_6B5']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_75B']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jle ['loc_758']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_709']
movzx ['eax,', '[ebp+var_1D]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_1D]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_732']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['offset', '??_C@_0EP@FOAJOBKF@uprv_ebcdicFromAscii?$CI?$CJ?5string?$FL?$CFd@']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_printError_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Ah']
xor ['eax,', 'eax']
jmp ['short', 'loc_75B']
movzx ['eax,', '[ebp+var_1D]']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', '_ebcdicFromAscii[eax]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['loc_6C7']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0EP@FOAJOBKF@uprv_ebcdicFromAscii?$CI?$CJ?5string?$FL?$CFd@']
db ["'", 'position', "%d',0Ah,0"]
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_copyAscii_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_7EC']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_7F3']
xor ['eax,', 'eax']
jmp ['loc_8D2']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_811']
cmp ['[ebp+Src],', '0']
jz ['short', 'loc_811']
cmp ['[ebp+Size],', '0']
jl ['short', 'loc_811']
cmp ['[ebp+Size],', '0']
jle ['short', 'loc_821']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_821']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_8D2']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+Size]']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_89F']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_86B']
movzx ['eax,', '[ebp+var_11]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_11]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_894']
mov ['eax,', '[ebp+Size]']
sub ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
push ['offset', '??_C@_0EN@GNKNHFM@uprv_copyFromAscii?$CI?$CJ?5string?$FL?$CFd?$FN?5@']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_printError_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Ah']
xor ['eax,', 'eax']
jmp ['short', 'loc_8D2']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_82D']
cmp ['[ebp+Size],', '0']
jle ['short', 'loc_8CF']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+Dst]']
jz ['short', 'loc_8CF']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Size]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0EN@GNKNHFM@uprv_copyFromAscii?$CI?$CJ?5string?$FL?$CFd?$FN?5@']
db ["'osition", "%d',0Ah,0"]
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_asciiFromEbcdic_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_964']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_96B']
xor ['eax,', 'eax']
jmp ['loc_A55']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_989']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_989']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_989']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_999']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_999']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_A55']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jle ['loc_A52']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jz ['short', 'loc_A33']
movzx ['eax,', '[ebp+var_1D]']
mov ['cl,', '_asciiFromEbcdic[eax]']
mov ['[ebp+var_1D],', 'cl']
movzx ['edx,', '[ebp+var_1D]']
test ['edx,', 'edx']
jz ['short', 'loc_A0A']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_A0A']
movzx ['eax,', '[ebp+var_1D]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_1D]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_A33']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['offset', '??_C@_0EP@ICFODGAO@uprv_asciiFromEbcdic?$CI?$CJ?5string?$FL?$CFd@']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_printError_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Ah']
xor ['eax,', 'eax']
jmp ['short', 'loc_A55']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[ebp+var_1D]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['loc_9AB']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0EP@ICFODGAO@uprv_asciiFromEbcdic?$CI?$CJ?5string?$FL?$CFd@']
db ["'", 'position', "%d',0Ah,0"]
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_copyEbcdic_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_AE8']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_AEF']
xor ['eax,', 'eax']
jmp ['loc_BF2']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B0D']
cmp ['[ebp+Src],', '0']
jz ['short', 'loc_B0D']
cmp ['[ebp+Size],', '0']
jl ['short', 'loc_B0D']
cmp ['[ebp+Size],', '0']
jle ['short', 'loc_B1D']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_B1D']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_BF2']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+Size]']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jle ['loc_BBF']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jz ['short', 'loc_BB1']
movzx ['eax,', '[ebp+var_11]']
mov ['cl,', '_asciiFromEbcdic[eax]']
mov ['[ebp+var_11],', 'cl']
movzx ['edx,', '[ebp+var_11]']
test ['edx,', 'edx']
jz ['short', 'loc_B88']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_B88']
movzx ['eax,', '[ebp+var_11]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_11]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_BB1']
mov ['eax,', '[ebp+Size]']
sub ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
push ['offset', '??_C@_0EJ@KCIFDGKN@uprv_copyEbcdic?$CI?$CJ?5string?$FL?$CF?$FN?5cont@']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_printError_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Ah']
xor ['eax,', 'eax']
jmp ['short', 'loc_BF2']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_B29']
cmp ['[ebp+Size],', '0']
jle ['short', 'loc_BEF']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+Dst]']
jz ['short', 'loc_BEF']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Size]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0EJ@KCIFDGKN@uprv_copyEbcdic?$CI?$CJ?5string?$FL?$CF?$FN?5cont@']
db ["'ion", "%d',0Ah,0"]
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_compareInvAscii_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_C8A']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jl ['short', 'loc_C8A']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_C8A']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jge ['short', 'loc_C91']
xor ['eax,', 'eax']
jmp ['loc_D91']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_CA6']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_10],', '0']
jge ['short', 'loc_CBB']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_10]']
jge ['short', 'loc_CCE']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_F4],', 'ecx']
jmp ['short', 'loc_CD7']
mov ['edx,', '[ebp+arg_10]']
mov ['[ebp+var_F4],', 'edx']
mov ['eax,', '[ebp+var_F4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jle ['loc_D8B']
mov ['eax,', '[ebp+Str]']
mov ['cl,', '[eax]']
mov ['[ebp+var_29],', 'cl']
mov ['edx,', '[ebp+Str]']
add ['edx,', '1']
mov ['[ebp+Str],', 'edx']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_D2B']
movzx ['eax,', '[ebp+var_29]']
sar ['eax,', '5']
movzx ['ecx,', '[ebp+var_29]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jz ['short', 'loc_D2B']
movzx ['eax,', '[ebp+var_29]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_D32']
mov ['[ebp+var_14],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '2']
mov ['[ebp+arg_C],', 'edx']
cmp ['[ebp+var_20],', '7Fh']
jg ['short', 'loc_D66']
mov ['eax,', '[ebp+var_20]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_20]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_D6D']
mov ['[ebp+var_20],', '0FFFFFFFEh']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'eax']
jz ['short', 'loc_D7D']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_D91']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_CE0']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+arg_10]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_compareInvEbcdic_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_DDE']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jl ['short', 'loc_DDE']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_DDE']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jge ['short', 'loc_DE5']
xor ['eax,', 'eax']
jmp ['loc_EFE']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_DFA']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_10],', '0']
jge ['short', 'loc_E0F']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_10]']
jge ['short', 'loc_E22']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_F4],', 'ecx']
jmp ['short', 'loc_E2B']
mov ['edx,', '[ebp+arg_10]']
mov ['[ebp+var_F4],', 'edx']
mov ['eax,', '[ebp+var_F4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jle ['loc_EF8']
mov ['eax,', '[ebp+Str]']
mov ['cl,', '[eax]']
mov ['[ebp+var_29],', 'cl']
mov ['edx,', '[ebp+Str]']
add ['edx,', '1']
mov ['[ebp+Str],', 'edx']
movzx ['eax,', '[ebp+var_29]']
test ['eax,', 'eax']
jnz ['short', 'loc_E60']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_E9F']
movzx ['eax,', '[ebp+var_29]']
movzx ['ecx,', '_asciiFromEbcdic[eax]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_E98']
cmp ['[ebp+var_14],', '7Fh']
jg ['short', 'loc_E98']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jz ['short', 'loc_E98']
jmp ['short', 'loc_E9F']
mov ['[ebp+var_14],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '2']
mov ['[ebp+arg_C],', 'edx']
cmp ['[ebp+var_20],', '7Fh']
jg ['short', 'loc_ED3']
mov ['eax,', '[ebp+var_20]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_20]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_EDA']
mov ['[ebp+var_20],', '0FFFFFFFEh']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'eax']
jz ['short', 'loc_EEA']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_EFE']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_E34']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+arg_10]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_compareInvEbcdicAsAscii_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
jmp ['short', 'loc_F46']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jz ['loc_FFA']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_FAA']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', '_asciiFromEbcdic[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_F9F']
cmp ['[ebp+var_8],', '7Fh']
jg ['short', 'loc_F9F']
mov ['eax,', '[ebp+var_8]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_FAA']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
neg ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_FF0']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', '_asciiFromEbcdic[eax]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_FE5']
cmp ['[ebp+var_14],', '7Fh']
jg ['short', 'loc_FE5']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '1Fh']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '_invariantChars[eax*4]']
jnz ['short', 'loc_FF0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
neg ['ecx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_1009']
jmp ['short', 'loc_1004']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1004']
xor ['eax,', 'eax']
jmp ['short', 'loc_1009']
jmp ['loc_F34']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_ebcdicToLowercaseAscii_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_0]']
mov ['al,', '_lowercaseAsciiFromEbcdic[eax]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_aestrncpy_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jnz ['short', 'loc_107C']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_10BA']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_10BA']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '_asciiFromEbcdic[ecx]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+Str]']
add ['edx,', '1']
mov ['[ebp+Str],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_107C']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_10DA']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_10BA']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_eastrncpy_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jnz ['short', 'loc_1130']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1184']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1184']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['dl,', '_ebcdicFromAscii[ecx]']
mov ['[ebp+var_11],', 'dl']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['[ebp+Str],', 'eax']
movsx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jnz ['short', 'loc_1168']
mov ['al,', 'byte_13F']
mov ['[ebp+var_11],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_11]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_1130']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_11A4']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_1184']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__imp___wassert:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_udata_printError_56:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_u_strlen_56:near']
extrn ['_strlen:near']
end
