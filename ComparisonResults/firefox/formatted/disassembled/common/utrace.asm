endp
_utrace_entry_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['ds:_pTraceEntryFunc,', '0']
jz ['short', 'loc_25C']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', 'ds:_gTraceContext']
push ['ecx']
call ['ds:_pTraceEntryFunc']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_exit_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['ds:_pTraceExitFunc,', '0']
jz ['loc_358']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_DC],', 'eax']
cmp ['[ebp+var_DC],', '12h']
ja ['short', '$LN1']
mov ['ecx,', '[ebp+var_DC]']
movzx ['edx,', 'ds:$LN13[ecx]']
jmp ['ds:$LN14[edx*4]']
mov ['[ebp+var_14],', 'offset', '_gExitFmt']
jmp ['short', 'loc_327']
mov ['[ebp+var_14],', 'offset', '_gExitFmtValue']
jmp ['short', 'loc_327']
mov ['[ebp+var_14],', 'offset', '_gExitFmtStatus']
jmp ['short', 'loc_327']
mov ['[ebp+var_14],', 'offset', '_gExitFmtValueStatus']
jmp ['short', 'loc_327']
mov ['[ebp+var_14],', 'offset', '_gExitFmtPtrStatus']
jmp ['short', 'loc_327']
xor ['eax,', 'eax']
jnz ['short', 'loc_320']
mov ['ecx,', 'ds:?__LINE__Var@?1??utrace_exit_56@@9@9']
add ['ecx,', '16h']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_13COJANIEC@?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'offset', '_gExitFmt']
lea ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', 'ds:_gTraceContext']
push ['eax']
call ['ds:_pTraceExitFunc']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN5']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
dd ['offset', '$LN2']
dd ['offset', '$LN1']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['2,', '3,', '4']
align ['4']
assume ['cs:_rdata']
public ['??_C@_13COJANIEC@?$AA0?$AA?$AA@']
assume ['cs:_rdata']
public ['??_C@_1FG@ONAEBEAN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\utrace.c>,0']
align ['4']
assume ['cs:_data']
public ['?__LINE__Var@?1??utrace_exit_56@@9@9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_data_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['ds:_pTraceDataFunc,', '0']
jz ['short', 'loc_455']
lea ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', 'ds:_gTraceContext']
push ['ecx']
call ['ds:_pTraceDataFunc']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_vformat_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '188h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_188]']
mov ['ecx,', '62h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
movsx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '25h']
jz ['short', 'loc_4EF']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
call ['_outputChar']
add ['esp,', '14h']
movsx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jnz ['short', 'loc_4ED']
jmp ['loc_AFA']
jmp ['short', 'loc_4A6']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
movsx ['eax,', '[ebp+var_1D]']
mov ['[ebp+var_188],', 'eax']
cmp ['[ebp+var_188],', '76h']
ja ['$LN1_0']
mov ['ecx,', '[ebp+var_188]']
movzx ['edx,', 'ds:$LN40[ecx]']
jmp ['ds:$LN45[edx*4]']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['dl,', '[ecx-4]']
mov ['[ebp+var_29],', 'dl']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
movzx ['ecx,', '[ebp+var_29]']
push ['ecx']
call ['_outputChar']
add ['esp,', '14h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
call ['_outputString']
add ['esp,', '14h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_54]']
push ['edx']
call ['_outputUString']
add ['esp,', '18h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['2']
mov ['eax,', '[ebp+var_38]']
cdq
push ['edx']
push ['eax']
call ['_outputHexBytes']
add ['esp,', '18h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['4']
mov ['eax,', '[ebp+var_38]']
cdq
push ['edx']
push ['eax']
call ['_outputHexBytes']
add ['esp,', '18h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['8']
mov ['eax,', '[ebp+var_38]']
cdq
push ['edx']
push ['eax']
call ['_outputHexBytes']
add ['esp,', '18h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '8']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-8]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ecx-4]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['10h']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
call ['_outputHexBytes']
add ['esp,', '18h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
push ['eax']
call ['_outputPtrBytes']
add ['esp,', '10h']
jmp ['loc_AF5']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['25h']
call ['_outputChar']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['loc_AF5']
mov ['[ebp+var_B4],', '0']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax]']
mov ['[ebp+var_5D],', 'cl']
movsx ['eax,', '[ebp+var_5D]']
test ['eax,', 'eax']
jz ['short', 'loc_72F']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_78],', 'edx']
mov ['eax,', '[ebp+var_78]']
mov ['[ebp+var_84],', 'eax']
mov ['eax,', '[ebp+var_78]']
mov ['[ebp+var_90],', 'eax']
mov ['eax,', '[ebp+var_78]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_78]']
mov ['[ebp+var_A8],', 'eax']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_6C],', 'edx']
cmp ['[ebp+var_A8],', '0']
jnz ['short', 'loc_7A2']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['offset', '??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@']
call ['_outputString']
add ['esp,', '14h']
jmp ['loc_A86']
mov ['[ebp+var_C0],', '0']
jmp ['short', 'loc_7BD']
mov ['eax,', '[ebp+var_C0]']
add ['eax,', '1']
mov ['[ebp+var_C0],', 'eax']
mov ['eax,', '[ebp+var_C0]']
cmp ['eax,', '[ebp+var_6C]']
jl ['short', 'loc_7D2']
cmp ['[ebp+var_6C],', '0FFFFFFFFh']
jnz ['loc_A86']
movsx ['eax,', '[ebp+var_5D]']
mov ['[ebp+var_188],', 'eax']
mov ['ecx,', '[ebp+var_188]']
sub ['ecx,', '53h']
mov ['[ebp+var_188],', 'ecx']
cmp ['[ebp+var_188],', '20h']
ja ['$LN12']
mov ['edx,', '[ebp+var_188]']
movzx ['eax,', 'ds:$LN41[edx]']
jmp ['ds:$LN46[eax*4]']
mov ['[ebp+var_B4],', '2']
mov ['eax,', '[ebp+var_78]']
movsx ['eax,', 'byte', 'ptr', '[eax]']
cdq
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['ecx,', '[ebp+var_78]']
add ['ecx,', '1']
mov ['[ebp+var_78],', 'ecx']
jmp ['$LN12']
mov ['[ebp+var_B4],', '4']
mov ['eax,', '[ebp+var_84]']
movsx ['eax,', 'word', 'ptr', '[eax]']
cdq
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '2']
mov ['[ebp+var_84],', 'ecx']
jmp ['$LN12']
mov ['[ebp+var_B4],', '8']
mov ['eax,', '[ebp+var_90]']
mov ['eax,', '[eax]']
cdq
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['ecx,', '[ebp+var_90]']
add ['ecx,', '4']
mov ['[ebp+var_90],', 'ecx']
jmp ['$LN12']
mov ['[ebp+var_B4],', '10h']
mov ['eax,', '[ebp+var_9C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '8']
mov ['[ebp+var_9C],', 'eax']
jmp ['$LN12']
mov ['[ebp+var_B4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_outputPtrBytes']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_A8]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setnz ['cl']
mov ['eax,', 'ecx']
cdq
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_A8]']
add ['eax,', '4']
mov ['[ebp+var_A8],', 'eax']
jmp ['$LN12']
mov ['[ebp+var_B4],', '0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_78]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
call ['_outputChar']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_78]']
movsx ['eax,', 'byte', 'ptr', '[eax]']
cdq
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_78]']
add ['eax,', '1']
mov ['[ebp+var_78],', 'eax']
jmp ['$LN12']
mov ['[ebp+var_B4],', '0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_outputString']
add ['esp,', '14h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Ah']
call ['_outputChar']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_A8]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setnz ['cl']
mov ['eax,', 'ecx']
cdq
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_A8]']
add ['eax,', '4']
mov ['[ebp+var_A8],', 'eax']
jmp ['short', '$LN12']
mov ['[ebp+var_B4],', '0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_outputUString']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Ah']
call ['_outputChar']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_A8]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setnz ['cl']
mov ['eax,', 'ecx']
cdq
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_A8]']
add ['eax,', '4']
mov ['[ebp+var_A8],', 'eax']
cmp ['[ebp+var_B4],', '0']
jle ['short', 'loc_A71']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_B4]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_48]']
push ['edx']
call ['_outputHexBytes']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['20h']
call ['_outputChar']
add ['esp,', '14h']
cmp ['[ebp+var_6C],', '0FFFFFFFFh']
jnz ['short', 'loc_A81']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '[ebp+var_44]']
jnz ['short', 'loc_A81']
jmp ['short', 'loc_A86']
jmp ['loc_7AE']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['5Bh']
call ['_outputChar']
add ['esp,', '14h']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['8']
mov ['eax,', '[ebp+var_6C]']
cdq
push ['edx']
push ['eax']
call ['_outputHexBytes']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['5Dh']
call ['_outputChar']
add ['esp,', '14h']
jmp ['short', 'loc_AF5']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
call ['_outputChar']
add ['esp,', '14h']
jmp ['loc_4A6']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
call ['_outputChar']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN44']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '188h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN43']
dd ['offset', '$LN42']
align ['4']
dd ['offset', '$LN25,', 'offset', '$LN26,', 'offset', '$LN24,', 'offset', '$LN23']
dd ['offset', '$LN29,', 'offset', '$LN21,', 'offset', '$LN1_0']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '1']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '0Ah,', '0Ah']
db ['0Ah,', '0Ah,', '2,', '3']
db ['4,', '0Ah,', '0Ah,', '0Ah']
db ['5,', '0Ah,', '0Ah,', '0Ah']
db ['6,', '0Ah,', '0Ah,', '0Ah']
db ['7,', '0Ah,', '0Ah,', '8']
db ['0Ah,', '0Ah,', '9']
align ['10h']
dd ['offset', '$LN11']
dd ['offset', '$LN6_0']
dd ['offset', '$LN9']
dd ['offset', '$LN10']
dd ['offset', '$LN8']
dd ['offset', '$LN7']
dd ['offset', '$LN5_0']
dd ['offset', '$LN12']
db ['8,', '8,', '8,', '8']
db ['8,', '8,', '8,', '8']
db ['8,', '8,', '8,', '1']
db ['2,', '3,', '8,', '8']
db ['8,', '4,', '8,', '8']
db ['8,', '5,', '8,', '8']
db ['8,', '6,', '8,', '8']
db ['7']
align ['4']
assume ['cs:_rdata']
public ['??_C@_07FGIDHMDB@?$CKNULL?$CK?5?$AA@']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_outputChar	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_CB6']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0Ah']
jz ['short', 'loc_CA3']
movsx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jz ['short', 'loc_CA3']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_C]']
jge ['short', 'loc_CA3']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx-1]']
cmp ['eax,', '0Ah']
jz ['short', 'loc_CB6']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0Ah']
jnz ['short', 'loc_CF5']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_C]']
jl ['short', 'loc_CF5']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_CC8']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_10]']
jge ['short', 'loc_CF5']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_C]']
jge ['short', 'loc_CE6']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[edx+ecx],', '20h']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_CBF']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_C]']
jge ['short', 'loc_D0D']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['al,', '[ebp+arg_0]']
mov ['[edx+ecx],', 'al']
movsx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jz ['short', 'loc_D22']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_outputHexBytes	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
lea ['ecx,', 'ds:0FFFFFFFCh[eax*4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_D62']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_DA2']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
call ['__allshr']
and ['eax,', '0Fh']
and ['edx,', '0']
mov ['al,', 'ds:?gHexChars@?1??outputHexBytes@@9@9[eax]']
mov ['[ebp+var_11],', 'al']
push ['0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
movzx ['eax,', '[ebp+var_11]']
push ['eax']
call ['_outputChar']
add ['esp,', '14h']
jmp ['short', 'loc_D59']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_outputPtrBytes	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '1']
lea ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_14],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '3']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_E05']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '4']
jnb ['short', 'loc_E35']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['2']
mov ['eax,', '[ebp+var_20]']
movsx ['eax,', 'byte', 'ptr', '[eax]']
cdq
push ['edx']
push ['eax']
call ['_outputHexBytes']
add ['esp,', '18h']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_DFC']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_outputString	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_E7E']
mov ['[ebp+arg_0],', 'offset', '??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
movzx ['ecx,', '[ebp+var_11]']
push ['ecx']
call ['_outputChar']
add ['esp,', '14h']
movsx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jnz ['short', 'loc_E7E']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_06LNGDCPN@?$CKNULL?$CK?$AA@']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_outputUString	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_F1B']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
call ['_outputString']
add ['esp,', '14h']
jmp ['short', 'loc_F92']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_F2D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jl ['short', 'loc_F3B']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['short', 'loc_F92']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_14],', 'dx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
push ['4']
movzx ['eax,', '[ebp+var_14]']
cdq
push ['edx']
push ['eax']
call ['_outputHexBytes']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['20h']
call ['_outputChar']
add ['esp,', '14h']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['short', 'loc_F90']
movzx ['eax,', '[ebp+var_14]']
test ['eax,', 'eax']
jnz ['short', 'loc_F90']
jmp ['short', 'loc_F92']
jmp ['short', 'loc_F24']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_format_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
lea ['eax,', '[ebp+arg_10]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrace_vformat_56']
add ['esp,', '14h']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_setFunctions_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ds:_pTraceEntryFunc,', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ds:_pTraceExitFunc,', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ds:_pTraceDataFunc,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ds:_gTraceContext,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_getFunctions_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', 'ds:_pTraceEntryFunc']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', 'ds:_pTraceExitFunc']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', 'ds:_pTraceDataFunc']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', 'ds:_gTraceContext']
mov ['[eax],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_setLevel_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
jge ['short', 'loc_10D3']
mov ['[ebp+arg_0],', '0FFFFFFFFh']
cmp ['[ebp+arg_0],', '9']
jle ['short', 'loc_10E0']
mov ['[ebp+arg_0],', '9']
mov ['eax,', '[ebp+arg_0]']
mov ['ds:_utrace_level_56,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_getLevel_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'ds:_utrace_level_56']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_cleanup_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['ds:_pTraceEntryFunc,', '0']
mov ['ds:_pTraceExitFunc,', '0']
mov ['ds:_pTraceDataFunc,', '0']
mov ['ds:_utrace_level_56,', '0FFFFFFFFh']
mov ['ds:_gTraceContext,', '0']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_utrace_functionName_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_11B0']
cmp ['[ebp+arg_0],', '2']
jge ['short', 'loc_11B0']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', 'ds:_trFnName[eax*4]']
jmp ['short', 'loc_11F5']
jmp ['short', 'loc_11F5']
cmp ['[ebp+arg_0],', '1000h']
jl ['short', 'loc_11D0']
cmp ['[ebp+arg_0],', '1008h']
jge ['short', 'loc_11D0']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', 'dword', 'ptr', '(byte_217-404Bh)[eax*4]']
jmp ['short', 'loc_11F5']
jmp ['short', 'loc_11F5']
cmp ['[ebp+arg_0],', '2000h']
jl ['short', 'loc_11F0']
cmp ['[ebp+arg_0],', '2009h']
jge ['short', 'loc_11F0']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', 'dword', 'ptr', '(byte_217-8027h)[eax*4]']
jmp ['short', 'loc_11F5']
jmp ['short', 'loc_11F5']
mov ['eax,', 'offset', '??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rdata']
public ['??_C@_0BO@LBCCFANB@?$FLBOGUS?5Trace?5Function?5Number?$FN?$AA@']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__imp___wassert:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__allshr:near']
end
