endp
??2@YAPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??2UMemory@icu_56@@SAPAXIPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3UMemory@icu_56@@SAXPAX0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4UMemory@icu_56@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0UObject@icu_56@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7UObject@icu_56@@6B@']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4UObject@icu_56@@6B@']
public ['??_7UObject@icu_56@@6B@']
dd ['offset', '?getDynamicClassID@UObject@icu_56@@UBEPAXXZ']
assume ['cs:_rdata$r']
public ['??_R4UObject@icu_56@@6B@']
dd ['offset', '??_R0?AVUObject@icu_56@@@8']
dd ['offset', '??_R3UObject@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVUObject@icu_56@@@8']
align ['8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3UObject@icu_56@@8']
dd ['2']
dd ['offset', '??_R2UObject@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2UObject@icu_56@@8']
dd ['offset', '??_R13?0A@EA@UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@UObject@icu_56@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?_Rank@?$_Arithmetic_traits@N@std@@2HB']
dd ['offset', '??_R3UObject@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@UMemory@icu_56@@8']
align ['10h']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '?_Rank@?$_Arithmetic_traits@N@std@@2HB']
dd ['offset', '??_R3UMemory@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVUMemory@icu_56@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3UMemory@icu_56@@8']
dd ['1']
dd ['offset', '??_R2UMemory@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@UMemory@icu_56@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?_Rank@?$_Arithmetic_traits@N@std@@2HB']
dd ['offset', '??_R3UMemory@icu_56@@8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0UObject@icu_56@@QAE@ABV01@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E1F']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+var_D0],', 'eax']
jmp ['short', 'loc_E29']
mov ['[ebp+var_D0],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7UObject@icu_56@@6B@']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4UObject@icu_56@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GUObject@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??1UObject@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_EAF']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_EUObject@icu_56@@UAEPAXI@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_F29']
push ['offset', '??1UObject@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax-4]']
push ['ecx']
push ['4']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_F21']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
push ['eax']
call ['??_VUMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
jmp ['short', 'loc_F48']
mov ['ecx,', '[ebp+var_8]']
call ['??1UObject@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_F45']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Replaceable@icu_56@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??0UObject@icu_56@@QAE@ABV01@@Z']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Replaceable@icu_56@@6B@']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4Replaceable@icu_56@@6B@']
public ['??_7Replaceable@icu_56@@6B@']
dd ['offset', '?getDynamicClassID@UObject@icu_56@@UBEPAXXZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?hasMetaData@Replaceable@icu_56@@UBECXZ']
dd ['offset', '?clone@Replaceable@icu_56@@UBEPAV12@XZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
assume ['cs:_rdata$r']
public ['??_R4Replaceable@icu_56@@6B@']
dd ['offset', '??_R0?AVReplaceable@icu_56@@@8']
dd ['offset', '??_R3Replaceable@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVReplaceable@icu_56@@@8']
dd ['0']
dd ['56413F2Eh']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3Replaceable@icu_56@@8']
dd ['3']
dd ['offset', '??_R2Replaceable@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2Replaceable@icu_56@@8']
dd ['offset', '??_R1A@?0A@EA@UObject@icu_56@@8']
dd ['offset', '??_R13?0A@EA@UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@Replaceable@icu_56@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?_Rank@?$_Arithmetic_traits@N@std@@2HB']
dd ['offset', '??_R3Replaceable@icu_56@@8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4Replaceable@icu_56@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??4UObject@icu_56@@QAEAAV01@ABV01@@Z']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GReplaceable@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??1Replaceable@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_10DB']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_EReplaceable@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_1155']
push ['offset', '??1Replaceable@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax-4]']
push ['ecx']
push ['4']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_114D']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
push ['eax']
call ['??_VUMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
jmp ['short', 'loc_1174']
mov ['ecx,', '[ebp+var_8]']
call ['??1Replaceable@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1171']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Replaceable@icu_56@@IAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??0UObject@icu_56@@QAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Replaceable@icu_56@@6B@']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@Replaceable@icu_56@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?charAt@Replaceable@icu_56@@QBE_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?char32At@Replaceable@icu_56@@QBEHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0StringPiece@icu_56@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0StringPiece@icu_56@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0StringPiece@icu_56@@QAE@PBDH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?data@StringPiece@icu_56@@QBEPBDXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@StringPiece@icu_56@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@StringPiece@icu_56@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?empty@StringPiece@icu_56@@QBECXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?clear@StringPiece@icu_56@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+4],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?set@StringPiece@icu_56@@QAEXPBDH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+4],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?remove_prefix@StringPiece@icu_56@@QAEXH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_1545']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+4]']
jle ['short', 'loc_1529']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+arg_0],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?remove_suffix@StringPiece@icu_56@@QAEXH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_159F']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+4]']
jg ['short', 'loc_1595']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'ecx']
jmp ['short', 'loc_159F']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+4],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?substr@StringPiece@icu_56@@QBE?AV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0StringPiece@icu_56@@QAE@ABV01@HH@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4StringPiece@icu_56@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0ByteSink@icu_56@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ByteSink@icu_56@@6B@']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4ByteSink@icu_56@@6B@']
public ['??_7ByteSink@icu_56@@6B@']
dd ['offset', '__purecall']
dd ['offset', '?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z']
dd ['offset', '?Flush@ByteSink@icu_56@@UAEXXZ']
assume ['cs:_rdata$r']
public ['??_R4ByteSink@icu_56@@6B@']
dd ['offset', '??_R0?AVByteSink@icu_56@@@8']
dd ['offset', '??_R3ByteSink@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVByteSink@icu_56@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3ByteSink@icu_56@@8']
dd ['2']
dd ['offset', '??_R2ByteSink@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2ByteSink@icu_56@@8']
dd ['offset', '??_R13?0A@EA@UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@ByteSink@icu_56@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?_Rank@?$_Arithmetic_traits@N@std@@2HB']
dd ['offset', '??_R3ByteSink@icu_56@@8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GByteSink@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??1ByteSink@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_172F']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_EByteSink@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_17A9']
push ['offset', '??1ByteSink@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax-4]']
push ['ecx']
push ['4']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_17A1']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
push ['eax']
call ['??_VUMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
jmp ['short', 'loc_17C8']
mov ['ecx,', '[ebp+var_8]']
call ['??1ByteSink@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_17C5']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?NumberOfBytesWritten@CheckedArrayByteSink@icu_56@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+0Ch]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Overflowed@CheckedArrayByteSink@icu_56@@QBECXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['al,', '[eax+14h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?NumberOfBytesAppended@CheckedArrayByteSink@icu_56@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+10h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4UnicodeString@icu_56@@QAEAAV01@$$QAV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?moveFrom@UnicodeString@icu_56@@QAEAAV12@AAV12@@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@icu_56@@YAXAAVUnicodeString@1@0@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+this]']
call ['?swap@UnicodeString@icu_56@@QAEXAAV12@@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GUnicodeString@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??1UnicodeString@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_1937']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_EUnicodeString@icu_56@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_19B1']
push ['offset', '??1UnicodeString@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax-4]']
push ['ecx']
push ['40h']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_19A9']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
push ['eax']
call ['??_VUMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
jmp ['short', 'loc_19D0']
mov ['ecx,', '[ebp+var_8]']
call ['??1UnicodeString@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_19CD']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jge ['short', 'loc_1A1E']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_1A3A']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx],', 'eax']
jle ['short', 'loc_1A3A']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jge ['short', 'loc_1A91']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_1AA3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+var_14]']
jle ['short', 'loc_1AA3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jge ['short', 'loc_1AB6']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_1AD2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
cmp ['[edx],', 'ecx']
jle ['short', 'loc_1AD2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?getArrayStart@UnicodeString@icu_56@@AAEPA_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '2']
jz ['short', 'loc_1B25']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '6']
mov ['[ebp+var_D0],', 'edx']
jmp ['short', 'loc_1B31']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_D0],', 'ecx']
mov ['eax,', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '2']
jz ['short', 'loc_1B7D']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '6']
mov ['[ebp+var_D0],', 'edx']
jmp ['short', 'loc_1B89']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_D0],', 'ecx']
mov ['eax,', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0UnicodeString@icu_56@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??0Replaceable@icu_56@@IAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7UnicodeString@icu_56@@6B@']
mov ['eax,', '2']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'ax']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4UnicodeString@icu_56@@6B@']
public ['??_7UnicodeString@icu_56@@6B@']
dd ['offset', '?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ']
dd ['offset', '?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z']
dd ['offset', '?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z']
dd ['offset', '?copy@UnicodeString@icu_56@@UAEXHHH@Z']
dd ['offset', '?hasMetaData@UnicodeString@icu_56@@UBECXZ']
dd ['offset', '?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ']
dd ['offset', '?getLength@UnicodeString@icu_56@@MBEHXZ']
dd ['offset', '?getCharAt@UnicodeString@icu_56@@MBE_WH@Z']
dd ['offset', '?getChar32At@UnicodeString@icu_56@@MBEHH@Z']
assume ['cs:_rdata$r']
public ['??_R4UnicodeString@icu_56@@6B@']
dd ['offset', '??_R0?AVUnicodeString@icu_56@@@8']
dd ['offset', '??_R3UnicodeString@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVUnicodeString@icu_56@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3UnicodeString@icu_56@@8']
dd ['4']
dd ['offset', '??_R2UnicodeString@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2UnicodeString@icu_56@@8']
dd ['offset', '??_R1A@?0A@EA@Replaceable@icu_56@@8']
dd ['offset', '??_R1A@?0A@EA@UObject@icu_56@@8']
dd ['offset', '??_R13?0A@EA@UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@UnicodeString@icu_56@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?_Rank@?$_Arithmetic_traits@N@std@@2HB']
dd ['offset', '??_R3UnicodeString@icu_56@@8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?hasShortLength@UnicodeString@icu_56@@ABECXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
setnl ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?getShortLength@UnicodeString@icu_56@@ABEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[eax+4]']
sar ['eax,', '5']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@UnicodeString@icu_56@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?hasShortLength@UnicodeString@icu_56@@ABECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1D42']
mov ['ecx,', '[ebp+var_8]']
call ['?getShortLength@UnicodeString@icu_56@@ABEHXZ']
mov ['[ebp+var_D0],', 'eax']
jmp ['short', 'loc_1D4E']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_D0],', 'edx']
mov ['eax,', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?getCapacity@UnicodeString@icu_56@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '2']
jz ['short', 'loc_1DA3']
mov ['[ebp+var_D0],', '1Dh']
jmp ['short', 'loc_1DAF']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_D0],', 'eax']
mov ['eax,', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?hashCode@UnicodeString@icu_56@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doHashCode@UnicodeString@icu_56@@ABEHXZ']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?isBogus@UnicodeString@icu_56@@QBECXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[eax+4]']
and ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?isWritable@UnicodeString@icu_56@@ABECXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '11h']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?isBufferWritable@UnicodeString@icu_56@@ABECXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '19h']
jnz ['short', 'loc_1EB9']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx+4]']
and ['eax,', '4']
jz ['short', 'loc_1EB0']
mov ['ecx,', '[ebp+var_8]']
call ['?refCount@UnicodeString@icu_56@@ABEHXZ']
cmp ['eax,', '1']
jnz ['short', 'loc_1EB9']
mov ['[ebp+var_CD],', '1']
jmp ['short', 'loc_1EC0']
mov ['[ebp+var_CD],', '0']
mov ['al,', '[ebp+var_CD]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '11h']
jz ['short', 'loc_1F11']
xor ['eax,', 'eax']
jmp ['short', 'loc_1F2D']
jmp ['short', 'loc_1F2D']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '2']
jz ['short', 'loc_1F27']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '6']
jmp ['short', 'loc_1F2D']
jmp ['short', 'loc_1F2D']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+10h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1F7A']
mov ['ecx,', '[ebp+var_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
setz ['al']
jmp ['short', 'loc_1FAB']
jmp ['short', 'loc_1FAB']
lea ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8UnicodeString@icu_56@@QBECABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E8h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_2002']
mov ['ecx,', '[ebp+arg_0]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
jmp ['short', 'loc_205C']
jmp ['short', 'loc_205C']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_204F']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+var_20]']
jnz ['short', 'loc_204F']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doEquals@UnicodeString@icu_56@@ABECABV12@H@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_204F']
mov ['[ebp+var_E5],', '1']
jmp ['short', 'loc_2056']
mov ['[ebp+var_E5],', '0']
mov ['al,', '[ebp+var_E5]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9UnicodeString@icu_56@@QBECABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8UnicodeString@icu_56@@QBECABV01@@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??OUnicodeString@icu_56@@QBECABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
movsx ['ecx,', 'al']
cmp ['ecx,', '1']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??MUnicodeString@icu_56@@QBECABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
movsx ['ecx,', 'al']
cmp ['ecx,', '0FFFFFFFFh']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??PUnicodeString@icu_56@@QBECABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
movsx ['ecx,', 'al']
cmp ['ecx,', '0FFFFFFFFh']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??NUnicodeString@icu_56@@QBECABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
movsx ['ecx,', 'al']
cmp ['ecx,', '1']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compare@UnicodeString@icu_56@@QBECABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compare@UnicodeString@icu_56@@QBECHHABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compare@UnicodeString@icu_56@@QBECPB_WH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compare@UnicodeString@icu_56@@QBECHHPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compare@UnicodeString@icu_56@@QBECHHPB_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_2506']
mov ['ecx,', '[ebp+var_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
setz ['al']
jmp ['short', 'loc_2537']
jmp ['short', 'loc_2537']
lea ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareCodePointOrder@UnicodeString@icu_56@@QBECABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareCodePointOrder@UnicodeString@icu_56@@QBECPB_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareCodePointOrder@UnicodeString@icu_56@@QBECHHPB_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?compareCodePointOrderBetween@UnicodeString@icu_56@@QBECHHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_2802']
mov ['ecx,', '[ebp+var_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
setz ['al']
jmp ['short', 'loc_2837']
jmp ['short', 'loc_2837']
lea ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?caseCompare@UnicodeString@icu_56@@QBECABV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?caseCompare@UnicodeString@icu_56@@QBECPB_WHI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?caseCompare@UnicodeString@icu_56@@QBECHHABV12@HHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?caseCompare@UnicodeString@icu_56@@QBECHHPB_WHHI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?caseCompareBetween@UnicodeString@icu_56@@QBECHHABV12@HHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doCaseCompare@UnicodeString@icu_56@@ABECHHABV12@HHI@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_2B43']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_2B43']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z']
jmp ['short', 'loc_2B46']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHABV12@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEH_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
movzx ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doIndexOf@UnicodeString@icu_56@@ABEHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEH_W@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEH_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
movzx ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?indexOf@UnicodeString@icu_56@@QBEHHH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?indexOf@UnicodeString@icu_56@@QBEHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_306B']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_306B']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z']
jmp ['short', 'loc_306E']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHABV12@HHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEH_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
movzx ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doLastIndexOf@UnicodeString@icu_56@@ABEHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEH_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEH_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
movzx ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?lastIndexOf@UnicodeString@icu_56@@QBEHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?lastIndexOf@UnicodeString@icu_56@@QBEHHHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?startsWith@UnicodeString@icu_56@@QBECABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?compare@UnicodeString@icu_56@@QBECHHABV12@HH@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?startsWith@UnicodeString@icu_56@@QBECABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?startsWith@UnicodeString@icu_56@@QBECPB_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_34A8']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
movsx ['eax,', 'al']
test ['eax,', 'eax']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?startsWith@UnicodeString@icu_56@@QBECPB_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_3518']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?endsWith@UnicodeString@icu_56@@QBECABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['esi,', 'eax']
push ['esi']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?endsWith@UnicodeString@icu_56@@QBECABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?pinIndices@UnicodeString@icu_56@@ABEXAAH0@Z']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHABV12@HH@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?endsWith@UnicodeString@icu_56@@QBECPB_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_3678']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
movsx ['eax,', 'al']
test ['eax,', 'eax']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?endsWith@UnicodeString@icu_56@@QBECPB_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_36F6']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
push ['edx']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?replace@UnicodeString@icu_56@@QAEAAV12@HHPB_WHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?replace@UnicodeString@icu_56@@QAEAAV12@HH_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['1']
push ['0']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?replaceBetween@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@ABV12@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
call ['?replace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?extract@UnicodeString@icu_56@@QBEXHHPA_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?extract@UnicodeString@icu_56@@QBEXHHAAV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doExtract@UnicodeString@icu_56@@ABEXHHAAV12@@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?extract@UnicodeString@icu_56@@QBEHHHPADPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?extract@UnicodeString@icu_56@@QBEHHHPADIPBD@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?extractBetween@UnicodeString@icu_56@@QBEXHHPA_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?tempSubStringBetween@UnicodeString@icu_56@@QBE?AV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_D4],', '0']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?tempSubString@UnicodeString@icu_56@@QBE?AV12@HH@Z']
mov ['eax,', '[ebp+var_D4]']
or ['eax,', '1']
mov ['[ebp+var_D4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?doCharAt@UnicodeString@icu_56@@ABE_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
cmp ['[ebp+arg_0],', 'eax']
jnb ['short', 'loc_3CE7']
mov ['ecx,', '[ebp+var_8]']
call ['?getArrayStart@UnicodeString@icu_56@@ABEPB_WXZ']
mov ['ecx,', '[ebp+arg_0]']
mov ['ax,', '[eax+ecx*2]']
jmp ['short', 'loc_3CEC']
jmp ['short', 'loc_3CEC']
mov ['eax,', '0FFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?charAt@UnicodeString@icu_56@@QBE_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCharAt@UnicodeString@icu_56@@ABE_WH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??AUnicodeString@icu_56@@QBE_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doCharAt@UnicodeString@icu_56@@ABE_WH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?isEmpty@UnicodeString@icu_56@@QBECXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
sar ['ecx,', '5']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setZeroLength@UnicodeString@icu_56@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '1Fh']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'cx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setShortLength@UnicodeString@icu_56@@AAEXH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '1Fh']
mov ['edx,', '[ebp+arg_0]']
shl ['edx,', '5']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+4],', 'cx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setLength@UnicodeString@icu_56@@AAEXH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '3FFh']
jg ['short', 'loc_3E8E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?setShortLength@UnicodeString@icu_56@@AAEXH@Z']
jmp ['short', 'loc_3EAB']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+4]']
or ['ecx,', '0FFE0h']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'cx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setToEmpty@UnicodeString@icu_56@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '2']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'ax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setArray@UnicodeString@icu_56@@AAEXPA_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?setLength@UnicodeString@icu_56@@AAEXH@Z']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+0Ch],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4UnicodeString@icu_56@@QAEAAV01@_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['1']
push ['0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4UnicodeString@icu_56@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?unBogus@UnicodeString@icu_56@@AAEXXZ']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@H@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?unBogus@UnicodeString@icu_56@@AAEXXZ']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?pinIndex@UnicodeString@icu_56@@ABEXAAH@Z']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
sub ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setTo@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?copyFrom@UnicodeString@icu_56@@AAEAAV12@ABV12@C@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setTo@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?unBogus@UnicodeString@icu_56@@AAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setTo@UnicodeString@icu_56@@QAEAAV12@_W@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?unBogus@UnicodeString@icu_56@@AAEXXZ']
push ['1']
push ['0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setTo@UnicodeString@icu_56@@QAEAAV12@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?unBogus@UnicodeString@icu_56@@AAEXXZ']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?append@UnicodeString@icu_56@@QAEAAV12@ABV12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?append@UnicodeString@icu_56@@QAEAAV12@PB_WHH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?append@UnicodeString@icu_56@@QAEAAV12@PB_WH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?append@UnicodeString@icu_56@@QAEAAV12@_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['1']
push ['0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??YUnicodeString@icu_56@@QAEAAV01@_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['1']
push ['0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??YUnicodeString@icu_56@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?append@UnicodeString@icu_56@@QAEAAV12@H@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??YUnicodeString@icu_56@@QAEAAV01@ABV01@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@HH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@UnicodeString@icu_56@@QAEAAV12@HABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@UnicodeString@icu_56@@QAEAAV12@HPB_WH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@UnicodeString@icu_56@@QAEAAV12@H_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['1']
push ['0']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?insert@UnicodeString@icu_56@@QAEAAV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?remove@UnicodeString@icu_56@@QAEAAV12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_46C0']
mov ['ecx,', '[ebp+var_8]']
call ['?setToEmpty@UnicodeString@icu_56@@AAEXXZ']
jmp ['short', 'loc_46C8']
mov ['ecx,', '[ebp+var_8]']
call ['?setZeroLength@UnicodeString@icu_56@@AAEXXZ']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?remove@UnicodeString@icu_56@@QAEAAV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jg ['short', 'loc_471C']
cmp ['[ebp+arg_4],', '7FFFFFFFh']
jnz ['short', 'loc_471C']
mov ['ecx,', '[ebp+var_8]']
call ['?remove@UnicodeString@icu_56@@QAEAAV12@XZ']
jmp ['short', 'loc_4732']
push ['0']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?removeBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
push ['0']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?retainBetween@UnicodeString@icu_56@@QAEAAV12@HH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?truncate@UnicodeString@icu_56@@QAECH@Z']
push ['0']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?truncate@UnicodeString@icu_56@@QAECH@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?isBogus@UnicodeString@icu_56@@QBECXZ']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_483E']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_483E']
mov ['ecx,', '[ebp+var_8]']
call ['?unBogus@UnicodeString@icu_56@@AAEXXZ']
xor ['al,', 'al']
jmp ['short', 'loc_485F']
jmp ['short', 'loc_485F']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
cmp ['[ebp+arg_0],', 'eax']
jnb ['short', 'loc_485D']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?setLength@UnicodeString@icu_56@@AAEXH@Z']
mov ['al,', '1']
jmp ['short', 'loc_485F']
jmp ['short', 'loc_485F']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?reverse@UnicodeString@icu_56@@QAEAAV12@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?length@UnicodeString@icu_56@@QBEHXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
call ['?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?reverse@UnicodeString@icu_56@@QAEAAV12@HH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0StringEnumeration@icu_56@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0StringEnumeration@icu_56@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0UObject@icu_56@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7StringEnumeration@icu_56@@6B@']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '4']
call ['??0UnicodeString@icu_56@@QAE@ABV01@@Z']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '44h']
mov ['edi,', '[ebp+var_14]']
add ['edi,', '44h']
mov ['ecx,', '8']
rep ['movsd']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+64h]']
mov ['[eax+64h],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
mov ['[eax+68h],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0StringEnumeration@icu_56@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1UObject@icu_56@@UAE@XZ']
endp
__ehhandler$??0StringEnumeration@icu_56@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0DCh]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0StringEnumeration@icu_56@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4StringEnumeration@icu_56@@6B@']
public ['??_7StringEnumeration@icu_56@@6B@']
dd ['offset', '?getDynamicClassID@UObject@icu_56@@UBEPAXXZ']
dd ['offset', '?clone@StringEnumeration@icu_56@@UBEPAV12@XZ']
dd ['offset', '__purecall']
dd ['offset', '?next@StringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z']
dd ['offset', '?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z']
dd ['offset', '?snext@StringEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z']
dd ['offset', '__purecall']
dd ['offset', '??8StringEnumeration@icu_56@@UBECABV01@@Z']
dd ['offset', '??9StringEnumeration@icu_56@@UBECABV01@@Z']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0StringEnumeration@icu_56@@QAE@ABV01@@Z$0']
dd ['offset', '__unwindtable$??0StringEnumeration@icu_56@@QAE@ABV01@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_rdata$r']
public ['??_R4StringEnumeration@icu_56@@6B@']
dd ['offset', '??_R0?AVStringEnumeration@icu_56@@@8']
dd ['offset', '??_R3StringEnumeration@icu_56@@8']
assume ['cs:_data']
public ['??_R0?AVStringEnumeration@icu_56@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3StringEnumeration@icu_56@@8']
dd ['3']
dd ['offset', '??_R2StringEnumeration@icu_56@@8']
assume ['cs:_rdata$r']
public ['??_R2StringEnumeration@icu_56@@8']
dd ['offset', '??_R1A@?0A@EA@UObject@icu_56@@8']
dd ['offset', '??_R13?0A@EA@UMemory@icu_56@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@StringEnumeration@icu_56@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '?_Rank@?$_Arithmetic_traits@N@std@@2HB']
dd ['offset', '??_R3StringEnumeration@icu_56@@8']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4StringEnumeration@icu_56@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??4UObject@icu_56@@QAEAAV01@ABV01@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
call ['??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_4B23']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '20h']
jnb ['short', 'loc_4B3D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_14]']
mov ['dl,', '[ecx+44h]']
mov ['[eax+44h],', 'dl']
jmp ['short', 'loc_4B1A']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+64h]']
mov ['[eax+64h],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
mov ['[eax+68h],', 'edx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GStringEnumeration@icu_56@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??1StringEnumeration@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4BAF']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_EStringEnumeration@icu_56@@UAEPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_4C29']
push ['offset', '??1StringEnumeration@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax-4]']
push ['ecx']
push ['6Ch']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4C21']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
push ['eax']
call ['??_VUMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
jmp ['short', 'loc_4C48']
mov ['ecx,', '[ebp+var_8]']
call ['??1StringEnumeration@icu_56@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4C45']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_ISO2022Open@@YAXPAUUConverter@@PAUUConverterLoadArgs@@PAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '210h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_210]']
mov ['ecx,', '84h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+Dest],', '20h']
mov ['[ebp+var_F],', '20h']
mov ['[ebp+var_E],', '20h']
mov ['[ebp+var_D],', '20h']
mov ['[ebp+var_C],', '20h']
mov ['[ebp+var_B],', '20h']
push ['68h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['loc_532E']
mov ['[ebp+var_11C],', '1Ch']
mov ['[ebp+var_118],', '0']
mov ['[ebp+var_114],', '0']
mov ['[ebp+var_113],', '0']
xor ['eax,', 'eax']
mov ['[ebp+var_112],', 'ax']
mov ['[ebp+var_110],', '0']
mov ['[ebp+var_10C],', '0']
mov ['[ebp+var_108],', '0']
mov ['[ebp+var_104],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+Dst],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax+8]']
mov ['[ebp+var_114],', 'cl']
push ['68h']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_4D8B']
push ['1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['esi,', 'esp']
push ['6']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+18h]']
push ['eax']
lea ['ecx,', '[ebp+Dest]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strncpy']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
and ['ecx,', '0Fh']
mov ['[ebp+var_134],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_134]']
mov ['[eax+40h],', 'ecx']
movsx ['eax,', '[ebp+Dest]']
cmp ['eax,', '6Ah']
jnz ['loc_4F8F']
movsx ['eax,', '[ebp+var_F]']
cmp ['eax,', '61h']
jz ['short', 'loc_4DCC']
movsx ['eax,', '[ebp+var_F]']
cmp ['eax,', '70h']
jnz ['loc_4F8F']
movsx ['eax,', '[ebp+var_E]']
cmp ['eax,', '5Fh']
jz ['short', 'loc_4DE1']
movsx ['eax,', '[ebp+var_E]']
test ['eax,', 'eax']
jnz ['loc_4F8F']
cmp ['[ebp+var_134],', '4']
jbe ['short', 'loc_4DF8']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '2']
jmp ['loc_5337']
mov ['eax,', '[ebp+var_134]']
movzx ['ecx,', 'ds:_jpCharsetMasks[eax*2]']
and ['ecx,', '4']
jz ['short', 'loc_4E33']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_09KFBIDBIA@ISO8859_7?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_09DNLJOPNC@Shift?9JIS?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+10h],', 'eax']
mov ['eax,', '[ebp+var_134]']
movzx ['ecx,', 'ds:_jpCharsetMasks[eax*2]']
and ['ecx,', '20h']
jz ['short', 'loc_4E96']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_08IOEEBOKI@jisx?9212?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+14h],', 'eax']
mov ['eax,', '[ebp+var_134]']
movzx ['ecx,', 'ds:_jpCharsetMasks[eax*2]']
and ['ecx,', '40h']
jz ['short', 'loc_4ED1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_08KJIFHEL@ibm?95478?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+18h],', 'eax']
mov ['eax,', '[ebp+var_134]']
movzx ['ecx,', 'ds:_jpCharsetMasks[eax*2]']
and ['ecx,', '80h']
jz ['short', 'loc_4F0F']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_08PMCOPMKI@ksc_5601?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', 'offset', '?_ISO2022JPData@?A0x5ec8f556@@3UUConverterSharedData@@B']
push ['offset', '??_C@_02DJBIDCPN@ja?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '63h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
push ['offset', '??_C@_0BM@OKNPDGBE@ISO_2022?0locale?$DNja?0version?$DN?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '45h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '45h']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_140],', 'eax']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+40h]']
add ['ecx,', '30h']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_140]']
mov ['[edx+45h],', 'cl']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+var_140]']
mov ['byte', 'ptr', '[eax+46h],', '0']
jmp ['loc_52EE']
movsx ['eax,', '[ebp+Dest]']
cmp ['eax,', '6Bh']
jnz ['loc_5165']
movsx ['eax,', '[ebp+var_F]']
cmp ['eax,', '6Fh']
jz ['short', 'loc_4FB2']
movsx ['eax,', '[ebp+var_F]']
cmp ['eax,', '72h']
jnz ['loc_5165']
movsx ['eax,', '[ebp+var_E]']
cmp ['eax,', '5Fh']
jz ['short', 'loc_4FC7']
movsx ['eax,', '[ebp+var_E]']
test ['eax,', 'eax']
jnz ['loc_5165']
cmp ['[ebp+var_134],', '1']
jbe ['short', 'loc_4FDE']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '2']
jmp ['loc_5337']
cmp ['[ebp+var_134],', '1']
jnz ['short', 'loc_4FF3']
mov ['[ebp+var_14C],', 'offset', '??_C@_0BD@OMACFIPD@icu?9internal?925546?$AA@']
jmp ['short', 'loc_5016']
mov ['[ebp+var_14C],', 'offset', '??_C@_07GEKOEGCG@ibm?9949?$AA@']
mov ['[ebp+var_134],', '0']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_134]']
mov ['[eax+40h],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5057']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_14C]']
push ['ecx']
call ['_ucnv_canCreateConverter_56']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
jmp ['loc_5337']
jmp ['loc_5160']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_14C]']
push ['ecx']
call ['_ucnv_open_56']
add ['esp,', '8']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+28h],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_5099']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_ISO2022Close@@YAXPAUUConverter@@@Z']
add ['esp,', '4']
jmp ['loc_5337']
cmp ['[ebp+var_134],', '1']
jnz ['short', 'loc_5102']
push ['offset', '??_C@_0BN@OIMKAGGC@ISO_2022?0locale?$DNko?0version?$DN1?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '45h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
push ['1']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['4']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ecx+3Dh]']
mov ['[edx+3Dh],', 'al']
jmp ['short', 'loc_5119']
push ['offset', '??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '45h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', 'offset', '?_ISO2022KRData@?A0x5ec8f556@@3UUConverterSharedData@@B']
push ['offset', '??_C@_02KGFJHFEE@ko?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '63h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
jmp ['loc_52EE']
movsx ['eax,', '[ebp+Dest]']
cmp ['eax,', '7Ah']
jnz ['short', 'loc_5177']
movsx ['eax,', '[ebp+var_F]']
cmp ['eax,', '68h']
jz ['short', 'loc_5191']
movsx ['eax,', '[ebp+Dest]']
cmp ['eax,', '63h']
jnz ['loc_52E3']
movsx ['eax,', '[ebp+var_F]']
cmp ['eax,', '6Eh']
jnz ['loc_52E3']
movsx ['eax,', '[ebp+var_E]']
cmp ['eax,', '5Fh']
jz ['short', 'loc_51A6']
movsx ['eax,', '[ebp+var_E]']
test ['eax,', 'eax']
jnz ['loc_52E3']
cmp ['[ebp+var_134],', '2']
jbe ['short', 'loc_51BD']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '2']
jmp ['loc_5337']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_08KJIFHEL@ibm?95478?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+4],', 'eax']
cmp ['[ebp+var_134],', '1']
jnz ['short', 'loc_5216']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_0L@OIODGLNO@iso?9ir?9165?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_11C]']
push ['ecx']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
push ['offset', '??_C@_0P@HKOBFPCG@cns?911643?91992?$AA@']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', 'offset', '?_ISO2022CNData@?A0x5ec8f556@@3UUConverterSharedData@@B']
push ['offset', '??_C@_02LBFBBFLN@cn?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '63h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
cmp ['[ebp+var_134],', '0']
jnz ['short', 'loc_528E']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+40h],', '0']
push ['offset', '??_C@_0BN@OMNIKBPD@ISO_2022?0locale?$DNzh?0version?$DN0?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '45h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
jmp ['short', 'loc_52E1']
cmp ['[ebp+var_134],', '1']
jnz ['short', 'loc_52BD']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+40h],', '1']
push ['offset', '??_C@_0BN@PFMDJALC@ISO_2022?0locale?$DNzh?0version?$DN1?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '45h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
jmp ['short', 'loc_52E1']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+40h],', '2']
push ['offset', '??_C@_0BN@NOOOMDHB@ISO_2022?0locale?$DNzh?0version?$DN2?$AA@']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '45h']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
jmp ['short', 'loc_52EE']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '2']
jmp ['short', 'loc_5337']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[edx+47h]']
mov ['[eax+3Ch],', 'cl']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_5320']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_532C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_ISO2022Close@@YAXPAUUConverter@@@Z']
add ['esp,', '4']
jmp ['short', 'loc_5337']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN44']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '210h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN43']
dd ['offset', '$LN40']
db ['8,', '0FFh']
dw ['0FFFFh']
dd ['offset', '?_Nocreate@?$_Iosb@H@std@@2W4_Openmode@12@B']
dd ['offset', '$LN41']
dd ['0FFFFFEE4h,', '1Ch']
dd ['offset', '$LN42']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BN@NOOOMDHB@ISO_2022?0locale?$DNzh?0version?$DN2?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BN@PFMDJALC@ISO_2022?0locale?$DNzh?0version?$DN1?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BN@OMNIKBPD@ISO_2022?0locale?$DNzh?0version?$DN0?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_02LBFBBFLN@cn?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0P@HKOBFPCG@cns?911643?91992?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0L@OIODGLNO@iso?9ir?9165?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_02KGFJHFEE@ko?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BN@PBNBDHCD@ISO_2022?0locale?$DNko?0version?$DN0?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BN@OIMKAGGC@ISO_2022?0locale?$DNko?0version?$DN1?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_07GEKOEGCG@ibm?9949?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BD@OMACFIPD@icu?9internal?925546?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BM@OKNPDGBE@ISO_2022?0locale?$DNja?0version?$DN?$AA@']
assume ['cs:_rdata']
public ['??_C@_02DJBIDCPN@ja?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_08PMCOPMKI@ksc_5601?$AA@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_08KJIFHEL@ibm?95478?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_08IOEEBOKI@jisx?9212?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_09DNLJOPNC@Shift?9JIS?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_09KFBIDBIA@ISO8859_7?$AA@']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setnle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+40h],', '1']
jnz ['short', 'loc_5567']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+24h],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Fh]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_55BC']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+3Fh],', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+4Ch],', '1Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+4Dh],', '24h']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+4Eh],', '29h']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+4Fh],', '43h']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+40h],', '1']
jnz ['short', 'loc_55E2']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+34h],', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_ISO2022Close@@YAXPAUUConverter@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_568D']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_5634']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0Ah']
jge ['short', 'loc_565A']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jz ['short', 'loc_5658']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_ucnv_unloadSharedDataIfReady_56']
add ['esp,', '4']
jmp ['short', 'loc_562B']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['_ucnv_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_568D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_ISO2022Reset@@YAXPAUUConverter@@W4UConverterResetChoice@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_4],', '1']
jg ['short', 'loc_56F5']
push ['6']
push ['0']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '30h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+3Ch],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+44h],', '0']
cmp ['[ebp+arg_4],', '1']
jz ['short', 'loc_570E']
push ['6']
push ['0']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '36h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+63h]']
cmp ['ecx,', '6Bh']
jnz ['short', 'loc_5746']
cmp ['[ebp+arg_4],', '1']
jg ['short', 'loc_5730']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?setInitialStateToUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z']
add ['esp,', '8']
cmp ['[ebp+arg_4],', '1']
jz ['short', 'loc_5746']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?setInitialStateFromUnicodeKR@@YAXPAUUConverter@@PAUUConverterDataISO2022@@@Z']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_ISO2022getName@@YAPBDPBUUConverter@@@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_5794']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '45h']
jmp ['short', 'loc_5796']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_fromUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '224h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_224]']
mov ['ecx,', '89h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_48],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_54],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_60],', 'ecx']
mov ['[ebp+var_C0],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '36h']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_B4],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_6C],', 'ecx']
cmp ['[ebp+var_6C],', '0']
jz ['short', 'loc_583F']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_3C]']
jnb ['short', 'loc_583F']
jmp ['short', '$getTrail$37772']
jmp ['short', '$getTrail$37772']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_54]']
jnb ['loc_62A5']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_3C]']
jnb ['loc_6295']
mov ['eax,', '[ebp+var_48]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_6C],', 'ecx']
mov ['edx,', '[ebp+var_48]']
add ['edx,', '2']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_6C]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_591A']
mov ['eax,', '[ebp+var_6C]']
and ['eax,', '400h']
jnz ['short', 'loc_5903']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_54]']
jnb ['short', 'loc_58F3']
mov ['eax,', '[ebp+var_48]']
mov ['cx,', '[eax]']
mov ['[ebp+var_FC],', 'cx']
movzx ['eax,', '[ebp+var_FC]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_58DA']
mov ['eax,', '[ebp+var_48]']
add ['eax,', '2']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_6C]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_FC]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_6C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+38h],', '0']
jmp ['short', 'loc_58F1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_62A5']
jmp ['short', 'loc_5901']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_62A5']
jmp ['short', 'loc_591A']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_62A5']
cmp ['[ebp+var_6C],', '20h']
jge ['short', 'loc_5948']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_6C]']
shl ['eax,', 'cl']
and ['eax,', '800C000h']
jz ['short', 'loc_5948']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_62A5']
cmp ['[ebp+var_B4],', '0']
jnz ['loc_5AF3']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+40h]']
mov ['dx,', 'ds:_jpCharsetMasks[ecx*2]']
mov ['[ebp+var_108],', 'dx']
mov ['[ebp+var_B4],', '0']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '3']
jz ['short', 'loc_5986']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '4']
jnz ['short', 'loc_59A3']
mov ['eax,', '[ebp+var_B4]']
mov ['[ebp+eax+var_A8],', '8']
mov ['ecx,', '[ebp+var_B4]']
add ['ecx,', '1']
mov ['[ebp+var_B4],', 'ecx']
movzx ['eax,', '[ebp+var_108]']
and ['eax,', '0FFFFFEFFh']
mov ['[ebp+var_108],', 'ax']
mov ['eax,', '[ebp+var_24]']
mov ['cl,', '[eax]']
mov ['[ebp+var_E1],', 'cl']
mov ['edx,', '[ebp+var_B4]']
mov ['al,', '[ebp+var_E1]']
mov ['[ebp+edx+var_A8],', 'al']
mov ['ecx,', '[ebp+var_B4]']
add ['ecx,', '1']
mov ['[ebp+var_B4],', 'ecx']
movsx ['ecx,', '[ebp+var_E1]']
mov ['eax,', '1']
shl ['eax,', 'cl']
not ['eax']
movzx ['ecx,', '[ebp+var_108]']
and ['ecx,', 'eax']
mov ['[ebp+var_108],', 'cx']
mov ['eax,', '[ebp+var_24]']
mov ['cl,', '[eax+2]']
mov ['[ebp+var_E1],', 'cl']
movsx ['edx,', '[ebp+var_E1]']
test ['edx,', 'edx']
jz ['short', 'loc_5A5C']
mov ['eax,', '[ebp+var_B4]']
mov ['cl,', '[ebp+var_E1]']
mov ['[ebp+eax+var_A8],', 'cl']
mov ['edx,', '[ebp+var_B4]']
add ['edx,', '1']
mov ['[ebp+var_B4],', 'edx']
movsx ['ecx,', '[ebp+var_E1]']
mov ['eax,', '1']
shl ['eax,', 'cl']
not ['eax']
movzx ['ecx,', '[ebp+var_108]']
and ['ecx,', 'eax']
mov ['[ebp+var_108],', 'cx']
mov ['[ebp+var_D8],', '0']
jmp ['short', 'loc_5A77']
mov ['eax,', '[ebp+var_D8]']
add ['eax,', '1']
mov ['[ebp+var_D8],', 'eax']
cmp ['[ebp+var_D8],', '9']
jge ['short', 'loc_5AF3']
mov ['eax,', '[ebp+var_D8]']
mov ['cl,', 'ds:_jpCharsetPref[eax*4]']
mov ['[ebp+var_E1],', 'cl']
movsx ['ecx,', '[ebp+var_E1]']
mov ['eax,', '1']
shl ['eax,', 'cl']
movzx ['ecx,', '[ebp+var_108]']
and ['eax,', 'ecx']
jz ['short', 'loc_5AEE']
mov ['eax,', '[ebp+var_B4]']
mov ['cl,', '[ebp+var_E1]']
mov ['[ebp+eax+var_A8],', 'cl']
mov ['edx,', '[ebp+var_B4]']
add ['edx,', '1']
mov ['[ebp+var_B4],', 'edx']
movsx ['ecx,', '[ebp+var_E1]']
mov ['eax,', '1']
shl ['eax,', 'cl']
not ['eax']
movzx ['ecx,', '[ebp+var_108]']
and ['ecx,', 'eax']
mov ['[ebp+var_108],', 'cx']
jmp ['loc_5A68']
mov ['[ebp+var_ED],', '0']
mov ['al,', '[ebp+var_ED]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_88],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['cl,', '[eax+23h]']
mov ['[ebp+var_C9],', 'cl']
mov ['[ebp+var_D8],', '0']
jmp ['short', 'loc_5B37']
mov ['eax,', '[ebp+var_D8]']
add ['eax,', '1']
mov ['[ebp+var_D8],', 'eax']
mov ['eax,', '[ebp+var_D8]']
cmp ['eax,', '[ebp+var_B4]']
jge ['loc_5F43']
cmp ['[ebp+var_88],', '0']
jg ['loc_5F43']
mov ['eax,', '[ebp+var_D8]']
mov ['cl,', '[ebp+eax+var_A8]']
mov ['[ebp+var_129],', 'cl']
movsx ['eax,', '[ebp+var_129]']
mov ['[ebp+var_224],', 'eax']
cmp ['[ebp+var_224],', '8']
ja ['$LN35']
mov ['ecx,', '[ebp+var_224]']
jmp ['ds:$LN92[ecx*4]']
cmp ['[ebp+var_6C],', '7Fh']
jg ['short', 'loc_5BBC']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_C0],', 'eax']
mov ['[ebp+var_88],', '1']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_ED],', '0']
jmp ['loc_5F3E']
cmp ['[ebp+var_6C],', '0A0h']
jl ['short', 'loc_5BFE']
cmp ['[ebp+var_6C],', '0FFh']
jg ['short', 'loc_5BFE']
mov ['eax,', '[ebp+var_6C]']
sub ['eax,', '80h']
mov ['[ebp+var_C0],', 'eax']
mov ['[ebp+var_88],', '1']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_ED],', '2']
jmp ['loc_5F3E']
mov ['eax,', '[ebp+var_6C]']
sub ['eax,', '0FF61h']
cmp ['eax,', '3Eh']
ja ['loc_5CA8']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '3']
jnz ['short', 'loc_5C56']
mov ['eax,', '[ebp+var_6C]']
sub ['eax,', '0FF40h']
mov ['[ebp+var_C0],', 'eax']
mov ['[ebp+var_88],', '1']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['ecx,', '[ebp+var_24]']
mov ['dl,', '[ebp+var_E1]']
mov ['[ecx+1],', 'dl']
mov ['[ebp+var_ED],', '1']
jmp ['short', 'loc_5CA8']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '4']
jnz ['short', 'loc_5CA8']
mov ['eax,', '[ebp+var_6C]']
sub ['eax,', '0FEC0h']
mov ['[ebp+var_C0],', 'eax']
mov ['[ebp+var_88],', '1']
mov ['eax,', '[ebp+var_24]']
mov ['cl,', '[eax]']
mov ['[ebp+var_E1],', 'cl']
movsx ['eax,', '[ebp+var_E1]']
cmp ['eax,', '4']
jl ['short', 'loc_5CA1']
movsx ['eax,', '[ebp+var_E1]']
cmp ['eax,', '7']
jg ['short', 'loc_5CA1']
mov ['[ebp+var_E1],', '3']
mov ['[ebp+var_ED],', '0']
jmp ['loc_5F3E']
mov ['eax,', '[ebp+var_6C]']
push ['eax']
call ['?jisx201FromU@@YAII@Z']
add ['esp,', '4']
mov ['[ebp+var_114],', 'eax']
cmp ['[ebp+var_114],', '7Fh']
ja ['short', 'loc_5CF8']
mov ['eax,', '[ebp+var_114]']
mov ['[ebp+var_C0],', 'eax']
mov ['[ebp+var_88],', '1']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_ED],', '0']
mov ['[ebp+var_C9],', '0']
jmp ['loc_5F3E']
push ['1']
movzx ['eax,', '[ebp+var_C9]']
push ['eax']
lea ['ecx,', '[ebp+var_114]']
push ['ecx']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
movsx ['eax,', '[ebp+var_129]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z']
add ['esp,', '14h']
mov ['[ebp+var_120],', 'eax']
cmp ['[ebp+var_120],', '2']
jz ['short', 'loc_5D49']
cmp ['[ebp+var_120],', '0FFFFFFFEh']
jnz ['short', 'loc_5D9B']
cmp ['[ebp+var_88],', '0']
jnz ['short', 'loc_5D9B']
mov ['eax,', '[ebp+var_114]']
push ['eax']
call ['?_2022FromSJIS@@YAII@Z']
add ['esp,', '4']
mov ['[ebp+var_114],', 'eax']
cmp ['[ebp+var_114],', '0']
jz ['short', 'loc_5D99']
mov ['eax,', '[ebp+var_114]']
mov ['[ebp+var_C0],', 'eax']
mov ['eax,', '[ebp+var_120]']
mov ['[ebp+var_88],', 'eax']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_ED],', '0']
mov ['[ebp+var_C9],', '0']
jmp ['short', 'loc_5DF1']
cmp ['[ebp+var_88],', '0']
jnz ['short', 'loc_5DF1']
movsx ['eax,', '[ebp+var_C9]']
test ['eax,', 'eax']
jz ['short', 'loc_5DF1']
mov ['eax,', '[ebp+var_6C]']
sub ['eax,', '0FF61h']
cmp ['eax,', '3Eh']
ja ['short', 'loc_5DF1']
mov ['eax,', '[ebp+var_6C]']
movzx ['ecx,', 'word', 'ptr', '(byte_BD3-2060Dh)[eax*2]']
mov ['[ebp+var_C0],', 'ecx']
mov ['[ebp+var_88],', '0FFFFFFFEh']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_ED],', '0']
mov ['[ebp+var_C9],', '0']
jmp ['loc_5F3E']
movzx ['eax,', '[ebp+var_C9]']
push ['eax']
lea ['ecx,', '[ebp+var_114]']
push ['ecx']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
movsx ['eax,', '[ebp+var_129]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['?MBCS_SINGLE_FROM_UCHAR32@@YAHPAUUConverterSharedData@@HPAIC@Z']
add ['esp,', '10h']
mov ['[ebp+var_120],', 'eax']
cmp ['[ebp+var_120],', '0']
jz ['short', 'loc_5E8F']
cmp ['[ebp+var_120],', '0']
jge ['short', 'loc_5E40']
cmp ['[ebp+var_88],', '0']
jnz ['short', 'loc_5E8F']
cmp ['[ebp+var_114],', '0A0h']
jb ['short', 'loc_5E8F']
cmp ['[ebp+var_114],', '0FFh']
ja ['short', 'loc_5E8F']
mov ['eax,', '[ebp+var_114]']
sub ['eax,', '80h']
mov ['[ebp+var_C0],', 'eax']
mov ['eax,', '[ebp+var_120]']
mov ['[ebp+var_88],', 'eax']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_ED],', '2']
mov ['[ebp+var_C9],', '0']
jmp ['loc_5F3E']
push ['1']
movzx ['eax,', '[ebp+var_C9]']
push ['eax']
lea ['ecx,', '[ebp+var_114]']
push ['ecx']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
movsx ['eax,', '[ebp+var_129]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z']
add ['esp,', '14h']
mov ['[ebp+var_120],', 'eax']
cmp ['[ebp+var_120],', '2']
jz ['short', 'loc_5EE0']
cmp ['[ebp+var_120],', '0FFFFFFFEh']
jnz ['short', 'loc_5F3E']
cmp ['[ebp+var_88],', '0']
jnz ['short', 'loc_5F3E']
movsx ['eax,', '[ebp+var_129]']
cmp ['eax,', '7']
jnz ['short', 'loc_5F0C']
mov ['eax,', '[ebp+var_114]']
push ['eax']
call ['?_2022FromGR94DBCS@@YAII@Z']
add ['esp,', '4']
mov ['[ebp+var_114],', 'eax']
cmp ['[ebp+var_114],', '0']
jnz ['short', 'loc_5F0C']
jmp ['short', 'loc_5F3E']
mov ['eax,', '[ebp+var_114]']
mov ['[ebp+var_C0],', 'eax']
mov ['eax,', '[ebp+var_120]']
mov ['[ebp+var_88],', 'eax']
mov ['al,', '[ebp+var_129]']
mov ['[ebp+var_E1],', 'al']
mov ['[ebp+var_ED],', '0']
mov ['[ebp+var_C9],', '0']
jmp ['loc_5B28']
cmp ['[ebp+var_88],', '0']
jz ['loc_613B']
cmp ['[ebp+var_88],', '0']
jge ['short', 'loc_5F67']
mov ['eax,', '[ebp+var_88]']
neg ['eax']
mov ['[ebp+var_88],', 'eax']
mov ['[ebp+var_94],', '0']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
cmp ['ecx,', '1']
jnz ['short', 'loc_5FA9']
movsx ['eax,', '[ebp+var_ED]']
test ['eax,', 'eax']
jnz ['short', 'loc_5FA9']
mov ['eax,', '[ebp+var_94]']
mov ['[ebp+eax+Dst],', '0Fh']
mov ['ecx,', '[ebp+var_94]']
add ['ecx,', '1']
mov ['[ebp+var_94],', 'ecx']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax+4],', '0']
movsx ['eax,', '[ebp+var_E1]']
movsx ['ecx,', '[ebp+var_ED]']
mov ['edx,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[edx+ecx]']
cmp ['eax,', 'ecx']
jz ['loc_604E']
movsx ['eax,', '[ebp+var_E1]']
movsx ['ecx,', 'ds:_escSeqCharsLen[eax]']
mov ['[ebp+Size],', 'ecx']
push ['1']
movsx ['eax,', '[ebp+var_E1]']
imul ['eax,', '6']
add ['eax,', 'offset', '_escSeqChars']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
movsx ['edx,', '[ebp+var_E1]']
imul ['edx,', '6']
add ['edx,', 'offset', '_escSeqChars']
push ['edx']
mov ['eax,', '[ebp+var_94]']
lea ['ecx,', '[ebp+eax+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_94]']
add ['eax,', '[ebp+Size]']
mov ['[ebp+var_94],', 'eax']
movsx ['eax,', '[ebp+var_ED]']
mov ['ecx,', '[ebp+var_24]']
mov ['dl,', '[ebp+var_E1]']
mov ['[ecx+eax],', 'dl']
mov ['[ebp+var_B4],', '0']
movsx ['eax,', '[ebp+var_ED]']
mov ['ecx,', '[ebp+var_24]']
movsx ['edx,', 'byte', 'ptr', '[ecx+4]']
cmp ['eax,', 'edx']
jz ['short', 'loc_60CE']
mov ['al,', '[ebp+var_ED]']
mov ['byte', 'ptr', '[ebp+var_224],', 'al']
cmp ['byte', 'ptr', '[ebp+var_224],', '1']
jz ['short', 'loc_6077']
jmp ['short', 'loc_609A']
mov ['eax,', '[ebp+var_94]']
mov ['[ebp+eax+Dst],', '0Eh']
mov ['ecx,', '[ebp+var_94]']
add ['ecx,', '1']
mov ['[ebp+var_94],', 'ecx']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax+4],', '1']
jmp ['short', 'loc_60CE']
mov ['eax,', '[ebp+var_94]']
mov ['[ebp+eax+Dst],', '1Bh']
mov ['ecx,', '[ebp+var_94]']
add ['ecx,', '1']
mov ['[ebp+var_94],', 'ecx']
mov ['eax,', '[ebp+var_94]']
mov ['[ebp+eax+Dst],', '4Eh']
mov ['ecx,', '[ebp+var_94]']
add ['ecx,', '1']
mov ['[ebp+var_94],', 'ecx']
cmp ['[ebp+var_88],', '1']
jnz ['short', 'loc_60F8']
mov ['eax,', '[ebp+var_94]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_C0]']
mov ['[ebp+eax+Dst],', 'cl']
mov ['edx,', '[ebp+var_94]']
add ['edx,', '1']
mov ['[ebp+var_94],', 'edx']
jmp ['short', 'loc_6139']
mov ['eax,', '[ebp+var_C0]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+var_94]']
mov ['[ebp+ecx+Dst],', 'al']
mov ['edx,', '[ebp+var_94]']
add ['edx,', '1']
mov ['[ebp+var_94],', 'edx']
mov ['eax,', '[ebp+var_94]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_C0]']
mov ['[ebp+eax+Dst],', 'cl']
mov ['edx,', '[ebp+var_94]']
add ['edx,', '1']
mov ['[ebp+var_94],', 'edx']
jmp ['short', 'loc_6152']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_62A5']
cmp ['[ebp+var_6C],', '0Dh']
jz ['short', 'loc_615E']
cmp ['[ebp+var_6C],', '0Ah']
jnz ['short', 'loc_616F']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax+2],', '0']
mov ['[ebp+var_B4],', '0']
cmp ['[ebp+var_94],', '1']
jnz ['short', 'loc_61B0']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+Dst]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
cmp ['[ebp+var_60],', '0']
jz ['short', 'loc_61AB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_60]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_60]']
add ['eax,', '4']
mov ['[ebp+var_60],', 'eax']
jmp ['loc_6293']
cmp ['[ebp+var_94],', '2']
jnz ['short', 'loc_6238']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '2']
cmp ['eax,', '[ebp+var_3C]']
ja ['short', 'loc_6238']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+Dst]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_7B]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
cmp ['[ebp+var_60],', '0']
jz ['short', 'loc_6236']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
mov ['edx,', '0FFFFh']
cmp ['edx,', '[ebp+var_6C]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['[ebp+var_144],', 'ecx']
mov ['eax,', '[ebp+var_60]']
mov ['ecx,', '[ebp+var_144]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_60]']
add ['edx,', '4']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+var_60]']
mov ['ecx,', '[ebp+var_144]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_60]']
add ['edx,', '4']
mov ['[ebp+var_60],', 'edx']
jmp ['short', 'loc_6293']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_48]']
sub ['edx,', '[ecx+8]']
sar ['edx,', '1']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_6C]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
sub ['edx,', 'ecx']
push ['edx']
lea ['edx,', '[ebp+var_60]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_94]']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_6293']
jmp ['short', 'loc_62A5']
jmp ['short', 'loc_62A0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_62A5']
jmp ['loc_583F']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_6446']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_62D7']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['loc_6446']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['loc_6446']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_54]']
jb ['loc_6446']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jnz ['loc_6446']
mov ['[ebp+var_94],', '0']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6335']
mov ['eax,', '[ebp+var_94]']
mov ['[ebp+eax+Dst],', '0Fh']
mov ['ecx,', '[ebp+var_94]']
add ['ecx,', '1']
mov ['[ebp+var_94],', 'ecx']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6392']
movsx ['eax,', 'ds:_escSeqCharsLen']
mov ['[ebp+var_15C],', 'eax']
push ['1']
push ['offset', '_escSeqChars']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['eax,', '[ebp+var_15C]']
push ['eax']
push ['offset', '_escSeqChars']
mov ['ecx,', '[ebp+var_94]']
lea ['edx,', '[ebp+ecx+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_94]']
add ['eax,', '[ebp+var_15C]']
mov ['[ebp+var_94],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
mov ['[ebp+var_150],', 'ecx']
cmp ['[ebp+var_150],', '0']
jle ['short', 'loc_640E']
mov ['eax,', '[ebp+var_150]']
sub ['eax,', '1']
mov ['[ebp+var_150],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_150]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_640C']
cmp ['[ebp+var_150],', '0']
jz ['short', 'loc_63FD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_150]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2-2]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_640C']
mov ['eax,', '[ebp+var_150]']
sub ['eax,', '1']
mov ['[ebp+var_150],', 'eax']
jmp ['short', 'loc_6418']
mov ['[ebp+var_150],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_150]']
push ['ecx']
lea ['edx,', '[ebp+var_60]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_94]']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax+10h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN91']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '224h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN90']
dd ['offset', '$LN85']
dd ['0FFFFFFA0h,', '4']
dd ['offset', '$LN86']
dd ['0FFFFFF84h,', '8']
dd ['offset', '$LN87']
dd ['0FFFFFF58h,', '0Ah']
dd ['offset', '$LN88']
dd ['0FFFFFEECh,', '4']
dd ['offset', '$LN89']
dd ['offset', '$LN54']
dd ['offset', '$LN38']
dd ['offset', '$LN46']
dd ['offset', '$LN44_0']
dd ['offset', '$LN35']
dd ['offset', '$LN35']
dd ['offset', '$LN35']
dd ['offset', '$LN52']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_fromUWriteBytes_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '10000h']
jl ['short', 'loc_6616']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0C9h]']
and ['ecx,', '1']
jz ['loc_6749']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '4']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+edx*4]']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+arg_10],', '1']
jnz ['short', 'loc_6680']
movzx ['eax,', 'word', 'ptr', '[ebp+var_20]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '0Fh']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+0BCh]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'edx']
cmp ['[ebp+var_2C],', '0FFh']
ja ['short', 'loc_6677']
mov ['[ebp+var_38],', '1']
jmp ['short', 'loc_667E']
mov ['[ebp+var_38],', '2']
jmp ['short', 'loc_66EA']
movzx ['eax,', 'word', 'ptr', '[ebp+var_20]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '0Fh']
add ['eax,', 'ecx']
imul ['eax,', '3']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+0BCh]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+var_44]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_44]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
or ['ecx,', 'eax']
mov ['[ebp+var_2C],', 'ecx']
cmp ['[ebp+var_2C],', '0FFh']
ja ['short', 'loc_66D1']
mov ['[ebp+var_38],', '1']
jmp ['short', 'loc_66EA']
cmp ['[ebp+var_2C],', '0FFFFh']
ja ['short', 'loc_66E3']
mov ['[ebp+var_38],', '2']
jmp ['short', 'loc_66EA']
mov ['[ebp+var_38],', '3']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '0Fh']
add ['ecx,', '10h']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '[ebp+var_20]']
jz ['short', 'loc_670E']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_38]']
jmp ['short', 'loc_6778']
jmp ['short', 'loc_6749']
movsx ['eax,', '[ebp+arg_C]']
test ['eax,', 'eax']
jnz ['short', 'loc_6734']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '0E000h']
cmp ['eax,', '1900h']
jb ['short', 'loc_6734']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '0F0000h']
cmp ['eax,', '20000h']
jnb ['short', 'loc_6749']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_6749']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_38]']
neg ['eax']
jmp ['short', 'loc_6778']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0h]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_6776']
movzx ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ucnv_extSimpleMatchFromU_56']
add ['esp,', '10h']
jmp ['short', 'loc_6778']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?MBCS_SINGLE_FROM_UCHAR32@@YAHPAUUConverterSharedData@@HPAIC@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '10000h']
jl ['short', 'loc_67C9']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0C9h]']
and ['ecx,', '1']
jnz ['short', 'loc_67C9']
xor ['eax,', 'eax']
jmp ['loc_6868']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '4']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0BCh]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_14],', '0F00h']
jl ['short', 'loc_6828']
mov ['eax,', '1']
jmp ['short', 'loc_6868']
jmp ['short', 'loc_6868']
movsx ['eax,', '[ebp+arg_C]']
test ['eax,', 'eax']
jz ['short', 'loc_6844']
xor ['ecx,', 'ecx']
cmp ['[ebp+var_14],', '800h']
setnl ['cl']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_6856']
xor ['edx,', 'edx']
cmp ['[ebp+var_14],', '0C00h']
setnl ['dl']
mov ['[ebp+var_DC],', 'edx']
cmp ['[ebp+var_DC],', '0']
jz ['short', 'loc_6866']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_6868']
jmp ['short', 'loc_6868']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_2022FromGR94DBCS@@YAII@Z proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '0A1A1h']
movzx ['ecx,', 'ax']
cmp ['ecx,', '5D5Dh']
jg ['short', 'loc_68BD']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '0A1h']
movzx ['ecx,', 'al']
cmp ['ecx,', '5Dh']
jg ['short', 'loc_68BD']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '8080h']
jmp ['short', 'loc_68BF']
jmp ['short', 'loc_68BF']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?jisx201FromU@@YAII@Z proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '7Fh']
ja ['short', 'loc_68FF']
cmp ['[ebp+arg_0],', '5Ch']
jz ['short', 'loc_68FD']
cmp ['[ebp+arg_0],', '7Eh']
jz ['short', 'loc_68FD']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_6926']
jmp ['short', 'loc_6921']
cmp ['[ebp+arg_0],', '0A5h']
jnz ['short', 'loc_6911']
mov ['eax,', '5Ch']
jmp ['short', 'loc_6926']
jmp ['short', 'loc_6921']
cmp ['[ebp+arg_0],', '203Eh']
jnz ['short', 'loc_6921']
mov ['eax,', '7Eh']
jmp ['short', 'loc_6926']
mov ['eax,', '0FFFEh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_2022FromSJIS@@YAII@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0EFFCh']
jbe ['short', 'loc_695E']
xor ['eax,', 'eax']
jmp ['loc_69E5']
mov ['al,', 'byte', 'ptr', '[ebp+arg_0]']
mov ['[ebp+var_5],', 'al']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FF00h']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_0],', '9F00h']
ja ['short', 'loc_6985']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '7000h']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_6990']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '0B000h']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
movzx ['eax,', '[ebp+var_5]']
cmp ['eax,', '9Eh']
jg ['short', 'loc_69D5']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '100h']
mov ['[ebp+arg_0],', 'eax']
movzx ['eax,', '[ebp+var_5]']
cmp ['eax,', '7Eh']
jg ['short', 'loc_69C6']
movzx ['eax,', '[ebp+var_5]']
sub ['eax,', '1Fh']
or ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_69D3']
movzx ['eax,', '[ebp+var_5]']
sub ['eax,', '20h']
or ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_69E2']
movzx ['eax,', '[ebp+var_5]']
sub ['eax,', '7Eh']
or ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_toUnicode_ISO_2022_JP_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '178h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_178]']
mov ['ecx,', '5Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['[ebp+var_38],', '0']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_50],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '30h']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_5C]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_6A64']
jmp ['$escape$37917']
jmp ['$escape$37917']
jmp ['short', 'loc_6ABF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
cmp ['edx,', '1']
jnz ['short', 'loc_6ABF']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_6ABF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_6ABF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+25h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
mov ['eax,', '[ebp+var_68]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
mov ['edx,', '[ebp+var_68]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['[ebp+var_74],', 'eax']
mov ['[ebp+var_38],', '0FFFFh']
jmp ['$getTrailByte$37922']
jmp ['$getTrailByte$37922']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['$endloop$37998']
mov ['[ebp+var_38],', '0FFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['loc_7088']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_178],', 'eax']
mov ['ecx,', '[ebp+var_178]']
sub ['ecx,', '0Ah']
mov ['[ebp+var_178],', 'ecx']
cmp ['[ebp+var_178],', '11h']
ja ['$LN38_0']
mov ['edx,', '[ebp+var_178]']
movzx ['eax,', 'ds:$LN64[edx]']
jmp ['ds:$LN69[eax*4]']
mov ['eax,', '[ebp+var_5C]']
cmp ['dword', 'ptr', '[eax+40h],', '3']
jnz ['short', 'loc_6B40']
mov ['eax,', '[ebp+var_68]']
mov ['byte', 'ptr', '[eax+4],', '0']
jmp ['short', 'loc_6ABF']
jmp ['short', '$LN47']
mov ['eax,', '[ebp+var_5C]']
mov ['byte', 'ptr', '[eax+44h],', '0']
jmp ['loc_6F03']
mov ['eax,', '[ebp+var_5C]']
cmp ['dword', 'ptr', '[eax+40h],', '3']
jnz ['short', 'loc_6B6A']
mov ['eax,', '[ebp+var_68]']
mov ['byte', 'ptr', '[eax+1],', '8']
mov ['eax,', '[ebp+var_68]']
mov ['byte', 'ptr', '[eax+4],', '1']
jmp ['loc_6ABF']
jmp ['short', '$LN44_1']
mov ['eax,', '[ebp+var_5C]']
mov ['byte', 'ptr', '[eax+44h],', '0']
jmp ['loc_6F03']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+24h]']
mov ['[ebp+var_89],', 'dl']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_5C]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', 'loc_6C14']
mov ['eax,', '[ebp+var_5C]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jnz ['short', 'loc_6C14']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_6C14']
mov ['eax,', '[ebp+var_5C]']
movsx ['ecx,', 'byte', 'ptr', '[eax+44h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6C14']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '12h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+100h],', '2']
movsx ['eax,', '[ebp+var_89]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[ebp+var_80]']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
mov ['[ecx+24h],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_6C47']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_5C]']
mov ['byte', 'ptr', '[eax+44h],', '0']
jmp ['loc_70AA']
mov ['eax,', '[ebp+var_5C]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jnz ['short', 'loc_6C57']
mov ['eax,', '[ebp+var_5C]']
mov ['byte', 'ptr', '[eax+44h],', '1']
jmp ['loc_6ABF']
mov ['eax,', '[ebp+var_68]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6C77']
mov ['eax,', '[ebp+var_68]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3']
jz ['short', 'loc_6C77']
mov ['eax,', '[ebp+var_68]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_68]']
mov ['byte', 'ptr', '[eax+2],', '0']
mov ['eax,', '[ebp+var_68]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+var_5C]']
mov ['byte', 'ptr', '[eax+44h],', '0']
mov ['eax,', '[ebp+var_68]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
mov ['edx,', '[ebp+var_68]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '0A1h']
movzx ['ecx,', 'al']
cmp ['ecx,', '3Eh']
jg ['short', 'loc_6CEA']
mov ['eax,', '[ebp+var_5C]']
cmp ['dword', 'ptr', '[eax+40h],', '4']
jnz ['short', 'loc_6CEA']
cmp ['[ebp+var_74],', '4']
jl ['short', 'loc_6CC2']
cmp ['[ebp+var_74],', '7']
jle ['short', 'loc_6CEA']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '0FEC0h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_68]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
cmp ['ecx,', '2']
jl ['short', 'loc_6CE5']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['dl,', '[ecx+5]']
mov ['[eax+4],', 'dl']
jmp ['loc_6F03']
mov ['eax,', '[ebp+var_74]']
mov ['[ebp+var_178],', 'eax']
cmp ['[ebp+var_178],', '8']
ja ['$LN21']
mov ['ecx,', '[ebp+var_178]']
jmp ['ds:$LN70[ecx*4]']
cmp ['[ebp+var_44],', '7Fh']
ja ['short', 'loc_6D19']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_38],', 'eax']
jmp ['loc_6F03']
cmp ['[ebp+var_44],', '7Fh']
ja ['short', 'loc_6D2F']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '80h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['dl,', '[ecx+5]']
mov ['[eax+4],', 'dl']
jmp ['loc_6F03']
cmp ['[ebp+var_44],', '7Fh']
ja ['short', 'loc_6D64']
mov ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '80h']
movzx ['ecx,', 'al']
mov ['edx,', '[edx+24h]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*4]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['dl,', '[ecx+5]']
mov ['[eax+4],', 'dl']
jmp ['loc_6F03']
cmp ['[ebp+var_44],', '7Fh']
ja ['short', 'loc_6D8A']
mov ['eax,', '[ebp+var_44]']
push ['eax']
call ['?jisx201ToU@@YAII@Z']
add ['esp,', '4']
mov ['[ebp+var_38],', 'eax']
jmp ['loc_6F03']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
cmp ['ecx,', '3Eh']
jg ['short', 'loc_6DA8']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '0FF40h']
mov ['[ebp+var_38],', 'eax']
jmp ['loc_6F03']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_6EE3']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax]']
mov ['[ebp+var_AD],', 'cl']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Dh']
setle ['dl']
mov ['[ebp+var_98],', 'edx']
movzx ['eax,', '[ebp+var_AD]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Dh']
setle ['dl']
mov ['[ebp+var_A4],', 'edx']
cmp ['[ebp+var_98],', '0']
jz ['loc_6E97']
cmp ['[ebp+var_A4],', '0']
jz ['loc_6E97']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '8']
movzx ['ecx,', '[ebp+var_AD]']
or ['eax,', 'ecx']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_74],', '4']
jnz ['short', 'loc_6E52']
lea ['eax,', '[ebp+var_8]']
push ['eax']
movzx ['ecx,', '[ebp+var_AD]']
push ['ecx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_44]']
push ['edx']
call ['?_2022ToSJIS@@YAXEEQAD@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_6E78']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_74],', '7']
jnz ['short', 'loc_6E69']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '8080h']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
shr ['eax,', '8']
mov ['[ebp+var_8],', 'al']
mov ['al,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[ebp+var_7],', 'al']
push ['0']
push ['2']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ebp+var_5C]']
mov ['eax,', '[edx+ecx*4]']
push ['eax']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_6EE1']
cmp ['[ebp+var_A4],', '0']
jnz ['short', 'loc_6EE1']
movzx ['eax,', '[ebp+var_AD]']
cmp ['eax,', '20h']
jge ['short', 'loc_6EC1']
movzx ['ecx,', '[ebp+var_AD]']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '800C000h']
jnz ['short', 'loc_6EE1']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '8']
or ['eax,', '10000h']
movzx ['ecx,', '[ebp+var_AD]']
or ['eax,', 'ecx']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_6F03']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+25h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
jmp ['$endloop$37998']
jmp ['$endloop$37998']
cmp ['[ebp+var_38],', '0FFFEh']
jnb ['short', 'loc_6F5B']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_6F43']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['edx,', '0FFh']
cmp ['edx,', '[ebp+var_44]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', 'word', 'ptr', '[ebp+var_38]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
jmp ['loc_7086']
cmp ['[ebp+var_38],', '0FFFFh']
jbe ['loc_7069']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '10000h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
shr ['eax,', '0Ah']
movzx ['ecx,', 'ax']
add ['ecx,', '0D800h']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_6FBF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['edx,', '0FFh']
cmp ['edx,', '[ebp+var_44]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_702C']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3FFh']
movzx ['ecx,', 'ax']
add ['ecx,', '0DC00h']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_7021']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['edx,', '0FFh']
cmp ['edx,', '[ebp+var_44]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_7067']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3FFh']
movzx ['ecx,', 'ax']
add ['ecx,', '0DC00h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[edx+41h]']
mov ['[eax+edx*2+74h],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+41h]']
add ['dl,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ecx+41h],', 'dl']
jmp ['short', 'loc_7086']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z']
add ['esp,', '10h']
jmp ['short', '$endloop$37998']
jmp ['short', 'loc_7093']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', '$endloop$37998']
jmp ['loc_6ABF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN68']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '178h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN67']
dd ['offset', '$LN65']
dd ['0FFFFFFECh,', '4']
dd ['offset', '$LN66']
align ['4']
dd ['offset', '$LN47']
dd ['offset', '$LN50']
dd ['offset', '$LN44_1']
dd ['offset', '$LN38_0']
db ['1,', '2,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '3']
align ['4']
dd ['offset', '$LN29']
dd ['offset', '$LN27']
dd ['offset', '$LN25']
dd ['offset', '$LN21']
dd ['offset', '$LN21']
dd ['offset', '$LN21']
dd ['offset', '$LN21']
dd ['offset', '$LN23']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '13Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_13C]']
mov ['ecx,', '4Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+3Ch]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+24h]']
mov ['[ebp+var_35],', 'cl']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jnb ['$DONE$37531']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_41],', 'dl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ebp+var_41]']
mov ['[edx+ecx+25h],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+24h]']
add ['dl,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+24h],', 'dl']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
movzx ['edx,', '[ebp+var_41]']
push ['edx']
call ['?getKey_2022@@YA?AW4UCNV_TableStates_2022@@DPAH0@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_13C],', 'eax']
cmp ['[ebp+var_13C],', '0FFFFFFFFh']
jz ['short', 'loc_7227']
cmp ['[ebp+var_13C],', '1']
jz ['short', 'loc_721C']
cmp ['[ebp+var_13C],', '2']
jz ['short', 'loc_722B']
jmp ['short', 'loc_723D']
jmp ['short', 'loc_723D']
mov ['[ebp+var_20],', '0']
jmp ['short', '$DONE$37531']
jmp ['short', '$DONE$37531']
jmp ['short', '$DONE$37531']
jmp ['short', '$DONE$37531']
mov ['[ebp+var_8],', '1']
mov ['[ebp+var_20],', '0']
jmp ['short', '$DONE$37531']
jmp ['short', '$DONE$37531']
jmp ['loc_7197']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+3Ch],', 'ecx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_725B']
jmp ['loc_75A9']
jmp ['loc_74B9']
cmp ['[ebp+var_8],', '0FFFFFFFFh']
jnz ['short', 'loc_726F']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '12h']
jmp ['loc_74B9']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_13C],', 'eax']
cmp ['[ebp+var_13C],', '1']
jz ['short', 'loc_72A0']
cmp ['[ebp+var_13C],', '2']
jz ['loc_749D']
cmp ['[ebp+var_13C],', '3']
jz ['loc_7392']
jmp ['loc_74B0']
mov ['eax,', '[ebp+var_2C]']
movsx ['ecx,', 'ds:_nextStateToUnicodeJP[eax]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_13C],', 'eax']
mov ['ecx,', '[ebp+var_13C]']
add ['ecx,', '1']
mov ['[ebp+var_13C],', 'ecx']
cmp ['[ebp+var_13C],', '11h']
ja ['$LN34']
mov ['edx,', '[ebp+var_13C]']
movzx ['eax,', 'ds:$LN65_0[edx]']
jmp ['ds:$LN71[eax*4]']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '13h']
jmp ['loc_738D']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+32h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_7320']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+34h]']
cmp ['ecx,', '2']
jge ['short', 'loc_7317']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', '[ecx+34h]']
mov ['[eax+35h],', 'dl']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+34h],', '2']
jmp ['short', 'loc_7329']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '12h']
jmp ['short', 'loc_738D']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+40h]']
movzx ['edx,', 'ds:_jpCharsetMasks[ecx*2]']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
and ['edx,', 'eax']
jnz ['short', 'loc_7352']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '13h']
jmp ['short', 'loc_735B']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[eax+32h],', 'cl']
jmp ['short', 'loc_738D']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+40h]']
movzx ['edx,', 'ds:_jpCharsetMasks[ecx*2]']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
and ['edx,', 'eax']
jnz ['short', 'loc_7384']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '13h']
jmp ['short', 'loc_738D']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[eax+30h],', 'cl']
jmp ['loc_74B9']
mov ['eax,', '[ebp+var_2C]']
movsx ['ecx,', 'ds:_nextStateToUnicodeCN[eax]']
mov ['[ebp+var_5C],', 'ecx']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_13C],', 'eax']
mov ['ecx,', '[ebp+var_13C]']
add ['ecx,', '1']
mov ['[ebp+var_13C],', 'ecx']
cmp ['[ebp+var_13C],', '23h']
ja ['$LN15']
mov ['edx,', '[ebp+var_13C]']
movzx ['eax,', 'ds:$LN66_0[edx]']
jmp ['ds:$LN72[eax*4]']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '13h']
jmp ['loc_749B']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+32h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_7412']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+34h]']
cmp ['ecx,', '2']
jge ['short', 'loc_7409']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', '[ecx+34h]']
mov ['[eax+35h],', 'dl']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+34h],', '2']
jmp ['short', 'loc_741B']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '12h']
jmp ['short', 'loc_749B']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+33h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_7449']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+34h]']
cmp ['ecx,', '2']
jge ['short', 'loc_7440']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', '[ecx+34h]']
mov ['[eax+35h],', 'dl']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+34h],', '3']
jmp ['short', 'loc_7452']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '12h']
jmp ['short', 'loc_749B']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', '$LN17']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '13h']
jmp ['short', 'loc_749B']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[eax+31h],', 'cl']
jmp ['short', 'loc_749B']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[eax+32h],', 'cl']
jmp ['short', 'loc_749B']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', 'loc_7492']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '13h']
jmp ['short', 'loc_749B']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[eax+33h],', 'cl']
jmp ['short', 'loc_74B9']
cmp ['[ebp+var_2C],', '30h']
jnz ['short', 'loc_74A5']
jmp ['short', 'loc_74AE']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '13h']
jmp ['short', 'loc_74B9']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '12h']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_74DA']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+24h],', '0']
jmp ['loc_75A9']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '12h']
jnz ['loc_7594']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
cmp ['ecx,', '1']
jle ['loc_7592']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
sub ['ecx,', '1']
mov ['[ebp+var_65],', 'cl']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
movsx ['edx,', '[ebp+var_35]']
sub ['ecx,', 'edx']
mov ['[ebp+var_71],', 'cl']
movsx ['eax,', '[ebp+var_65]']
movsx ['ecx,', '[ebp+var_71]']
cmp ['eax,', 'ecx']
jg ['short', 'loc_7531']
movsx ['eax,', '[ebp+var_65]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
sub ['edx,', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax],', 'edx']
jmp ['short', 'loc_758B']
movsx ['eax,', '[ebp+var_71]']
movsx ['ecx,', '[ebp+var_65]']
sub ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0FEh],', 'al']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '26h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx+0FEh]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '26h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '0DEh']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
movsx ['eax,', '[ebp+var_71]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
sub ['edx,', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+24h],', '1']
jmp ['short', 'loc_75A9']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '13h']
jnz ['short', 'loc_75A9']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+100h],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN70_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '13Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN69_0']
dd ['offset', '$LN67_0']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN68_0']
align ['4']
dd ['offset', '$LN37']
dd ['offset', '$LN41_0']
dd ['offset', '$LN34']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '2']
align ['10h']
dd ['offset', '$LN17']
dd ['offset', '$LN19']
dd ['offset', '$LN27_0']
dd ['offset', '$LN23_0']
dd ['offset', '$LN16']
dd ['offset', '$LN15']
db ['6,', '6,', '6,', '6']
db ['6,', '6,', '6,', '6']
db ['6,', '6,', '6,', '6']
db ['6,', '3,', '4,', '6']
db ['6,', '6,', '6,', '6']
db ['6,', '6,', '6,', '6']
db ['6,', '6,', '6,', '6']
db ['6,', '6,', '1,', '5']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?getKey_2022@@YA?AW4UCNV_TableStates_2022@@DPAH0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_20],', '4Ah']
mov ['[ebp+var_2C],', '0']
movzx ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'ds:_normalize_esq_chars_2022[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_76C1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_7753']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
shl ['ecx,', '5']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_773E']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_14]']
sar ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_2C]']
jnz ['short', 'loc_76EC']
jmp ['short', 'loc_773E']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', 'ds:_escSeqStateTable_Key_2022[eax*4]']
cmp ['ecx,', '[ebp+var_8]']
jle ['short', 'loc_7703']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_7736']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', 'ds:_escSeqStateTable_Key_2022[eax*4]']
cmp ['ecx,', '[ebp+var_8]']
jge ['short', 'loc_771A']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_7736']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_38]']
movsx ['eax,', 'ds:_escSeqStateTable_Value_2022[eax]']
jmp ['short', 'loc_7753']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_76CF']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0FFh']
jbe ['short', 'loc_77A1']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+25h],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+arg_4]']
mov ['[eax+26h],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+24h],', '2']
jmp ['short', 'loc_77B1']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+arg_4]']
mov ['[eax+25h],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+24h],', '1']
cmp ['[ebp+arg_8],', '0FFFEh']
jnz ['short', 'loc_77C5']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Ah']
jmp ['short', 'loc_77CE']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?jisx201ToU@@YAII@Z proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '5Ch']
jnb ['short', 'loc_7803']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_7824']
jmp ['short', 'loc_7824']
cmp ['[ebp+arg_0],', '5Ch']
jnz ['short', 'loc_7812']
mov ['eax,', '0A5h']
jmp ['short', 'loc_7824']
jmp ['short', 'loc_7824']
cmp ['[ebp+arg_0],', '7Eh']
jnz ['short', 'loc_7821']
mov ['eax,', '203Eh']
jmp ['short', 'loc_7824']
jmp ['short', 'loc_7824']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_2022ToSJIS@@YAXEEQAD@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_788B']
mov ['al,', '[ebp+arg_0]']
add ['al,', '1']
mov ['[ebp+arg_0],', 'al']
movzx ['eax,', '[ebp+arg_4]']
cmp ['eax,', '5Fh']
jg ['short', 'loc_7870']
movzx ['eax,', '[ebp+arg_4]']
add ['eax,', '1Fh']
mov ['[ebp+arg_4],', 'al']
jmp ['short', 'loc_7889']
movzx ['eax,', '[ebp+arg_4]']
cmp ['eax,', '7Eh']
jg ['short', 'loc_7885']
movzx ['eax,', '[ebp+arg_4]']
add ['eax,', '20h']
mov ['[ebp+arg_4],', 'al']
jmp ['short', 'loc_7889']
mov ['[ebp+arg_4],', '0']
jmp ['short', 'loc_78AA']
movzx ['eax,', '[ebp+arg_4]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
cmp ['ecx,', '5Dh']
jg ['short', 'loc_78A6']
movzx ['eax,', '[ebp+arg_4]']
add ['eax,', '7Eh']
mov ['[ebp+arg_4],', 'al']
jmp ['short', 'loc_78AA']
mov ['[ebp+arg_4],', '0']
mov ['al,', '[ebp+arg_0]']
shr ['al,', '1']
mov ['[ebp+arg_0],', 'al']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '2Fh']
jg ['short', 'loc_78C7']
movzx ['eax,', '[ebp+arg_0]']
add ['eax,', '70h']
mov ['[ebp+arg_0],', 'al']
jmp ['short', 'loc_78E2']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '3Fh']
jg ['short', 'loc_78DE']
movzx ['eax,', '[ebp+arg_0]']
add ['eax,', '0B0h']
mov ['[ebp+arg_0],', 'al']
jmp ['short', 'loc_78E2']
mov ['[ebp+arg_0],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['cl,', '[ebp+arg_0]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_8]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+1],', 'cl']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '174h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_174]']
mov ['ecx,', '5Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_98],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+var_74]']
cmp ['dword', 'ptr', '[eax+40h],', '1']
jnz ['short', 'loc_7989']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z']
add ['esp,', '8']
jmp ['loc_7EE3']
mov ['eax,', '[ebp+var_74]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_80],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+23h]']
mov ['[ebp+var_89],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+34h]']
mov ['[ebp+var_59],', 'dl']
mov ['al,', '[ebp+var_59]']
mov ['[ebp+var_65],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+34h]']
mov ['[ebp+var_59],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+38h]']
mov ['[ebp+var_50],', 'edx']
cmp ['[ebp+var_50],', '0']
jz ['short', 'loc_79E6']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_79E6']
jmp ['$getTrail$38053']
jmp ['$getTrail$38053']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jnb ['loc_7DBD']
mov ['[ebp+var_44],', '0FFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['loc_7DAD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_50],', '20h']
jge ['short', 'loc_7A4B']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
and ['eax,', '800C000h']
jz ['short', 'loc_7A4B']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_50]']
mov ['[ecx+38h],', 'edx']
jmp ['loc_7DBD']
push ['1']
movzx ['eax,', '[ebp+var_89]']
push ['eax']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+var_80]']
push ['eax']
call ['?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z']
add ['esp,', '14h']
mov ['[ebp+var_98],', 'eax']
cmp ['[ebp+var_98],', '0']
jge ['short', 'loc_7A86']
mov ['eax,', '[ebp+var_98]']
neg ['eax']
mov ['[ebp+var_98],', 'eax']
cmp ['[ebp+var_98],', '2']
jg ['short', 'loc_7AD3']
cmp ['[ebp+var_98],', '0']
jz ['short', 'loc_7AD3']
cmp ['[ebp+var_98],', '1']
jnz ['short', 'loc_7AA7']
cmp ['[ebp+var_44],', '7Fh']
ja ['short', 'loc_7AD3']
cmp ['[ebp+var_98],', '2']
jnz ['short', 'loc_7ADA']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '0A1A1h']
movzx ['ecx,', 'ax']
cmp ['ecx,', '5D5Dh']
jg ['short', 'loc_7AD3']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '0A1h']
movzx ['ecx,', 'al']
cmp ['ecx,', '5Dh']
jle ['short', 'loc_7ADA']
mov ['[ebp+var_44],', '0FFFFh']
cmp ['[ebp+var_44],', '0FFFFh']
jz ['loc_7D07']
mov ['al,', '[ebp+var_59]']
mov ['[ebp+var_65],', 'al']
cmp ['[ebp+var_44],', '0FFh']
setnbe ['al']
mov ['[ebp+var_59],', 'al']
movsx ['eax,', '[ebp+var_65]']
movsx ['ecx,', '[ebp+var_59]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_7B50']
movsx ['eax,', '[ebp+var_59]']
test ['eax,', 'eax']
jz ['short', 'loc_7B1F']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax],', '0Eh']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_7B2E']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax],', '0Fh']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_7B50']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_38]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '4']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_44],', '0FFh']
ja ['short', 'loc_7BCF']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_7B96']
mov ['eax,', '[ebp+var_20]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_7B94']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_38]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '4']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_7BCA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['al,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['loc_7D02']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_7C94']
mov ['eax,', '[ebp+var_44]']
shr ['eax,', '8']
sub ['eax,', '80h']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_7C16']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_38]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '4']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_7C58']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '80h']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_7C56']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_38]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '4']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_7C92']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+4]']
movsx ['ecx,', 'byte', 'ptr', '[ecx+3Fh]']
mov ['[edx+ecx+4Ch],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['cl,', '[eax+3Fh]']
add ['cl,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[eax+3Fh],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_7D02']
mov ['eax,', '[ebp+var_44]']
shr ['eax,', '8']
sub ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+4]']
movsx ['ecx,', 'byte', 'ptr', '[ecx+3Fh]']
mov ['[edx+ecx+4Ch],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['cl,', '[eax+3Fh]']
add ['cl,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[eax+3Fh],', 'cl']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+4]']
movsx ['ecx,', 'byte', 'ptr', '[ecx+3Fh]']
mov ['[edx+ecx+4Ch],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['cl,', '[eax+3Fh]']
add ['cl,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[eax+3Fh],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['loc_7DAB']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_7D94']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '400h']
jnz ['short', 'loc_7D89']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jnb ['short', 'loc_7D7E']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax]']
mov ['[ebp+var_A4],', 'cx']
movzx ['eax,', '[ebp+var_A4]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_7D73']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_50]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_A4]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
jmp ['short', 'loc_7D7C']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', 'loc_7D87']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_7D92']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', 'loc_7D9D']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_50]']
mov ['[ecx+38h],', 'edx']
jmp ['short', 'loc_7DBD']
jmp ['short', 'loc_7DB8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_7DBD']
jmp ['loc_79E6']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_7EC4']
movsx ['eax,', '[ebp+var_59]']
test ['eax,', 'eax']
jz ['loc_7EC4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['loc_7EC4']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jb ['loc_7EC4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+38h],', '0']
jnz ['loc_7EC4']
mov ['[ebp+var_59],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
mov ['[ebp+var_B0],', 'ecx']
cmp ['[ebp+var_B0],', '0']
jle ['short', 'loc_7E8D']
mov ['eax,', '[ebp+var_B0]']
sub ['eax,', '1']
mov ['[ebp+var_B0],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_B0]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_7E8B']
cmp ['[ebp+var_B0],', '0']
jz ['short', 'loc_7E7C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_B0]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2-2]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_7E8B']
mov ['eax,', '[ebp+var_B0]']
sub ['eax,', '1']
mov ['[ebp+var_B0],', 'eax']
jmp ['short', 'loc_7E97']
mov ['[ebp+var_B0],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_B0]']
push ['ecx']
lea ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
push ['1']
push ['offset', '_SHIFT_IN_STR']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
movsx ['eax,', '[ebp+var_59]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+34h],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN50_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '174h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN49']
dd ['offset', '$LN46_0']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN47_0']
dd ['0FFFFFFBCh,', '4']
dd ['offset', '$LN48']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_fromUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+28h]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+38h]']
mov ['[ecx+38h],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_MBCSFromUnicodeWithOffsets_56']
add ['esp,', '8']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+38h]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_8025']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
movsx ['edx,', 'byte', 'ptr', '[ecx+3Fh]']
test ['edx,', 'edx']
jle ['short', 'loc_800C']
push ['1']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
add ['ecx,', '4Ch']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+28h]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Fh]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+28h]']
add ['eax,', '4Ch']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4Ch']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_8]']
mov ['al,', '[ecx+3Fh]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
mov ['byte', 'ptr', '[ecx+3Fh],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+4],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '150h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_150]']
mov ['ecx,', '54h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['[ebp+var_38],', '0']
xor ['eax,', 'eax']
mov ['[ebp+var_44],', 'ax']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_50]']
cmp ['dword', 'ptr', '[eax+40h],', '1']
jnz ['short', 'loc_80B4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z']
add ['esp,', '8']
jmp ['loc_843F']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+23h]']
mov ['[ebp+var_65],', 'dl']
mov ['eax,', '[ebp+var_50]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_80E1']
jmp ['$escape$38175']
jmp ['$escape$38175']
jmp ['short', 'loc_8126']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
cmp ['edx,', '1']
jnz ['short', 'loc_8126']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_8126']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_8126']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
movzx ['dx,', 'byte', 'ptr', '[ecx+25h]']
mov ['[ebp+var_44],', 'dx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
jmp ['$getTrailByte$38179']
jmp ['$getTrailByte$38179']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_842D']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['loc_841D']
mov ['eax,', '[ebp+var_14]']
movzx ['cx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '0Fh']
jnz ['short', 'loc_81C7']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+34h],', '0']
mov ['eax,', '[ebp+var_50]']
movsx ['ecx,', 'byte', 'ptr', '[eax+44h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_81BD']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '12h']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+100h],', '2']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+25h],', 'dl']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
jmp ['loc_843F']
jmp ['loc_8126']
jmp ['loc_824C']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '0Eh']
jnz ['short', 'loc_81E5']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+34h],', '1']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '1']
jmp ['loc_8126']
jmp ['short', 'loc_824C']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '1Bh']
jnz ['short', 'loc_824C']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['2']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z']
add ['esp,', '14h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_8247']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
jmp ['loc_843F']
jmp ['loc_8126']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '0']
mov ['eax,', '[ebp+var_50]']
movsx ['ecx,', 'byte', 'ptr', '[eax+34h]']
cmp ['ecx,', '1']
jnz ['loc_8376']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_8359']
mov ['[ebp+var_38],', '0FFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax]']
mov ['[ebp+var_89],', 'cl']
movzx ['eax,', '[ebp+var_44]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Dh']
setle ['dl']
mov ['[ebp+var_74],', 'edx']
movzx ['eax,', '[ebp+var_89]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Dh']
setle ['dl']
mov ['[ebp+var_80],', 'edx']
cmp ['[ebp+var_74],', '0']
jz ['short', 'loc_830E']
cmp ['[ebp+var_80],', '0']
jz ['short', 'loc_830E']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
movzx ['eax,', '[ebp+var_44]']
add ['eax,', '80h']
mov ['[ebp+var_8],', 'al']
movzx ['eax,', '[ebp+var_89]']
add ['eax,', '80h']
mov ['[ebp+var_7],', 'al']
movzx ['eax,', '[ebp+var_65]']
push ['eax']
push ['2']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_38],', 'eax']
movzx ['eax,', '[ebp+var_44]']
shl ['eax,', '8']
movzx ['ecx,', '[ebp+var_89]']
or ['eax,', 'ecx']
mov ['[ebp+var_44],', 'ax']
jmp ['short', 'loc_8357']
cmp ['[ebp+var_80],', '0']
jnz ['short', 'loc_8357']
movzx ['eax,', '[ebp+var_89]']
cmp ['eax,', '20h']
jge ['short', 'loc_8335']
movzx ['ecx,', '[ebp+var_89]']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '800C000h']
jnz ['short', 'loc_8357']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
movzx ['eax,', '[ebp+var_44]']
shl ['eax,', '8']
or ['eax,', '10000h']
movzx ['ecx,', '[ebp+var_89]']
or ['eax,', 'ecx']
mov ['[ebp+var_44],', 'ax']
jmp ['short', 'loc_8374']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+25h],', 'dl']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
jmp ['loc_842D']
jmp ['short', 'loc_83A5']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_839E']
movzx ['eax,', '[ebp+var_65]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_83A5']
mov ['[ebp+var_38],', '0FFFFh']
cmp ['[ebp+var_38],', '0FFFEh']
jge ['short', 'loc_83FD']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_83E8']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
movzx ['edx,', '[ebp+var_44]']
xor ['eax,', 'eax']
cmp ['edx,', '0FFh']
setnle ['al']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+Src]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', 'word', 'ptr', '[ebp+var_38]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_841B']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
movzx ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z']
add ['esp,', '10h']
jmp ['short', 'loc_842D']
jmp ['short', 'loc_8428']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_842D']
jmp ['loc_8126']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN37_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '150h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN36']
dd ['offset', '$LN34_0']
dd ['0FFFFFFECh,', '4']
dd ['offset', '$LN35_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_toUnicode_ISO_2022_KR_OFFSETS_LOGIC_IBM@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '12Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_12C]']
mov ['ecx,', '4Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '1Ch']
jnb ['short', 'loc_84D8']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+Size],', 'ecx']
jmp ['short', 'loc_84DF']
mov ['[ebp+Size],', '1Ch']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ax,', 'word', 'ptr', '[ebp+Size]']
mov ['[ebp+Dst],', 'ax']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_34],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_852E']
jmp ['$escape$38137']
jmp ['$escape$38137']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_8766']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnb ['loc_8766']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '8']
push ['ecx']
call ['?getEndOfBuffer_2022@@YAPBDPAPBDPBDC@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_2C]']
jz ['loc_8719']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
test ['edx,', 'edx']
jle ['short', 'loc_85D5']
push ['1']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+4]']
add ['eax,', '25h']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '25h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_34]']
mov ['al,', '[ecx+24h]']
mov ['[edx+24h],', 'al']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_ucnv_MBCSToUnicodeWithOffsets_56']
add ['esp,', '8']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_8657']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+8]']
jz ['short', 'loc_8657']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_5C],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_68],', 'ecx']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[ebp+var_28]']
jnb ['short', 'loc_8657']
mov ['eax,', '[ebp+var_50]']
cmp ['dword', 'ptr', '[eax],', '0']
jl ['short', 'loc_8643']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ebp+var_50]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '4']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '2']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_8626']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_28]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+18h],', 'ecx']
mov ['eax,', '[ebp+var_34]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_86AF']
push ['1']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '25h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_34]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '25h']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+4]']
add ['edx,', '25h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_34]']
mov ['al,', '[edx+24h]']
mov ['[ecx+24h],', 'al']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_8719']
mov ['eax,', '[ebp+var_34]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_8703']
push ['1']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '74h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_34]']
movsx ['edx,', 'byte', 'ptr', '[ecx+41h]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '74h']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+4]']
add ['edx,', '74h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_34]']
mov ['al,', '[edx+41h]']
mov ['[ecx+41h],', 'al']
mov ['eax,', '[ebp+var_34]']
mov ['byte', 'ptr', '[eax+41h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_873C']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnz ['short', '$escape$38137']
jmp ['short', 'loc_8766']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['2']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '8']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z']
add ['esp,', '14h']
jmp ['loc_852E']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '12Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN21_0']
dd ['offset', '$LN20']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?getEndOfBuffer_2022@@YAPBDPAPBDPBDC@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_87EC']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '1Bh']
jz ['short', 'loc_87EC']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_87CE']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1F8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1F8]']
mov ['ecx,', '7Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_1ED],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_48],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_54],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_60],', 'ecx']
mov ['[ebp+var_AC],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '36h']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_A0],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_6C],', 'ecx']
cmp ['[ebp+var_6C],', '0']
jz ['short', 'loc_889E']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_3C]']
jnb ['short', 'loc_889E']
jmp ['short', '$getTrail$38253']
jmp ['short', '$getTrail$38253']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_54]']
jnb ['loc_90EB']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_3C]']
jnb ['loc_90DB']
mov ['eax,', '[ebp+var_48]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_6C],', 'ecx']
mov ['edx,', '[ebp+var_48]']
add ['edx,', '2']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_6C]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_8979']
mov ['eax,', '[ebp+var_6C]']
and ['eax,', '400h']
jnz ['short', 'loc_8962']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_54]']
jnb ['short', 'loc_8952']
mov ['eax,', '[ebp+var_48]']
mov ['cx,', '[eax]']
mov ['[ebp+var_C4],', 'cx']
movzx ['eax,', '[ebp+var_C4]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_8939']
mov ['eax,', '[ebp+var_48]']
add ['eax,', '2']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_6C]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_C4]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_6C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+38h],', '0']
jmp ['short', 'loc_8950']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_90EB']
jmp ['short', 'loc_8960']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_90EB']
jmp ['short', 'loc_8979']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_90EB']
cmp ['[ebp+var_6C],', '7Fh']
jg ['loc_8A25']
cmp ['[ebp+var_6C],', '20h']
jge ['short', 'loc_89B1']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_6C]']
shl ['eax,', 'cl']
and ['eax,', '800C000h']
jz ['short', 'loc_89B1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_90EB']
mov ['eax,', '[ebp+Dst]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_89CE']
mov ['al,', 'byte', 'ptr', '[ebp+var_6C]']
mov ['[ebp+var_7C],', 'al']
mov ['[ebp+var_88],', '1']
jmp ['short', 'loc_89FA']
mov ['[ebp+var_7C],', '0Fh']
mov ['[ebp+var_1ED],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_6C]']
mov ['[ebp+var_7B],', 'al']
mov ['[ebp+var_88],', '2']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['[ebp+var_A0],', '0']
cmp ['[ebp+var_6C],', '0Dh']
jz ['short', 'loc_8A06']
cmp ['[ebp+var_6C],', '0Ah']
jnz ['short', 'loc_8A20']
push ['6']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_A0],', '0']
jmp ['loc_8F90']
cmp ['[ebp+var_A0],', '0']
jnz ['loc_8AF2']
mov ['eax,', '[ebp+Dst]']
mov ['cl,', '[eax+1]']
mov ['[ebp+var_94],', 'cl']
movsx ['eax,', '[ebp+var_94]']
test ['eax,', 'eax']
jnz ['short', 'loc_8A50']
mov ['[ebp+var_94],', '1']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', 'loc_8A81']
movsx ['eax,', '[ebp+var_94]']
cmp ['eax,', '1']
jnz ['short', 'loc_8A6E']
mov ['[ebp+var_93],', '21h']
jmp ['short', 'loc_8A75']
mov ['[ebp+var_93],', '1']
mov ['[ebp+var_A0],', '2']
jmp ['short', 'loc_8AF2']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '1']
jnz ['short', 'loc_8AE4']
mov ['al,', '[ebp+var_94]']
mov ['[ebp+var_1F8],', 'al']
cmp ['[ebp+var_1F8],', '1']
jz ['short', 'loc_8AAA']
cmp ['[ebp+var_1F8],', '2']
jz ['short', 'loc_8ABA']
jmp ['short', 'loc_8ACA']
mov ['[ebp+var_93],', '21h']
mov ['[ebp+var_92],', '2']
jmp ['short', 'loc_8AD8']
mov ['[ebp+var_93],', '1']
mov ['[ebp+var_92],', '21h']
jmp ['short', 'loc_8AD8']
mov ['[ebp+var_93],', '1']
mov ['[ebp+var_92],', '2']
mov ['[ebp+var_A0],', '3']
jmp ['short', 'loc_8AF2']
mov ['[ebp+var_94],', '21h']
mov ['[ebp+var_93],', '1']
mov ['[ebp+var_E5],', '0']
mov ['al,', '[ebp+var_E5]']
mov ['[ebp+var_D9],', 'al']
mov ['[ebp+var_88],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['cl,', '[eax+23h]']
mov ['[ebp+var_B5],', 'cl']
mov ['[ebp+var_D0],', '0']
jmp ['short', 'loc_8B36']
mov ['eax,', '[ebp+var_D0]']
add ['eax,', '1']
mov ['[ebp+var_D0],', 'eax']
mov ['eax,', '[ebp+var_D0]']
cmp ['eax,', '[ebp+var_A0]']
jge ['loc_8D1B']
cmp ['[ebp+var_88],', '0']
jg ['loc_8D1B']
mov ['eax,', '[ebp+var_D0]']
mov ['cl,', '[ebp+eax+var_94]']
mov ['[ebp+var_F1],', 'cl']
movsx ['eax,', '[ebp+var_F1]']
test ['eax,', 'eax']
jle ['loc_8D16']
movsx ['eax,', '[ebp+var_F1]']
cmp ['eax,', '20h']
jl ['loc_8C63']
push ['2']
movzx ['eax,', '[ebp+var_B5]']
push ['eax']
lea ['ecx,', '[ebp+var_100]']
push ['ecx']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z']
add ['esp,', '14h']
mov ['[ebp+var_10C],', 'eax']
cmp ['[ebp+var_10C],', '3']
jz ['short', 'loc_8BD4']
cmp ['[ebp+var_10C],', '0FFFFFFFDh']
jnz ['loc_8C5E']
cmp ['[ebp+var_88],', '0']
jnz ['loc_8C5E']
mov ['eax,', '[ebp+var_100]']
mov ['[ebp+var_AC],', 'eax']
mov ['eax,', '[ebp+var_100]']
shr ['eax,', '10h']
sub ['eax,', '60h']
mov ['[ebp+var_D9],', 'al']
cmp ['[ebp+var_10C],', '0']
jl ['short', 'loc_8C07']
mov ['[ebp+var_88],', '2']
jmp ['short', 'loc_8C18']
mov ['[ebp+var_88],', '0FFFFFFFEh']
mov ['[ebp+var_B5],', '0']
movsx ['eax,', '[ebp+var_D9]']
cmp ['eax,', '21h']
jnz ['short', 'loc_8C2D']
mov ['[ebp+var_E5],', '1']
jmp ['short', 'loc_8C5E']
movsx ['eax,', '[ebp+var_D9]']
cmp ['eax,', '22h']
jnz ['short', 'loc_8C42']
mov ['[ebp+var_E5],', '2']
jmp ['short', 'loc_8C5E']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '1']
jnz ['short', 'loc_8C54']
mov ['[ebp+var_E5],', '3']
jmp ['short', 'loc_8C5E']
mov ['[ebp+var_88],', '0']
jmp ['loc_8D16']
movsx ['eax,', '[ebp+var_F1]']
cmp ['eax,', '0Ah']
jl ['short', 'loc_8C98']
mov ['ecx,', 'ds:?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2']
add ['ecx,', '0C2h']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1O@ILAJHGN@?$AAc?$AAs?$AA0?$AA?$DM?$AA1?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['1']
movzx ['eax,', '[ebp+var_B5]']
push ['eax']
lea ['ecx,', '[ebp+var_100]']
push ['ecx']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
movsx ['eax,', '[ebp+var_F1]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['?MBCS_FROM_UCHAR32_ISO2022@@YAHPAUUConverterSharedData@@HPAICH@Z']
add ['esp,', '14h']
mov ['[ebp+var_10C],', 'eax']
cmp ['[ebp+var_10C],', '2']
jz ['short', 'loc_8CE4']
cmp ['[ebp+var_10C],', '0FFFFFFFEh']
jnz ['short', 'loc_8D16']
cmp ['[ebp+var_88],', '0']
jnz ['short', 'loc_8D16']
mov ['eax,', '[ebp+var_100]']
mov ['[ebp+var_AC],', 'eax']
mov ['eax,', '[ebp+var_10C]']
mov ['[ebp+var_88],', 'eax']
mov ['al,', '[ebp+var_F1]']
mov ['[ebp+var_D9],', 'al']
mov ['[ebp+var_E5],', '1']
mov ['[ebp+var_B5],', '0']
jmp ['loc_8B27']
cmp ['[ebp+var_88],', '0']
jz ['loc_8F79']
mov ['[ebp+var_88],', '0']
movsx ['eax,', '[ebp+var_D9]']
movsx ['ecx,', '[ebp+var_E5]']
mov ['edx,', '[ebp+Dst]']
movsx ['ecx,', 'byte', 'ptr', '[edx+ecx]']
cmp ['eax,', 'ecx']
jz ['loc_8E3F']
movsx ['eax,', '[ebp+var_D9]']
cmp ['eax,', '3']
jge ['short', 'loc_8D9A']
push ['1']
movsx ['eax,', '[ebp+var_D9]']
mov ['ecx,', 'ds:_escSeqCharsCN[eax*4]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['4']
movsx ['edx,', '[ebp+var_D9]']
mov ['eax,', 'ds:_escSeqCharsCN[edx*4]']
push ['eax']
mov ['[ebp+var_1ED],', '1']
lea ['ecx,', '[ebp+var_7C]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_8E0C']
movsx ['eax,', '[ebp+var_D9]']
cmp ['eax,', '21h']
jge ['short', 'loc_8DCF']
mov ['ecx,', 'ds:?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2']
add ['ecx,', '0DCh']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1CE@NGCDFDBE@?$AAc?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAC?$AAN?$AAS?$AA_?$AA1?$AA1?$AA6?$AA4?$AA3?$AA_?$AA1?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['1']
movsx ['eax,', '[ebp+var_D9]']
mov ['ecx,', 'ds:Src[eax*4]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['4']
movsx ['edx,', '[ebp+var_D9]']
mov ['eax,', 'ds:Src[edx*4]']
push ['eax']
mov ['[ebp+var_1ED],', '1']
lea ['ecx,', '[ebp+var_7C]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_88],', '4']
movsx ['eax,', '[ebp+var_E5]']
mov ['ecx,', '[ebp+Dst]']
mov ['dl,', '[ebp+var_D9]']
mov ['[ecx+eax],', 'dl']
movsx ['eax,', '[ebp+var_E5]']
cmp ['eax,', '1']
jnz ['short', 'loc_8E3F']
mov ['[ebp+var_A0],', '0']
movsx ['eax,', '[ebp+var_E5]']
mov ['ecx,', '[ebp+Dst]']
movsx ['edx,', 'byte', 'ptr', '[ecx+4]']
cmp ['eax,', 'edx']
jz ['loc_8F28']
mov ['al,', '[ebp+var_E5]']
mov ['[ebp+var_1F8],', 'al']
cmp ['[ebp+var_1F8],', '1']
jz ['short', 'loc_8E75']
cmp ['[ebp+var_1F8],', '2']
jz ['short', 'loc_8EA2']
jmp ['short', 'loc_8EE6']
mov ['[ebp+var_1ED],', '1']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+eax+var_7C],', '0Eh']
mov ['ecx,', '[ebp+var_88]']
add ['ecx,', '1']
mov ['[ebp+var_88],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+4],', '1']
jmp ['loc_8F28']
mov ['[ebp+var_1ED],', '1']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+eax+var_7C],', '1Bh']
mov ['ecx,', '[ebp+var_88]']
add ['ecx,', '1']
mov ['[ebp+var_88],', 'ecx']
mov ['[ebp+var_1ED],', '1']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+eax+var_7C],', '4Eh']
mov ['ecx,', '[ebp+var_88]']
add ['ecx,', '1']
mov ['[ebp+var_88],', 'ecx']
jmp ['short', 'loc_8F28']
mov ['[ebp+var_1ED],', '1']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+eax+var_7C],', '1Bh']
mov ['ecx,', '[ebp+var_88]']
add ['ecx,', '1']
mov ['[ebp+var_88],', 'ecx']
mov ['[ebp+var_1ED],', '1']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+eax+var_7C],', '4Fh']
mov ['ecx,', '[ebp+var_88]']
add ['ecx,', '1']
mov ['[ebp+var_88],', 'ecx']
mov ['eax,', '[ebp+var_AC]']
shr ['eax,', '8']
mov ['[ebp+var_1ED],', '1']
mov ['ecx,', '[ebp+var_88]']
mov ['[ebp+ecx+var_7C],', 'al']
mov ['edx,', '[ebp+var_88]']
add ['edx,', '1']
mov ['[ebp+var_88],', 'edx']
mov ['[ebp+var_1ED],', '1']
mov ['eax,', '[ebp+var_88]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_AC]']
mov ['[ebp+eax+var_7C],', 'cl']
mov ['edx,', '[ebp+var_88]']
add ['edx,', '1']
mov ['[ebp+var_88],', 'edx']
jmp ['short', 'loc_8F90']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+38h],', 'ecx']
jmp ['loc_90EB']
cmp ['[ebp+var_88],', '1']
jnz ['short', 'loc_8FD1']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_7C]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
cmp ['[ebp+var_60],', '0']
jz ['short', 'loc_8FCC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_60]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_60]']
add ['eax,', '4']
mov ['[ebp+var_60],', 'eax']
jmp ['loc_90D9']
cmp ['[ebp+var_88],', '2']
jnz ['loc_9077']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '2']
cmp ['eax,', '[ebp+var_3C]']
ja ['loc_9077']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_7C]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
cmp ['[ebp+var_1ED],', '0']
jnz ['short', 'loc_9014']
push ['offset', '$LN81']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_7B]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
cmp ['[ebp+var_60],', '0']
jz ['short', 'loc_9075']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
mov ['edx,', '0FFFFh']
cmp ['edx,', '[ebp+var_6C]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['[ebp+var_118],', 'ecx']
mov ['eax,', '[ebp+var_60]']
mov ['ecx,', '[ebp+var_118]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_60]']
add ['edx,', '4']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+var_60]']
mov ['ecx,', '[ebp+var_118]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_60]']
add ['edx,', '4']
mov ['[ebp+var_60],', 'edx']
jmp ['short', 'loc_90D9']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_48]']
sub ['edx,', '[ecx+8]']
sar ['edx,', '1']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_6C]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
sub ['edx,', 'ecx']
push ['edx']
lea ['edx,', '[ebp+var_60]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_88]']
push ['edx']
mov ['[ebp+var_1ED],', '1']
lea ['eax,', '[ebp+var_7C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_90D9']
jmp ['short', 'loc_90EB']
jmp ['short', 'loc_90E6']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_90EB']
jmp ['loc_889E']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_91F2']
mov ['eax,', '[ebp+Dst]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jz ['loc_91F2']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['loc_91F2']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_54]']
jb ['loc_91F2']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jnz ['loc_91F2']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '[eax+8]']
sar ['ecx,', '1']
mov ['[ebp+var_124],', 'ecx']
cmp ['[ebp+var_124],', '0']
jle ['short', 'loc_91BE']
mov ['eax,', '[ebp+var_124]']
sub ['eax,', '1']
mov ['[ebp+var_124],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_124]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_91BC']
cmp ['[ebp+var_124],', '0']
jz ['short', 'loc_91AD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_124]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2-2]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_91BC']
mov ['eax,', '[ebp+var_124]']
sub ['eax,', '1']
mov ['[ebp+var_124],', 'eax']
jmp ['short', 'loc_91C8']
mov ['[ebp+var_124],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_124]']
push ['ecx']
lea ['edx,', '[ebp+var_60]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
push ['1']
push ['offset', '_SHIFT_IN_STR']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['?fromUWriteUInt8@@YAXPAUUConverter@@PBDHPAPAE1PAPAHHPAW4UErrorCode@@@Z']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax+10h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN87_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1F8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN86_0']
dd ['offset', '$LN81']
dd ['0FFFFFFD0h,', '4']
dd ['offset', '$LN82']
dd ['0FFFFFFA0h,', '4']
dd ['offset', '$LN83']
dd ['0FFFFFF6Ch,', '3']
dd ['offset', '$LN84']
dd ['0FFFFFF00h,', '4']
dd ['offset', '$LN85_0']
assume ['cs:_rdata']
public ['??_C@_1CE@NGCDFDBE@?$AAc?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAC?$AAN?$AAS?$AA_?$AA1?$AA1?$AA6?$AA4?$AA3?$AA_?$AA1?$AA?$AA@']
unicode ['0,', '<cs', '>']
dw ['3Eh']
unicode ['0,', '<=', 'CNS_11643_1>,0']
assume ['cs:_rdata']
public ['??_C@_1O@ILAJHGN@?$AAc?$AAs?$AA0?$AA?$DM?$AA1?$AA0?$AA?$AA@']
unicode ['0,', '<cs0>']
dw ['3Ch']
unicode ['0,', '<10>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\ucnv2022.cpp>,0']
align ['10h']
assume ['cs:_data']
public ['?__LINE__Var@?1??UConverter_fromUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterFromUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '184h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_184]']
mov ['ecx,', '61h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['[ebp+var_38],', '0']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '30h']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+var_50]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_93A5']
jmp ['$escape$38392']
jmp ['$escape$38392']
jmp ['short', 'loc_93EF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
cmp ['edx,', '1']
jnz ['short', 'loc_93EF']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_93EF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_93EF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+25h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
mov ['[ebp+var_38],', '0FFFFh']
jmp ['$getTrailByte$38396']
jmp ['$getTrailByte$38396']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['$endloop$38451']
mov ['[ebp+var_38],', '0FFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['loc_9930']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_184],', 'eax']
mov ['ecx,', '[ebp+var_184]']
sub ['ecx,', '0Ah']
mov ['[ebp+var_184],', 'ecx']
cmp ['[ebp+var_184],', '11h']
ja ['$LN24']
mov ['edx,', '[ebp+var_184]']
movzx ['eax,', 'ds:$LN48_0[edx]']
jmp ['ds:$LN53[eax*4]']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+var_50]']
movsx ['ecx,', 'byte', 'ptr', '[eax+44h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_94BB']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '12h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+100h],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+25h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
jmp ['loc_9952']
jmp ['loc_93EF']
mov ['eax,', '[ebp+Dst]']
movsx ['ecx,', 'byte', 'ptr', '[eax+1]']
test ['ecx,', 'ecx']
jz ['short', 'loc_94E0']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+4],', '1']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '1']
jmp ['loc_93EF']
jmp ['short', '$LN28_0']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '0']
jmp ['loc_97AB']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+24h]']
mov ['[ebp+var_71],', 'dl']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['3']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?changeState_2022@@YAXPAUUConverter@@PAPBDPBDW4Variant2022@@PAW4UErrorCode@@@Z']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_50]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jnz ['short', 'loc_957B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_957B']
mov ['eax,', '[ebp+var_50]']
movsx ['ecx,', 'byte', 'ptr', '[eax+44h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_957B']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '12h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+100h],', '2']
movsx ['eax,', '[ebp+var_71]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[ebp+var_68]']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
mov ['[ecx+24h],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_95AE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '0']
jmp ['loc_9952']
jmp ['loc_93EF']
push ['6']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+44h],', '0']
mov ['eax,', '[ebp+Dst]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jz ['loc_979E']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_977C']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax]']
mov ['[ebp+var_B9],', 'cl']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Dh']
setle ['dl']
mov ['[ebp+var_A4],', 'edx']
movzx ['eax,', '[ebp+var_B9]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Dh']
setle ['dl']
mov ['[ebp+var_B0],', 'edx']
cmp ['[ebp+var_A4],', '0']
jz ['loc_9718']
cmp ['[ebp+var_B0],', '0']
jz ['loc_9718']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+Dst]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
mov ['edx,', '[ebp+Dst]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['[ebp+var_8C],', 'eax']
cmp ['[ebp+var_8C],', '20h']
jl ['short', 'loc_9692']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_80],', 'ecx']
mov ['eax,', '[ebp+var_8C]']
add ['eax,', '60h']
mov ['[ebp+var_8],', 'al']
mov ['al,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ebp+var_7],', 'al']
mov ['al,', '[ebp+var_B9]']
mov ['[ebp+var_6],', 'al']
mov ['[ebp+var_98],', '3']
jmp ['short', 'loc_96E8']
cmp ['[ebp+var_8C],', '0Ah']
jl ['short', 'loc_96C0']
mov ['eax,', 'ds:?__LINE__Var@?1??UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2']
add ['eax,', '7Fh']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FO@NKNFLGG@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1BK@ENOKOAEN@?$AAt?$AAe?$AAm?$AAp?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$DM?$AA1?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8C]']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_80],', 'edx']
mov ['al,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ebp+var_8],', 'al']
mov ['al,', '[ebp+var_B9]']
mov ['[ebp+var_7],', 'al']
mov ['[ebp+var_98],', '2']
push ['0']
mov ['eax,', '[ebp+var_98]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_80]']
push ['edx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '8']
movzx ['ecx,', '[ebp+var_B9]']
or ['eax,', 'ecx']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_9762']
cmp ['[ebp+var_B0],', '0']
jnz ['short', 'loc_9762']
movzx ['eax,', '[ebp+var_B9]']
cmp ['eax,', '20h']
jge ['short', 'loc_9742']
movzx ['ecx,', '[ebp+var_B9]']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '800C000h']
jnz ['short', 'loc_9762']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '8']
or ['eax,', '10000h']
movzx ['ecx,', '[ebp+var_B9]']
or ['eax,', 'ecx']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+Dst]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
cmp ['ecx,', '2']
jl ['short', 'loc_977A']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Dst]']
mov ['dl,', '[ecx+5]']
mov ['[eax+4],', 'dl']
jmp ['short', 'loc_979C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+25h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
jmp ['$endloop$38451']
jmp ['$endloop$38451']
jmp ['short', 'loc_97AB']
cmp ['[ebp+var_44],', '7Fh']
ja ['short', 'loc_97AB']
movzx ['eax,', 'word', 'ptr', '[ebp+var_44]']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0FFFEh']
jnb ['short', 'loc_9803']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_97EB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['edx,', '0FFh']
cmp ['edx,', '[ebp+var_44]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', 'word', 'ptr', '[ebp+var_38]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
jmp ['loc_992E']
cmp ['[ebp+var_38],', '0FFFFh']
jbe ['loc_9911']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '10000h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
shr ['eax,', '0Ah']
movzx ['ecx,', 'ax']
add ['ecx,', '0D800h']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_9867']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['edx,', '0FFh']
cmp ['edx,', '[ebp+var_44]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_98D4']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3FFh']
movzx ['ecx,', 'ax']
add ['ecx,', '0DC00h']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_98C9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['edx,', '0FFh']
cmp ['edx,', '[ebp+var_44]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_990F']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3FFh']
movzx ['ecx,', 'ax']
add ['ecx,', '0DC00h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[edx+41h]']
mov ['[eax+edx*2+74h],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ecx+41h]']
add ['dl,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ecx+41h],', 'dl']
jmp ['short', 'loc_992E']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?toUnicodeCallback@@YAXPAUUConverter@@IIPAW4UErrorCode@@@Z']
add ['esp,', '10h']
jmp ['short', '$endloop$38451']
jmp ['short', 'loc_993B']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', '$endloop$38451']
jmp ['loc_93EF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN52_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '184h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN51']
dd ['offset', '$LN49_0']
dd ['0FFFFFFECh,', '4']
dd ['offset', '$LN50_1']
align ['4']
dd ['offset', '$LN31_0']
dd ['offset', '$LN33']
dd ['offset', '$LN28_0']
dd ['offset', '$LN24']
db ['1,', '2,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '3']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1BK@ENOKOAEN@?$AAt?$AAe?$AAm?$AAp?$AAS?$AAt?$AAa?$AAt?$AAe?$AA?$DM?$AA1?$AA0?$AA?$AA@']
unicode ['0,', '<tempState>']
dw ['3Ch']
unicode ['0,', '<10>,0']
align ['10h']
assume ['cs:_data']
public ['?__LINE__Var@?1??UConverter_toUnicode_ISO_2022_CN_OFFSETS_LOGIC@@YAXPAUUConverterToUnicodeArgs@@PAW4UErrorCode@@@Z@4JA@d3633fb2']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_ISO_2022_WriteSub@@YAXPAUUConverterFromUnicodeArgs@@HPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '144h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_144]']
mov ['ecx,', '51h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '36h']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Dh]']
mov ['[ebp+var_58],', 'ecx']
lea ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['cl,', '[eax+63h]']
mov ['[ebp+var_144],', 'cl']
cmp ['[ebp+var_144],', '63h']
jz ['loc_9B0A']
cmp ['[ebp+var_144],', '6Ah']
jz ['short', 'loc_9A84']
cmp ['[ebp+var_144],', '6Bh']
jz ['loc_9B43']
jmp ['loc_9CE6']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
cmp ['ecx,', '1']
jnz ['short', 'loc_9AA6']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '0Fh']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_24]']
mov ['cl,', '[eax]']
mov ['[ebp+var_61],', 'cl']
movsx ['eax,', '[ebp+var_61]']
test ['eax,', 'eax']
jz ['short', 'loc_9AF2']
movsx ['eax,', '[ebp+var_61]']
cmp ['eax,', '3']
jz ['short', 'loc_9AF2']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '1Bh']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '28h']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '42h']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_3C]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
jmp ['loc_9CE6']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jz ['short', 'loc_9B2B']
mov ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '0Fh']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_3C]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
jmp ['loc_9CE6']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['loc_9BF0']
cmp ['[ebp+var_58],', '1']
jnz ['short', 'loc_9B95']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+34h]']
test ['edx,', 'edx']
jz ['short', 'loc_9B80']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+34h],', '0']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '0Fh']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_3C]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
jmp ['short', 'loc_9BE6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+34h]']
test ['edx,', 'edx']
jnz ['short', 'loc_9BBF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+34h],', '1']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '0Eh']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_3C]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_3C]']
mov ['dl,', '[ecx+1]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
jmp ['loc_9CE6']
jmp ['loc_9CE6']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_70],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['dl,', '[ecx+3Dh]']
mov ['[ebp+var_79],', 'dl']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_3C]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_58]']
mov ['[ecx+3Dh],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+28h]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+38h]']
mov ['[ecx+38h],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_cbFromUWriteSub_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ecx+38h]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_70]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['dl,', '[ebp+var_79]']
mov ['[ecx+3Dh],', 'dl']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_9CE4']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
movsx ['edx,', 'byte', 'ptr', '[ecx+3Fh]']
test ['edx,', 'edx']
jle ['short', 'loc_9CCB']
push ['1']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
add ['ecx,', '4Ch']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+28h]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Fh]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+28h]']
add ['eax,', '4Ch']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '4Ch']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_C]']
mov ['al,', '[ecx+3Fh]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
mov ['byte', 'ptr', '[ecx+3Fh],', '0']
jmp ['short', 'loc_9D07']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
lea ['eax,', '[ebp+var_4C]']
sub ['edx,', 'eax']
push ['edx']
lea ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_cbFromUWriteBytes_56']
add ['esp,', '14h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '144h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN21_1']
dd ['offset', '$LN20_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_ISO_2022_SafeClone@@YAPAUUConverter@@PBU1@PAXPAHPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_9D8A']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '278h']
xor ['eax,', 'eax']
jmp ['loc_9E62']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+Src],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['68h']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '210h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '210h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+22h],', '1']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jz ['short', 'loc_9E27']
mov ['[ebp+var_2C],', '10Ch']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '104h']
push ['edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['_ucnv_safeClone_56']
add ['esp,', '10h']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+238h],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_9E27']
xor ['eax,', 'eax']
jmp ['short', 'loc_9E62']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_9E39']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0Ah']
jge ['short', 'loc_9E5F']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jz ['short', 'loc_9E5D']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_ucnv_incrementRefCount_56']
add ['esp,', '4']
jmp ['short', 'loc_9E30']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11']
dd ['offset', '$LN10']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_ISO_2022_GetUnicodeSet@@YAXPBUUConverter@@PBUUSetAdder@@W4UConverterUnicodeSet@@PAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_9EDC']
jmp ['loc_A16E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+63h]']
mov ['[ebp+var_E8],', 'ecx']
mov ['edx,', '[ebp+var_E8]']
sub ['edx,', '63h']
mov ['[ebp+var_E8],', 'edx']
cmp ['[ebp+var_E8],', '17h']
ja ['$LN20_1']
mov ['eax,', '[ebp+var_E8]']
movzx ['ecx,', 'ds:$LN25_1[eax]']
jmp ['ds:$LN26[ecx*4]']
mov ['esi,', 'esp']
push ['0A5h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['203Eh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+40h]']
movzx ['edx,', 'ds:_jpCharsetMasks[ecx*2]']
and ['edx,', '2']
jz ['short', 'loc_9F96']
mov ['esi,', 'esp']
push ['0FFh']
push ['0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_9FB4']
mov ['esi,', 'esp']
push ['7Fh']
push ['0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '3']
jz ['short', 'loc_9FCC']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '4']
jz ['short', 'loc_9FCC']
cmp ['[ebp+arg_8],', '1']
jnz ['short', 'loc_9FF0']
mov ['esi,', 'esp']
push ['0FF9Fh']
push ['0FF61h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', '$LN20_1']
mov ['esi,', 'esp']
push ['7Fh']
push ['0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', '$LN20_1']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+28h]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+3Ch]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_A054']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0Ah']
jge ['loc_A0F6']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jz ['loc_A0F1']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+63h]']
cmp ['ecx,', '6Ah']
jnz ['short', 'loc_A089']
cmp ['[ebp+var_8],', '4']
jnz ['short', 'loc_A089']
mov ['[ebp+var_20],', '3']
jmp ['short', 'loc_A0CF']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+63h]']
cmp ['ecx,', '63h']
jz ['short', 'loc_A0A1']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+63h]']
cmp ['ecx,', '7Ah']
jnz ['short', 'loc_A0B9']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', 'loc_A0B9']
cmp ['[ebp+var_8],', '3']
jnz ['short', 'loc_A0B9']
mov ['[ebp+var_20],', '2']
jmp ['short', 'loc_A0CF']
cmp ['[ebp+var_8],', '7']
jnz ['short', 'loc_A0C8']
mov ['[ebp+var_20],', '4']
jmp ['short', 'loc_A0CF']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+ecx*4]']
push ['eax']
call ['_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56']
add ['esp,', '14h']
jmp ['loc_A04B']
mov ['esi,', 'esp']
push ['0Eh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0Fh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['1Bh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['9Fh']
push ['80h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19_0']
dd ['offset', '$LN13']
dd ['offset', '$LN20_1']
db ['3,', '3,', '3,', '1']
db ['2,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '0']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+14h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_A296']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['short', 'loc_A2A2']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '4']
mov ['[ebp+var_D0],', 'eax']
mov ['eax,', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['??_7type_info@@6B@:near']
extrn ['?getDynamicClassID@UObject@icu_56@@UBEPAXXZ:near']
extrn ['??3UMemory@icu_56@@SAXPAX@Z:near']
extrn ['??1UObject@icu_56@@UAE@XZ:near']
extrn ['__RTC_CheckEsp:near']
extrn ['??_VUMemory@icu_56@@SAXPAX@Z:near']
extrn ['??_M@YGXPAXIHP6EX0@Z@Z:near']
extrn ['__purecall:near']
extrn ['?hasMetaData@Replaceable@icu_56@@UBECXZ:near']
extrn ['?clone@Replaceable@icu_56@@UBEPAV12@XZ:near']
extrn ['??1Replaceable@icu_56@@UAE@XZ:near']
extrn ['??0StringPiece@icu_56@@QAE@ABV01@HH@Z:near']
extrn ['?GetAppendBuffer@ByteSink@icu_56@@UAEPADHHPADHPAH@Z:near']
extrn ['?Flush@ByteSink@icu_56@@UAEXXZ:near']
extrn ['??1ByteSink@icu_56@@UAE@XZ:near']
extrn ['?moveFrom@UnicodeString@icu_56@@QAEAAV12@AAV12@@Z:near']
extrn ['?swap@UnicodeString@icu_56@@QAEXAAV12@@Z:near']
extrn ['??1UnicodeString@icu_56@@UAE@XZ:near']
extrn ['?getDynamicClassID@UnicodeString@icu_56@@UBEPAXXZ:near']
extrn ['?extractBetween@UnicodeString@icu_56@@UBEXHHAAV12@@Z:near']
extrn ['?handleReplaceBetween@UnicodeString@icu_56@@UAEXHHABV12@@Z:near']
extrn ['?copy@UnicodeString@icu_56@@UAEXHHH@Z:near']
extrn ['?hasMetaData@UnicodeString@icu_56@@UBECXZ:near']
extrn ['?clone@UnicodeString@icu_56@@UBEPAVReplaceable@2@XZ:near']
extrn ['?getLength@UnicodeString@icu_56@@MBEHXZ:near']
extrn ['?getCharAt@UnicodeString@icu_56@@MBE_WH@Z:near']
extrn ['?getChar32At@UnicodeString@icu_56@@MBEHH@Z:near']
extrn ['?doHashCode@UnicodeString@icu_56@@ABEHXZ:near']
extrn ['?refCount@UnicodeString@icu_56@@ABEHXZ:near']
extrn ['?doCompare@UnicodeString@icu_56@@ABECHHPB_WHH@Z:near']
extrn ['?doEquals@UnicodeString@icu_56@@ABECABV12@H@Z:near']
extrn ['?doCompareCodePointOrder@UnicodeString@icu_56@@ABECHHPB_WHH@Z:near']
extrn ['?doCaseCompare@UnicodeString@icu_56@@ABECHHPB_WHHI@Z:near']
extrn ['?indexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z:near']
extrn ['?doIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z:near']
extrn ['?doIndexOf@UnicodeString@icu_56@@ABEHHHH@Z:near']
extrn ['?lastIndexOf@UnicodeString@icu_56@@QBEHPB_WHHHH@Z:near']
extrn ['?doLastIndexOf@UnicodeString@icu_56@@ABEH_WHH@Z:near']
extrn ['?doLastIndexOf@UnicodeString@icu_56@@ABEHHHH@Z:near']
extrn ['_u_strlen_56:near']
extrn ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHABV12@HH@Z:near']
extrn ['?doReplace@UnicodeString@icu_56@@AAEAAV12@HHPB_WHH@Z:near']
extrn ['?findAndReplace@UnicodeString@icu_56@@QAEAAV12@HHABV12@HH0HH@Z:near']
extrn ['?doExtract@UnicodeString@icu_56@@ABEXHHPA_WH@Z:near']
extrn ['?extract@UnicodeString@icu_56@@QBEHHHPADIPBD@Z:near']
extrn ['?tempSubString@UnicodeString@icu_56@@QBE?AV12@HH@Z:near']
extrn ['?replace@UnicodeString@icu_56@@QAEAAV12@HHH@Z:near']
extrn ['?unBogus@UnicodeString@icu_56@@AAEXXZ:near']
extrn ['?copyFrom@UnicodeString@icu_56@@AAEAAV12@ABV12@C@Z:near']
extrn ['?doAppend@UnicodeString@icu_56@@AAEAAV12@ABV12@HH@Z:near']
extrn ['?doAppend@UnicodeString@icu_56@@AAEAAV12@PB_WHH@Z:near']
extrn ['?append@UnicodeString@icu_56@@QAEAAV12@H@Z:near']
extrn ['?doReverse@UnicodeString@icu_56@@AAEAAV12@HH@Z:near']
extrn ['??0UnicodeString@icu_56@@QAE@ABV01@@Z:near']
extrn ['___security_cookie:near']
extrn ['___CxxFrameHandler3:near']
extrn ['@__security_check_cookie@4:near']
extrn ['?clone@StringEnumeration@icu_56@@UBEPAV12@XZ:near']
extrn ['?next@StringEnumeration@icu_56@@UAEPBDPAHAAW4UErrorCode@@@Z:near']
extrn ['?unext@StringEnumeration@icu_56@@UAEPB_WPAHAAW4UErrorCode@@@Z:near']
extrn ['?snext@StringEnumeration@icu_56@@UAEPBVUnicodeString@2@AAW4UErrorCode@@@Z:near']
extrn ['??8StringEnumeration@icu_56@@UBECABV01@@Z:near']
extrn ['??9StringEnumeration@icu_56@@UBECABV01@@Z:near']
extrn ['??4UnicodeString@icu_56@@QAEAAV01@ABV01@@Z:near']
extrn ['??1StringEnumeration@icu_56@@UAE@XZ:near']
extrn ['_memcpy:near']
extrn ['_ucnv_open_56:near']
extrn ['_uprv_free_56:near']
extrn ['_ucnv_canCreateConverter_56:near']
extrn ['_strlen:near']
extrn ['_strcpy:near']
extrn ['_ucnv_loadSharedData_56:near']
extrn ['__imp__strncpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_memset:near']
extrn ['_uprv_malloc_56:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_ucnv_close_56:near']
extrn ['_ucnv_unloadSharedDataIfReady_56:near']
extrn ['_ucnv_fromUWriteBytes_56:near']
extrn ['_ucnv_extSimpleMatchFromU_56:near']
extrn ['_ucnv_MBCSSimpleGetNextUChar_56:near']
extrn ['_ucnv_MBCSFromUnicodeWithOffsets_56:near']
extrn ['_ucnv_MBCSToUnicodeWithOffsets_56:near']
extrn ['__imp___wassert:near']
extrn ['__RTC_UninitUse:near']
extrn ['_ucnv_cbFromUWriteBytes_56:near']
extrn ['_ucnv_cbFromUWriteSub_56:near']
extrn ['_ucnv_incrementRefCount_56:near']
extrn ['_ucnv_safeClone_56:near']
extrn ['_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56:near']
end
