endp
_uscript_openRun_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_BB']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_BF']
xor ['eax,', 'eax']
jmp ['short', 'loc_118']
push ['120h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_E2']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['short', 'loc_118']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_uscript_setRunText_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_115']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uscript_closeRun_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_164']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uscript_resetRun_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1E1']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+114h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+118h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+11Ch],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uscript_setRunText_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_214']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_216']
jmp ['short', 'loc_260']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_238']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_238']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0']
setz ['al']
xor ['ecx,', 'ecx']
cmp ['[ebp+arg_8],', '0']
setz ['cl']
cmp ['eax,', 'ecx']
jz ['short', 'loc_243']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_260']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uscript_resetRun_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uscript_nextRun_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2AC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx]']
jl ['short', 'loc_2B3']
xor ['al,', 'al']
jmp ['loc_4E2']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+11Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
jmp ['short', 'loc_2E7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx]']
jge ['loc_4AD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['cx,', '[eax+ecx*2]']
mov ['[ebp+var_14],', 'cx']
movzx ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '0D800h']
jl ['short', 'loc_38D']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '0DBFFh']
jg ['short', 'loc_38D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['[edx+0Ch],', 'ecx']
jge ['short', 'loc_38D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['cx,', '[eax+ecx*2+2]']
mov ['[ebp+var_44],', 'cx']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '0DC00h']
jl ['short', 'loc_38D']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '0DFFFh']
jg ['short', 'loc_38D']
movzx ['eax,', '[ebp+var_14]']
sub ['eax,', '0D800h']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_44]']
lea ['edx,', '[eax+ecx+2400h]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_uscript_getScript_56']
add ['esp,', '8']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_getPairIndex']
add ['esp,', '4']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jl ['short', 'loc_42D']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '1']
jnz ['short', 'loc_3D6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_push']
add ['esp,', '0Ch']
jmp ['short', 'loc_42D']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '0FFFFFFFEh']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+118h],', '0']
jle ['short', 'loc_40E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*8+14h]']
cmp ['eax,', '[ebp+var_50]']
jz ['short', 'loc_40E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_pop']
add ['esp,', '4']
jmp ['short', 'loc_3DF']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+118h],', '0']
jle ['short', 'loc_42D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*8+18h]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_sameScript']
add ['esp,', '8']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_48E']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+10h],', '1']
jg ['short', 'loc_472']
cmp ['[ebp+var_2C],', '1']
jle ['short', 'loc_472']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_fixup']
add ['esp,', '8']
cmp ['[ebp+var_38],', '0']
jl ['short', 'loc_48C']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '1']
jz ['short', 'loc_48C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_pop']
add ['esp,', '4']
jmp ['short', 'loc_4A8']
cmp ['[ebp+var_20],', '10000h']
jl ['short', 'loc_4A6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
jmp ['short', 'loc_4AD']
jmp ['loc_2D8']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_4BE']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_4CF']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_4E0']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[eax],', 'edx']
mov ['al,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN25']
dd ['offset', '$LN24']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_push		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+118h],', '20h']
jge ['short', 'loc_562']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+118h]']
add ['edx,', '1']
mov ['[ebp+var_C4],', 'edx']
jmp ['short', 'loc_56C']
mov ['[ebp+var_C4],', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C4]']
mov ['[eax+118h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+11Ch],', '20h']
jge ['short', 'loc_59B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+11Ch]']
add ['edx,', '1']
mov ['[ebp+var_C4],', 'edx']
jmp ['short', 'loc_5A5']
mov ['[ebp+var_C4],', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C4]']
mov ['[eax+11Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
add ['ecx,', '1']
and ['ecx,', '8000001Fh']
jns ['short', 'loc_5CD']
dec ['ecx']
or ['ecx,', '0FFFFFFE0h']
inc ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+114h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+ecx*8+14h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+ecx*8+18h],', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_pop		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+118h],', '0']
jg ['short', 'loc_630']
jmp ['short', 'loc_6A1']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+11Ch],', '0']
jle ['short', 'loc_651']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+11Ch]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+11Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+118h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+118h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
add ['ecx,', '1Fh']
and ['ecx,', '8000001Fh']
jns ['short', 'loc_67F']
dec ['ecx']
or ['ecx,', '0FFFFFFE0h']
inc ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+114h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+118h],', '0']
jg ['short', 'loc_6A1']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+114h],', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_fixup		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
add ['ecx,', '20h']
mov ['edx,', '[ebp+arg_0]']
sub ['ecx,', '[edx+11Ch]']
and ['ecx,', '8000001Fh']
jns ['short', 'loc_6E8']
dec ['ecx']
or ['ecx,', '0FFFFFFE0h']
inc ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+11Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+11Ch]']
sub ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+11Ch],', 'eax']
test ['ecx,', 'ecx']
jle ['short', 'loc_719']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_723']
mov ['[ebp+var_D0],', '0']
cmp ['[ebp+var_D0],', '0']
jz ['short', 'loc_750']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
and ['eax,', '8000001Fh']
jns ['short', 'loc_73E']
dec ['eax']
or ['eax,', '0FFFFFFE0h']
inc ['eax']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+eax*8+18h],', 'edx']
jmp ['short', 'loc_6EB']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_getPairIndex	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '22h']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_highBit']
add ['esp,', '4']
movsx ['ecx,', 'al']
mov ['edx,', '1']
shl ['edx,', 'cl']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '_pairedChars[eax*4]']
jl ['short', 'loc_7C1']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_2C],', '1']
jle ['short', 'loc_7EC']
mov ['eax,', '[ebp+var_2C]']
sar ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '_pairedChars[eax*4]']
jl ['short', 'loc_7EA']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_7C1']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '_pairedChars[eax*4]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_802']
mov ['[ebp+var_38],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_38]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_highBit	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_5],', '0']
cmp ['[ebp+arg_0],', '0']
jg ['short', 'loc_848']
mov ['al,', '0E0h']
jmp ['short', 'loc_8C5']
cmp ['[ebp+arg_0],', '10000h']
jl ['short', 'loc_864']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '10h']
mov ['[ebp+arg_0],', 'eax']
movsx ['eax,', '[ebp+var_5]']
add ['eax,', '10h']
mov ['[ebp+var_5],', 'al']
cmp ['[ebp+arg_0],', '100h']
jl ['short', 'loc_880']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '8']
mov ['[ebp+arg_0],', 'eax']
movsx ['eax,', '[ebp+var_5]']
add ['eax,', '8']
mov ['[ebp+var_5],', 'al']
cmp ['[ebp+arg_0],', '10h']
jl ['short', 'loc_899']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
movsx ['eax,', '[ebp+var_5]']
add ['eax,', '4']
mov ['[ebp+var_5],', 'al']
cmp ['[ebp+arg_0],', '4']
jl ['short', 'loc_8B2']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
movsx ['eax,', '[ebp+var_5]']
add ['eax,', '2']
mov ['[ebp+var_5],', 'al']
cmp ['[ebp+arg_0],', '2']
jl ['short', 'loc_8C2']
movsx ['eax,', '[ebp+var_5]']
add ['eax,', '1']
mov ['[ebp+var_5],', 'al']
mov ['al,', '[ebp+var_5]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_sameScript	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '1']
jle ['short', 'loc_90A']
cmp ['[ebp+arg_4],', '1']
jle ['short', 'loc_90A']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_90A']
mov ['[ebp+var_C4],', '0']
jmp ['short', 'loc_914']
mov ['[ebp+var_C4],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_C4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['_uprv_free_56:near']
extrn ['_uprv_malloc_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_uscript_getScript_56:near']
extrn ['@_RTC_CheckStackVars@8:near']
end
