endp
_ucnv_getCompleteUnicodeSet_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
push ['10FFFFh']
push ['0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getNonSurrogateUnicodeSet_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
push ['0D7FFh']
push ['0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['10FFFFh']
push ['0E000h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_fromUWriteBytes_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_10E']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_145']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_143']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_143']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_10E']
jmp ['short', 'loc_193']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_18B']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_18B']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_145']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1ED']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1E4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4Ch']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+arg_8]']
mov ['[eax+3Fh],', 'cl']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jg ['short', 'loc_1B9']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_toUWriteUChars_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_22E']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_267']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_265']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_265']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_22E']
jmp ['short', 'loc_2B7']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_2AF']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_2AF']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_267']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_313']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_30A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '74h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+arg_8]']
mov ['[eax+41h],', 'cl']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jg ['short', 'loc_2DD']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_toUWriteCodePoint_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['loc_40D']
cmp ['[ebp+arg_4],', '0FFFFh']
jg ['short', 'loc_373']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+arg_4],', '0FFFFFFFFh']
jmp ['short', 'loc_3C2']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
movzx ['ecx,', 'ax']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_3C2']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+arg_4],', '0FFFFFFFFh']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_40D']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_40D']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+var_8]']
jnb ['short', 'loc_405']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_49A']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_491']
mov ['[ebp+var_1D],', '0']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_448']
movsx ['eax,', '[ebp+var_1D]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[ecx+eax*2+74h],', 'dx']
mov ['al,', '[ebp+var_1D]']
add ['al,', '1']
mov ['[ebp+var_1D],', 'al']
jmp ['short', 'loc_488']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
movsx ['ecx,', '[ebp+var_1D]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2+74h],', 'ax']
mov ['al,', '[ebp+var_1D]']
add ['al,', '1']
mov ['[ebp+var_1D],', 'al']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
movsx ['ecx,', '[ebp+var_1D]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2+74h],', 'ax']
mov ['al,', '[ebp+var_1D]']
add ['al,', '1']
mov ['[ebp+var_1D],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_1D]']
mov ['[eax+41h],', 'cl']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0Fh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
end
