endp
_uprv_uint16Comparator_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[eax]']
mov ['ecx,', '[ebp+arg_8]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
sub ['eax,', 'edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_int32Comparator_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['eax,', '[eax]']
sub ['eax,', '[ecx]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_uint32Comparator_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jnb ['short', 'loc_A9']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_BC']
jmp ['short', 'loc_BC']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_B7']
xor ['eax,', 'eax']
jmp ['short', 'loc_BC']
jmp ['short', 'loc_BC']
mov ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_stableBinarySearch_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_11],', '0']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_8]']
cmp ['eax,', '9']
jl ['short', 'loc_156']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+arg_4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
call ['[ebp+arg_10]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_140']
mov ['[ebp+var_11],', '1']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_154']
cmp ['[ebp+var_2C],', '0']
jge ['short', 'loc_14E']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_154']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_ED']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_1A2']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
call ['[ebp+arg_10]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jnz ['short', 'loc_18F']
mov ['[ebp+var_11],', '1']
jmp ['short', 'loc_197']
cmp ['[ebp+var_38],', '0']
jge ['short', 'loc_197']
jmp ['short', 'loc_1A2']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_156']
movsx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jz ['short', 'loc_1B8']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_100],', 'ecx']
jmp ['short', 'loc_1C3']
mov ['edx,', '[ebp+var_8]']
not ['edx']
mov ['[ebp+var_100],', 'edx']
mov ['eax,', '[ebp+var_100]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_sortArray_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_18],', '0']
jz ['short', 'loc_20C']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_211']
jmp ['loc_294']
cmp ['[ebp+arg_4],', '0']
jle ['short', 'loc_21D']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_22F']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_22F']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_22F']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_23A']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_294']
cmp ['[ebp+arg_4],', '1']
jg ['short', 'loc_244']
jmp ['short', 'loc_294']
jmp ['short', 'loc_294']
cmp ['[ebp+arg_4],', '9']
jl ['short', 'loc_252']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['short', 'loc_274']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_insertionSort']
add ['esp,', '18h']
jmp ['short', 'loc_294']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_quickSort']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_insertionSort	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1A8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1A8]']
mov ['ecx,', '6Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_8],', '0C8h']
jg ['short', 'loc_2E7']
lea ['eax,', '[ebp+var_D8]']
mov ['[ebp+var_E4],', 'eax']
jmp ['short', 'loc_30D']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_E4],', 'eax']
cmp ['[ebp+var_E4],', '0']
jnz ['short', 'loc_30D']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['short', 'loc_34F']
mov ['eax,', '[ebp+var_E4]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_doInsertionSort']
add ['esp,', '18h']
mov ['eax,', '[ebp+var_E4]']
lea ['ecx,', '[ebp+var_D8]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_34F']
mov ['eax,', '[ebp+var_E4]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1A8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN8']
dd ['offset', '$LN7']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_doInsertionSort proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_3C8']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['loc_4B5']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_uprv_stableBinarySearch_56']
add ['esp,', '18h']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jge ['short', 'loc_414']
mov ['eax,', '[ebp+var_20]']
not ['eax']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_41D']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_8]']
jge ['loc_4B0']
mov ['eax,', '[ebp+var_20]']
imul ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_2C],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['1']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_20]']
imul ['ecx,', '[ebp+arg_8]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+arg_8]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['1']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['loc_3BF']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_quickSort	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '270h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_270]']
mov ['ecx,', '9Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_8],', '0C8h']
jg ['short', 'loc_50B']
lea ['eax,', '[ebp+var_1A0]']
mov ['[ebp+var_1AC],', 'eax']
jmp ['short', 'loc_533']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '1']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_1AC],', 'eax']
cmp ['[ebp+var_1AC],', '0']
jnz ['short', 'loc_533']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['short', 'loc_581']
mov ['eax,', '[ebp+var_1AC]']
add ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_1AC]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_subQuickSort']
add ['esp,', '20h']
mov ['eax,', '[ebp+var_1AC]']
lea ['ecx,', '[ebp+var_1A0]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_581']
mov ['eax,', '[ebp+var_1AC]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '270h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN8_0']
dd ['offset', '$LN7_0']
js ['short', 'loc_63D']
add ['bh,', 'bh']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_subQuickSort	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '9']
cmp ['eax,', '[ebp+arg_8]']
jl ['short', 'loc_620']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
imul ['edx,', '[ebp+arg_C]']
add ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_doInsertionSort']
add ['esp,', '18h']
jmp ['loc_82A']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
push ['1']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
imul ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
call ['[ebp+arg_10]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jge ['short', 'loc_69D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_66C']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
call ['[ebp+arg_10]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jge ['short', 'loc_6D1']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_69D']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jge ['loc_78B']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jge ['loc_782']
push ['1']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
imul ['edx,', '[ebp+arg_C]']
add ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['1']
mov ['eax,', '[ebp+var_14]']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
imul ['edx,', '[ebp+arg_C]']
add ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['1']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_1C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
imul ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jl ['loc_66C']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_8]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_7E2']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
cmp ['[ebp+arg_4],', 'eax']
jge ['short', 'loc_7DA']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_subQuickSort']
add ['esp,', '20h']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_81B']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
cmp ['[ebp+var_8],', 'eax']
jge ['short', 'loc_815']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_subQuickSort']
add ['esp,', '20h']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
cmp ['[ebp+arg_4],', 'eax']
jl ['loc_5E6']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_CheckEsp:near']
extrn ['_uprv_free_56:near']
extrn ['_uprv_malloc_56:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__imp__memmove:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
end
