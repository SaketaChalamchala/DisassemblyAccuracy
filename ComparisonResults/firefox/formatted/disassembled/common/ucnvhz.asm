endp
__HZOpen	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1D3']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_03LIOLIPAH@GBK?$AA@']
call ['_ucnv_canCreateConverter_56']
add ['esp,', '8']
jmp ['loc_256']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_03LIOLIPAH@GBK?$AA@']
call ['_ucnv_open_56']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1F1']
jmp ['short', 'loc_256']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+38h],', '0']
push ['10h']
push ['1']
call ['_uprv_calloc_56']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_241']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_256']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ucnv_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_03LIOLIPAH@GBK?$AA@']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__HZClose	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_2D4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_ucnv_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_2CA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__HZReset	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '1']
jg ['short', 'loc_33D']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_33D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['byte', 'ptr', '[ecx+0Dh],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['byte', 'ptr', '[ecx+0Fh],', '0']
cmp ['[ebp+arg_4],', '1']
jz ['short', 'loc_38E']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_38E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['byte', 'ptr', '[ecx+0Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['byte', 'ptr', '[ecx+0Eh],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_UConverter_toUnicode_HZ_OFFSETS_LOGIC proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '140h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_140]']
mov ['ecx,', '50h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['[ebp+var_38],', '0']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_7],', '0']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_818']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnb ['loc_808']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+30h],', '7Eh']
jnz ['loc_5F4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+30h],', '0']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_13C],', 'eax']
mov ['ecx,', '[ebp+var_13C]']
sub ['ecx,', '0Ah']
mov ['[ebp+var_13C],', 'ecx']
cmp ['[ebp+var_13C],', '74h']
ja ['$LN26']
mov ['edx,', '[ebp+var_13C]']
movzx ['eax,', 'ds:$LN49[edx]']
jmp ['ds:$LN53[eax*4]']
jmp ['loc_3F3']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_4A4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', 'word', 'ptr', '[ebp+var_44]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+0Fh],', '0']
jmp ['loc_3F3']
xor ['eax,', 'eax']
cmp ['[ebp+var_44],', '7Bh']
setz ['al']
mov ['ecx,', '[ebp+var_50]']
mov ['[ecx+0Dh],', 'al']
mov ['eax,', '[ebp+var_50]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_534']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+0Fh],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '12h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+100h],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+25h],', '7Eh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+26h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
jmp ['loc_82A']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+0Fh],', '1']
jmp ['loc_3F3']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+0Fh],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '12h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+25h],', '7Eh']
mov ['eax,', '[ebp+var_50]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_595']
cmp ['[ebp+var_44],', '21h']
jl ['short', 'loc_57D']
cmp ['[ebp+var_44],', '7Eh']
jg ['short', 'loc_57D']
mov ['[ebp+var_13C],', '1']
jmp ['short', 'loc_587']
mov ['[ebp+var_13C],', '0']
mov ['edx,', '[ebp+var_13C]']
mov ['[ebp+var_140],', 'edx']
jmp ['short', 'loc_5A4']
xor ['eax,', 'eax']
cmp ['[ebp+var_44],', '7Fh']
setle ['al']
mov ['[ebp+var_140],', 'eax']
cmp ['[ebp+var_140],', '0']
jz ['short', 'loc_5C2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_5D8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+26h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
jmp ['loc_82A']
jmp ['loc_751']
mov ['eax,', '[ebp+var_50]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['loc_713']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jnz ['short', 'loc_646']
cmp ['[ebp+var_44],', '7Eh']
jnz ['short', 'loc_624']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+30h],', '7Eh']
jmp ['short', 'loc_63C']
mov ['eax,', '[ebp+var_44]']
or ['eax,', '100h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+2Ch],', 'eax']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+0Fh],', '0']
jmp ['loc_3F3']
jmp ['loc_711']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+2Ch]']
and ['edx,', '0FFh']
mov ['[ebp+var_74],', 'edx']
mov ['[ebp+var_38],', '0FFFFh']
mov ['eax,', '[ebp+var_74]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Ch']
setle ['dl']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '21h']
movzx ['ecx,', 'al']
xor ['edx,', 'edx']
cmp ['ecx,', '5Dh']
setle ['dl']
mov ['[ebp+var_68],', 'edx']
cmp ['[ebp+var_5C],', '0']
jz ['short', 'loc_6DC']
cmp ['[ebp+var_68],', '0']
jz ['short', 'loc_6DC']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '80h']
mov ['[ebp+var_8],', 'al']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '80h']
mov ['[ebp+var_7],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+23h]']
push ['edx']
push ['2']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+18h]']
push ['eax']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_74]']
shl ['eax,', '8']
or ['eax,', '[ebp+var_44]']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_704']
cmp ['[ebp+var_68],', '0']
jz ['short', 'loc_6F3']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_74]']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_704']
mov ['eax,', '[ebp+var_74]']
shl ['eax,', '8']
or ['eax,', '10000h']
or ['eax,', '[ebp+var_44]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
jmp ['short', 'loc_751']
cmp ['[ebp+var_44],', '7Eh']
jnz ['short', 'loc_72D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+30h],', '7Eh']
jmp ['loc_3F3']
jmp ['short', 'loc_751']
cmp ['[ebp+var_44],', '7Fh']
jg ['short', 'loc_743']
movzx ['eax,', 'word', 'ptr', '[ebp+var_44]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+0Fh],', '0']
jmp ['short', 'loc_751']
mov ['[ebp+var_38],', '0FFFFh']
mov ['eax,', '[ebp+var_50]']
mov ['byte', 'ptr', '[eax+0Fh],', '0']
cmp ['[ebp+var_38],', '0FFFEh']
jge ['short', 'loc_7A1']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_78C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_50]']
movsx ['eax,', 'byte', 'ptr', '[edx+0Dh]']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+10h]']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+18h]']
mov ['[edx+eax*4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', 'word', 'ptr', '[ebp+var_38]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_806']
cmp ['[ebp+var_38],', '0FFFEh']
jnz ['short', 'loc_7B5']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
jmp ['short', 'loc_7BE']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
cmp ['[ebp+var_44],', '0FFh']
jle ['short', 'loc_7EE']
mov ['eax,', '[ebp+var_44]']
sar ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+25h],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+26h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '2']
jmp ['short', 'loc_804']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ecx+25h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
jmp ['short', 'loc_818']
jmp ['short', 'loc_813']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_818']
jmp ['loc_3F3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN52']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '140h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN51']
dd ['offset', '$LN50']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '1,', '3,', '1']
db ['2']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_UConverter_fromUnicode_HZ_OFFSETS_LOGIC proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '184h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_184]']
mov ['ecx,', '61h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
sub ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+8]']
sar ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_68],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+var_74]']
mov ['cl,', '[eax+0Eh]']
mov ['[ebp+var_7D],', 'cl']
mov ['[ebp+var_98],', '0']
mov ['[ebp+var_A4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+38h],', '0']
jz ['short', 'loc_9A8']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_9A8']
jmp ['$getTrail$9169']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_50]']
jge ['loc_FEA']
mov ['[ebp+var_5C],', '0FFFFh']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['loc_FD3']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_68],', 'edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['al,', '[ebp+var_7D]']
mov ['[ebp+var_89],', 'al']
cmp ['[ebp+var_68],', '7Eh']
jnz ['loc_AD8']
mov ['[ebp+var_98],', '2']
mov ['[ebp+var_A4],', 'offset', '??_C@_02OPGNDHMP@?$HO?$HO?$AA@']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[ebp+var_98]']
sub ['ecx,', '1']
mov ['[ebp+var_98],', 'ecx']
test ['eax,', 'eax']
jle ['short', 'loc_A29']
mov ['[ebp+var_184],', '1']
jmp ['short', 'loc_A33']
mov ['[ebp+var_184],', '0']
cmp ['[ebp+var_184],', '0']
jz ['loc_AD1']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_A84']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+var_A4]']
mov ['al,', '[eax]']
mov ['[ecx+edx],', 'al']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_A79']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_ABD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['eax,', '[ebp+var_A4]']
mov ['al,', '[eax]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_A4]']
add ['eax,', '1']
mov ['[ebp+var_A4],', 'eax']
jmp ['loc_A04']
jmp ['loc_9A8']
jmp ['short', 'loc_B50']
cmp ['[ebp+var_68],', '7Fh']
jg ['short', 'loc_AE6']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_B50']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+23h]']
push ['edx']
lea ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+var_68]']
push ['ecx']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_ucnv_MBCSFromUChar32_56']
add ['esp,', '10h']
mov ['[ebp+var_B0],', 'eax']
cmp ['[ebp+var_B0],', '2']
jnz ['short', 'loc_B49']
mov ['eax,', '[ebp+var_5C]']
sub ['eax,', '0A1A1h']
movzx ['ecx,', 'ax']
cmp ['ecx,', '5C5Dh']
jg ['short', 'loc_B49']
mov ['eax,', '[ebp+var_5C]']
sub ['eax,', '0A1h']
movzx ['ecx,', 'al']
cmp ['ecx,', '5Dh']
jg ['short', 'loc_B49']
mov ['eax,', '[ebp+var_5C]']
sub ['eax,', '8080h']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_B50']
mov ['[ebp+var_5C],', '0FFFFh']
cmp ['[ebp+var_5C],', '0FFFFh']
jz ['loc_EFF']
cmp ['[ebp+var_5C],', '0FFh']
setnbe ['al']
mov ['[ebp+var_7D],', 'al']
mov ['ecx,', '[ebp+var_74]']
mov ['dl,', '[ebp+var_7D]']
mov ['[ecx+0Eh],', 'dl']
movsx ['eax,', '[ebp+var_89]']
movsx ['ecx,', '[ebp+var_7D]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_B91']
mov ['eax,', '[ebp+var_74]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
test ['ecx,', 'ecx']
jnz ['loc_D72']
movsx ['eax,', '[ebp+var_7D]']
test ['eax,', 'eax']
jnz ['loc_C8A']
mov ['[ebp+var_98],', '2']
mov ['[ebp+var_A4],', 'offset', '??_C@_02MEEAGEAM@?$HO?$HN?$AA@']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[ebp+var_98]']
sub ['ecx,', '1']
mov ['[ebp+var_98],', 'ecx']
test ['eax,', 'eax']
jle ['short', 'loc_BD6']
mov ['[ebp+var_184],', '1']
jmp ['short', 'loc_BE0']
mov ['[ebp+var_184],', '0']
cmp ['[ebp+var_184],', '0']
jz ['loc_C7E']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_C31']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+var_A4]']
mov ['al,', '[eax]']
mov ['[ecx+edx],', 'al']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_C26']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_C6A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['eax,', '[ebp+var_A4]']
mov ['al,', '[eax]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_A4]']
add ['eax,', '1']
mov ['[ebp+var_A4],', 'eax']
jmp ['loc_BB1']
mov ['eax,', '[ebp+var_74]']
mov ['byte', 'ptr', '[eax+0Ch],', '1']
jmp ['loc_D72']
mov ['[ebp+var_98],', '2']
mov ['[ebp+var_A4],', 'offset', '??_C@_02JCBKMDIK@?$HO?$HL?$AA@']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[ebp+var_98]']
sub ['ecx,', '1']
mov ['[ebp+var_98],', 'ecx']
test ['eax,', 'eax']
jle ['short', 'loc_CC3']
mov ['[ebp+var_184],', '1']
jmp ['short', 'loc_CCD']
mov ['[ebp+var_184],', '0']
cmp ['[ebp+var_184],', '0']
jz ['loc_D6B']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_D1E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+var_A4]']
mov ['al,', '[eax]']
mov ['[ecx+edx],', 'al']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_D13']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_D57']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['eax,', '[ebp+var_A4]']
mov ['al,', '[eax]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_A4]']
add ['eax,', '1']
mov ['[ebp+var_A4],', 'eax']
jmp ['loc_C9E']
mov ['eax,', '[ebp+var_74]']
mov ['byte', 'ptr', '[eax+0Ch],', '1']
movsx ['eax,', '[ebp+var_7D]']
test ['eax,', 'eax']
jz ['loc_E8E']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['loc_E29']
mov ['eax,', '[ebp+var_5C]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_38]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '1']
mov ['[ebp+var_38],', 'edx']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_DBB']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_DF3']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '1']
mov ['[ebp+var_38],', 'edx']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_DF1']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_E27']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['al,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_E8C']
mov ['eax,', '[ebp+var_5C]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+4]']
movsx ['ecx,', 'byte', 'ptr', '[ecx+3Fh]']
mov ['[edx+ecx+4Ch],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['cl,', '[eax+3Fh]']
add ['cl,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[eax+3Fh],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['al,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_EFA']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_EC6']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '1']
mov ['[ebp+var_38],', 'edx']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_EC4']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_EFA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['al,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['loc_FD1']
mov ['eax,', '[ebp+var_68]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_FBA']
mov ['eax,', '[ebp+var_68]']
and ['eax,', '400h']
jnz ['loc_FAF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_68]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_50]']
jge ['short', 'loc_FA4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_2C]']
mov ['ax,', '[ecx+edx*2]']
mov ['[ebp+var_BC],', 'ax']
movzx ['eax,', '[ebp+var_BC]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_F99']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+38h]']
shl ['edx,', '0Ah']
movzx ['eax,', '[ebp+var_BC]']
lea ['ecx,', '[edx+eax-35FDC00h]']
mov ['[ebp+var_68],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+38h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
jmp ['short', 'loc_FA2']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', 'loc_FAD']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_FB8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', 'loc_FC3']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_68]']
mov ['[ecx+38h],', 'edx']
jmp ['short', 'loc_FEA']
jmp ['short', 'loc_FDE']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_FEA']
mov ['[ebp+var_5C],', '0FFFFh']
jmp ['loc_9A8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_2C]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_74]']
mov ['cl,', '[ebp+var_7D]']
mov ['[eax+0Eh],', 'cl']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN63']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '184h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN62']
dd ['offset', '$LN61']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_02JCBKMDIK@?$HO?$HL?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_02MEEAGEAM@?$HO?$HN?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_02OPGNDHMP@?$HO?$HO?$AA@']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__HZ_WriteSub	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
lea ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_10D2']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax],', '7Eh']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax],', '7Dh']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+0Eh],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_20]']
mov ['al,', '[ecx]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
lea ['eax,', '[ebp+var_2C]']
sub ['edx,', 'eax']
push ['edx']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_cbFromUWriteBytes_56']
add ['esp,', '14h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN5']
dd ['offset', '$LN4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__HZ_SafeClone	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_20],', '220h']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1180']
xor ['eax,', 'eax']
jmp ['loc_1210']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_1194']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
xor ['eax,', 'eax']
jmp ['short', 'loc_1210']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['10h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '210h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '210h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+22h],', '1']
mov ['[ebp+var_14],', '10Ch']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '104h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_ucnv_safeClone_56']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6_0']
dd ['offset', '$LN5_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__HZ_GetUnicodeSet proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
push ['7Fh']
push ['0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['5']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+18h]']
push ['eax']
call ['_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56']
add ['esp,', '14h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['_ucnv_close_56:near']
extrn ['_uprv_calloc_56:near']
extrn ['_ucnv_open_56:near']
extrn ['_ucnv_canCreateConverter_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_uprv_free_56:near']
extrn ['_ucnv_MBCSSimpleGetNextUChar_56:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_ucnv_MBCSFromUChar32_56:near']
extrn ['_ucnv_cbFromUWriteBytes_56:near']
extrn ['_ucnv_safeClone_56:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_ucnv_MBCSGetFilteredUnicodeSetForUnicode_56:near']
end
