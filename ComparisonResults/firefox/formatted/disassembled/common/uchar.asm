endp
_uprv_haveProperties_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1CC12']
xor ['al,', 'al']
jmp ['short', 'loc_1CC14']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_charType_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1CC6F']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1CD43']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1CCB3']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1CD37']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1CCD0']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1CD2B']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1CCE9']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1CD1F']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_enumCharTypes_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1CD8A']
jmp ['short', 'loc_1CDB1']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['offset', '__enumTypeRange']
push ['offset', '__enumTypeValue']
push ['offset', '_propsTrie']
call ['_utrie2_enum_56']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5']
dd ['offset', '$LN4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__enumTypeValue	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__enumTypeRange	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_islower_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1CECB']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1CF9F']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1CF0F']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1CF93']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1CF2C']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1CF87']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1CF45']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1CF7B']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '2']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isupper_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1D013']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1D0E7']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1D057']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1D0DB']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1D074']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1D0CF']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1D08D']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1D0C3']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '1']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_istitle_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1D15B']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1D22F']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1D19F']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1D223']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1D1BC']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1D217']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1D1D5']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1D20B']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '3']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isdigit_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1D2A3']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1D377']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1D2E7']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1D36B']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1D304']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1D35F']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1D31D']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1D353']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '9']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isxdigit_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '66h']
jg ['short', 'loc_1D3D6']
cmp ['[ebp+arg_0],', '41h']
jl ['short', 'loc_1D3D6']
cmp ['[ebp+arg_0],', '46h']
jle ['short', 'loc_1D3FA']
cmp ['[ebp+arg_0],', '61h']
jge ['short', 'loc_1D3FA']
cmp ['[ebp+arg_0],', '0FF21h']
jl ['short', 'loc_1D401']
cmp ['[ebp+arg_0],', '0FF46h']
jg ['short', 'loc_1D401']
cmp ['[ebp+arg_0],', '0FF26h']
jle ['short', 'loc_1D3FA']
cmp ['[ebp+arg_0],', '0FF41h']
jl ['short', 'loc_1D401']
mov ['al,', '1']
jmp ['loc_1D521']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1D42E']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1D502']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1D472']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1D4F6']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1D48F']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1D4EA']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1D4A8']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1D4DE']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '9']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isalpha_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1D573']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1D647']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1D5B7']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1D63B']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1D5D4']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1D62F']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1D5ED']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1D623']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '3Eh']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isUAlphabetic_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_getUnicodeProperties_56']
add ['esp,', '8']
and ['eax,', '100h']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isalnum_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1D70B']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1D7DF']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1D74F']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1D7D3']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1D76C']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1D7C7']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1D785']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1D7BB']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '23Eh']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isalnumPOSIX_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_isUAlphabetic_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1D85D']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_isdigit_56']
add ['esp,', '4']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_1D85D']
mov ['[ebp+var_C1],', '0']
jmp ['short', 'loc_1D864']
mov ['[ebp+var_C1],', '1']
mov ['al,', '[ebp+var_C1]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isdefined_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1D8CB']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1D99F']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1D90F']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1D993']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1D92C']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1D987']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1D945']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1D97B']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isbase_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1DA0F']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1DAE3']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1DA53']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1DAD7']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1DA70']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1DACB']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1DA89']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1DABF']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '0FBEh']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_iscntrl_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1DB5F']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1DC33']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1DBA3']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1DC27']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1DBC0']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1DC1B']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1DBD9']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1DC0F']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', 'offset', 'off_1E000']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isISOControl_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '9Fh']
ja ['short', 'loc_1DCA3']
cmp ['[ebp+arg_0],', '1Fh']
jle ['short', 'loc_1DC97']
cmp ['[ebp+arg_0],', '7Fh']
jl ['short', 'loc_1DCA3']
mov ['[ebp+var_C4],', '1']
jmp ['short', 'loc_1DCAD']
mov ['[ebp+var_C4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isspace_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1DD07']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1DDDB']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1DD4B']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1DDCF']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1DD68']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1DDC3']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1DD81']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1DDB7']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '7000h']
jnz ['short', 'loc_1DE35']
cmp ['[ebp+arg_0],', '9Fh']
jg ['short', 'loc_1DE2C']
cmp ['[ebp+arg_0],', '9']
jl ['short', 'loc_1DE17']
cmp ['[ebp+arg_0],', '0Dh']
jle ['short', 'loc_1DE35']
cmp ['[ebp+arg_0],', '1Ch']
jl ['short', 'loc_1DE23']
cmp ['[ebp+arg_0],', '1Fh']
jle ['short', 'loc_1DE35']
cmp ['[ebp+arg_0],', '85h']
jz ['short', 'loc_1DE35']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '0']
jmp ['short', 'loc_1DE3C']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_D0+3]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isJavaSpaceChar_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1DE97']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1DF6B']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1DEDB']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1DF5F']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1DEF8']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1DF53']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1DF11']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1DF47']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '7000h']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['_u_isWhitespace_56']
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp-0DCh]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['dword', 'ptr', '[ebp+8],', '0D800h']
jnb ['short', 'loc_1DFE7']
mov ['eax,', '[ebp+8]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+8]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp-0D0h],', 'ecx']
jmp ['loc_1E0BB']
cmp ['dword', 'ptr', '[ebp+8],', '0FFFFh']
ja ['short', 'loc_1E02B']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ebp+8],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
db ['81h']
dd ['8458B00h,', '305F8C1h']
ror ['byte', 'ptr', '[ebx+9AE00Dh],', '1']
add ['[edi],', 'cl']
mov ['bh,', '14h']
push ['ecx']
mov ['eax,', '[ebp+8]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp-0D4h],', 'ecx']
jmp ['loc_1E0AF']
cmp ['dword', 'ptr', '[ebp+8],', '10FFFFh']
jbe ['short', 'loc_1E048']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp-0D8h],', 'edx']
jmp ['short', 'loc_1E0A3']
mov ['eax,', '[ebp+8]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1E061']
mov ['ecx,', 'off_9B04']
mov ['[ebp-0DCh],', 'ecx']
jmp ['short', 'loc_1E097']
mov ['edx,', '[ebp+8]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+8]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+8]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp-0DCh],', 'eax']
mov ['ecx,', '[ebp-0DCh]']
mov ['[ebp-0D8h],', 'ecx']
mov ['edx,', '[ebp-0D8h]']
mov ['[ebp-0D4h],', 'edx']
mov ['eax,', '[ebp-0D4h]']
mov ['[ebp-0D0h],', 'eax']
mov ['ecx,', '[ebp-0D0h]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp-8],', 'eax']
mov ['ecx,', '[ebp-8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '7000h']
jz ['short', 'loc_1E0FD']
cmp ['dword', 'ptr', '[ebp+8],', '0A0h']
jz ['short', 'loc_1E0FD']
cmp ['dword', 'ptr', '[ebp+8],', '2007h']
jz ['short', 'loc_1E0FD']
cmp ['dword', 'ptr', '[ebp+8],', '202Fh']
jnz ['short', 'loc_1E11E']
cmp ['dword', 'ptr', '[ebp+8],', '1Fh']
jg ['short', 'loc_1E115']
cmp ['dword', 'ptr', '[ebp+8],', '9']
jl ['short', 'loc_1E115']
cmp ['dword', 'ptr', '[ebp+8],', '0Dh']
jle ['short', 'loc_1E11E']
cmp ['dword', 'ptr', '[ebp+8],', '1Ch']
jge ['short', 'loc_1E11E']
mov ['byte', 'ptr', '[ebp-0CDh],', '0']
jmp ['short', 'loc_1E125']
mov ['byte', 'ptr', '[ebp-0CDh],', '1']
mov ['al,', '[ebp-0CDh]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isblank_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '9Fh']
ja ['short', 'loc_1E18D']
cmp ['[ebp+arg_0],', '9']
jz ['short', 'loc_1E173']
cmp ['[ebp+arg_0],', '20h']
jz ['short', 'loc_1E173']
mov ['[ebp+var_D0],', '0']
jmp ['short', 'loc_1E17D']
mov ['[ebp+var_D0],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_D0]']
jmp ['loc_1E2AD']
jmp ['loc_1E2AD']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1E1BA']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1E28E']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1E1FE']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1E282']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1E21B']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1E276']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1E234']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1E26A']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '0Ch']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isUWhiteSpace_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_getUnicodeProperties_56']
add ['esp,', '8']
and ['eax,', '1']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isprint_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1E34B']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1E41F']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1E38F']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1E413']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1E3AC']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1E407']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1E3C5']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1E3FB']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '78001h']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isprintPOSIX_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1E49B']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1E56F']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1E4DF']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1E563']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1E4FC']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1E557']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1E515']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1E54B']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '0Ch']
jz ['short', 'loc_1E5A9']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_isgraphPOSIX_56']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1E5A9']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '0']
jmp ['short', 'loc_1E5B0']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_D0+3]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isgraph_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1E617']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1E6EB']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1E65B']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1E6DF']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1E678']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1E6D3']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1E691']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1E6C7']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '5F001h']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isgraphPOSIX_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1E767']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1E83B']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1E7AB']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1E82F']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1E7C8']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1E823']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1E7E1']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1E817']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '4F001h']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_ispunct_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1E8B7']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1E98B']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1E8FB']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1E97F']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1E918']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1E973']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1E931']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1E967']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '30F80000h']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isIDStart_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1EA07']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1EADB']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1EA4B']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1EACF']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1EA68']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1EAC3']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1EA81']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1EAB7']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '43Eh']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isIDPart_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1EB57']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1EC2B']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1EB9B']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1EC1F']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1EBB8']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1EC13']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1EBD1']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1EC07']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '40077Eh']
jnz ['short', 'loc_1EC6E']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_isIDIgnorable_56']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1EC6E']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '0']
jmp ['short', 'loc_1EC75']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_D0+3]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isIDIgnorable_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '9Fh']
jg ['short', 'loc_1ED08']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_isISOControl_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1ECEE']
cmp ['[ebp+arg_0],', '1Fh']
jg ['short', 'loc_1ECE2']
cmp ['[ebp+arg_0],', '9']
jl ['short', 'loc_1ECE2']
cmp ['[ebp+arg_0],', '0Dh']
jle ['short', 'loc_1ECEE']
cmp ['[ebp+arg_0],', '1Ch']
jge ['short', 'loc_1ECEE']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_1ECF8']
mov ['[ebp+var_D0],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_D0]']
jmp ['loc_1EE28']
jmp ['loc_1EE28']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1ED35']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1EE09']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1ED79']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1EDFD']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1ED96']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1EDF1']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1EDAF']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1EDE5']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
cmp ['eax,', '10h']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isJavaIDStart_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1EE87']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1EF5B']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1EECB']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1EF4F']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1EEE8']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1EF43']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1EF01']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1EF37']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '240003Eh']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isJavaIDPart_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1EFD7']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1F0AB']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1F01B']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1F09F']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1F038']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1F093']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1F051']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1F087']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '1Fh']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '240077Eh']
jnz ['short', 'loc_1F0EE']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_isIDIgnorable_56']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1F0EE']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '0']
jmp ['short', 'loc_1F0F5']
mov ['byte', 'ptr', '[ebp+var_D0+3],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_D0+3]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_charDigitValue_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1F15B']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['loc_1F22F']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1F19F']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_E0],', 'ecx']
jmp ['loc_1F223']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1F1BC']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_E4],', 'edx']
jmp ['short', 'loc_1F217']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1F1D5']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_E8],', 'ecx']
jmp ['short', 'loc_1F20B']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_E8],', 'eax']
mov ['ecx,', '[ebp+var_E8]']
mov ['[ebp+var_E4],', 'ecx']
mov ['edx,', '[ebp+var_E4]']
mov ['[ebp+var_E0],', 'edx']
mov ['eax,', '[ebp+var_E0]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '6']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '9']
jg ['short', 'loc_1F25B']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_1F25E']
jmp ['short', 'loc_1F25E']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_getNumericValue_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '140h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_140]']
mov ['ecx,', '50h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1F2B3']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_134],', 'ecx']
jmp ['loc_1F387']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1F2F7']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_138],', 'ecx']
jmp ['loc_1F37B']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1F314']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_13C],', 'edx']
jmp ['short', 'loc_1F36F']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1F32D']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_140],', 'ecx']
jmp ['short', 'loc_1F363']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_140],', 'eax']
mov ['ecx,', '[ebp+var_140]']
mov ['[ebp+var_13C],', 'ecx']
mov ['edx,', '[ebp+var_13C]']
mov ['[ebp+var_138],', 'edx']
mov ['eax,', '[ebp+var_138]']
mov ['[ebp+var_134],', 'eax']
mov ['ecx,', '[ebp+var_134]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '6']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_1F3B9']
fld ['ds:__real@c19d6f3454000000']
jmp ['loc_1F58B']
jmp ['loc_1F58B']
cmp ['[ebp+var_14],', '0Bh']
jge ['short', 'loc_1F3DB']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_134],', 'eax']
fild ['[ebp+var_134]']
jmp ['loc_1F58B']
jmp ['loc_1F58B']
cmp ['[ebp+var_14],', '15h']
jge ['short', 'loc_1F3FD']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '0Bh']
mov ['[ebp+var_134],', 'eax']
fild ['[ebp+var_134]']
jmp ['loc_1F58B']
jmp ['loc_1F58B']
cmp ['[ebp+var_14],', '0B0h']
jge ['short', 'loc_1F422']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '15h']
mov ['[ebp+var_134],', 'eax']
fild ['[ebp+var_134]']
jmp ['loc_1F58B']
jmp ['loc_1F58B']
cmp ['[ebp+var_14],', '1E0h']
jge ['short', 'loc_1F453']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '4']
sub ['eax,', '0Ch']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0Fh']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
fild ['[ebp+var_20]']
fidiv ['[ebp+var_2C]']
jmp ['loc_1F58B']
jmp ['loc_1F58B']
cmp ['[ebp+var_14],', '300h']
jge ['loc_1F4F6']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '5']
sub ['eax,', '0Eh']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '1Fh']
add ['eax,', '2']
mov ['[ebp+var_54],', 'eax']
fild ['[ebp+var_48]']
fstp ['[ebp+var_3C]']
cmp ['[ebp+var_54],', '4']
jl ['short', 'loc_1F49B']
fld ['[ebp+var_3C]']
fmul ['ds:__real@40c3880000000000']
fstp ['[ebp+var_3C]']
mov ['eax,', '[ebp+var_54]']
sub ['eax,', '4']
mov ['[ebp+var_54],', 'eax']
jmp ['short', 'loc_1F47E']
mov ['eax,', '[ebp+var_54]']
mov ['[ebp+var_134],', 'eax']
cmp ['[ebp+var_134],', '1']
jz ['short', 'loc_1F4DD']
cmp ['[ebp+var_134],', '2']
jz ['short', 'loc_1F4CF']
cmp ['[ebp+var_134],', '3']
jz ['short', 'loc_1F4C1']
jmp ['short', 'loc_1F4E9']
fld ['[ebp+var_3C]']
fmul ['ds:__real@408f400000000000']
fstp ['[ebp+var_3C]']
jmp ['short', 'loc_1F4E9']
fld ['[ebp+var_3C]']
fmul ['ds:__real@4059000000000000']
fstp ['[ebp+var_3C]']
jmp ['short', 'loc_1F4E9']
fld ['[ebp+var_3C]']
fmul ['ds:__real@4024000000000000']
fstp ['[ebp+var_3C]']
fld ['[ebp+var_3C]']
jmp ['loc_1F58B']
jmp ['loc_1F58B']
cmp ['[ebp+var_14],', '324h']
jge ['loc_1F585']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '2']
sub ['eax,', '0BFh']
mov ['[ebp+var_60],', 'eax']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '3']
add ['eax,', '1']
mov ['[ebp+var_6C],', 'eax']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_134],', 'eax']
mov ['ecx,', '[ebp+var_134]']
sub ['ecx,', '1']
mov ['[ebp+var_134],', 'ecx']
cmp ['[ebp+var_134],', '3']
ja ['short', 'loc_1F57E']
mov ['edx,', '[ebp+var_134]']
jmp ['ds:$LN40[edx*4]']
mov ['eax,', '[ebp+var_60]']
imul ['eax,', '0C5C100h']
mov ['[ebp+var_60],', 'eax']
jmp ['short', 'loc_1F57E']
mov ['eax,', '[ebp+var_60]']
imul ['eax,', '34BC0h']
mov ['[ebp+var_60],', 'eax']
jmp ['short', 'loc_1F57E']
mov ['eax,', '[ebp+var_60]']
imul ['eax,', '0E10h']
mov ['[ebp+var_60],', 'eax']
jmp ['short', 'loc_1F57E']
mov ['eax,', '[ebp+var_60]']
imul ['eax,', '3Ch']
mov ['[ebp+var_60],', 'eax']
fild ['[ebp+var_60]']
jmp ['short', 'loc_1F58B']
jmp ['short', 'loc_1F58B']
fld ['ds:__real@c19d6f3454000000']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_0']
dd ['offset', '$LN5_0']
dd ['offset', '$LN6_0']
assume ['cs:_rdata']
public ['__real@4024000000000000']
assume ['cs:_rdata']
public ['__real@4059000000000000']
assume ['cs:_rdata']
public ['__real@408f400000000000']
assume ['cs:_rdata']
public ['__real@40c3880000000000']
assume ['cs:_rdata']
public ['__real@c19d6f3454000000']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_digit_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movsx ['eax,', '[ebp+arg_4]']
sub ['eax,', '2']
movzx ['ecx,', 'al']
cmp ['ecx,', '22h']
jg ['loc_1F680']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_charDigitValue_56']
add ['esp,', '4']
mov ['[ebp+var_5],', 'al']
movsx ['eax,', '[ebp+var_5]']
test ['eax,', 'eax']
jge ['short', 'loc_1F67E']
cmp ['[ebp+arg_0],', '61h']
jl ['short', 'loc_1F62B']
cmp ['[ebp+arg_0],', '7Ah']
jg ['short', 'loc_1F62B']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '57h']
mov ['[ebp+var_5],', 'al']
jmp ['short', 'loc_1F67E']
cmp ['[ebp+arg_0],', '41h']
jl ['short', 'loc_1F642']
cmp ['[ebp+arg_0],', '5Ah']
jg ['short', 'loc_1F642']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '37h']
mov ['[ebp+var_5],', 'al']
jmp ['short', 'loc_1F67E']
cmp ['[ebp+arg_0],', '0FF41h']
jl ['short', 'loc_1F661']
cmp ['[ebp+arg_0],', '0FF5Ah']
jg ['short', 'loc_1F661']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '0FF37h']
mov ['[ebp+var_5],', 'al']
jmp ['short', 'loc_1F67E']
cmp ['[ebp+arg_0],', '0FF21h']
jl ['short', 'loc_1F67E']
cmp ['[ebp+arg_0],', '0FF3Ah']
jg ['short', 'loc_1F67E']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '0FF17h']
mov ['[ebp+var_5],', 'al']
jmp ['short', 'loc_1F684']
mov ['[ebp+var_5],', '0FFh']
movsx ['eax,', '[ebp+var_5]']
movsx ['ecx,', '[ebp+arg_4]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_1F69C']
movsx ['edx,', '[ebp+var_5]']
mov ['[ebp+var_D0],', 'edx']
jmp ['short', 'loc_1F6A6']
mov ['[ebp+var_D0],', '0FFFFFFFFh']
movsx ['eax,', 'byte', 'ptr', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_forDigit_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movsx ['eax,', '[ebp+arg_4]']
sub ['eax,', '2']
movzx ['ecx,', 'al']
cmp ['ecx,', '22h']
jg ['short', 'loc_1F6FA']
movsx ['eax,', '[ebp+arg_4]']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_1F700']
xor ['eax,', 'eax']
jmp ['short', 'loc_1F716']
jmp ['short', 'loc_1F716']
cmp ['[ebp+arg_0],', '0Ah']
jge ['short', 'loc_1F710']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30h']
jmp ['short', 'loc_1F716']
jmp ['short', 'loc_1F716']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '57h']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_getUnicodeVersion_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_1F766']
push ['1']
push ['offset', '_dataVersion']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['4']
push ['offset', '_dataVersion']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_getMainProperties_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1F7C7']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1F89B']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1F80B']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1F88F']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1F828']
mov ['edx,', 'off_9AEC']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1F883']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_9B00']
jl ['short', 'loc_1F841']
mov ['ecx,', 'off_9B04']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1F877']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsTrie']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_getUnicodeProperties_56 proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_1F901']
mov ['eax,', 'ds:?__LINE__Var@?1??u_getUnicodeProperties_56@@9@9']
add ['eax,', '1']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FE@OGNOHKBO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1BE@DAMHMCEC@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '_propsVectorsColumns']
jl ['short', 'loc_1F918']
xor ['eax,', 'eax']
jmp ['loc_1FA3B']
jmp ['loc_1FA3B']
cmp ['[ebp+arg_0],', '0D800h']
jnb ['short', 'loc_1F945']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
mov ['ecx,', '_propsVectorsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['loc_1FA19']
cmp ['[ebp+arg_0],', '0FFFFh']
ja ['short', 'loc_1F989']
xor ['edx,', 'edx']
cmp ['[ebp+arg_0],', '0DBFFh']
setnle ['dl']
sub ['edx,', '1']
and ['edx,', '140h']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '5']
add ['edx,', 'eax']
mov ['ecx,', '_propsVectorsTrie']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_1FA0D']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1F9A6']
mov ['edx,', 'off_17034']
add ['edx,', '80h']
mov ['[ebp+var_D8],', 'edx']
jmp ['short', 'loc_1FA01']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', 'dword_17048']
jl ['short', 'loc_1F9BF']
mov ['ecx,', 'off_1704C']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_1F9F5']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '0Bh']
mov ['eax,', '_propsVectorsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+1040h]']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '5']
and ['edx,', '3Fh']
add ['ecx,', 'edx']
mov ['eax,', '_propsVectorsTrie']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '_propsVectorsTrie']
mov ['ax,', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'ax']
movzx ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+arg_4]']
mov ['eax,', '_propsVectors[eax*4]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1BE@DAMHMCEC@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?$DO?$AA?$DN?$AA0?$AA?$AA@']
unicode ['0,', '<column>']
dw ['3Eh']
unicode ['0,', '<=0>,0']
assume ['cs:_rdata']
public ['??_C@_1FE@OGNOHKBO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\uchar.c>,0']
assume ['cs:_data']
public ['?__LINE__Var@?1??u_getUnicodeProperties_56@@9@9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_getMaxValues_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C4],', 'eax']
cmp ['[ebp+var_C4],', '0']
jz ['short', 'loc_1FAF7']
cmp ['[ebp+var_C4],', '2']
jz ['short', 'loc_1FAFE']
jmp ['short', 'loc_1FB05']
mov ['eax,', 'dword_1CBD0']
jmp ['short', 'loc_1FB07']
mov ['eax,', 'dword_1CBD4']
jmp ['short', 'loc_1FB07']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_charAge_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1FB6D']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_getUnicodeProperties_56']
add ['esp,', '8']
shr ['eax,', '18h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '4']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'al']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0Fh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+1],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax+3],', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[ecx+2],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uscript_getScript_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1FBB0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1FBB5']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1FC23']
cmp ['[ebp+arg_0],', '10FFFFh']
jbe ['short', 'loc_1FBCC']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1FC23']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_getUnicodeProperties_56']
add ['esp,', '8']
and ['eax,', '0C000FFh']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '400000h']
jnb ['short', 'loc_1FBF2']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_1FC23']
jmp ['short', 'loc_1FC23']
cmp ['[ebp+var_8],', '800000h']
jnb ['short', 'loc_1FC01']
xor ['eax,', 'eax']
jmp ['short', 'loc_1FC23']
jmp ['short', 'loc_1FC23']
cmp ['[ebp+var_8],', '0C00000h']
jnb ['short', 'loc_1FC13']
mov ['eax,', '1']
jmp ['short', 'loc_1FC23']
jmp ['short', 'loc_1FC23']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0FFh']
movzx ['eax,', '_scriptExtensions[eax*2]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uscript_hasScript_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_getUnicodeProperties_56']
add ['esp,', '8']
and ['eax,', '0C000FFh']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '400000h']
jnb ['short', 'loc_1FC84']
mov ['eax,', '[ebp+arg_4]']
xor ['ecx,', 'ecx']
cmp ['eax,', '[ebp+var_14]']
setz ['cl']
mov ['al,', 'cl']
jmp ['short', 'loc_1FCE7']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFh']
lea ['ecx,', '_scriptExtensions[eax*2]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_14],', '0C00000h']
jb ['short', 'loc_1FCB0']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
lea ['edx,', '_scriptExtensions[ecx*2]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_4],', '0A7h']
jl ['short', 'loc_1FCBD']
xor ['al,', 'al']
jmp ['short', 'loc_1FCE7']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['[ebp+arg_4],', 'ecx']
jle ['short', 'loc_1FCD3']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1FCBD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '7FFFh']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uscript_getScriptExtensions_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1FD28']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1FD2F']
xor ['eax,', 'eax']
jmp ['loc_1FE1B']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_1FD41']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1FD51']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1FD51']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_1FE1B']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_getUnicodeProperties_56']
add ['esp,', '8']
and ['eax,', '0C000FFh']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '400000h']
jnb ['short', 'loc_1FD93']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1FD81']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_1FD89']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '1']
jmp ['loc_1FE1B']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0FFh']
lea ['ecx,', '_scriptExtensions[eax*2]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_8],', '0C00000h']
jb ['short', 'loc_1FDBF']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
lea ['edx,', '_scriptExtensions[ecx*2]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', '[eax]']
mov ['[ebp+var_2C],', 'cx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_1FDF3']
movzx ['eax,', '[ebp+var_2C]']
and ['eax,', '7FFFh']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*4],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
movzx ['eax,', '[ebp+var_2C]']
cmp ['eax,', '8000h']
jl ['short', 'loc_1FDC6']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_8]']
jle ['short', 'loc_1FE18']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ublock_getCode_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_getUnicodeProperties_56']
add ['esp,', '8']
and ['eax,', 'offset', 'loc_1FF00']
shr ['eax,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uchar_addPropertyStarts_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1FEA3']
jmp ['loc_20350']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['offset', '__enumPropertyStartsRange']
push ['0']
push ['offset', '_propsTrie']
call ['_utrie2_enum_56']
add ['esp,', '10h']
mov ['esi,', 'esp']
push ['9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0Ah']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0Eh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['1Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['85h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['86h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['7Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['200Ah']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['2010h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['206Ah']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['2070h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FEFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FF00h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0A0h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0A1h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['2007h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['2008h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['202Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['2030h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['61h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['7Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['41h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['5Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FF41h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FF5Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FF21h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FF3Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['67h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['47h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FF47h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FF27h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['2060h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FFF0h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0FFFCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0E0000h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0E1000h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['34Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['350h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__enumPropertyStartsRange proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_upropsvec_addPropertyStarts_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_203E4']
jmp ['short', 'loc_20405']
cmp ['_propsVectorsColumns,', '0']
jle ['short', 'loc_20405']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['offset', '__enumPropertyStartsRange']
push ['0']
push ['offset', '_propsVectorsTrie']
call ['_utrie2_enum_56']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_utrie2_enum_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__fltused:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['__imp___wassert:near']
end
