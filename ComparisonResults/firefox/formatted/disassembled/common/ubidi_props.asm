endp
_ubidi_getSingleton_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'offset', '_ubidi_props_singleton']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_addPropertyStarts_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_5B8F']
jmp ['loc_5CE1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '__enumPropertyStartsRange']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '14h']
push ['ecx']
call ['_utrie2_enum_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_5BC7']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_5C0A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+edx*4]']
and ['eax,', '1FFFFFh']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_5BBE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_44],', 'ecx']
mov ['[ebp+var_4D],', '0']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_5C83']
mov ['eax,', '[ebp+var_44]']
mov ['cl,', '[eax]']
mov ['[ebp+var_59],', 'cl']
mov ['edx,', '[ebp+var_44]']
add ['edx,', '1']
mov ['[ebp+var_44],', 'edx']
movzx ['eax,', '[ebp+var_59]']
movzx ['ecx,', '[ebp+var_4D]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_5C78']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['al,', '[ebp+var_59]']
mov ['[ebp+var_4D],', 'al']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_5C2F']
movzx ['eax,', '[ebp+var_4D]']
test ['eax,', 'eax']
jz ['short', 'loc_5CA9']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
cmp ['edx,', '[ecx+14h]']
jnz ['short', 'loc_5CDA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_44],', 'ecx']
jmp ['short', 'loc_5CDC']
jmp ['short', 'loc_5CE1']
jmp ['loc_5C2B']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__enumPropertyStartsRange proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getMaxValue_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5D79']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_5DEF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+3Ch]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
sub ['ecx,', '1000h']
mov ['[ebp+var_D0],', 'ecx']
cmp ['[ebp+var_D0],', '15h']
ja ['short', '$LN1']
mov ['edx,', '[ebp+var_D0]']
movzx ['eax,', 'ds:$LN11[edx]']
jmp ['ds:$LN12[eax*4]']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
jmp ['short', 'loc_5DEF']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0FF0000h']
sar ['eax,', '10h']
jmp ['short', 'loc_5DEF']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0E0h']
sar ['eax,', '5']
jmp ['short', 'loc_5DEF']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '300h']
sar ['eax,', '8']
jmp ['short', 'loc_5DEF']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
dd ['offset', '$LN2']
dd ['offset', '$LN1']
db ['4,', '4,', '1,', '2']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '3']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getClass_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_5E6F']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_5F43']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_5EB2']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_5F37']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_5ECE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_5F2B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_5EE7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_5F1F']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
and ['eax,', '1Fh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_isMirrored_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_5FB3']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_6087']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_5FF6']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_607B']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_6012']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_606F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_602B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_6063']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
sar ['eax,', '0Ch']
and ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getMirror_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_60F7']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_61CB']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_613A']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_61BF']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_6156']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_61B3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_616F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_61A7']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_getMirror']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_getMirror	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movsx ['eax,', '[ebp+arg_8]']
sar ['eax,', '0Dh']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0FFFFFFFCh']
jz ['short', 'loc_6240']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_62B2']
jmp ['short', 'loc_62B2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_38],', 'edx']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_6267']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_62AF']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '1FFFFFh']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_44]']
jnz ['short', 'loc_62A3']
mov ['eax,', '[ebp+var_20]']
shr ['eax,', '15h']
mov ['ecx,', '[ebp+var_14]']
mov ['eax,', '[ecx+eax*4]']
and ['eax,', '1FFFFFh']
jmp ['short', 'loc_62B2']
jmp ['short', 'loc_62AD']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_62AD']
jmp ['short', 'loc_62AF']
jmp ['short', 'loc_625E']
mov ['eax,', '[ebp+arg_4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_isBidiControl_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_6307']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_63DB']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_634A']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_63CF']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_6366']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_63C3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_637F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_63B7']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
sar ['eax,', '0Bh']
and ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_isJoinControl_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_644B']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_651F']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_648E']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_6513']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_64AA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_6507']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_64C3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_64FB']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
sar ['eax,', '0Ah']
and ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getJoiningType_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_658F']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_6663']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_65D2']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_6657']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_65EE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_664B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_6607']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_663F']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
and ['eax,', '0E0h']
sar ['eax,', '5']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getJoiningGroup_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jg ['short', 'loc_66E4']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_66E4']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
jmp ['short', 'loc_6720']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jg ['short', 'loc_671E']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_671E']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
jmp ['short', 'loc_6720']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getPairedBracketType_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_6773']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_6847']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_67B6']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_683B']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_67D2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_682F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_67EB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_6823']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
and ['eax,', '300h']
sar ['eax,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getPairedBracket_56 proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0D800h']
jnb ['short', 'loc_68BB']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_D0],', 'edx']
jmp ['loc_698F']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_68FE']
xor ['eax,', 'eax']
cmp ['[ebp+arg_4],', '0DBFFh']
setnle ['al']
sub ['eax,', '1']
and ['eax,', '140h']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D4],', 'ecx']
jmp ['loc_6983']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_691A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '80h']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_6977']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+34h]']
jl ['short', 'loc_6933']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_696B']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2+1040h]']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
and ['eax,', '3Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_DC]']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_D8]']
mov ['[ebp+var_D4],', 'edx']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_D0]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
and ['eax,', '300h']
jnz ['short', 'loc_69B5']
mov ['eax,', '[ebp+arg_4]']
jmp ['short', 'loc_69CA']
jmp ['short', 'loc_69CA']
movzx ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_getMirror']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_charDirection_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['offset', '_ubidi_props_singleton']
call ['_ubidi_getClass_56']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_isMirrored_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['offset', '_ubidi_props_singleton']
call ['_ubidi_isMirrored_56']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_charMirror_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['offset', '_ubidi_props_singleton']
call ['_ubidi_getMirror_56']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_getBidiPairedBracket_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['offset', '_ubidi_props_singleton']
call ['_ubidi_getPairedBracket_56']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_utrie2_enum_56:near']
extrn ['__RTC_CheckEsp:near']
end
