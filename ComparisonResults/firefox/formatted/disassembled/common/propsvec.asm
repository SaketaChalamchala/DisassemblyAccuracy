endp
_upvec_open_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_2D']
xor ['eax,', 'eax']
jmp ['loc_15A']
cmp ['[ebp+arg_0],', '1']
jge ['short', 'loc_43']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_15A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
push ['18h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '0Ch']
shl ['eax,', '2']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_7A']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_A2']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['loc_15A']
push ['18h']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+8],', '1000h']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+0Ch],', '3']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+0Ch]']
imul ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '2']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_20]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_20]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['dword', 'ptr', '[eax+4],', '110000h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_2C],', '110000h']
jmp ['short', 'loc_12C']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '110001h']
ja ['short', 'loc_157']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_123']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_close_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1B6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_setValue_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '13Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_13C]']
mov ['ecx,', '4Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1F7']
jmp ['loc_5B5']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_228']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_228']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jg ['short', 'loc_228']
cmp ['[ebp+arg_8],', '110001h']
jg ['short', 'loc_228']
cmp ['[ebp+arg_C],', '0']
jl ['short', 'loc_228']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '2']
cmp ['[ebp+arg_C],', 'ecx']
jl ['short', 'loc_236']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_5B5']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_24F']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '1Eh']
jmp ['loc_5B5']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '2']
mov ['[ebp+arg_C],', 'eax']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '[ebp+arg_14]']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['__findRow']
add ['esp,', '8']
mov ['[ebp+Src],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['__findRow']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax]']
jz ['short', 'loc_2BD']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+edx*4]']
and ['ecx,', '[ebp+arg_14]']
cmp ['[ebp+arg_10],', 'ecx']
jz ['short', 'loc_2BD']
mov ['[ebp+var_139],', '1']
jmp ['short', 'loc_2C4']
mov ['[ebp+var_139],', '0']
mov ['dl,', '[ebp+var_139]']
mov ['[ebp+var_35],', 'dl']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_2F2']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+edx*4]']
and ['ecx,', '[ebp+arg_14]']
cmp ['[ebp+arg_10],', 'ecx']
jz ['short', 'loc_2F2']
mov ['[ebp+var_139],', '1']
jmp ['short', 'loc_2F9']
mov ['[ebp+var_139],', '0']
mov ['dl,', '[ebp+var_139]']
mov ['[ebp+var_41],', 'dl']
movsx ['eax,', '[ebp+var_35]']
test ['eax,', 'eax']
jnz ['short', 'loc_316']
movsx ['eax,', '[ebp+var_41]']
test ['eax,', 'eax']
jz ['loc_556']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_5C],', 'ecx']
movsx ['eax,', '[ebp+var_35]']
add ['eax,', '[ebp+var_5C]']
movsx ['ecx,', '[ebp+var_41]']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['eax,', '[edx+8]']
jle ['loc_40E']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '10000h']
jge ['short', 'loc_34D']
mov ['[ebp+var_74],', '10000h']
jmp ['short', 'loc_370']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '110002h']
jge ['short', 'loc_362']
mov ['[ebp+var_74],', '110002h']
jmp ['short', 'loc_370']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '5']
jmp ['loc_5B5']
mov ['eax,', '[ebp+var_74]']
imul ['eax,', '[ebp+var_20]']
shl ['eax,', '2']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_39A']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_5B5']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+var_5C]']
imul ['edx,', '[ebp+var_20]']
shl ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', '[eax]']
sar ['ecx,', '2']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+Src],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax]']
sar ['ecx,', '2']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_5C]']
imul ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
lea ['eax,', '[edx+eax*4]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_14]']
lea ['ecx,', '[edx+ecx*4]']
sub ['eax,', 'ecx']
sar ['eax,', '2']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '0']
jle ['short', 'loc_482']
push ['1']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['eax,', '[ebp+var_50]']
shl ['eax,', '2']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
movsx ['ecx,', '[ebp+var_35]']
movsx ['edx,', '[ebp+var_41]']
lea ['eax,', '[ecx+edx+1]']
imul ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['eax,', '[ebp+var_35]']
add ['eax,', '[ebp+var_5C]']
movsx ['ecx,', '[ebp+var_41]']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
movsx ['eax,', '[ebp+var_35]']
test ['eax,', 'eax']
jz ['short', 'loc_50E']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '2']
add ['eax,', '[ebp+var_20]']
mov ['[ebp+var_50],', 'eax']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_50]']
shl ['ecx,', '2']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+Src],', 'edx']
movsx ['eax,', '[ebp+var_41]']
test ['eax,', 'eax']
jz ['short', 'loc_556']
push ['1']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_20]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax]']
sar ['ecx,', '2']
mov ['eax,', 'ecx']
cdq
idiv ['[ebp+var_20]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+Src]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_14]']
not ['eax']
mov ['[ebp+arg_14],', 'eax']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax]']
and ['ecx,', '[ebp+arg_14]']
or ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+Src]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_5A7']
jmp ['short', 'loc_5B5']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+Src],', 'edx']
jmp ['short', 'loc_58D']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '13Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
__findRow	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_44]']
imul ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
lea ['eax,', '[edx+eax*4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax]']
jl ['loc_6E1']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+4]']
jge ['short', 'loc_63D']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_77E']
jmp ['loc_6DF']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+4]']
jge ['short', 'loc_66A']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'eax']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_77E']
jmp ['short', 'loc_6DF']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+4]']
jge ['short', 'loc_697']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'eax']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_77E']
jmp ['short', 'loc_6DF']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[eax+4]']
cmp ['ecx,', '0Ah']
jge ['short', 'loc_6DF']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '2']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+4]']
jge ['short', 'loc_6AE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_44]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_77E']
jmp ['short', 'loc_6FF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+4]']
jge ['short', 'loc_6FF']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax]']
jmp ['short', 'loc_77E']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '1']
cmp ['[ebp+var_2C],', 'eax']
jge ['short', 'loc_766']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_38]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
imul ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
lea ['eax,', '[edx+eax*4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_743']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_764']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+4]']
jge ['short', 'loc_75E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_77E']
jmp ['short', 'loc_764']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_706']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
imul ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
lea ['eax,', '[edx+eax*4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_getValue_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_7D4']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_7D4']
cmp ['[ebp+arg_4],', '110001h']
jg ['short', 'loc_7D4']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_7D4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '2']
cmp ['[ebp+arg_8],', 'ecx']
jl ['short', 'loc_7D8']
xor ['eax,', 'eax']
jmp ['short', 'loc_7FB']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['__findRow']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[ecx+eax*4+8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_getRow_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_84A']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_84A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+0Ch]']
jl ['short', 'loc_84E']
xor ['eax,', 'eax']
jmp ['short', 'loc_893']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
imul ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
lea ['eax,', '[edx+eax*4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_879']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_88D']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_compact_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_8C7']
jmp ['loc_B93']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_8DB']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_B93']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_8EB']
jmp ['loc_B93']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+14h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '3']
jge ['short', 'loc_92F']
mov ['eax,', 'ds:?__LINE__Var@?1??upvec_compact_56@@9@9']
add ['eax,', '16h']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FK@GGCEBNMF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1BG@MOOHBLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?$DO?$AA?$DN?$AA3?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '2']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['offset', '_upvec_compareRows']
mov ['edx,', '[ebp+var_20]']
shl ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_uprv_sortArray_56']
add ['esp,', '1Ch']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_96D']
jmp ['loc_B93']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
neg ['eax']
mov ['[ebp+var_44],', 'eax']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_98F']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jge ['loc_A2D']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_50],', 'ecx']
cmp ['[ebp+var_44],', '0']
jl ['short', 'loc_9CF']
mov ['eax,', '[ebp+var_2C]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', 'ecx']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '8']
push ['eax']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jz ['short', 'loc_9D8']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_50],', '110000h']
jl ['short', 'loc_A1C']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '8']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['[ebp+arg_4]']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_A1C']
jmp ['loc_B93']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_986']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_44],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', 'edx']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
push ['200000h']
push ['200000h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['[ebp+arg_4]']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_A78']
jmp ['loc_B93']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
neg ['eax']
mov ['[ebp+var_44],', 'eax']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_A9A']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jge ['loc_B83']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_5C],', 'ecx']
cmp ['[ebp+var_44],', '0']
jl ['short', 'loc_AE3']
mov ['eax,', '[ebp+var_2C]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_44]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '8']
push ['edx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jz ['short', 'loc_B29']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_44],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '8']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_2C]']
shl ['ecx,', '2']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '8']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_44]']
lea ['eax,', '[ecx+edx*4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+var_50],', '110000h']
jge ['short', 'loc_B72']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_44]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['[ebp+arg_4]']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_B72']
jmp ['short', 'loc_B93']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_A91']
mov ['eax,', '[ebp+var_44]']
cdq
idiv ['[ebp+var_2C]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_1BG@MOOHBLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?$DO?$AA?$DN?$AA3?$AA?$AA@']
unicode ['0,', '<columns>']
dw ['3Eh']
unicode ['0,', '<=3>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_1FK@GGCEBNMF@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\propsvec.c>,0']
align ['4']
assume ['cs:_data']
public ['?__LINE__Var@?1??upvec_compact_56@@9@9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_compareRows proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_44]']
mov ['[ebp+var_38],', 'edx']
mov ['[ebp+var_2C],', '2']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_2C]']
mov ['esi,', '[ebp+var_14]']
mov ['eax,', '[ecx+eax*4]']
cmp ['eax,', '[esi+edx*4]']
jz ['short', 'loc_C96']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_2C]']
mov ['esi,', '[ebp+var_14]']
mov ['eax,', '[ecx+eax*4]']
cmp ['eax,', '[esi+edx*4]']
sbb ['eax,', 'eax']
and ['eax,', '0FFFFFFFEh']
add ['eax,', '1']
jmp ['short', 'loc_CBF']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[ebp+var_44]']
jnz ['short', 'loc_CAE']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jg ['short', 'loc_C66']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_getArray_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_CF5']
xor ['eax,', 'eax']
jmp ['short', 'loc_D1F']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_D06']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_D1A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_cloneArray_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_D55']
xor ['eax,', 'eax']
jmp ['loc_DF6']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_D70']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_DF6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
imul ['ecx,', '[edx+0Ch]']
shl ['ecx,', '2']
mov ['[ebp+Size],', 'ecx']
mov ['eax,', '[ebp+Size]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_DA8']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['short', 'loc_DF6']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_DDF']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_DF3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_compactToUTrie2WithRowIndexes_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
xor ['eax,', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
push ['offset', '_upvec_compactToUTrie2Handler_56']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_upvec_compact_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_utrie2_freeze_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_E82']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_utrie2_close_56']
add ['esp,', '4']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5']
dd ['offset', '$LN4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_upvec_compactToUTrie2Handler_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_4],', '110000h']
jge ['short', 'loc_F1E']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_utrie2_setRange32_56']
add ['esp,', '18h']
jmp ['loc_F9F']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_D0],', 'eax']
cmp ['[ebp+var_D0],', '110000h']
jz ['short', 'loc_F4D']
cmp ['[ebp+var_D0],', '110001h']
jz ['short', 'loc_F58']
cmp ['[ebp+var_D0],', '200000h']
jz ['short', 'loc_F63']
jmp ['short', 'loc_F9F']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+4],', 'ecx']
jmp ['short', 'loc_F9F']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+8],', 'ecx']
jmp ['short', 'loc_F9F']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+0Ch],', 'ecx']
cmp ['[ebp+arg_C],', '0FFFFh']
jle ['short', 'loc_F80']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '8']
jmp ['short', 'loc_F9F']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_utrie2_open_56']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_8]']
mov ['[edx],', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['_memset:near']
extrn ['_uprv_free_56:near']
extrn ['_uprv_malloc_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__imp__memmove:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_memcmp:near']
extrn ['_uprv_sortArray_56:near']
extrn ['__imp___wassert:near']
extrn ['_utrie2_close_56:near']
extrn ['_utrie2_freeze_56:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_utrie2_open_56:near']
extrn ['_utrie2_setRange32_56:near']
end
