endp
_ubidi_open_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
push ['0']
call ['_ubidi_openSized_56']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
align ['10h']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_openSized_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_514']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_51D']
xor ['eax,', 'eax']
jmp ['loc_648']
jmp ['short', 'loc_539']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_529']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_539']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_648']
push ['16Ch']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_55F']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['loc_648']
push ['16Ch']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
call ['_ubidi_getSingleton_56']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jle ['short', 'loc_5D4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '18h']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '30h']
push ['edx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_5C9']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '1Ch']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '34h']
push ['edx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_5D2']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['short', 'loc_5DB']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+48h],', '1']
cmp ['[ebp+arg_4],', '0']
jle ['short', 'loc_624']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_5F3']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+28h],', '0Ch']
jmp ['short', 'loc_622']
mov ['eax,', '[ebp+arg_4]']
imul ['eax,', '0Ch']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '28h']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '40h']
push ['edx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_622']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['short', 'loc_62B']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+49h],', '1']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_63A']
mov ['eax,', '[ebp+Dst]']
jmp ['short', 'loc_648']
jmp ['short', 'loc_648']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_ubidi_close_56']
add ['esp,', '4']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getMemory_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_6BD']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_6B7']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_6B7']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax],', 'ecx']
mov ['al,', '1']
jmp ['short', 'loc_70E']
jmp ['short', 'loc_6BB']
xor ['al,', 'al']
jmp ['short', 'loc_70E']
jmp ['short', 'loc_70E']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax]']
jg ['short', 'loc_6CD']
mov ['al,', '1']
jmp ['short', 'loc_70E']
jmp ['short', 'loc_70E']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jnz ['short', 'loc_6DB']
xor ['al,', 'al']
jmp ['short', 'loc_70E']
jmp ['short', 'loc_70E']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_uprv_realloc_56']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_70C']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax],', 'ecx']
mov ['al,', '1']
jmp ['short', 'loc_70E']
jmp ['short', 'loc_70E']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_close_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['loc_80F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jz ['short', 'loc_76D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+34h],', '0']
jz ['short', 'loc_785']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jz ['short', 'loc_79D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_7B5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jz ['short', 'loc_7CD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+40h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+44h],', '0']
jz ['short', 'loc_7E5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+15Ch],', '0']
jz ['short', 'loc_803']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+15Ch]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_setInverse_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_862']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+54h],', 'cl']
movsx ['eax,', '[ebp+arg_4]']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+58h],', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_isInverse_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_89A']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax+54h]']
jmp ['short', 'loc_89C']
jmp ['short', 'loc_89C']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_setReorderingMode_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_8EA']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_8EA']
cmp ['[ebp+arg_4],', '7']
jge ['short', 'loc_8EA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+58h],', 'ecx']
cmp ['[ebp+arg_4],', '4']
setz ['al']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+54h],', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getReorderingMode_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_922']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+58h]']
jmp ['short', 'loc_924']
jmp ['short', 'loc_924']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_setReorderingOptions_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '2']
jz ['short', 'loc_95B']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFFFFFFEh']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_96A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+5Ch],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getReorderingOptions_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_9A2']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+5Ch]']
jmp ['short', 'loc_9A4']
jmp ['short', 'loc_9A4']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getBaseDirection_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_9D6']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jge ['short', 'loc_9E0']
mov ['eax,', '3']
jmp ['loc_AA6']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['short', 'loc_9F5']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['loc_AA1']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_A70']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_A70']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'dx']
movzx ['eax,', '[ebp+var_2C]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_A70']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_2C]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_u_charDirection_56']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_A89']
xor ['eax,', 'eax']
jmp ['short', 'loc_AA6']
cmp ['[ebp+var_20],', '1']
jz ['short', 'loc_A95']
cmp ['[ebp+var_20],', '0Dh']
jnz ['short', 'loc_A9C']
mov ['eax,', '1']
jmp ['short', 'loc_AA6']
jmp ['loc_9FC']
mov ['eax,', '3']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getParaLevelAtIndex_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_AEC']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+88h]']
jge ['short', 'loc_B12']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ecx+edx*8]']
jge ['short', 'loc_B10']
jmp ['short', 'loc_B12']
jmp ['short', 'loc_AE3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+88h]']
jl ['short', 'loc_B2F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_8]']
mov ['al,', '[ecx+edx*8+4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_setContext_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_B74']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_B79']
jmp ['loc_C06']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_BA3']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jl ['short', 'loc_BA3']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jl ['short', 'loc_BA3']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B97']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_BA3']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_BAE']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_BAE']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_C06']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jnz ['short', 'loc_BC8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+68h],', 'eax']
jmp ['short', 'loc_BD1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+68h],', 'ecx']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jnz ['short', 'loc_BEB']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+70h],', 'eax']
jmp ['short', 'loc_BF4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax+70h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+64h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+6Ch],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_setPara_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '17Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_17C]']
mov ['ecx,', '5Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_C48']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_C4D']
jmp ['loc_15AB']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_C73']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_C73']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jl ['short', 'loc_C73']
movzx ['eax,', '[ebp+arg_C]']
cmp ['eax,', '7Dh']
jle ['short', 'loc_C81']
movzx ['eax,', '[ebp+arg_C]']
cmp ['eax,', '0FEh']
jge ['short', 'loc_C81']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_15AB']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jnz ['short', 'loc_C96']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+58h],', '3']
jnz ['short', 'loc_CC1']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
movzx ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_setParaRunsOnly']
add ['esp,', '14h']
jmp ['loc_15AB']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+14h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+arg_C]']
mov ['[eax+61h],', 'cl']
movzx ['eax,', '[ebp+arg_C]']
and ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+78h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+88h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+50h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0E4h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+150h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+154h],', '0']
movzx ['eax,', '[ebp+arg_C]']
xor ['ecx,', 'ecx']
cmp ['eax,', '0FEh']
setnl ['cl']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+62h],', 'cl']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_DC7']
movzx ['eax,', '[ebp+arg_C]']
cmp ['eax,', '0FEh']
jl ['short', 'loc_D88']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
and ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+61h],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+62h],', '0']
movzx ['eax,', '[ebp+arg_C]']
and ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '_flagLR[eax*4]']
mov ['[ecx+7Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0E0h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+88h],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_setParaSuccess']
add ['esp,', '4']
jmp ['loc_15AB']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0E0h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_DEE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['[eax+8Ch],', 'edx']
jmp ['short', 'loc_DFF']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '90h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8Ch],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+48h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30h']
push ['ecx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_E57']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
mov ['[eax+4Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_getDirProps']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_E55']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_15AB']
jmp ['short', 'loc_E65']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_15AB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+arg_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+84h],', 'ecx']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_EF0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+48h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '34h']
push ['ecx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_EE0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['[eax+50h],', 'edx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_resolveExplicitLevels']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_EDE']
jmp ['loc_15AB']
jmp ['short', 'loc_EEE']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_15AB']
jmp ['short', 'loc_F19']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax+50h],', 'ecx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_checkExplicitLevels']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_F19']
jmp ['loc_15AB']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0F4h],', '5']
jg ['short', 'loc_F38']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0FCh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0F8h],', 'eax']
jmp ['short', 'loc_FA8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+2Ch]']
jg ['short', 'loc_F5D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['[eax+0F8h],', 'edx']
jmp ['short', 'loc_FA8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2Ch']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '44h']
push ['eax']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_F9A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['[eax+0F8h],', 'edx']
jmp ['short', 'loc_FA8']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_15AB']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0F4h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+78h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_178],', 'eax']
cmp ['[ebp+var_178],', '0']
jz ['short', 'loc_FDB']
cmp ['[ebp+var_178],', '1']
jz ['short', 'loc_FED']
jmp ['short', 'loc_FFF']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+84h],', '0']
jmp ['loc_1404']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+84h],', '0']
jmp ['loc_1404']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['[ebp+var_178],', 'ecx']
cmp ['[ebp+var_178],', '6']
ja ['$LN39']
mov ['edx,', '[ebp+var_178]']
jmp ['ds:$LN97[edx*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_DEFAULT']
jmp ['loc_10CE']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_NUMBERS_SPECIAL']
jmp ['loc_10CE']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_GROUP_NUMBERS_WITH_R']
jmp ['short', 'loc_10CE']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_INVERSE_NUMBERS_AS_L']
jmp ['short', 'loc_10CE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '1']
jz ['short', 'loc_1072']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_INVERSE_LIKE_DIRECT_WITH_MARKS']
jmp ['short', 'loc_107C']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_INVERSE_LIKE_DIRECT']
jmp ['short', 'loc_10CE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '1']
jz ['short', 'loc_1095']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_INVERSE_FOR_NUMBERS_SPECIAL_WITH_MARKS']
jmp ['short', 'loc_109F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+74h],', 'offset', '_impTab_INVERSE_FOR_NUMBERS_SPECIAL']
jmp ['short', 'loc_10CE']
xor ['eax,', 'eax']
jnz ['short', 'loc_10CE']
mov ['ecx,', 'ds:?__LINE__Var@?1??ubidi_setPara_56@@9@9']
add ['ecx,', '0ABh']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_13COJANIEC@?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+arg_10],', '0']
jnz ['loc_11AF']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+88h],', '1']
jg ['loc_11AF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
and ['ecx,', '80000000h']
jnz ['loc_11AF']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1136']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
cmp ['edx,', '[ecx]']
jl ['short', 'loc_1136']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_178],', 'ecx']
jmp ['short', 'loc_1143']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_178],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+62h]']
test ['edx,', 'edx']
jz ['short', 'loc_1175']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
cmp ['dword', 'ptr', '[ecx],', '0']
jg ['short', 'loc_1175']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['eax,', 'al']
mov ['[ebp+var_17C],', 'eax']
jmp ['short', 'loc_1182']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+61h]']
mov ['[ebp+var_17C],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_178]']
and ['eax,', '1']
push ['eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_17C]']
and ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_resolveImplicitLevels']
add ['esp,', '14h']
jmp ['loc_13D9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_11F1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_11F1']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['edx,', 'al']
mov ['[ebp+var_178],', 'edx']
jmp ['short', 'loc_11FE']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
mov ['[ebp+var_178],', 'ecx']
mov ['dl,', 'byte', 'ptr', '[ebp+var_178]']
mov ['[ebp+var_41],', 'dl']
mov ['eax,', '[ebp+var_20]']
mov ['cl,', '[eax]']
mov ['[ebp+var_4D],', 'cl']
movzx ['eax,', '[ebp+var_41]']
movzx ['ecx,', '[ebp+var_4D]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_1227']
movzx ['eax,', '[ebp+var_4D]']
and ['eax,', '1']
mov ['[ebp+var_65],', 'al']
jmp ['short', 'loc_1231']
movzx ['eax,', '[ebp+var_41]']
and ['eax,', '1']
mov ['[ebp+var_65],', 'al']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
mov ['al,', '[ebp+var_4D]']
mov ['[ebp+var_41],', 'al']
cmp ['[ebp+var_2C],', '0']
jle ['short', 'loc_12A4']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '7']
jnz ['short', 'loc_12A4']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1288']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[eax]']
jl ['short', 'loc_1288']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_178],', 'ecx']
jmp ['short', 'loc_1295']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_178],', 'eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_178]']
and ['ecx,', '1']
mov ['[ebp+var_59],', 'cl']
jmp ['short', 'loc_12AA']
mov ['al,', '[ebp+var_65]']
mov ['[ebp+var_59],', 'al']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_38]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['short', 'loc_12E6']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_38]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_41]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_12E4']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_38]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '5D800h']
jz ['short', 'loc_12E6']
jmp ['short', 'loc_12AA']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_12FB']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', '[eax]']
mov ['[ebp+var_4D],', 'cl']
jmp ['short', 'loc_134D']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1337']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
cmp ['edx,', '[ecx]']
jl ['short', 'loc_1337']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_178],', 'ecx']
jmp ['short', 'loc_1344']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_178],', 'eax']
mov ['cl,', 'byte', 'ptr', '[ebp+var_178]']
mov ['[ebp+var_4D],', 'cl']
movzx ['eax,', '[ebp+var_41]']
and ['eax,', '0FFFFFF7Fh']
movzx ['ecx,', '[ebp+var_4D]']
and ['ecx,', '0FFFFFF7Fh']
cmp ['eax,', 'ecx']
jge ['short', 'loc_1370']
movzx ['eax,', '[ebp+var_4D]']
and ['eax,', '1']
mov ['[ebp+var_65],', 'al']
jmp ['short', 'loc_137A']
movzx ['eax,', '[ebp+var_41]']
and ['eax,', '1']
mov ['[ebp+var_65],', 'al']
movzx ['eax,', '[ebp+var_41]']
and ['eax,', '80h']
jnz ['short', 'loc_13A5']
movzx ['eax,', '[ebp+var_65]']
push ['eax']
movzx ['ecx,', '[ebp+var_59]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_resolveImplicitLevels']
add ['esp,', '14h']
jmp ['short', 'loc_13CD']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
and ['ecx,', '0FFFFFF7Fh']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '[ebp+var_2C]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jl ['short', 'loc_13A5']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_8]']
jl ['loc_1231']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+158h],', '0']
jle ['short', 'loc_13F8']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+158h]']
mov ['[eax],', 'edx']
jmp ['loc_15AB']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_adjustWSLevels']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jle ['loc_1568']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '1']
jz ['loc_1568']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+58h],', '5']
jz ['short', 'loc_1438']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+58h],', '6']
jnz ['loc_1568']
mov ['[ebp+var_74],', '0']
jmp ['short', 'loc_144A']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '1']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_74]']
cmp ['ecx,', '[eax+88h]']
jge ['loc_1568']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[ecx+edx*8]']
sub ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_74]']
mov ['al,', '[ecx+edx*8+4]']
mov ['[ebp+var_A1],', 'al']
movzx ['eax,', '[ebp+var_A1]']
test ['eax,', 'eax']
jnz ['short', 'loc_1497']
jmp ['short', 'loc_1441']
cmp ['[ebp+var_74],', '0']
jnz ['short', 'loc_14A9']
mov ['[ebp+var_178],', '0']
jmp ['short', 'loc_14BF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[ecx+edx*8-8]']
mov ['[ebp+var_178],', 'eax']
mov ['ecx,', '[ebp+var_178]']
mov ['[ebp+var_8C],', 'ecx']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_14DF']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_8C]']
jl ['short', 'loc_1563']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_80]']
mov ['cl,', '[eax]']
mov ['[ebp+var_AD],', 'cl']
movzx ['eax,', '[ebp+var_AD]']
test ['eax,', 'eax']
jnz ['short', 'loc_1547']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_98]']
jge ['short', 'loc_1530']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_98]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '7']
jnz ['short', 'loc_1530']
mov ['eax,', '[ebp+var_98]']
sub ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
jmp ['short', 'loc_150E']
push ['4']
mov ['eax,', '[ebp+var_98]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
jmp ['short', 'loc_1563']
movzx ['ecx,', '[ebp+var_AD]']
mov ['eax,', '1']
shl ['eax,', 'cl']
and ['eax,', '2002h']
jz ['short', 'loc_155E']
jmp ['short', 'loc_1563']
jmp ['loc_14D6']
jmp ['loc_1441']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '2']
jz ['short', 'loc_158A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+14h]']
sub ['edx,', '[ecx+160h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
jmp ['short', 'loc_159F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+150h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_setParaSuccess']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '17Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN48']
dd ['offset', '$LN47']
dd ['offset', '$LN39']
dd ['offset', '$LN46']
dd ['offset', '$LN45']
dd ['offset', '$LN42']
assume ['cs:_rdata']
public ['??_C@_13COJANIEC@?$AA0?$AA?$AA@']
assume ['cs:_rdata']
public ['??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\ubidi.c>,0']
assume ['cs:_data']
public ['?__LINE__Var@?1??ubidi_setPara_56@@9@9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_getDirProps	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '420h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_420]']
mov ['ecx,', '108h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_24],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_30],', 'ecx']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_51],', '0']
mov ['[ebp+var_5D],', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
xor ['edx,', 'edx']
cmp ['ecx,', '0FEh']
setnl ['dl']
mov ['[ebp+var_69],', 'dl']
movsx ['eax,', '[ebp+var_69]']
test ['eax,', 'eax']
jz ['short', 'loc_16E7']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+58h],', '5']
jz ['short', 'loc_16C9']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+58h],', '6']
jz ['short', 'loc_16C9']
mov ['[ebp+var_419],', '0']
jmp ['short', 'loc_16D0']
mov ['[ebp+var_419],', '1']
movsx ['eax,', '[ebp+var_419]']
test ['eax,', 'eax']
jz ['short', 'loc_16E7']
mov ['[ebp+var_420],', '1']
jmp ['short', 'loc_16F1']
mov ['[ebp+var_420],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_420]']
mov ['[ebp+var_75],', 'cl']
mov ['[ebp+var_84],', '0FFFFFFFFh']
mov ['[ebp+var_90],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '2']
mov ['[ebp+var_99],', 'cl']
mov ['[ebp+var_B1],', '0Ah']
mov ['[ebp+var_348],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '4']
jz ['short', 'loc_1743']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
and ['ecx,', '1']
mov ['[ebp+var_5D],', 'cl']
movsx ['eax,', '[ebp+var_69]']
test ['eax,', 'eax']
jz ['short', 'loc_17D4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
movzx ['edx,', '[ebp+var_5D]']
mov ['[ecx+4],', 'edx']
mov ['al,', '[ebp+var_5D]']
mov ['[ebp+var_B1],', 'al']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+68h],', '0']
jle ['short', 'loc_17C8']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_firstL_R_AL']
add ['esp,', '4']
mov ['[ebp+var_51],', 'al']
movzx ['ecx,', '[ebp+var_51]']
cmp ['ecx,', '0Ah']
jz ['short', 'loc_17C8']
movzx ['eax,', '[ebp+var_51]']
test ['eax,', 'eax']
jnz ['short', 'loc_17AC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['dword', 'ptr', '[ecx+4],', '0']
jmp ['short', 'loc_17BC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['dword', 'ptr', '[ecx+4],', '1']
mov ['[ebp+var_A8],', '0']
jmp ['short', 'loc_17D2']
mov ['[ebp+var_A8],', '1']
jmp ['short', 'loc_17F1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ecx+4],', 'eax']
mov ['[ebp+var_A8],', '0']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_30]']
jge ['loc_1C2C']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_48]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_186E']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_30]']
jz ['short', 'loc_186E']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_C]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_354],', 'dx']
movzx ['eax,', '[ebp+var_354]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_186E']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_48]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_354]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getCustomizedClass_56']
add ['esp,', '8']
mov ['[ebp+var_51],', 'al']
movzx ['ecx,', '[ebp+var_51]']
mov ['edx,', '1']
shl ['edx,', 'cl']
or ['edx,', '[ebp+var_3C]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_24]']
mov ['cl,', '[ebp+var_51]']
mov ['[eax-1],', 'cl']
cmp ['[ebp+var_48],', '0FFFFh']
jle ['short', 'loc_18BC']
mov ['eax,', '[ebp+var_3C]']
or ['eax,', '40000h']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax-2],', '12h']
movsx ['eax,', '[ebp+var_99]']
test ['eax,', 'eax']
jz ['short', 'loc_18FD']
mov ['eax,', '[ebp+var_48]']
and ['eax,', '0FFFFFFFCh']
cmp ['eax,', '200Ch']
jz ['short', 'loc_18EE']
mov ['eax,', '[ebp+var_48]']
sub ['eax,', '202Ah']
cmp ['eax,', '5']
jb ['short', 'loc_18EE']
mov ['eax,', '[ebp+var_48]']
sub ['eax,', '2066h']
cmp ['eax,', '4']
jnb ['short', 'loc_18FD']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
movzx ['eax,', '[ebp+var_51]']
test ['eax,', 'eax']
jnz ['short', 'loc_1967']
cmp ['[ebp+var_A8],', '1']
jnz ['short', 'loc_1934']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['dword', 'ptr', '[eax+ecx*8-4],', '0']
mov ['[ebp+var_A8],', '0']
jmp ['short', 'loc_195B']
cmp ['[ebp+var_A8],', '2']
jnz ['short', 'loc_195B']
cmp ['[ebp+var_348],', '7Dh']
jg ['short', 'loc_1951']
mov ['eax,', '[ebp+var_3C]']
or ['eax,', '100000h']
mov ['[ebp+var_3C],', 'eax']
mov ['[ebp+var_A8],', '3']
mov ['[ebp+var_B1],', '0']
jmp ['loc_17F1']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '1']
jz ['short', 'loc_197D']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '0Dh']
jnz ['loc_1A08']
cmp ['[ebp+var_A8],', '1']
jnz ['short', 'loc_19AC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['dword', 'ptr', '[eax+ecx*8-4],', '1']
mov ['[ebp+var_A8],', '0']
jmp ['short', 'loc_19E7']
cmp ['[ebp+var_A8],', '2']
jnz ['short', 'loc_19E7']
cmp ['[ebp+var_348],', '7Dh']
jg ['short', 'loc_19DD']
mov ['eax,', '[ebp+var_348]']
mov ['ecx,', '[ebp+eax*4+var_2B4]']
mov ['edx,', '[ebp+var_18]']
mov ['byte', 'ptr', '[edx+ecx],', '15h']
mov ['eax,', '[ebp+var_3C]']
or ['eax,', '200000h']
mov ['[ebp+var_3C],', 'eax']
mov ['[ebp+var_A8],', '3']
mov ['[ebp+var_B1],', '1']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_1A03']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '1']
mov ['[ebp+var_84],', 'eax']
jmp ['loc_17F1']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '13h']
jl ['short', 'loc_1A86']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '15h']
jg ['short', 'loc_1A86']
mov ['eax,', '[ebp+var_348]']
add ['eax,', '1']
mov ['[ebp+var_348],', 'eax']
cmp ['[ebp+var_348],', '7Dh']
jg ['short', 'loc_1A58']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_348]']
mov ['[ebp+ecx*4+var_2B4],', 'eax']
mov ['eax,', '[ebp+var_348]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_A8]']
mov ['[ebp+eax+var_33C],', 'cl']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '13h']
jnz ['short', 'loc_1A77']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax-1],', '14h']
mov ['[ebp+var_A8],', '2']
jmp ['short', 'loc_1A81']
mov ['[ebp+var_A8],', '3']
jmp ['loc_17F1']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '16h']
jnz ['short', 'loc_1AE6']
cmp ['[ebp+var_A8],', '2']
jnz ['short', 'loc_1AAC']
cmp ['[ebp+var_348],', '7Dh']
jg ['short', 'loc_1AAC']
mov ['eax,', '[ebp+var_3C]']
or ['eax,', '100000h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_348],', '0']
jl ['short', 'loc_1AE1']
cmp ['[ebp+var_348],', '7Dh']
jg ['short', 'loc_1AD2']
mov ['eax,', '[ebp+var_348]']
movsx ['ecx,', '[ebp+eax+var_33C]']
mov ['[ebp+var_A8],', 'ecx']
mov ['eax,', '[ebp+var_348]']
sub ['eax,', '1']
mov ['[ebp+var_348],', 'eax']
jmp ['loc_17F1']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '7']
jnz ['loc_1C27']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_30]']
jge ['short', 'loc_1B15']
cmp ['[ebp+var_48],', '0Dh']
jnz ['short', 'loc_1B15']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
cmp ['edx,', '0Ah']
jnz ['short', 'loc_1B15']
jmp ['loc_17F1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['edx,', '[ebp+var_24]']
mov ['[eax+ecx*8-8],', 'edx']
movsx ['eax,', '[ebp+var_75]']
test ['eax,', 'eax']
jz ['short', 'loc_1B5C']
movzx ['eax,', '[ebp+var_B1]']
cmp ['eax,', '1']
jnz ['short', 'loc_1B5C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['dword', 'ptr', '[eax+ecx*8-4],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '4']
jz ['short', 'loc_1B7F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_90]']
mov ['[eax+160h],', 'ecx']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_30]']
jge ['loc_1C22']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+88h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_checkParaCount']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1BBA']
xor ['al,', 'al']
jmp ['loc_1DA4']
movsx ['eax,', '[ebp+var_69]']
test ['eax,', 'eax']
jz ['short', 'loc_1BF1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
movzx ['edx,', '[ebp+var_5D]']
mov ['[eax+ecx*8-4],', 'edx']
mov ['[ebp+var_A8],', '1']
mov ['al,', '[ebp+var_5D]']
mov ['[ebp+var_B1],', 'al']
jmp ['short', 'loc_1C18']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['edx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[edx+61h]']
mov ['[eax+ecx*8-4],', 'edx']
mov ['[ebp+var_A8],', '0']
mov ['[ebp+var_348],', '0FFFFFFFFh']
jmp ['loc_17F1']
jmp ['loc_17F1']
cmp ['[ebp+var_348],', '7Dh']
jle ['short', 'loc_1C49']
mov ['[ebp+var_348],', '7Dh']
mov ['[ebp+var_A8],', '2']
cmp ['[ebp+var_348],', '0']
jl ['short', 'loc_1C8D']
cmp ['[ebp+var_A8],', '2']
jnz ['short', 'loc_1C68']
mov ['eax,', '[ebp+var_3C]']
or ['eax,', '100000h']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_1C8D']
mov ['eax,', '[ebp+var_348]']
movsx ['ecx,', '[ebp+eax+var_33C]']
mov ['[ebp+var_A8],', 'ecx']
mov ['eax,', '[ebp+var_348]']
sub ['eax,', '1']
mov ['[ebp+var_348],', 'eax']
jmp ['short', 'loc_1C49']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '4']
jz ['short', 'loc_1CBA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
cmp ['ecx,', '[ebp+var_30]']
jge ['short', 'loc_1CB8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+88h],', 'ecx']
jmp ['short', 'loc_1CE2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['edx,', '[ebp+var_30]']
mov ['[eax+ecx*8-8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_90]']
mov ['[eax+160h],', 'ecx']
movsx ['eax,', '[ebp+var_75]']
test ['eax,', 'eax']
jz ['short', 'loc_1D10']
movzx ['eax,', '[ebp+var_B1]']
cmp ['eax,', '1']
jnz ['short', 'loc_1D10']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['dword', 'ptr', '[eax+ecx*8-4],', '1']
movsx ['eax,', '[ebp+var_69]']
test ['eax,', 'eax']
jz ['short', 'loc_1D2A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ecx+4]']
mov ['[edx+61h],', 'al']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_1D3C']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[eax+88h]']
jge ['short', 'loc_1D6C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ecx+edx*8+4]']
and ['eax,', '1']
mov ['ecx,', '[ebp+var_3C]']
or ['ecx,', '_flagLR[eax*4]']
mov ['[ebp+var_3C],', 'ecx']
jmp ['short', 'loc_1D33']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+60h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1D8A']
mov ['eax,', '[ebp+var_3C]']
and ['eax,', '80h']
jz ['short', 'loc_1D8A']
mov ['eax,', '[ebp+var_3C]']
or ['eax,', '1']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[eax+7Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_84]']
mov ['[eax+80h],', 'ecx']
mov ['al,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN72']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '420h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN71']
dd ['offset', '$LN69']
dd ['0FFFFFCC4h,', '7Eh']
dd ['offset', '$LN70']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_firstL_R_AL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_41],', '0Ah']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_14]']
jge ['loc_1F1B']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_2C]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_1ECB']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_1ECB']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_50],', 'dx']
movzx ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_1ECB']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_2C]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_50]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getCustomizedClass_56']
add ['esp,', '8']
mov ['[ebp+var_35],', 'al']
movzx ['eax,', '[ebp+var_41]']
cmp ['eax,', '0Ah']
jnz ['short', 'loc_1F09']
movzx ['eax,', '[ebp+var_35]']
test ['eax,', 'eax']
jz ['short', 'loc_1F01']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '1']
jz ['short', 'loc_1F01']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_1F07']
mov ['al,', '[ebp+var_35]']
mov ['[ebp+var_41],', 'al']
jmp ['short', 'loc_1F16']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '7']
jnz ['short', 'loc_1F16']
mov ['[ebp+var_41],', '0Ah']
jmp ['loc_1E57']
mov ['al,', '[ebp+var_41]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_checkParaCount	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '90h']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+8Ch],', 'eax']
jnz ['short', 'loc_1FE7']
cmp ['[ebp+var_8],', '0Ah']
jg ['short', 'loc_1F7E']
mov ['al,', '1']
jmp ['loc_2024']
push ['0A0h']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '24h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '3Ch']
push ['ecx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1FA6']
xor ['al,', 'al']
jmp ['short', 'loc_2024']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['[eax+8Ch],', 'edx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '90h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['50h']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '90h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['al,', '1']
jmp ['short', 'loc_2024']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1']
shl ['eax,', '3']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '24h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '3Ch']
push ['edx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_2013']
xor ['al,', 'al']
jmp ['short', 'loc_2024']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['[eax+8Ch],', 'edx']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_resolveExplicitLevels proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '16BCh']
call ['__chkstk']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_16BC]']
mov ['ecx,', '5AFh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_24],', 'ecx']
mov ['[ebp+var_30],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
mov ['[ebp+var_48],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_20CA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_20CA']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['edx,', 'al']
mov ['[ebp+var_16BC],', 'edx']
jmp ['short', 'loc_20D7']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
mov ['[ebp+var_16BC],', 'ecx']
mov ['dl,', 'byte', 'ptr', '[ebp+var_16BC]']
mov ['[ebp+var_5D],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0F4h],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_20FC']
xor ['eax,', 'eax']
jmp ['loc_2B37']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_directionFromFlags']
add ['esp,', '4']
mov ['[ebp+var_6C],', 'eax']
cmp ['[ebp+var_6C],', '2']
jz ['short', 'loc_2119']
mov ['eax,', '[ebp+var_6C]']
jmp ['loc_2B37']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+58h],', '1']
jle ['loc_21D3']
mov ['[ebp+var_78],', '0']
jmp ['short', 'loc_2138']
mov ['eax,', '[ebp+var_78]']
add ['eax,', '1']
mov ['[ebp+var_78],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_78]']
cmp ['ecx,', '[eax+88h]']
jge ['loc_21CB']
cmp ['[ebp+var_78],', '0']
jnz ['short', 'loc_215C']
mov ['[ebp+var_84],', '0']
jmp ['short', 'loc_2172']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_78]']
mov ['eax,', '[ecx+edx*8-8]']
mov ['[ebp+var_84],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_78]']
mov ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_90],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_78]']
mov ['al,', '[ecx+edx*8+4]']
mov ['[ebp+var_5D],', 'al']
mov ['eax,', '[ebp+var_84]']
mov ['[ebp+var_30],', 'eax']
jmp ['short', 'loc_21AE']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_90]']
jge ['short', 'loc_21C6']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_5D]']
mov ['[eax],', 'cl']
jmp ['short', 'loc_21A5']
jmp ['loc_212F']
mov ['eax,', '[ebp+var_6C]']
jmp ['loc_2B37']
mov ['eax,', '[ebp+var_48]']
and ['eax,', '79D800h']
jnz ['loc_234E']
lea ['eax,', '[ebp+var_AA0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_bracketInit']
add ['esp,', '8']
mov ['[ebp+var_9C],', '0']
jmp ['short', 'loc_220F']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '1']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_9C]']
cmp ['ecx,', '[eax+88h]']
jge ['loc_2346']
cmp ['[ebp+var_9C],', '0']
jnz ['short', 'loc_2239']
mov ['[ebp+var_A8],', '0']
jmp ['short', 'loc_2252']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_9C]']
mov ['eax,', '[ecx+edx*8-8]']
mov ['[ebp+var_A8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_9C]']
mov ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_B4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_9C]']
mov ['al,', '[ecx+edx*8+4]']
mov ['[ebp+var_5D],', 'al']
mov ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_30],', 'eax']
jmp ['short', 'loc_2294']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_B4]']
jge ['loc_2341']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_5D]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[eax]']
mov ['[ebp+var_51],', 'cl']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '12h']
jnz ['short', 'loc_22C4']
jmp ['short', 'loc_228B']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '7']
jnz ['short', 'loc_2312']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_3C]']
jge ['short', 'loc_230D']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
cmp ['edx,', '0Dh']
jnz ['short', 'loc_22F9']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+2]']
cmp ['edx,', '0Ah']
jnz ['short', 'loc_22F9']
jmp ['short', 'loc_228B']
movzx ['eax,', '[ebp+var_5D]']
push ['eax']
lea ['ecx,', '[ebp+var_AA0]']
push ['ecx']
call ['_bracketProcessB']
add ['esp,', '8']
jmp ['loc_228B']
mov ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_AA0]']
push ['ecx']
call ['_bracketProcessChar']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_233C']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['loc_2B37']
jmp ['loc_228B']
jmp ['loc_2200']
mov ['eax,', '[ebp+var_6C]']
jmp ['loc_2B37']
mov ['al,', '[ebp+var_5D]']
mov ['[ebp+var_AA9],', 'al']
mov ['al,', '[ebp+var_5D]']
mov ['[ebp+var_AC1],', 'al']
mov ['[ebp+var_AD0],', '0']
mov ['[ebp+var_BE4],', '0']
mov ['[ebp+var_BF0],', '0']
mov ['[ebp+var_BFC],', '0']
mov ['[ebp+var_C08],', '0']
lea ['eax,', '[ebp+var_15F4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_bracketInit']
add ['esp,', '8']
movzx ['ax,', '[ebp+var_5D]']
mov ['[ebp+var_BD8],', 'ax']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_30],', '0']
jmp ['short', 'loc_23CA']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_3C]']
jge ['loc_2ADD']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[eax]']
mov ['[ebp+var_51],', 'cl']
movzx ['eax,', '[ebp+var_51]']
mov ['[ebp+var_16BC],', 'eax']
mov ['ecx,', '[ebp+var_16BC]']
sub ['ecx,', '7']
mov ['[ebp+var_16BC],', 'ecx']
cmp ['[ebp+var_16BC],', '0Fh']
ja ['$LN7']
mov ['edx,', '[ebp+var_16BC]']
movzx ['eax,', 'ds:$LN78[edx]']
jmp ['ds:$LN84[eax*4]']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '40000h']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_AC1]']
mov ['[eax],', 'cl']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '0Bh']
jz ['short', 'loc_2446']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '0Ch']
jnz ['short', 'loc_245D']
movzx ['eax,', '[ebp+var_AA9]']
add ['eax,', '2']
and ['eax,', '0FFFFFF7Eh']
mov ['[ebp+var_AB5],', 'al']
jmp ['short', 'loc_2475']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '0FFFFFF7Fh']
add ['eax,', '1']
or ['eax,', '1']
mov ['[ebp+var_AB5],', 'al']
movzx ['eax,', '[ebp+var_AB5]']
cmp ['eax,', '7Dh']
jg ['short', 'loc_24F3']
cmp ['[ebp+var_BF0],', '0']
jnz ['short', 'loc_24F3']
cmp ['[ebp+var_BFC],', '0']
jnz ['short', 'loc_24F3']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_AD0],', 'eax']
mov ['al,', '[ebp+var_AB5]']
mov ['[ebp+var_AA9],', 'al']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '0Ch']
jz ['short', 'loc_24BA']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '0Fh']
jnz ['short', 'loc_24CC']
movzx ['eax,', '[ebp+var_AA9]']
or ['eax,', '80h']
mov ['[ebp+var_AA9],', 'al']
mov ['eax,', '[ebp+var_BE4]']
add ['eax,', '1']
mov ['[ebp+var_BE4],', 'eax']
movzx ['ax,', '[ebp+var_AA9]']
mov ['ecx,', '[ebp+var_BE4]']
mov ['[ebp+ecx*2+var_BD8],', 'ax']
jmp ['short', 'loc_250B']
cmp ['[ebp+var_BF0],', '0']
jnz ['short', 'loc_250B']
mov ['eax,', '[ebp+var_BFC]']
add ['eax,', '1']
mov ['[ebp+var_BFC],', 'eax']
jmp ['loc_2AD8']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '40000h']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_AC1]']
mov ['[eax],', 'cl']
cmp ['[ebp+var_BF0],', '0']
jz ['short', 'loc_2537']
jmp ['loc_2AD8']
cmp ['[ebp+var_BFC],', '0']
jz ['short', 'loc_2554']
mov ['eax,', '[ebp+var_BFC]']
sub ['eax,', '1']
mov ['[ebp+var_BFC],', 'eax']
jmp ['loc_2AD8']
cmp ['[ebp+var_BE4],', '0']
jbe ['short', 'loc_259E']
mov ['eax,', '[ebp+var_BE4]']
movzx ['ecx,', '[ebp+eax*2+var_BD8]']
cmp ['ecx,', '100h']
jge ['short', 'loc_259E']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_AD0],', 'eax']
mov ['eax,', '[ebp+var_BE4]']
sub ['eax,', '1']
mov ['[ebp+var_BE4],', 'eax']
mov ['eax,', '[ebp+var_BE4]']
mov ['cl,', 'byte', 'ptr', '[ebp+eax*2+var_BD8]']
mov ['[ebp+var_AA9],', 'cl']
jmp ['loc_2AD8']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '1']
mov ['ecx,', '_flagLR[eax*4]']
or ['ecx,', '400h']
or ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'ecx']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '0FFFFFF7Fh']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[ebp+var_30]']
mov ['[ecx],', 'al']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '0FFFFFF7Fh']
movzx ['ecx,', '[ebp+var_AC1]']
and ['ecx,', '0FFFFFF7Fh']
cmp ['eax,', 'ecx']
jz ['short', 'loc_2622']
movzx ['eax,', '[ebp+var_AA9]']
push ['eax']
movzx ['ecx,', '[ebp+var_AC1]']
push ['ecx']
mov ['edx,', '[ebp+var_AD0]']
push ['edx']
lea ['eax,', '[ebp+var_15F4]']
push ['eax']
call ['_bracketProcessBoundary']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '80000000h']
mov ['[ebp+var_48],', 'eax']
mov ['al,', '[ebp+var_AA9]']
mov ['[ebp+var_AC1],', 'al']
movzx ['eax,', '[ebp+var_51]']
cmp ['eax,', '14h']
jnz ['short', 'loc_264E']
movzx ['eax,', '[ebp+var_AA9]']
add ['eax,', '2']
and ['eax,', '0FFFFFF7Eh']
mov ['[ebp+var_AB5],', 'al']
jmp ['short', 'loc_2666']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '0FFFFFF7Fh']
add ['eax,', '1']
or ['eax,', '1']
mov ['[ebp+var_AB5],', 'al']
movzx ['eax,', '[ebp+var_AB5]']
cmp ['eax,', '7Dh']
jg ['loc_2727']
cmp ['[ebp+var_BF0],', '0']
jnz ['loc_2727']
cmp ['[ebp+var_BFC],', '0']
jnz ['loc_2727']
movzx ['ecx,', '[ebp+var_51]']
mov ['eax,', '1']
shl ['eax,', 'cl']
or ['eax,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_AD0],', 'eax']
mov ['eax,', '[ebp+var_C08]']
add ['eax,', '1']
mov ['[ebp+var_C08],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C08]']
cmp ['ecx,', '[eax+0F4h]']
jle ['short', 'loc_26D9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C08]']
mov ['[eax+0F4h],', 'ecx']
mov ['al,', '[ebp+var_AB5]']
mov ['[ebp+var_AA9],', 'al']
mov ['eax,', '[ebp+var_BE4]']
add ['eax,', '1']
mov ['[ebp+var_BE4],', 'eax']
movzx ['eax,', '[ebp+var_AA9]']
add ['eax,', '100h']
mov ['ecx,', '[ebp+var_BE4]']
mov ['[ebp+ecx*2+var_BD8],', 'ax']
movzx ['eax,', '[ebp+var_AA9]']
push ['eax']
lea ['ecx,', '[ebp+var_15F4]']
push ['ecx']
call ['_bracketProcessLRI_RLI']
add ['esp,', '8']
jmp ['short', 'loc_273F']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '9']
mov ['eax,', '[ebp+var_BF0]']
add ['eax,', '1']
mov ['[ebp+var_BF0],', 'eax']
jmp ['loc_2AD8']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '0FFFFFF7Fh']
movzx ['ecx,', '[ebp+var_AC1]']
and ['ecx,', '0FFFFFF7Fh']
cmp ['eax,', 'ecx']
jz ['short', 'loc_2792']
movzx ['eax,', '[ebp+var_AA9]']
push ['eax']
movzx ['ecx,', '[ebp+var_AC1]']
push ['ecx']
mov ['edx,', '[ebp+var_AD0]']
push ['edx']
lea ['eax,', '[ebp+var_15F4]']
push ['eax']
call ['_bracketProcessBoundary']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '80000000h']
mov ['[ebp+var_48],', 'eax']
cmp ['[ebp+var_BF0],', '0']
jz ['short', 'loc_27B8']
mov ['eax,', '[ebp+var_BF0]']
sub ['eax,', '1']
mov ['[ebp+var_BF0],', 'eax']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '9']
jmp ['loc_283E']
cmp ['[ebp+var_C08],', '0']
jz ['short', 'loc_2835']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '400000h']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_AD0],', 'eax']
mov ['[ebp+var_BFC],', '0']
mov ['eax,', '[ebp+var_BE4]']
movzx ['ecx,', '[ebp+eax*2+var_BD8]']
cmp ['ecx,', '100h']
jge ['short', 'loc_2806']
mov ['eax,', '[ebp+var_BE4]']
sub ['eax,', '1']
mov ['[ebp+var_BE4],', 'eax']
jmp ['short', 'loc_27DF']
mov ['eax,', '[ebp+var_BE4]']
sub ['eax,', '1']
mov ['[ebp+var_BE4],', 'eax']
mov ['eax,', '[ebp+var_C08]']
sub ['eax,', '1']
mov ['[ebp+var_C08],', 'eax']
lea ['eax,', '[ebp+var_15F4]']
push ['eax']
call ['_bracketProcessPDI']
add ['esp,', '4']
jmp ['short', 'loc_283E']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '9']
mov ['eax,', '[ebp+var_BE4]']
movzx ['ecx,', 'byte', 'ptr', '[ebp+eax*2+var_BD8]']
and ['ecx,', '0FFFFFEFFh']
mov ['[ebp+var_AA9],', 'cl']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '1']
mov ['ecx,', '_flagLR[eax*4]']
or ['ecx,', '400h']
or ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'ecx']
mov ['al,', '[ebp+var_AA9]']
mov ['[ebp+var_AC1],', 'al']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '0FFFFFF7Fh']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[ebp+var_30]']
mov ['[ecx],', 'al']
jmp ['loc_2AD8']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '80h']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_28DB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['ecx,', '[ebp+var_30]']
cmp ['ecx,', '[eax]']
jl ['short', 'loc_28DB']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_16BC],', 'ecx']
jmp ['short', 'loc_28E8']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_16BC],', 'eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[ebp+var_30]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_16BC]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_3C]']
jge ['loc_29DA']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
cmp ['edx,', '0Dh']
jnz ['short', 'loc_2929']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+2]']
cmp ['edx,', '0Ah']
jnz ['short', 'loc_2929']
jmp ['loc_2AD8']
mov ['[ebp+var_BF0],', '0']
mov ['eax,', '[ebp+var_BF0]']
mov ['[ebp+var_BFC],', 'eax']
mov ['[ebp+var_C08],', '0']
mov ['[ebp+var_BE4],', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_298F']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
cmp ['edx,', '[ecx]']
jl ['short', 'loc_298F']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_16BC],', 'ecx']
jmp ['short', 'loc_299C']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_16BC],', 'eax']
mov ['cl,', 'byte', 'ptr', '[ebp+var_16BC]']
mov ['[ebp+var_AA9],', 'cl']
mov ['dl,', '[ebp+var_AA9]']
mov ['[ebp+var_AC1],', 'dl']
movzx ['ax,', '[ebp+var_AA9]']
mov ['[ebp+var_BD8],', 'ax']
movzx ['eax,', '[ebp+var_AA9]']
push ['eax']
lea ['ecx,', '[ebp+var_15F4]']
push ['ecx']
call ['_bracketProcessB']
add ['esp,', '8']
jmp ['loc_2AD8']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_AC1]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '40000h']
mov ['[ebp+var_48],', 'eax']
jmp ['loc_2AD8']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '0FFFFFF7Fh']
movzx ['ecx,', '[ebp+var_AC1]']
and ['ecx,', '0FFFFFF7Fh']
cmp ['eax,', 'ecx']
jz ['short', 'loc_2A89']
movzx ['eax,', '[ebp+var_AA9]']
push ['eax']
movzx ['ecx,', '[ebp+var_AC1]']
push ['ecx']
mov ['edx,', '[ebp+var_AD0]']
push ['edx']
lea ['eax,', '[ebp+var_15F4]']
push ['eax']
call ['_bracketProcessBoundary']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '80000000h']
mov ['[ebp+var_48],', 'eax']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '80h']
jz ['short', 'loc_2A72']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '1']
mov ['ecx,', '[ebp+var_48]']
or ['ecx,', '_flagO[eax*4]']
mov ['[ebp+var_48],', 'ecx']
jmp ['short', 'loc_2A89']
movzx ['eax,', '[ebp+var_AA9]']
and ['eax,', '1']
mov ['ecx,', '[ebp+var_48]']
or ['ecx,', '_flagE[eax*4]']
mov ['[ebp+var_48],', 'ecx']
mov ['al,', '[ebp+var_AA9]']
mov ['[ebp+var_AC1],', 'al']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_30]']
mov ['cl,', '[ebp+var_AA9]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_15F4]']
push ['ecx']
call ['_bracketProcessChar']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2AC2']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_2B37']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_30]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '1']
shl ['edx,', 'cl']
or ['edx,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'edx']
jmp ['loc_23C1']
mov ['eax,', '[ebp+var_48]']
and ['eax,', '7FDFD8h']
jz ['short', 'loc_2AFE']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
and ['ecx,', '1']
mov ['edx,', '[ebp+var_48]']
or ['edx,', '_flagLR[ecx*4]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+60h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2B1C']
mov ['eax,', '[ebp+var_48]']
and ['eax,', '80h']
jz ['short', 'loc_2B1C']
mov ['eax,', '[ebp+var_48]']
or ['eax,', '1']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+7Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_directionFromFlags']
add ['esp,', '4']
mov ['[ebp+var_6C],', 'eax']
mov ['eax,', '[ebp+var_6C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN83']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '16BCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN82']
dd ['offset', '$LN79']
dd ['0FFFFF428h,', '0FEh']
dd ['offset', '$LN80']
dd ['0FFFFEA0Ch,', '9E4h']
dd ['offset', '$LN81']
align ['4']
dd ['offset', '$LN39_0']
dd ['offset', '$LN30']
dd ['offset', '$LN8']
dd ['offset', '$LN26']
dd ['offset', '$LN19']
dd ['offset', '$LN7']
db ['1,', '1,', '6,', '1']
db ['1,', '2,', '6,', '3']
db ['6,', '4,', '4,', '5']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketInit	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C8]']
mov ['ecx,', '32h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+1ECh],', '0']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+1F4h],', 'ax']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+1F6h],', 'ax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2C5D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2C5D']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['edx,', 'al']
mov ['[ebp+var_C4],', 'edx']
jmp ['short', 'loc_2C6A']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
mov ['[ebp+var_C4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['al,', 'byte', 'ptr', '[ebp+var_C4]']
mov ['[edx+1F8h],', 'al']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2CAB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2CAB']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['edx,', 'al']
mov ['[ebp+var_C4],', 'edx']
jmp ['short', 'loc_2CB8']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
mov ['[ebp+var_C4],', 'ecx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C4]']
and ['edx,', '1']
mov ['[ebp+var_C8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C8]']
mov ['[eax+1FCh],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['al,', 'byte', 'ptr', '[ebp+var_C8]']
mov ['[edx+1FAh],', 'al']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_C8]']
mov ['[ecx+1F9h],', 'dl']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+1F0h],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jz ['short', 'loc_2D34']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
mov ['[eax+1E4h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+20h]']
xor ['edx,', 'edx']
mov ['ecx,', '18h']
div ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+1E8h],', 'eax']
jmp ['short', 'loc_2D50']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+1E4h],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+1E8h],', '14h']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['dword', 'ptr', '[ecx+58h],', '1']
jz ['short', 'loc_2D72']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
cmp ['dword', 'ptr', '[eax+58h],', '6']
jz ['short', 'loc_2D72']
mov ['[ebp+var_C4],', '0']
jmp ['short', 'loc_2D7C']
mov ['[ebp+var_C4],', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_C4]']
mov ['[ecx+9E0h],', 'dl']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketProcessB proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1ECh],', '0']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1F6h],', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+1F8h],', 'cl']
movzx ['eax,', '[ebp+arg_4]']
and ['eax,', '1']
mov ['[ebp+var_C4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C4]']
mov ['[ecx+1FCh],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_C4]']
mov ['[eax+1FAh],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_C4]']
mov ['[edx+1F9h],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1F0h],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketProcessBoundary	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+1F0h]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4Ch]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '780000h']
jz ['short', 'loc_2E90']
jmp ['short', 'loc_2EFD']
movzx ['eax,', '[ebp+arg_C]']
and ['eax,', '0FFFFFF7Fh']
movzx ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0FFFFFF7Fh']
cmp ['eax,', 'ecx']
jle ['short', 'loc_2EAD']
mov ['al,', '[ebp+arg_C]']
mov ['[ebp+arg_8],', 'al']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[ecx+4]']
mov ['[eax+6],', 'dx']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+arg_C]']
mov ['[eax+8],', 'cl']
movzx ['eax,', '[ebp+arg_8]']
and ['eax,', '1']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_DC]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_DC]']
mov ['[eax+0Ah],', 'cl']
mov ['edx,', '[ebp+var_8]']
mov ['al,', 'byte', 'ptr', '[ebp+var_DC]']
mov ['[edx+9],', 'al']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketProcessLRI_RLI proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+1F0h]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+0Ah],', '0Ah']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax+6]']
mov ['[ebp+var_14],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1ECh],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '10h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[ebp+var_14]']
mov ['[eax+6],', 'cx']
mov ['edx,', '[ebp+var_8]']
mov ['ax,', '[ebp+var_14]']
mov ['[edx+4],', 'ax']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+8],', 'cl']
movzx ['eax,', '[ebp+arg_4]']
and ['eax,', '1']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_DC]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_DC]']
mov ['[eax+0Ah],', 'cl']
mov ['edx,', '[ebp+var_8]']
mov ['al,', 'byte', 'ptr', '[ebp+var_DC]']
mov ['[edx+9],', 'al']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketProcessPDI proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1ECh],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+1F0h]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+0Ah],', '0Ah']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketProcessChar proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '150h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_150]']
mov ['ecx,', '54h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+1F0h]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4Ch]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '0Ah']
jnz ['loc_32EB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[edx+eax*2]']
mov ['[ebp+var_44],', 'cx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
sub ['ecx,', '1']
mov ['[ebp+var_5C],', 'ecx']
jmp ['short', 'loc_30AD']
mov ['eax,', '[ebp+var_5C]']
sub ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
cmp ['[ebp+var_5C],', 'ecx']
jl ['loc_321A']
mov ['eax,', '[ebp+var_5C]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1E4h]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['[edx+eax+4],', 'ecx']
jz ['short', 'loc_30D8']
jmp ['short', 'loc_30A4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_bracketProcessClosing']
add ['esp,', '0Ch']
mov ['[ebp+var_29],', 'al']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '0Ah']
jnz ['short', 'loc_3103']
xor ['eax,', 'eax']
mov ['[ebp+var_44],', 'ax']
jmp ['loc_321A']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+0Ah],', '0Ah']
movzx ['eax,', '[ebp+var_29]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+50h]']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[edx+eax]']
mov ['[ebp+var_35],', 'cl']
movzx ['eax,', '[ebp+var_35]']
and ['eax,', '80h']
jz ['loc_31CE']
movzx ['eax,', '[ebp+var_35]']
and ['eax,', '1']
mov ['[ebp+var_29],', 'al']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+var_29]']
mov ['[eax+9],', 'cl']
movzx ['ecx,', '[ebp+var_29]']
mov ['eax,', '1']
shl ['eax,', 'cl']
mov ['[ebp+var_68],', 'ax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
mov ['[ebp+var_74],', 'ecx']
jmp ['short', 'loc_3173']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '1']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_74]']
cmp ['eax,', '[ebp+var_5C]']
jge ['short', 'loc_31AB']
mov ['eax,', '[ebp+var_74]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1E4h]']
movzx ['ecx,', '[ebp+var_68]']
movzx ['edx,', 'word', 'ptr', '[edx+eax+0Ch]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_74]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+1E4h]']
mov ['[ecx+eax+0Ch],', 'dx']
jmp ['short', 'loc_316A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+50h]']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+eax]']
and ['ecx,', '0FFFFFF7Fh']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['edx,', '[eax+50h]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_5C]']
imul ['edx,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+1E4h]']
mov ['ecx,', '[ecx+50h]']
mov ['edx,', '[eax+edx]']
movzx ['eax,', 'byte', 'ptr', '[ecx+edx]']
and ['eax,', '0FFFFFF7Fh']
mov ['ecx,', '[ebp+var_5C]']
imul ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+1E4h]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi]']
mov ['esi,', '[esi+50h]']
mov ['ecx,', '[edx+ecx]']
mov ['[esi+ecx],', 'al']
mov ['al,', '1']
jmp ['loc_3524']
jmp ['loc_30A4']
movzx ['eax,', '[ebp+var_44]']
test ['eax,', 'eax']
jz ['short', 'loc_3235']
movzx ['eax,', '[ebp+var_44]']
push ['eax']
call ['_u_getBidiPairedBracket_56']
add ['esp,', '4']
mov ['[ebp+var_50],', 'ax']
jmp ['short', 'loc_323B']
xor ['eax,', 'eax']
mov ['[ebp+var_50],', 'ax']
movzx ['eax,', '[ebp+var_50]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['eax,', 'ecx']
jz ['loc_32EB']
movzx ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_ubidi_getPairedBracketType_56']
add ['esp,', '8']
cmp ['eax,', '1']
jnz ['loc_32EB']
movzx ['eax,', '[ebp+var_50]']
cmp ['eax,', '232Ah']
jnz ['short', 'loc_329A']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['3009h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_bracketAddOpening']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_3298']
xor ['al,', 'al']
jmp ['loc_3524']
jmp ['short', 'loc_32C8']
movzx ['eax,', '[ebp+var_50]']
cmp ['eax,', '3009h']
jnz ['short', 'loc_32C8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['232Ah']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_bracketAddOpening']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_32C8']
xor ['al,', 'al']
jmp ['loc_3524']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
movzx ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_bracketAddOpening']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_32EB']
xor ['al,', 'al']
jmp ['loc_3524']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+50h]']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[edx+eax]']
mov ['[ebp+var_35],', 'cl']
movzx ['eax,', '[ebp+var_35]']
and ['eax,', '80h']
jz ['short', 'loc_3360']
movzx ['eax,', '[ebp+var_35]']
and ['eax,', '1']
mov ['[ebp+var_29],', 'al']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '8']
jz ['short', 'loc_3337']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '9']
jz ['short', 'loc_3337']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '0Ah']
jz ['short', 'loc_3337']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+arg_4]']
mov ['cl,', '[ebp+var_29]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+var_29]']
mov ['[eax+0Ah],', 'cl']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+var_29]']
mov ['[eax+9],', 'cl']
movzx ['eax,', '[ebp+var_29]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
jmp ['loc_3489']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '1']
jle ['short', 'loc_3372']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_33A8']
movzx ['eax,', '[ebp+var_1D]']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
mov ['[ebp+var_29],', 'al']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+var_1D]']
mov ['[eax+0Ah],', 'cl']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+var_1D]']
mov ['[eax+9],', 'cl']
movzx ['eax,', '[ebp+var_29]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
jmp ['loc_3489']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '2']
jnz ['short', 'loc_342A']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+0Ah],', '2']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_33F2']
mov ['[ebp+var_29],', '0']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9E0h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_33DE']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax],', '17h']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_3428']
mov ['[ebp+var_29],', '1']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '0Dh']
jnz ['short', 'loc_340D']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax],', '5']
jmp ['short', 'loc_3416']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax],', '18h']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+0Ch],', '1']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_3489']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '5']
jnz ['short', 'loc_3452']
mov ['[ebp+var_29],', '1']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+0Ah],', '5']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+0Ch],', '1']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_3489']
movzx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '11h']
jnz ['short', 'loc_347A']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax+0Ah]']
mov ['[ebp+var_29],', 'cl']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '0Ah']
jnz ['short', 'loc_3478']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+arg_4]']
mov ['cl,', '[ebp+var_29]']
mov ['[eax],', 'cl']
jmp ['short', 'loc_3489']
mov ['al,', '[ebp+var_1D]']
mov ['[ebp+var_29],', 'al']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+var_1D]']
mov ['[eax+0Ah],', 'cl']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '1']
jle ['short', 'loc_349F']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '0Dh']
jnz ['loc_3522']
movzx ['ecx,', '[ebp+var_29]']
neg ['ecx']
sbb ['ecx,', 'ecx']
neg ['ecx']
mov ['eax,', '1']
shl ['eax,', 'cl']
mov ['[ebp+var_8C],', 'ax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
mov ['[ebp+var_80],', 'ecx']
jmp ['short', 'loc_34CC']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
cmp ['[ebp+var_80],', 'ecx']
jge ['short', 'loc_3522']
mov ['eax,', '[ebp+var_80]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1E4h]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+edx]']
jle ['short', 'loc_3520']
mov ['eax,', '[ebp+var_80]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1E4h]']
movzx ['ecx,', '[ebp+var_8C]']
movzx ['edx,', 'word', 'ptr', '[edx+eax+0Ch]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_80]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+1E4h]']
mov ['[ecx+eax+0Ch],', 'dx']
jmp ['short', 'loc_34C3']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '150h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketAddOpening proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+1F0h]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+1E8h]']
jl ['loc_3624']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
shl ['ecx,', '1']
imul ['ecx,', '18h']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '20h']
push ['edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '38h']
push ['eax']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_35C0']
xor ['al,', 'al']
jmp ['loc_3680']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+1E4h],', 'eax']
jnz ['short', 'loc_35FD']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['1E0h']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+38h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+38h]']
mov ['[eax+1E4h],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['eax,', '[eax+20h]']
xor ['edx,', 'edx']
mov ['ecx,', '18h']
div ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1E8h],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
imul ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1E4h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax],', 'ecx']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['[eax+8],', 'edx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+0Ch],', 'ax']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax+6]']
add ['cx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+6],', 'cx']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_bracketProcessClosing proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+1F0h]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+1E4h]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
and ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['[ebp+var_35],', '1']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_3700']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ch]']
and ['ecx,', '1']
jnz ['short', 'loc_3712']
cmp ['[ebp+var_2C],', '1']
jnz ['short', 'loc_371A']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ch]']
and ['ecx,', '2']
jz ['short', 'loc_371A']
mov ['al,', 'byte', 'ptr', '[ebp+var_2C]']
mov ['[ebp+var_41],', 'al']
jmp ['short', 'loc_3768']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ch]']
and ['ecx,', '3']
jz ['short', 'loc_3756']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
xor ['edx,', 'edx']
cmp ['[ebp+arg_4],', 'ecx']
setz ['dl']
mov ['[ebp+var_35],', 'dl']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[eax+10h]']
jz ['short', 'loc_374E']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax+10h]']
mov ['[ebp+var_41],', 'cl']
jmp ['short', 'loc_3754']
mov ['al,', 'byte', 'ptr', '[ebp+var_2C]']
mov ['[ebp+var_41],', 'al']
jmp ['short', 'loc_3768']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[eax+6],', 'cx']
mov ['al,', '0Ah']
jmp ['loc_38B6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4Ch]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['al,', '[ebp+var_41]']
mov ['[edx+ecx],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4Ch]']
mov ['eax,', '[ebp+arg_8]']
mov ['cl,', '[ebp+var_41]']
mov ['[edx+eax],', 'cl']
movzx ['eax,', '[ebp+var_41]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_fixN0c']
add ['esp,', '10h']
movsx ['eax,', '[ebp+var_35]']
test ['eax,', 'eax']
jz ['short', 'loc_3805']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[eax+6],', 'cx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
cmp ['ecx,', 'eax']
jle ['short', 'loc_3800']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
sub ['ecx,', '1']
imul ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1E4h]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ecx+eax]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_3800']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax+6]']
sub ['cx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+6],', 'cx']
jmp ['short', 'loc_37BA']
jmp ['loc_38B3']
mov ['eax,', '[ebp+arg_8]']
neg ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
cmp ['[ebp+var_50],', 'ecx']
jl ['short', 'loc_3860']
mov ['eax,', '[ebp+var_50]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1E4h]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[eax+edx]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_3860']
mov ['eax,', '[ebp+var_50]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1E4h]']
mov ['dword', 'ptr', '[edx+eax+4],', '0']
mov ['eax,', '[ebp+var_50]']
sub ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
jmp ['short', 'loc_3819']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
jmp ['short', 'loc_3874']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
cmp ['[ebp+var_50],', 'ecx']
jge ['short', 'loc_38B3']
mov ['eax,', '[ebp+var_50]']
imul ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+1E4h]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jl ['short', 'loc_389E']
jmp ['short', 'loc_38B3']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jle ['short', 'loc_38B1']
mov ['eax,', '[ebp+var_20]']
mov ['dword', 'ptr', '[eax+4],', '0']
jmp ['short', 'loc_386B']
mov ['al,', '[ebp+var_41]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_fixN0c		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ECh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+1F0h]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4Ch]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
imul ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1E4h]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_393D']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '18h']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
cmp ['[ebp+var_2C],', 'ecx']
jge ['loc_39EC']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jl ['short', 'loc_3958']
jmp ['short', 'loc_392B']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+8]']
jge ['short', 'loc_3968']
jmp ['loc_39EC']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax]']
jl ['short', 'loc_3974']
jmp ['short', 'loc_392B']
movzx ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_14]']
cmp ['eax,', '[ecx+10h]']
jnz ['short', 'loc_3982']
jmp ['short', 'loc_39EC']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', '[ebp+arg_C]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
neg ['ecx']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_44]']
mov ['cl,', '[ebp+arg_C]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+4],', '0']
movzx ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_fixN0c']
add ['esp,', '10h']
movzx ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_fixN0c']
add ['esp,', '10h']
jmp ['loc_392B']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_directionFromFlags proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '20E002h']
jnz ['short', 'loc_3A49']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '20h']
jz ['short', 'loc_3A43']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '7DDFD8h']
jnz ['short', 'loc_3A49']
xor ['eax,', 'eax']
jmp ['short', 'loc_3A61']
jmp ['short', 'loc_3A61']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1901825h']
jnz ['short', 'loc_3A5C']
mov ['eax,', '1']
jmp ['short', 'loc_3A61']
jmp ['short', 'loc_3A61']
mov ['eax,', '2']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_checkExplicitLevels proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '124h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_124]']
mov ['ecx,', '49h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_44],', 'ecx']
mov ['[ebp+var_50],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0F4h],', '0']
mov ['[ebp+var_38],', '0']
jmp ['short', 'loc_3ACE']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['loc_3C15']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', '[eax]']
mov ['[ebp+var_59],', 'cl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '14h']
jz ['short', 'loc_3B02']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '15h']
jnz ['short', 'loc_3B27']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[eax+0F4h]']
jle ['short', 'loc_3B25']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+0F4h],', 'ecx']
jmp ['short', 'loc_3B4B']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '16h']
jnz ['short', 'loc_3B3B']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_3B4B']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '7']
jnz ['short', 'loc_3B4B']
mov ['[ebp+var_2C],', '0']
movzx ['eax,', '[ebp+var_59]']
and ['eax,', '80h']
jz ['short', 'loc_3B78']
movzx ['eax,', '[ebp+var_59]']
and ['eax,', '0FFFFFF7Fh']
mov ['[ebp+var_59],', 'al']
movzx ['eax,', '[ebp+var_59]']
and ['eax,', '1']
mov ['ecx,', '[ebp+var_50]']
or ['ecx,', '_flagO[eax*4]']
mov ['[ebp+var_50],', 'ecx']
jmp ['short', 'loc_3B97']
movzx ['eax,', '[ebp+var_59]']
and ['eax,', '1']
movzx ['ecx,', '[ebp+var_11]']
mov ['edx,', '1']
shl ['edx,', 'cl']
or ['edx,', '_flagE[eax*4]']
or ['edx,', '[ebp+var_50]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3BCD']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['ecx,', '[ebp+var_38]']
cmp ['ecx,', '[eax]']
jl ['short', 'loc_3BCD']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_124],', 'ecx']
jmp ['short', 'loc_3BDA']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_124],', 'eax']
movzx ['ecx,', '[ebp+var_59]']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_124]']
cmp ['ecx,', 'edx']
jge ['short', 'loc_3BFA']
movzx ['eax,', '[ebp+var_59]']
test ['eax,', 'eax']
jnz ['short', 'loc_3C03']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '7']
jnz ['short', 'loc_3C03']
movzx ['eax,', '[ebp+var_59]']
cmp ['eax,', '7Dh']
jle ['short', 'loc_3C10']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['short', 'loc_3C4B']
jmp ['loc_3AC5']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '7FDFD8h']
jz ['short', 'loc_3C36']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
and ['ecx,', '1']
mov ['edx,', '[ebp+var_50]']
or ['edx,', '_flagLR[ecx*4]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_50]']
mov ['[eax+7Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_directionFromFlags']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '124h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_addPoint	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14Ch']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_3CC2']
push ['50h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+10h],', 'eax']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jnz ['short', 'loc_3CB9']
mov ['eax,', '[ebp+var_18]']
mov ['dword', 'ptr', '[eax+0Ch],', '7']
jmp ['loc_3D58']
mov ['eax,', '[ebp+var_18]']
mov ['dword', 'ptr', '[eax],', '0Ah']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx]']
jl ['short', 'loc_3D24']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_24],', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax]']
shl ['ecx,', '1']
shl ['ecx,', '3']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+10h]']
push ['eax']
call ['_uprv_realloc_56']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+10h],', 'eax']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jnz ['short', 'loc_3D18']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['dword', 'ptr', '[eax+0Ch],', '7']
jmp ['short', 'loc_3D58']
jmp ['short', 'loc_3D24']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax]']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+10h]']
mov ['edx,', '[ebp+var_C]']
mov ['[eax+ecx*8],', 'edx']
mov ['edx,', '[ebp+var_8]']
mov ['[eax+ecx*8+4],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+4],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN9']
dd ['offset', '$LN8_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_resolveImplicitLevels proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1E0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1E0]']
mov ['ecx,', '78h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_BD],', '1']
mov ['[ebp+var_CC],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+80h]']
jge ['short', 'loc_3E4C']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+62h]']
test ['eax,', 'eax']
jz ['short', 'loc_3E18']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8Ch]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx]']
jl ['short', 'loc_3E18']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['eax,', 'al']
mov ['[ebp+var_1DC],', 'eax']
jmp ['short', 'loc_3E25']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+61h]']
mov ['[ebp+var_1DC],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_1DC]']
and ['eax,', '1']
jz ['short', 'loc_3E4C']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+58h],', '5']
jz ['short', 'loc_3E43']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+58h],', '6']
jnz ['short', 'loc_3E4C']
mov ['[ebp+var_1DD],', '1']
jmp ['short', 'loc_3E53']
mov ['[ebp+var_1DD],', '0']
mov ['al,', '[ebp+var_1DD]']
mov ['[ebp+var_B1],', 'al']
mov ['[ebp+var_30],', '0FFFFFFFFh']
mov ['[ebp+var_2C],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['edx,', '[ebp+arg_4]']
mov ['al,', '[ecx+edx]']
mov ['[ebp+var_20],', 'al']
movzx ['eax,', '[ebp+var_20]']
and ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+74h]']
mov ['eax,', '[edx+eax*4]']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+74h]']
movzx ['edx,', '[ebp+var_20]']
and ['edx,', '1']
mov ['eax,', '[ecx+edx*4+8]']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_3EDF']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+68h],', '0']
jle ['short', 'loc_3EDF']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_lastL_R_AL']
add ['esp,', '4']
mov ['[ebp+var_D5],', 'al']
movzx ['eax,', '[ebp+var_D5]']
cmp ['eax,', '4']
jz ['short', 'loc_3EDF']
mov ['al,', '[ebp+var_D5]']
mov ['[ebp+arg_C],', 'al']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '16h']
jnz ['loc_3F89']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0F4h],', '0']
jl ['loc_3F89']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['ecx,', '[ecx+eax]']
mov ['[ebp+var_34],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['ecx,', '[eax+ecx+4]']
mov ['[ebp+var_54],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['cx,', '[eax+ecx+0Ch]']
mov ['[ebp+var_78],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['ecx,', '[eax+ecx+8]']
mov ['[ebp+var_28],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0F4h],', 'ecx']
jmp ['short', 'loc_3FDB']
mov ['[ebp+var_34],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '11h']
jnz ['short', 'loc_3FB1']
movzx ['eax,', '[ebp+arg_C]']
add ['eax,', '1']
mov ['[ebp+var_78],', 'ax']
jmp ['short', 'loc_3FB7']
xor ['eax,', 'eax']
mov ['[ebp+var_78],', 'ax']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
movzx ['edx,', '[ebp+arg_C]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_processPropertySeq']
add ['esp,', '14h']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_60],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_48],', 'eax']
jmp ['short', 'loc_3FF2']
mov ['eax,', '[ebp+var_48]']
add ['eax,', '1']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+arg_8]']
jg ['loc_4327']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+arg_8]']
jl ['short', 'loc_407E']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+var_E4],', 'eax']
jmp ['short', 'loc_4023']
mov ['eax,', '[ebp+var_E4]']
sub ['eax,', '1']
mov ['[ebp+var_E4],', 'eax']
mov ['eax,', '[ebp+var_E4]']
cmp ['eax,', '[ebp+arg_4]']
jle ['short', 'loc_404B']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_E4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '5D800h']
jz ['short', 'loc_404B']
jmp ['short', 'loc_4014']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_E4]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '14h']
jz ['short', 'loc_406B']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '15h']
jnz ['short', 'loc_4070']
jmp ['loc_4327']
mov ['al,', '[ebp+arg_10]']
mov ['[ebp+var_8D],', 'al']
jmp ['loc_4199']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_48]']
mov ['cl,', '[eax]']
mov ['[ebp+var_ED],', 'cl']
movzx ['eax,', '[ebp+var_ED]']
cmp ['eax,', '7']
jnz ['short', 'loc_40A5']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0F4h],', '0FFFFFFFFh']
movsx ['eax,', '[ebp+var_B1]']
test ['eax,', 'eax']
jz ['loc_4186']
movzx ['eax,', '[ebp+var_ED]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_40CC']
mov ['[ebp+var_ED],', '1']
jmp ['loc_4186']
movzx ['eax,', '[ebp+var_ED]']
cmp ['eax,', '2']
jnz ['loc_4186']
mov ['eax,', '[ebp+var_CC]']
cmp ['eax,', '[ebp+var_48]']
jg ['loc_4173']
mov ['[ebp+var_BD],', '1']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_CC],', 'eax']
mov ['eax,', '[ebp+var_48]']
add ['eax,', '1']
mov ['[ebp+var_108],', 'eax']
jmp ['short', 'loc_4118']
mov ['eax,', '[ebp+var_108]']
add ['eax,', '1']
mov ['[ebp+var_108],', 'eax']
mov ['eax,', '[ebp+var_108]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_4173']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_108]']
mov ['cl,', '[eax]']
mov ['[ebp+var_F9],', 'cl']
movzx ['eax,', '[ebp+var_F9]']
test ['eax,', 'eax']
jz ['short', 'loc_4157']
movzx ['eax,', '[ebp+var_F9]']
cmp ['eax,', '1']
jz ['short', 'loc_4157']
movzx ['eax,', '[ebp+var_F9]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_4171']
mov ['al,', '[ebp+var_F9]']
mov ['[ebp+var_BD],', 'al']
mov ['eax,', '[ebp+var_108]']
mov ['[ebp+var_CC],', 'eax']
jmp ['short', 'loc_4173']
jmp ['short', 'loc_4109']
movzx ['eax,', '[ebp+var_BD]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_4186']
mov ['[ebp+var_ED],', '5']
movzx ['eax,', '[ebp+var_ED]']
mov ['cl,', '_groupProp[eax]']
mov ['[ebp+var_8D],', 'cl']
mov ['ax,', '[ebp+var_78]']
mov ['[ebp+var_6C],', 'ax']
movzx ['eax,', '[ebp+var_6C]']
shl ['eax,', '4']
movzx ['ecx,', '[ebp+var_8D]']
mov ['dl,', '_impTabProps[eax+ecx]']
mov ['[ebp+var_A5],', 'dl']
movzx ['eax,', '[ebp+var_A5]']
and ['eax,', '1Fh']
mov ['[ebp+var_78],', 'ax']
movzx ['eax,', '[ebp+var_A5]']
sar ['eax,', '5']
mov ['[ebp+var_84],', 'ax']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_41FA']
movzx ['eax,', '[ebp+var_84]']
test ['eax,', 'eax']
jnz ['short', 'loc_41FA']
mov ['eax,', '1']
mov ['[ebp+var_84],', 'ax']
movzx ['eax,', '[ebp+var_84]']
test ['eax,', 'eax']
jz ['loc_4322']
movzx ['eax,', '[ebp+var_6C]']
shl ['eax,', '4']
mov ['cl,', 'byte_47[eax]']
mov ['[ebp+var_99],', 'cl']
movzx ['eax,', '[ebp+var_84]']
mov ['[ebp+var_1DC],', 'eax']
mov ['ecx,', '[ebp+var_1DC]']
sub ['ecx,', '1']
mov ['[ebp+var_1DC],', 'ecx']
cmp ['[ebp+var_1DC],', '3']
ja ['loc_42F8']
mov ['edx,', '[ebp+var_1DC]']
jmp ['ds:$LN57[edx*4]']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
movzx ['edx,', '[ebp+var_99]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_processPropertySeq']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_54],', 'eax']
jmp ['loc_4322']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_60],', 'eax']
jmp ['loc_4322']
mov ['eax,', '[ebp+var_60]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
movzx ['edx,', '[ebp+var_99]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_processPropertySeq']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_60]']
push ['ecx']
push ['4']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_processPropertySeq']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_54],', 'eax']
jmp ['short', 'loc_4322']
mov ['eax,', '[ebp+var_60]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
movzx ['edx,', '[ebp+var_99]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_processPropertySeq']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_60]']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_60],', 'eax']
jmp ['short', 'loc_4322']
xor ['eax,', 'eax']
jnz ['short', 'loc_4322']
mov ['ecx,', 'ds:?__LINE__Var@?1??resolveImplicitLevels@@9@9@80f45a25']
add ['ecx,', '7Eh']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_13COJANIEC@?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_3FE9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+10h]']
jnz ['short', 'loc_4362']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+70h],', '0']
jle ['short', 'loc_4362']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_firstL_R_AL_EN_AN']
add ['esp,', '4']
mov ['[ebp+var_111],', 'al']
movzx ['eax,', '[ebp+var_111]']
cmp ['eax,', '4']
jz ['short', 'loc_4362']
mov ['al,', '[ebp+var_111]']
mov ['[ebp+arg_10],', 'al']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+var_48],', 'eax']
jmp ['short', 'loc_4376']
mov ['eax,', '[ebp+var_48]']
sub ['eax,', '1']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+arg_4]']
jle ['short', 'loc_4398']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_48]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '1']
shl ['edx,', 'cl']
and ['edx,', '5D800h']
jz ['short', 'loc_4398']
jmp ['short', 'loc_436D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_48]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '14h']
jz ['short', 'loc_43B9']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '15h']
jnz ['loc_4450']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+10h]']
jge ['loc_4450']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0F4h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['dx,', '[ebp+var_78]']
mov ['[eax+ecx+0Ch],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['edx,', '[ebp+var_28]']
mov ['[eax+ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['edx,', '[ebp+var_54]']
mov ['[eax+ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F4h]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
mov ['edx,', '[ebp+var_34]']
mov ['[ecx+eax],', 'edx']
jmp ['short', 'loc_446D']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
movzx ['edx,', '[ebp+arg_10]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_processPropertySeq']
add ['esp,', '14h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN56']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '1E0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN55']
dd ['offset', '$LN54']
align ['4']
dd ['offset', '$LN12']
dd ['offset', '$LN11_0']
dd ['offset', '$LN10_0']
assume ['cs:_data']
public ['?__LINE__Var@?1??resolveImplicitLevels@@9@9@80f45a25']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_processPropertySeq proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '148h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_148]']
mov ['ecx,', '52h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax+14h]']
mov ['[ebp+var_11],', 'cl']
movzx ['eax,', '[ebp+var_11]']
mov ['ecx,', '[ebp+var_2C]']
lea ['edx,', '[ecx+eax*8]']
movzx ['eax,', '[ebp+arg_8]']
mov ['cl,', '[edx+eax]']
mov ['[ebp+var_5],', 'cl']
movzx ['eax,', '[ebp+var_5]']
and ['eax,', '0Fh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+14h],', 'eax']
movzx ['eax,', '[ebp+var_5]']
sar ['eax,', '4']
mov ['ecx,', '[ebp+var_38]']
mov ['dl,', '[ecx+eax]']
mov ['[ebp+var_1D],', 'dl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_2C]']
mov ['al,', '[edx+ecx*8+7]']
mov ['[ebp+var_59],', 'al']
movzx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jz ['loc_4AAC']
movzx ['eax,', '[ebp+var_1D]']
mov ['[ebp+var_148],', 'eax']
mov ['ecx,', '[ebp+var_148]']
sub ['ecx,', '1']
mov ['[ebp+var_148],', 'ecx']
cmp ['[ebp+var_148],', '0Dh']
ja ['loc_4A7F']
mov ['edx,', '[ebp+var_148]']
jmp ['ds:$LN65[edx*4]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax+8],', 'ecx']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+arg_C],', 'ecx']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
add ['ecx,', '1']
mov ['[ebp+var_4D],', 'cl']
movzx ['eax,', '[ebp+var_4D]']
push ['eax']
mov ['ecx,', '[ebp+var_74]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_setLevelsOutsideIsolates']
add ['esp,', '10h']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
add ['ecx,', '2']
mov ['[ebp+var_4D],', 'cl']
movzx ['eax,', '[ebp+var_4D]']
push ['eax']
mov ['ecx,', '[ebp+var_74]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_setLevelsOutsideIsolates']
add ['esp,', '10h']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jl ['short', 'loc_4625']
push ['1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_addPoint']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14Ch']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4650']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx+8]']
jg ['short', 'loc_46AF']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', '0FFFFFFFFh']
movzx ['eax,', '[ebp+var_11]']
mov ['ecx,', '[ebp+var_2C]']
mov ['dl,', '[ecx+eax*8+7]']
mov ['[ebp+var_4D],', 'dl']
movzx ['eax,', '[ebp+var_4D]']
and ['eax,', '1']
jz ['short', 'loc_4683']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jle ['short', 'loc_4683']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+arg_C],', 'ecx']
movzx ['eax,', '[ebp+arg_8]']
cmp ['eax,', '5']
jnz ['short', 'loc_46AA']
push ['1']
mov ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '1']
mov ['[ebp+var_80],', 'ecx']
jmp ['short', 'loc_46C6']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_74]']
jge ['short', 'loc_46E7']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
sub ['ecx,', '2']
and ['ecx,', '0FFFFFFFEh']
mov ['edx,', '[ebp+var_44]']
add ['edx,', '[ebp+var_80]']
mov ['[edx],', 'cl']
jmp ['short', 'loc_46BD']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', '0FFFFFFFFh']
movzx ['eax,', '[ebp+arg_8]']
cmp ['eax,', '5']
jnz ['short', 'loc_4724']
push ['1']
mov ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14Ch']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_4748']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+8]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+8],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+10h],', 'eax']
jmp ['loc_4AAC']
movzx ['eax,', '[ebp+arg_8]']
cmp ['eax,', '3']
jnz ['short', 'loc_47EA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['edx,', '[ebp+var_74]']
movzx ['eax,', 'byte', 'ptr', '[ecx+edx]']
cmp ['eax,', '5']
jnz ['short', 'loc_47EA']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+58h],', '6']
jz ['short', 'loc_47EA']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFFh']
jnz ['short', 'loc_47AB']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+10h],', 'eax']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jl ['short', 'loc_47D3']
push ['1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_addPoint']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFEh']
push ['1']
mov ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFFh']
jnz ['short', 'loc_47FC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax+0Ch],', 'ecx']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+10h],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+8],', '0FFFFFFFFh']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+var_74]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_4830']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
cmp ['[ebp+var_80],', '0']
jl ['short', 'loc_4846']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
and ['ecx,', '1']
jnz ['short', 'loc_4846']
jmp ['short', 'loc_4827']
cmp ['[ebp+var_80],', '0']
jl ['short', 'loc_4875']
push ['4']
mov ['eax,', '[ebp+var_80]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14Ch']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax+8],', 'ecx']
jmp ['loc_4AAC']
push ['1']
mov ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
push ['2']
mov ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14Ch']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+8]']
mov ['[eax+4],', 'edx']
movzx ['eax,', '[ebp+arg_8]']
cmp ['eax,', '5']
jnz ['short', 'loc_48EA']
push ['4']
mov ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_addPoint']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
movzx ['edx,', '[ebp+var_59]']
add ['ecx,', 'edx']
mov ['[ebp+var_4D],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_80],', 'ecx']
jmp ['short', 'loc_4913']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_74]']
jge ['short', 'loc_4939']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_4D]']
cmp ['ecx,', 'edx']
jge ['short', 'loc_4937']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
mov ['cl,', '[ebp+var_4D]']
mov ['[eax],', 'cl']
jmp ['short', 'loc_490A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14Ch']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax+8],', 'ecx']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax+1Ch]']
mov ['[ebp+var_4D],', 'cl']
mov ['eax,', '[ebp+var_74]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_497B']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_80]']
cmp ['ecx,', '[eax+8]']
jl ['loc_4A25']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_4D]']
add ['edx,', '3']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_49ED']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_4D]']
add ['edx,', '3']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_49D1']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+var_44]']
add ['edx,', '[ebp+var_80]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_499E']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_4D]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_49ED']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_49D1']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_4D]']
add ['edx,', '2']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_4A11']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
mov ['cl,', '[ebp+var_4D]']
mov ['[eax],', 'cl']
jmp ['loc_4972']
movzx ['eax,', '[ebp+var_4D]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_44]']
add ['ecx,', '[ebp+var_80]']
mov ['[ecx],', 'al']
jmp ['loc_4972']
jmp ['loc_4AAC']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
add ['ecx,', '1']
mov ['[ebp+var_4D],', 'cl']
mov ['eax,', '[ebp+var_74]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_4A4B']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_80]']
cmp ['ecx,', '[eax+8]']
jl ['short', 'loc_4A7D']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_4D]']
cmp ['ecx,', 'edx']
jle ['short', 'loc_4A7B']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+var_44]']
add ['edx,', '[ebp+var_80]']
mov ['[edx],', 'cl']
jmp ['short', 'loc_4A42']
jmp ['short', 'loc_4AAC']
xor ['eax,', 'eax']
jnz ['short', 'loc_4AAC']
mov ['ecx,', 'ds:?__LINE__Var@?1??processPropertySeq@@9@9@80f45a25']
add ['ecx,', '0BDh']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FE@CHIMDBDO@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_13COJANIEC@?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', '[ebp+var_59]']
test ['eax,', 'eax']
jnz ['short', 'loc_4ABC']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+var_74]']
jge ['short', 'loc_4B18']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
movzx ['edx,', '[ebp+var_59]']
add ['ecx,', 'edx']
mov ['[ebp+var_4D],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+18h]']
jl ['short', 'loc_4AFF']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_4AE8']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+arg_10]']
jge ['short', 'loc_4AFD']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_80]']
mov ['cl,', '[ebp+var_4D]']
mov ['[eax],', 'cl']
jmp ['short', 'loc_4ADF']
jmp ['short', 'loc_4B18']
movzx ['eax,', '[ebp+var_4D]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_setLevelsOutsideIsolates']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '148h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN57_0']
dd ['offset', '$LN56_0']
dd ['offset', '$LN55_0']
dd ['offset', '$LN54_0']
dd ['offset', '$LN44']
dd ['offset', '$LN42_0']
dd ['offset', '$LN37']
dd ['offset', '$LN36']
dd ['offset', '$LN31']
dd ['offset', '$LN30_0']
dd ['offset', '$LN28']
dd ['offset', '$LN23']
dd ['offset', '$LN13_0']
assume ['cs:_data']
public ['?__LINE__Var@?1??processPropertySeq@@9@9@80f45a25']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_setLevelsOutsideIsolates proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_4BB0']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_4C03']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '16h']
jnz ['short', 'loc_4BD5']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_4BE6']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_38]']
mov ['cl,', '[ebp+arg_C]']
mov ['[eax],', 'cl']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '14h']
jz ['short', 'loc_4BF8']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '15h']
jnz ['short', 'loc_4C01']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_4BA7']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_lastL_R_AL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jle ['loc_4CFA']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_4CB3']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_4CB3']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[ecx+eax*2-2]']
mov ['[ebp+var_44],', 'dx']
movzx ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_4CB3']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
movzx ['eax,', '[ebp+var_44]']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_2C]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getCustomizedClass_56']
add ['esp,', '8']
mov ['[ebp+var_35],', 'al']
movzx ['eax,', '[ebp+var_35]']
test ['eax,', 'eax']
jnz ['short', 'loc_4CD2']
xor ['al,', 'al']
jmp ['short', 'loc_4CFC']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '1']
jz ['short', 'loc_4CE4']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_4CE8']
mov ['al,', '1']
jmp ['short', 'loc_4CFC']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '7']
jnz ['short', 'loc_4CF5']
mov ['al,', '4']
jmp ['short', 'loc_4CFC']
jmp ['loc_4C42']
mov ['al,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_firstL_R_AL_EN_AN proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+6Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+70h]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_14]']
jge ['loc_4E0F']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_2C]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_4DBB']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_4DBB']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_44],', 'dx']
movzx ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_4DBB']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_2C]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_44]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getCustomizedClass_56']
add ['esp,', '8']
mov ['[ebp+var_35],', 'al']
movzx ['eax,', '[ebp+var_35]']
test ['eax,', 'eax']
jnz ['short', 'loc_4DDA']
xor ['al,', 'al']
jmp ['short', 'loc_4E11']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '1']
jz ['short', 'loc_4DEC']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '0Dh']
jnz ['short', 'loc_4DF0']
mov ['al,', '1']
jmp ['short', 'loc_4E11']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '2']
jnz ['short', 'loc_4DFD']
mov ['al,', '2']
jmp ['short', 'loc_4E11']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '5']
jnz ['short', 'loc_4E0A']
mov ['al,', '3']
jmp ['short', 'loc_4E11']
jmp ['loc_4D47']
mov ['al,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_adjustWSLevels	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
and ['ecx,', '7DDB80h']
jz ['loc_4FF5']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+60h]']
mov ['[ebp+var_29],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+84h]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '0']
jle ['loc_4FF5']
cmp ['[ebp+var_20],', '0']
jle ['loc_4F2C']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[ecx]']
mov ['edx,', '1']
shl ['edx,', 'cl']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '7DDB80h']
jz ['short', 'loc_4F2C']
movsx ['eax,', '[ebp+var_29]']
test ['eax,', 'eax']
jz ['short', 'loc_4ED6']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '80h']
jz ['short', 'loc_4ED6']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax],', '0']
jmp ['short', 'loc_4F27']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_4F0C']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax]']
jl ['short', 'loc_4F0C']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_100],', 'ecx']
jmp ['short', 'loc_4F19']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_100],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_20]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_100]']
mov ['[ecx],', 'dl']
jmp ['loc_4E89']
cmp ['[ebp+var_20],', '0']
jle ['loc_4FF0']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[ecx]']
mov ['edx,', '1']
shl ['edx,', 'cl']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '5D800h']
jz ['short', 'loc_4F6F']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_20]']
mov ['dl,', '[ecx+1]']
mov ['[eax],', 'dl']
jmp ['short', 'loc_4FEB']
movsx ['eax,', '[ebp+var_29]']
test ['eax,', 'eax']
jz ['short', 'loc_4F8E']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '80h']
jz ['short', 'loc_4F8E']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax],', '0']
jmp ['short', 'loc_4FF0']
jmp ['short', 'loc_4FEB']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '180h']
jz ['short', 'loc_4FEB']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_4FCE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax]']
jl ['short', 'loc_4FCE']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_100],', 'ecx']
jmp ['short', 'loc_4FDB']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_100],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_20]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_100]']
mov ['[ecx],', 'dl']
jmp ['short', 'loc_4FF0']
jmp ['loc_4F2C']
jmp ['loc_4E7F']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_setParaSuccess	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+68h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+70h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_setParaRunsOnly proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '208h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_208]']
mov ['ecx,', '82h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+58h],', '0']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_50A9']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
push ['0']
movzx ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_setPara_56']
add ['esp,', '18h']
jmp ['$cleanup3$10051']
mov ['eax,', '[ebp+arg_8]']
imul ['eax,', '7']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_50CF']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['$cleanup3$10051']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+Dst],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['[ebp+var_140],', 'ecx']
mov ['eax,', '[ebp+var_140]']
and ['eax,', '1']
jz ['short', 'loc_5122']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
and ['ecx,', '0FFFFFFFEh']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+5Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
or ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+5Ch],', 'ecx']
movzx ['eax,', '[ebp+arg_C]']
and ['eax,', '1']
mov ['[ebp+arg_C],', 'al']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
push ['0']
movzx ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_setPara_56']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_5158']
jmp ['$cleanup3$10051']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getLevels_56']
add ['esp,', '8']
mov ['[ebp+Src],', 'eax']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+84h]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+Size],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+78h]']
mov ['[ebp+var_5C],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
push ['2']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_writeReordered_56']
add ['esp,', '14h']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ubidi_getVisualMap_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_51EC']
jmp ['$cleanup2$10064']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_140]']
mov ['[eax+5Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+58h],', '5']
movzx ['eax,', '[ebp+arg_C]']
xor ['eax,', '1']
mov ['[ebp+arg_C],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+48h]']
mov ['[ebp+var_65],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+48h],', '0']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
push ['0']
movzx ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_80]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_setPara_56']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_65]']
mov ['[eax+48h],', 'cl']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ubidi_getRuns_56']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_5261']
jmp ['$cleanup1$10067']
mov ['[ebp+var_D4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0h]']
mov ['[ebp+var_BC],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E4h]']
mov ['[ebp+var_74],', 'ecx']
mov ['[ebp+var_A4],', '0']
mov ['[ebp+var_8C],', '0']
jmp ['short', 'loc_52BD']
mov ['eax,', '[ebp+var_8C]']
add ['eax,', '1']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_A4]']
add ['ecx,', '[ebp+var_C8]']
mov ['[ebp+var_A4],', 'ecx']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[ebp+var_BC]']
jge ['loc_53E2']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ecx+eax+4]']
sub ['edx,', '[ebp+var_A4]']
mov ['[ebp+var_C8],', 'edx']
cmp ['[ebp+var_C8],', '2']
jge ['short', 'loc_52F6']
jmp ['short', 'loc_529C']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ecx+eax]']
and ['edx,', '7FFFFFFFh']
mov ['[ebp+var_B0],', 'edx']
mov ['eax,', '[ebp+var_B0]']
add ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
jmp ['short', 'loc_5331']
mov ['eax,', '[ebp+var_98]']
add ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_B0]']
add ['eax,', '[ebp+var_C8]']
cmp ['[ebp+var_98],', 'eax']
jge ['loc_53DD']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_128],', 'edx']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4-4]']
mov ['[ebp+var_134],', 'edx']
mov ['eax,', '[ebp+var_128]']
sub ['eax,', '[ebp+var_134]']
js ['short', 'loc_5390']
mov ['ecx,', '[ebp+var_128]']
sub ['ecx,', '[ebp+var_134]']
mov ['[ebp+var_208],', 'ecx']
jmp ['short', 'loc_53A4']
mov ['edx,', '[ebp+var_128]']
sub ['edx,', '[ebp+var_134]']
neg ['edx']
mov ['[ebp+var_208],', 'edx']
cmp ['[ebp+var_208],', '1']
jnz ['short', 'loc_53C9']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+var_128]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_134]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jz ['short', 'loc_53D8']
mov ['eax,', '[ebp+var_D4]']
add ['eax,', '1']
mov ['[ebp+var_D4],', 'eax']
jmp ['loc_5322']
jmp ['loc_529C']
cmp ['[ebp+var_D4],', '0']
jz ['loc_5480']
mov ['eax,', '[ebp+var_BC]']
add ['eax,', '[ebp+var_D4]']
imul ['eax,', '0Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+49h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '28h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '40h']
push ['ecx']
call ['_ubidi_getMemory_56']
add ['esp,', '10h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_547B']
cmp ['[ebp+var_BC],', '1']
jnz ['short', 'loc_5446']
mov ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+40h]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[eax+8]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+40h]']
mov ['[eax+0E4h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E4h]']
mov ['[ebp+var_74],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0h]']
add ['ecx,', '[ebp+var_D4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0E0h],', 'ecx']
jmp ['short', 'loc_5480']
jmp ['$cleanup1$10067']
mov ['eax,', '[ebp+var_BC]']
sub ['eax,', '1']
mov ['[ebp+var_8C],', 'eax']
jmp ['short', 'loc_54A0']
mov ['eax,', '[ebp+var_8C]']
sub ['eax,', '1']
mov ['[ebp+var_8C],', 'eax']
cmp ['[ebp+var_8C],', '0']
jl ['$cleanup1$10067']
cmp ['[ebp+var_8C],', '0']
jnz ['short', 'loc_54C4']
mov ['eax,', '[ebp+var_74]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_208],', 'ecx']
jmp ['short', 'loc_54ED']
mov ['edx,', '[ebp+var_8C]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_8C]']
sub ['eax,', '1']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_74]']
mov ['esi,', '[ebp+var_74]']
mov ['edx,', '[ecx+edx+4]']
sub ['edx,', '[esi+eax+4]']
mov ['[ebp+var_208],', 'edx']
mov ['eax,', '[ebp+var_208]']
mov ['[ebp+var_C8],', 'eax']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_B0],', 'edx']
mov ['eax,', '[ebp+var_B0]']
shr ['eax,', '1Fh']
mov ['[ebp+var_110],', 'eax']
mov ['eax,', '[ebp+var_B0]']
and ['eax,', '7FFFFFFFh']
mov ['[ebp+var_B0],', 'eax']
cmp ['[ebp+var_C8],', '2']
jge ['short', 'loc_55B5']
cmp ['[ebp+var_D4],', '0']
jz ['short', 'loc_556E']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+var_8C]']
add ['ecx,', '[ebp+var_D4]']
imul ['ecx,', '0Ch']
add ['ecx,', '[ebp+var_74]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[eax+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_B0]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_11C],', 'edx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+var_11C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['ecx,', '[ebp+var_110]']
shl ['ecx,', '1Fh']
or ['ecx,', '[ebp+var_11C]']
mov ['edx,', '[ebp+var_8C]']
add ['edx,', '[ebp+var_D4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_74]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_5491']
cmp ['[ebp+var_110],', '0']
jz ['short', 'loc_55EC']
mov ['eax,', '[ebp+var_B0]']
mov ['[ebp+var_EC],', 'eax']
mov ['eax,', '[ebp+var_C8]']
mov ['ecx,', '[ebp+var_B0]']
lea ['edx,', '[ecx+eax-1]']
mov ['[ebp+var_F8],', 'edx']
mov ['[ebp+var_104],', '1']
jmp ['short', 'loc_5618']
mov ['eax,', '[ebp+var_C8]']
mov ['ecx,', '[ebp+var_B0]']
lea ['edx,', '[ecx+eax-1]']
mov ['[ebp+var_EC],', 'edx']
mov ['eax,', '[ebp+var_B0]']
mov ['[ebp+var_F8],', 'eax']
mov ['[ebp+var_104],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_EC]']
mov ['[ebp+var_98],', 'eax']
jmp ['short', 'loc_5638']
mov ['eax,', '[ebp+var_98]']
add ['eax,', '[ebp+var_104]']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_98]']
cmp ['eax,', '[ebp+var_F8]']
jz ['loc_584D']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_128],', 'edx']
mov ['eax,', '[ebp+var_98]']
add ['eax,', '[ebp+var_104]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_134],', 'edx']
mov ['eax,', '[ebp+var_128]']
sub ['eax,', '[ebp+var_134]']
js ['short', 'loc_5696']
mov ['ecx,', '[ebp+var_128]']
sub ['ecx,', '[ebp+var_134]']
mov ['[ebp+var_208],', 'ecx']
jmp ['short', 'loc_56AA']
mov ['edx,', '[ebp+var_128]']
sub ['edx,', '[ebp+var_134]']
neg ['edx']
mov ['[ebp+var_208],', 'edx']
cmp ['[ebp+var_208],', '1']
jnz ['short', 'loc_56D3']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+var_128]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_134]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jz ['loc_5848']
mov ['eax,', '[ebp+var_EC]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
cmp ['edx,', '[ebp+var_128]']
jge ['short', 'loc_56FB']
mov ['eax,', '[ebp+var_EC]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_208],', 'edx']
jmp ['short', 'loc_5707']
mov ['eax,', '[ebp+var_128]']
mov ['[ebp+var_208],', 'eax']
mov ['ecx,', '[ebp+var_208]']
mov ['[ebp+var_11C],', 'ecx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+var_11C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['ecx,', '[ebp+var_110]']
shl ['ecx,', '1Fh']
or ['ecx,', '[ebp+var_11C]']
mov ['edx,', '[ebp+var_8C]']
add ['edx,', '[ebp+var_D4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_74]']
mov ['[eax+edx],', 'ecx']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_8C]']
add ['ecx,', '[ebp+var_D4]']
imul ['ecx,', '0Ch']
mov ['edx,', '[ebp+var_74]']
mov ['esi,', '[ebp+var_74]']
mov ['eax,', '[esi+eax+4]']
mov ['[edx+ecx+4],', 'eax']
mov ['eax,', '[ebp+var_98]']
sub ['eax,', '[ebp+var_EC]']
js ['short', 'loc_578B']
mov ['ecx,', '[ebp+var_98]']
sub ['ecx,', '[ebp+var_EC]']
mov ['[ebp+var_208],', 'ecx']
jmp ['short', 'loc_579F']
mov ['edx,', '[ebp+var_98]']
sub ['edx,', '[ebp+var_EC]']
neg ['edx']
mov ['[ebp+var_208],', 'edx']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_208]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx+eax+4]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_8C]']
imul ['ecx,', '0Ch']
mov ['edx,', '[ebp+var_74]']
mov ['[edx+ecx+4],', 'eax']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ecx+eax+8]']
and ['edx,', '0Ah']
mov ['[ebp+var_E0],', 'edx']
mov ['eax,', '[ebp+var_8C]']
add ['eax,', '[ebp+var_D4]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ebp+var_E0]']
mov ['[ecx+eax+8],', 'edx']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_E0]']
not ['ecx']
mov ['edx,', '[ebp+var_74]']
and ['ecx,', '[edx+eax+8]']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
mov ['edx,', '[ebp+var_74]']
mov ['[edx+eax+8],', 'ecx']
mov ['eax,', '[ebp+var_98]']
add ['eax,', '[ebp+var_104]']
mov ['[ebp+var_EC],', 'eax']
mov ['eax,', '[ebp+var_D4]']
sub ['eax,', '1']
mov ['[ebp+var_D4],', 'eax']
jmp ['loc_5626']
cmp ['[ebp+var_D4],', '0']
jz ['short', 'loc_5884']
mov ['eax,', '[ebp+var_8C]']
imul ['eax,', '0Ch']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+var_8C]']
add ['ecx,', '[ebp+var_D4]']
imul ['ecx,', '0Ch']
add ['ecx,', '[ebp+var_74]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[eax+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_EC]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_F8]']
mov ['esi,', '[ebp+var_14]']
mov ['eax,', '[ecx+eax*4]']
cmp ['eax,', '[esi+edx*4]']
jge ['short', 'loc_58B2']
mov ['ecx,', '[ebp+var_EC]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_208],', 'eax']
jmp ['short', 'loc_58C4']
mov ['ecx,', '[ebp+var_F8]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_208],', 'eax']
mov ['ecx,', '[ebp+var_208]']
mov ['[ebp+var_11C],', 'ecx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+var_11C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['ecx,', '[ebp+var_110]']
shl ['ecx,', '1Fh']
or ['ecx,', '[ebp+var_11C]']
mov ['edx,', '[ebp+var_8C]']
add ['edx,', '[ebp+var_D4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_74]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_5491']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+61h]']
xor ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+61h],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Size]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_5C]']
mov ['[eax+78h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Size]']
cmp ['ecx,', '[eax+1Ch]']
jle ['short', 'loc_594D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+Size],', 'ecx']
push ['1']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax+84h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0E0h],', '1']
jle ['short', '$cleanup3$10051']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+78h],', '2']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+58h],', '3']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '208h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_orderParagraphsLTR_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_59ED']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+60h],', 'cl']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_isOrderParagraphsLTR_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5A22']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax+60h]']
jmp ['short', 'loc_5A24']
jmp ['short', 'loc_5A24']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getDirection_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5A7A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5A70']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5A7A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_5A7A']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+78h]']
jmp ['short', 'loc_5A7C']
jmp ['short', 'loc_5A7C']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5AD2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5AC8']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5AD2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_5AD2']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+8]']
jmp ['short', 'loc_5AD4']
jmp ['short', 'loc_5AD4']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getLength_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5B2A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5B20']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5B2A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_5B2A']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+0Ch]']
jmp ['short', 'loc_5B2C']
jmp ['short', 'loc_5B2C']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getProcessedLength_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5B82']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5B78']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5B82']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_5B82']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+10h]']
jmp ['short', 'loc_5B84']
jmp ['short', 'loc_5B84']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getResultLength_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5BDA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5BD0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5BDA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_5BDA']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+14h]']
jmp ['short', 'loc_5BDC']
jmp ['short', 'loc_5BDC']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getParaLevel_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5C32']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5C28']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5C32']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_5C32']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax+61h]']
jmp ['short', 'loc_5C34']
jmp ['short', 'loc_5C34']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_countParagraphs_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5C80']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5C86']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5C80']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jz ['short', 'loc_5C86']
xor ['eax,', 'eax']
jmp ['short', 'loc_5C8F']
jmp ['short', 'loc_5C8F']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+88h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getParagraphByIndex_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_5CC4']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_5CC9']
jmp ['loc_5DC5']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5CEF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5CFD']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5CEF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jz ['short', 'loc_5CFD']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1Bh']
jmp ['loc_5DC5']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_5D11']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+88h]']
jl ['short', 'loc_5D1F']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_5DC5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_0],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_5D42']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+edx*8-8]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_5D49']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_5D57']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_5D71']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ecx+eax*8]']
mov ['[edx],', 'ecx']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_5DC5']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+62h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5DAD']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jl ['short', 'loc_5DAD']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ubidi_getParaLevelAtIndex_56']
add ['esp,', '8']
movzx ['ecx,', 'al']
mov ['[ebp+var_D0],', 'ecx']
jmp ['short', 'loc_5DBA']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+61h]']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_D0]']
mov ['[ecx],', 'dl']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getParagraph_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_5E08']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_5E10']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_5EB6']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5E36']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_5E44']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5E36']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx]']
jz ['short', 'loc_5E44']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1Bh']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_5EB6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_0],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_5E5D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+10h]']
jl ['short', 'loc_5E6B']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_5EB6']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_5E7D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ecx+edx*8]']
jl ['short', 'loc_5E93']
jmp ['short', 'loc_5E74']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ubidi_getParagraphByIndex_56']
add ['esp,', '18h']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_setClassCallback_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_5EF8']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_5EFA']
jmp ['short', 'loc_5F4B']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5F0B']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_5F4B']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_5F1F']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+164h]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_5F33']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+164h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+168h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getClassCallback_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5F7A']
jmp ['short', 'loc_5FA2']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_5F8E']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+164h]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_5FA2']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['[eax],', 'edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ubidi_getCustomizedClass_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+164h],', '0']
jz ['short', 'loc_6004']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+164h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '17h']
jnz ['short', 'loc_601A']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_ubidi_getClass_56']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '17h']
jl ['short', 'loc_6027']
mov ['[ebp+var_8],', '0Ah']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_CheckEsp:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_ubidi_getSingleton_56:near']
extrn ['_memset:near']
extrn ['_uprv_malloc_56:near']
extrn ['_uprv_realloc_56:near']
extrn ['_uprv_free_56:near']
extrn ['_u_charDirection_56:near']
extrn ['_u_strlen_56:near']
extrn ['__imp___wassert:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['__chkstk:near']
extrn ['_ubidi_getPairedBracketType_56:near']
extrn ['_u_getBidiPairedBracket_56:near']
extrn ['_ubidi_getRuns_56:near']
extrn ['_ubidi_getVisualMap_56:near']
extrn ['_ubidi_writeReordered_56:near']
extrn ['_ubidi_getLevels_56:near']
extrn ['_ubidi_getClass_56:near']
end
