endp
_uprv_isASCIILetter_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '61h']
jl ['short', 'loc_30']
movsx ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '7Ah']
jle ['short', 'loc_4E']
movsx ['edx,', '[ebp+arg_0]']
cmp ['edx,', '41h']
jl ['short', 'loc_42']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '5Ah']
jle ['short', 'loc_4E']
mov ['[ebp+var_C4],', '0']
jmp ['short', 'loc_58']
mov ['[ebp+var_C4],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_C4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_toupper_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '61h']
jl ['short', 'loc_AA']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '7Ah']
jg ['short', 'loc_AA']
movsx ['eax,', '[ebp+arg_0]']
sub ['eax,', '20h']
mov ['[ebp+arg_0],', 'al']
mov ['al,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_asciitolower_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '41h']
jl ['short', 'loc_EE']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '5Ah']
jg ['short', 'loc_EE']
movsx ['eax,', '[ebp+arg_0]']
add ['eax,', '20h']
mov ['[ebp+arg_0],', 'al']
mov ['al,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_ebcdictolower_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0C1h']
jl ['short', 'loc_12C']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0C9h']
jle ['short', 'loc_158']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0D1h']
jl ['short', 'loc_142']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0D9h']
jle ['short', 'loc_158']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0E2h']
jl ['short', 'loc_162']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '0E9h']
jg ['short', 'loc_162']
movsx ['eax,', '[ebp+arg_0]']
sub ['eax,', '40h']
mov ['[ebp+arg_0],', 'al']
mov ['al,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_T_CString_toLowerCase_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1C9']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
push ['ecx']
call ['_uprv_asciitolower_56']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_CD],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
movsx ['eax,', '[ebp+var_CD]']
test ['eax,', 'eax']
jnz ['short', 'loc_196']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_T_CString_toUpperCase_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_23D']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
push ['ecx']
call ['_uprv_toupper_56']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_CD],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
movsx ['eax,', '[ebp+var_CD]']
test ['eax,', 'eax']
jnz ['short', 'loc_20A']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_T_CString_integerToString_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_34],', '1Eh']
mov ['[ebp+var_4C],', '0']
cmp ['[ebp+arg_8],', '2']
jl ['short', 'loc_296']
cmp ['[ebp+arg_8],', '10h']
jle ['short', 'loc_2BB']
mov ['eax,', 'ds:?__LINE__Var@?1??T_CString_integerToString_56@@9@9']
add ['eax,', '7']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_2E7']
cmp ['[ebp+arg_8],', '0Ah']
jnz ['short', 'loc_2E7']
mov ['eax,', '[ebp+arg_4]']
neg ['eax']
mov ['[ebp+var_58],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_4C]']
mov ['byte', 'ptr', '[eax],', '2Dh']
mov ['ecx,', '[ebp+var_4C]']
add ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
mov ['[ebp+var_34],', '1Dh']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+eax+Source],', '0']
mov ['eax,', '[ebp+var_58]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+var_3D],', 'dl']
movzx ['eax,', '[ebp+var_3D]']
cmp ['eax,', '9']
jg ['short', 'loc_319']
movzx ['ecx,', '[ebp+var_3D]']
add ['ecx,', '30h']
mov ['[ebp+var_120],', 'ecx']
jmp ['short', 'loc_326']
movzx ['edx,', '[ebp+var_3D]']
add ['edx,', '37h']
mov ['[ebp+var_120],', 'edx']
mov ['eax,', '[ebp+var_34]']
sub ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_120]']
mov ['[ebp+ecx+Source],', 'dl']
mov ['eax,', '[ebp+var_58]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_58],', '0']
jnz ['short', 'loc_2F6']
mov ['eax,', '[ebp+var_34]']
lea ['ecx,', '[ebp+eax+Source]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4C]']
push ['edx']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '1Eh']
sub ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_4C]']
lea ['edx,', '[ecx+eax-1]']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_4C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN12']
dd ['offset', '$LN11']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@']
unicode ['0,', '<radix>']
dw ['3Eh']
unicode ['0,', '<=2', '&&', 'radix>']
dw ['3Ch']
unicode ['0,', '<=16>,0']
assume ['cs:_rdata']
public ['??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\cstring.c>,0']
assume ['cs:_data']
public ['?__LINE__Var@?1??T_CString_integerToString_56@@9@9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_T_CString_int64ToString_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '124h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_124]']
mov ['ecx,', '49h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_34],', '1Eh']
mov ['[ebp+var_4C],', '0']
cmp ['[ebp+arg_C],', '2']
jb ['short', 'loc_48E']
cmp ['[ebp+arg_C],', '10h']
jbe ['short', 'loc_4B3']
mov ['eax,', 'ds:?__LINE__Var@?1??T_CString_int64ToString_56@@9@9']
add ['eax,', '7']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FI@NNKNIAPM@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1CM@NPJAKICH@?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DO?$AA?$DN?$AA2?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAa?$AAd?$AAi?$AAx?$AA?$DM?$AA?$DN?$AA1?$AA6?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_58],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jg ['short', 'loc_4F8']
jl ['short', 'loc_4CD']
cmp ['[ebp+arg_4],', '0']
jnb ['short', 'loc_4F8']
cmp ['[ebp+arg_C],', '0Ah']
jnz ['short', 'loc_4F8']
mov ['eax,', '[ebp+arg_4]']
neg ['eax']
mov ['ecx,', '[ebp+arg_8]']
adc ['ecx,', '0']
neg ['ecx']
mov ['[ebp+var_5C],', 'eax']
mov ['[ebp+var_58],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_4C]']
mov ['byte', 'ptr', '[eax],', '2Dh']
mov ['ecx,', '[ebp+var_4C]']
add ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
mov ['[ebp+var_34],', '1Dh']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+eax+Source],', '0']
mov ['eax,', '[ebp+arg_C]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
call ['__aullrem']
mov ['[ebp+var_3D],', 'al']
movzx ['eax,', '[ebp+var_3D]']
cmp ['eax,', '9']
jg ['short', 'loc_536']
movzx ['ecx,', '[ebp+var_3D]']
add ['ecx,', '30h']
mov ['[ebp+var_124],', 'ecx']
jmp ['short', 'loc_543']
movzx ['edx,', '[ebp+var_3D]']
add ['edx,', '37h']
mov ['[ebp+var_124],', 'edx']
mov ['eax,', '[ebp+var_34]']
sub ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_124]']
mov ['[ebp+ecx+Source],', 'dl']
mov ['eax,', '[ebp+arg_C]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
call ['__aulldiv']
mov ['[ebp+var_5C],', 'eax']
mov ['[ebp+var_58],', 'edx']
mov ['eax,', '[ebp+var_5C]']
or ['eax,', '[ebp+var_58]']
jnz ['short', 'loc_507']
mov ['eax,', '[ebp+var_34]']
lea ['ecx,', '[ebp+eax+Source]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4C]']
push ['edx']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '1Eh']
sub ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_4C]']
lea ['edx,', '[ecx+eax-1]']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_4C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '124h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_0']
dd ['offset', '$LN12_0']
align ['4']
assume ['cs:_data']
public ['?__LINE__Var@?1??T_CString_int64ToString_56@@9@9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_T_CString_stringToInteger_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Radix]']
push ['eax']
lea ['ecx,', '[ebp+EndPtr]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__strtoul']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_stricmp_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6B4']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_6A7']
xor ['eax,', 'eax']
jmp ['loc_744']
jmp ['short', 'loc_6AF']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_744']
jmp ['loc_744']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_6C6']
mov ['eax,', '1']
jmp ['loc_744']
jmp ['short', 'loc_744']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
movzx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jnz ['short', 'loc_6F3']
movzx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jnz ['short', 'loc_6EC']
xor ['eax,', 'eax']
jmp ['short', 'loc_744']
jmp ['short', 'loc_6F1']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_744']
jmp ['short', 'loc_730']
movzx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jnz ['short', 'loc_704']
mov ['eax,', '1']
jmp ['short', 'loc_744']
jmp ['short', 'loc_730']
movzx ['eax,', '[ebp+var_11]']
push ['eax']
call ['_uprv_asciitolower_56']
add ['esp,', '4']
movzx ['esi,', 'al']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
call ['_uprv_asciitolower_56']
add ['esp,', '4']
movzx ['edx,', 'al']
sub ['esi,', 'edx']
mov ['[ebp+var_8],', 'esi']
jz ['short', 'loc_730']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_744']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_6C6']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_strnicmp_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_798']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_78B']
xor ['eax,', 'eax']
jmp ['loc_84F']
jmp ['short', 'loc_793']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_84F']
jmp ['loc_84D']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_7AD']
mov ['eax,', '1']
jmp ['loc_84F']
jmp ['loc_84D']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_E8],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+var_E8],', '0']
jz ['loc_84D']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
movzx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jnz ['short', 'loc_7F9']
movzx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jnz ['short', 'loc_7F2']
xor ['eax,', 'eax']
jmp ['short', 'loc_84F']
jmp ['short', 'loc_7F7']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_84F']
jmp ['short', 'loc_836']
movzx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jnz ['short', 'loc_80A']
mov ['eax,', '1']
jmp ['short', 'loc_84F']
jmp ['short', 'loc_836']
movzx ['eax,', '[ebp+var_11]']
push ['eax']
call ['_uprv_asciitolower_56']
add ['esp,', '4']
movzx ['esi,', 'al']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
call ['_uprv_asciitolower_56']
add ['esp,', '4']
movzx ['edx,', 'al']
sub ['esi,', 'edx']
mov ['[ebp+var_8],', 'esi']
jz ['short', 'loc_836']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_84F']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_7AD']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_strdup_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+Size]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_8CB']
push ['1']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_strndup_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Size],', '0']
jge ['short', 'loc_919']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_strdup_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
jmp ['short', 'loc_95C']
mov ['eax,', '[ebp+Size]']
add ['eax,', '1']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_95C']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+Size]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_CheckEsp:near']
extrn ['_strcpy:near']
extrn ['__imp___wassert:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__aulldiv:near']
extrn ['__aullrem:near']
extrn ['__imp__strtoul:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_uprv_malloc_56:near']
extrn ['_strlen:near']
end
