endp
_udata_getHeaderSize_56	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_3A']
xor ['eax,', 'eax']
jmp ['short', 'loc_69']
jmp ['short', 'loc_69']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_4F']
mov ['eax,', '[ebp+arg_0]']
mov ['ax,', '[eax]']
jmp ['short', 'loc_69']
jmp ['short', 'loc_69']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
shl ['eax,', '8']
movzx ['ecx,', '[ebp+var_8]']
sar ['ecx,', '8']
or ['eax,', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_udata_getInfoSize_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A2']
xor ['eax,', 'eax']
jmp ['short', 'loc_D1']
jmp ['short', 'loc_D1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_B7']
mov ['eax,', '[ebp+arg_0]']
mov ['ax,', '[eax]']
jmp ['short', 'loc_D1']
jmp ['short', 'loc_D1']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
movzx ['eax,', '[ebp+var_8]']
shl ['eax,', '8']
movzx ['ecx,', '[ebp+var_8]']
sar ['ecx,', '8']
or ['eax,', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_offsetTOCEntryCount proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_114']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_offsetTOCLookupFn proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1C8']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_offsetTOCPrefixBinarySearch']
add ['esp,', '10h']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jl ['short', 'loc_1C2']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*8+4]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_1AA']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax],', 'edx']
jmp ['short', 'loc_1B3']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[eax+4]']
mov ['eax,', 'ecx']
jmp ['short', 'loc_1CE']
jmp ['short', 'loc_1C6']
xor ['eax,', 'eax']
jmp ['short', 'loc_1CE']
jmp ['short', 'loc_1CE']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_offsetTOCPrefixBinarySearch proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '118h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_118]']
mov ['ecx,', '46h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_2C],', '0']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_22B']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_321']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_strcmpAfterPrefix']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_24F']
xor ['eax,', 'eax']
jmp ['loc_321']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[edx+ecx*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_strcmpAfterPrefix']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_28A']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_321']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jge ['loc_31E']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_2B7']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_118],', 'ecx']
jmp ['short', 'loc_2C0']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_118],', 'edx']
mov ['eax,', '[ebp+var_118]']
mov ['[ebp+var_44],', 'eax']
lea ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[edx+ecx*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_strcmpAfterPrefix']
add ['esp,', '0Ch']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '0']
jge ['short', 'loc_2FD']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_319']
cmp ['[ebp+var_50],', '0']
jnz ['short', 'loc_30A']
mov ['eax,', '[ebp+var_38]']
jmp ['short', 'loc_321']
jmp ['short', 'loc_319']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_28A']
or ['eax,', '0FFFFFFFFh']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '118h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN17']
dd ['offset', '$LN14']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN15']
dd ['0FFFFFFBCh,', '4']
dd ['offset', '$LN16']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_strcmpAfterPrefix proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_14],', 'eax']
jnz ['short', 'loc_41C']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_41E']
jmp ['short', 'loc_429']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_3E7']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_pointerTOCEntryCount proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_476']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['short', 'loc_480']
mov ['[ebp+var_D0],', '0']
mov ['eax,', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_pointerTOCLookupFn proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_50E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '8']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_pointerTOCPrefixBinarySearch']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jl ['short', 'loc_508']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax*8+0Ch]']
push ['edx']
call ['_UDataMemory_normalizeDataPointer_56']
add ['esp,', '4']
jmp ['short', 'loc_514']
jmp ['short', 'loc_50C']
xor ['eax,', 'eax']
jmp ['short', 'loc_514']
jmp ['short', 'loc_514']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_pointerTOCPrefixBinarySearch proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '118h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_118]']
mov ['ecx,', '46h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_2C],', '0']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_56F']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_65C']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_strcmpAfterPrefix']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_590']
xor ['eax,', 'eax']
jmp ['loc_65C']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_strcmpAfterPrefix']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_5C8']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_65C']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jge ['loc_659']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_5F5']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_118],', 'ecx']
jmp ['short', 'loc_5FE']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_118],', 'edx']
mov ['eax,', '[ebp+var_118]']
mov ['[ebp+var_44],', 'eax']
lea ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_strcmpAfterPrefix']
add ['esp,', '0Ch']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '0']
jge ['short', 'loc_638']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_654']
cmp ['[ebp+var_50],', '0']
jnz ['short', 'loc_645']
mov ['eax,', '[ebp+var_38]']
jmp ['short', 'loc_65C']
jmp ['short', 'loc_654']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_5C8']
or ['eax,', '0FFFFFFFFh']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '118h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN17_0']
dd ['offset', '$LN14_0']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN15_0']
dd ['0FFFFFFBCh,', '4']
dd ['offset', '$LN16_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_udata_checkCommonData_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_70F']
jmp ['loc_87C']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_71E']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_72C']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '3']
jmp ['loc_868']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
cmp ['edx,', '0DAh']
jnz ['short', 'loc_769']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
cmp ['edx,', '27h']
jnz ['short', 'loc_769']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+8]']
test ['edx,', 'edx']
jnz ['short', 'loc_769']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+9]']
test ['edx,', 'edx']
jz ['short', 'loc_777']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '3']
jmp ['loc_868']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ch]']
cmp ['edx,', '43h']
jnz ['short', 'loc_7EB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Dh]']
cmp ['edx,', '6Dh']
jnz ['short', 'loc_7EB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Eh]']
cmp ['edx,', '6Eh']
jnz ['short', 'loc_7EB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Fh]']
cmp ['edx,', '44h']
jnz ['short', 'loc_7EB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+10h]']
cmp ['edx,', '1']
jnz ['short', 'loc_7EB']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', 'offset', '_CmnDFuncs']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_udata_getHeaderSize_56']
add ['esp,', '4']
movzx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
jmp ['short', 'loc_868']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ch]']
cmp ['edx,', '54h']
jnz ['short', 'loc_85F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Dh]']
cmp ['edx,', '6Fh']
jnz ['short', 'loc_85F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Eh]']
cmp ['edx,', '43h']
jnz ['short', 'loc_85F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Fh]']
cmp ['edx,', '50h']
jnz ['short', 'loc_85F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+10h]']
cmp ['edx,', '1']
jnz ['short', 'loc_85F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', 'offset', '_ToCPFuncs']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_udata_getHeaderSize_56']
add ['esp,', '4']
movzx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
jmp ['short', 'loc_868']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '3']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_87C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_udata_close_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_CheckEsp:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_UDataMemory_normalizeDataPointer_56:near']
extrn ['_udata_close_56:near']
end
