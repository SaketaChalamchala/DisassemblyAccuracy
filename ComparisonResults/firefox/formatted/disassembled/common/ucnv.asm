endp
_ucnv_open_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_16C']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_170']
xor ['eax,', 'eax']
jmp ['short', 'loc_188']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['_ucnv_createConverter_56']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_openPackage_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_createConverterFromPackage_56']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_openU_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_222']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_226']
xor ['eax,', 'eax']
jmp ['short', 'loc_277']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_23C']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
call ['_ucnv_open_56']
add ['esp,', '8']
jmp ['short', 'loc_277']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
cmp ['eax,', '3Ch']
jl ['short', 'loc_25A']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['short', 'loc_277']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_44]']
push ['edx']
call ['_u_austrcpy_56']
add ['esp,', '8']
push ['eax']
call ['_ucnv_open_56']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN8']
dd ['offset', '$LN7']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_openCCSID_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_2FE']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_302']
xor ['eax,', 'eax']
jmp ['short', 'loc_33D']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+Dest]']
push ['ecx']
call ['_ucnv_copyPlatformString']
add ['esp,', '8']
mov ['[ebp+var_50],', 'eax']
push ['0Ah']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_50]']
lea ['edx,', '[ebp+ecx+Dest]']
push ['edx']
call ['_T_CString_integerToString_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+Dest]']
push ['ecx']
push ['0']
call ['_ucnv_createConverter_56']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN6']
dd ['offset', '$LN5']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_copyPlatformString proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C4],', 'eax']
cmp ['[ebp+var_C4],', '0']
jz ['short', 'loc_3BA']
jmp ['short', 'loc_3D2']
push ['offset', '??_C@_04FMPFCAMK@ibm?9?$AA@']
mov ['eax,', '[ebp+Dest]']
push ['eax']
call ['_strcpy']
add ['esp,', '8']
mov ['eax,', '4']
jmp ['short', 'loc_3DA']
mov ['eax,', '[ebp+Dest]']
mov ['byte', 'ptr', '[eax],', '0']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
public ['??_C@_04FMPFCAMK@ibm?9?$AA@']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_safeClone_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '15Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_15C]']
mov ['ecx,', '57h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '1Ch']
mov ['[ebp+var_68],', 'ax']
mov ['[ebp+var_66],', '1']
mov ['[ebp+var_64],', '0']
mov ['[ebp+var_60],', '0']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_50],', '0']
mov ['eax,', '1Ch']
mov ['[ebp+var_8C],', 'ax']
mov ['[ebp+var_8A],', '1']
mov ['[ebp+var_88],', '0']
mov ['[ebp+var_84],', '0']
mov ['[ebp+var_80],', '0']
mov ['[ebp+var_7C],', '0']
mov ['[ebp+var_78],', '0']
mov ['[ebp+var_74],', '0']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_4A4']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_4AB']
xor ['eax,', 'eax']
jmp ['loc_7C8']
cmp ['[ebp+Src],', '0']
jnz ['short', 'loc_4C1']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_7C8']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+38h],', '0']
jz ['short', 'loc_510']
mov ['[ebp+Size],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+Size]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+38h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_50E']
xor ['eax,', 'eax']
jmp ['loc_7C8']
jmp ['short', 'loc_517']
mov ['[ebp+Size],', '104h']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_52C']
mov ['[ebp+var_20],', '1']
lea ['eax,', '[ebp+var_20]']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_549']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '0']
jg ['short', 'loc_549']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+Size]']
mov ['[eax],', 'ecx']
xor ['eax,', 'eax']
jmp ['loc_7C8']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7']
jz ['short', 'loc_590']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '7']
mov ['ecx,', '8']
sub ['ecx,', 'eax']
mov ['[ebp+var_98],', 'ecx']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_98]']
jle ['short', 'loc_589']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+var_98]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '[ebp+var_98]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_590']
mov ['[ebp+var_20],', '1']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+Size]']
jl ['short', 'loc_5A4']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_5E2']
mov ['eax,', '[ebp+Size]']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+Dst],', 'ecx']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_5CF']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['loc_7C8']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF82h']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+Size]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_5EF']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+Size]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['104h']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+22h],', '0']
mov ['ecx,', '[ebp+Dst]']
mov ['byte', 'ptr', '[ecx+21h],', '0']
mov ['eax,', '[ebp+Src]']
add ['eax,', '6Ch']
mov ['ecx,', '[ebp+Src]']
cmp ['[ecx+14h],', 'eax']
jnz ['short', 'loc_64E']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '6Ch']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+14h],', 'eax']
jmp ['short', 'loc_6A3']
push ['40h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+14h],', 'eax']
mov ['eax,', '[ebp+Dst]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jnz ['short', 'loc_67A']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['loc_7C8']
push ['1']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['40h']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+38h],', '0']
jz ['short', 'loc_6DF']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[eax+38h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_6ED']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_723']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_710']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '6Ch']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ecx+14h],', 'eax']
jz ['short', 'loc_710']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['loc_7C8']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+18h]']
movsx ['edx,', 'byte', 'ptr', '[ecx+11h]']
test ['edx,', 'edx']
jz ['short', 'loc_740']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_ucnv_incrementRefCount_56']
add ['esp,', '4']
mov ['eax,', '[ebp+Dst]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_74F']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+21h],', '1']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_88],', 'eax']
mov ['ecx,', '[ebp+var_88]']
mov ['[ebp+var_64],', 'ecx']
mov ['[ebp+var_44],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_44]']
push ['eax']
push ['5']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_68]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+4]']
call ['edx']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_44],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_44]']
push ['eax']
push ['5']
push ['0']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_8C]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx]']
call ['edx']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+Dst]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN34']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '15Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN33']
dd ['offset', '$LN28']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN29']
dd ['0FFFFFFBCh,', '4']
dd ['offset', '$LN30']
dd ['0FFFFFF98h,', '1Ch']
dd ['offset', '$LN31']
dd ['0FFFFFF74h,', '1Ch']
dd ['offset', '$LN32']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_close_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_8A0']
jmp ['loc_A10']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', 'offset', '_UCNV_TO_U_CALLBACK_SUBSTITUTE_56']
jz ['short', 'loc_919']
mov ['eax,', '1Ch']
mov ['[ebp+var_2C],', 'ax']
mov ['[ebp+var_2A],', '1']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['4']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
call ['edx']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', 'offset', '_UCNV_FROM_U_CALLBACK_SUBSTITUTE_56']
jz ['short', 'loc_992']
mov ['eax,', '1Ch']
mov ['[ebp+var_50],', 'ax']
mov ['[ebp+var_4E],', '1']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4C],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['4']
push ['0']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
call ['edx']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+10h],', '0']
jz ['short', 'loc_9BF']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[eax+10h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '6Ch']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+14h],', 'eax']
jz ['short', 'loc_9DC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
movsx ['edx,', 'byte', 'ptr', '[ecx+11h]']
test ['edx,', 'edx']
jz ['short', 'loc_9F9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_ucnv_unloadSharedDataIfReady_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+21h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_A10']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13']
dd ['offset', '$LN10']
dd ['0FFFFFFD4h,', '1Ch']
dd ['offset', '$LN11']
dd ['0FFFFFFB0h,', '1Ch']
dd ['offset', '$LN12']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getAvailableName_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_AD3']
cmp ['[ebp+arg_0],', '0FFFFh']
jg ['short', 'loc_AD3']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_8]']
push ['eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_bld_getAvailableConverter_56']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_8],', '0']
jg ['short', 'loc_AD3']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_AD5']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6_0']
dd ['offset', '$LN5_0']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_countAvailable_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ucnv_bld_countAvailableConverters_56']
add ['esp,', '4']
movzx ['eax,', 'ax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getSubstChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_BB0']
jmp ['short', 'loc_C16']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Dh]']
test ['ecx,', 'ecx']
jg ['short', 'loc_BC3']
mov ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax],', '0']
jmp ['short', 'loc_C16']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[edx+3Dh]']
cmp ['ecx,', 'eax']
jge ['short', 'loc_BDF']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '8']
jmp ['short', 'loc_C16']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[edx+3Dh]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+3Dh]']
mov ['[eax],', 'dl']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_setSubstChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_C54']
jmp ['short', 'loc_CBF']
movsx ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['ecx,', '[edx+0Ch]']
movsx ['edx,', 'byte', 'ptr', '[ecx+47h]']
cmp ['eax,', 'edx']
jg ['short', 'loc_C7E']
movsx ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['ecx,', '[edx+0Ch]']
movsx ['edx,', 'byte', 'ptr', '[ecx+46h]']
cmp ['eax,', 'edx']
jge ['short', 'loc_C89']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_CBF']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
movsx ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+arg_8]']
mov ['[eax+3Dh],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+42h],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_setSubstString_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '52Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_52C]']
mov ['ecx,', '14Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_45C],', '408h']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_45C]']
push ['ecx']
lea ['edx,', '[ebp+var_410]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_safeClone_56']
add ['esp,', '10h']
mov ['[ebp+var_444],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
push ['0']
push ['0']
push ['offset', '_UCNV_FROM_U_CALLBACK_STOP_56']
mov ['ecx,', '[ebp+var_444]']
push ['ecx']
call ['_ucnv_setFromUCallBack_56']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['20h']
lea ['eax,', '[ebp+var_438]']
push ['eax']
mov ['ecx,', '[ebp+var_444]']
push ['ecx']
call ['_ucnv_fromUChars_56']
add ['esp,', '18h']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+var_444]']
push ['eax']
call ['_ucnv_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_D8E']
jmp ['loc_ED8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+34h],', '0']
jz ['short', 'loc_DC0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
movsx ['eax,', 'byte', 'ptr', '[edx+45h]']
cmp ['eax,', '2']
jnz ['short', 'loc_DCE']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_MBCSGetType_56']
add ['esp,', '4']
cmp ['eax,', '9']
jz ['short', 'loc_DCE']
lea ['eax,', '[ebp+var_438]']
mov ['[ebp+Src],', 'eax']
jmp ['short', 'loc_E0B']
cmp ['[ebp+arg_8],', '20h']
jle ['short', 'loc_DE2']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['loc_ED8']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+Src],', 'eax']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_E00']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '1']
mov ['[ebp+Size],', 'eax']
cmp ['[ebp+Size],', '4']
jle ['short', 'loc_E68']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '6Ch']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+14h],', 'eax']
jnz ['short', 'loc_E68']
push ['40h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jnz ['short', 'loc_E55']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '6Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_ED8']
push ['40h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_E7A']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+3Dh],', '0']
jmp ['short', 'loc_ED1']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Src]']
lea ['ecx,', '[ebp+var_438]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_EC6']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+Size]']
mov ['[eax+3Dh],', 'cl']
jmp ['short', 'loc_ED1']
mov ['eax,', '[ebp+arg_8]']
neg ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+3Dh],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+42h],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '52Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19']
dd ['offset', '$LN16']
dd ['0FFFFFBC8h,', '20h']
dd ['offset', '$LN17']
dd ['0FFFFFBA4h,', '4']
dd ['offset', '$LN18']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_reset_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__reset		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_FBD']
jmp ['loc_1175']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['loc_10C7']
cmp ['[ebp+arg_4],', '1']
jg ['short', 'loc_1048']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', 'offset', '_UCNV_TO_U_CALLBACK_SUBSTITUTE_56']
jz ['short', 'loc_1048']
mov ['eax,', '1Ch']
mov ['[ebp+var_2C],', 'ax']
mov ['[ebp+var_2A],', '1']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['3']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
call ['edx']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+arg_4],', '1']
jz ['short', 'loc_10C7']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', 'offset', '_UCNV_FROM_U_CALLBACK_SUBSTITUTE_56']
jz ['short', 'loc_10C7']
mov ['eax,', '1Ch']
mov ['[ebp+var_50],', 'ax']
mov ['[ebp+var_4E],', '1']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4C],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['3']
push ['0']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
call ['edx']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+arg_4],', '1']
jg ['short', 'loc_1105']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+18h]']
mov ['[edx+2Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+24h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+41h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+3Eh],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+0FEh],', '0']
cmp ['[ebp+arg_4],', '1']
jz ['short', 'loc_1144']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+3Fh],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+40h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0B4h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+0FDh],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_1175']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ecx+14h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_0']
dd ['offset', '$LN10_0']
dd ['0FFFFFFD4h,', '1Ch']
dd ['offset', '$LN11_0']
dd ['0FFFFFFB0h,', '1Ch']
dd ['offset', '$LN12_0']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_resetToUnicode_56	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_resetFromUnicode_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getMaxCharSize_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax+3Ch]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getMinCharSize_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
mov ['al,', '[edx+46h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getName_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_12F6']
xor ['eax,', 'eax']
jmp ['short', 'loc_133D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+30h],', '0']
jz ['short', 'loc_1331']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[eax+30h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1331']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_133D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['eax,', '[ecx+0Ch]']
add ['eax,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getCCSID_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1382']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_140A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+40h]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1407']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '??_C@_03OGOFPLC@IBM?$AA@']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_getName_56']
add ['esp,', '8']
push ['eax']
call ['_ucnv_getStandardName_56']
add ['esp,', '0Ch']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_1407']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_1407']
mov ['esi,', 'esp']
push ['2Dh']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_1407']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['esi,', 'esp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__atol']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
public ['??_C@_03OGOFPLC@IBM?$AA@']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getPlatform_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_144F']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_145C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
movsx ['eax,', 'byte', 'ptr', '[edx+44h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getToUCallBack_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[eax],', 'edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getFromUCallBack_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax],', 'edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_setToUCallBack_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1504']
jmp ['short', 'loc_1538']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1515']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+4],', 'ecx']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_152F']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+10h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_setFromUCallBack_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1568']
jmp ['short', 'loc_159A']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1578']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_1591']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+0Ch],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_fromUnicode_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_1C],', '0']
jz ['short', 'loc_15D0']
mov ['eax,', '[ebp+arg_1C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_15D5']
jmp ['loc_173B']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_15E7']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_15E7']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_15F5']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_173B']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '7FFFFFFFh']
cmp ['eax,', '[ebp+arg_10]']
jbe ['short', 'loc_1623']
mov ['ecx,', '[ebp+arg_10]']
add ['ecx,', '7FFFFFFFh']
mov ['[ebp+var_100],', 'ecx']
jmp ['short', 'loc_162D']
mov ['[ebp+var_100],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_100]']
cmp ['edx,', '[ebp+arg_10]']
jnz ['short', 'loc_1641']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '1']
mov ['[ebp+arg_10],', 'eax']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_1688']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_38]']
jb ['short', 'loc_1688']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '[ebp+var_2C]']
sar ['eax,', '1']
cmp ['eax,', '3FFFFFFFh']
jbe ['short', 'loc_1668']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+var_2C]']
ja ['short', 'loc_1688']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_38]']
cmp ['eax,', '7FFFFFFFh']
jbe ['short', 'loc_167D']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_38]']
ja ['short', 'loc_1688']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '[ebp+var_2C]']
and ['eax,', '1']
jz ['short', 'loc_1696']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_173B']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Fh]']
test ['ecx,', 'ecx']
jle ['short', 'loc_16C6']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
lea ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_outputOverflowFromUnicode']
add ['esp,', '14h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_16C6']
jmp ['short', 'loc_173B']
movsx ['eax,', '[ebp+arg_18]']
test ['eax,', 'eax']
jnz ['short', 'loc_16E6']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_10]']
jnz ['short', 'loc_16E6']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_16E6']
jmp ['short', 'loc_173B']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'eax']
mov ['al,', '[ebp+arg_18]']
mov ['[ebp+var_1E],', 'al']
mov ['eax,', '[ebp+arg_14]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '1Ch']
mov ['[ebp+var_20],', 'ax']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['__fromUnicodeWithCallback']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN17_0']
dd ['offset', '$LN16_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__fromUnicodeWithCallback proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1C4]']
mov ['ecx,', '71h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_24],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['[ebp+var_48],', '0']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_17E6']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1811']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_1811']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_48],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_1849']
mov ['[ebp+var_A8],', '0']
mov ['[ebp+var_B4],', '0']
mov ['[ebp+var_C9],', '0']
mov ['[ebp+var_C0],', '0']
jmp ['loc_18EE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_A8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_B4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+2]']
mov ['[ebp+var_C9],', 'cl']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_C0],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0B8h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_18]']
movsx ['edx,', 'byte', 'ptr', '[ecx+0FDh]']
neg ['edx']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0B8h']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[ebp+Dst]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
shl ['ecx,', '1']
lea ['edx,', '[ebp+Dst]']
sub ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+2],', '0']
mov ['[ebp+var_48],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['byte', 'ptr', '[eax+0FDh],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_1952']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['[ebp+var_C]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_1940']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx+2]']
test ['edx,', 'edx']
jz ['short', 'loc_1940']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_1940']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jnz ['short', 'loc_1940']
mov ['[ebp+var_1C1],', '1']
jmp ['short', 'loc_1947']
mov ['[ebp+var_1C1],', '0']
mov ['cl,', '[ebp+var_1C1]']
mov ['[ebp+var_5D],', 'cl']
jmp ['short', 'loc_1956']
mov ['[ebp+var_5D],', '0']
mov ['[ebp+var_69],', '0']
mov ['[ebp+var_54],', '0']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_19C9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
sub ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_D8],', 'ecx']
cmp ['[ebp+var_D8],', '0']
jle ['short', 'loc_19B2']
mov ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+var_D8]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
call ['__updateOffsets']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_D8]']
mov ['ecx,', '[ebp+var_3C]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[eax+18h],', 'ecx']
cmp ['[ebp+var_48],', '0']
jl ['short', 'loc_19C9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+var_24]']
sar ['ecx,', '1']
add ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'ecx']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
test ['ecx,', 'ecx']
jge ['loc_1ADA']
cmp ['[ebp+var_A8],', '0']
jnz ['loc_1AA1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_A8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_B4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+2]']
mov ['[ebp+var_C9],', 'cl']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_C0],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0B8h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_18]']
movsx ['edx,', 'byte', 'ptr', '[ecx+0FDh]']
neg ['edx']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0B8h']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[ebp+Dst]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
shl ['ecx,', '1']
lea ['edx,', '[ebp+Dst]']
sub ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+2],', '0']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
add ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'ecx']
jns ['short', 'loc_1A95']
mov ['[ebp+var_48],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['byte', 'ptr', '[eax+0FDh],', '0']
jmp ['short', 'loc_1ADA']
cmp ['[ebp+var_A8],', '0']
jz ['short', 'loc_1AD1']
mov ['eax,', 'ds:?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e']
add ['eax,', '9Ah']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_24],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['loc_1BA4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[eax+0Ch]']
jnb ['short', 'loc_1B0D']
jmp ['loc_1D93']
jmp ['loc_1BA4']
cmp ['[ebp+var_A8],', '0']
jz ['short', 'loc_1B54']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_A8]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_B4]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_C9]']
mov ['[eax+2],', 'cl']
mov ['eax,', '[ebp+var_C0]']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_A8],', '0']
jmp ['loc_1D93']
jmp ['short', 'loc_1BA4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1B77']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jz ['short', 'loc_1B77']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['[ebp+var_69],', '0']
jmp ['short', 'loc_1BA4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1B9F']
movsx ['eax,', '[ebp+var_5D]']
test ['eax,', 'eax']
jnz ['short', 'loc_1B8F']
jmp ['loc_1D93']
push ['0']
push ['2']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
jmp ['loc_1D98']
movsx ['eax,', '[ebp+var_69]']
test ['eax,', 'eax']
jnz ['short', 'loc_1BE7']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_E4],', 'ecx']
cmp ['[ebp+var_E4],', '0Fh']
jz ['short', 'loc_1BE7']
cmp ['[ebp+var_E4],', '0Ah']
jz ['loc_1CB5']
cmp ['[ebp+var_E4],', '0Ch']
jz ['loc_1CB5']
cmp ['[ebp+var_E4],', '0Bh']
jz ['loc_1CB5']
cmp ['[ebp+var_A8],', '0']
jz ['loc_1CB0']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1C2B']
mov ['edx,', 'ds:?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e']
add ['edx,', '0ECh']
mov ['esi,', 'esp']
push ['edx']
push ['offset', '??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1CO@MOCKHAPJ@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAF?$AAr?$AAo?$AAm?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+8]']
sar ['edx,', '1']
mov ['[ebp+var_F0],', 'edx']
cmp ['[ebp+var_F0],', '0']
jle ['short', 'loc_1C8C']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+var_F0]']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '0B8h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_F0]']
neg ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+0FDh],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_A8]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_B4]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_C9]']
mov ['[eax+2],', 'cl']
jmp ['loc_1D98']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_FC],', 'ecx']
mov ['[ebp+var_54],', '0']
cmp ['[ebp+var_FC],', '0FFFFh']
ja ['short', 'loc_1CF1']
mov ['eax,', '[ebp+var_54]']
mov ['ecx,', '[ebp+var_18]']
mov ['dx,', 'word', 'ptr', '[ebp+var_FC]']
mov ['[ecx+eax*2+70h],', 'dx']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['[ebp+var_54],', 'eax']
jmp ['short', 'loc_1D37']
mov ['eax,', '[ebp+var_FC]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+ecx*2+70h],', 'ax']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_FC]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+ecx*2+70h],', 'ax']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_54]']
mov ['[eax+40h],', 'cl']
mov ['eax,', '[ebp+var_18]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx],', '0Ah']
setnz ['dl']
push ['edx']
mov ['eax,', '[ebp+var_FC]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '70h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax]']
call ['ecx']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_69],', '1']
jmp ['loc_1961']
jmp ['loc_18EE']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN42']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1C4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN41']
dd ['offset', '$LN40']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CO@MOCKHAPJ@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAF?$AAr?$AAo?$AAm?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@']
unicode ['0,', '<cnv->']
dw ['3Eh']
unicode ['0,', '<preFromULength==0>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@']
unicode ['0,', '<realSource==((void', '*)0)>,0']
assume ['cs:_rdata']
public ['??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\ucnv.c>,0']
align ['4']
assume ['cs:_data']
public ['?__LINE__Var@?1??_fromUnicodeWithCallback@@9@9@997d6c0e']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__updateOffsets	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_1ECB']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_1ED2']
mov ['[ebp+var_14],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_1EE6']
jmp ['short', 'loc_1F36']
cmp ['[ebp+var_14],', '0']
jle ['short', 'loc_1F1A']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1F18']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '0']
jl ['short', 'loc_1F0D']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_1EEC']
jmp ['short', 'loc_1F36']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1F36']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_1F1A']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_outputOverflowFromUnicode	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1F76']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_1F7D']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4Ch']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['loc_2044']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_2008']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_2C]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jl ['short', 'loc_1FB2']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[eax+3Fh],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1FFB']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['al,', '1']
jmp ['short', 'loc_2063']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_20]']
mov ['dl,', '[eax]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_203F']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
jmp ['loc_1F97']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+3Fh],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2061']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_toUnicode_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_1C],', '0']
jz ['short', 'loc_2098']
mov ['eax,', '[ebp+arg_1C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_209D']
jmp ['loc_2203']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_20AF']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_20AF']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_20BD']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_2203']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '7FFFFFFFh']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_20EB']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '7FFFFFFFh']
mov ['[ebp+var_100],', 'ecx']
jmp ['short', 'loc_20F5']
mov ['[ebp+var_100],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_100]']
cmp ['edx,', '[ebp+arg_8]']
jnz ['short', 'loc_2109']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_2150']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_38]']
jb ['short', 'loc_2150']
mov ['eax,', '[ebp+arg_10]']
sub ['eax,', '[ebp+var_2C]']
cmp ['eax,', '7FFFFFFFh']
jbe ['short', 'loc_212E']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+var_2C]']
ja ['short', 'loc_2150']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_38]']
sar ['eax,', '1']
cmp ['eax,', '3FFFFFFFh']
jbe ['short', 'loc_2145']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_38]']
ja ['short', 'loc_2150']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_38]']
and ['eax,', '1']
jz ['short', 'loc_215E']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_2203']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_218E']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
lea ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_outputOverflowToUnicode']
add ['esp,', '14h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_218E']
jmp ['short', 'loc_2203']
movsx ['eax,', '[ebp+arg_18]']
test ['eax,', 'eax']
jnz ['short', 'loc_21AE']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_10]']
jnz ['short', 'loc_21AE']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_21AE']
jmp ['short', 'loc_2203']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'eax']
mov ['al,', '[ebp+arg_18]']
mov ['[ebp+var_1E],', 'al']
mov ['eax,', '[ebp+arg_14]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '1Ch']
mov ['[ebp+var_20],', 'ax']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['__toUnicodeWithCallback']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN17_1']
dd ['offset', '$LN16_1']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__toUnicodeWithCallback	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1B0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1B0]']
mov ['ecx,', '6Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_24],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['[ebp+var_48],', '0']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_22AE']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_22D9']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_22D9']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_48],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_2311']
mov ['[ebp+var_A0],', '0']
mov ['[ebp+var_AC],', '0']
mov ['[ebp+var_C1],', '0']
mov ['[ebp+var_B8],', '0']
jmp ['loc_23B2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_A0],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_AC],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+2]']
mov ['[ebp+var_C1],', 'cl']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_B8],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0DEh']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_18]']
movsx ['edx,', 'byte', 'ptr', '[ecx+0FEh]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0DEh']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[ebp+Dst]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
lea ['edx,', '[ebp+Dst]']
sub ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+2],', '0']
mov ['[ebp+var_48],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['byte', 'ptr', '[eax+0FEh],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2418']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['[ebp+var_C]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2406']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx+2]']
test ['edx,', 'edx']
jz ['short', 'loc_2406']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_2406']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_2406']
mov ['[ebp+var_1AD],', '1']
jmp ['short', 'loc_240D']
mov ['[ebp+var_1AD],', '0']
mov ['dl,', '[ebp+var_1AD]']
mov ['[ebp+var_5D],', 'dl']
jmp ['short', 'loc_241C']
mov ['[ebp+var_5D],', '0']
mov ['[ebp+var_69],', '0']
mov ['[ebp+var_54],', '0']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_248F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
sub ['ecx,', '[ebp+var_30]']
sar ['ecx,', '1']
mov ['[ebp+var_D0],', 'ecx']
cmp ['[ebp+var_D0],', '0']
jle ['short', 'loc_247A']
mov ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+var_D0]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
call ['__updateOffsets']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_D0]']
mov ['ecx,', '[ebp+var_3C]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[eax+18h],', 'ecx']
cmp ['[ebp+var_48],', '0']
jl ['short', 'loc_248F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+var_24]']
add ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'ecx']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jge ['loc_259C']
cmp ['[ebp+var_A0],', '0']
jnz ['loc_2563']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_A0],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_AC],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+2]']
mov ['[ebp+var_C1],', 'cl']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_B8],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0DEh']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_18]']
movsx ['edx,', 'byte', 'ptr', '[ecx+0FEh]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '0DEh']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[ebp+Dst]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
lea ['edx,', '[ebp+Dst]']
sub ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+2],', '0']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
add ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'ecx']
jns ['short', 'loc_2557']
mov ['[ebp+var_48],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_18]']
mov ['byte', 'ptr', '[eax+0FEh],', '0']
jmp ['short', 'loc_259C']
cmp ['[ebp+var_A0],', '0']
jz ['short', 'loc_2593']
mov ['eax,', 'ds:?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e']
add ['eax,', '9Ah']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1DA@OOJEBMON@?$AAr?$AAe?$AAa?$AAl?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$DN?$AA?$DN?$AA?$CI?$AA?$CI?$AAv?$AAo?$AAi?$AAd?$AA?5?$AA?$CK?$AA?$CJ?$AA0?$AA?$CJ?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_24],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['loc_2668']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[eax+0Ch]']
jnb ['short', 'loc_25CF']
jmp ['loc_284C']
jmp ['loc_2668']
cmp ['[ebp+var_A0],', '0']
jz ['short', 'loc_2616']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_A0]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_AC]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_C1]']
mov ['[eax+2],', 'cl']
mov ['eax,', '[ebp+var_B8]']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_A0],', '0']
jmp ['loc_284C']
jmp ['short', 'loc_2668']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_263B']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_263B']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['[ebp+var_69],', '0']
jmp ['short', 'loc_2668']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2663']
movsx ['eax,', '[ebp+var_5D]']
test ['eax,', 'eax']
jnz ['short', 'loc_2653']
jmp ['loc_284C']
push ['0']
push ['1']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
jmp ['loc_2851']
movsx ['eax,', '[ebp+var_69]']
test ['eax,', 'eax']
jnz ['short', 'loc_26C5']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_DC],', 'ecx']
cmp ['[ebp+var_DC],', '0Fh']
jz ['short', 'loc_26C5']
cmp ['[ebp+var_DC],', '0Ah']
jz ['loc_278F']
cmp ['[ebp+var_DC],', '0Ch']
jz ['loc_278F']
cmp ['[ebp+var_DC],', '0Bh']
jz ['loc_278F']
cmp ['[ebp+var_DC],', '12h']
jz ['loc_278F']
cmp ['[ebp+var_DC],', '13h']
jz ['loc_278F']
cmp ['[ebp+var_A0],', '0']
jz ['loc_278A']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2709']
mov ['edx,', 'ds:?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e']
add ['edx,', '0EEh']
mov ['esi,', 'esp']
push ['edx']
push ['offset', '??_C@_1FC@LMGPGLIN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1CK@JEEADFHD@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAT?$AAo?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+8]']
mov ['[ebp+Size],', 'edx']
cmp ['[ebp+Size],', '0']
jle ['short', 'loc_2766']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '0DEh']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Size]']
neg ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+0FEh],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_A0]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_AC]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_C1]']
mov ['[eax+2],', 'cl']
jmp ['loc_2851']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_18]']
mov ['dl,', '[ecx+24h]']
mov ['[eax+3Eh],', 'dl']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Eh]']
mov ['[ebp+var_54],', 'ecx']
cmp ['[ebp+var_54],', '0']
jle ['short', 'loc_27D6']
push ['1']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '25h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '25h']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '44h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_18]']
mov ['byte', 'ptr', '[eax+24h],', '0']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+100h],', '1']
jnz ['short', 'loc_27FE']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0Ah']
jnz ['short', 'loc_27FE']
mov ['eax,', '[ebp+var_18]']
mov ['dword', 'ptr', '[eax+100h],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+100h]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '44h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_18]']
mov ['dword', 'ptr', '[eax+100h],', '1']
mov ['[ebp+var_69],', '1']
jmp ['loc_2427']
jmp ['loc_23B2']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN42_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1B0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN41_0']
dd ['offset', '$LN40_0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@JEEADFHD@?$AAc?$AAn?$AAv?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAT?$AAo?$AAU?$AAL?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?$DN?$AA?$DN?$AA0?$AA?$AA@']
unicode ['0,', '<cnv->']
dw ['3Eh']
unicode ['0,', '<preToULength==0>,0']
align ['4']
assume ['cs:_data']
public ['?__LINE__Var@?1??_toUnicodeWithCallback@@9@9@997d6c0e']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_outputOverflowToUnicode proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2902']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_2909']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '74h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['loc_29D7']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_2998']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_2C]']
mov ['esi,', '[ebp+var_14]']
mov ['dx,', '[esi+edx*2]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jl ['short', 'loc_293E']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[eax+41h],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_298B']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['al,', '1']
jmp ['short', 'loc_29F6']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+var_14]']
mov ['cx,', '[edx+ecx*2]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_29D2']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
jmp ['loc_2923']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+41h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_29F4']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_fromUChars_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '500h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_500]']
mov ['ecx,', '140h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_2A36']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_2A3D']
xor ['eax,', 'eax']
jmp ['loc_2BAD']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2A67']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_2A67']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_2A55']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2A67']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jl ['short', 'loc_2A67']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_2A77']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_2A77']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_2BAD']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_resetFromUnicode_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jnz ['short', 'loc_2A9E']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_10],', 'eax']
cmp ['[ebp+arg_10],', '0']
jle ['loc_2B8E']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+arg_C]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_2AD1']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_2B02']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2B02']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '7FFFFFFFh']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_2AEF']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '7FFFFFFFh']
mov ['[ebp+var_500],', 'ecx']
jmp ['short', 'loc_2AF9']
mov ['[ebp+var_500],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_500]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
push ['0']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_fromUnicode_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_18]']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_2B8C']
lea ['eax,', '[ebp+var_38]']
mov ['[ebp+var_24],', 'eax']
lea ['eax,', '[ebp+var_438]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
push ['0']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_fromUnicode_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[ebp+var_438]']
sub ['eax,', 'ecx']
add ['eax,', '[ebp+var_30]']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jz ['short', 'loc_2B3D']
jmp ['short', 'loc_2B95']
mov ['[ebp+var_30],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['_u_terminateChars_56']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '500h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN20_0']
dd ['offset', '$LN19_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_toUChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '900h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_900]']
mov ['ecx,', '240h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_2C2E']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_2C35']
xor ['eax,', 'eax']
jmp ['loc_2DA9']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2C5F']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_2C5F']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_2C4D']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2C5F']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jl ['short', 'loc_2C5F']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_2C6F']
cmp ['[ebp+Str],', '0']
jnz ['short', 'loc_2C6F']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_2DA9']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_resetToUnicode_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jnz ['short', 'loc_2C96']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+arg_10],', 'eax']
cmp ['[ebp+arg_10],', '0']
jle ['loc_2D8A']
mov ['eax,', '[ebp+Str]']
add ['eax,', '[ebp+arg_10]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_2CC9']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_2CFA']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2CFA']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '7FFFFFFFh']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_2CE7']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '7FFFFFFFh']
mov ['[ebp+var_900],', 'ecx']
jmp ['short', 'loc_2CF1']
mov ['[ebp+var_900],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_900]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
push ['0']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_toUnicode_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_18]']
sar ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_2D88']
lea ['eax,', '[ebp+var_38]']
mov ['[ebp+var_24],', 'eax']
lea ['eax,', '[ebp+var_838]']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
push ['0']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ucnv_toUnicode_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[ebp+var_838]']
sub ['eax,', 'ecx']
sar ['eax,', '1']
add ['eax,', '[ebp+var_30]']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jz ['short', 'loc_2D37']
jmp ['short', 'loc_2D91']
mov ['[ebp+var_30],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['_u_terminateUChars_56']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '900h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN20_1']
dd ['offset', '$LN19_1']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getNextUChar_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '154h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_154]']
mov ['ecx,', '55h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2E20']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_2E2A']
mov ['eax,', '0FFFFh']
jmp ['loc_32EA']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2E36']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_2E49']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
mov ['eax,', '0FFFFh']
jmp ['loc_32EA']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_2E6C']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
mov ['eax,', '0FFFFh']
jmp ['loc_32EA']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_38]']
cmp ['eax,', '7FFFFFFFh']
jbe ['short', 'loc_2E94']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_38]']
jbe ['short', 'loc_2E94']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
mov ['eax,', '0FFFFh']
jmp ['loc_32EA']
mov ['[ebp+var_44],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
test ['ecx,', 'ecx']
jle ['loc_2FB1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '74h']
mov ['[ebp+var_68],', 'eax']
mov ['[ebp+var_50],', '0']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
mov ['[ebp+var_5C],', 'ecx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_68]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_2F2C']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_5C]']
jz ['short', 'loc_2F2C']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_68]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_74],', 'dx']
movzx ['eax,', '[ebp+var_74]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_2F2C']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_74]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_5C]']
sub ['eax,', '[ebp+var_50]']
mov ['[ebp+var_154],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_154]']
mov ['[ecx+41h],', 'dl']
movsx ['eax,', 'byte', 'ptr', '[ebp+var_154]']
test ['eax,', 'eax']
jle ['short', 'loc_2F92']
push ['1']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+74h]']
push ['edx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
shl ['ecx,', '1']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*2+74h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '74h']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_2FA9']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_5C]']
jge ['short', 'loc_2FB1']
mov ['eax,', '[ebp+var_44]']
jmp ['loc_32EA']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_1E],', '1']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
lea ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_10],', 'eax']
lea ['eax,', '[ebp+var_2A]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '1Ch']
mov ['[ebp+var_20],', 'ax']
cmp ['[ebp+var_44],', '0']
jge ['loc_30AB']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_3074']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+28h],', '0']
jz ['short', 'loc_3074']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ecx+28h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '8']
jnz ['short', 'loc_305E']
push ['0']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
mov ['eax,', '0FFFFh']
jmp ['loc_32EA']
jmp ['short', 'loc_3074']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_3074']
cmp ['[ebp+var_44],', '0']
jl ['short', 'loc_3074']
mov ['eax,', '[ebp+var_44]']
jmp ['loc_32EA']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['__toUnicodeWithCallback']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_3095']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['[ebp+var_50],', '0']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[ebp+var_2C]']
sub ['eax,', 'ecx']
sar ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_30C7']
mov ['ax,', 'word', 'ptr', '[ebp+var_44]']
mov ['[ebp+var_2C],', 'ax']
lea ['eax,', '[ebp+var_2A]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_5C],', '1']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_30DB']
mov ['[ebp+var_44],', '0FFFFh']
jmp ['loc_323A']
cmp ['[ebp+var_5C],', '0']
jnz ['short', 'loc_30F6']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '8']
mov ['[ebp+var_44],', '0FFFFh']
jmp ['loc_323A']
movzx ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_44],', 'eax']
mov ['[ebp+var_50],', '1']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_3118']
jmp ['loc_323A']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
test ['ecx,', 'ecx']
jle ['loc_31BB']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax+74h]']
mov ['[ebp+var_80],', 'cx']
movzx ['edx,', '[ebp+var_80]']
and ['edx,', '0FFFFFC00h']
cmp ['edx,', '0DC00h']
jnz ['short', 'loc_31B9']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_80]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+41h]']
sub ['cl,', '1']
mov ['byte', 'ptr', '[ebp+var_154+3],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_154+3]']
mov ['[edx+41h],', 'al']
movsx ['ecx,', 'byte', 'ptr', '[ebp+var_154+3]']
test ['ecx,', 'ecx']
jle ['short', 'loc_31B9']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '76h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx+41h]']
shl ['edx,', '1']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '76h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '74h']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_323A']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['short', 'loc_323A']
lea ['eax,', '[ebp+var_28]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['__toUnicodeWithCallback']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_31EA']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[ebp+var_2C]']
sub ['eax,', 'ecx']
sar ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_323A']
cmp ['[ebp+var_5C],', '2']
jnz ['short', 'loc_323A']
mov ['ax,', '[ebp+var_2A]']
mov ['[ebp+var_80],', 'ax']
movzx ['ecx,', '[ebp+var_80]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jnz ['short', 'loc_323A']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_80]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_44],', 'edx']
mov ['[ebp+var_50],', '2']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_5C]']
jge ['loc_32DF']
mov ['eax,', '[ebp+var_5C]']
sub ['eax,', '[ebp+var_50]']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
mov ['[ebp+var_5C],', 'ecx']
cmp ['[ebp+var_5C],', '0']
jle ['short', 'loc_32A0']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '74h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_5C]']
shl ['ecx,', '1']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '74h']
push ['edx']
mov ['eax,', '[ebp+var_8C]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+74h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '[ebp+var_8C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+41h],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_50]']
mov ['dx,', '[ebp+ecx*2+var_2C]']
mov ['[eax+74h],', 'dx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_8C],', '1']
jle ['short', 'loc_32DF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_50]']
mov ['dx,', '[ebp+ecx*2+var_2C]']
mov ['[eax+76h],', 'dx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_44]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN42_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '154h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN41_1']
dd ['offset', '$LN39']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN40_1']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_convertEx_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '950h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_950]']
mov ['ecx,', '254h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_30],', '0']
jz ['short', 'loc_3372']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3377']
jmp ['loc_399E']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_33A5']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_33A5']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_33A5']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_33A5']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_33A5']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_33A5']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_33B3']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_399E']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_82C],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_838],', 'ecx']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_33DA']
mov ['eax,', '[ebp+arg_14]']
cmp ['eax,', '[ebp+var_82C]']
jb ['short', 'loc_33E5']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+var_838]']
jnb ['short', 'loc_33F3']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_399E']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_3414']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '[ebp+var_82C]']
cmp ['eax,', '7FFFFFFFh']
jbe ['short', 'loc_3414']
mov ['eax,', '[ebp+arg_14]']
cmp ['eax,', '[ebp+var_82C]']
ja ['short', 'loc_342F']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+var_838]']
cmp ['eax,', '7FFFFFFFh']
jbe ['short', 'loc_343D']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+var_838]']
jbe ['short', 'loc_343D']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_399E']
cmp ['[ebp+arg_18],', '0']
jnz ['short', 'loc_3491']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jnz ['short', 'loc_3459']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_399E']
lea ['eax,', '[ebp+var_808]']
mov ['[ebp+arg_18],', 'eax']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ebp+var_820],', 'ecx']
mov ['edx,', '[ebp+var_820]']
mov ['[ebp+var_814],', 'edx']
lea ['eax,', '[ebp+var_814]']
mov ['[ebp+arg_1C],', 'eax']
lea ['eax,', '[ebp+var_820]']
mov ['[ebp+arg_20],', 'eax']
lea ['eax,', '[ebp+var_8]']
mov ['[ebp+arg_24],', 'eax']
jmp ['short', 'loc_34C9']
mov ['eax,', '[ebp+arg_18]']
cmp ['eax,', '[ebp+arg_24]']
jnb ['short', 'loc_34BB']
cmp ['[ebp+arg_1C],', '0']
jz ['short', 'loc_34BB']
mov ['eax,', '[ebp+arg_1C]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_34BB']
cmp ['[ebp+arg_20],', '0']
jz ['short', 'loc_34BB']
mov ['eax,', '[ebp+arg_20]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_34BB']
cmp ['[ebp+arg_24],', '0']
jnz ['short', 'loc_34C9']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_399E']
cmp ['[ebp+arg_14],', '0']
jnz ['short', 'loc_34EC']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+arg_14],', 'eax']
movsx ['eax,', '[ebp+arg_28]']
test ['eax,', 'eax']
jz ['short', 'loc_351E']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ucnv_resetToUnicode_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_resetFromUnicode_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_359A']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+3Fh]']
test ['ecx,', 'ecx']
jle ['short', 'loc_359A']
mov ['eax,', '[ebp+arg_30]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_outputOverflowFromUnicode']
add ['esp,', '14h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_354F']
jmp ['loc_399E']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jnz ['short', 'loc_359A']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_359A']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[ebp+arg_20]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_359A']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_359A']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_359A']
mov ['eax,', '[ebp+var_82C]']
cmp ['eax,', '[ebp+arg_14]']
jnz ['short', 'loc_359A']
jmp ['loc_399E']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
movsx ['eax,', 'byte', 'ptr', '[edx+45h]']
cmp ['eax,', '4']
jnz ['short', 'loc_35CF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+44h],', '0']
jz ['short', 'loc_35CF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+44h]']
mov ['[ebp+var_88C],', 'eax']
jmp ['short', 'loc_360E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
movsx ['eax,', 'byte', 'ptr', '[edx+45h]']
cmp ['eax,', '4']
jnz ['short', 'loc_3604']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+40h],', '0']
jz ['short', 'loc_3604']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+40h]']
mov ['[ebp+var_88C],', 'eax']
jmp ['short', 'loc_360E']
mov ['[ebp+var_88C],', '0']
cmp ['[ebp+var_88C],', '0']
jz ['short', 'loc_362D']
mov ['eax,', '[ebp+arg_24]']
sub ['eax,', '[ebp+arg_18]']
sar ['eax,', '1']
cmp ['eax,', '20h']
jle ['short', 'loc_362D']
mov ['eax,', '[ebp+arg_18]']
add ['eax,', '40h']
mov ['[ebp+arg_24],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_87C],', 'eax']
mov ['[ebp+var_87E],', '0']
mov ['[ebp+var_868],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_870],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_86C],', 'eax']
mov ['eax,', '1Ch']
mov ['[ebp+var_880],', 'ax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_858],', 'eax']
mov ['al,', '[ebp+arg_2C]']
mov ['[ebp+var_85A],', 'al']
mov ['[ebp+var_844],', '0']
mov ['eax,', '[ebp+var_82C]']
mov ['[ebp+var_854],', 'eax']
mov ['eax,', '[ebp+arg_14]']
mov ['[ebp+var_850],', 'eax']
mov ['eax,', '[ebp+arg_24]']
mov ['[ebp+var_848],', 'eax']
mov ['eax,', '1Ch']
mov ['[ebp+var_85C],', 'ax']
mov ['[ebp+var_838],', '0']
mov ['eax,', '[ebp+var_838]']
mov ['[ebp+var_82C],', 'eax']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[ebp+arg_20]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jb ['short', 'loc_36F0']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_36F0']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_36F0']
movsx ['eax,', '[ebp+var_87E]']
test ['eax,', 'eax']
jz ['short', 'loc_3731']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_878],', 'ecx']
mov ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_874],', 'ecx']
mov ['eax,', '[ebp+arg_30]']
push ['eax']
lea ['ecx,', '[ebp+var_880]']
push ['ecx']
call ['__fromUnicodeWithCallback']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3731']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[ebp+var_878]']
mov ['[eax],', 'ecx']
jmp ['loc_394A']
mov ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_377B']
mov ['eax,', '[ebp+arg_30]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_20]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ucnv_outputOverflowToUnicode']
add ['esp,', '14h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_3776']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['loc_36C3']
mov ['eax,', '[ebp+var_854]']
cmp ['eax,', '[ebp+arg_14]']
jnz ['short', 'loc_37B7']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_37B7']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_37B7']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jz ['short', 'loc_37B2']
movsx ['eax,', '[ebp+var_87E]']
test ['eax,', 'eax']
jz ['short', 'loc_37B7']
jmp ['loc_394A']
cmp ['[ebp+var_88C],', '0']
jz ['loc_38BC']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0B4h],', '0']
jge ['loc_38BC']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jnz ['loc_38BC']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFF81h']
jnz ['short', 'loc_37F7']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_30]']
push ['eax']
lea ['ecx,', '[ebp+var_85C]']
push ['ecx']
lea ['edx,', '[ebp+var_880]']
push ['edx']
call ['[ebp+var_88C]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_382D']
jmp ['loc_394A']
jmp ['loc_38BC']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_385E']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_3842']
jmp ['short', 'loc_385C']
mov ['eax,', '[ebp+arg_18]']
add ['eax,', '2']
mov ['ecx,', '[ebp+arg_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_1C]']
mov ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['loc_36C3']
jmp ['short', 'loc_38BC']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFF81h']
jnz ['short', 'loc_3871']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_38BC']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jz ['short', 'loc_388F']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_388F']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '0Bh']
jmp ['short', 'loc_38BC']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jz ['short', 'loc_38B7']
push ['0']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
push ['0']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['__reset']
add ['esp,', '0Ch']
jmp ['loc_394A']
mov ['eax,', '[ebp+arg_18]']
mov ['[ebp+var_84C],', 'eax']
mov ['eax,', '[ebp+arg_30]']
push ['eax']
lea ['ecx,', '[ebp+var_85C]']
push ['ecx']
call ['__toUnicodeWithCallback']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[ebp+var_84C]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_38F6']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_3912']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_3910']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jnz ['short', 'loc_3912']
mov ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_18]']
jnz ['short', 'loc_3912']
jmp ['short', 'loc_394A']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jz ['short', 'loc_3945']
mov ['eax,', '[ebp+var_854]']
cmp ['eax,', '[ebp+arg_14]']
jnz ['short', 'loc_3945']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jl ['short', 'loc_3945']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+41h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_3945']
mov ['[ebp+var_87E],', '1']
jmp ['loc_36C3']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_854]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_870]']
mov ['[eax],', 'ecx']
movsx ['eax,', '[ebp+arg_2C]']
test ['eax,', 'eax']
jz ['short', 'loc_399E']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_399E']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_C]']
jz ['short', 'loc_3995']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['eax,', '[ebp+arg_30]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jnz ['short', 'loc_3993']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_399E']
mov ['eax,', '[ebp+arg_30]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN69']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '950h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN68']
dd ['offset', '$LN63']
dd ['0FFFFF7ECh,', '4']
dd ['offset', '$LN64']
dd ['0FFFFF7E0h,', '4']
dd ['offset', '$LN65']
dd ['0FFFFF7A4h,', '1Ch']
dd ['offset', '$LN66']
dd ['0FFFFF780h,', '1Ch']
dd ['offset', '$LN67']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_convert_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '300h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_300]']
mov ['ecx,', '0C0h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_18],', '0']
jz ['short', 'loc_3A86']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3A8D']
xor ['eax,', 'eax']
jmp ['loc_3BA4']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_3AAB']
cmp ['[ebp+arg_14],', '0FFFFFFFFh']
jl ['short', 'loc_3AAB']
cmp ['[ebp+arg_C],', '0']
jl ['short', 'loc_3AAB']
cmp ['[ebp+arg_C],', '0']
jle ['short', 'loc_3ABB']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_3ABB']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_3BA4']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_3AD1']
cmp ['[ebp+arg_14],', '0']
jge ['short', 'loc_3AEC']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_3AEC']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_u_terminateChars_56']
add ['esp,', '10h']
jmp ['loc_3BA4']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_10C]']
push ['edx']
call ['_ucnv_createConverter_56']
add ['esp,', '0Ch']
mov ['[ebp+var_224],', 'eax']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3B18']
xor ['eax,', 'eax']
jmp ['loc_3BA4']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_218]']
push ['edx']
call ['_ucnv_createConverter_56']
add ['esp,', '0Ch']
mov ['[ebp+var_230],', 'eax']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3B50']
mov ['eax,', '[ebp+var_224]']
push ['eax']
call ['_ucnv_close_56']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['short', 'loc_3BA4']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_224]']
push ['edx']
mov ['eax,', '[ebp+var_230]']
push ['eax']
call ['_ucnv_internalConvert']
add ['esp,', '1Ch']
mov ['[ebp+var_23C],', 'eax']
mov ['eax,', '[ebp+var_224]']
push ['eax']
call ['_ucnv_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_230]']
push ['eax']
call ['_ucnv_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_23C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '300h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_1']
dd ['offset', '$LN11_1']
dd ['0FFFFFDE8h,', '104h']
dd ['offset', '$LN12_1']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_internalConvert proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D1Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D1C]']
mov ['ecx,', '347h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_850],', '0']
cmp ['[ebp+arg_14],', '0']
jge ['short', 'loc_3C54']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_838],', 'eax']
jmp ['short', 'loc_3C60']
mov ['eax,', '[ebp+Str]']
add ['eax,', '[ebp+arg_14]']
mov ['[ebp+var_838],', 'eax']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+var_838]']
jnz ['short', 'loc_3C86']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_u_terminateChars_56']
add ['esp,', '10h']
jmp ['loc_3DE2']
lea ['eax,', '[ebp+var_808]']
mov ['[ebp+var_820],', 'eax']
mov ['ecx,', '[ebp+var_820]']
mov ['[ebp+var_814],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_82C],', 'eax']
mov ['[ebp+var_850],', '0']
cmp ['[ebp+arg_C],', '0']
jle ['short', 'loc_3D1C']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_844],', 'eax']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
push ['1']
push ['0']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
lea ['edx,', '[ebp+var_820]']
push ['edx']
lea ['eax,', '[ebp+var_814]']
push ['eax']
lea ['ecx,', '[ebp+var_808]']
push ['ecx']
mov ['edx,', '[ebp+var_838]']
push ['edx']
lea ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_844]']
push ['ecx']
lea ['edx,', '[ebp+var_82C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_convertEx_56']
add ['esp,', '34h']
mov ['eax,', '[ebp+var_82C]']
sub ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_850],', 'eax']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jz ['short', 'loc_3D2E']
cmp ['[ebp+arg_C],', '0']
jnz ['loc_3DDC']
lea ['eax,', '[ebp+var_858]']
mov ['[ebp+var_844],', 'eax']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0']
lea ['eax,', '[ebp+var_C58]']
mov ['[ebp+var_82C],', 'eax']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
push ['1']
push ['0']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
lea ['edx,', '[ebp+var_820]']
push ['edx']
lea ['eax,', '[ebp+var_814]']
push ['eax']
lea ['ecx,', '[ebp+var_808]']
push ['ecx']
mov ['edx,', '[ebp+var_838]']
push ['edx']
lea ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_844]']
push ['ecx']
lea ['edx,', '[ebp+var_82C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_convertEx_56']
add ['esp,', '34h']
mov ['eax,', '[ebp+var_82C]']
lea ['ecx,', '[ebp+var_C58]']
sub ['eax,', 'ecx']
add ['eax,', '[ebp+var_850]']
mov ['[ebp+var_850],', 'eax']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jz ['loc_3D3A']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+var_850]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_u_terminateChars_56']
add ['esp,', '10h']
jmp ['short', 'loc_3DE2']
mov ['eax,', '[ebp+var_850]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0D1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN17_2']
dd ['offset', '$LN12_2']
dd ['0FFFFF7ECh,', '4']
dd ['offset', '$LN13_2']
dd ['0FFFFF7E0h,', '4']
dd ['offset', '$LN14_2']
dd ['0FFFFF7D4h,', '4']
dd ['offset', '$LN15']
dd ['0FFFFF3A8h,', '400h']
dd ['offset', '$LN16_2']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_toAlgorithmic_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['1']
call ['_ucnv_convertAlgorithmic']
add ['esp,', '20h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_convertAlgorithmic proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '200h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_200]']
mov ['ecx,', '80h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_1C],', '0']
jz ['short', 'loc_3F16']
mov ['eax,', '[ebp+arg_1C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3F1D']
xor ['eax,', 'eax']
jmp ['loc_4046']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_3F41']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_3F41']
cmp ['[ebp+arg_18],', '0FFFFFFFFh']
jl ['short', 'loc_3F41']
cmp ['[ebp+arg_10],', '0']
jl ['short', 'loc_3F41']
cmp ['[ebp+arg_10],', '0']
jle ['short', 'loc_3F51']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_3F51']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_4046']
cmp ['[ebp+arg_18],', '0']
jz ['short', 'loc_3F67']
cmp ['[ebp+arg_18],', '0']
jge ['short', 'loc_3F82']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_3F82']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['_u_terminateChars_56']
add ['esp,', '10h']
jmp ['loc_4046']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
push ['0']
push ['offset', '??_C@_00CNPNBAHC@?$AA@']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_10C]']
push ['edx']
call ['_ucnv_createAlgorithmicConverter_56']
add ['esp,', '14h']
mov ['[ebp+var_118],', 'eax']
mov ['eax,', '[ebp+arg_1C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3FB5']
xor ['eax,', 'eax']
jmp ['loc_4046']
movsx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jz ['short', 'loc_3FE0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_ucnv_resetToUnicode_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_118]']
mov ['[ebp+var_124],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_130],', 'eax']
jmp ['short', 'loc_4001']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_ucnv_resetFromUnicode_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_118]']
mov ['[ebp+var_130],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_124],', 'eax']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_130]']
push ['edx']
mov ['eax,', '[ebp+var_124]']
push ['eax']
call ['_ucnv_internalConvert']
add ['esp,', '1Ch']
mov ['[ebp+var_13C],', 'eax']
mov ['eax,', '[ebp+var_118]']
push ['eax']
call ['_ucnv_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_13C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '200h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_3']
dd ['offset', '$LN12_3']
assume ['cs:_rdata']
public ['??_C@_00CNPNBAHC@?$AA@']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_fromAlgorithmic_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
call ['_ucnv_convertAlgorithmic']
add ['esp,', '20h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getType_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+0Ch]']
mov ['al,', '[edx+45h]']
mov ['[ebp+var_5],', 'al']
movsx ['eax,', '[ebp+var_5]']
cmp ['eax,', '2']
jnz ['short', 'loc_4140']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_MBCSGetType_56']
add ['esp,', '4']
jmp ['short', 'loc_4144']
movsx ['eax,', '[ebp+var_5]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getStarters_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_4184']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_4186']
jmp ['short', 'loc_41C6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
cmp ['dword', 'ptr', '[edx+2Ch],', '0']
jz ['short', 'loc_41BD']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+2Ch]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_41C6']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_fixFileSeparator_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_4221']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_4221']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_4221']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_getAmbiguous']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_4223']
jmp ['short', 'loc_426B']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax+4]']
mov ['[ebp+var_20],', 'cx']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_4240']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_426B']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
movzx ['eax,', '[ebp+var_20]']
cmp ['edx,', 'eax']
jnz ['short', 'loc_4269']
mov ['eax,', '5Ch']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_4237']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getAmbiguous proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_42A8']
xor ['eax,', 'eax']
jmp ['short', 'loc_430F']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ucnv_getName_56']
add ['esp,', '8']
mov ['[ebp+Str1],', 'eax']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_42CC']
xor ['eax,', 'eax']
jmp ['short', 'loc_430F']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_42DE']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0Bh']
jge ['short', 'loc_430D']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', 'ds:_ambiguousConverters[eax*8]']
push ['ecx']
mov ['edx,', '[ebp+Str1]']
push ['edx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_430B']
mov ['eax,', '[ebp+var_20]']
lea ['eax,', '_ambiguousConverters[eax*8]']
jmp ['short', 'loc_430F']
jmp ['short', 'loc_42D5']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN10_1']
dd ['offset', '$LN9_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_isAmbiguous_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_getAmbiguous']
add ['esp,', '4']
test ['eax,', 'eax']
setnz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_setFallback_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+23h],', 'cl']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_usesFallback_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax+23h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getInvalidChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_4420']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_4422']
jmp ['short', 'loc_449B']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_4434']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_4434']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_443F']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_449B']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[edx+3Eh]']
cmp ['ecx,', 'eax']
jge ['short', 'loc_445B']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '8']
jmp ['short', 'loc_449B']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+3Eh]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jle ['short', 'loc_449B']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '44h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '44h']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_getInvalidUChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_44DC']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_44DE']
jmp ['short', 'loc_4559']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_44F0']
cmp ['[ebp+Dst],', '0']
jz ['short', 'loc_44F0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_44FB']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_4559']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[edx+40h]']
cmp ['ecx,', 'eax']
jge ['short', 'loc_4517']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '8']
jmp ['short', 'loc_4559']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+40h]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jle ['short', 'loc_4559']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '70h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '70h']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_detectUnicodeSignature_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0ECh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_EC]']
mov ['ecx,', '3Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_1C],', '0A5h']
mov ['[ebp+var_1B],', '0A5h']
mov ['[ebp+var_1A],', '0A5h']
mov ['[ebp+var_19],', '0A5h']
mov ['[ebp+var_18],', '0A5h']
mov ['[ebp+var_28],', '0']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_45C1']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_45C8']
xor ['eax,', 'eax']
jmp ['loc_482D']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_45D4']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jge ['short', 'loc_45E4']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_482D']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_45F0']
lea ['eax,', '[ebp+var_C]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['short', 'loc_4605']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+var_28]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_462D']
cmp ['[ebp+var_28],', '5']
jge ['short', 'loc_462D']
mov ['eax,', '[ebp+Str]']
add ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_28]']
mov ['dl,', '[eax]']
mov ['[ebp+ecx+var_1C],', 'dl']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_4605']
movsx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0FFFFFFFEh']
jnz ['short', 'loc_4657']
movsx ['eax,', '[ebp+var_1B]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_4657']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '2']
mov ['eax,', 'offset', '??_C@_08NLKHJAFK@UTF?916BE?$AA@']
jmp ['loc_482D']
jmp ['loc_4822']
movsx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_46A6']
movsx ['eax,', '[ebp+var_1B]']
cmp ['eax,', '0FFFFFFFEh']
jnz ['short', 'loc_46A6']
movsx ['eax,', '[ebp+var_1A]']
test ['eax,', 'eax']
jnz ['short', 'loc_468E']
movsx ['eax,', '[ebp+var_19]']
test ['eax,', 'eax']
jnz ['short', 'loc_468E']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '4']
mov ['eax,', 'offset', '??_C@_08CEJLHJGH@UTF?932LE?$AA@']
jmp ['loc_482D']
jmp ['short', 'loc_46A1']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '2']
mov ['eax,', 'offset', '??_C@_08NBDJLNFA@UTF?916LE?$AA@']
jmp ['loc_482D']
jmp ['loc_4822']
movsx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0FFFFFFEFh']
jnz ['short', 'loc_46D9']
movsx ['eax,', '[ebp+var_1B]']
cmp ['eax,', '0FFFFFFBBh']
jnz ['short', 'loc_46D9']
movsx ['eax,', '[ebp+var_1A]']
cmp ['eax,', '0FFFFFFBFh']
jnz ['short', 'loc_46D9']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '3']
mov ['eax,', 'offset', '??_C@_05EGJIMALK@UTF?98?$AA@']
jmp ['loc_482D']
jmp ['loc_4822']
movsx ['eax,', '[ebp+var_1C]']
test ['eax,', 'eax']
jnz ['short', 'loc_4713']
movsx ['eax,', '[ebp+var_1B]']
test ['eax,', 'eax']
jnz ['short', 'loc_4713']
movsx ['eax,', '[ebp+var_1A]']
cmp ['eax,', '0FFFFFFFEh']
jnz ['short', 'loc_4713']
movsx ['eax,', '[ebp+var_19]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_4713']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '4']
mov ['eax,', 'offset', '??_C@_08COAFFEGN@UTF?932BE?$AA@']
jmp ['loc_482D']
jmp ['loc_4822']
movsx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0Eh']
jnz ['short', 'loc_4746']
movsx ['eax,', '[ebp+var_1B]']
cmp ['eax,', '0FFFFFFFEh']
jnz ['short', 'loc_4746']
movsx ['eax,', '[ebp+var_1A]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_4746']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '3']
mov ['eax,', 'offset', '??_C@_04GGPJHDNC@SCSU?$AA@']
jmp ['loc_482D']
jmp ['loc_4822']
movsx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0FFFFFFFBh']
jnz ['short', 'loc_4779']
movsx ['eax,', '[ebp+var_1B]']
cmp ['eax,', '0FFFFFFEEh']
jnz ['short', 'loc_4779']
movsx ['eax,', '[ebp+var_1A]']
cmp ['eax,', '28h']
jnz ['short', 'loc_4779']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '3']
mov ['eax,', 'offset', '??_C@_06FKEBPDGA@BOCU?91?$AA@']
jmp ['loc_482D']
jmp ['loc_4822']
movsx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '2Bh']
jnz ['short', 'loc_47EE']
movsx ['eax,', '[ebp+var_1B]']
cmp ['eax,', '2Fh']
jnz ['short', 'loc_47EE']
movsx ['eax,', '[ebp+var_1A]']
cmp ['eax,', '76h']
jnz ['short', 'loc_47EE']
movsx ['eax,', '[ebp+var_19]']
cmp ['eax,', '38h']
jnz ['short', 'loc_47B8']
movsx ['eax,', '[ebp+var_18]']
cmp ['eax,', '2Dh']
jnz ['short', 'loc_47B8']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '5']
mov ['eax,', 'offset', '??_C@_05MBAANMHF@UTF?97?$AA@']
jmp ['short', 'loc_482D']
jmp ['short', 'loc_47EC']
movsx ['eax,', '[ebp+var_19]']
cmp ['eax,', '38h']
jz ['short', 'loc_47DC']
movsx ['eax,', '[ebp+var_19]']
cmp ['eax,', '39h']
jz ['short', 'loc_47DC']
movsx ['eax,', '[ebp+var_19]']
cmp ['eax,', '2Bh']
jz ['short', 'loc_47DC']
movsx ['eax,', '[ebp+var_19]']
cmp ['eax,', '2Fh']
jnz ['short', 'loc_47EC']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '4']
mov ['eax,', 'offset', '??_C@_05MBAANMHF@UTF?97?$AA@']
jmp ['short', 'loc_482D']
jmp ['short', 'loc_4822']
movsx ['eax,', '[ebp+var_1C]']
cmp ['eax,', '0FFFFFFDDh']
jnz ['short', 'loc_4822']
movsx ['eax,', '[ebp+var_1B]']
cmp ['eax,', '73h']
jnz ['short', 'loc_4822']
movsx ['eax,', '[ebp+var_1A]']
cmp ['eax,', '66h']
jnz ['short', 'loc_4822']
movsx ['eax,', '[ebp+var_19]']
cmp ['eax,', '73h']
jnz ['short', 'loc_4822']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '4']
mov ['eax,', 'offset', '??_C@_0L@BJAMKCIO@UTF?9EBCDIC?$AA@']
jmp ['short', 'loc_482D']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN35']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0ECh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN34_0']
dd ['offset', '$LN32_0']
dd ['0FFFFFFE4h,', '5']
dd ['offset', '$LN33_0']
assume ['cs:_rdata']
public ['??_C@_0L@BJAMKCIO@UTF?9EBCDIC?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_05MBAANMHF@UTF?97?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_06FKEBPDGA@BOCU?91?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_04GGPJHDNC@SCSU?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_08COAFFEGN@UTF?932BE?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_05EGJIMALK@UTF?98?$AA@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_08NBDJLNFA@UTF?916LE?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_08CEJLHJGH@UTF?932LE?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_08NLKHJAFK@UTF?916BE?$AA@']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_fromUCountPending_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_4910']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_4915']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_498A']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_4929']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_498A']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0B4h],', '0']
jl ['short', 'loc_495A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '0FFFFh']
cmp ['ecx,', '[eax+0B4h]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[edx+0FDh]']
add ['eax,', 'ecx']
jmp ['short', 'loc_498A']
jmp ['short', 'loc_4988']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FDh]']
test ['ecx,', 'ecx']
jge ['short', 'loc_4978']
mov ['eax,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[eax+0FDh]']
neg ['eax']
jmp ['short', 'loc_498A']
jmp ['short', 'loc_4988']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jle ['short', 'loc_4988']
mov ['eax,', '1']
jmp ['short', 'loc_498A']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_toUCountPending_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_49C0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_49C5']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_4A29']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_49D9']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_4A29']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jle ['short', 'loc_49F5']
mov ['eax,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[eax+0FEh]']
jmp ['short', 'loc_4A29']
jmp ['short', 'loc_4A27']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0FEh]']
test ['ecx,', 'ecx']
jge ['short', 'loc_4A13']
mov ['eax,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[eax+0FEh]']
neg ['eax']
jmp ['short', 'loc_4A29']
jmp ['short', 'loc_4A27']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+24h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_4A27']
mov ['eax,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[eax+24h]']
jmp ['short', 'loc_4A29']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ucnv_isFixedWidth_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_4A5A']
xor ['al,', 'al']
jmp ['short', 'loc_4AA2']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_4A6D']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['al,', 'al']
jmp ['short', 'loc_4AA2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ucnv_getType_56']
add ['esp,', '4']
mov ['[ebp+var_C4],', 'eax']
cmp ['[ebp+var_C4],', '1Eh']
ja ['short', '$LN1']
mov ['ecx,', '[ebp+var_C4]']
movzx ['edx,', 'ds:$LN9_1[ecx]']
jmp ['ds:$LN10_2[edx*4]']
mov ['al,', '1']
jmp ['short', 'loc_4AA2']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN1']
db ['1,', '1,', '1,', '0']
db ['0,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '0,', '1']
db ['1,', '1,', '0']
extrn ['_ucnv_createConverter_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_ucnv_createConverterFromPackage_56:near']
extrn ['_u_austrcpy_56:near']
extrn ['_u_strlen_56:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_T_CString_integerToString_56:near']
extrn ['_strcpy:near']
extrn ['_ucnv_incrementRefCount_56:near']
extrn ['_uprv_free_56:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_memset:near']
extrn ['_uprv_malloc_56:near']
extrn ['_ucnv_unloadSharedDataIfReady_56:near']
extrn ['_UCNV_FROM_U_CALLBACK_SUBSTITUTE_56:near']
extrn ['_UCNV_TO_U_CALLBACK_SUBSTITUTE_56:near']
extrn ['_ucnv_bld_getAvailableConverter_56:near']
extrn ['_ucnv_bld_countAvailableConverters_56:near']
extrn ['_ucnv_MBCSGetType_56:near']
extrn ['_UCNV_FROM_U_CALLBACK_STOP_56:near']
extrn ['__imp__atol:near']
extrn ['__imp__strchr:near']
extrn ['_ucnv_getStandardName_56:near']
extrn ['__imp___wassert:near']
extrn ['_u_terminateChars_56:near']
extrn ['_u_terminateUChars_56:near']
extrn ['_strlen:near']
extrn ['__imp__memmove:near']
extrn ['_ucnv_createAlgorithmicConverter_56:near']
extrn ['_strcmp:near']
end
