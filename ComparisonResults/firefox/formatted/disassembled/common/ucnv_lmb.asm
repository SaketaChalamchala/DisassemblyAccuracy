endp
__LMBCSClose	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_18F5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_5],', '0']
jmp ['short', 'loc_18A6']
mov ['al,', '[ebp+var_5]']
add ['al,', '1']
mov ['[ebp+var_5],', 'al']
movzx ['eax,', '[ebp+var_5]']
cmp ['eax,', '13h']
jg ['short', 'loc_18D1']
movzx ['eax,', '[ebp+var_5]']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jz ['short', 'loc_18CF']
movzx ['eax,', '[ebp+var_5]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_ucnv_unloadSharedDataIfReady_56']
add ['esp,', '4']
jmp ['short', 'loc_189E']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_18F5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSSafeClone proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_194A']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '158h']
xor ['eax,', 'eax']
jmp ['loc_19CF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+Src],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['54h']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '104h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_1991']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '13h']
jg ['short', 'loc_19B7']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jz ['short', 'loc_19B5']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_ucnv_incrementRefCount_56']
add ['esp,', '4']
jmp ['short', 'loc_1988']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '104h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+22h],', '1']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSFromUnicode proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '180h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_180]']
mov ['ecx,', '60h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_9],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_64],', 'edx']
mov ['[ebp+var_70],', '0']
mov ['[ebp+var_79],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnb ['loc_209D']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['loc_209D']
mov ['eax,', '[ebp+var_64]']
mov ['cl,', '[eax+51h]']
mov ['[ebp+var_79],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
cmp ['edx,', '[ecx+14h]']
jb ['short', 'loc_1A6A']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['loc_209D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dx,', '[ecx]']
mov ['[ebp+var_18],', 'dx']
mov ['[ebp+var_3C],', '0']
lea ['eax,', '[ebp+var_24]']
mov ['[ebp+var_30],', 'eax']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '80h']
jl ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0FFh']
jg ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0B1h']
jz ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0D7h']
jz ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0F7h']
jz ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0B0h']
jz ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0B4h']
jz ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0B6h']
jz ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0A7h']
jz ['short', 'loc_1AF9']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0A8h']
jz ['short', 'loc_1AF9']
mov ['eax,', '[ebp+var_64]']
mov ['byte', 'ptr', '[eax+51h],', '1']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '1Fh']
jle ['short', 'loc_1B0D']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '80h']
jl ['short', 'loc_1B39']
movzx ['eax,', '[ebp+var_18]']
test ['eax,', 'eax']
jz ['short', 'loc_1B39']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '9']
jz ['short', 'loc_1B39']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0Dh']
jz ['short', 'loc_1B39']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0Ah']
jz ['short', 'loc_1B39']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '19h']
jnz ['short', 'loc_1B51']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['[ebp+var_3C],', '1']
cmp ['[ebp+var_3C],', '0']
jnz ['loc_1F92']
movzx ['eax,', '[ebp+var_18]']
push ['eax']
call ['_FindLMBCSUniRange']
add ['esp,', '4']
mov ['[ebp+var_85],', 'al']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '14h']
jnz ['short', 'loc_1BA1']
movzx ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['_LMBCSConvertUni']
add ['esp,', '8']
add ['eax,', '[ebp+var_30]']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[ebp+var_24]']
sub ['eax,', 'ecx']
mov ['[ebp+var_3C],', 'eax']
jmp ['loc_1C58']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '0Fh']
jnz ['short', 'loc_1C25']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '1Fh']
jg ['short', 'loc_1BDC']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '0Fh']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
movzx ['eax,', '[ebp+var_18]']
add ['eax,', '20h']
mov ['ecx,', '[ebp+var_30]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
jmp ['short', 'loc_1C18']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '80h']
jl ['short', 'loc_1C18']
movzx ['eax,', '[ebp+var_18]']
cmp ['eax,', '0A0h']
jg ['short', 'loc_1C18']
mov ['eax,', '[ebp+var_30]']
mov ['byte', 'ptr', '[eax],', '0Fh']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
movzx ['eax,', '[ebp+var_18]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_30]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[ebp+var_24]']
sub ['eax,', 'ecx']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_1C58']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '14h']
jge ['short', 'loc_1C58']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
movzx ['ecx,', '[ebp+var_85]']
push ['ecx']
mov ['edx,', '[ebp+var_64]']
push ['edx']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jnz ['loc_1F92']
push ['14h']
push ['0']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'byte', 'ptr', '[eax+50h]']
cmp ['ecx,', '1']
jz ['loc_1D72']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '80h']
jnz ['short', 'loc_1C9C']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'byte', 'ptr', '[eax+50h]']
cmp ['ecx,', '10h']
jl ['short', 'loc_1CC8']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '81h']
jnz ['short', 'loc_1CB6']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'byte', 'ptr', '[eax+50h]']
cmp ['ecx,', '10h']
jge ['short', 'loc_1CC8']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '82h']
jnz ['loc_1D72']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'byte', 'ptr', '[eax+51h]']
cmp ['ecx,', '10h']
jge ['short', 'loc_1D4B']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_1D1C']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_1D49']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_64]']
movzx ['edx,', 'byte', 'ptr', '[ecx+51h]']
push ['edx']
mov ['eax,', '[ebp+var_64]']
push ['eax']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_1D72']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_64]']
movzx ['edx,', 'byte', 'ptr', '[ecx+51h]']
push ['edx']
mov ['eax,', '[ebp+var_64]']
push ['eax']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_1DEC']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'byte', 'ptr', '[eax+51h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1DEC']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '80h']
jnz ['short', 'loc_1D9D']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'byte', 'ptr', '[eax+51h]']
cmp ['ecx,', '10h']
jl ['short', 'loc_1DC5']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '81h']
jnz ['short', 'loc_1DB7']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'byte', 'ptr', '[eax+51h]']
cmp ['ecx,', '10h']
jge ['short', 'loc_1DC5']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '82h']
jnz ['short', 'loc_1DEC']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_64]']
movzx ['edx,', 'byte', 'ptr', '[ecx+51h]']
push ['edx']
mov ['eax,', '[ebp+var_64]']
push ['eax']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_1E5A']
movzx ['eax,', '[ebp+var_9]']
test ['eax,', 'eax']
jz ['short', 'loc_1E5A']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '80h']
jnz ['short', 'loc_1E11']
movzx ['eax,', '[ebp+var_9]']
cmp ['eax,', '10h']
jl ['short', 'loc_1E36']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '81h']
jnz ['short', 'loc_1E28']
movzx ['eax,', '[ebp+var_9]']
cmp ['eax,', '10h']
jge ['short', 'loc_1E36']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '82h']
jnz ['short', 'loc_1E5A']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
movzx ['ecx,', '[ebp+var_9]']
push ['ecx']
mov ['edx,', '[ebp+var_64]']
push ['edx']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jnz ['loc_1F6A']
movzx ['eax,', '[ebp+var_85]']
sub ['eax,', '81h']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '0FFFFFFF1h']
add ['eax,', '10h']
mov ['[ebp+var_91],', 'al']
movzx ['eax,', '[ebp+var_85]']
xor ['ecx,', 'ecx']
cmp ['eax,', '81h']
setz ['cl']
lea ['ecx,', 'ds:0Bh[ecx*8]']
mov ['[ebp+var_9D],', 'cl']
movzx ['eax,', '[ebp+var_85]']
cmp ['eax,', '82h']
jnz ['short', 'loc_1EBA']
mov ['[ebp+var_91],', '1']
mov ['[ebp+var_9D],', '13h']
mov ['al,', '[ebp+var_91]']
mov ['[ebp+var_A9],', 'al']
jmp ['short', 'loc_1ED6']
mov ['al,', '[ebp+var_A9]']
add ['al,', '1']
mov ['[ebp+var_A9],', 'al']
movzx ['eax,', '[ebp+var_A9]']
movzx ['ecx,', '[ebp+var_9D]']
cmp ['eax,', 'ecx']
jg ['short', 'loc_1F37']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_1F37']
movzx ['eax,', '[ebp+var_A9]']
mov ['ecx,', '[ebp+var_64]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jz ['short', 'loc_1F35']
movzx ['eax,', '[ebp+var_A9]']
movsx ['ecx,', '[ebp+eax+Dst]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1F35']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
movzx ['ecx,', '[ebp+var_A9]']
push ['ecx']
mov ['edx,', '[ebp+var_64]']
push ['edx']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_1EC8']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_1F6A']
movzx ['eax,', '[ebp+var_91]']
cmp ['eax,', '1']
jnz ['short', 'loc_1F6A']
lea ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_9]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
call ['_LMBCSConversionWorker']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jnz ['short', 'loc_1F92']
movzx ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['_LMBCSConvertUni']
add ['esp,', '8']
add ['eax,', '[ebp+var_30]']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[ebp+var_24]']
sub ['eax,', 'ecx']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
lea ['eax,', '[ebp+var_24]']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
cmp ['edx,', '[ecx+14h]']
jnb ['short', 'loc_201A']
mov ['eax,', '[ebp+var_3C]']
mov ['[ebp+var_180],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
sub ['ecx,', '1']
mov ['[ebp+var_3C],', 'ecx']
cmp ['[ebp+var_180],', '0']
jz ['short', 'loc_201A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_30]']
mov ['al,', '[edx]']
mov ['[ecx],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_2018']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_70]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+18h],', 'ecx']
jmp ['short', 'loc_1FA7']
mov ['eax,', '[ebp+var_70]']
add ['eax,', '1']
mov ['[ebp+var_70],', 'eax']
cmp ['[ebp+var_3C],', '0']
jle ['short', 'loc_208F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '4Ch']
mov ['[ebp+var_B8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_3C]']
mov ['[ecx+3Fh],', 'dl']
mov ['eax,', '[ebp+var_3C]']
mov ['[ebp+var_180],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
sub ['ecx,', '1']
mov ['[ebp+var_3C],', 'ecx']
cmp ['[ebp+var_180],', '0']
jz ['short', 'loc_208F']
mov ['eax,', '[ebp+var_B8]']
mov ['ecx,', '[ebp+var_30]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_B8]']
add ['eax,', '1']
mov ['[ebp+var_B8],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
jmp ['short', 'loc_204D']
mov ['eax,', '[ebp+var_64]']
mov ['cl,', '[ebp+var_79]']
mov ['[eax+51h],', 'cl']
jmp ['loc_1A27']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN55']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '180h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN54']
dd ['offset', '$LN50']
dd ['0FFFFFFE8h,', '2']
dd ['offset', '$LN51']
dd ['0FFFFFFDCh,', '3']
dd ['offset', '$LN52']
dd ['0FFFFFFA8h,', '14h']
dd ['offset', '$LN53']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_FindLMBCSUniRange proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', 'offset', '_UniLMBCSGrpMap']
movzx ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
cmp ['eax,', 'edx']
jle ['short', 'loc_2173']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_2159']
movzx ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jl ['short', 'loc_2189']
mov ['eax,', '[ebp+var_8]']
mov ['al,', '[eax+4]']
jmp ['short', 'loc_218B']
mov ['al,', '14h']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_LMBCSConversionWorker proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_21F0']
mov ['eax,', 'ds:?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7']
add ['eax,', '8']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_19NLCFGENH@?$AAx?$AAc?$AAn?$AAv?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', '[ebp+arg_4]']
cmp ['eax,', '14h']
jl ['short', 'loc_221F']
mov ['ecx,', 'ds:?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7']
add ['ecx,', '9']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1BG@JNDMJFPL@?$AAg?$AAr?$AAo?$AAu?$AAp?$AA?$DM?$AA0?$AAx?$AA1?$AA4?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['0']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ucnv_MBCSFromUChar32_56']
add ['esp,', '10h']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_2255']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', 'ds:0FFFFFFF8h[eax*8]']
mov ['edx,', '[ebp+var_2C]']
shr ['edx,', 'cl']
mov ['[ebp+var_35],', 'dl']
jmp ['short', 'loc_2267']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_14]']
mov ['byte', 'ptr', '[ecx+eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_2390']
mov ['eax,', '[ebp+arg_10]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax],', 'cl']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '1Fh']
jle ['short', 'loc_22B1']
movzx ['ecx,', '[ebp+var_35]']
cmp ['ecx,', '80h']
jge ['short', 'loc_22B1']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_22B1']
mov ['eax,', 'ds:?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7']
add ['eax,', '1Bh']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
push ['offset', '??_C@_1HM@JBBJNMGH@?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA1?$AAF?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', '[ebp+arg_4]']
test ['eax,', 'eax']
jz ['short', 'loc_22F9']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+50h]']
movzx ['edx,', '[ebp+arg_4]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_22F9']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_20],', '1']
jnz ['short', 'loc_22F9']
movzx ['eax,', '[ebp+arg_4]']
cmp ['eax,', '10h']
jl ['short', 'loc_22F9']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_20],', '1']
jnz ['short', 'loc_230F']
movzx ['eax,', '[ebp+var_35]']
cmp ['eax,', '20h']
jge ['short', 'loc_230F']
xor ['eax,', 'eax']
jmp ['loc_2390']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_100],', 'eax']
mov ['ecx,', '[ebp+var_100]']
sub ['ecx,', '1']
mov ['[ebp+var_100],', 'ecx']
cmp ['[ebp+var_100],', '3']
ja ['short', 'loc_238A']
mov ['edx,', '[ebp+var_100]']
jmp ['ds:$LN21[edx*4]']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_2C]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19']
dd ['offset', '$LN18']
align ['4']
dd ['offset', '$LN3']
dd ['offset', '$LN4']
dd ['offset', '$LN5']
assume ['cs:_rdata']
public ['??_C@_1HM@JBBJNMGH@?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AA1?$AAF?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAf?$AAi?$AAr?$AAs?$AAt?$AAB?$AAy?$AAt@']
unicode ['0,', '<(firstByte', '>']
dw ['3Ch']
unicode ['0,', '<=', '0x1F)', '||', '(firstByte', '>']
dw ['3Eh']
unicode ['0,', '<=', '0x80)', '||', '(group', '==', '0x00)>,0']
assume ['cs:_rdata']
public ['??_C@_1BG@JNDMJFPL@?$AAg?$AAr?$AAo?$AAu?$AAp?$AA?$DM?$AA0?$AAx?$AA1?$AA4?$AA?$AA@']
unicode ['0,', '<group>']
dw ['3Ch']
unicode ['0,', '<0x14>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_19NLCFGENH@?$AAx?$AAc?$AAn?$AAv?$AA?$AA@']
unicode ['0,', '<xcnv>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1FK@MKAMAJGB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAc?$AAo?$AAm?$AAm?$AAo@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\common\\ucnv_lmb.c>,0']
align ['10h']
assume ['cs:_data']
public ['?__LINE__Var@?1??LMBCSConversionWorker@@9@9@addd29c7']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_LMBCSConvertUni proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFh']
mov ['[ebp+var_5],', 'al']
movzx ['eax,', '[ebp+arg_4]']
sar ['eax,', '8']
mov ['[ebp+var_11],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '14h']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
movzx ['eax,', '[ebp+var_5]']
test ['eax,', 'eax']
jnz ['short', 'loc_2551']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0F6h']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_11]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_2573']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_11]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_5]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '3']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSToUnicodeWithOffsets proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '148h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_148]']
mov ['ecx,', '52h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_2C],', 'ecx']
mov ['[ebp+Src],', '0']
mov ['[ebp+var_41],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['loc_280E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+8]']
jbe ['loc_280E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+14h]']
cmp ['edx,', '[ecx+10h]']
jbe ['loc_280E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
test ['edx,', 'edx']
jz ['loc_276D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
mov ['[ebp+Size],', 'edx']
mov ['eax,', '3']
sub ['eax,', '[ebp+Size]']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+8]']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_74]']
jnb ['short', 'loc_2637']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_148],', 'ecx']
jmp ['short', 'loc_2640']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_148],', 'edx']
mov ['eax,', '[ebp+var_148]']
mov ['[ebp+var_80],', 'eax']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
push ['ecx']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+var_80]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+Size]']
lea ['eax,', '[ebp+edx+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_50],', 'ecx']
lea ['eax,', '[ebp+Dst]']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+Src]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+Size]']
lea ['ecx,', '[ebp+eax+Dst]']
add ['ecx,', '[ebp+var_80]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+Size]']
add ['eax,', '[ebp+var_80]']
mov ['[ebp+var_41],', 'al']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['__LMBCSGetNextUCharWorker']
add ['esp,', '8']
mov ['[ebp+var_14],', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
lea ['edx,', '[ebp+Dst]']
sub ['ecx,', 'edx']
sub ['ecx,', '[ebp+Size]']
add ['ecx,', '[ebp+var_20]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_50]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0Bh']
jnz ['short', 'loc_2761']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ebp+var_41]']
mov ['[ecx+24h],', 'dl']
push ['1']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
movsx ['ecx,', '[ebp+var_41]']
push ['ecx']
lea ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['loc_2893']
jmp ['short', 'loc_276B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
jmp ['short', 'loc_2793']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+Src],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['__LMBCSGetNextUCharWorker']
add ['esp,', '8']
mov ['[ebp+var_14],', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_41],', 'cl']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2809']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '0FFFEh']
jge ['short', 'loc_27EA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['dx,', '[ebp+var_14]']
mov ['[ecx],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_27E8']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+18h],', 'ecx']
jmp ['short', 'loc_2809']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '0FFFEh']
jnz ['short', 'loc_2800']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
jmp ['short', 'loc_2809']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_25B2']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_283D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+8]']
jbe ['short', 'loc_283D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+14h]']
cmp ['edx,', '[ecx+10h]']
ja ['short', 'loc_283D']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_2893']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_2893']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', '[ebp+var_41]']
mov ['[ecx+24h],', 'dl']
movsx ['eax,', '[ebp+var_41]']
test ['eax,', 'eax']
jle ['short', 'loc_2882']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
movsx ['ecx,', '[ebp+var_41]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0Bh']
jnz ['short', 'loc_2893']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '148h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN23']
dd ['offset', '$LN22']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSGetNextUCharWorker proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '118h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_118]']
mov ['ecx,', '46h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jb ['short', 'loc_291A']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
mov ['eax,', '0FFFFh']
jmp ['loc_2D0E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_11],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '1Fh']
jle ['short', 'loc_2948']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '80h']
jl ['short', 'loc_2974']
movzx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jz ['short', 'loc_2974']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '9']
jz ['short', 'loc_2974']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '0Dh']
jz ['short', 'loc_2974']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '0Ah']
jz ['short', 'loc_2974']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '19h']
jnz ['short', 'loc_2980']
movzx ['eax,', '[ebp+var_11]']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_2D0B']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '0Fh']
jnz ['short', 'loc_2A05']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+0Ch]']
jbe ['short', 'loc_29B9']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
mov ['eax,', '0FFFFh']
jmp ['loc_2D0E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_41],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
movzx ['eax,', '[ebp+var_41]']
cmp ['eax,', '80h']
jge ['short', 'loc_29ED']
movzx ['ecx,', '[ebp+var_41]']
sub ['ecx,', '20h']
mov ['[ebp+var_118],', 'ecx']
jmp ['short', 'loc_29F7']
movzx ['edx,', '[ebp+var_41]']
mov ['[ebp+var_118],', 'edx']
mov ['eax,', '[ebp+var_118]']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_2D0B']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '14h']
jnz ['short', 'loc_2A5A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+0Ch]']
jbe ['short', 'loc_2A3E']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
mov ['eax,', '0FFFFh']
jmp ['loc_2D0E']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
push ['eax']
call ['_GetUniFromLMBCSUni']
add ['esp,', '4']
movzx ['eax,', 'ax']
jmp ['loc_2D0E']
jmp ['loc_2D0B']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '20h']
jg ['loc_2BFD']
mov ['al,', '[ebp+var_11]']
mov ['[ebp+var_29],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_20],', 'edx']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '13h']
jg ['short', 'loc_2A95']
movzx ['eax,', '[ebp+var_29]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_38],', 'edx']
cmp ['[ebp+var_38],', '0']
jnz ['short', 'loc_2AA3']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ah']
jmp ['loc_2BF8']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '10h']
jl ['loc_2B59']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+0Ch]']
jbe ['short', 'loc_2AE0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
mov ['eax,', '0FFFFh']
jmp ['loc_2D0E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
movzx ['eax,', '[ebp+var_29]']
cmp ['edx,', 'eax']
jnz ['short', 'loc_2B2B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
push ['0']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
jmp ['short', 'loc_2B54']
push ['0']
push ['2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
jmp ['loc_2BF8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+0Ch]']
jbe ['short', 'loc_2B89']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
mov ['eax,', '0FFFFh']
jmp ['loc_2D0E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_11],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '80h']
jl ['short', 'loc_2BC1']
movzx ['eax,', '[ebp+var_11]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+24h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*4]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_2BF8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['al,', '[ebp+var_29]']
mov ['[ebp+var_50],', 'al']
mov ['al,', '[ebp+var_11]']
mov ['[ebp+var_4F],', 'al']
push ['0']
push ['2']
lea ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_2D0B']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '80h']
jl ['loc_2D0B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['cl,', '[eax+50h]']
mov ['[ebp+var_29],', 'cl']
movzx ['eax,', '[ebp+var_29]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_38],', 'edx']
movzx ['eax,', '[ebp+var_29]']
cmp ['eax,', '10h']
jl ['loc_2CFA']
movzx ['eax,', '[ebp+var_11]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
call ['_ucnv_MBCSIsLeadByte_56']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2C9F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jbe ['short', 'loc_2C80']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
mov ['eax,', '0FFFFh']
jmp ['loc_2D0E']
push ['0']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_2CF8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+0Ch]']
jbe ['short', 'loc_2CCC']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+8],', 'edx']
mov ['eax,', '0FFFFh']
jmp ['short', 'loc_2D0E']
push ['0']
push ['2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
call ['_ucnv_MBCSSimpleGetNextUChar_56']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
jmp ['short', 'loc_2D0B']
movzx ['eax,', '[ebp+var_11]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+24h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN38']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '118h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN37']
dd ['offset', '$LN36']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_GetUniFromLMBCSUni proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_5],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_11],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
movzx ['eax,', '[ebp+var_5]']
cmp ['eax,', '0F6h']
jnz ['short', 'loc_2DB1']
mov ['al,', '[ebp+var_11]']
mov ['[ebp+var_5],', 'al']
mov ['[ebp+var_11],', '0']
movzx ['eax,', '[ebp+var_5]']
shl ['eax,', '8']
movzx ['ecx,', '[ebp+var_11]']
or ['eax,', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen1	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpenWorker proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1ECh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1EC]']
mov ['ecx,', '7Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
push ['54h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_1EC],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_1EC]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_1EC]']
mov ['[ebp+Dst],', 'edx']
cmp ['[ebp+Dst],', '0']
jz ['loc_2F68']
mov ['[ebp+var_118],', '1Ch']
xor ['eax,', 'eax']
mov ['[ebp+var_114],', 'eax']
mov ['[ebp+var_110],', 'eax']
mov ['[ebp+var_10C],', 'eax']
mov ['[ebp+var_108],', 'eax']
mov ['[ebp+var_104],', 'eax']
mov ['[ebp+var_100],', 'eax']
push ['54h']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax+8]']
mov ['byte', 'ptr', '[ebp+var_110],', 'cl']
mov ['[ebp+var_121],', '0']
jmp ['short', 'loc_2ECA']
mov ['al,', '[ebp+var_121]']
add ['al,', '1']
mov ['[ebp+var_121],', 'al']
movzx ['eax,', '[ebp+var_121]']
cmp ['eax,', '13h']
jg ['short', 'loc_2F27']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2F27']
movzx ['eax,', '[ebp+var_121]']
cmp ['ds:_OptGroupByteToCPName[eax*4],', '0']
jz ['short', 'loc_2F25']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_118]']
push ['ecx']
lea ['edx,', '[ebp+var_F4]']
push ['edx']
movzx ['eax,', '[ebp+var_121]']
mov ['ecx,', 'ds:_OptGroupByteToCPName[eax*4]']
push ['ecx']
call ['_ucnv_loadSharedData_56']
add ['esp,', '10h']
movzx ['edx,', '[ebp+var_121]']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_2EBC']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2F3A']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2F48']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['__LMBCSClose']
add ['esp,', '4']
jmp ['short', 'loc_2F71']
mov ['eax,', '[ebp+Dst]']
mov ['cl,', '[ebp+arg_C]']
mov ['[eax+50h],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_FindLMBCSLocale']
add ['esp,', '4']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+51h],', 'al']
jmp ['short', 'loc_2F71']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1ECh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN13']
dd ['offset', '$LN11']
dd ['0FFFFFEE8h,', '1Ch']
dd ['offset', '$LN12']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_FindLMBCSLocale proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', 'offset', '_LocaleLMBCSGrpMap']
cmp ['[ebp+Str2],', '0']
jz ['short', 'loc_300D']
mov ['eax,', '[ebp+Str2]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_3014']
xor ['al,', 'al']
jmp ['loc_30AD']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['loc_30AB']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+Str2]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_3089']
push ['1']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['1']
mov ['edx,', '[ebp+Str2]']
push ['edx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_strlen']
add ['esp,', '4']
mov ['esi,', 'esp']
push ['eax']
mov ['edx,', '[ebp+Str2]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strncmp']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_3087']
mov ['eax,', '[ebp+var_8]']
mov ['al,', '[eax+4]']
jmp ['short', 'loc_30AD']
jmp ['short', 'loc_309D']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+Str2]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jle ['short', 'loc_309D']
jmp ['short', 'loc_30AB']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_3014']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen2	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['2']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen3	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['3']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen4	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['4']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen5	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['5']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen6	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['6']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen8	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['8']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen11	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0Bh']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen16	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['10h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen17	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['11h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen18	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['12h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__LMBCSOpen19	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['13h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__LMBCSOpenWorker']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['_ucnv_getCompleteUnicodeSet_56:near']
extrn ['_uprv_free_56:near']
extrn ['_ucnv_unloadSharedDataIfReady_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_ucnv_incrementRefCount_56:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_memset:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_ucnv_MBCSFromUChar32_56:near']
extrn ['__imp___wassert:near']
extrn ['_ucnv_MBCSIsLeadByte_56:near']
extrn ['_ucnv_MBCSSimpleGetNextUChar_56:near']
extrn ['_ucnv_loadSharedData_56:near']
extrn ['_uprv_malloc_56:near']
extrn ['__imp__strncmp:near']
extrn ['_strlen:near']
end
