endp
??2@YAPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_open_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '20h']
jl ['short', 'loc_A9']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['short', 'loc_B0']
cmp ['[ebp+arg_8],', '400h']
jge ['short', 'loc_B0']
xor ['eax,', 'eax']
jmp ['loc_204']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_BE']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
jmp ['short', 'loc_DB']
push ['4409Ch']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_DB']
xor ['eax,', 'eax']
jmp ['loc_204']
push ['4409Ch']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
cmp ['[ebp+arg_0],', '0']
setz ['al']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+22014h],', 'al']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_11C']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+22000h],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+22015h],', '0']
jmp ['short', 'loc_15D']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '2']
push ['eax']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+22000h],', 'eax']
mov ['eax,', '[ebp+Dst]']
cmp ['dword', 'ptr', '[eax+22000h],', '0']
jnz ['short', 'loc_153']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['loc_204']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+22015h],', '1']
mov ['[ebp+var_20],', '20h']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['short', 'loc_197']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '20h']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_14],', '8']
jl ['short', 'loc_173']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+22010h],', 'ecx']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_1C6']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ecx+22000h]']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[edx+eax*4],', 'ecx']
jmp ['short', 'loc_1A3']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax+22004h],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+22008h],', '8800h']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+2200Ch],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['cl,', '[ebp+arg_14]']
mov ['[eax+22016h],', 'cl']
mov ['eax,', '[ebp+Dst]']
mov ['byte', 'ptr', '[eax+22017h],', '0']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_clone_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Src],', '0']
jz ['short', 'loc_256']
mov ['eax,', '[ebp+Src]']
cmp ['dword', 'ptr', '[eax+22000h],', '0']
jz ['short', 'loc_256']
mov ['eax,', '[ebp+Src]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22017h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_25D']
xor ['eax,', 'eax']
jmp ['loc_379']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_277']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+2200Ch]']
jl ['short', 'loc_277']
mov ['[ebp+var_11],', '0']
jmp ['short', 'loc_2AC']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+2200Ch]']
mov ['[ebp+arg_C],', 'ecx']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+2200Ch]']
shl ['ecx,', '2']
push ['ecx']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_2A8']
xor ['eax,', 'eax']
jmp ['loc_379']
mov ['[ebp+var_11],', '1']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax+22016h]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+22004h]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+22000h]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_utrie_open_56']
add ['esp,', '18h']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_2F8']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
jmp ['short', 'loc_376']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['22000h']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['1']
mov ['eax,', '[ebp+Src]']
mov ['ecx,', '[eax+22000h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[edx+22010h]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+22000h]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+22000h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+22010h]']
mov ['[eax+22010h],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['cl,', '[ebp+var_11]']
mov ['[eax+22015h],', 'cl']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_close_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_3FB']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22015h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3E1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+22000h],', '0']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22014h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3FB']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_getData_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_43A']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_43E']
xor ['eax,', 'eax']
jmp ['short', 'loc_455']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22010h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+22000h]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_set32_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_497']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22017h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_497']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_49B']
xor ['al,', 'al']
jmp ['short', 'loc_4D2']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_4B8']
xor ['al,', 'al']
jmp ['short', 'loc_4D2']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[edx+eax*4],', 'ecx']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_526']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_59A']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z']
add ['esp,', '4']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jge ['short', 'loc_540']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_59A']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4],', 'edx']
push ['1']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
sub ['edx,', 'eax']
push ['edx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['80h']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
sub ['edx,', 'eax']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[ecx+edx*4]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22010h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '20h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+2200Ch]']
jle ['short', 'loc_5F6']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_605']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+22010h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_get32_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_647']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22017h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_647']
cmp ['[ebp+arg_4],', '10FFFFh']
jbe ['short', 'loc_657']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_653']
mov ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['short', 'loc_6AC']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_678']
cmp ['[ebp+var_8],', '0']
setz ['al']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'al']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_689']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_D0],', 'eax']
jmp ['short', 'loc_694']
mov ['ecx,', '[ebp+var_8]']
neg ['ecx']
mov ['[ebp+var_D0],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '1Fh']
add ['edx,', '[ebp+var_D0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['eax,', '[ecx+edx*4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_setRange32_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_700']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22017h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_700']
cmp ['[ebp+arg_4],', '10FFFFh']
ja ['short', 'loc_700']
cmp ['[ebp+arg_8],', '110000h']
ja ['short', 'loc_700']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jle ['short', 'loc_707']
xor ['al,', 'al']
jmp ['loc_93F']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_716']
mov ['al,', '1']
jmp ['loc_93F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
jz ['loc_7D4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jge ['short', 'loc_750']
xor ['al,', 'al']
jmp ['loc_93F']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFE0h']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_8]']
jg ['short', 'loc_79A']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
push ['20h']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '1Fh']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
call ['?utrie_fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_7D4']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '1Fh']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '1Fh']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+22000h]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
call ['?utrie_fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
mov ['al,', '1']
jmp ['loc_93F']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '1Fh']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '0FFFFFFE0h']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_7F7']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_7FE']
mov ['[ebp+var_2C],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jge ['loc_8EF']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jle ['short', 'loc_84D']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
push ['20h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[ecx+edx*4]']
push ['eax']
call ['?utrie_fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
jmp ['loc_8E1']
mov ['eax,', '[ebp+var_14]']
neg ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
mov ['eax,', '[edx+eax*4]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_8E1']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_871']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['short', 'loc_8E1']
cmp ['[ebp+var_2C],', '0']
jl ['short', 'loc_88A']
mov ['eax,', '[ebp+var_2C]']
neg ['eax']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_8E1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z']
add ['esp,', '8']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jge ['short', 'loc_8AA']
xor ['al,', 'al']
jmp ['loc_93F']
mov ['eax,', '[ebp+var_2C]']
neg ['eax']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*4],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
push ['20h']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+22000h]']
mov ['ecx,', '[ebp+var_2C]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
call ['?utrie_fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '20h']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_7FE']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_93D']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?utrie_getDataBlock@@YAHPAUUNewTrie@@H@Z']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jge ['short', 'loc_912']
xor ['al,', 'al']
jmp ['short', 'loc_93F']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
call ['?utrie_fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?utrie_fillBlock@@YAXPAIHHIIC@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+arg_0],', 'edx']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['short', 'loc_9AF']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_9AD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_992']
jmp ['short', 'loc_9D4']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_9D4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_10]']
jnz ['short', 'loc_9C9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_9AF']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_serialize_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_10C]']
mov ['ecx,', '43h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_44],', '0']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_A1C']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A23']
xor ['eax,', 'eax']
jmp ['loc_D0B']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_A3B']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_A3B']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_A4B']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_A4B']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_D0B']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_A58']
mov ['[ebp+arg_C],', 'offset', '?defaultGetFoldedValue@@YAIPAUUNewTrie@@HH@Z']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22017h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_ACA']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?utrie_fold@@YAXPAUUNewTrie@@P6AI0HH@ZPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+22017h],', '1']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_ACA']
xor ['eax,', 'eax']
jmp ['loc_D0B']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['short', 'loc_AEC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22010h]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+22008h]']
mov ['[ebp+var_10C],', 'edx']
jmp ['short', 'loc_AFB']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22010h]']
mov ['[ebp+var_10C],', 'edx']
cmp ['[ebp+var_10C],', '40000h']
jl ['short', 'loc_B10']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22008h]']
lea ['edx,', '[ecx+ecx+10h]']
mov ['[ebp+var_38],', 'edx']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['short', 'loc_B3C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22010h]']
mov ['edx,', '[ebp+var_38]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_B4E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22010h]']
mov ['edx,', '[ebp+var_38]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_8]']
jle ['short', 'loc_B5E']
mov ['eax,', '[ebp+var_38]']
jmp ['loc_D0B']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '10h']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '54726965h']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+4],', '25h']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jnz ['short', 'loc_B9A']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
or ['ecx,', '100h']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22016h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_BBA']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
or ['ecx,', '200h']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22008h]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22010h]']
mov ['[eax+0Ch],', 'edx']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['loc_C86']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22008h]']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_C07']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jle ['short', 'loc_C38']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+22008h]']
shr ['ecx,', '2']
mov ['eax,', '[ebp+Dst]']
mov ['[eax],', 'cx']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '2']
mov ['[ebp+Dst],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_BFE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22010h]']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_C5B']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jle ['short', 'loc_C81']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_14]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '2']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_C52']
jmp ['loc_D08']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22008h]']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_CA9']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jle ['short', 'loc_CD1']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+Dst]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '2']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_CA0']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
push ['ecx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+22010h]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_38]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '10Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setnle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?utrie_fold@@YAXPAUUNewTrie@@P6AI0HH@ZPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '188h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_188]']
mov ['ecx,', '62h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_94],', 'eax']
push ['1']
mov ['eax,', '[ebp+var_94]']
add ['eax,', '1B00h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['80h']
mov ['ecx,', '[ebp+var_94]']
add ['ecx,', '1B00h']
push ['ecx']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+22004h]']
cmp ['eax,', '[ecx]']
jnz ['short', 'loc_DD6']
mov ['[ebp+var_C4],', '0']
jmp ['short', 'loc_E44']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?utrie_allocDataBlock@@YAHPAUUNewTrie@@@Z']
add ['esp,', '4']
mov ['[ebp+var_C4],', 'eax']
cmp ['[ebp+var_C4],', '0']
jge ['short', 'loc_DFF']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_10D8']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22004h]']
push ['ecx']
push ['20h']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+22000h]']
mov ['ecx,', '[ebp+var_C4]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
call ['?utrie_fillBlock@@YAXPAIHHIIC@Z']
add ['esp,', '18h']
mov ['eax,', '[ebp+var_C4]']
neg ['eax']
mov ['[ebp+var_C4],', 'eax']
mov ['[ebp+var_AC],', '6C0h']
jmp ['short', 'loc_E5F']
mov ['eax,', '[ebp+var_AC]']
add ['eax,', '1']
mov ['[ebp+var_AC],', 'eax']
cmp ['[ebp+var_AC],', '6E0h']
jge ['short', 'loc_E7F']
mov ['eax,', '[ebp+var_AC]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C4]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_E50']
mov ['[ebp+var_B8],', '800h']
mov ['[ebp+var_AC],', '10000h']
cmp ['[ebp+var_AC],', '110000h']
jge ['loc_101F']
mov ['eax,', '[ebp+var_AC]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_94]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jz ['loc_100B']
mov ['eax,', '[ebp+var_AC]']
and ['eax,', '0FFFFFC00h']
mov ['[ebp+var_AC],', 'eax']
mov ['eax,', '[ebp+var_AC]']
sar ['eax,', '5']
push ['eax']
mov ['ecx,', '[ebp+var_B8]']
push ['ecx']
mov ['edx,', '[ebp+var_94]']
push ['edx']
call ['?_findSameIndexBlock@@YAHPBHHH@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_C4],', 'eax']
mov ['eax,', '[ebp+var_C4]']
add ['eax,', '20h']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_AC]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['[ebp+arg_4]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_A0],', 'eax']
push ['0']
mov ['eax,', '[ebp+var_AC]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
movzx ['ecx,', 'ax']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_utrie_get32_56']
add ['esp,', '0Ch']
cmp ['[ebp+var_A0],', 'eax']
jz ['loc_FF8']
mov ['eax,', '[ebp+var_A0]']
push ['eax']
mov ['ecx,', '[ebp+var_AC]']
sar ['ecx,', '0Ah']
add ['ecx,', '0D7C0h']
movzx ['edx,', 'cx']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_utrie_set32_56']
add ['esp,', '0Ch']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_F84']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '7']
jmp ['loc_10D8']
mov ['eax,', '[ebp+var_C4]']
cmp ['eax,', '[ebp+var_B8]']
jnz ['short', 'loc_FF8']
push ['1']
mov ['eax,', '[ebp+var_AC]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_94]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['esi,', 'esp']
push ['80h']
mov ['eax,', '[ebp+var_AC]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_94]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_B8]']
mov ['ecx,', '[ebp+var_94]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_B8]']
add ['eax,', '20h']
mov ['[ebp+var_B8],', 'eax']
mov ['eax,', '[ebp+var_AC]']
add ['eax,', '400h']
mov ['[ebp+var_AC],', 'eax']
jmp ['short', 'loc_101A']
mov ['eax,', '[ebp+var_AC]']
add ['eax,', '20h']
mov ['[ebp+var_AC],', 'eax']
jmp ['loc_E93']
cmp ['[ebp+var_B8],', '8800h']
jl ['short', 'loc_1039']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '8']
jmp ['loc_10D8']
push ['1']
mov ['eax,', '[ebp+var_94]']
add ['eax,', '2000h']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_B8]']
lea ['edx,', 'ds:0FFFFE000h[ecx*4]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_94]']
add ['eax,', '2000h']
push ['eax']
mov ['ecx,', '[ebp+var_94]']
add ['ecx,', '2080h']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['1']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['80h']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+var_94]']
add ['edx,', '2000h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_B8]']
add ['eax,', '20h']
mov ['[ebp+var_B8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_B8]']
mov ['[eax+22008h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '188h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN18']
dd ['offset', '$LN17']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?_findSameIndexBlock@@YAHPBHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '800h']
jmp ['short', 'loc_1158']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '20h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_11A3']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_1172']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '20h']
jge ['short', 'loc_1196']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[edx+eax*4]']
cmp ['eax,', '[esi+ecx*4]']
jz ['short', 'loc_1194']
jmp ['short', 'loc_1196']
jmp ['short', 'loc_1169']
cmp ['[ebp+var_14],', '20h']
jnz ['short', 'loc_11A1']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_11A6']
jmp ['short', 'loc_114F']
mov ['eax,', '[ebp+arg_4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?utrie_compact@@YAXPAUUNewTrie@@CPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_11E9']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_11EE']
jmp ['loc_14C7']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1202']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_14C7']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22017h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1215']
jmp ['loc_14C7']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_findUnusedBlocks@@YAXPAUUNewTrie@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+22016h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1241']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_1241']
mov ['[ebp+var_2C],', '120h']
jmp ['short', 'loc_1248']
mov ['[ebp+var_2C],', '20h']
mov ['[ebp+var_20],', '20h']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+22010h]']
jge ['loc_144F']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4+22018h],', '0']
jge ['short', 'loc_1285']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '20h']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_1255']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jl ['short', 'loc_12E0']
movsx ['eax,', '[ebp+arg_4]']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '0FFFFFFE4h']
add ['eax,', '20h']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
push ['ecx']
call ['?_findSameDataBlock@@YAHPBIHHH@Z']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_12E0']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax*4+22018h],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '20h']
mov ['[ebp+var_14],', 'eax']
jmp ['loc_1255']
movsx ['eax,', '[ebp+arg_4]']
test ['eax,', 'eax']
jz ['short', 'loc_1342']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jl ['short', 'loc_1342']
mov ['[ebp+var_8],', '1Ch']
jmp ['short', 'loc_1302']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_1340']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+22000h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
sub ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
lea ['edx,', '[ecx+edx*4]']
push ['edx']
call ['?equal_uint32@@YACPBI0H@Z']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_1340']
jmp ['short', 'loc_12F9']
jmp ['short', 'loc_1349']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_13C1']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
sar ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*4+22018h],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '20h']
sub ['eax,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1384']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_13BC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+22000h]']
mov ['edx,', '[ebp+var_20]']
mov ['esi,', '[ebp+var_14]']
mov ['ecx,', '[ecx+esi*4]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_137B']
jmp ['loc_144A']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_1428']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+eax*4+22018h],', 'edx']
mov ['[ebp+var_8],', '20h']
jmp ['short', 'loc_13EE']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_1426']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+22000h]']
mov ['edx,', '[ebp+var_20]']
mov ['esi,', '[ebp+var_14]']
mov ['ecx,', '[ecx+esi*4]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_13E5']
jmp ['short', 'loc_144A']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4+22018h],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '20h']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'eax']
jmp ['loc_1255']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_1461']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+22008h]']
jge ['short', 'loc_14BB']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jl ['short', 'loc_148C']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_F4],', 'ecx']
jmp ['short', 'loc_149D']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4]']
neg ['ecx']
mov ['[ebp+var_F4],', 'ecx']
mov ['edx,', '[ebp+var_F4]']
sar ['edx,', '5']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[esi+edx*4+22018h]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_1458']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+22010h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?equal_uint32@@YACPBI0H@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1529']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_1529']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_14FA']
cmp ['[ebp+arg_8],', '0']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?_findUnusedBlocks@@YAXPAUUNewTrie@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['22084h']
push ['0FFh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '22018h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_1583']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+22008h]']
jge ['short', 'loc_15D8']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jl ['short', 'loc_15AE']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_D0],', 'ecx']
jmp ['short', 'loc_15BF']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4]']
neg ['ecx']
mov ['[ebp+var_D0],', 'ecx']
mov ['edx,', '[ebp+var_D0]']
sar ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+edx*4+22018h],', '0']
jmp ['short', 'loc_157A']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+22018h],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?_findSameDataBlock@@YAHPBIHHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '20h']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_1635']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jg ['short', 'loc_1669']
push ['20h']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
call ['?equal_uint32@@YACPBI0H@Z']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1667']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_166C']
jmp ['short', 'loc_162C']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?defaultGetFoldedValue@@YAIPAUUNewTrie@@HH@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+22000h]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '400h']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_20]']
jge ['short', 'loc_1703']
lea ['eax,', '[ebp+var_29]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_utrie_get32_56']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
movsx ['eax,', '[ebp+var_29]']
test ['eax,', 'eax']
jz ['short', 'loc_16E9']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '20h']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_1701']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_16F8']
mov ['eax,', '[ebp+arg_8]']
jmp ['short', 'loc_1705']
jmp ['short', 'loc_1701']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_16B7']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN10']
dd ['offset', '$LN9']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_defaultGetFoldingOffset_56 proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_unserialize_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_17AD']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_17B5']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1955']
cmp ['[ebp+arg_8],', '10h']
jge ['short', 'loc_17CC']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '3']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1955']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '54726965h']
jz ['short', 'loc_17EE']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '3']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1955']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '0Fh']
cmp ['eax,', '5']
jnz ['short', 'loc_1810']
mov ['eax,', '[ebp+var_20]']
shr ['eax,', '4']
and ['eax,', '0Fh']
cmp ['eax,', '2']
jz ['short', 'loc_1821']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '3']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1955']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '200h']
setnz ['cl']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+18h],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '10h']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
shl ['ecx,', '1']
cmp ['[ebp+arg_8],', 'ecx']
jge ['short', 'loc_1871']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '3']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1955']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '10h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', 'ecx']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '100h']
jz ['short', 'loc_18F9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
shl ['ecx,', '2']
cmp ['[ebp+arg_8],', 'ecx']
jge ['short', 'loc_18CA']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '3']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1955']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
mov ['[edx+14h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
shl ['eax,', '2']
lea ['ecx,', '[eax+ecx*2+10h]']
mov ['[ebp+arg_8],', 'ecx']
jmp ['short', 'loc_1948']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
shl ['ecx,', '1']
cmp ['[ebp+arg_8],', 'ecx']
jge ['short', 'loc_1914']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '3']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1955']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
shl ['eax,', '1']
lea ['ecx,', '[eax+ecx*2+10h]']
mov ['[ebp+arg_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', 'offset', '_utrie_defaultGetFoldingOffset_56']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_unserializeDummy_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_18],', '0']
jz ['short', 'loc_19A5']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_19AD']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1C35']
mov ['[ebp+var_20],', '100h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '820h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_19DE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '20h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
shl ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['short', 'loc_1A02']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_1A11']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_1A2A']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_1C35']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+18h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+14h],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax],', 'ecx']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['loc_1B5C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sar ['ecx,', '2']
mov ['[ebp+var_44],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_1A7C']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_1A94']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+Dst]']
mov ['dx,', '[ebp+var_44]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_1A73']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_1AE0']
mov ['eax,', '[ebp+var_20]']
sar ['eax,', '2']
movzx ['ecx,', 'ax']
movzx ['edx,', '[ebp+var_44]']
add ['edx,', 'ecx']
mov ['[ebp+var_44],', 'dx']
mov ['[ebp+var_2C],', '6C0h']
mov ['[ebp+var_38],', '6E0h']
jmp ['short', 'loc_1AC8']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_1AE0']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+Dst]']
mov ['dx,', '[ebp+var_44]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_1ABF']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_1B0B']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_20]']
jge ['short', 'loc_1B23']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+Dst]']
mov ['dx,', 'word', 'ptr', '[ebp+arg_C]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_1B02']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_1B57']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '20h']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_1B3F']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_1B57']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+Dst]']
mov ['dx,', 'word', 'ptr', '[ebp+arg_10]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_1B36']
jmp ['loc_1C28']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
shl ['ecx,', '1']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_1BB6']
mov ['eax,', '[ebp+var_20]']
sar ['eax,', '2']
mov ['[ebp+var_44],', 'ax']
mov ['[ebp+var_2C],', '6C0h']
mov ['[ebp+var_38],', '6E0h']
jmp ['short', 'loc_1B9E']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_1BB6']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+Dst]']
mov ['dx,', '[ebp+var_44]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_1B95']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_50]']
mov ['[ecx+4],', 'edx']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_1BE0']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_20]']
jge ['short', 'loc_1BF6']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_1BD7']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_1C28']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '20h']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_1C12']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_1C28']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_1C09']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', 'offset', '_utrie_defaultGetFoldingOffset_56']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_utrie_enum_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '16Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_16C]']
mov ['ecx,', '5Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1C7E']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_1C7E']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1C83']
jmp ['loc_21E0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1C90']
mov ['[ebp+arg_4],', 'offset', '?enumSameValue@@YAIPBXI@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
call ['[ebp+arg_4]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1CD2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_98],', 'ecx']
jmp ['short', 'loc_1CDC']
mov ['[ebp+var_98],', '0']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_8C],', 'eax']
mov ['[ebp+var_50],', '0']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_68],', '0']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_1D0E']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_44],', '0FFFFh']
jg ['loc_1EAD']
cmp ['[ebp+var_44],', '0D800h']
jnz ['short', 'loc_1D2D']
mov ['[ebp+var_68],', '800h']
jmp ['short', 'loc_1D3F']
cmp ['[ebp+var_44],', '0DC00h']
jnz ['short', 'loc_1D3F']
mov ['eax,', '[ebp+var_44]']
sar ['eax,', '5']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
shl ['edx,', '2']
mov ['[ebp+var_80],', 'edx']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_8C]']
jnz ['short', 'loc_1D68']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '20h']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_1EA8']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_98]']
jnz ['short', 'loc_1DD4']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jz ['short', 'loc_1DC6']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_1DAE']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['[ebp+arg_8]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1DAE']
jmp ['loc_21E0']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '20h']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_1EA8']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_8C],', 'eax']
mov ['[ebp+var_74],', '0']
jmp ['short', 'loc_1DEF']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '1']
mov ['[ebp+var_74],', 'eax']
cmp ['[ebp+var_74],', '20h']
jge ['loc_1EA8']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1E13']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_16C],', 'edx']
jmp ['short', 'loc_1E26']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_16C],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_16C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['[ebp+arg_4]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jz ['short', 'loc_1E9A']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_1E7E']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['[ebp+arg_8]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1E7E']
jmp ['loc_21E0']
cmp ['[ebp+var_74],', '0']
jle ['short', 'loc_1E8E']
mov ['[ebp+var_8C],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_1DE6']
jmp ['loc_1D05']
mov ['[ebp+var_5C],', '0D800h']
cmp ['[ebp+var_5C],', '0DC00h']
jge ['loc_21C1']
mov ['eax,', '[ebp+var_5C]']
sar ['eax,', '5']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
shl ['edx,', '2']
mov ['[ebp+var_A4],', 'edx']
mov ['eax,', '[ebp+var_A4]']
cmp ['eax,', '[ebp+var_98]']
jnz ['short', 'loc_1F51']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jz ['short', 'loc_1F38']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_1F20']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['[ebp+arg_8]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1F20']
jmp ['loc_21E0']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '20h']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '8000h']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_1EB4']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1F71']
mov ['eax,', '[ebp+var_5C]']
and ['eax,', '1Fh']
add ['eax,', '[ebp+var_A4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_16C],', 'edx']
jmp ['short', 'loc_1F8A']
mov ['eax,', '[ebp+var_5C]']
and ['eax,', '1Fh']
add ['eax,', '[ebp+var_A4]']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_16C],', 'edx']
mov ['eax,', '[ebp+var_16C]']
mov ['[ebp+var_20],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_A4],', 'eax']
cmp ['[ebp+var_A4],', '0']
jg ['short', 'loc_201D']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jz ['short', 'loc_200D']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_1FF5']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['[ebp+arg_8]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1FF5']
jmp ['loc_21E0']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '400h']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_21B3']
mov ['eax,', '[ebp+var_A4]']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_A4]']
add ['eax,', '20h']
mov ['[ebp+var_A4],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
shl ['edx,', '2']
mov ['[ebp+var_80],', 'edx']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_8C]']
jnz ['short', 'loc_205E']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '20h']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_219B']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_98]']
jnz ['short', 'loc_20CA']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_38]']
jz ['short', 'loc_20BC']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_20A4']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['[ebp+arg_8]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_20A4']
jmp ['loc_21E0']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '20h']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_219B']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_8C],', 'eax']
mov ['[ebp+var_74],', '0']
jmp ['short', 'loc_20E5']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '1']
mov ['[ebp+var_74],', 'eax']
cmp ['[ebp+var_74],', '20h']
jge ['loc_219B']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2109']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_16C],', 'edx']
jmp ['short', 'loc_211C']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_16C],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_16C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['[ebp+arg_4]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jz ['short', 'loc_218D']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_2171']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['[ebp+arg_8]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_2171']
jmp ['short', 'loc_21E0']
cmp ['[ebp+var_74],', '0']
jle ['short', 'loc_2181']
mov ['[ebp+var_8C],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_20DC']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
mov ['ecx,', '[ebp+var_68]']
cmp ['ecx,', '[ebp+var_A4]']
jl ['loc_2035']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
jmp ['loc_1EB4']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['[ebp+arg_8]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '16Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
?enumSameValue@@YAIPBXI@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_uprv_free_56:near']
extrn ['_memset:near']
extrn ['_uprv_malloc_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['__imp__memmove:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
end
