endp
??2@YAPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strFindFirst_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '130h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_130]']
mov ['ecx,', '4Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_BE']
cmp ['[ebp+arg_C],', '0FFFFFFFFh']
jge ['short', 'loc_C6']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_491']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_D2']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jge ['short', 'loc_D9']
xor ['eax,', 'eax']
jmp ['loc_491']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_4],', '0']
jge ['loc_247']
cmp ['[ebp+arg_C],', '0']
jge ['loc_247']
mov ['eax,', '[ebp+Str]']
mov ['cx,', '[eax]']
mov ['[ebp+var_44],', 'cx']
movzx ['edx,', '[ebp+var_44]']
mov ['eax,', '[ebp+Str]']
add ['eax,', '2']
mov ['[ebp+Str],', 'eax']
test ['edx,', 'edx']
jnz ['short', 'loc_11A']
mov ['[ebp+var_130],', '1']
jmp ['short', 'loc_124']
mov ['[ebp+var_130],', '0']
cmp ['[ebp+var_130],', '0']
jz ['short', 'loc_135']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_491']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_165']
movzx ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_165']
movzx ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strchr_56']
add ['esp,', '8']
jmp ['loc_491']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
movzx ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
test ['edx,', 'edx']
jz ['short', 'loc_18C']
mov ['[ebp+var_130],', '1']
jmp ['short', 'loc_196']
mov ['[ebp+var_130],', '0']
cmp ['[ebp+var_130],', '0']
jz ['loc_240']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['eax,', 'ecx']
jnz ['loc_23B']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', '[eax]']
mov ['[ebp+var_50],', 'cx']
movzx ['edx,', '[ebp+var_50]']
test ['edx,', 'edx']
jnz ['short', 'loc_200']
push ['0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['?isMatchAtCPBoundary@@YACPB_W000@Z']
add ['esp,', '10h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1FE']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '2']
jmp ['loc_491']
jmp ['short', 'loc_200']
jmp ['short', 'loc_23B']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
movzx ['edx,', '[ebp+var_38]']
test ['edx,', 'edx']
jnz ['short', 'loc_219']
xor ['eax,', 'eax']
jmp ['loc_491']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_50]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_227']
jmp ['short', 'loc_23B']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '2']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_1BF']
jmp ['loc_165']
xor ['eax,', 'eax']
jmp ['loc_491']
cmp ['[ebp+arg_C],', '0']
jge ['short', 'loc_25C']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_C],', 'eax']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_26A']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_491']
mov ['eax,', '[ebp+Str]']
mov ['cx,', '[eax]']
mov ['[ebp+var_44],', 'cx']
mov ['edx,', '[ebp+Str]']
add ['edx,', '2']
mov ['[ebp+Str],', 'edx']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '1']
mov ['[ebp+arg_C],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+Str]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'edx']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_2ED']
movzx ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_2ED']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_2C7']
movzx ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strchr_56']
add ['esp,', '8']
mov ['[ebp+var_130],', 'eax']
jmp ['short', 'loc_2E2']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
movzx ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_memchr_56']
add ['esp,', '0Ch']
mov ['[ebp+var_130],', 'eax']
mov ['eax,', '[ebp+var_130]']
jmp ['loc_491']
cmp ['[ebp+arg_4],', '0']
jge ['loc_3CF']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
movzx ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
test ['edx,', 'edx']
jz ['short', 'loc_31E']
mov ['[ebp+var_130],', '1']
jmp ['short', 'loc_328']
mov ['[ebp+var_130],', '0']
cmp ['[ebp+var_130],', '0']
jz ['loc_3CA']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['eax,', 'ecx']
jnz ['loc_3C5']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jnz ['short', 'loc_388']
push ['0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['?isMatchAtCPBoundary@@YACPB_W000@Z']
add ['esp,', '10h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_386']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '2']
jmp ['loc_491']
jmp ['short', 'loc_388']
jmp ['short', 'loc_3C5']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
movzx ['edx,', '[ebp+var_38]']
test ['edx,', 'edx']
jnz ['short', 'loc_3A1']
xor ['eax,', 'eax']
jmp ['loc_491']
movzx ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jz ['short', 'loc_3B1']
jmp ['short', 'loc_3C5']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '2']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_351']
jmp ['loc_2F7']
jmp ['loc_48F']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_C]']
jg ['short', 'loc_3DE']
xor ['eax,', 'eax']
jmp ['loc_491']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+arg_C]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_5C]']
sub ['ecx,', 'eax']
mov ['[ebp+var_68],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_68]']
jz ['loc_48F']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_48A']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jnz ['short', 'loc_464']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?isMatchAtCPBoundary@@YACPB_W000@Z']
add ['esp,', '10h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_462']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '2']
jmp ['short', 'loc_491']
jmp ['short', 'loc_464']
jmp ['short', 'loc_48A']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'word', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jz ['short', 'loc_476']
jmp ['short', 'loc_48A']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '2']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_42E']
jmp ['loc_3F7']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '130h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?isMatchAtCPBoundary@@YACPB_W000@Z proc	near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jnz ['short', 'loc_4FB']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_4FB']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax-2]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0D800h']
jnz ['short', 'loc_4FB']
xor ['al,', 'al']
jmp ['short', 'loc_532']
mov ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'word', 'ptr', '[eax-2]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0D800h']
jnz ['short', 'loc_530']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_530']
mov ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jnz ['short', 'loc_530']
xor ['al,', 'al']
jmp ['short', 'loc_532']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strstr_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0FFFFFFFFh']
mov ['eax,', '[ebp+Str]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strFindFirst_56']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strchr_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+Str]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_5CA']
push ['1']
lea ['eax,', '[ebp+Str]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strFindFirst_56']
add ['esp,', '10h']
jmp ['short', 'loc_5FC']
jmp ['short', 'loc_5FC']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
movzx ['edx,', '[ebp+var_8]']
movzx ['eax,', '[ebp+Str]']
cmp ['edx,', 'eax']
jnz ['short', 'loc_5E5']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_5FC']
movzx ['eax,', '[ebp+var_8]']
test ['eax,', 'eax']
jnz ['short', 'loc_5F1']
xor ['eax,', 'eax']
jmp ['short', 'loc_5FC']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_5CA']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strchr32_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_652']
movzx ['eax,', 'word', 'ptr', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strchr_56']
add ['esp,', '8']
jmp ['loc_6E5']
jmp ['loc_6E5']
cmp ['[ebp+arg_4],', '10FFFFh']
ja ['loc_6E3']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['[ebp+var_14],', 'ax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['[ebp+var_20],', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
movzx ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
test ['edx,', 'edx']
jz ['short', 'loc_6A6']
mov ['[ebp+var_E8],', '1']
jmp ['short', 'loc_6B0']
mov ['[ebp+var_E8],', '0']
cmp ['[ebp+var_E8],', '0']
jz ['short', 'loc_6DD']
movzx ['eax,', '[ebp+var_8]']
movzx ['ecx,', '[ebp+var_14]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_6DB']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_20]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_6DB']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '2']
jmp ['short', 'loc_6E5']
jmp ['short', 'loc_67F']
xor ['eax,', 'eax']
jmp ['short', 'loc_6E5']
jmp ['short', 'loc_6E5']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memchr_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jg ['short', 'loc_726']
xor ['eax,', 'eax']
jmp ['short', 'loc_782']
jmp ['short', 'loc_782']
movzx ['eax,', '[ebp+Str]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_750']
push ['1']
lea ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_strFindFirst_56']
add ['esp,', '10h']
jmp ['short', 'loc_782']
jmp ['short', 'loc_782']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
movzx ['edx,', '[ebp+Str]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_76F']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_782']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+var_8]']
jnz ['short', 'loc_75C']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memchr32_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_7D8']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_memchr_56']
add ['esp,', '0Ch']
jmp ['short', 'loc_855']
jmp ['short', 'loc_855']
cmp ['[ebp+arg_8],', '2']
jge ['short', 'loc_7E4']
xor ['eax,', 'eax']
jmp ['short', 'loc_855']
jmp ['short', 'loc_855']
cmp ['[ebp+arg_4],', '10FFFFh']
ja ['short', 'loc_853']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2-2]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['[ebp+var_14],', 'ax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['[ebp+var_20],', 'ax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_14]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_83C']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
movzx ['edx,', '[ebp+var_20]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_83C']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_855']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+var_8]']
jnz ['short', 'loc_81A']
xor ['eax,', 'eax']
jmp ['short', 'loc_855']
jmp ['short', 'loc_855']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strFindLast_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '118h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_118]']
mov ['ecx,', '46h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_896']
cmp ['[ebp+arg_C],', '0FFFFFFFFh']
jge ['short', 'loc_89E']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_A32']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_8AA']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jge ['short', 'loc_8B1']
xor ['eax,', 'eax']
jmp ['loc_A32']
cmp ['[ebp+arg_C],', '0']
jge ['short', 'loc_8C6']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_C],', 'eax']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_8D4']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_A32']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+Str]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '2']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_38]']
mov ['dx,', '[ecx]']
mov ['[ebp+var_50],', 'dx']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '1']
mov ['[ebp+arg_C],', 'eax']
jnz ['short', 'loc_953']
movzx ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_953']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_92D']
movzx ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strrchr_56']
add ['esp,', '8']
mov ['[ebp+var_118],', 'eax']
jmp ['short', 'loc_948']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
movzx ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_memrchr_56']
add ['esp,', '0Ch']
mov ['[ebp+var_118],', 'eax']
mov ['eax,', '[ebp+var_118]']
jmp ['loc_A32']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_968']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_C]']
jg ['short', 'loc_977']
xor ['eax,', 'eax']
jmp ['loc_A32']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_14]']
jz ['loc_A30']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '2']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['dx,', '[ecx]']
mov ['[ebp+var_44],', 'dx']
movzx ['eax,', '[ebp+var_44]']
movzx ['ecx,', '[ebp+var_50]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_A2B']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+Str]']
jnz ['short', 'loc_A05']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*2]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['?isMatchAtCPBoundary@@YACPB_W000@Z']
add ['esp,', '10h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_A03']
mov ['eax,', '[ebp+var_20]']
jmp ['short', 'loc_A32']
jmp ['short', 'loc_A05']
jmp ['short', 'loc_A2B']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '2']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'word', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['edx,', 'eax']
jz ['short', 'loc_A29']
jmp ['short', 'loc_A2B']
jmp ['short', 'loc_9CC']
jmp ['loc_995']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '118h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strrstr_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0FFFFFFFFh']
mov ['eax,', '[ebp+Str]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strFindLast_56']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strrchr_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+Str]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_AD6']
push ['1']
lea ['eax,', '[ebp+Str]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strFindLast_56']
add ['esp,', '10h']
jmp ['short', 'loc_B11']
jmp ['short', 'loc_B11']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_14],', 'cx']
movzx ['edx,', '[ebp+var_14]']
movzx ['eax,', '[ebp+Str]']
cmp ['edx,', 'eax']
jnz ['short', 'loc_AF9']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
movzx ['eax,', '[ebp+var_14]']
test ['eax,', 'eax']
jnz ['short', 'loc_B06']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_B11']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_ADD']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strrchr32_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_B6A']
movzx ['eax,', 'word', 'ptr', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_strrchr_56']
add ['esp,', '8']
jmp ['loc_C06']
jmp ['loc_C06']
cmp ['[ebp+arg_4],', '10FFFFh']
ja ['loc_C04']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['[ebp+var_20],', 'ax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['[ebp+var_2C],', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_14],', 'cx']
movzx ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
test ['edx,', 'edx']
jz ['short', 'loc_BC5']
mov ['[ebp+var_F4],', '1']
jmp ['short', 'loc_BCF']
mov ['[ebp+var_F4],', '0']
cmp ['[ebp+var_F4],', '0']
jz ['short', 'loc_BFD']
movzx ['eax,', '[ebp+var_14]']
movzx ['ecx,', '[ebp+var_20]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_BFB']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_2C]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_BFB']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_B9E']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_C06']
jmp ['short', 'loc_C06']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memrchr_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jg ['short', 'loc_C46']
xor ['eax,', 'eax']
jmp ['short', 'loc_CA2']
jmp ['short', 'loc_CA2']
movzx ['eax,', '[ebp+Str]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_C70']
push ['1']
lea ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_strFindLast_56']
add ['esp,', '10h']
jmp ['short', 'loc_CA2']
jmp ['short', 'loc_CA2']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
movzx ['eax,', '[ebp+Str]']
cmp ['edx,', 'eax']
jnz ['short', 'loc_C98']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_CA2']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_C7C']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memrchr32_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0FFFFh']
ja ['short', 'loc_CFE']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_memrchr_56']
add ['esp,', '0Ch']
jmp ['loc_D7E']
jmp ['loc_D7E']
cmp ['[ebp+arg_8],', '2']
jge ['short', 'loc_D0A']
xor ['eax,', 'eax']
jmp ['short', 'loc_D7E']
jmp ['short', 'loc_D7E']
cmp ['[ebp+arg_4],', '10FFFFh']
ja ['short', 'loc_D7C']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2-2]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['[ebp+var_14],', 'ax']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['[ebp+var_20],', 'ax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
movzx ['edx,', '[ebp+var_20]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_D65']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax-2]']
movzx ['edx,', '[ebp+var_14]']
cmp ['ecx,', 'edx']
jnz ['short', 'loc_D65']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '2']
jmp ['short', 'loc_D7E']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+var_8]']
jnz ['short', 'loc_D40']
xor ['eax,', 'eax']
jmp ['short', 'loc_D7E']
jmp ['short', 'loc_D7E']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strpbrk_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_matchFromSet@@YAHPB_W0C@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_DDA']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+eax*2]']
jmp ['short', 'loc_DDC']
jmp ['short', 'loc_DDC']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_matchFromSet@@YAHPB_W0C@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '138h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_138]']
mov ['ecx,', '4Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_50],', 'dx']
movzx ['eax,', '[ebp+var_50]']
test ['eax,', 'eax']
jz ['short', 'loc_E46']
movzx ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_E46']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_E15']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
test ['edx,', 'edx']
jz ['short', 'loc_E65']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_E4C']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_50],', 'dx']
movzx ['eax,', '[ebp+var_50]']
test ['eax,', 'eax']
jz ['loc_10CE']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
movzx ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['loc_F2E']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_EE6']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_EBD']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_8]']
jge ['short', 'loc_EE4']
movzx ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[edx+ecx*2]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_EE2']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
jmp ['loc_10D6']
jmp ['short', 'loc_EB4']
jmp ['short', 'loc_F29']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_EF8']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_8]']
jge ['short', 'loc_F1E']
movzx ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[edx+ecx*2]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_F1C']
jmp ['$endloop$12370']
jmp ['$endloop$12370']
jmp ['short', 'loc_EEF']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
jmp ['loc_10D6']
jmp ['$endloop$12370']
movzx ['eax,', '[ebp+var_50]']
and ['eax,', '400h']
jnz ['short', 'loc_F77']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_5C],', 'dx']
movzx ['eax,', '[ebp+var_5C]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_F77']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
movzx ['eax,', '[ebp+var_50]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_5C]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_38],', 'edx']
jmp ['short', 'loc_F7E']
movzx ['eax,', '[ebp+var_50]']
mov ['[ebp+var_38],', 'eax']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['loc_102F']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_8]']
jge ['loc_102A']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_1004']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_8]']
jz ['short', 'loc_1004']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_68],', 'dx']
movzx ['eax,', '[ebp+var_68]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_1004']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_68]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jnz ['short', 'loc_1025']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_38]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', 'ecx']
jmp ['loc_10D6']
jmp ['loc_F90']
jmp ['$endloop$12370']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_8]']
jge ['short', 'loc_10B3']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_10A5']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_8]']
jz ['short', 'loc_10A5']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_74],', 'dx']
movzx ['eax,', '[ebp+var_74]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_10A5']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_74]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jnz ['short', 'loc_10B1']
jmp ['short', '$endloop$12370']
jmp ['short', '$endloop$12370']
jmp ['short', 'loc_1035']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_38]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', 'ecx']
jmp ['short', 'loc_10D6']
jmp ['loc_E6C']
mov ['eax,', '[ebp+var_20]']
neg ['eax']
sub ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strcspn_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_matchFromSet@@YAHPB_W0C@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_1120']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_1128']
jmp ['short', 'loc_1128']
mov ['eax,', '[ebp+var_8]']
neg ['eax']
sub ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strspn_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_matchFromSet@@YAHPB_W0C@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_117C']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_1184']
jmp ['short', 'loc_1184']
mov ['eax,', '[ebp+var_8]']
neg ['eax']
sub ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strtok_r_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_11CC']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_11E5']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_11DE']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_11E5']
xor ['eax,', 'eax']
jmp ['loc_126A']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_u_strspn_56']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_125F']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_u_strpbrk_56']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_1247']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_126A']
jmp ['short', 'loc_125D']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_125D']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_126A']
jmp ['short', 'loc_1268']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strcat_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_12B9']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_12A4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
test ['ecx,', 'ecx']
jz ['short', 'loc_12ED']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_12F7']
mov ['[ebp+var_D0],', '0']
cmp ['[ebp+var_D0],', '0']
jz ['short', 'loc_1302']
jmp ['short', 'loc_12B9']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strncat_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1391']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_134B']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_1336']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_138A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jnz ['short', 'loc_137F']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'ax']
jmp ['short', 'loc_138A']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_134B']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_1394']
jmp ['short', 'loc_1394']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strcmp_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax]']
mov ['[ebp+var_14],', 'cx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
mov ['[ebp+arg_4],', 'edx']
movzx ['eax,', '[ebp+var_8]']
movzx ['ecx,', '[ebp+var_14]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_13F4']
movzx ['eax,', '[ebp+var_8]']
test ['eax,', 'eax']
jnz ['short', 'loc_13F6']
jmp ['short', 'loc_13F8']
jmp ['short', 'loc_13BA']
movzx ['eax,', '[ebp+var_8]']
movzx ['ecx,', '[ebp+var_14]']
sub ['eax,', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uprv_strCompare_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_14A8']
cmp ['[ebp+arg_C],', '0']
jge ['short', 'loc_14A8']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_1451']
xor ['eax,', 'eax']
jmp ['loc_171B']
mov ['eax,', '[ebp+Str]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
mov ['eax,', '[ebp+arg_8]']
mov ['cx,', '[eax]']
mov ['[ebp+var_44],', 'cx']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_1473']
jmp ['short', 'loc_1496']
movzx ['eax,', '[ebp+var_38]']
test ['eax,', 'eax']
jnz ['short', 'loc_1482']
xor ['eax,', 'eax']
jmp ['loc_171B']
mov ['eax,', '[ebp+Str]']
add ['eax,', '2']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '2']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_1451']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_1619']
movsx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['loc_1534']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_14C3']
xor ['eax,', 'eax']
jmp ['loc_171B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+var_20]']
jnz ['short', 'loc_14DE']
xor ['eax,', 'eax']
jmp ['loc_171B']
mov ['eax,', '[ebp+Str]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
mov ['eax,', '[ebp+arg_8]']
mov ['cx,', '[eax]']
mov ['[ebp+var_44],', 'cx']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_1500']
jmp ['short', 'loc_1523']
movzx ['eax,', '[ebp+var_38]']
test ['eax,', 'eax']
jnz ['short', 'loc_150F']
xor ['eax,', 'eax']
jmp ['loc_171B']
mov ['eax,', '[ebp+Str]']
add ['eax,', '2']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '2']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_14CF']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'edx']
jmp ['loc_1619']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_1549']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+arg_C],', '0']
jge ['short', 'loc_155E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_C],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_157B']
mov ['[ebp+var_50],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_15AB']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_C]']
jnz ['short', 'loc_1598']
mov ['[ebp+var_50],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_15AB']
mov ['[ebp+var_50],', '1']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_15BB']
mov ['eax,', '[ebp+var_50]']
jmp ['loc_171B']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+var_20]']
jnz ['short', 'loc_15CB']
mov ['eax,', '[ebp+var_50]']
jmp ['loc_171B']
mov ['eax,', '[ebp+Str]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
mov ['eax,', '[ebp+arg_8]']
mov ['cx,', '[eax]']
mov ['[ebp+var_44],', 'cx']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_44]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_15ED']
jmp ['short', 'loc_1601']
mov ['eax,', '[ebp+Str]']
add ['eax,', '2']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '2']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_15BB']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'edx']
movzx ['eax,', '[ebp+var_38]']
cmp ['eax,', '0D800h']
jl ['loc_1711']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '0D800h']
jl ['loc_1711']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['loc_1711']
movzx ['eax,', '[ebp+var_38]']
cmp ['eax,', '0DBFFh']
jg ['short', 'loc_166E']
mov ['eax,', '[ebp+Str]']
add ['eax,', '2']
cmp ['eax,', '[ebp+var_20]']
jz ['short', 'loc_166E']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jz ['short', 'loc_169B']
movzx ['eax,', '[ebp+var_38]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_169D']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+Str]']
jz ['short', 'loc_169D']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax-2]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0D800h']
jnz ['short', 'loc_169D']
jmp ['short', 'loc_16AA']
movzx ['eax,', '[ebp+var_38]']
sub ['eax,', '2800h']
mov ['[ebp+var_38],', 'ax']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '0DBFFh']
jg ['short', 'loc_16D5']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '2']
cmp ['eax,', '[ebp+var_2C]']
jz ['short', 'loc_16D5']
mov ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jz ['short', 'loc_1702']
movzx ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_1704']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_8]']
jz ['short', 'loc_1704']
mov ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'word', 'ptr', '[eax-2]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0D800h']
jnz ['short', 'loc_1704']
jmp ['short', 'loc_1711']
movzx ['eax,', '[ebp+var_44]']
sub ['eax,', '2800h']
mov ['[ebp+var_44],', 'ax']
movzx ['eax,', '[ebp+var_38]']
movzx ['ecx,', '[ebp+var_44]']
sub ['eax,', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strCompareIter_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_175A']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1761']
xor ['eax,', 'eax']
jmp ['loc_192D']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_1770']
xor ['eax,', 'eax']
jmp ['loc_192D']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+1Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2Ch]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+2Ch]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_17E8']
jmp ['short', 'loc_17F7']
cmp ['[ebp+var_8],', '0FFFFFFFFh']
jnz ['short', 'loc_17F5']
xor ['eax,', 'eax']
jmp ['loc_192D']
jmp ['short', 'loc_17A8']
cmp ['[ebp+var_8],', '0D800h']
jl ['loc_1927']
cmp ['[ebp+var_14],', '0D800h']
jl ['loc_1927']
movsx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['loc_1927']
cmp ['[ebp+var_8],', '0DBFFh']
jg ['short', 'loc_184A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jz ['short', 'loc_1895']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_1897']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_1897']
jmp ['short', 'loc_18A2']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '2800h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_14],', '0DBFFh']
jg ['short', 'loc_18CF']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+28h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jz ['short', 'loc_191A']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_191C']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+30h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+30h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_191C']
jmp ['short', 'loc_1927']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '2800h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strCompare_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_197A']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jl ['short', 'loc_197A']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_197A']
cmp ['[ebp+arg_C],', '0FFFFFFFFh']
jge ['short', 'loc_197E']
xor ['eax,', 'eax']
jmp ['short', 'loc_199D']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_uprv_strCompare_56']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strcmpCodePointOrder_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
push ['0']
push ['0FFFFFFFFh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_uprv_strCompare_56']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strncmp_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1A67']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx]']
sub ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
jnz ['short', 'loc_1A4C']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1A4C']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jnz ['short', 'loc_1A51']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_1A69']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_1A24']
jmp ['short', 'loc_1A69']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strncmpCodePointOrder_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
push ['1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_uprv_strCompare_56']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strcpy_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
test ['ecx,', 'ecx']
jz ['short', 'loc_1B18']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_1B22']
mov ['[ebp+var_D0],', '0']
cmp ['[ebp+var_D0],', '0']
jz ['short', 'loc_1B2D']
jmp ['short', 'loc_1AE4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strncpy_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1BB4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
test ['ecx,', 'ecx']
jz ['short', 'loc_1B96']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_1BA0']
mov ['[ebp+var_D0],', '0']
cmp ['[ebp+var_D0],', '0']
jz ['short', 'loc_1BB4']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_1B5C']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strlen_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__wcslen']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_countChar32_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1C32']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jge ['short', 'loc_1C39']
xor ['eax,', 'eax']
jmp ['loc_1D25']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_1CAE']
cmp ['[ebp+arg_4],', '0']
jle ['short', 'loc_1CAC']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0D800h']
jnz ['short', 'loc_1C98']
cmp ['[ebp+arg_4],', '2']
jl ['short', 'loc_1C98']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jnz ['short', 'loc_1C98']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_1CAA']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_1C46']
jmp ['short', 'loc_1D22']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_14],', 'cx']
movzx ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
test ['edx,', 'edx']
jnz ['short', 'loc_1CD5']
mov ['[ebp+var_DC],', '1']
jmp ['short', 'loc_1CDF']
mov ['[ebp+var_DC],', '0']
cmp ['[ebp+var_DC],', '0']
jz ['short', 'loc_1CEA']
jmp ['short', 'loc_1D22']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
movzx ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_1D20']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jnz ['short', 'loc_1D20']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_1CAE']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_strHasMoreChar32Than_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E8]']
mov ['ecx,', '3Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_1D57']
mov ['al,', '1']
jmp ['loc_1ED9']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1D63']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jge ['short', 'loc_1D6A']
xor ['al,', 'al']
jmp ['loc_1ED9']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['loc_1E02']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_8],', 'cx']
movzx ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
test ['edx,', 'edx']
jnz ['short', 'loc_1D9B']
mov ['[ebp+var_E8],', '1']
jmp ['short', 'loc_1DA5']
mov ['[ebp+var_E8],', '0']
cmp ['[ebp+var_E8],', '0']
jz ['short', 'loc_1DB5']
xor ['al,', 'al']
jmp ['loc_1ED9']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1DC2']
mov ['al,', '1']
jmp ['loc_1ED9']
movzx ['eax,', '[ebp+var_8]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_1DEF']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jnz ['short', 'loc_1DEF']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['loc_1D74']
jmp ['loc_1ED9']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jle ['short', 'loc_1E19']
mov ['al,', '1']
jmp ['loc_1ED9']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jg ['short', 'loc_1E2F']
xor ['al,', 'al']
jmp ['loc_1ED9']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_14]']
jnz ['short', 'loc_1E4A']
xor ['al,', 'al']
jmp ['loc_1ED9']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1E57']
mov ['al,', '1']
jmp ['loc_1ED9']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0FFFFFC00h']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
cmp ['ecx,', '0D800h']
jnz ['short', 'loc_1E80']
mov ['[ebp+var_E8],', '1']
jmp ['short', 'loc_1E8A']
mov ['[ebp+var_E8],', '0']
cmp ['[ebp+var_E8],', '0']
jz ['short', 'loc_1ECB']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_1ECB']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0FFFFFC00h']
cmp ['ecx,', '0DC00h']
jnz ['short', 'loc_1ECB']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jg ['short', 'loc_1ECB']
xor ['al,', 'al']
jmp ['short', 'loc_1ED9']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['loc_1E3B']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memcpy_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1F28']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memmove_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1F92']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
shl ['ecx,', '1']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memset_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_1FFF']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jnb ['short', 'loc_1FFF']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[ebp+arg_4]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_1FE2']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memcmp_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_2070']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_2070']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx]']
sub ['ecx,', 'eax']
mov ['[ebp+var_14],', 'ecx']
jz ['short', 'loc_205C']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_2072']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_203C']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_memcmpCodePointOrder_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
push ['0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_uprv_strCompare_56']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_unescapeAt_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '160h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_160]']
mov ['ecx,', '58h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_29],', '0']
mov ['[ebp+var_35],', '0']
mov ['[ebp+var_41],', '0']
mov ['[ebp+var_4D],', '4']
mov ['[ebp+var_71],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jl ['short', 'loc_211F']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jl ['short', 'loc_2129']
jmp ['$err$12740']
jmp ['$err$12740']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_160],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_160]']
push ['eax']
call ['[ebp+arg_0]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'ax']
movzx ['eax,', '[ebp+var_14]']
mov ['[ebp+var_160],', 'eax']
cmp ['[ebp+var_160],', '55h']
jz ['short', 'loc_2195']
cmp ['[ebp+var_160],', '75h']
jz ['short', 'loc_2186']
cmp ['[ebp+var_160],', '78h']
jz ['short', 'loc_21A1']
jmp ['short', 'loc_21ED']
mov ['[ebp+var_41],', '4']
mov ['al,', '[ebp+var_41]']
mov ['[ebp+var_35],', 'al']
jmp ['loc_221C']
mov ['[ebp+var_41],', '8']
mov ['al,', '[ebp+var_41]']
mov ['[ebp+var_35],', 'al']
jmp ['short', 'loc_221C']
mov ['[ebp+var_35],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['short', 'loc_21E7']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['[ebp+arg_0]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'ax']
cmp ['eax,', '7Bh']
jnz ['short', 'loc_21E7']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
mov ['[ebp+var_71],', '1']
mov ['[ebp+var_41],', '8']
jmp ['short', 'loc_21EB']
mov ['[ebp+var_41],', '2']
jmp ['short', 'loc_221C']
movzx ['eax,', '[ebp+var_14]']
push ['eax']
call ['?_digit8@@YAC_W@Z']
add ['esp,', '4']
mov ['[ebp+var_59],', 'al']
movsx ['eax,', '[ebp+var_59]']
test ['eax,', 'eax']
jl ['short', 'loc_221C']
mov ['[ebp+var_35],', '1']
mov ['[ebp+var_41],', '3']
mov ['[ebp+var_29],', '1']
mov ['[ebp+var_4D],', '3']
movsx ['eax,', '[ebp+var_59]']
mov ['[ebp+var_20],', 'eax']
movsx ['eax,', '[ebp+var_35]']
test ['eax,', 'eax']
jz ['loc_23D4']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['loc_22D3']
movsx ['eax,', '[ebp+var_29]']
movsx ['ecx,', '[ebp+var_41]']
cmp ['eax,', 'ecx']
jge ['loc_22D3']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['[ebp+arg_0]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'ax']
movsx ['eax,', '[ebp+var_4D]']
cmp ['eax,', '3']
jnz ['short', 'loc_2281']
movzx ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['?_digit8@@YAC_W@Z']
add ['esp,', '4']
mov ['byte', 'ptr', '[ebp+var_160+3],', 'al']
jmp ['short', 'loc_2294']
movzx ['edx,', '[ebp+var_14]']
push ['edx']
call ['?_digit16@@YAC_W@Z']
add ['esp,', '4']
mov ['byte', 'ptr', '[ebp+var_160+3],', 'al']
mov ['al,', 'byte', 'ptr', '[ebp+var_160+3]']
mov ['[ebp+var_59],', 'al']
movsx ['eax,', '[ebp+var_59]']
test ['eax,', 'eax']
jge ['short', 'loc_22A7']
jmp ['short', 'loc_22D3']
movsx ['ecx,', '[ebp+var_4D]']
mov ['eax,', '[ebp+var_20]']
shl ['eax,', 'cl']
movsx ['ecx,', '[ebp+var_59]']
or ['eax,', 'ecx']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
mov ['al,', '[ebp+var_29]']
add ['al,', '1']
mov ['[ebp+var_29],', 'al']
jmp ['loc_2228']
movsx ['eax,', '[ebp+var_29]']
movsx ['ecx,', '[ebp+var_35]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_22E9']
jmp ['$err$12740']
jmp ['$err$12740']
movsx ['eax,', '[ebp+var_71]']
test ['eax,', 'eax']
jz ['short', 'loc_2311']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '7Dh']
jz ['short', 'loc_2304']
jmp ['$err$12740']
jmp ['$err$12740']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
cmp ['[ebp+var_20],', '0']
jl ['short', 'loc_2320']
cmp ['[ebp+var_20],', '110000h']
jl ['short', 'loc_232A']
jmp ['$err$12740']
jmp ['$err$12740']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['loc_23CC']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['loc_23CC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['[ebp+var_80],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['[ebp+arg_0]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'ax']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '5Ch']
jnz ['short', 'loc_23A0']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_23A0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_80]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_unescapeAt_56']
add ['esp,', '10h']
mov ['[ebp+var_14],', 'ax']
movzx ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_23CC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_80]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_20]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_14]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
jmp ['loc_257A']
mov ['[ebp+var_68],', '0']
jmp ['short', 'loc_23E6']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '2']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_68],', '10h']
jge ['short', 'loc_2428']
movzx ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_68]']
movzx ['edx,', '_UNESCAPE_MAP[ecx*2]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_2411']
mov ['eax,', '[ebp+var_68]']
movzx ['eax,', 'word_2[eax*2]']
jmp ['loc_257A']
jmp ['short', 'loc_2426']
movzx ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_68]']
movzx ['edx,', '_UNESCAPE_MAP[ecx*2]']
cmp ['eax,', 'edx']
jge ['short', 'loc_2426']
jmp ['short', 'loc_2428']
jmp ['short', 'loc_23DD']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '63h']
jnz ['loc_24F8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['loc_24F8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_160],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_160]']
push ['eax']
call ['[ebp+arg_0]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'ax']
movzx ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_24EC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['short', 'loc_24EC']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['[ebp+arg_0]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8C],', 'ax']
movzx ['eax,', '[ebp+var_8C]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_24EC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
movzx ['eax,', '[ebp+var_14]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_8C]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_14],', 'dx']
movzx ['eax,', '[ebp+var_14]']
and ['eax,', '1Fh']
jmp ['loc_257A']
movzx ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_2569']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['short', 'loc_2569']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['[ebp+arg_0]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_98],', 'ax']
movzx ['eax,', '[ebp+var_98]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_2569']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
movzx ['eax,', '[ebp+var_14]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_98]']
lea ['eax,', '[eax+ecx-35FDC00h]']
jmp ['short', 'loc_257A']
movzx ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_257A']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
or ['eax,', '0FFFFFFFFh']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN45']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '160h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN44']
dd ['offset', '$LN43']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_digit8@@YAC_W@Z proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '30h']
jl ['short', 'loc_25F5']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '37h']
jg ['short', 'loc_25F5']
movzx ['eax,', '[ebp+arg_0]']
sub ['eax,', '30h']
jmp ['short', 'loc_25F7']
or ['al,', '0FFh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_digit16@@YAC_W@Z proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '30h']
jl ['short', 'loc_2639']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '39h']
jg ['short', 'loc_2639']
movzx ['eax,', '[ebp+arg_0]']
sub ['eax,', '30h']
jmp ['short', 'loc_2671']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '41h']
jl ['short', 'loc_2654']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '46h']
jg ['short', 'loc_2654']
movzx ['eax,', '[ebp+arg_0]']
sub ['eax,', '37h']
jmp ['short', 'loc_2671']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '61h']
jl ['short', 'loc_266F']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '66h']
jg ['short', 'loc_266F']
movzx ['eax,', '[ebp+arg_0]']
sub ['eax,', '57h']
jmp ['short', 'loc_2671']
or ['al,', '0FFh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_unescape_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+Str]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
movsx ['edx,', '[ebp+var_1D]']
test ['edx,', 'edx']
jz ['loc_27FC']
movsx ['eax,', '[ebp+var_1D]']
cmp ['eax,', '5Ch']
jnz ['loc_27EE']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+var_8]']
jz ['short', 'loc_2709']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_26FD']
mov ['eax,', '[ebp+Str]']
sub ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
push ['edx']
call ['?_appendUChars@@YAXPA_WHPBDH@Z']
add ['esp,', '10h']
mov ['eax,', '[ebp+Str]']
sub ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_strlen']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
push ['offset', '?_charPtr_charAt@@YA_WHPAX@Z']
call ['_u_unescapeAt_56']
add ['esp,', '10h']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_2747']
jmp ['$err$12829']
jmp ['$err$12829']
mov ['eax,', '[ebp+Str]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+Str],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_27D1']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_38]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+var_14]']
cmp ['ecx,', 'edx']
jg ['short', 'loc_27D1']
cmp ['[ebp+var_38],', '0FFFFh']
ja ['short', 'loc_2791']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_38]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_27CF']
mov ['eax,', '[ebp+var_38]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_27E6']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_38]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_27F7']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['[ebp+Str],', 'eax']
jmp ['loc_26A3']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+var_8]']
jz ['short', 'loc_283A']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_282E']
mov ['eax,', '[ebp+Str]']
sub ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
push ['edx']
call ['?_appendUChars@@YAXPA_WHPBDH@Z']
add ['esp,', '10h']
mov ['eax,', '[ebp+Str]']
sub ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2854']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_2854']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_286F']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_286D']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_286D']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'ax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN20']
dd ['offset', '$LN19']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_charPtr_charAt@@YA_WHPAX@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['1']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_u_charsToUChars_56']
add ['esp,', '0Ch']
mov ['ax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4']
dd ['offset', '$LN3']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_appendUChars@@YAXPA_WHPBDH@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_2953']
mov ['[ebp+arg_4],', '0']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+arg_4]']
jle ['short', 'loc_2961']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_C],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_u_charsToUChars_56']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_terminateUChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2A10']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2A10']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_29CD']
jmp ['short', 'loc_2A10']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_29F4']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jnz ['short', 'loc_29F2']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_2A10']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_2A07']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_2A10']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_terminateChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2AD5']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2AD5']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_2A95']
jmp ['short', 'loc_2AD5']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_2AB9']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jnz ['short', 'loc_2AB7']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_2AD5']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_2ACC']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_2AD5']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_terminateUChar32s_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2B71']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2B71']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_2B2D']
jmp ['short', 'loc_2B71']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_2B55']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*4],', '0']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jnz ['short', 'loc_2B53']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_2B71']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_2B68']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_2B71']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_terminateWChars_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2C0C']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2C0C']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_2BC9']
jmp ['short', 'loc_2C0C']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_2BF0']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jnz ['short', 'loc_2BEE']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_2C0C']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_2C03']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_2C0C']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ustr_hashUCharsN_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_2CA3']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '20h']
cdq
and ['edx,', '1Fh']
add ['eax,', 'edx']
sar ['eax,', '5']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_2CA3']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '25h']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
add ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_2C7C']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ustr_hashCharsN_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_2D29']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '20h']
cdq
and ['edx,', '1Fh']
add ['eax,', 'edx']
sar ['eax,', '5']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_20]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_2D29']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '25h']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
add ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_2D05']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_ustr_hashICharsN_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0FCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_2DB9']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '20h']
cdq
and ['edx,', '1Fh']
add ['eax,', 'edx']
sar ['eax,', '5']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_20]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_2DB9']
mov ['esi,', '[ebp+var_8]']
imul ['esi,', '25h']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
push ['ecx']
call ['_uprv_asciitolower_56']
add ['esp,', '4']
movzx ['edx,', 'al']
add ['esi,', 'edx']
mov ['[ebp+var_8],', 'esi']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_2D89']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__imp__wcslen:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['__imp__memmove:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_strlen:near']
extrn ['_u_charsToUChars_56:near']
extrn ['_uprv_asciitolower_56:near']
end
