endp
_T_UConverter_toUnicode_UTF32_BE proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jz ['short', 'loc_56B']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_56B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+2Ch]']
sub ['edx,', '1']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
jmp ['short', '$morebytes$8560']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['$donefornow$8573']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['$donefornow$8573']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_44],', '0']
cmp ['[ebp+var_50],', '4']
jnb ['short', 'loc_5F3']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_5D1']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '8']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
or ['eax,', 'edx']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_5F1']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+2Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[ecx+24h],', 'dl']
jmp ['$donefornow$8573']
jmp ['short', '$morebytes$8560']
cmp ['[ebp+var_44],', '10FFFFh']
ja ['loc_6A0']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['loc_6A0']
cmp ['[ebp+var_44],', '0FFFFh']
ja ['short', 'loc_631']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_44]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_69E']
mov ['eax,', '[ebp+var_44]']
shr ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
movzx ['ecx,', 'ax']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_67B']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_44]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_69E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_44]']
mov ['[ecx+74h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+41h],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', '$donefornow$8573']
jmp ['short', 'loc_6B7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[ecx+24h],', 'dl']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', '$donefornow$8573']
jmp ['loc_56B']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_6DD']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_6DD']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_6DD']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '12Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_12C]']
mov ['ecx,', '4Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
mov ['[ebp+var_44],', 'ecx']
mov ['[ebp+var_68],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jz ['short', 'loc_7A7']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_7A7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+2Ch]']
sub ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
jmp ['short', '$morebytes$8606']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['$donefornow$8619']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['$donefornow$8619']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_50],', '0']
cmp ['[ebp+var_5C],', '4']
jnb ['short', 'loc_82F']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_80D']
mov ['eax,', '[ebp+var_50]']
shl ['eax,', '8']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
or ['eax,', 'edx']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_82D']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+2Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[ecx+24h],', 'dl']
jmp ['$donefornow$8619']
jmp ['short', '$morebytes$8606']
cmp ['[ebp+var_50],', '10FFFFh']
ja ['loc_912']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['loc_912']
cmp ['[ebp+var_50],', '0FFFFh']
ja ['short', 'loc_881']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['loc_910']
mov ['eax,', '[ebp+var_50]']
shr ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
movzx ['ecx,', 'ax']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_8ED']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_910']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[ecx+74h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+41h],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', '$donefornow$8619']
jmp ['short', 'loc_929']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[ecx+24h],', 'dl']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', '$donefornow$8619']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_68],', 'eax']
jmp ['loc_7A7']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_958']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jb ['short', 'loc_958']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_958']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+18h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_fromUnicode_UTF32_BE proc	near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jb ['short', 'loc_9C2']
jmp ['loc_BF4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+34h],', '1']
jnz ['short', 'loc_A0C']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
push ['4']
push ['offset', '?bom@?3??T_UConverter_fromUnicode_UTF32_BE@@9@9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_ucnv_fromUWriteBytes_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+34h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_5C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+38h],', '0']
jz ['short', 'loc_A40']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+38h]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+38h],', '0']
jmp ['short', '$lowsurogate$8658']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['loc_BC1']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_BC1']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_B30']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['loc_B16']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_AEF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_AD3']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '0D800h']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_44]']
lea ['edx,', '[eax+ecx+2400h]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_AED']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_BC1']
jmp ['short', 'loc_B14']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_B0F']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_BC1']
jmp ['short', 'loc_B30']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_BC1']
mov ['eax,', '[ebp+var_38]']
sar ['eax,', '10h']
and ['eax,', '1Fh']
mov ['[ebp+var_5B],', 'al']
mov ['eax,', '[ebp+var_38]']
sar ['eax,', '8']
mov ['[ebp+var_5A],', 'al']
mov ['al,', 'byte', 'ptr', '[ebp+var_38]']
mov ['[ebp+var_59],', 'al']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_B5D']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '3']
ja ['short', 'loc_BBC']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_B82']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_50]']
mov ['dl,', '[ebp+ecx+var_5C]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_BBA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['eax,', '[ebp+var_50]']
mov ['al,', '[ebp+eax+var_5C]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_B54']
jmp ['loc_A40']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_BE2']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_BE2']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_BE2']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN23']
dd ['offset', '$LN22']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '138h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_138]']
mov ['ecx,', '4Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_5C],', '0']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_C85']
jmp ['loc_EEE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+34h],', '1']
jnz ['short', 'loc_CCF']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
push ['4']
push ['offset', '?bom@?3??T_UConverter_fromUnicode_UTF32_BE_OFFSET_LOGIC@@9@9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_ucnv_fromUWriteBytes_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+34h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_74],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+38h],', '0']
jz ['short', 'loc_D0C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+38h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+38h],', '0']
jmp ['short', '$lowsurogate$8707']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_EB2']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['loc_EB2']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_DFC']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['loc_DE2']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_DBB']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_D9F']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '0D800h']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_50]']
lea ['edx,', '[eax+ecx+2400h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_DB9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_EB2']
jmp ['short', 'loc_DE0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_DDB']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_EB2']
jmp ['short', 'loc_DFC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_EB2']
mov ['eax,', '[ebp+var_44]']
sar ['eax,', '10h']
and ['eax,', '1Fh']
mov ['[ebp+var_73],', 'al']
mov ['eax,', '[ebp+var_44]']
sar ['eax,', '8']
mov ['[ebp+var_72],', 'al']
mov ['al,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ebp+var_71],', 'al']
mov ['[ebp+var_68],', '0']
jmp ['short', 'loc_E29']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_68],', '3']
ja ['short', 'loc_E99']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_E5F']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_68]']
mov ['dl,', '[ebp+ecx+var_74]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_5C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_E97']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['eax,', '[ebp+var_68]']
mov ['al,', '[ebp+eax+var_74]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_E20']
movzx ['eax,', '[ebp+var_73]']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
mov ['ecx,', '[ebp+var_5C]']
lea ['edx,', '[ecx+eax+1]']
mov ['[ebp+var_5C],', 'edx']
jmp ['loc_D0C']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_ED3']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jb ['short', 'loc_ED3']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_ED3']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+18h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '138h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN23_0']
dd ['offset', '$LN22_0']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_getNextUChar_UTF32_BE proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+Src],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Src]']
cmp ['ecx,', '[eax+0Ch]']
jb ['short', 'loc_F75']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '8']
mov ['eax,', '0FFFFh']
jmp ['loc_106E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sub ['ecx,', '[ebp+Src]']
mov ['[ebp+Size],', 'ecx']
cmp ['[ebp+Size],', '4']
jge ['short', 'loc_FDA']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+Size]']
mov ['[ecx+24h],', 'dl']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '0FFFFh']
jmp ['loc_106E']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
or ['ecx,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
cmp ['[ebp+var_14],', '10FFFFh']
ja ['short', 'loc_1030']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_1030']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_106E']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['4']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '25h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '0FFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_toUnicode_UTF32_LE proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jz ['short', 'loc_111B']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_111B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+2Ch]']
sub ['edx,', '1']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
jmp ['short', '$morebytes$8797']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['$donefornow$8810']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['$donefornow$8810']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_44],', '0']
cmp ['[ebp+var_50],', '4']
jnb ['short', 'loc_11A6']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_1184']
mov ['eax,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[eax]']
mov ['ecx,', '[ebp+var_50]']
shl ['ecx,', '3']
shl ['edx,', 'cl']
or ['edx,', '[ebp+var_44]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_11A4']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+2Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[ecx+24h],', 'dl']
jmp ['$donefornow$8810']
jmp ['short', '$morebytes$8797']
cmp ['[ebp+var_44],', '10FFFFh']
ja ['loc_1253']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['loc_1253']
cmp ['[ebp+var_44],', '0FFFFh']
ja ['short', 'loc_11E4']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_44]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_1251']
mov ['eax,', '[ebp+var_44]']
shr ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
movzx ['ecx,', 'ax']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_122E']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_44]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_1251']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_44]']
mov ['[ecx+74h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+41h],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', '$donefornow$8810']
jmp ['short', 'loc_126A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[ecx+24h],', 'dl']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', '$donefornow$8810']
jmp ['loc_111B']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_1290']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_1290']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_1290']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '12Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_12C]']
mov ['ecx,', '4Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
mov ['[ebp+var_44],', 'ecx']
mov ['[ebp+var_68],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jz ['short', 'loc_1353']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_1353']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
movsx ['edx,', 'byte', 'ptr', '[ecx+24h]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+2Ch]']
sub ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
jmp ['short', '$morebytes$8843']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['$donefornow$8856']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['$donefornow$8856']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_50],', '0']
cmp ['[ebp+var_5C],', '4']
jnb ['short', 'loc_13DE']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_13BC']
mov ['eax,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[eax]']
mov ['ecx,', '[ebp+var_5C]']
shl ['ecx,', '3']
shl ['edx,', 'cl']
or ['edx,', '[ebp+var_50]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_13DC']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+2Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[ecx+24h],', 'dl']
jmp ['$donefornow$8856']
jmp ['short', '$morebytes$8843']
cmp ['[ebp+var_50],', '10FFFFh']
ja ['loc_14C1']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['loc_14C1']
cmp ['[ebp+var_50],', '0FFFFh']
ja ['short', 'loc_1430']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['loc_14BF']
mov ['eax,', '[ebp+var_50]']
shr ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
movzx ['ecx,', 'ax']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_149C']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_14BF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[ecx+74h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+41h],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', '$donefornow$8856']
jmp ['short', 'loc_14D8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_5C]']
mov ['[ecx+24h],', 'dl']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['short', '$donefornow$8856']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_68],', 'eax']
jmp ['loc_1353']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_1507']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jb ['short', 'loc_1507']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_1507']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+18h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_fromUnicode_UTF32_LE proc	near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jb ['short', 'loc_1572']
jmp ['loc_17A4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+34h],', '1']
jnz ['short', 'loc_15BC']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
push ['4']
push ['offset', '?bom@?3??T_UConverter_fromUnicode_UTF32_LE@@9@9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_ucnv_fromUWriteBytes_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+34h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_59],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+38h],', '0']
jz ['short', 'loc_15F0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+38h]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+38h],', '0']
jmp ['short', '$lowsurogate$8895']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['loc_1771']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_1771']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_16E0']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['loc_16C6']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_169F']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_1683']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '0D800h']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_44]']
lea ['edx,', '[eax+ecx+2400h]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_169D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_1771']
jmp ['short', 'loc_16C4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_16BF']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_1771']
jmp ['short', 'loc_16E0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_1771']
mov ['eax,', '[ebp+var_38]']
sar ['eax,', '10h']
and ['eax,', '1Fh']
mov ['[ebp+var_5A],', 'al']
mov ['eax,', '[ebp+var_38]']
sar ['eax,', '8']
mov ['[ebp+var_5B],', 'al']
mov ['al,', 'byte', 'ptr', '[ebp+var_38]']
mov ['[ebp+var_5C],', 'al']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_170D']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '3']
ja ['short', 'loc_176C']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_1732']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_50]']
mov ['dl,', '[ebp+ecx+var_5C]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_176A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['eax,', '[ebp+var_50]']
mov ['al,', '[ebp+eax+var_5C]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_1704']
jmp ['loc_15F0']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_1792']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_1792']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_1792']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN23_1']
dd ['offset', '$LN22_1']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '138h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_138]']
mov ['ecx,', '4Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_74],', '0']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jb ['short', 'loc_1835']
jmp ['loc_1A9E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+34h],', '1']
jnz ['short', 'loc_187F']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
push ['4']
push ['offset', '?bom@?3??T_UConverter_fromUnicode_UTF32_LE_OFFSET_LOGIC@@9@9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_ucnv_fromUWriteBytes_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+34h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_65],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
cmp ['dword', 'ptr', '[ecx+38h],', '0']
jz ['short', 'loc_18BC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+38h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dword', 'ptr', '[ecx+38h],', '0']
jmp ['short', '$lowsurogate$8944']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_1A62']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['loc_1A62']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_19AC']
mov ['eax,', '[ebp+var_44]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['loc_1992']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_196B']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_50]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_194F']
mov ['eax,', '[ebp+var_44]']
sub ['eax,', '0D800h']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_50]']
lea ['edx,', '[eax+ecx+2400h]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1969']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_1A62']
jmp ['short', 'loc_1990']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_198B']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_1A62']
jmp ['short', 'loc_19AC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
jmp ['loc_1A62']
mov ['eax,', '[ebp+var_44]']
sar ['eax,', '10h']
and ['eax,', '1Fh']
mov ['[ebp+var_66],', 'al']
mov ['eax,', '[ebp+var_44]']
sar ['eax,', '8']
mov ['[ebp+var_67],', 'al']
mov ['al,', 'byte', 'ptr', '[ebp+var_44]']
mov ['[ebp+var_68],', 'al']
mov ['[ebp+var_5C],', '0']
jmp ['short', 'loc_19D9']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
cmp ['[ebp+var_5C],', '3']
ja ['short', 'loc_1A49']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_1A0F']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_5C]']
mov ['dl,', '[ebp+ecx+var_68]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_1A47']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movsx ['edx,', 'byte', 'ptr', '[eax+3Fh]']
mov ['eax,', '[ebp+var_5C]']
mov ['al,', '[ebp+eax+var_68]']
mov ['[ecx+edx+4Ch],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx+3Fh]']
add ['al,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[edx+3Fh],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_19D0']
movzx ['eax,', '[ebp+var_66]']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
mov ['ecx,', '[ebp+var_74]']
lea ['edx,', '[ecx+eax+1]']
mov ['[ebp+var_74],', 'edx']
jmp ['loc_18BC']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_1A83']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_38]']
jb ['short', 'loc_1A83']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_1A83']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+18h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '138h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN23_2']
dd ['offset', '$LN22_2']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_T_UConverter_getNextUChar_UTF32_LE proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+Src],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Src]']
cmp ['ecx,', '[eax+0Ch]']
jb ['short', 'loc_1B25']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '8']
mov ['eax,', '0FFFFh']
jmp ['loc_1C1E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sub ['ecx,', '[ebp+Src]']
mov ['[ebp+Size],', 'ecx']
cmp ['[ebp+Size],', '4']
jge ['short', 'loc_1B8A']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '25h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['dl,', 'byte', 'ptr', '[ebp+Size]']
mov ['[ecx+24h],', 'dl']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Bh']
mov ['eax,', '0FFFFh']
jmp ['loc_1C1E']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
shl ['ecx,', '18h']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
or ['ecx,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
cmp ['[ebp+var_14],', '10FFFFh']
ja ['short', 'loc_1BE0']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jz ['short', 'loc_1BE0']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_1C1E']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
push ['4']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '25h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['byte', 'ptr', '[ecx+24h],', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['eax,', '0FFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__UTF32Reset	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '1']
jg ['short', 'loc_1C62']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
cmp ['[ebp+arg_4],', '1']
jz ['short', 'loc_1C72']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__UTF32Open	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['__UTF32Reset']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__UTF32ToUnicodeWithOffsets proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '13Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_13C]']
mov ['ecx,', '4Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+30h]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_20]']
jnb ['loc_1EF4']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['loc_1EF4']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_13C],', 'eax']
cmp ['[ebp+var_13C],', '9']
ja ['$LN31']
mov ['ecx,', '[ebp+var_13C]']
movzx ['edx,', 'ds:$LN39[ecx]']
jmp ['ds:$LN40[edx*4]']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax]']
mov ['[ebp+var_4D],', 'cl']
movsx ['eax,', '[ebp+var_4D]']
test ['eax,', 'eax']
jnz ['short', 'loc_1D69']
mov ['[ebp+var_38],', '1']
jmp ['short', 'loc_1D84']
movsx ['eax,', '[ebp+var_4D]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_1D7B']
mov ['[ebp+var_38],', '5']
jmp ['short', 'loc_1D84']
mov ['[ebp+var_38],', '8']
jmp ['short', 'loc_1D0E']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['$LN31']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_38]']
movsx ['eax,', '_utf32BOM[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_1DF1']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_38],', '4']
jnz ['short', 'loc_1DD3']
mov ['[ebp+var_38],', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['[ebp+var_44],', 'ecx']
jmp ['short', 'loc_1DEC']
cmp ['[ebp+var_38],', '8']
jnz ['short', 'loc_1DEC']
mov ['[ebp+var_38],', '9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['[ebp+var_44],', 'ecx']
jmp ['loc_1E77']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax+8]']
mov ['[ebp+var_5C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3']
cmp ['[ebp+var_5C],', 'eax']
jnz ['short', 'loc_1E13']
jmp ['short', 'loc_1E6B']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+2]']
mov ['[ebp+var_65],', 'cl']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '4']
add ['eax,', 'offset', '_utf32BOM']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3']
sub ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+2],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_BE']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_65]']
mov ['[eax+2],', 'cl']
mov ['[ebp+var_38],', '8']
jmp ['loc_1D0E']
jmp ['short', '$LN31']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_1E9A']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_BE']
add ['esp,', '8']
jmp ['short', 'loc_1EAA']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_BE_OFFSET_LOGIC']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', '$LN31']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_1ED6']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_LE']
add ['esp,', '8']
jmp ['short', 'loc_1EE6']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_LE_OFFSET_LOGIC']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
jmp ['loc_1D0E']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_1F29']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_1F29']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_74],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_74]']
jnb ['short', 'loc_1F29']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ebp+var_2C]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '4']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_1F09']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_20]']
jnz ['loc_1FE5']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['loc_1FE5']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_13C],', 'eax']
cmp ['[ebp+var_13C],', '0']
jz ['short', 'loc_1F73']
cmp ['[ebp+var_13C],', '8']
jz ['short', 'loc_1F75']
cmp ['[ebp+var_13C],', '9']
jz ['short', 'loc_1F87']
jmp ['short', 'loc_1F99']
jmp ['short', 'loc_1FE5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_BE']
add ['esp,', '8']
jmp ['short', 'loc_1FE5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_LE']
add ['esp,', '8']
jmp ['short', 'loc_1FE5']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '4']
add ['eax,', 'offset', '_utf32BOM']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_toUnicode_UTF32_BE']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+0Ch],', 'ecx']
mov ['[ebp+var_38],', '8']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax+30h],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '13Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN25']
dd ['offset', '$LN17']
dd ['offset', '$LN14']
dd ['offset', '$LN31']
db ['4,', '1,', '1,', '1']
db ['2,', '3']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__UTF32GetNextUChar proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+30h]']
mov ['[ebp+var_C4],', 'edx']
cmp ['[ebp+var_C4],', '8']
jz ['short', 'loc_2065']
cmp ['[ebp+var_C4],', '9']
jz ['short', 'loc_2077']
jmp ['short', 'loc_2089']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_getNextUChar_UTF32_BE']
add ['esp,', '8']
jmp ['short', 'loc_208E']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_T_UConverter_getNextUChar_UTF32_LE']
add ['esp,', '8']
jmp ['short', 'loc_208E']
mov ['eax,', '0FFFFFFF7h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['_ucnv_getNonSurrogateUnicodeSet_56:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_ucnv_fromUWriteBytes_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
end
