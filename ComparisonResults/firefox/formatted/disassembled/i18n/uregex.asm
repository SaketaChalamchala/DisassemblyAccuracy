endp
??2@YAPAXI@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '5']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??9RegexPattern@icu_56@@QBECABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8RegexPattern@icu_56@@QBECABV01@@Z']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
setz ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0RegularExpression@icu_56@@QAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '72657870h']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+20h],', '0']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1RegularExpression@icu_56@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_EC],', 'ecx']
mov ['edx,', '[ebp+var_EC]']
mov ['[ebp+var_F8],', 'edx']
cmp ['[ebp+var_F8],', '0']
jz ['short', 'loc_2A9']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_F8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_F8]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_100],', 'eax']
jmp ['short', 'loc_2B3']
mov ['[ebp+var_100],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['loc_34B']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?umtx_atomic_dec@icu_56@@YAHPCJ@Z']
add ['esp,', '4']
test ['eax,', 'eax']
jnz ['short', 'loc_34B']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_D4],', 'ecx']
mov ['edx,', '[ebp+var_D4]']
mov ['[ebp+var_E0],', 'edx']
cmp ['[ebp+var_E0],', '0']
jz ['short', 'loc_323']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_E0]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_E0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_100],', 'eax']
jmp ['short', 'loc_32D']
mov ['[ebp+var_100],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+20h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_36E']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_36E']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?umtx_atomic_dec@icu_56@@YAHPCJ@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+lpAddend]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__InterlockedDecrement@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_open_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1B4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1B4]']
mov ['ecx,', '6Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_40E']
xor ['eax,', 'eax']
jmp ['loc_765']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_420']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jl ['short', 'loc_420']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_430']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_765']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0FFFFFFFFh']
jnz ['short', 'loc_44B']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
push ['24h']
call ['dword', 'ptr', 'ds:__imp_??2UMemory@icu_56@@SAPAXI@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1A0],', 'eax']
cmp ['[ebp+var_1A0],', '0']
jz ['short', 'loc_481']
mov ['ecx,', '[ebp+var_1A0]']
call ['??0RegularExpression@icu_56@@QAE@XZ']
mov ['[ebp+var_1B4],', 'eax']
jmp ['short', 'loc_48B']
mov ['[ebp+var_1B4],', '0']
mov ['eax,', '[ebp+var_1B4]']
mov ['[ebp+var_1AC],', 'eax']
mov ['ecx,', '[ebp+var_1AC]']
mov ['[ebp+var_14],', 'ecx']
push ['4']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+eax+2]']
push ['ecx']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_4D2']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_4D2']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_537']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '7']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_188],', 'eax']
mov ['ecx,', '[ebp+var_188]']
mov ['[ebp+var_194],', 'ecx']
cmp ['[ebp+var_194],', '0']
jz ['short', 'loc_50E']
push ['1']
mov ['ecx,', '[ebp+var_194]']
call ['??_GRegularExpression@icu_56@@QAEPAXI@Z']
mov ['[ebp+var_1B4],', 'eax']
jmp ['short', 'loc_518']
mov ['[ebp+var_1B4],', '0']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['loc_765']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
mov ['dword', 'ptr', '[ecx],', '1']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
call ['_u_memcpy_56']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_2C]']
mov ['[edx+ecx*2],', 'ax']
mov ['[ebp+var_A4],', '345AD82Ch']
mov ['[ebp+var_A0],', '0']
mov ['[ebp+var_9C],', '0']
mov ['[ebp+var_98],', '70h']
mov ['[ebp+var_94],', '0']
mov ['[ebp+var_90],', '0']
mov ['[ebp+var_8C],', '0']
mov ['[ebp+var_88],', '0']
mov ['[ebp+var_84],', '0']
mov ['[ebp+var_80],', '0']
mov ['[ebp+var_7C],', '0']
mov ['[ebp+var_78],', '0']
mov ['[ebp+var_74],', '0']
mov ['[ebp+var_70],', '0']
mov ['[ebp+var_6C],', '0']
mov ['[ebp+var_68],', '0']
mov ['[ebp+var_64],', '0']
mov ['[ebp+var_60],', '0']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_A4]']
push ['edx']
call ['_utext_openUChars_56']
add ['esp,', '14h']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_6A3']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_A4]']
push ['eax']
call ['?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_6C0']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_A4]']
push ['edx']
call ['?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
lea ['eax,', '[ebp+var_A4]']
push ['eax']
call ['_utext_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_6E6']
jmp ['short', '$ErrorExit$69984']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+14h],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', '$ErrorExit$69984']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_765']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_170],', 'eax']
mov ['ecx,', '[ebp+var_170]']
mov ['[ebp+var_17C],', 'ecx']
cmp ['[ebp+var_17C],', '0']
jz ['short', 'loc_759']
push ['1']
mov ['ecx,', '[ebp+var_17C]']
call ['??_GRegularExpression@icu_56@@QAEPAXI@Z']
mov ['[ebp+var_1B4],', 'eax']
jmp ['short', 'loc_763']
mov ['[ebp+var_1B4],', '0']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '1B4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN21']
dd ['offset', '$LN20']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?U_SUCCESS@@YACW4UErrorCode@@@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setnle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GRegularExpression@icu_56@@QAEPAXI@Z	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??1RegularExpression@icu_56@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_849']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_??3UMemory@icu_56@@SAXPAX@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_openUText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1D0]']
mov ['ecx,', '74h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_89E']
xor ['eax,', 'eax']
jmp ['loc_C3E']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_8B4']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_C3E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_utext_nativeLength_56']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_8DE']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_C3E']
mov ['esi,', 'esp']
push ['24h']
call ['dword', 'ptr', 'ds:__imp_??2UMemory@icu_56@@SAPAXI@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1BC],', 'eax']
cmp ['[ebp+var_1BC],', '0']
jz ['short', 'loc_914']
mov ['ecx,', '[ebp+var_1BC]']
call ['??0RegularExpression@icu_56@@QAE@XZ']
mov ['[ebp+var_1D0],', 'eax']
jmp ['short', 'loc_91E']
mov ['[ebp+var_1D0],', '0']
mov ['eax,', '[ebp+var_1D0]']
mov ['[ebp+var_1C8],', 'eax']
mov ['ecx,', '[ebp+var_1C8]']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_24],', '0']
lea ['eax,', '[ebp+var_24]']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['[ebp+var_30],', 'eax']
push ['4']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[eax+eax+2]']
push ['ecx']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_48],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_98F']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_98F']
cmp ['[ebp+var_48],', '0']
jnz ['short', 'loc_9F4']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '7']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_1A4],', 'eax']
mov ['ecx,', '[ebp+var_1A4]']
mov ['[ebp+var_1B0],', 'ecx']
cmp ['[ebp+var_1B0],', '0']
jz ['short', 'loc_9CB']
push ['1']
mov ['ecx,', '[ebp+var_1B0]']
call ['??_GRegularExpression@icu_56@@QAEPAXI@Z']
mov ['[ebp+var_1D0],', 'eax']
jmp ['short', 'loc_9D5']
mov ['[ebp+var_1D0],', '0']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_48]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['loc_C3E']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+8]']
mov ['dword', 'ptr', '[ecx],', '1']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
push ['0']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['[ebp+var_C0],', '345AD82Ch']
mov ['[ebp+var_BC],', '0']
mov ['[ebp+var_B8],', '0']
mov ['[ebp+var_B4],', '70h']
mov ['[ebp+var_B0],', '0']
mov ['[ebp+var_AC],', '0']
mov ['[ebp+var_A8],', '0']
mov ['[ebp+var_A4],', '0']
mov ['[ebp+var_A0],', '0']
mov ['[ebp+var_9C],', '0']
mov ['[ebp+var_98],', '0']
mov ['[ebp+var_94],', '0']
mov ['[ebp+var_90],', '0']
mov ['[ebp+var_8C],', '0']
mov ['[ebp+var_88],', '0']
mov ['[ebp+var_84],', '0']
mov ['[ebp+var_80],', '0']
mov ['[ebp+var_7C],', '0']
mov ['[ebp+var_78],', '0']
mov ['[ebp+var_74],', '0']
mov ['[ebp+var_70],', '0']
mov ['[ebp+var_6C],', '0']
mov ['[ebp+var_68],', '0']
mov ['[ebp+var_64],', '0']
mov ['[ebp+var_60],', '0']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_54],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['eax,', '[ebp+var_30]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
lea ['edx,', '[ebp+var_C0]']
push ['edx']
call ['_utext_openUChars_56']
add ['esp,', '14h']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_B7C']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_C0]']
push ['eax']
call ['?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_B99']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_C0]']
push ['edx']
call ['?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+4],', 'eax']
lea ['eax,', '[ebp+var_C0]']
push ['eax']
call ['_utext_close_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_BBF']
jmp ['short', '$ErrorExit$70027']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+14h],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', '$ErrorExit$70027']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_C3E']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_18C],', 'eax']
mov ['ecx,', '[ebp+var_18C]']
mov ['[ebp+var_198],', 'ecx']
cmp ['[ebp+var_198],', '0']
jz ['short', 'loc_C32']
push ['1']
mov ['ecx,', '[ebp+var_198]']
call ['??_GRegularExpression@icu_56@@QAEPAXI@Z']
mov ['[ebp+var_1D0],', 'eax']
jmp ['short', 'loc_C3C']
mov ['[ebp+var_1D0],', '0']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '1D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN21_0']
dd ['offset', '$LN19']
dd ['0FFFFFF40h,', '70h']
dd ['offset', '$LN20_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_close_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_14],', '0']
lea ['eax,', '[ebp+var_14]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_CE2']
jmp ['short', 'loc_D1F']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_E0],', 'eax']
mov ['ecx,', '[ebp+var_E0]']
mov ['[ebp+var_EC],', 'ecx']
cmp ['[ebp+var_EC],', '0']
jz ['short', 'loc_D15']
push ['1']
mov ['ecx,', '[ebp+var_EC]']
call ['??_GRegularExpression@icu_56@@QAEPAXI@Z']
mov ['[ebp+var_F4],', 'eax']
jmp ['short', 'loc_D1F']
mov ['[ebp+var_F4],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7']
dd ['offset', '$LN6']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_D97']
xor ['al,', 'al']
jmp ['short', 'loc_DE0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_DA8']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '72657870h']
jz ['short', 'loc_DB5']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['al,', 'al']
jmp ['short', 'loc_DE0']
movsx ['eax,', '[ebp+arg_4]']
test ['eax,', 'eax']
jz ['short', 'loc_DDE']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jnz ['short', 'loc_DDE']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+20h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_DDE']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '10302h']
xor ['al,', 'al']
jmp ['short', 'loc_DE0']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_clone_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_10C]']
mov ['ecx,', '43h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_E38']
xor ['eax,', 'eax']
jmp ['loc_F61']
mov ['esi,', 'esp']
push ['24h']
call ['dword', 'ptr', 'ds:__imp_??2UMemory@icu_56@@SAPAXI@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_F8],', 'eax']
cmp ['[ebp+var_F8],', '0']
jz ['short', 'loc_E6E']
mov ['ecx,', '[ebp+var_F8]']
call ['??0RegularExpression@icu_56@@QAE@XZ']
mov ['[ebp+var_10C],', 'eax']
jmp ['short', 'loc_E78']
mov ['[ebp+var_10C],', '0']
mov ['eax,', '[ebp+var_10C]']
mov ['[ebp+var_104],', 'eax']
mov ['ecx,', '[ebp+var_104]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_EA3']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '7']
xor ['eax,', 'eax']
jmp ['loc_F61']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+14h],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_F1F']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_E0],', 'eax']
mov ['ecx,', '[ebp+var_E0]']
mov ['[ebp+var_EC],', 'ecx']
cmp ['[ebp+var_EC],', '0']
jz ['short', 'loc_F11']
push ['1']
mov ['ecx,', '[ebp+var_EC]']
call ['??_GRegularExpression@icu_56@@QAEPAXI@Z']
mov ['[ebp+var_10C],', 'eax']
jmp ['short', 'loc_F1B']
mov ['[ebp+var_10C],', '0']
xor ['eax,', 'eax']
jmp ['short', 'loc_F61']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?umtx_atomic_inc@icu_56@@YAHPCJ@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '10Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?umtx_atomic_inc@icu_56@@YAHPCJ@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+lpAddend]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__InterlockedIncrement@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_pattern_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1001']
xor ['eax,', 'eax']
jmp ['short', 'loc_1018']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1012']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+10h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+0Ch]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_patternUText_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_flags_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_10C5']
xor ['eax,', 'eax']
jmp ['short', 'loc_10E9']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setText_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '144h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_144]']
mov ['ecx,', '51h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1142']
jmp ['loc_12A2']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_114E']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jge ['short', 'loc_115C']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_12A2']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+20h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_117F']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_117F']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+18h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+1Ch],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+20h],', '0']
mov ['[ebp+var_80],', '345AD82Ch']
mov ['[ebp+var_7C],', '0']
mov ['[ebp+var_78],', '0']
mov ['[ebp+var_74],', '70h']
mov ['[ebp+var_70],', '0']
mov ['[ebp+var_6C],', '0']
mov ['[ebp+var_68],', '0']
mov ['[ebp+var_64],', '0']
mov ['[ebp+var_60],', '0']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_38],', '0']
mov ['[ebp+var_34],', '0']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_80]']
push ['edx']
call ['_utext_openUChars_56']
add ['esp,', '14h']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_80]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+58h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['eax,', '[ebp+var_80]']
push ['eax']
call ['_utext_close_56']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '144h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN8_0']
dd ['offset', '$LN7_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setUText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1323']
jmp ['short', 'loc_1392']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1334']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['short', 'loc_1392']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+20h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1357']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_1357']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_uprv_free_56']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+1Ch],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+20h],', '1']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+58h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_getText_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_13EC']
xor ['eax,', 'eax']
jmp ['loc_154D']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jnz ['loc_1536']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+70h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_utext_nativeLength_56']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_104],', 'eax']
mov ['ecx,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[ecx+20h],', '0']
jnz ['short', 'loc_14B9']
mov ['edx,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[edx+24h],', '0']
jnz ['short', 'loc_14B9']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_104],', 'eax']
mov ['ecx,', '[ebp+var_104]']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ecx+10h]']
jnz ['short', 'loc_14B9']
mov ['eax,', '[ebp+var_104]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+14h]']
jnz ['short', 'loc_14B9']
mov ['eax,', '[ebp+var_14]']
mov ['eax,', '[eax+1Ch]']
cdq
mov ['[ebp+var_108],', 'eax']
mov ['[ebp+var_104],', 'edx']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+var_108]']
jnz ['short', 'loc_14B9']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ebp+var_104]']
jnz ['short', 'loc_14B9']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+30h]']
mov ['[eax+18h],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+20h],', '0']
jmp ['short', 'loc_1536']
mov ['[ebp+var_30],', '0']
lea ['eax,', '[ebp+var_30]']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
push ['0']
push ['0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+1Ch]']
lea ['edx,', '[ecx+ecx+2]']
push ['edx']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+1Ch]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
push ['0']
push ['0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[eax+18h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+20h],', '1']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1547']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+1Ch]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['eax,', '[eax+18h]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_0']
dd ['offset', '$LN8_1']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_getUText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_15DA']
mov ['eax,', '[ebp+arg_4]']
jmp ['short', 'loc_15FE']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+74h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_refreshUText_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1653']
jmp ['short', 'loc_1677']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+68h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_matches_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_matches64_56']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_matches64_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_11],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_171A']
mov ['al,', '[ebp+var_11]']
jmp ['short', 'loc_177A']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '[ebp+arg_8]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_174A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_11],', 'al']
jmp ['short', 'loc_1777']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_11],', 'al']
mov ['al,', '[ebp+var_11]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_lookingAt_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_lookingAt64_56']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_lookingAt64_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_11],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_181E']
mov ['al,', '[ebp+var_11]']
jmp ['short', 'loc_187E']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '[ebp+arg_8]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_184E']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_11],', 'al']
jmp ['short', 'loc_187B']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_11],', 'al']
mov ['al,', '[ebp+var_11]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_find_56	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_find64_56']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_find64_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_11],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1922']
mov ['al,', '[ebp+var_11]']
jmp ['short', 'loc_198D']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '[ebp+arg_8]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_195D']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
call ['?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_11],', 'al']
jmp ['short', 'loc_198A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+18h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_11],', 'al']
mov ['al,', '[ebp+var_11]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_findNext_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_19E5']
xor ['al,', 'al']
jmp ['short', 'loc_1A0B']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_11],', 'al']
mov ['al,', '[ebp+var_11]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_groupCount_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1A61']
xor ['eax,', 'eax']
jmp ['short', 'loc_1A85']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+34h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_groupNumberFromName_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '124h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_124]']
mov ['ecx,', '49h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1AE7']
xor ['eax,', 'eax']
jmp ['short', 'loc_1B42']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['ecx,', '[ebp+var_120]']
call ['dword', 'ptr', 'ds:__imp_??0UnicodeString@icu_56@@QAE@PB_WH@Z']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_120]']
call ['dword', 'ptr', 'ds:__imp_??1UnicodeString@icu_56@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_18]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '124h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_groupNumberFromCName_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1BA1']
xor ['eax,', 'eax']
jmp ['short', 'loc_1BCB']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_group_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '128h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_128]']
mov ['ecx,', '4Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1C24']
xor ['eax,', 'eax']
jmp ['loc_1DEE']
cmp ['[ebp+arg_C],', '0']
jl ['short', 'loc_1C36']
cmp ['[ebp+arg_C],', '0']
jle ['short', 'loc_1C46']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1C46']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_1DEE']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1C59']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['loc_1D3A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+38h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+48h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1CC3']
xor ['eax,', 'eax']
jmp ['loc_1DEE']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+var_14]']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_1CE8']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_1D0A']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_C]']
jnz ['short', 'loc_1CFB']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_1D0A']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_1D2D']
mov ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[edx+eax*2]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_u_memcpy_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_2C]']
jmp ['loc_1DEE']
jmp ['loc_1DEE']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+40h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+50h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_58],', 'eax']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1DA7']
xor ['eax,', 'eax']
jmp ['short', 'loc_1DEE']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
mov ['eax,', '[edx+70h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '128h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_groupUText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0DCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_DC]']
mov ['ecx,', '37h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1E7B']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_1E59']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_DC],', 'eax']
jmp ['short', 'loc_1E73']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
push ['0']
push ['0']
push ['0']
push ['0']
call ['_utext_openUChars_56']
add ['esp,', '14h']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_DC]']
jmp ['short', 'loc_1EA7']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0DCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7_1']
dd ['offset', '$LN6_0']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_start_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_uregex_start64_56']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_start64_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1F7B']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_1FA6']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+38h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cdq
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_end_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_uregex_end64_56']
add ['esp,', '0Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_end64_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2047']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_2072']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+48h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cdq
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_reset_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_reset64_56']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_reset64_56 proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_210F']
jmp ['short', 'loc_2139']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+60h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setRegion_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
cdq
push ['edx']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
cdq
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_setRegion64_56']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setRegion64_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_21DF']
jmp ['short', 'loc_220F']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+7Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setRegionAndStart_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2263']
jmp ['short', 'loc_229B']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+78h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_regionStart_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_regionStart64_56']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_regionStart64_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2337']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_2359']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+80h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cdq
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_regionEnd_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_regionEnd64_56']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_regionEnd64_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_23F7']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_2419']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+88h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cdq
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_hasTransparentBounds_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2471']
xor ['al,', 'al']
jmp ['short', 'loc_2492']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+90h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_useTransparentBounds_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_24E7']
jmp ['short', 'loc_250B']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+94h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_hasAnchoringBounds_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2561']
xor ['al,', 'al']
jmp ['short', 'loc_2582']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+98h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_useAnchoringBounds_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_25D7']
jmp ['short', 'loc_25FB']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+9Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_hitEnd_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2651']
xor ['al,', 'al']
jmp ['short', 'loc_2672']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0A0h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_requireEnd_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_26C9']
xor ['al,', 'al']
jmp ['short', 'loc_26EA']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0A4h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setTimeLimit_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2764']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+0D4h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_getTimeLimit_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_27E0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0D8h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setStackLimit_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_285C']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+0DCh]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_getStackLimit_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_28D8']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0E0h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setMatchCallback_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_295A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0E4h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_getMatchCallback_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_29DA']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0E8h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_setFindProgressCallback_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2A5A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0ECh]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_getFindProgressCallback_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2ADA']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0F0h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_replaceAll_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2B34']
xor ['eax,', 'eax']
jmp ['loc_2BFE']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2B52']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jl ['short', 'loc_2B52']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_2B4C']
cmp ['[ebp+arg_10],', '0']
jg ['short', 'loc_2B52']
cmp ['[ebp+arg_10],', '0']
jge ['short', 'loc_2B62']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_2BFE']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_reset_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_findNext_56']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2BC2']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
lea ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_uregex_appendReplacement_56']
add ['esp,', '18h']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_2B83']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
lea ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uregex_appendTail_56']
add ['esp,', '10h']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_2BFB']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11']
dd ['offset', '$LN10_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_replaceAllUText_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2C85']
xor ['eax,', 'eax']
jmp ['short', 'loc_2CCB']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_2C98']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['short', 'loc_2CCB']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0ACh]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_replaceFirst_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2D24']
xor ['eax,', 'eax']
jmp ['loc_2DC9']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2D42']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jl ['short', 'loc_2D42']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_2D3C']
cmp ['[ebp+arg_10],', '0']
jg ['short', 'loc_2D42']
cmp ['[ebp+arg_10],', '0']
jge ['short', 'loc_2D4F']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['short', 'loc_2DC9']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_reset_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_uregex_find_56']
add ['esp,', '0Ch']
mov ['[ebp+var_1D],', 'al']
movsx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jz ['short', 'loc_2DA8']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
lea ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_uregex_appendReplacement_56']
add ['esp,', '18h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
lea ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uregex_appendTail_56']
add ['esp,', '10h']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_replaceFirstUText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2E21']
xor ['eax,', 'eax']
jmp ['short', 'loc_2E67']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_2E34']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['short', 'loc_2E67']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0B4h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_appendReplacement_56 proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '210h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_21C]']
mov ['ecx,', '84h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_15],', '0']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_2F3B']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_2F3B']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_2F3B']
mov ['[ebp+var_15],', '1']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_2F5B']
xor ['eax,', 'eax']
jmp ['loc_3A41']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2F8B']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jl ['short', 'loc_2F8B']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_2F8B']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2F8B']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_2F83']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_2F8B']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jge ['short', 'loc_2F9B']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_3A41']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_24],', 'ecx']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax+6Ah]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_2FBF']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '10302h']
xor ['eax,', 'eax']
jmp ['loc_3A41']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
mov ['[ebp+var_48],', '0']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jnz ['short', 'loc_2FEB']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['loc_30D6']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ecx+34h]']
cmp ['dword', 'ptr', '[edx+2Ch],', '0']
jnz ['short', 'loc_301E']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[eax+80h]']
mov ['[ebp+var_6C],', 'ecx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[eax+70h]']
mov ['[ebp+var_60],', 'ecx']
jmp ['short', 'loc_3094']
mov ['[ebp+var_78],', '0']
lea ['eax,', '[ebp+var_78]']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ecx+84h]']
push ['edx']
mov ['eax,', '[ecx+80h]']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['[ebp+var_6C],', 'eax']
mov ['[ebp+var_78],', '0']
lea ['eax,', '[ebp+var_78]']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ecx+74h]']
push ['edx']
mov ['eax,', '[ecx+70h]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ecx+84h]']
push ['edx']
mov ['eax,', '[ecx+80h]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_utext_extract_56']
add ['esp,', '20h']
add ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_60],', 'eax']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_54],', 'eax']
jmp ['short', 'loc_30A5']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_54]']
cmp ['eax,', '[ebp+var_60]']
jge ['short', 'loc_30D1']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_54]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
push ['eax']
call ['?appendToBuf@@YAX_WPAHPA_WH@Z']
add ['esp,', '10h']
jmp ['short', 'loc_309C']
jmp ['loc_3169']
mov ['[ebp+var_84],', '0']
mov ['eax,', '[ebp+var_3C]']
sub ['eax,', '[ebp+var_48]']
test ['eax,', 'eax']
jle ['short', 'loc_30F8']
mov ['ecx,', '[ebp+var_3C]']
sub ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_218],', 'ecx']
jmp ['short', 'loc_3102']
mov ['[ebp+var_218],', '0']
cmp ['[ebp+var_30],', '0']
jnz ['short', 'loc_3114']
mov ['[ebp+var_21C],', '0']
jmp ['short', 'loc_3123']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[eax+edx*2]']
mov ['[ebp+var_21C],', 'ecx']
lea ['edx,', '[ebp+var_84]']
push ['edx']
mov ['eax,', '[ebp+var_218]']
push ['eax']
mov ['ecx,', '[ebp+var_21C]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[edx+74h]']
push ['eax']
mov ['ecx,', '[edx+70h]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[edx+84h]']
push ['eax']
mov ['ecx,', '[edx+80h]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[edx+10h]']
push ['eax']
call ['_utext_extract_56']
add ['esp,', '20h']
add ['eax,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'eax']
cmp ['[ebp+var_48],', '0']
jge ['short', 'loc_3194']
mov ['eax,', 'ds:?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a']
add ['eax,', '42h']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@']
push ['offset', '??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_90],', '0']
mov ['eax,', '[ebp+var_90]']
cmp ['eax,', '[ebp+arg_8]']
jge ['loc_3981']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_3981']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_9C],', 'dx']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
movzx ['eax,', '[ebp+var_9C]']
cmp ['eax,', '24h']
jz ['short', 'loc_3222']
movzx ['eax,', '[ebp+var_9C]']
cmp ['eax,', '5Ch']
jz ['short', 'loc_3222']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_48]']
push ['edx']
movzx ['eax,', '[ebp+var_9C]']
push ['eax']
call ['?appendToBuf@@YAX_WPAHPA_WH@Z']
add ['esp,', '10h']
jmp ['loc_319E']
movzx ['eax,', '[ebp+var_9C]']
cmp ['eax,', '5Ch']
jnz ['loc_3344']
mov ['eax,', '[ebp+var_90]']
cmp ['eax,', '[ebp+arg_8]']
jl ['short', 'loc_3242']
jmp ['loc_3981']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_9C],', 'dx']
movzx ['eax,', '[ebp+var_9C]']
cmp ['eax,', '55h']
jz ['short', 'loc_3272']
movzx ['eax,', '[ebp+var_9C]']
cmp ['eax,', '75h']
jnz ['loc_3314']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_90]']
push ['edx']
push ['offset', '_uregex_ucstr_unescape_charAt_56']
call ['_u_unescapeAt_56']
add ['esp,', '10h']
mov ['[ebp+var_A8],', 'eax']
cmp ['[ebp+var_A8],', '0FFFFFFFFh']
jz ['short', 'loc_3314']
cmp ['[ebp+var_A8],', '0FFFFh']
jg ['short', 'loc_32C7']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_48]']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_A8]']
push ['eax']
call ['?appendToBuf@@YAX_WPAHPA_WH@Z']
add ['esp,', '10h']
jmp ['short', 'loc_330F']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
push ['eax']
call ['?appendToBuf@@YAX_WPAHPA_WH@Z']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
push ['eax']
call ['?appendToBuf@@YAX_WPAHPA_WH@Z']
add ['esp,', '10h']
jmp ['loc_319E']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_48]']
push ['edx']
movzx ['eax,', '[ebp+var_9C]']
push ['eax']
call ['?appendToBuf@@YAX_WPAHPA_WH@Z']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
jmp ['loc_319E']
mov ['[ebp+var_B4],', '0']
movzx ['eax,', '[ebp+var_9C]']
cmp ['eax,', '24h']
jz ['short', 'loc_3380']
mov ['ecx,', 'ds:?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a']
add ['ecx,', '7Bh']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@']
push ['offset', '??_C@_1CA@BEAIEIMD@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAD?$AAO?$AAL?$AAL?$AAA?$AAR?$AAS?$AAI?$AAG?$AAN?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_C0],', 'edx']
mov ['eax,', '[ebp+var_C0]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_3459']
mov ['eax,', '[ebp+var_C0]']
and ['eax,', '400h']
jnz ['short', 'loc_340B']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jz ['short', 'loc_3409']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2+2]']
mov ['[ebp+var_CC],', 'dx']
movzx ['eax,', '[ebp+var_CC]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_3409']
mov ['eax,', '[ebp+var_C0]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_CC]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_C0],', 'edx']
jmp ['short', 'loc_3459']
cmp ['[ebp+var_90],', '0']
jle ['short', 'loc_3459']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2-2]']
mov ['[ebp+var_CC],', 'dx']
movzx ['eax,', '[ebp+var_CC]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_3459']
movzx ['eax,', '[ebp+var_CC]']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_C0]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_C0],', 'edx']
mov ['eax,', '[ebp+var_C0]']
push ['eax']
call ['_u_isdigit_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_3691']
mov ['[ebp+var_D8],', '0']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
mov ['ecx,', '[ecx+6Ch]']
call ['dword', 'ptr', 'ds:__imp_?size@UVector32@icu_56@@QBEHXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_E4],', 'eax']
mov ['eax,', '[ebp+var_90]']
cmp ['eax,', '[ebp+arg_8]']
jl ['short', 'loc_34AB']
jmp ['loc_368C']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_C0],', 'edx']
mov ['eax,', '[ebp+var_C0]']
and ['eax,', '0FFFFF800h']
cmp ['eax,', '0D800h']
jnz ['loc_3584']
mov ['eax,', '[ebp+var_C0]']
and ['eax,', '400h']
jnz ['short', 'loc_3536']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jz ['short', 'loc_3534']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2+2]']
mov ['[ebp+var_F0],', 'dx']
movzx ['eax,', '[ebp+var_F0]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_3534']
mov ['eax,', '[ebp+var_C0]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_F0]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_C0],', 'edx']
jmp ['short', 'loc_3584']
cmp ['[ebp+var_90],', '0']
jle ['short', 'loc_3584']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2-2]']
mov ['[ebp+var_F0],', 'dx']
movzx ['eax,', '[ebp+var_F0]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_3584']
movzx ['eax,', '[ebp+var_F0]']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_C0]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_C0],', 'edx']
mov ['eax,', '[ebp+var_C0]']
push ['eax']
call ['_u_isdigit_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_359F']
jmp ['loc_368C']
mov ['eax,', '[ebp+var_C0]']
push ['eax']
call ['_u_charDigitValue_56']
add ['esp,', '4']
mov ['[ebp+var_FC],', 'eax']
mov ['eax,', '[ebp+var_B4]']
imul ['eax,', '0Ah']
add ['eax,', '[ebp+var_FC]']
cmp ['eax,', '[ebp+var_E4]']
jg ['loc_3673']
mov ['eax,', '[ebp+var_B4]']
imul ['eax,', '0Ah']
add ['eax,', '[ebp+var_FC]']
mov ['[ebp+var_B4],', 'eax']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
and ['edx,', '0FFFFFC00h']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
cmp ['edx,', '0D800h']
jnz ['short', 'loc_361A']
mov ['[ebp+var_218],', '1']
jmp ['short', 'loc_3624']
mov ['[ebp+var_218],', '0']
cmp ['[ebp+var_218],', '0']
jz ['short', 'loc_3662']
mov ['eax,', '[ebp+var_90]']
cmp ['eax,', '[ebp+arg_8]']
jz ['short', 'loc_3662']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
and ['edx,', '0FFFFFC00h']
cmp ['edx,', '0DC00h']
jnz ['short', 'loc_3662']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
mov ['eax,', '[ebp+var_D8]']
add ['eax,', '1']
mov ['[ebp+var_D8],', 'eax']
jmp ['short', 'loc_3687']
cmp ['[ebp+var_D8],', '0']
jnz ['short', 'loc_3685']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '8']
jmp ['short', 'loc_368C']
jmp ['loc_349B']
jmp ['loc_38D1']
cmp ['[ebp+var_C0],', '7Bh']
jnz ['loc_38C8']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_144]']
call ['dword', 'ptr', 'ds:__imp_??0UnicodeString@icu_56@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
and ['edx,', '0FFFFFC00h']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
cmp ['edx,', '0D800h']
jnz ['short', 'loc_36F0']
mov ['[ebp+var_218],', '1']
jmp ['short', 'loc_36FA']
mov ['[ebp+var_218],', '0']
cmp ['[ebp+var_218],', '0']
jz ['short', 'loc_3738']
mov ['eax,', '[ebp+var_90]']
cmp ['eax,', '[ebp+arg_8]']
jz ['short', 'loc_3738']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
and ['edx,', '0FFFFFC00h']
cmp ['edx,', '0DC00h']
jnz ['short', 'loc_3738']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_38AA']
cmp ['[ebp+var_C0],', '7Dh']
jz ['loc_38AA']
mov ['eax,', '[ebp+var_90]']
cmp ['eax,', '[ebp+arg_8]']
jl ['short', 'loc_3777']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '10315h']
jmp ['loc_38AA']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_C0],', 'edx']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
mov ['eax,', '[ebp+var_C0]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0D800h']
jnz ['short', 'loc_3809']
mov ['eax,', '[ebp+var_90]']
cmp ['eax,', '[ebp+arg_8]']
jz ['short', 'loc_3809']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_150],', 'dx']
movzx ['eax,', '[ebp+var_150]']
and ['eax,', '0FFFFFC00h']
cmp ['eax,', '0DC00h']
jnz ['short', 'loc_3809']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
mov ['eax,', '[ebp+var_C0]']
shl ['eax,', '0Ah']
movzx ['ecx,', '[ebp+var_150]']
lea ['edx,', '[eax+ecx-35FDC00h]']
mov ['[ebp+var_C0],', 'edx']
cmp ['[ebp+var_C0],', '41h']
jl ['short', 'loc_381B']
cmp ['[ebp+var_C0],', '5Ah']
jle ['short', 'loc_383F']
cmp ['[ebp+var_C0],', '61h']
jl ['short', 'loc_382D']
cmp ['[ebp+var_C0],', '7Ah']
jle ['short', 'loc_383F']
cmp ['[ebp+var_C0],', '31h']
jl ['short', 'loc_385D']
cmp ['[ebp+var_C0],', '39h']
jg ['short', 'loc_385D']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_C0]']
push ['eax']
lea ['ecx,', '[ebp+var_144]']
call ['dword', 'ptr', 'ds:__imp_?append@UnicodeString@icu_56@@QAEAAV12@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_38A5']
cmp ['[ebp+var_C0],', '7Dh']
jnz ['short', 'loc_389C']
lea ['eax,', '[ebp+var_144]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+94h]']
push ['eax']
call ['_uhash_geti_56']
add ['esp,', '8']
mov ['[ebp+var_B4],', 'eax']
cmp ['[ebp+var_B4],', '0']
jnz ['short', 'loc_389A']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '10315h']
jmp ['short', 'loc_38A5']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '10315h']
jmp ['loc_3738']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_144]']
call ['dword', 'ptr', 'ds:__imp_??1UnicodeString@icu_56@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_38D1']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '10315h']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_3965']
mov ['eax,', '[ebp+var_3C]']
sub ['eax,', '[ebp+var_48]']
test ['eax,', 'eax']
jle ['short', 'loc_38FE']
mov ['ecx,', '[ebp+var_3C]']
sub ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_218],', 'ecx']
jmp ['short', 'loc_3908']
mov ['[ebp+var_218],', '0']
cmp ['[ebp+var_30],', '0']
jnz ['short', 'loc_391A']
mov ['[ebp+var_21C],', '0']
jmp ['short', 'loc_3929']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[eax+edx*2]']
mov ['[ebp+var_21C],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+var_218]']
push ['eax']
mov ['ecx,', '[ebp+var_21C]']
push ['ecx']
mov ['edx,', '[ebp+var_B4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_uregex_group_56']
add ['esp,', '14h']
add ['eax,', '[ebp+var_48]']
mov ['[ebp+var_48],', 'eax']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_3965']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_397C']
jmp ['short', 'loc_3981']
jmp ['loc_319E']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_3C]']
jge ['short', 'loc_3997']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+var_30]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_39CA']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_39CA']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_48]']
cmp ['ecx,', '[eax]']
jnz ['short', 'loc_39C1']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_39CA']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0Fh']
cmp ['[ebp+var_48],', '0']
jle ['short', 'loc_3A18']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3A18']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_3C]']
jge ['short', 'loc_39FF']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_48]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
sub ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_3A18']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_3C]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0']
movsx ['eax,', '[ebp+var_15]']
test ['eax,', 'eax']
jz ['short', 'loc_3A3E']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_3A3E']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_48]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN100']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '21Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN99']
dd ['offset', '$LN93']
db ['88h,', '0FFh']
dw ['0FFFFh']
dd ['4']
dd ['offset', '$LN94']
dd ['0FFFFFF7Ch,', '4']
dd ['offset', '$LN95']
dd ['0FFFFFF70h,', '4']
dd ['offset', '$LN96']
dd ['0FFFFFEBCh,', '40h']
dd ['offset', '$LN97']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z$0 proc	near
mov ['esi,', 'esp']
lea ['ecx,', '[ebp-144h]']
call ['dword', 'ptr', 'ds:__imp_??1UnicodeString@icu_56@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-220h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CA@BEAIEIMD@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAD?$AAO?$AAL?$AAL?$AAA?$AAR?$AAS?$AAI?$AAG?$AAN?$AA?$AA@']
unicode ['0,', '<c', '==', 'DOLLARSIGN>,0']
assume ['cs:_rdata']
public ['??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@']
unicode ['0,', '<destIdx', '>']
dw ['3Eh']
unicode ['0,', '<=', '0>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\i18n\\uregex.cpp>,0']
align ['10h']
assume ['cs:_data']
public ['?__LINE__Var@?1??appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z$0']
dd ['offset', '__unwindtable$?appendReplacement@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PB_WHPAPA_WPAHPAW4UErrorCode@@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?appendToBuf@@YAX_WPAHPA_WH@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_C]']
jge ['short', 'loc_3C38']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_8]']
mov ['ax,', '[ebp+arg_0]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_appendReplacementUText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+0BCh]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_appendTail_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PAPA_WPAHPAW4UErrorCode@@@Z']
add ['esp,', '10h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PAPA_WPAHPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '148h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_148]']
mov ['ecx,', '52h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_5],', '0']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0Fh']
jnz ['short', 'loc_3D49']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_3D49']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_3D49']
mov ['[ebp+var_5],', '1']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_3D69']
xor ['eax,', 'eax']
jmp ['loc_403F']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_3D8D']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_3D8D']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_3D85']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_3D8D']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jge ['short', 'loc_3D9D']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_403F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['loc_3F21']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+6Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3DEC']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+78h]']
mov ['[ebp+var_148],', 'eax']
mov ['ecx,', '[edx+7Ch]']
mov ['[ebp+var_144],', 'ecx']
jmp ['short', 'loc_3E07']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+80h]']
mov ['[ebp+var_148],', 'eax']
mov ['ecx,', '[edx+84h]']
mov ['[ebp+var_144],', 'ecx']
mov ['edx,', '[ebp+var_148]']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_144]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_54]']
and ['eax,', '[ebp+var_50]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_3E2D']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_3E71']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ecx+34h]']
cmp ['dword', 'ptr', '[edx+2Ch],', '0']
jnz ['short', 'loc_3E44']
mov ['eax,', '[ebp+var_54]']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_3E71']
mov ['[ebp+var_60],', '0']
lea ['eax,', '[ebp+var_60]']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+var_54]']
push ['edx']
push ['0']
push ['0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_20],', '0']
jge ['short', 'loc_3E9C']
mov ['eax,', 'ds:?__LINE__Var@?1??appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a']
add ['eax,', '2Ah']
mov ['esi,', 'esp']
push ['eax']
push ['offset', '??_C@_1FG@DFDDLAOB@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAi?$AA1?$AA8?$AAn?$AA?2@']
push ['offset', '??_C@_1BK@KDFMMPOE@?$AAd?$AAe?$AAs?$AAt?$AAI?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[eax+1Ch]']
jnz ['short', 'loc_3EA9']
jmp ['short', 'loc_3F1F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_44]']
mov ['ax,', '[ecx+edx*2]']
mov ['[ebp+var_6C],', 'ax']
movzx ['eax,', '[ebp+var_6C]']
test ['eax,', 'eax']
jnz ['short', 'loc_3ED6']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0FFFFFFFFh']
jnz ['short', 'loc_3ED6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_44]']
mov ['[eax+1Ch],', 'ecx']
jmp ['short', 'loc_3F1F']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_3EEE']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_38]']
mov ['dx,', '[ebp+var_6C]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_3F08']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jle ['short', 'loc_3F08']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
sub ['ecx,', '[ebp+var_44]']
add ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_3F1F']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_3E71']
jmp ['short', 'loc_3F9C']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+6Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3F3D']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+78h]']
mov ['[ebp+var_7C],', 'ecx']
mov ['edx,', '[eax+7Ch]']
mov ['[ebp+var_78],', 'edx']
jmp ['short', 'loc_3F6B']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+80h]']
mov ['[ebp+var_7C],', 'ecx']
mov ['edx,', '[eax+84h]']
mov ['[ebp+var_78],', 'edx']
mov ['eax,', '[ebp+var_7C]']
and ['eax,', '[ebp+var_78]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_3F6B']
mov ['[ebp+var_7C],', '0']
mov ['[ebp+var_78],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
mov ['edx,', '[eax+18h]']
push ['edx']
mov ['eax,', '[ebp+var_78]']
push ['eax']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+10h]']
push ['eax']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_3FB2']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_38]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_3FCE']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jnz ['short', 'loc_3FC5']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_3FCE']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_3FF5']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_20]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
sub ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_4016']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_4016']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_2C]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
movsx ['eax,', '[ebp+var_5]']
test ['eax,', 'eax']
jz ['short', 'loc_403C']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_SUCCESS@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_403C']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN37']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '148h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN36']
dd ['offset', '$LN35']
align ['10h']
assume ['cs:_data']
public ['?__LINE__Var@?1??appendTail@RegexCImpl@icu_56@@SAHPAURegularExpression@3@PAPA_WPAHPAW4UErrorCode@@@Z@4JA@34ef717a']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_appendTailUText_56 proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx+14h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx+0C4h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_split_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?validateRE@@YACPBURegularExpression@icu_56@@CPAW4UErrorCode@@@Z']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_4125']
xor ['eax,', 'eax']
jmp ['short', 'loc_4174']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_4131']
cmp ['[ebp+arg_8],', '0']
jg ['short', 'loc_4143']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_4143']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_4143']
cmp ['[ebp+arg_14],', '1']
jge ['short', 'loc_4150']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['short', 'loc_4174']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?split@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PA_WHPAHQAPA_WHPAW4UErrorCode@@@Z']
add ['esp,', '1Ch']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?split@RegexCImpl@icu_56@@SAHPAURegularExpression@2@PA_WHPAHQAPA_WHPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '144h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_144]']
mov ['ecx,', '51h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+64h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ecx+1Ch]']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_28]']
or ['eax,', '[ebp+var_24]']
jnz ['short', 'loc_41FF']
xor ['eax,', 'eax']
jmp ['loc_45B3']
mov ['[ebp+var_40],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+34h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4C],', 'eax']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_4240']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
cmp ['[ebp+var_34],', 'eax']
jl ['loc_4304']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_14]']
jl ['loc_42FF']
jg ['short', 'loc_4269']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[ebp+var_18]']
jbe ['loc_42FF']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
cmp ['[ebp+var_34],', 'eax']
jz ['short', 'loc_4290']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ecx+eax*4]']
sub ['eax,', '[edx]']
sar ['eax,', '1']
mov ['[ebp+var_40],', 'eax']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_40]']
test ['eax,', 'eax']
jle ['short', 'loc_42BA']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_144],', 'ecx']
jmp ['short', 'loc_42C4']
mov ['[ebp+var_144],', '0']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
mov ['eax,', '[ebp+var_144]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*2]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['ecx,', '[ebp+var_40]']
lea ['edx,', '[ecx+eax+1]']
mov ['[ebp+var_40],', 'edx']
jmp ['loc_4563']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+20h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_44ED']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_40]']
test ['eax,', 'eax']
jle ['short', 'loc_4357']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_144],', 'ecx']
jmp ['short', 'loc_4361']
mov ['[ebp+var_144],', '0']
lea ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+var_144]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*2]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[edx+74h]']
push ['eax']
mov ['ecx,', '[edx+70h]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['edx,', '[ebp+var_40]']
lea ['eax,', '[edx+eax+1]']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_58],', '0Fh']
jnz ['short', 'loc_43B1']
mov ['[ebp+var_58],', '0']
jmp ['short', 'loc_43B9']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[ebp+var_58]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ecx+78h]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ecx+7Ch]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_64],', '1']
jmp ['short', 'loc_43DD']
mov ['eax,', '[ebp+var_64]']
add ['eax,', '1']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
cmp ['eax,', '[ebp+var_4C]']
jg ['loc_448E']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
cmp ['[ebp+var_34],', 'eax']
jnz ['short', 'loc_43F9']
jmp ['loc_448E']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
mov ['[ebp+var_58],', '0']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_40]']
test ['eax,', 'eax']
jle ['short', 'loc_4433']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_144],', 'ecx']
jmp ['short', 'loc_443D']
mov ['[ebp+var_144],', '0']
lea ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+var_144]']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_uregex_group_56']
add ['esp,', '14h']
mov ['[ebp+var_70],', 'eax']
mov ['eax,', '[ebp+var_70]']
mov ['ecx,', '[ebp+var_40]']
lea ['edx,', '[ecx+eax+1]']
mov ['[ebp+var_40],', 'edx']
cmp ['[ebp+var_58],', '0Fh']
jnz ['short', 'loc_4481']
mov ['[ebp+var_58],', '0']
jmp ['short', 'loc_4489']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[ebp+var_58]']
mov ['[eax],', 'ecx']
jmp ['loc_43D4']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+var_28]']
jnz ['short', 'loc_44EB']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+var_24]']
jnz ['short', 'loc_44EB']
mov ['eax,', '[ebp+var_40]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_44B2']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
cmp ['[ebp+var_34],', 'eax']
jge ['short', 'loc_44C6']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_40]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_44E0']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '1']
mov ['[ebp+var_40],', 'eax']
jmp ['short', 'loc_4563']
jmp ['short', 'loc_455E']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax*2]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_40]']
test ['eax,', 'eax']
jle ['short', 'loc_4517']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_144],', 'ecx']
jmp ['short', 'loc_4521']
mov ['[ebp+var_144],', '0']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
mov ['eax,', '[ebp+var_144]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*2]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_utext_extract_56']
add ['esp,', '20h']
mov ['ecx,', '[ebp+var_40]']
lea ['edx,', '[ecx+eax+1]']
mov ['[ebp+var_40],', 'edx']
jmp ['short', 'loc_4563']
jmp ['loc_4237']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_4577']
mov ['eax,', '[ebp+var_7C]']
add ['eax,', '1']
mov ['[ebp+var_7C],', 'eax']
mov ['eax,', '[ebp+var_7C]']
cmp ['eax,', '[ebp+arg_14]']
jge ['short', 'loc_458E']
mov ['eax,', '[ebp+var_7C]']
mov ['ecx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[ecx+eax*4],', '0']
jmp ['short', 'loc_456E']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_459C']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_40]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_40]']
cmp ['eax,', '[ebp+arg_8]']
jle ['short', 'loc_45AD']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN40']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '144h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN39']
dd ['offset', '$LN38']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_uregex_splitUText_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['edx,', '[ecx]']
mov ['edi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+70h]']
call ['eax']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+0CCh]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['??8RegexPattern@icu_56@@QBECABV01@@Z:near']
extrn ['__RTC_CheckEsp:near']
extrn ['_uprv_free_56:near']
extrn ['__imp__InterlockedDecrement@4:near']
extrn ['_utext_close_56:near']
extrn ['?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAW4UErrorCode@@@Z:near']
extrn ['?compile@RegexPattern@icu_56@@SAPAV12@PAUUText@@IAAUUParseError@@AAW4UErrorCode@@@Z:near']
extrn ['_utext_openUChars_56:near']
extrn ['_u_memcpy_56:near']
extrn ['_uprv_malloc_56:near']
extrn ['__imp_??2UMemory@icu_56@@SAPAXI@Z:near']
extrn ['_u_strlen_56:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__imp_??3UMemory@icu_56@@SAXPAX@Z:near']
extrn ['_utext_extract_56:near']
extrn ['_utext_nativeLength_56:near']
extrn ['__imp__InterlockedIncrement@4:near']
extrn ['?resetPreserveRegion@RegexMatcher@icu_56@@QAEXXZ:near']
extrn ['__imp_??1UnicodeString@icu_56@@UAE@XZ:near']
extrn ['__imp_??0UnicodeString@icu_56@@QAE@PB_WH@Z:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['_uhash_geti_56:near']
extrn ['__imp_?append@UnicodeString@icu_56@@QAEAAV12@H@Z:near']
extrn ['__imp_??0UnicodeString@icu_56@@QAE@XZ:near']
extrn ['_u_charDigitValue_56:near']
extrn ['__imp_?size@UVector32@icu_56@@QBEHXZ:near']
extrn ['_u_isdigit_56:near']
extrn ['_u_unescapeAt_56:near']
extrn ['_uregex_ucstr_unescape_charAt_56:near']
extrn ['__imp___wassert:near']
extrn ['___CxxFrameHandler3:near']
end
