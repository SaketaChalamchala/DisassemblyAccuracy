endp
_CnvExtOpen	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['0E0054h']
call ['_uprv_malloc_56']
add ['esp,', '4']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_5C']
mov ['esi,', 'esp']
push ['offset', '??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@']
call ['dword', 'ptr', 'ds:__imp__printf']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['7']
call ['dword', 'ptr', 'ds:__imp__exit']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['0E0054h']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax],', 'offset', '_CnvExtClose']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+4],', 'offset', '_CnvExtIsValid']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+8],', 'offset', '_CnvExtAddTable']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+0Ch],', 'offset', '_CnvExtWrite']
mov ['eax,', '[ebp+Dst]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0P@PCJPAHLM@out?5of?5memory?6?$AA@']
align ['4']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_CnvExtClose	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_151']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_utm_close']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_utm_close']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
call ['_utm_close']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_utm_close']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
call ['_utm_close']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_uprv_free_56']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_CnvExtIsValid	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
xor ['al,', 'al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_CnvExtWrite	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1ACh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1AC]']
mov ['ecx,', '6Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_B8],', '0']
push ['7Ch']
push ['0']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset_0']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '1']
jz ['short', 'loc_1EF']
mov ['[ebp+var_30],', '0']
jmp ['loc_2F6']
mov ['[ebp+var_E8],', '0']
mov ['[ebp+var_E7],', '0']
mov ['[ebp+var_E6],', '0']
mov ['[ebp+var_E5],', '0']
mov ['[ebp+var_E4],', '0']
mov ['[ebp+var_E0],', '0']
mov ['[ebp+var_DC],', '0']
mov ['[ebp+var_D8],', '0']
mov ['[ebp+var_D4],', '0']
mov ['[ebp+var_D0],', '0']
mov ['[ebp+var_CC],', '0']
xor ['eax,', 'eax']
mov ['[ebp+var_C8],', 'eax']
mov ['[ebp+var_C4],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '2041Ch']
push ['ecx']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
and ['eax,', '3']
jz ['short', 'loc_29E']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_18]']
mov ['byte', 'ptr', '[ecx+edx+2041Ch],', '0']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_27A']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '20h']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_E8],', '4']
mov ['[ebp+var_E7],', '2']
mov ['eax,', '[ebp+var_30]']
shl ['eax,', '8']
or ['eax,', '0Eh']
mov ['[ebp+var_D0],', 'eax']
push ['20h']
lea ['eax,', '[ebp+var_E8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '2041Ch']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_18],', '20h']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_B8],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_B0],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_AC],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_A8],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_A4],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
and ['eax,', '3']
jz ['short', 'loc_3E3']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
call ['_utm_alloc']
add ['esp,', '4']
xor ['edx,', 'edx']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_utm_alloc']
add ['esp,', '4']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_A0],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_24]']
and ['eax,', '1']
jz ['short', 'loc_451']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
call ['_utm_alloc']
add ['esp,', '4']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_94],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_90],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0028h]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_8C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+0E002Ch]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_88],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_84],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0030h]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
and ['eax,', '3']
jz ['short', 'loc_502']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0030h]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+ecx*2+20028h],', 'dx']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+0E0030h]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+0E0030h],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_7C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0034h]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_78],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E003Ch]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0E0040h]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_C]']
or ['ecx,', '[edx+0E0044h]']
mov ['[ebp+var_74],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0048h]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0E004Ch]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_C]']
or ['ecx,', '[edx+0E0050h]']
mov ['[ebp+var_70],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ecx+4]']
movzx ['eax,', 'byte', 'ptr', '[edx+28h]']
mov ['[ebp+var_6C],', 'eax']
push ['80h']
lea ['eax,', '[ebp+var_B8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_B0]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['_utm_getStart']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_A8]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+18h]']
push ['edx']
call ['_utm_getStart']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_9C]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
call ['_utm_getStart']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_9C]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+20h]']
push ['edx']
call ['_utm_getStart']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_94]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+24h]']
push ['edx']
call ['_utm_getStart']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0028h]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '28h']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E002Ch]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '8A8h']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0030h]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '20028h']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0E0034h]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '0A0028h']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_udata_writeBlock']
add ['esp,', '0Ch']
movsx ['eax,', 'byte', 'ptr', 'ds:_VERBOSE']
test ['eax,', 'eax']
jz ['short', 'loc_70B']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_24]']
push ['eax']
push ['offset', '??_C@_0BN@FBDKGFID@size?5of?5extension?5data?3?5?$CFld?6?$AA@']
call ['dword', 'ptr', 'ds:__imp__printf']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1ACh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN13']
dd ['offset', '$LN11']
dd ['0FFFFFF18h,', '28h']
dd ['offset', '$LN12']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0BN@FBDKGFID@size?5of?5extension?5data?3?5?$CFld?6?$AA@']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_CnvExtAddTable	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+28h]']
and ['ecx,', '2']
jz ['short', 'loc_7E8']
mov ['esi,', 'esp']
push ['offset', '??_C@_0DE@ODGLNIIO@error?3?5contains?5mappings?5for?5sur@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['al,', 'al']
jmp ['short', 'loc_83F']
mov ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax+45h],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_makeToUTable']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_82F']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_makeFromUTable']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_82F']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_839']
mov ['[ebp+var_D0],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_D0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0DE@ODGLNIIO@error?3?5contains?5mappings?5for?5sur@']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_makeToUTable	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_reduceToUMappings']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
push ['4']
push ['1F0000h']
push ['10000h']
push ['offset', '??_C@_0BH@OHDBLHII@cnv?5extension?5toUTable?$AA@']
call ['_utm_open']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'eax']
push ['2']
push ['40000h']
push ['10000h']
push ['offset', '??_C@_0BI@KKDGMKJA@cnv?5extension?5toUUChars?$AA@']
call ['_utm_open']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'eax']
push ['0']
push ['0']
mov ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_generateToUTable']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BI@KKDGMKJA@cnv?5extension?5toUUChars?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BH@OHDBLHII@cnv?5extension?5toUTable?$AA@']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_reduceToUMappings proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_9A4']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_9D7']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax+edx+0Ah]']
mov ['[ebp+var_41],', 'cl']
movsx ['eax,', '[ebp+var_41]']
test ['eax,', 'eax']
jz ['short', 'loc_9D5']
movsx ['eax,', '[ebp+var_41]']
cmp ['eax,', '3']
jz ['short', 'loc_9D5']
jmp ['short', 'loc_9D7']
jmp ['short', 'loc_99B']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_9E8']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_A34']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax+edx+0Ah]']
mov ['[ebp+var_41],', 'cl']
movsx ['eax,', '[ebp+var_41]']
test ['eax,', 'eax']
jz ['short', 'loc_A17']
movsx ['eax,', '[ebp+var_41]']
cmp ['eax,', '3']
jnz ['short', 'loc_A32']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['esi,', '[ebp+var_14]']
mov ['edx,', '[esi+edx*4]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_9DF']
mov ['eax,', '[ebp+var_2C]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_generateToUTable proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '16Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_16C]']
mov ['ecx,', '5Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '4']
jg ['short', 'loc_A9B']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_16C],', 'edx']
jmp ['short', 'loc_AAD']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_14]']
add ['ecx,', '[edx+4]']
mov ['[ebp+var_16C],', 'ecx']
mov ['eax,', '[ebp+var_16C]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '[ebp+arg_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_80],', 'ecx']
mov ['[ebp+var_44],', '1']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_8C]']
mov ['[ebp+var_98],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_AF2']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_B78']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '4']
jg ['short', 'loc_B26']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_16C],', 'edx']
jmp ['short', 'loc_B38']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_14]']
add ['ecx,', '[edx+4]']
mov ['[ebp+var_16C],', 'ecx']
mov ['eax,', '[ebp+var_16C]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '[ebp+arg_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_8C],', 'ecx']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[ebp+var_98]']
jz ['short', 'loc_B73']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_AE9']
mov ['eax,', '[ebp+var_8C]']
sub ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '100h']
jge ['short', 'loc_BAC']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_BAA']
mov ['eax,', '[ebp+var_50]']
imul ['eax,', '3']
cdq
and ['edx,', '3']
add ['eax,', 'edx']
sar ['eax,', '2']
cmp ['[ebp+var_44],', 'eax']
jl ['short', 'loc_BAC']
jmp ['short', 'loc_BB2']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '100h']
jl ['short', 'loc_BF0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_50]']
push ['eax']
push ['offset', '??_C@_0EI@HMFAJFBO@error?3?5toUnicode?5extension?5table@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['al,', 'al']
jmp ['loc_F50']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['_utm_allocN']
add ['esp,', '8']
mov ['[ebp+var_A4],', 'eax']
mov ['eax,', '[ebp+var_50]']
shl ['eax,', '18h']
or ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_A4]']
add ['edx,', '4']
mov ['[ebp+var_A4],', 'edx']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_C50']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_C]']
jge ['loc_D3C']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '4']
jg ['short', 'loc_C88']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '4']
mov ['[ebp+var_16C],', 'edx']
jmp ['short', 'loc_C9A']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_14]']
add ['ecx,', '[edx+4]']
mov ['[ebp+var_16C],', 'ecx']
mov ['eax,', '[ebp+var_16C]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '[ebp+arg_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_8C],', 'ecx']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[ebp+var_98]']
jz ['short', 'loc_D37']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jle ['short', 'loc_D0A']
mov ['eax,', '[ebp+var_98]']
add ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
mov ['ecx,', '[ebp+var_98]']
cmp ['ecx,', '[ebp+var_8C]']
jge ['short', 'loc_D08']
mov ['eax,', '[ebp+var_98]']
shl ['eax,', '18h']
or ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_A4]']
mov ['[edx+ecx*4],', 'eax']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_CC8']
jmp ['short', 'loc_D16']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_8C]']
shl ['eax,', '18h']
or ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_A4]']
mov ['[edx+ecx*4],', 'eax']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
jmp ['loc_C47']
mov ['eax,', '[ebp+var_A4]']
mov ['ecx,', '[eax]']
and ['ecx,', '0FFFFFFh']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_38],', '0']
jmp ['short', 'loc_D5F']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_50]']
jge ['loc_F4E']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_50]']
jge ['short', 'loc_D96']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_A4]']
mov ['eax,', '[edx+ecx*4+4]']
and ['eax,', '0FFFFFFh']
mov ['[ebp+var_16C],', 'eax']
jmp ['short', 'loc_D9F']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_16C],', 'ecx']
mov ['edx,', '[ebp+var_16C]']
mov ['[ebp+var_68],', 'edx']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_A4]']
mov ['edx,', '[ecx+eax*4]']
and ['edx,', '0FF000000h']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[ebp+var_68]']
jnz ['short', 'loc_DD0']
jmp ['short', 'loc_D56']
mov ['[ebp+arg_14],', '0']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
mov ['edx,', '[ebp+arg_10]']
add ['edx,', '1']
cmp ['ecx,', 'edx']
jnz ['loc_ECF']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[ebp+var_68]']
jge ['loc_EB8']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx+9]']
mov ['edx,', '[ebp+arg_10]']
add ['edx,', '1']
cmp ['ecx,', 'edx']
jnz ['loc_EB8']
mov ['esi,', 'esp']
push ['offset', '??_C@_0CK@JFIGFLCM@error?3?5multiple?5mappings?5from?5sa@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ucm_printMapping']
add ['esp,', '0Ch']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ucm_printMapping']
add ['esp,', '0Ch']
xor ['al,', 'al']
jmp ['loc_F50']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_getToUnicodeValue']
add ['esp,', '0Ch']
mov ['[ebp+arg_14],', 'eax']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[ebp+var_68]']
jnz ['short', 'loc_EF4']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_A4]']
mov ['edx,', '[ecx+eax*4]']
or ['edx,', '[ebp+arg_14]']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_F49']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
mov ['edx,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_A4]']
or ['eax,', '[ecx+edx*4]']
mov ['edx,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ecx+edx*4],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_68]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_generateToUTable']
add ['esp,', '18h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_F49']
xor ['al,', 'al']
jmp ['short', 'loc_F50']
jmp ['loc_D56']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '16Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rdata']
public ['??_C@_0CK@JFIGFLCM@error?3?5multiple?5mappings?5from?5sa@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0EI@HMFAJFBO@error?3?5toUnicode?5extension?5table@']
db ["'tries',0Ah,0"]
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_getToUnicodeValue proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_10C]']
mov ['ecx,', '43h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1029']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '0FFFFh']
cmp ['ecx,', '[eax]']
sbb ['edx,', 'edx']
neg ['edx']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '1F0000h']
mov ['[ebp+var_20],', 'ecx']
jmp ['loc_111E']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1040']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_10C],', 'edx']
jmp ['short', 'loc_1054']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_10C],', 'ecx']
mov ['edx,', '[ebp+var_10C]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+Code],', '0']
lea ['eax,', '[ebp+Code]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
push ['0']
push ['0']
call ['_u_strFromUTF32_56']
add ['esp,', '18h']
cmp ['[ebp+Code],', '0']
jle ['short', 'loc_10A3']
cmp ['[ebp+Code],', '0Fh']
jz ['short', 'loc_10A3']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Code]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__exit']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', '[ebp+var_2C]']
add ['esi,', '0Ch']
shl ['esi,', '12h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
or ['esi,', 'eax']
mov ['[ebp+var_20],', 'esi']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
call ['_utm_allocN']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+Code],', '0']
lea ['eax,', '[ebp+Code]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_u_strFromUTF32_56']
add ['esp,', '18h']
cmp ['[ebp+Code],', '0']
jle ['short', 'loc_111E']
cmp ['[ebp+Code],', '0Fh']
jz ['short', 'loc_111E']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Code]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__exit']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1134']
mov ['eax,', '[ebp+var_20]']
or ['eax,', '800000h']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+0E003Ch]']
jle ['short', 'loc_1156']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0E003Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[eax+0E004Ch]']
jle ['short', 'loc_1170']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+0E004Ch],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
mov ['edx,', '[ebp+var_2C]']
lea ['eax,', '[edx+ecx-1]']
mov ['ecx,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[ecx+9]']
cdq
idiv ['ecx']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_38]']
cmp ['ecx,', '[eax+0E0050h]']
jle ['short', 'loc_11A5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax+0E0050h],', 'ecx']
mov ['eax,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '10Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN15']
dd ['offset', '$LN13_0']
dd ['0FFFFFFBCh,', '4']
dd ['offset', '$LN14_0']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_makeFromUTable	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F0]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_prepareFromUMappings']
add ['esp,', '4']
mov ['[ebp+var_2C],', 'eax']
push ['2']
push ['1000000h']
push ['10000h']
push ['offset', '??_C@_0BP@EKICILH@cnv?5extension?5fromUTableUChars?$AA@']
call ['_utm_open']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1Ch],', 'eax']
push ['4']
push ['1000000h']
push ['10000h']
push ['offset', '??_C@_0BP@EMLGEFOK@cnv?5extension?5fromUTableValues?$AA@']
call ['_utm_open']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'eax']
push ['1']
push ['1000000h']
push ['10000h']
push ['offset', '??_C@_0BJ@PCCDCJJE@cnv?5extension?5fromUBytes?$AA@']
call ['_utm_open']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+24h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0E002Ch],', '40h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0E0030h],', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0A002Ch],', '80000001h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0E0034h],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
call ['_utm_alloc']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_utm_alloc']
add ['esp,', '4']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_generateFromUTrie']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_12FF']
xor ['al,', 'al']
jmp ['short', 'loc_1349']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '28h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0028h]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_1326']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_20]']
jge ['short', 'loc_1347']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
add ['edx,', '[ebp+var_20]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_131D']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0BJ@PCCDCJJE@cnv?5extension?5fromUBytes?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BP@EMLGEFOK@cnv?5extension?5fromUTableValues?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BP@EKICILH@cnv?5extension?5fromUTableUChars?$AA@']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_prepareFromUMappings proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '154h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_154]']
mov ['ecx,', '55h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_44],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_141B']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_44]']
jge ['loc_15A6']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[eax+0Ah]']
mov ['[ebp+var_4D],', 'cl']
movsx ['eax,', '[ebp+var_4D]']
test ['eax,', 'eax']
jl ['short', 'loc_144B']
movsx ['eax,', '[ebp+var_4D]']
and ['eax,', '0Fh']
mov ['[ebp+var_4D],', 'al']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[ebp+var_4D]']
mov ['[eax+0Ah],', 'cl']
movsx ['eax,', '[ebp+var_4D]']
test ['eax,', 'eax']
jz ['short', 'loc_147E']
movsx ['eax,', '[ebp+var_4D]']
cmp ['eax,', '1']
jz ['short', 'loc_147E']
movsx ['eax,', '[ebp+var_4D]']
cmp ['eax,', '2']
jnz ['short', 'loc_1471']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '1']
jz ['short', 'loc_147E']
movsx ['eax,', '[ebp+var_4D]']
cmp ['eax,', '4']
jnz ['loc_15A1']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jle ['loc_15A1']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_14BA']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_154],', 'edx']
jmp ['short', 'loc_14CE']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_154],', 'ecx']
mov ['edx,', '[ebp+var_154]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_68],', 'eax']
mov ['[ebp+var_8C],', '2']
mov ['[ebp+var_80],', '1']
jmp ['short', 'loc_14F9']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['[ebp+var_80],', 'ecx']
jge ['loc_1595']
mov ['eax,', '[ebp+var_80]']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_74],', 'edx']
cmp ['[ebp+var_74],', '0FFFFh']
ja ['short', 'loc_1540']
mov ['eax,', '[ebp+var_8C]']
mov ['ecx,', '[ebp+var_68]']
mov ['dx,', 'word', 'ptr', '[ebp+var_74]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_8C]']
add ['eax,', '1']
mov ['[ebp+var_8C],', 'eax']
jmp ['short', 'loc_1590']
mov ['eax,', '[ebp+var_74]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_8C]']
mov ['edx,', '[ebp+var_68]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_8C]']
add ['eax,', '1']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_74]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['ecx,', '[ebp+var_8C]']
mov ['edx,', '[ebp+var_68]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_8C]']
add ['eax,', '1']
mov ['[ebp+var_8C],', 'eax']
jmp ['loc_14F0']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8C]']
mov ['[eax+8],', 'cl']
jmp ['loc_1409']
mov ['eax,', '[ebp+var_38]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_generateFromUTrie proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '130h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_130]']
mov ['ecx,', '4Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_15DB']
mov ['al,', '1']
jmp ['loc_1855']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
imul ['ecx,', '0Ch']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1611']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_130],', 'edx']
jmp ['short', 'loc_1625']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_130],', 'ecx']
mov ['edx,', '[ebp+var_130]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+arg_8]']
jge ['loc_1853']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_5C]']
jnz ['short', 'loc_16BE']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['short', 'loc_16BE']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1697']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_130],', 'edx']
jmp ['short', 'loc_16AB']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_130],', 'ecx']
mov ['edx,', '[ebp+var_130]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_68],', 'ecx']
jmp ['short', 'loc_1655']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_16EE']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_130],', 'edx']
jmp ['short', 'loc_1702']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_130],', 'ecx']
mov ['edx,', '[ebp+var_130]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['loc_17E7']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jge ['loc_17D0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx+8]']
cmp ['ecx,', '1']
jnz ['loc_17D0']
mov ['esi,', 'esp']
push ['offset', '??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ucm_printMapping']
add ['esp,', '0Ch']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ucm_printMapping']
add ['esp,', '0Ch']
xor ['al,', 'al']
jmp ['loc_1855']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_getFromUBytesValue']
add ['esp,', '0Ch']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_44]']
jnz ['short', 'loc_1805']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_addFromUTrieEntry']
add ['esp,', '0Ch']
jmp ['short', 'loc_184E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_addFromUTrieEntry']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
push ['2']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_generateFromUTable']
add ['esp,', '18h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_184E']
xor ['al,', 'al']
jmp ['short', 'loc_1855']
jmp ['loc_163D']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '130h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_getFromUBytesValue proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '2']
jnz ['short', 'loc_18D8']
mov ['eax,', '80000001h']
jmp ['loc_1AE6']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '4']
jg ['short', 'loc_18F2']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '4']
mov ['[ebp+var_100],', 'edx']
jmp ['short', 'loc_1904']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+arg_8]']
add ['ecx,', '[edx+4]']
mov ['[ebp+var_100],', 'ecx']
mov ['eax,', '[ebp+var_100]']
mov ['[ebp+Src],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['cl,', '[eax+9]']
mov ['byte', 'ptr', '[ebp+var_100],', 'cl']
cmp ['byte', 'ptr', '[ebp+var_100],', '1']
jz ['short', 'loc_196A']
cmp ['byte', 'ptr', '[ebp+var_100],', '2']
jz ['short', 'loc_1952']
cmp ['byte', 'ptr', '[ebp+var_100],', '3']
jz ['short', 'loc_193D']
jmp ['short', 'loc_1978']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '10h']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+Src]']
add ['edx,', '1']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '8']
or ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+Src]']
add ['edx,', '1']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
or ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_19CA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
push ['eax']
call ['_utm_allocN']
add ['esp,', '8']
mov ['[ebp+Dst],', 'eax']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx+9]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
shl ['ecx,', '18h']
or ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_19F2']
mov ['eax,', '[ebp+var_20]']
or ['eax,', '80000000h']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_1A09']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '4']
jnz ['short', 'loc_1A09']
mov ['eax,', '[ebp+var_20]']
or ['eax,', '40000000h']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1A2B']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '0FFFFh']
cmp ['ecx,', '[eax]']
sbb ['edx,', 'edx']
neg ['edx']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
jmp ['short', 'loc_1A78']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1A42']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_100],', 'edx']
jmp ['short', 'loc_1A56']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_100],', 'ecx']
mov ['edx,', '[ebp+var_100]']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[edx]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_8]']
movsx ['eax,', 'byte', 'ptr', '[edx+8]']
lea ['ecx,', '[ecx+eax-2]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[eax+0E0048h]']
jle ['short', 'loc_1A92']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+0E0048h],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+0E0040h]']
jle ['short', 'loc_1AB4']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0E0040h],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
mov ['edx,', '[ebp+var_2C]']
lea ['eax,', '[ecx+edx-1]']
cdq
idiv ['[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_38]']
cmp ['ecx,', '[eax+0E0044h]']
jle ['short', 'loc_1AE3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax+0E0044h],', 'ecx']
mov ['eax,', '[ebp+var_20]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_generateFromUTable proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '178h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_178]']
mov ['ecx,', '5Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1B54']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_178],', 'edx']
jmp ['short', 'loc_1B68']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_178],', 'ecx']
mov ['edx,', '[ebp+var_178]']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_74]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_80],', 'edx']
mov ['[ebp+var_44],', '1']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_8C]']
mov ['[ebp+var_98],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_1BAE']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_1C34']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1BDF']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_178],', 'edx']
jmp ['short', 'loc_1BF3']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_178],', 'ecx']
mov ['edx,', '[ebp+var_178]']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_74]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_8C],', 'edx']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[ebp+var_98]']
jz ['short', 'loc_1C2F']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
jmp ['loc_1BA5']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
call ['_utm_allocN']
add ['esp,', '8']
mov ['[ebp+var_A4],', 'eax']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+20h]']
push ['edx']
call ['_utm_allocN']
add ['esp,', '8']
mov ['[ebp+var_B0],', 'eax']
mov ['eax,', '[ebp+var_A4]']
mov ['cx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_A4]']
add ['edx,', '2']
mov ['[ebp+var_A4],', 'edx']
mov ['eax,', '[ebp+var_B0]']
mov ['ecx,', '[ebp+arg_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_B0]']
add ['edx,', '4']
mov ['[ebp+var_B0],', 'edx']
mov ['eax,', '[ebp+var_80]']
sub ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_1CCC']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+arg_C]']
jge ['loc_1D79']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1D01']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_178],', 'edx']
jmp ['short', 'loc_1D15']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_178],', 'ecx']
mov ['edx,', '[ebp+var_178]']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_74]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
mov ['[ebp+var_8C],', 'edx']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[ebp+var_98]']
jz ['short', 'loc_1D74']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_98],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_A4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_8C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_B0]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
jmp ['loc_1CC3']
mov ['eax,', '[ebp+var_B0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_38],', '0']
jmp ['short', 'loc_1D96']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_50]']
jge ['loc_1F40']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_50]']
jge ['short', 'loc_1DC8']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_B0]']
mov ['eax,', '[edx+ecx*4+4]']
mov ['[ebp+var_178],', 'eax']
jmp ['short', 'loc_1DD1']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_178],', 'ecx']
mov ['edx,', '[ebp+var_178]']
mov ['[ebp+var_68],', 'edx']
mov ['[ebp+arg_14],', '0']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
mov ['edx,', '[ebp+arg_10]']
add ['edx,', '1']
cmp ['ecx,', 'edx']
jnz ['loc_1ED9']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[ebp+var_68]']
jge ['loc_1EC2']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx+8]']
mov ['edx,', '[ebp+arg_10]']
add ['edx,', '1']
cmp ['ecx,', 'edx']
jnz ['loc_1EC2']
mov ['esi,', 'esp']
push ['offset', '??_C@_0DI@LLPMIKEF@error?3?5multiple?5mappings?5from?5sa@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ucm_printMapping']
add ['esp,', '0Ch']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ucm_printMapping']
add ['esp,', '0Ch']
xor ['al,', 'al']
jmp ['loc_1F42']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_getFromUBytesValue']
add ['esp,', '0Ch']
mov ['[ebp+arg_14],', 'eax']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[ebp+var_68]']
jnz ['short', 'loc_1EF2']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_B0]']
mov ['edx,', '[ebp+arg_14]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_1F3B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_utm_countItems']
add ['esp,', '4']
mov ['edx,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_B0]']
mov ['[ecx+edx*4],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_68]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_generateFromUTable']
add ['esp,', '18h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_1F3B']
xor ['al,', 'al']
jmp ['short', 'loc_1F42']
jmp ['loc_1D8D']
mov ['al,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '178h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_addFromUTrieEntry proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '118h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_118]']
mov ['ecx,', '46h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1F81']
jmp ['loc_22F3']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '0Ah']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+0E0028h]']
jl ['short', 'loc_1FA7']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0E0028h],', 'eax']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '4']
and ['eax,', '3Fh']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+28h]']
test ['edx,', 'edx']
jnz ['loc_206C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E002Ch]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_50]']
sub ['eax,', '[ebp+var_38]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_50]']
jge ['short', 'loc_2000']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+8A6h]']
test ['edx,', 'edx']
jnz ['short', 'loc_2000']
mov ['eax,', '[ebp+var_50]']
sub ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
jmp ['short', 'loc_1FDB']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_50]']
mov ['[ecx+eax*2+28h],', 'dx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '40h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0E002Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0E002Ch],', '0FBC0h']
jle ['short', 'loc_206C']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '??_C@_0CL@MPJKOCBA@error?3?5too?5many?5stage?52?5entries?5@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['7']
call ['dword', 'ptr', 'ds:__imp__exit']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+28h]']
add ['edx,', '[ebp+var_38]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0Fh']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+8A8h]']
test ['edx,', 'edx']
jnz ['loc_2153']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0030h]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_50]']
sub ['eax,', '[ebp+var_38]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_50]']
jge ['short', 'loc_20D6']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+20026h]']
test ['edx,', 'edx']
jnz ['short', 'loc_20D6']
mov ['eax,', '[ebp+var_50]']
sub ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
jmp ['short', 'loc_20B1']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '3']
and ['eax,', '0FFFFFFFCh']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
sar ['eax,', '2']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2+8A8h],', 'ax']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0E0030h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0E0030h],', '40000h']
jle ['short', 'loc_2153']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '??_C@_0CL@FAEAGBIO@error?3?5too?5many?5stage?53?5entries?5@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['7']
call ['dword', 'ptr', 'ds:__imp__exit']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+8A8h]']
mov ['eax,', '[ebp+var_38]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+arg_8],', '80000001h']
jnz ['loc_2247']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2+20028h],', 'ax']
cmp ['[ebp+var_38],', '0Fh']
jnz ['loc_2242']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+var_38]']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_21A8']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_20]']
jge ['short', 'loc_21C5']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+20028h]']
cmp ['edx,', '1']
jnz ['short', 'loc_21C5']
jmp ['short', 'loc_219F']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_20]']
jnz ['short', 'loc_2242']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+0E0038h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_222A']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['dx,', '[edx+0E0038h]']
mov ['[ecx+eax*2+8A8h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0030h]']
sub ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0E0030h],', 'ecx']
push ['20h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0030h]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*2+20028h]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
jmp ['short', 'loc_2242']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['cx,', '[edx+ecx*2+8A8h]']
mov ['[eax+0E0038h],', 'cx']
jmp ['loc_22F3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0034h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0E0034h]']
add ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0E0034h],', 'ecx']
cmp ['edx,', '10000h']
jl ['short', 'loc_227F']
mov ['[ebp+var_118],', '1']
jmp ['short', 'loc_2289']
mov ['[ebp+var_118],', '0']
cmp ['[ebp+var_118],', '0']
jz ['short', 'loc_22D1']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '??_C@_0CM@KLFBLKEK@error?3?5too?5many?5stage?53b?5entries@']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp____iob_func']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '40h']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__fprintf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['7']
call ['dword', 'ptr', 'ds:__imp__exit']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_2C]']
mov ['[ecx+eax*2+20028h],', 'dx']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+eax*4+0A0028h],', 'edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '118h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0CM@KLFBLKEK@error?3?5too?5many?5stage?53b?5entries@']
assume ['cs:_rdata']
public ['??_C@_0CL@FAEAGBIO@error?3?5too?5many?5stage?53?5entries?5@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0CL@MPJKOCBA@error?3?5too?5many?5stage?52?5entries?5@']
extrn ['_memset:near']
extrn ['__imp__exit:near']
extrn ['__imp__printf:near']
extrn ['_uprv_malloc_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_uprv_free_56:near']
extrn ['_utm_close:near']
extrn ['_VERBOSE:near']
extrn ['_utm_getStart:near']
extrn ['_utm_alloc:near']
extrn ['_utm_countItems:near']
extrn ['_udata_writeBlock:near']
extrn ['_strlen:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_memset_0:near']
extrn ['__imp__fprintf:near']
extrn ['__imp____iob_func:near']
extrn ['_utm_open:near']
extrn ['_ucm_printMapping:near']
extrn ['_utm_allocN:near']
extrn ['_u_strFromUTF32_56:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
end
