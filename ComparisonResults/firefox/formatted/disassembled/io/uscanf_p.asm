endp
_u_scanf_simple_percent_handler	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_fgetc_56']
add ['esp,', '4']
movzx ['ecx,', 'ax']
cmp ['ecx,', '25h']
jz ['short', 'loc_3A4']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_count_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_43A']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_411']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
and ['ecx,', '0FFFFh']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['[eax],', 'cx']
jmp ['short', 'loc_43A']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_42E']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
cdq
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_43A']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[eax],', '0']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_double_handler	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '110h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_110]']
mov ['ecx,', '44h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_48],', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_4DD']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_4C9']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_110],', 'edx']
jmp ['short', 'loc_4D4']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_110],', 'ecx']
mov ['edx,', '[ebp+var_110]']
mov ['[ebp+var_8],', 'edx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_u_locbund_getNumberFormat_56']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_4FE']
xor ['eax,', 'eax']
jmp ['loc_5B4']
lea ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_positive_sign']
add ['esp,', '0Ch']
add ['eax,', '[ebp+var_3C]']
mov ['[ebp+var_3C],', 'eax']
lea ['eax,', '[ebp+var_48]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
call ['_unum_parseDouble_56']
add ['esp,', '14h']
fstp ['[ebp+var_18]']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_589']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_55C']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_18]']
fstp ['qword', 'ptr', '[ecx]']
jmp ['short', 'loc_589']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
test ['ecx,', 'ecx']
jz ['short', 'loc_573']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_18]']
fstp ['qword', 'ptr', '[ecx]']
jmp ['short', 'loc_589']
fld ['[ebp+var_18]']
fstp ['[ebp+var_110]']
fld ['[ebp+var_110]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fstp ['dword', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_30]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_3C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '110h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14']
dd ['offset', '$LN12']
dd ['0FFFFFFB8h,', '4']
dd ['offset', '$LN13']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_skip_leading_ws proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ufile_getch_56']
add ['esp,', '8']
mov ['[ebp+var_1D],', 'al']
movsx ['edx,', '[ebp+var_1D]']
test ['edx,', 'edx']
jz ['short', 'loc_677']
movzx ['eax,', '[ebp+var_8]']
movzx ['ecx,', '[ebp+arg_4]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_66C']
movzx ['eax,', '[ebp+var_8]']
push ['eax']
call ['_u_isWhitespace_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_677']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_631']
movsx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jz ['short', 'loc_690']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
movzx ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_u_fungetc_56']
add ['esp,', '8']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN8']
dd ['offset', '$LN7']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_skip_leading_positive_sign proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '118h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_118]']
mov ['ecx,', '46h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_54],', '0']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_786']
lea ['eax,', '[ebp+var_54]']
push ['eax']
push ['8']
lea ['ecx,', '[ebp+var_3C]']
push ['ecx']
push ['7']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_unum_getSymbol_56']
add ['esp,', '14h']
mov ['[ebp+var_48],', 'eax']
cmp ['[ebp+var_54],', '0']
jg ['short', 'loc_786']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ufile_getch_56']
add ['esp,', '8']
mov ['[ebp+var_21],', 'al']
movsx ['edx,', '[ebp+var_21]']
test ['edx,', 'edx']
jz ['short', 'loc_76D']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+var_48]']
jge ['short', 'loc_76D']
movzx ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', '[ebp+ecx*2+var_3C]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_76D']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_72F']
movsx ['eax,', '[ebp+var_21]']
test ['eax,', 'eax']
jz ['short', 'loc_786']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
movzx ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_u_fungetc_56']
add ['esp,', '8']
mov ['eax,', '[ebp+var_18]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '118h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN11']
dd ['offset', '$LN8_0']
dd ['0FFFFFFC4h,', '10h']
dd ['offset', '$LN9_0']
dd ['0FFFFFFACh,', '4']
dd ['offset', '$LN10']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_scientific_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '15Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_15C]']
mov ['ecx,', '57h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_34],', '0']
mov ['[ebp+var_4C],', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_40],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_89B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_887']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_15C],', 'edx']
jmp ['short', 'loc_892']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_15C],', 'ecx']
mov ['edx,', '[ebp+var_15C]']
mov ['[ebp+var_C],', 'edx']
push ['4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_u_locbund_getNumberFormat_56']
add ['esp,', '8']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_8BC']
xor ['eax,', 'eax']
jmp ['loc_A06']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
push ['10h']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
push ['0Bh']
mov ['edx,', '[ebp+var_28]']
push ['edx']
call ['_unum_getSymbol_56']
add ['esp,', '14h']
mov ['[ebp+var_70],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
cmp ['ecx,', '65h']
jnz ['short', 'loc_90C']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_70]']
push ['eax']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
push ['10h']
lea ['edx,', '[ebp+var_94]']
push ['edx']
call ['_u_strToLower_56']
add ['esp,', '18h']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_933']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_70]']
push ['eax']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
push ['10h']
lea ['edx,', '[ebp+var_94]']
push ['edx']
call ['_u_strToUpper_56']
add ['esp,', '18h']
mov ['[ebp+var_7C],', 'eax']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
lea ['edx,', '[ebp+var_94]']
push ['edx']
push ['0Bh']
mov ['eax,', '[ebp+var_28]']
push ['eax']
call ['_unum_setSymbol_56']
add ['esp,', '14h']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_positive_sign']
add ['esp,', '0Ch']
add ['eax,', '[ebp+var_40]']
mov ['[ebp+var_40],', 'eax']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
call ['_unum_parseDouble_56']
add ['esp,', '14h']
fstp ['[ebp+var_1C]']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_9DB']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_9AE']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_1C]']
fstp ['qword', 'ptr', '[ecx]']
jmp ['short', 'loc_9DB']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
test ['ecx,', 'ecx']
jz ['short', 'loc_9C5']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_1C]']
fstp ['qword', 'ptr', '[ecx]']
jmp ['short', 'loc_9DB']
fld ['[ebp+var_1C]']
fstp ['[ebp+var_15C]']
fld ['[ebp+var_15C]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fstp ['dword', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_34]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '15Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN18']
db ['3', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN14_0']
dd ['0FFFFFFB4h,', '4']
dd ['offset', '$LN15_0']
dd ['0FFFFFF9Ch,', '10h']
dd ['offset', '$LN16']
dd ['0FFFFFF6Ch,', '10h']
dd ['offset', '$LN17']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_scidbl_handler	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '160h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_160]']
mov ['ecx,', '58h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_68],', '0']
mov ['[ebp+var_74],', '0']
mov ['[ebp+var_8C],', '0']
mov ['[ebp+var_98],', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_B40']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_B2C']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_160],', 'edx']
jmp ['short', 'loc_B37']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_160],', 'ecx']
mov ['edx,', '[ebp+var_160]']
mov ['[ebp+var_8],', 'edx']
push ['4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_u_locbund_getNumberFormat_56']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_u_locbund_getNumberFormat_56']
add ['esp,', '8']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_B74']
cmp ['[ebp+var_30],', '0']
jnz ['short', 'loc_B7B']
xor ['eax,', 'eax']
jmp ['loc_C84']
lea ['eax,', '[ebp+var_98]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_positive_sign']
add ['esp,', '0Ch']
add ['eax,', '[ebp+var_80]']
mov ['[ebp+var_80],', 'eax']
lea ['eax,', '[ebp+var_8C]']
push ['eax']
lea ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
call ['_unum_parseDouble_56']
add ['esp,', '14h']
fstp ['[ebp+var_40]']
lea ['eax,', '[ebp+var_98]']
push ['eax']
lea ['ecx,', '[ebp+var_68]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
call ['_unum_parseDouble_56']
add ['esp,', '14h']
fstp ['[ebp+var_50]']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[ebp+var_68]']
jle ['short', 'loc_BFB']
fld ['[ebp+var_40]']
fstp ['[ebp+var_18]']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_74],', 'eax']
jmp ['short', 'loc_C0A']
fld ['[ebp+var_50]']
fstp ['[ebp+var_18]']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '[ebp+var_68]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_74]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_C6B']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_C3E']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_18]']
fstp ['qword', 'ptr', '[ecx]']
jmp ['short', 'loc_C6B']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+9]']
test ['ecx,', 'ecx']
jz ['short', 'loc_C55']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_18]']
fstp ['qword', 'ptr', '[ecx]']
jmp ['short', 'loc_C6B']
fld ['[ebp+var_18]']
fstp ['[ebp+var_160]']
fld ['[ebp+var_160]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fstp ['dword', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '[ebp+var_80]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '160h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19_0']
dd ['offset', '$LN15_1']
dd ['0FFFFFF98h,', '4']
dd ['offset', '$LN16_0']
dd ['0FFFFFF74h,', '4']
dd ['offset', '$LN17_0']
dd ['0FFFFFF68h,', '4']
dd ['offset', '$LN18_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_integer_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '11Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_11C]']
mov ['ecx,', '47h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_44],', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_DC1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_DAD']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_11C],', 'edx']
jmp ['short', 'loc_DB8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_11C],', 'ecx']
mov ['edx,', '[ebp+var_11C]']
mov ['[ebp+var_8],', 'edx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_u_locbund_getNumberFormat_56']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_DE2']
xor ['eax,', 'eax']
jmp ['loc_EA1']
lea ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_positive_sign']
add ['esp,', '0Ch']
add ['eax,', '[ebp+var_38]']
mov ['[ebp+var_38],', 'eax']
lea ['eax,', '[ebp+var_44]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
call ['_unum_parseInt64_56']
add ['esp,', '14h']
mov ['[ebp+var_54],', 'eax']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_E76']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_E4D']
mov ['eax,', '[ebp+var_54]']
and ['eax,', '0FFFFh']
mov ['ecx,', '[ebp+var_50]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[edx],', 'ax']
jmp ['short', 'loc_E76']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_E68']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_54]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_50]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_E76']
mov ['eax,', '[ebp+var_54]']
mov ['ecx,', '[ebp+var_50]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_2C]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_38]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '11Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14_1']
dd ['offset', '$LN12_1']
dd ['0FFFFFFBCh,', '4']
dd ['offset', '$LN13_0']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_uinteger_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_integer_handler']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_percent_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '104h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_104]']
mov ['ecx,', '41h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_3C],', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_FDA']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_FC6']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_104],', 'edx']
jmp ['short', 'loc_FD1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_104],', 'ecx']
mov ['edx,', '[ebp+var_104]']
mov ['[ebp+var_8],', 'edx']
push ['3']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_u_locbund_getNumberFormat_56']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_FF8']
xor ['eax,', 'eax']
jmp ['short', 'loc_106B']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_positive_sign']
add ['esp,', '0Ch']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
call ['_unum_parseDouble_56']
add ['esp,', '14h']
fstp ['[ebp+var_18]']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1043']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_18]']
fstp ['qword', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_30]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_30]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '104h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN10_0']
dd ['offset', '$LN8_1']
dd ['0FFFFFFC4h,', '4']
dd ['offset', '$LN9_1']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_string_handler	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '144h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_144]']
mov ['ecx,', '51h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_13D],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_71],', '0']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1127']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_5C],', 'eax']
mov ['[ebp+var_50],', '0']
lea ['eax,', '[ebp+var_44]']
push ['eax']
call ['_u_getDefaultConverter_56']
add ['esp,', '4']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_44],', '0']
jle ['short', 'loc_114B']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_12FF']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_1161']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_50]']
cmp ['ecx,', '[eax]']
jge ['loc_127D']
mov ['[ebp+var_13D],', '1']
lea ['eax,', '[ebp+var_68]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ufile_getch_56']
add ['esp,', '8']
mov ['[ebp+var_71],', 'al']
movsx ['edx,', '[ebp+var_71]']
test ['edx,', 'edx']
jz ['loc_127D']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_11E9']
cmp ['[ebp+var_13D],', '0']
jnz ['short', 'loc_11A8']
push ['offset', '$LN18_1']
call ['__RTC_UninitUse']
add ['esp,', '4']
movzx ['eax,', '[ebp+var_68]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+6]']
cmp ['eax,', 'edx']
jz ['loc_127D']
cmp ['[ebp+var_13D],', '0']
jnz ['short', 'loc_11D1']
push ['offset', '$LN18_1']
call ['__RTC_UninitUse']
add ['esp,', '4']
movzx ['eax,', '[ebp+var_68]']
push ['eax']
call ['_u_isWhitespace_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['loc_127D']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_126F']
mov ['[ebp+var_13D],', '1']
lea ['eax,', '[ebp+var_68]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_1219']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '[eax]']
sub ['ecx,', '[ebp+var_50]']
mov ['[ebp+var_38],', 'ecx']
jmp ['short', 'loc_122E']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ucnv_getMaxCharSize_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
add ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'ecx']
lea ['eax,', '[ebp+var_44]']
push ['eax']
push ['1']
push ['0']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '2']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_ucnv_fromUnicode_56']
add ['esp,', '20h']
cmp ['[ebp+var_44],', '0']
jle ['short', 'loc_126F']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_u_releaseDefaultConverter_56']
add ['esp,', '4']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_12FF']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
jmp ['loc_114B']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_12DA']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_129A']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_50]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_12C9']
movsx ['eax,', '[ebp+var_71]']
test ['eax,', 'eax']
jz ['short', 'loc_12C9']
cmp ['[ebp+var_13D],', '0']
jnz ['short', 'loc_12B8']
push ['offset', '$LN18_1']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
movzx ['ecx,', '[ebp+var_68]']
push ['ecx']
call ['_u_fungetc_56']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_12DA']
mov ['eax,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_u_releaseDefaultConverter_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '[ebp+var_5C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '144h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN24']
dd ['offset', '$LN18_1']
dd ['0FFFFFFF8h,', '4']
dd ['offset', '$LN21']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN22']
dd ['0FFFFFFBCh,', '4']
dd ['offset', '$LN23']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_char_handler proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jge ['short', 'loc_13A3']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax+0Dh],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_string_handler']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_ustring_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_10D],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_41],', '0']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1440']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_145D']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax]']
jge ['loc_151F']
mov ['[ebp+var_10D],', '1']
lea ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ufile_getch_56']
add ['esp,', '8']
mov ['[ebp+var_41],', 'al']
movsx ['edx,', '[ebp+var_41]']
test ['edx,', 'edx']
jz ['loc_151F']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_14DD']
cmp ['[ebp+var_10D],', '0']
jnz ['short', 'loc_14A4']
push ['offset', '$LN14_2']
call ['__RTC_UninitUse']
add ['esp,', '4']
movzx ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+6]']
cmp ['eax,', 'edx']
jz ['short', 'loc_151F']
cmp ['[ebp+var_10D],', '0']
jnz ['short', 'loc_14C9']
push ['offset', '$LN14_2']
call ['__RTC_UninitUse']
add ['esp,', '4']
movzx ['eax,', '[ebp+var_38]']
push ['eax']
call ['_u_isWhitespace_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_151F']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1511']
cmp ['[ebp+var_10D],', '0']
jnz ['short', 'loc_14FE']
push ['offset', '$LN14_2']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', '[ebp+var_38]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '2']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_1447']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_157E']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_153C']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_156B']
movsx ['eax,', '[ebp+var_41]']
test ['eax,', 'eax']
jz ['short', 'loc_156B']
cmp ['[ebp+var_10D],', '0']
jnz ['short', 'loc_155A']
push ['offset', '$LN14_2']
call ['__RTC_UninitUse']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
movzx ['ecx,', '[ebp+var_38]']
push ['ecx']
call ['_u_fungetc_56']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Dh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_157E']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx],', 'ax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN18_2']
dd ['offset', '$LN14_2']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_uchar_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jge ['short', 'loc_1603']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax+0Dh],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_ustring_handler']
add ['esp,', '18h']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_spellout_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '110h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_110]']
mov ['ecx,', '44h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_48],', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_16D1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_16BD']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_110],', 'edx']
jmp ['short', 'loc_16C8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_110],', 'ecx']
mov ['edx,', '[ebp+var_110]']
mov ['[ebp+var_8],', 'edx']
push ['5']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_u_locbund_getNumberFormat_56']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_16EF']
xor ['eax,', 'eax']
jmp ['short', 'loc_1751']
lea ['eax,', '[ebp+var_48]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
call ['_unum_parseDouble_56']
add ['esp,', '14h']
fstp ['[ebp+var_18]']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1726']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
fld ['[ebp+var_18]']
fstp ['qword', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_30]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_3C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '110h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN10_1']
dd ['offset', '$LN8_2']
dd ['0FFFFFFB8h,', '4']
dd ['offset', '$LN9_2']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_hex_handler proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F8]']
mov ['ecx,', '3Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_1833']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_181F']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_F8],', 'edx']
jmp ['short', 'loc_182A']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_F8],', 'ecx']
mov ['edx,', '[ebp+var_F8]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['edx,', '30h']
jnz ['short', 'loc_1877']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
cmp ['edx,', '78h']
jz ['short', 'loc_185F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
cmp ['edx,', '58h']
jnz ['short', 'loc_1877']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
push ['10h']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_ufmt_uto64_56']
add ['esp,', '0Ch']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_18F9']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_18D0']
mov ['eax,', '[ebp+var_30]']
and ['eax,', '0FFFFh']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'ax']
jmp ['short', 'loc_18F9']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_18EB']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_18F9']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14_3']
dd ['offset', '$LN13_1']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_octal_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F8]']
mov ['ecx,', '3Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_19DB']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_19C7']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_F8],', 'edx']
jmp ['short', 'loc_19D2']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_F8],', 'ecx']
mov ['edx,', '[ebp+var_F8]']
mov ['[ebp+var_8],', 'edx']
push ['8']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_ufmt_uto64_56']
add ['esp,', '0Ch']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1A5D']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1A34']
mov ['eax,', '[ebp+var_30]']
and ['eax,', '0FFFFh']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'ax']
jmp ['short', 'loc_1A5D']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1A4F']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_1A5D']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN12_2']
dd ['offset', '$LN11_2']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_pointer_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0F4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_F4]']
mov ['ecx,', '3Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+6]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_u_scanf_skip_leading_ws']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufile_fill_uchar_buffer_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jz ['short', 'loc_1B3F']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_1B2B']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_F4],', 'edx']
jmp ['short', 'loc_1B36']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_F4],', 'ecx']
mov ['edx,', '[ebp+var_F4]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '8']
jle ['short', 'loc_1B4C']
mov ['[ebp+var_8],', '8']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_ufmt_utop_56']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1B75']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0F4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_3']
dd ['offset', '$LN8_3']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_scanset_handler proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '130h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_130]']
mov ['ecx,', '4Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_20],', '7FFFFFFFh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_41],', '0']
mov ['[ebp+var_4D],', '0']
push ['0FFFFFFFFh']
push ['0']
call ['_uset_open_56']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '2']
mov ['[ebp+arg_C],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jl ['short', 'loc_1C44']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
push ['0']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_uset_applyPattern_56']
add ['esp,', '14h']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_14],', '0']
jg ['loc_1DA7']
mov ['[ebp+var_2C],', '0']
cmp ['[ebp+var_20],', '0']
jle ['loc_1D89']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ufile_getch32_56']
add ['esp,', '8']
mov ['[ebp+var_41],', 'al']
movsx ['edx,', '[ebp+var_41]']
test ['edx,', 'edx']
jz ['loc_1D82']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_uset_contains_56']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_1D82']
mov ['[ebp+var_4D],', '1']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['loc_1D64']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_65],', '0']
cmp ['[ebp+var_2C],', '0FFFFh']
ja ['short', 'loc_1CF6']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_38]']
mov ['dx,', 'word', 'ptr', '[ebp+var_2C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_1D4E']
cmp ['[ebp+var_2C],', '10FFFFh']
ja ['short', 'loc_1D4A']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_20]']
jge ['short', 'loc_1D4A']
mov ['eax,', '[ebp+var_2C]']
sar ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+var_38]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+var_38]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '1']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_1D4E']
mov ['[ebp+var_65],', '1']
movsx ['eax,', '[ebp+var_65]']
test ['eax,', 'eax']
jz ['short', 'loc_1D58']
jmp ['short', 'loc_1D89']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+var_38]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '10000h']
mov ['ecx,', '0FFFFFh']
cmp ['ecx,', 'eax']
sbb ['edx,', 'edx']
add ['edx,', '2']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', 'edx']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_1D84']
jmp ['short', 'loc_1D89']
jmp ['loc_1C72']
movsx ['eax,', '[ebp+var_41]']
test ['eax,', 'eax']
jz ['short', 'loc_1DA7']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_1DA7']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
call ['_u_fungetc_56']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_uset_close_56']
add ['esp,', '4']
movsx ['eax,', '[ebp+var_4D]']
test ['eax,', 'eax']
jnz ['short', 'loc_1DC2']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1E10']
jmp ['short', 'loc_1DD5']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1DD5']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_38]']
mov ['[ecx],', 'ax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax+8]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jl ['short', 'loc_1DFD']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_130],', 'edx']
jmp ['short', 'loc_1E07']
mov ['[ebp+var_130],', '7FFFFFFFh']
mov ['eax,', '[ebp+var_130]']
sub ['eax,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '130h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN23_0']
dd ['offset', '$LN21_0']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN22_0']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_parse_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '154h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_154]']
mov ['ecx,', '55h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_3C],', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '25h']
jz ['short', 'loc_1EE0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1EE0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_fgetc_56']
add ['esp,', '4']
movzx ['ecx,', 'ax']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_1EE0']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1EA7']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '25h']
jnz ['short', 'loc_1EF5']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1EFA']
jmp ['loc_2032']
lea ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_u_scanf_parse_spec']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_C],', 'edx']
movzx ['eax,', '[ebp+var_70]']
sub ['eax,', '20h']
mov ['[ebp+var_48],', 'ax']
movzx ['eax,', '[ebp+var_48]']
cmp ['eax,', '6Ch']
jge ['loc_202D']
movzx ['eax,', '[ebp+var_48]']
mov ['ecx,', '_g_u_scanf_infos[eax*8]']
mov ['[ebp+var_80],', 'ecx']
cmp ['[ebp+var_80],', '2']
jz ['short', 'loc_1F5F']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_feof_56']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1F5F']
jmp ['loc_2032']
jmp ['short', 'loc_1FB7']
movsx ['eax,', '[ebp+var_6C]']
test ['eax,', 'eax']
jz ['short', 'loc_1F70']
mov ['[ebp+var_58],', '0']
jmp ['short', 'loc_1FB7']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_154],', 'eax']
cmp ['[ebp+var_154],', '2']
jz ['short', 'loc_1F96']
cmp ['[ebp+var_154],', '2']
jle ['short', 'loc_1FB0']
cmp ['[ebp+var_154],', '0Ah']
jle ['short', 'loc_1F9C']
jmp ['short', 'loc_1FB0']
mov ['eax,', '[ebp+var_3C]']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '4']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx-4]']
mov ['[ebp+var_58],', 'edx']
jmp ['short', 'loc_1FB7']
mov ['[ebp+var_58],', '0']
movzx ['eax,', '[ebp+var_48]']
mov ['ecx,', 'dword_4[eax*8]']
mov ['[ebp+var_8C],', 'ecx']
cmp ['[ebp+var_8C],', '0']
jz ['short', 'loc_202D']
mov ['[ebp+var_18],', '1']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_58]']
push ['eax']
lea ['ecx,', '[ebp+var_74]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['[ebp+var_8C]']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '[ebp+var_3C]']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_30],', '0']
jge ['short', 'loc_2017']
mov ['[ebp+var_24],', '0FFFFFFFFh']
jmp ['short', 'loc_2032']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+var_30]']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax*2-2]']
mov ['[ebp+var_C],', 'edx']
jmp ['loc_1EA7']
mov ['eax,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '154h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN25_0']
dd ['offset', '$LN21_1']
dd ['0FFFFFFD0h,', '4']
dd ['offset', '$LN22_1']
dd ['0FFFFFFA8h,', '8']
dd ['offset', '$LN23_1']
dd ['0FFFFFF8Ch,', '14h']
dd ['offset', '$LN24_1']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_u_scanf_parse_spec proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0ECh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_EC]']
mov ['ecx,', '3Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_20]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx+4],', 'ax']
mov ['eax,', '20h']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx+6],', 'ax']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+8],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+9],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+0Ah],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+0Bh],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+0Ch],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+0Dh],', '1']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '30h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '31h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '32h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '33h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '34h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '35h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '36h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '37h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '38h']
jz ['short', 'loc_21AF']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '39h']
jnz ['loc_2306']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '30h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '31h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '32h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '33h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '34h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '35h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '36h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '37h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '38h']
jz ['short', 'loc_2227']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '39h']
jnz ['loc_22E0']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
sub ['ecx,', '30h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '30h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '31h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '32h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '33h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '34h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '35h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '36h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '37h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '38h']
jz ['short', 'loc_22AD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '39h']
jnz ['short', 'loc_22E0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+10h]']
imul ['ecx,', '0Ah']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
lea ['ecx,', '[ecx+eax-30h]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_223F']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '24h']
jz ['short', 'loc_22FD']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_2306']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '2Ah']
jz ['short', 'loc_2320']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '28h']
jnz ['loc_244A']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_E8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_EC],', 'eax']
cmp ['[ebp+var_EC],', '28h']
jz ['short', 'loc_2364']
cmp ['[ebp+var_EC],', '2Ah']
jz ['short', 'loc_2358']
jmp ['loc_2445']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+8],', '1']
jmp ['loc_2445']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax]']
mov ['word', 'ptr', '[ebp+var_E8+2],', 'cx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_E8+2]']
push ['eax']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx+6],', 'ax']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax]']
mov ['word', 'ptr', '[ebp+var_E8+2],', 'cx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_E8+2]']
push ['eax']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'word', 'ptr', '[ecx+6]']
shl ['edx,', '4']
add ['edx,', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[eax+6],', 'dx']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax]']
mov ['word', 'ptr', '[ebp+var_E8+2],', 'cx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_E8+2]']
push ['eax']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'word', 'ptr', '[ecx+6]']
shl ['edx,', '4']
add ['edx,', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[eax+6],', 'dx']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax]']
mov ['word', 'ptr', '[ebp+var_E8+2],', 'cx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_E8+2]']
push ['eax']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'word', 'ptr', '[ecx+6]']
shl ['edx,', '4']
add ['edx,', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[eax+6],', 'dx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_2306']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '30h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '31h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '32h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '33h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '34h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '35h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '36h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '37h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '38h']
jz ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '39h']
jnz ['loc_2570']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
sub ['ecx,', '30h']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '30h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '31h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '32h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '33h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '34h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '35h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '36h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '37h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '38h']
jz ['short', 'loc_2541']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '39h']
jnz ['short', 'loc_2570']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax]']
imul ['ecx,', '0Ah']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx]']
lea ['ecx,', '[ecx+eax-30h]']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_24D3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '68h']
jz ['short', 'loc_2591']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '6Ch']
jz ['short', 'loc_2591']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '4Ch']
jnz ['short', 'loc_2605']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_E8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_EC],', 'eax']
cmp ['[ebp+var_EC],', '4Ch']
jz ['short', 'loc_25FE']
cmp ['[ebp+var_EC],', '68h']
jz ['short', 'loc_25CF']
cmp ['[ebp+var_EC],', '6Ch']
jz ['short', 'loc_25D8']
jmp ['short', 'loc_2605']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+0Ah],', '1']
jmp ['short', 'loc_2605']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '6Ch']
jnz ['short', 'loc_25F5']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+0Ch],', '1']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_25FC']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+0Bh],', '1']
jmp ['short', 'loc_2605']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+9],', '1']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[ecx]']
mov ['[eax+4],', 'dx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+arg_0]']
sar ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0ECh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['_u_fgetc_56:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_unum_parseDouble_56:near']
extrn ['_u_locbund_getNumberFormat_56:near']
extrn ['_ufile_fill_uchar_buffer_56:near']
extrn ['__fltused:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_u_fungetc_56:near']
extrn ['_u_isWhitespace_56:near']
extrn ['_ufile_getch_56:near']
extrn ['_unum_getSymbol_56:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['_unum_setSymbol_56:near']
extrn ['_u_strToUpper_56:near']
extrn ['_u_strToLower_56:near']
extrn ['_unum_parseInt64_56:near']
extrn ['_u_releaseDefaultConverter_56:near']
extrn ['_ucnv_fromUnicode_56:near']
extrn ['_ucnv_getMaxCharSize_56:near']
extrn ['_u_getDefaultConverter_56:near']
extrn ['__RTC_UninitUse:near']
extrn ['_ufmt_uto64_56:near']
extrn ['_ufmt_utop_56:near']
extrn ['_uset_close_56:near']
extrn ['_uset_contains_56:near']
extrn ['_ufile_getch32_56:near']
extrn ['_uset_applyPattern_56:near']
extrn ['_uset_open_56:near']
extrn ['_u_feof_56:near']
extrn ['_ufmt_digitvalue_56:near']
end
