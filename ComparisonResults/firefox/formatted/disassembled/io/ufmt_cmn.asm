endp
_ufmt_digitvalue_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C4]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '30h']
jl ['short', 'loc_30']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '39h']
jle ['short', 'loc_54']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '61h']
jl ['short', 'loc_42']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '7Ah']
jle ['short', 'loc_54']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '41h']
jl ['short', 'loc_95']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '5Ah']
jg ['short', 'loc_95']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '41h']
jl ['short', 'loc_7A']
movzx ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
cmp ['ecx,', '61h']
setl ['dl']
sub ['edx,', '1']
and ['edx,', '20h']
add ['edx,', '7']
mov ['[ebp+var_C4],', 'edx']
jmp ['short', 'loc_84']
mov ['[ebp+var_C4],', '0']
movzx ['eax,', '[ebp+arg_0]']
sub ['eax,', '30h']
sub ['eax,', '[ebp+var_C4]']
jmp ['short', 'loc_98']
jmp ['short', 'loc_98']
or ['eax,', '0FFFFFFFFh']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ufmt_isdigit_56 proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '34h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_ED']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_ED']
mov ['[ebp+var_CD],', '1']
jmp ['short', 'loc_F4']
mov ['[ebp+var_CD],', '0']
mov ['al,', '[ebp+var_CD]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ufmt_64tou_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
movzx ['eax,', '[ebp+arg_10]']
cdq
push ['edx']
push ['eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['__aullrem']
mov ['[ebp+var_14],', 'eax']
movzx ['eax,', '[ebp+arg_10]']
cdq
push ['edx']
push ['eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['__aulldiv']
mov ['[ebp+arg_8],', 'eax']
mov ['[ebp+arg_C],', 'edx']
movsx ['eax,', '[ebp+arg_14]']
test ['eax,', 'eax']
jz ['short', 'loc_19C']
cmp ['[ebp+var_14],', '9']
ja ['short', 'loc_182']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '30h']
mov ['[ebp+var_100],', 'ecx']
jmp ['short', 'loc_18E']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '57h']
mov ['[ebp+var_100],', 'edx']
mov ['eax,', '[ebp+var_100]']
mov ['[ebp+var_104],', 'eax']
jmp ['short', 'loc_1C8']
cmp ['[ebp+var_14],', '9']
ja ['short', 'loc_1B0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '30h']
mov ['[ebp+var_108],', 'ecx']
jmp ['short', 'loc_1BC']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '37h']
mov ['[ebp+var_108],', 'edx']
mov ['eax,', '[ebp+var_108]']
mov ['[ebp+var_104],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', 'word', 'ptr', '[ebp+var_104]']
mov ['[edx+ecx*2],', 'ax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
or ['eax,', '[ebp+arg_C]']
jnz ['loc_135']
cmp ['[ebp+arg_18],', '0FFFFFFFFh']
jz ['short', 'loc_228']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_18]']
jge ['short', 'loc_228']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_18]']
jge ['short', 'loc_228']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_228']
mov ['eax,', '30h']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1FC']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '2']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+var_2C]']
jnb ['short', 'loc_276']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', '[eax]']
mov ['[ebp+var_38],', 'cx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_2C]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_2C]']
mov ['cx,', '[ebp+var_38]']
mov ['[eax],', 'cx']
jmp ['short', 'loc_23A']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ufmt_ptou_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10Ch']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_10C]']
mov ['ecx,', '43h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
lea ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_8],', '3']
jmp ['short', 'loc_2D1']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['loc_40B']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_29],', 'cl']
movzx ['eax,', '[ebp+var_29]']
sar ['eax,', '4']
mov ['[ebp+var_38],', 'ax']
movzx ['eax,', '[ebp+var_29]']
and ['eax,', '0Fh']
mov ['[ebp+var_44],', 'ax']
movsx ['eax,', '[ebp+arg_C]']
test ['eax,', 'eax']
jz ['loc_388']
movzx ['eax,', '[ebp+var_38]']
cmp ['eax,', '9']
jg ['short', 'loc_320']
movzx ['ecx,', '[ebp+var_38]']
add ['ecx,', '30h']
mov ['[ebp+var_10C],', 'ecx']
jmp ['short', 'loc_32D']
movzx ['edx,', '[ebp+var_38]']
add ['edx,', '57h']
mov ['[ebp+var_10C],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_10C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '9']
jg ['short', 'loc_35F']
movzx ['ecx,', '[ebp+var_44]']
add ['ecx,', '30h']
mov ['[ebp+var_10C],', 'ecx']
jmp ['short', 'loc_36C']
movzx ['edx,', '[ebp+var_44]']
add ['edx,', '57h']
mov ['[ebp+var_10C],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_10C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_406']
movzx ['eax,', '[ebp+var_38]']
cmp ['eax,', '9']
jg ['short', 'loc_3A0']
movzx ['ecx,', '[ebp+var_38]']
add ['ecx,', '30h']
mov ['[ebp+var_10C],', 'ecx']
jmp ['short', 'loc_3AD']
movzx ['edx,', '[ebp+var_38]']
add ['edx,', '37h']
mov ['[ebp+var_10C],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_10C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
movzx ['eax,', '[ebp+var_44]']
cmp ['eax,', '9']
jg ['short', 'loc_3DF']
movzx ['ecx,', '[ebp+var_44]']
add ['ecx,', '30h']
mov ['[ebp+var_10C],', 'ecx']
jmp ['short', 'loc_3EC']
movzx ['edx,', '[ebp+var_44]']
add ['edx,', '37h']
mov ['[ebp+var_10C],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_10C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['loc_2C8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ufmt_uto64_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0ECh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_EC]']
mov ['ecx,', '3Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_20],', '0']
movsx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
call ['_ufmt_isdigit_56']
add ['esp,', '8']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_4D8']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_4D8']
movsx ['eax,', '[ebp+arg_8]']
cdq
push ['edx']
push ['eax']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['__allmul']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_EA],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', '[ebp+var_EA]']
push ['eax']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
cdq
add ['eax,', '[ebp+var_24]']
adc ['edx,', '[ebp+var_20]']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_45D']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_24]']
mov ['edx,', '[ebp+var_20]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0ECh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ufmt_utop_56	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
cmp ['edx,', '30h']
jz ['short', 'loc_558']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
push ['edx']
call ['_u_isspace_56']
add ['esp,', '4']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_56C']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_52F']
push ['10h']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
push ['edx']
call ['_ufmt_isdigit_56']
add ['esp,', '8']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_59D']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_59D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_56C']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+var_2C]']
cmp ['eax,', '8']
jle ['short', 'loc_5B1']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '8']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_20],', '1']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_2C]']
jl ['short', 'loc_633']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
push ['edx']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
mov ['[ebp+var_41],', 'al']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_2C]']
jle ['short', 'loc_61E']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
push ['eax']
call ['_ufmt_digitvalue_56']
add ['esp,', '4']
shl ['eax,', '4']
movzx ['ecx,', '[ebp+var_41]']
add ['ecx,', 'eax']
mov ['[ebp+var_41],', 'cl']
mov ['eax,', '[ebp+var_14]']
mov ['cl,', '[ebp+var_41]']
mov ['byte', 'ptr', '[ebp+eax+var_38],', 'cl']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_5C7']
mov ['eax,', '[ebp+var_38]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13']
dd ['offset', '$LN12']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_ufmt_defaultCPToUnicode_56 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['_u_getDefaultConverter_56']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_14],', '0']
jg ['short', 'loc_6B8']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_6BC']
xor ['eax,', 'eax']
jmp ['short', 'loc_728']
cmp ['[ebp+arg_4],', '0']
jg ['short', 'loc_6D4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_719']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+var_14]']
push ['eax']
push ['1']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx-1]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx*2]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_ucnv_toUnicode_56']
add ['esp,', '20h']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'ax']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_u_releaseDefaultConverter_56']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN9']
dd ['offset', '$LN7']
dd ['0FFFFFFECh,', '4']
dd ['offset', '$LN8']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__aulldiv:near']
extrn ['__aullrem:near']
extrn ['__allmul:near']
extrn ['_u_isspace_56:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_u_releaseDefaultConverter_56:near']
extrn ['_ucnv_toUnicode_56:near']
extrn ['_strlen:near']
extrn ['_u_getDefaultConverter_56:near']
end
