endp
_usArrayToRLEString proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '108h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_108]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_8]']
jnb ['loc_12B']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '10h']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '2']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_8]']
jnb ['loc_120']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['[ebp+var_20],', 'cx']
mov ['[ebp+var_2C],', '1']
mov ['[ebp+var_38],', '1']
mov ['eax,', '[ebp+arg_8]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '2']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_97']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_FE']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_44],', 'dx']
movzx ['eax,', '[ebp+var_44]']
movzx ['ecx,', '[ebp+var_20]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_CD']
cmp ['[ebp+var_2C],', '0FFFFh']
jge ['short', 'loc_CD']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_FC']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
movzx ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_encodeRunShort']
add ['esp,', '14h']
mov ['[ebp+arg_8],', 'eax']
mov ['ax,', '[ebp+var_44]']
mov ['[ebp+var_20],', 'ax']
mov ['[ebp+var_2C],', '1']
jmp ['short', 'loc_8E']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
movzx ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_encodeRunShort']
add ['esp,', '14h']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_129']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_134']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_14]']
sar ['eax,', '1']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '108h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_encodeRunShort	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_C],', '4']
jge ['loc_21B']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_199']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_216']
movzx ['eax,', '[ebp+arg_8]']
movzx ['ecx,', '_ESCAPE']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_1E2']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_1D0']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '_ESCAPE']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_1D9']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_1FF']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[ebp+arg_8]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_208']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_190']
jmp ['loc_330']
movzx ['eax,', '_ESCAPE']
cmp ['[ebp+arg_C],', 'eax']
jnz ['short', 'loc_2A0']
movzx ['eax,', '[ebp+arg_8]']
movzx ['ecx,', '_ESCAPE']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_268']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_256']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '_ESCAPE']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_25F']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_285']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[ebp+arg_8]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_28E']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '1']
mov ['[ebp+arg_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_2C0']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '_ESCAPE']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_2C9']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_2EF']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_C]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_2F8']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_31E']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[ebp+arg_8]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_327']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_byteArrayToRLEString proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_14]']
jnb ['loc_492']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '10h']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '2']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_14]']
jnb ['loc_487']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1D],', 'cl']
mov ['[ebp+var_2C],', '1']
mov ['[ebp+var_38],', '0']
xor ['eax,', 'eax']
mov ['[ebp+var_37],', 'al']
mov ['[ebp+var_44],', '1']
mov ['eax,', '[ebp+arg_8]']
mov ['cx,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '2']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_3D6']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+arg_4]']
jge ['short', 'loc_43C']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_44]']
mov ['cl,', '[eax]']
mov ['[ebp+var_4D],', 'cl']
movzx ['eax,', '[ebp+var_4D]']
movzx ['ecx,', '[ebp+var_1D]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_409']
cmp ['[ebp+var_2C],', '0FFh']
jge ['short', 'loc_409']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_43A']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
movzx ['eax,', '[ebp+var_1D]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_encodeRunByte']
add ['esp,', '18h']
mov ['[ebp+arg_8],', 'eax']
mov ['al,', '[ebp+var_4D]']
mov ['[ebp+var_1D],', 'al']
mov ['[ebp+var_2C],', '1']
jmp ['short', 'loc_3CD']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
movzx ['eax,', '[ebp+var_1D]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_encodeRunByte']
add ['esp,', '18h']
mov ['[ebp+arg_8],', 'eax']
movzx ['eax,', '[ebp+var_38]']
test ['eax,', 'eax']
jz ['short', 'loc_485']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_490']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
jmp ['short', 'loc_49B']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_8]']
sar ['eax,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN14']
dd ['offset', '$LN13']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_appendEncodedByte proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_510']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_514']
xor ['eax,', 'eax']
jmp ['short', 'loc_57D']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_56B']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
shl ['ecx,', '8']
movzx ['edx,', '[ebp+arg_8]']
and ['edx,', '0FFh']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'cx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_555']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[ebp+var_8]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_55E']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+arg_C]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_57D']
jmp ['short', 'loc_57D']
mov ['eax,', '[ebp+arg_C]']
mov ['byte', 'ptr', '[eax],', '1']
mov ['eax,', '[ebp+arg_C]']
mov ['cl,', '[ebp+arg_8]']
mov ['[eax+1],', 'cl']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_encodeRunByte	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_5B0']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_5B7']
xor ['eax,', 'eax']
jmp ['loc_6FD']
cmp ['[ebp+arg_C],', '4']
jge ['short', 'loc_630']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_5CF']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_62B']
movzx ['eax,', '[ebp+arg_8]']
movzx ['ecx,', '_ESCAPE_BYTE']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_609']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
movzx ['edx,', '_ESCAPE_BYTE']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
movzx ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_5C6']
jmp ['loc_6FA']
movzx ['eax,', '_ESCAPE_BYTE']
cmp ['[ebp+arg_C],', 'eax']
jnz ['short', 'loc_697']
movzx ['eax,', '[ebp+arg_8]']
movzx ['ecx,', '_ESCAPE_BYTE']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_66E']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
movzx ['edx,', '_ESCAPE_BYTE']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
movzx ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '1']
mov ['[ebp+arg_C],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
movzx ['edx,', '_ESCAPE_BYTE']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
movzx ['edx,', 'byte', 'ptr', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
movzx ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_appendEncodedByte']
add ['esp,', '14h']
mov ['[ebp+arg_0],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_rleStringToUCharArray proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_20],', '2']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_755']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_75C']
xor ['eax,', 'eax']
jmp ['loc_8B7']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['short', 'loc_771']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+arg_4],', '2']
jg ['short', 'loc_781']
mov ['eax,', '2']
jmp ['loc_8B7']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
or ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_7A4']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_8B7']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+var_8]']
jge ['short', 'loc_7BD']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_8B7']
jmp ['short', 'loc_7C8']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_4]']
jge ['loc_8A3']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_2C],', 'dx']
movzx ['eax,', '[ebp+var_2C]']
movzx ['ecx,', '_ESCAPE']
cmp ['eax,', 'ecx']
jnz ['loc_887']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[edx+ecx*2]']
mov ['[ebp+var_2C],', 'ax']
movzx ['eax,', '[ebp+var_2C]']
movzx ['ecx,', '_ESCAPE']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_834']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
mov ['dx,', '[ebp+var_2C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_885']
movzx ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[edx+ecx*2]']
mov ['[ebp+var_44],', 'ax']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_864']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_885']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
mov ['dx,', '[ebp+var_44]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_85B']
jmp ['short', 'loc_89E']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
mov ['dx,', '[ebp+var_2C]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
jmp ['loc_7BF']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_8]']
jz ['short', 'loc_8B4']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_rleStringToByteArray proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '130h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_130]']
mov ['ecx,', '4Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_11],', '1']
xor ['eax,', 'eax']
mov ['[ebp+var_20],', 'ax']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_38],', '0']
mov ['[ebp+var_44],', '2']
mov ['[ebp+var_50],', '0']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_925']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_92C']
xor ['eax,', 'eax']
jmp ['loc_AF1']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['short', 'loc_941']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_u_strlen_56']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+arg_4],', '2']
jg ['short', 'loc_951']
mov ['eax,', '2']
jmp ['loc_AF1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
or ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_974']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_AF1']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+var_8]']
jge ['short', 'loc_98D']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_AF1']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+arg_C]']
jge ['loc_AC5']
movsx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jz ['short', 'loc_9C8']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*2]']
mov ['[ebp+var_20],', 'dx']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
movzx ['eax,', '[ebp+var_20]']
sar ['eax,', '8']
mov ['[ebp+var_59],', 'al']
mov ['[ebp+var_11],', '0']
jmp ['short', 'loc_9D8']
movzx ['eax,', '[ebp+var_20]']
and ['eax,', '0FFh']
mov ['[ebp+var_59],', 'al']
mov ['[ebp+var_11],', '1']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_130],', 'eax']
cmp ['[ebp+var_130],', '0']
jz ['short', 'loc_A01']
cmp ['[ebp+var_130],', '1']
jz ['short', 'loc_A32']
cmp ['[ebp+var_130],', '2']
jz ['short', 'loc_A71']
jmp ['loc_AC0']
movzx ['eax,', '[ebp+var_59]']
movzx ['ecx,', '_ESCAPE_BYTE']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_A19']
mov ['[ebp+var_2C],', '1']
jmp ['short', 'loc_A2D']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_50]']
mov ['cl,', '[ebp+var_59]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
jmp ['loc_AC0']
movzx ['eax,', '[ebp+var_59]']
movzx ['ecx,', '_ESCAPE_BYTE']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_A61']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_50]']
mov ['cl,', '_ESCAPE_BYTE']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_A6F']
movzx ['eax,', '[ebp+var_59]']
mov ['[ebp+var_38],', 'eax']
mov ['[ebp+var_2C],', '2']
jmp ['short', 'loc_AC0']
mov ['[ebp+var_68],', '0']
jmp ['short', 'loc_A83']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_38]']
jge ['short', 'loc_AB9']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_AA9']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_50]']
mov ['cl,', '[ebp+var_59]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
jmp ['short', 'loc_AB7']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_50]']
jmp ['short', 'loc_AF1']
jmp ['short', 'loc_A7A']
mov ['[ebp+var_2C],', '0']
jmp ['loc_98D']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_AD8']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '5']
xor ['eax,', 'eax']
jmp ['short', 'loc_AF1']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_AEE']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '5']
mov ['eax,', '[ebp+var_50]']
jmp ['short', 'loc_AF1']
mov ['eax,', '[ebp+var_50]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '130h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['_u_strlen_56:near']
end
