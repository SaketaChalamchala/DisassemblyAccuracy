endp
_get_dirname	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
push ['5Ch']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strrchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_82']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+arg_4]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strncpy']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+eax],', '0']
jmp ['short', 'loc_88']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_get_basename	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
push ['5Ch']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strrchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_FA']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_strcpy']
add ['esp,', '8']
jmp ['short', 'loc_10A']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_strcpy']
add ['esp,', '8']
mov ['esi,', 'esp']
push ['2Eh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strrchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_131']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax],', '0']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_itostr		proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '128h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_128]']
mov ['ecx,', '4Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_18],', '30h']
mov ['[ebp+var_17],', '31h']
mov ['[ebp+var_16],', '32h']
mov ['[ebp+var_15],', '33h']
mov ['[ebp+var_14],', '34h']
mov ['[ebp+var_13],', '35h']
mov ['[ebp+var_12],', '36h']
mov ['[ebp+var_11],', '37h']
mov ['[ebp+var_10],', '38h']
mov ['[ebp+var_F],', '39h']
mov ['[ebp+var_E],', '61h']
mov ['[ebp+var_D],', '62h']
mov ['[ebp+var_C],', '63h']
mov ['[ebp+var_B],', '64h']
mov ['[ebp+var_A],', '65h']
mov ['[ebp+var_9],', '66h']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_30],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_1D2']
mov ['eax,', '[ebp+arg_4]']
neg ['eax']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_48]']
mov ['dl,', '[ebp+ecx+var_18]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+arg_4]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1D2']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_222']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax],', '30h']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
jmp ['short', 'loc_206']
cmp ['[ebp+var_3C],', '0']
jge ['short', 'loc_23A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax],', '2Dh']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
cmp ['[ebp+var_24],', '0Ah']
jge ['short', 'loc_249']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_24]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+var_24]']
jl ['short', 'loc_25C']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_128],', 'ecx']
jmp ['short', 'loc_265']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_128],', 'edx']
mov ['eax,', '[ebp+var_128]']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_54],', '0']
jmp ['short', 'loc_280']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_30]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
cmp ['[ebp+var_54],', 'eax']
jge ['short', 'loc_2C3']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '1']
sub ['eax,', '[ebp+var_54]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+eax]']
mov ['[ebp+var_5D],', 'dl']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '1']
sub ['eax,', '[ebp+var_54]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ebp+arg_0]']
mov ['cl,', '[ecx]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_54]']
mov ['cl,', '[ebp+var_5D]']
mov ['[eax],', 'cl']
jmp ['short', 'loc_277']
mov ['eax,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN17']
dd ['offset', '$LN16']
extrn ['__imp__strncpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['__imp__strrchr:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_strcpy:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
end
