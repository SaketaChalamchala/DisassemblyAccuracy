endp
_tt_glyphzone_done proc	near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['loc_3677']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_35A5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_35C6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_35E7']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_3608']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_3629']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ah],', 'cx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+6],', 'ax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_tt_glyphzone_new proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['24h']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx],', 'edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
movzx ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
push ['8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+0Ch],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['loc_3782']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
push ['8']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+10h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3782']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
movzx ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
push ['8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+14h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3782']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+18h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3782']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
movsx ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['0']
push ['2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+1Ch],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3790']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_tt_glyphzone_done']
add ['esp,', '4']
jmp ['short', 'loc_37A6']
mov ['eax,', '[ebp+Dst]']
mov ['cx,', '[ebp+arg_4]']
mov ['[eax+4],', 'cx']
mov ['edx,', '[ebp+Dst]']
mov ['ax,', '[ebp+arg_8]']
mov ['[edx+6],', 'ax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7']
dd ['offset', '$LN6']
align ['8']
endp
_tt_face_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_3824']
push ['offset', '$SG10613']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_3806']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+60h]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
push ['offset', '$SG10615']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Get_Module_Interface']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_387A']
push ['offset', '$SG10617']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG10618']
push ['20Eh']
push ['0Bh']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Bh']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$29']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_3896']
jmp ['$Exit$29']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+68h]']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_38D5']
jmp ['$Exit$29']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax+94h],', '(offset', 'loc_FFFF+1)']
jz ['short', 'loc_3929']
mov ['ecx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[ecx+94h],', '20000h']
jz ['short', 'loc_3929']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+94h],', '74727565h']
jz ['short', 'loc_3929']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_3920']
push ['offset', '$SG10633']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_3902']
jmp ['$Bad_Format$30']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
or ['ecx,', '800h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_3948']
xor ['eax,', 'eax']
jmp ['loc_3AD2']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_397E']
jmp ['$Exit$29']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_tt_check_trickyness']
add ['esp,', '4']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_39A3']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
or ['ecx,', '2000h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_tt_face_load_hdmx']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_39C1']
jmp ['$Exit$29']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
and ['eax,', '1']
jz ['loc_3AA5']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+80h]']
cmp ['dword', 'ptr', '[edx+30h],', '0']
jnz ['short', 'loc_39F2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_tt_face_load_loca']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3A0B']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_tt_face_load_cvt']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3A24']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_tt_face_load_fpgm']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3A3D']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_tt_face_load_prep']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+80h]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jnz ['short', 'loc_3AA5']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+1Ch],', '0']
jz ['short', 'loc_3AA5']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+2BCh],', '0']
jz ['short', 'loc_3AA5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_tt_check_single_notdef']
add ['esp,', '4']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_3AA5']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_3A92']
push ['offset', '$SG10649']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_3A74']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
and ['eax,', '0FFFFFFFEh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_TT_Init_Glyph_Loading']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_3AD2']
push ['offset', '$SG10650']
push ['294h']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
jmp ['short', '$Exit$29']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_tt_face_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3B11']
jmp ['loc_3C2F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+214h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+294h],', '0']
jz ['short', 'loc_3B5C']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+290h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+294h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_3B7A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_tt_face_done_loca']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_tt_face_free_hdmx']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+288h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+288h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_3B92']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+284h],', '0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '278h']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Stream_ReleaseFrame']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '280h']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Stream_ReleaseFrame']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+274h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+27Ch],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+2A4h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_tt_done_blend']
add ['esp,', '8']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+2A4h],', '0']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_tt_size_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+12Ch],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+130h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax+6Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+70h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_tt_size_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_tt_size_done_bytecode']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+6Ch],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_tt_size_run_fpgm proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+124h]']
test ['eax,', 'eax']
jz ['short', 'loc_3D27']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+128h]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_3D33']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+60h]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3D5A']
push ['offset', '$SG10684']
push ['2F9h']
push ['99h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '99h']
jmp ['loc_3F01']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_TT_Load_Context']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_3D7F']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_3F01']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+1ACh],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+1DCh],', '40h']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+1E0h],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+1E4h],', '0']
mov ['edx,', '[ebp+var_8]']
mov ['byte', 'ptr', '[edx+1E8h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+234h],', '4000h']
mov ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ebp+arg_4]']
mov ['[ecx+231h],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '0D8h']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '0F4h']
mov ['[ebp+var_14],', 'ecx']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[eax],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+2],', 'cx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+8],', '0']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+8],', 'dx']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[edx+0Ch],', '(offset', 'loc_FFFF+1)']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+274h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+278h]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_TT_Set_CodeRange']
add ['esp,', '10h']
push ['2']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_TT_Clear_CodeRange']
add ['esp,', '8']
push ['3']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_TT_Clear_CodeRange']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+274h],', '0']
jbe ['short', 'loc_3ED5']
push ['0']
push ['1']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_TT_Goto_CodeRange']
add ['esp,', '0Ch']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_3EB1']
push ['offset', '$SG10693']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_3E93']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28Ch]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_3EDC']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+12Ch],', 'ecx']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_3EFE']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_TT_Save_Context']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_tt_size_run_prep proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
push ['edi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+124h]']
test ['eax,', 'eax']
jz ['short', 'loc_3F59']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+128h]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_3F65']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+60h]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3F8C']
push ['offset', '$SG10710']
push ['357h']
push ['99h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '99h']
jmp ['loc_4168']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_TT_Load_Context']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_3FB1']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_4168']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+1ACh],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+var_8]']
mov ['byte', 'ptr', '[edx+1E8h],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+231h],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+27Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+280h]']
push ['edx']
push ['2']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_TT_Set_CodeRange']
add ['esp,', '10h']
push ['3']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_TT_Clear_CodeRange']
add ['esp,', '8']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+27Ch],', '0']
jbe ['short', 'loc_407A']
push ['0']
push ['2']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_TT_Goto_CodeRange']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+124h]']
test ['edx,', 'edx']
jnz ['short', 'loc_4078']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_4056']
push ['offset', '$SG10718']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_4038']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28Ch]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_4081']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+130h],', 'ecx']
mov ['edx,', '4000h']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+122h],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+124h],', 'cx']
mov ['eax,', '4000h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+126h],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+128h],', 'dx']
mov ['ecx,', '4000h']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+12Ah],', 'cx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+12Ch],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+11Ch],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+11Eh],', 'cx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+120h],', 'ax']
mov ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+158h],', 'dx']
mov ['ecx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+15Ah],', 'cx']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+15Ch],', 'ax']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+130h],', '1']
mov ['esi,', '[ebp+var_8]']
add ['esi,', '11Ch']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '0ACh']
mov ['ecx,', '11h']
rep ['movsd']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_TT_Save_Context']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
pop ['edi']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_tt_size_ready_bytecode	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
push ['edi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+12Ch],', '0']
jge ['short', 'loc_41BC']
movzx ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_tt_size_init_bytecode']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_41CE']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+12Ch],', '0']
jz ['short', 'loc_41D3']
jmp ['$Exit$16']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+130h],', '0']
jge ['$Exit$16']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_41FD']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[edx+0F0h]']
jnb ['short', 'loc_423C']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+288h]']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0F4h]']
mov ['ecx,', '[ebp+var_8]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_41F4']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_424E']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+108h]']
cmp ['[ebp+var_8],', 'ecx']
jnb ['short', 'loc_42AD']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10Ch]']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+ecx*8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10Ch]']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+ecx*8+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+110h]']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+ecx*8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+110h]']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+ecx*8+4],', '0']
jmp ['short', 'loc_4245']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_42BF']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+0F8h]']
cmp ['[ebp+var_8],', 'ecx']
jnb ['short', 'loc_42E3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0FCh]']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+ecx*4],', '0']
jmp ['short', 'loc_42B6']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '0ACh']
mov ['ecx,', '11h']
mov ['esi,', 'offset', '_tt_default_graphics_state']
rep ['movsd']
movzx ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_tt_size_run_prep']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['edi']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_tt_size_reset	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
push ['edi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+6Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2Ch']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '0Ch']
mov ['ecx,', '7']
mov ['edi,', '[ebp+var_C]']
rep ['movsd']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['edx,', '1']
jl ['short', 'loc_438B']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
cmp ['ecx,', '1']
jge ['short', 'loc_43AC']
push ['offset', '$SG10827']
push ['4A3h']
push ['97h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '97h']
jmp ['loc_453D']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+0B0h]']
and ['eax,', '8']
jz ['loc_448C']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+44h]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
shl ['ecx,', '6']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+44h]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
shl ['eax,', '6']
push ['eax']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+46h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+48h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+4Ah]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+14h],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+4Ch]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+18h],', 'eax']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
cmp ['eax,', 'edx']
jl ['short', 'loc_44DF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
mov ['[eax+58h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['dx,', '[ecx]']
mov ['[eax+50h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+48h],', '(offset', 'loc_FFFF+1)']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4Ch],', 'eax']
jmp ['short', 'loc_4520']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+8]']
mov ['[eax+58h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['dx,', '[ecx+2]']
mov ['[eax+50h],', 'dx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx]']
push ['eax']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+48h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4Ch],', '(offset', 'loc_FFFF+1)']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+130h],', '0FFFFFFFFh']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_453A']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+6Ch],', '1']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_tt_driver_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_TT_New_Context']
add ['esp,', '4']
test ['eax,', 'eax']
jnz ['short', 'loc_4597']
push ['offset', '$SG10846']
push ['4F0h']
push ['99h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '99h']
jmp ['short', 'loc_45A3']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+44h],', '23h']
xor ['eax,', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_tt_driver_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+1Ch],', '0']
jz ['short', 'loc_45EB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
push ['eax']
call ['_TT_Done_Context']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_tt_slot_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_GlyphLoader_CreateExtra']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_TT_Goto_CodeRange proc	near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '1']
jl ['short', 'loc_463F']
cmp ['[ebp+arg_4],', '3']
jle ['short', 'loc_4656']
push ['offset', '$SG10924']
push ['122h']
push ['offset', '$SG10925']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_4633']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*8+1B4h]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_4689']
push ['offset', '$SG10931']
push ['126h']
push ['offset', '$SG10932']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_466A']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+4]']
jbe ['short', 'loc_46AF']
push ['offset', '$SG10938']
push ['12Ch']
push ['offset', '$SG10939']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_468D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[eax+164h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+16Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+168h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+160h],', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_TT_Set_CodeRange proc near		
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_4],', '1']
jl ['short', 'loc_4707']
cmp ['[ebp+arg_4],', '3']
jle ['short', 'loc_471E']
push ['offset', '$SG10954']
push ['14Dh']
push ['offset', '$SG10955']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_46FB']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+ecx*8+1B4h],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_C]']
mov ['[edx+ecx*8+1B8h],', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_TT_Clear_CodeRange proc near		
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_4],', '1']
jl ['short', 'loc_4767']
cmp ['[ebp+arg_4],', '3']
jle ['short', 'loc_477E']
push ['offset', '$SG10967']
push ['166h']
push ['offset', '$SG10968']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_475B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+ecx*8+1B4h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*8+1B8h],', '0']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_Update_Max	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+arg_10]']
jnb ['short', 'loc_4821']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
imul ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
imul ['edx,', '[ebp+arg_8]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_4819']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_4823']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_10]']
mov ['[edx],', 'eax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6_0']
dd ['offset', '$LN5']
db ['0Ah', 'dup(0CCh)']
endp
_TT_New_Context	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_488A']
jmp ['short', '$Fail$10']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+1Ch],', '0']
jnz ['short', 'loc_48E0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['264h']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_48BC']
jmp ['short', '$Fail$10']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_Init_Context']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_48D7']
jmp ['short', '$Fail$10']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+1Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+1Ch]']
jmp ['short', 'loc_48EA']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN8_0']
dd ['offset', '$LN7_1']
align ['4']
endp
_TT_Done_Context proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1B8h],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1BAh],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4954']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1B4h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1B4h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_497F']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1B0h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1ACh],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+188h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+188h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_49C0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+184h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_4A07']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_TT_Load_Context proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '104h']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+4],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jz ['loc_4C28']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+74h]']
mov ['[edx+18Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+78h]']
mov ['[edx+190h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+80h]']
mov ['[edx+198h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+84h]']
mov ['[edx+19Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+7Ch]']
mov ['[edx+194h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+88h]']
mov ['[edx+1A0h],', 'ecx']
mov ['esi,', '[ebp+arg_8]']
add ['esi,', '48h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '0F4h']
mov ['ecx,', '0Ah']
rep ['movsd']
mov ['esi,', '[ebp+arg_8]']
add ['esi,', '2Ch']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '0D8h']
mov ['ecx,', '7']
rep ['movsd']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+8Ch]']
mov ['[edx+1A4h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+90h]']
mov ['[edx+1A8h],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_4B43']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '3']
jge ['short', 'loc_4B73']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+eax*8+94h]']
mov ['eax,', '[ecx+eax*8+98h]']
mov ['ecx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_0]']
mov ['[esi+ecx*8+1BCh],', 'edx']
mov ['[esi+ecx*8+1C0h],', 'eax']
jmp ['short', 'loc_4B3A']
mov ['esi,', '[ebp+arg_8]']
add ['esi,', '0ACh']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '11Ch']
mov ['ecx,', '11h']
rep ['movsd']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0F0h]']
mov ['[edx+17Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0F4h]']
mov ['[edx+180h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['cx,', '[eax+0F8h]']
mov ['[edx+1D4h],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0FCh]']
mov ['[edx+1D8h],', 'ecx']
mov ['esi,', '[ebp+arg_8]']
add ['esi,', '100h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '0B4h']
mov ['ecx,', '9']
rep ['movsd']
push ['24h']
push ['0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '24h']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '24h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '48h']
mov ['ecx,', '9']
rep ['movsd']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '24h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '6Ch']
mov ['ecx,', '9']
rep ['movsd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx+18h]']
add ['eax,', '20h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
push ['ecx']
push ['4']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_Update_Max']
add ['esp,', '14h']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+14h],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_4C72']
mov ['eax,', '[ebp+var_18]']
jmp ['loc_4D26']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+184h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax+1Ah]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '188h']
push ['edx']
push ['1']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_Update_Max']
add ['esp,', '14h']
mov ['[ebp+var_18],', 'eax']
movzx ['eax,', 'word', 'ptr', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+184h],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_4CC0']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_4D26']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+98h],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+9Ah],', 'cx']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '48h']
mov ['ecx,', '9']
rep ['movsd']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '6Ch']
mov ['ecx,', '9']
rep ['movsd']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '24h']
mov ['ecx,', '9']
rep ['movsd']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+1E8h],', '0']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN10']
dd ['offset', '$LN9_0']
endp
_TT_Save_Context proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18Ch]']
mov ['[eax+74h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+198h]']
mov ['[eax+80h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1A4h]']
mov ['[eax+8Ch],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1A8h]']
mov ['[eax+90h],', 'edx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_4DCB']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '3']
jge ['short', 'loc_4DFB']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*8+1BCh]']
mov ['ecx,', '[edx+ecx*8+1C0h]']
mov ['edx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_4]']
mov ['[esi+edx*8+94h],', 'eax']
mov ['[esi+edx*8+98h],', 'ecx']
jmp ['short', 'loc_4DC2']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_TT_Run_Context	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
push ['edi']
push ['0']
push ['3']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_TT_Goto_CodeRange']
add ['esp,', '0Ch']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '24h']
mov ['ecx,', '9']
rep ['movsd']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '48h']
mov ['ecx,', '9']
rep ['movsd']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '6Ch']
mov ['ecx,', '9']
rep ['movsd']
mov ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+158h],', 'cx']
mov ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+15Ah],', 'ax']
mov ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+15Ch],', 'dx']
mov ['ecx,', '4000h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+126h],', 'cx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+128h],', 'ax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+126h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+12Ah],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+126h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+122h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+138h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+130h],', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1ACh],', '0']
mov ['al,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+28Ch]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_TT_RunIns	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '94h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_94]']
mov ['ecx,', '25h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+100h],', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+0D8h]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+0DAh]']
cmp ['edx,', 'ecx']
jz ['short', 'loc_4FB7']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+250h],', 'offset', '_Current_Ppem_Stretched']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+254h],', 'offset', '_Read_CVT_Stretched']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+258h],', 'offset', '_Write_CVT_Stretched']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+25Ch],', 'offset', '_Move_CVT_Stretched']
jmp ['short', 'loc_4FEB']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+250h],', 'offset', '_Current_Ppem']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+254h],', 'offset', '_Read_CVT']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+258h],', 'offset', '_Write_CVT']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+25Ch],', 'offset', '_Move_CVT']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Compute_Funcs']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+138h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Compute_Round']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+164h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[edx+eax]']
mov ['[ecx+170h],', 'dl']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Dh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_504A']
push ['offset', '$SG13066']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_502C']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Dh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_5079']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
mov ['ecx,', 'ds:_opcode_name[eax*4]']
push ['ecx']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_504E']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Dh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_509B']
push ['offset', '$SG13075']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_507D']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
movsx ['edx,', 'ds:_opcode_length[ecx]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_5C]']
mov ['[eax+174h],', 'ecx']
cmp ['[ebp+var_5C],', '0']
jge ['short', 'loc_5112']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+16Ch]']
jl ['short', 'loc_50E1']
jmp ['$LErrorCodeOverflow_$248']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+164h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax+1]']
mov ['ecx,', '[ebp+arg_0]']
imul ['eax,', '[ecx+174h]']
mov ['edx,', '2']
sub ['edx,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+174h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+174h]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['edx,', '[ecx+16Ch]']
jle ['short', 'loc_5134']
jmp ['$LErrorCodeOverflow_$248']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
movzx ['ecx,', 'ds:_Pop_Push_Count[eax]']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+1Ch],', '0']
jge ['loc_51E5']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5198']
push ['offset', '$SG13082']
push ['2061h']
push ['81h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '81h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['$LErrorLabel_$249']
xor ['eax,', 'eax']
mov ['[ebp+var_8],', 'ax']
jmp ['short', 'loc_51AC']
mov ['cx,', '[ebp+var_8]']
add ['cx,', '1']
mov ['[ebp+var_8],', 'cx']
movzx ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
movzx ['eax,', 'ds:_Pop_Push_Count[ecx]']
sar ['eax,', '4']
cmp ['edx,', 'eax']
jge ['short', 'loc_51DB']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['dword', 'ptr', '[eax+ecx*4],', '0']
jmp ['short', 'loc_51A0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
movzx ['ecx,', 'ds:_Pop_Push_Count[eax]']
and ['ecx,', '0Fh']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+20h],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+20h]']
cmp ['eax,', '[edx+14h]']
jbe ['short', 'loc_523A']
push ['offset', '$SG13088']
push ['2072h']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$LErrorLabel_$249']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+178h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
lea ['edx,', '[ecx+edx*4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+170h]']
mov ['[ebp+var_D],', 'cl']
movzx ['edx,', '[ebp+var_D]']
mov ['[ebp+var_60],', 'edx']
cmp ['[ebp+var_60],', '8Fh']
ja ['loc_6878']
mov ['eax,', '[ebp+var_60]']
jmp ['ds:$LN247[eax*4]']
movzx ['ecx,', '[ebp+var_D]']
and ['ecx,', '1']
shl ['ecx,', '0Eh']
mov ['[ebp+var_14],', 'cx']
movsx ['edx,', '[ebp+var_14]']
xor ['edx,', '4000h']
mov ['[ebp+var_18],', 'dx']
movzx ['eax,', '[ebp+var_D]']
cmp ['eax,', '4']
jge ['short', 'loc_52E7']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ebp+var_14]']
mov ['[ecx+126h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[ebp+var_18]']
mov ['[eax+128h],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[ebp+var_14]']
mov ['[edx+122h],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ebp+var_18]']
mov ['[ecx+124h],', 'dx']
movzx ['eax,', '[ebp+var_D]']
and ['eax,', '2']
jnz ['short', 'loc_530C']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ebp+var_14]']
mov ['[ecx+12Ah],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[ebp+var_18]']
mov ['[eax+12Ch],', 'cx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Compute_Funcs']
add ['esp,', '4']
jmp ['loc_68FC']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '126h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx]']
push ['eax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_SxVTL']
add ['esp,', '14h']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_5382']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+126h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+122h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Compute_Funcs']
add ['esp,', '4']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '12Ah']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
push ['eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx]']
push ['ecx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_SxVTL']
add ['esp,', '14h']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_53DB']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Compute_Funcs']
add ['esp,', '4']
jmp ['loc_68FC']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['cx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'cx']
movsx ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_1C],', 'ax']
movsx ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '126h']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Normalize']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+126h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+122h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Compute_Funcs']
add ['esp,', '4']
jmp ['loc_68FC']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_28],', 'ax']
movsx ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['dx,', '[ecx+eax]']
mov ['[ebp+var_28],', 'dx']
movsx ['eax,', '[ebp+var_28]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '12Ah']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Normalize']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Compute_Funcs']
add ['esp,', '4']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+126h]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+ecx],', 'eax']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+128h]']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+eax],', 'edx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+12Ah]']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+eax],', 'edx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ch]']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+126h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+12Ah],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Compute_Funcs']
add ['esp,', '4']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_ISECT']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['dx,', '[ecx+edx]']
mov ['[eax+11Ch],', 'dx']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['cx,', '[eax+ecx]']
mov ['[edx+11Eh],', 'cx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['ax,', '[edx+eax]']
mov ['[ecx+120h],', 'ax']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_SZP0']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_SZP1']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_SZP2']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_SZPS']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jge ['short', 'loc_563D']
push ['offset', '$SG13143']
push ['210Eh']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_5654']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
mov ['[ecx+130h],', 'eax']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+138h],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+238h],', 'offset', '_Round_To_Grid']
jmp ['loc_68FC']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+138h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+238h],', 'offset', '_Round_To_Half_Grid']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
mov ['[ecx+134h],', 'eax']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_ELSE']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jnz ['short', 'loc_5704']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jnz ['short', 'loc_5704']
push ['offset', '$SG13153']
push ['2122h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['ecx,', '[ebp+var_C]']
add ['edx,', '[ecx+eax]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+168h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+168h],', '0']
jl ['short', 'loc_5766']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+1ACh],', '0']
jle ['short', 'loc_5788']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ACh]']
sub ['ecx,', '1']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1B4h]']
mov ['ecx,', '[eax+ecx+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
cmp ['eax,', '[ecx+8]']
jle ['short', 'loc_5788']
push ['offset', '$SG13156']
push ['2122h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+178h],', '0']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+ecx]']
mov ['[edx+140h],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
mov ['[ecx+144h],', 'eax']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+104h]']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+148h],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[esi+eax]']
mov ['[edx+ecx],', 'eax']
jmp ['loc_68FC']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+20h],', '0']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[esi+eax]']
mov ['[ecx+edx],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_34]']
mov ['[edx+ecx],', 'eax']
jmp ['loc_68FC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+10h]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_38],', 'edx']
cmp ['[ebp+var_38],', '0']
jle ['short', 'loc_58B1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_38]']
cmp ['ecx,', '[eax+1Ch]']
jle ['short', 'loc_58F5']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_58E1']
push ['offset', '$SG13175']
push ['2146h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+eax],', '0']
jmp ['short', 'loc_5915']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
sub ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['ecx,', '4']
imul ['ecx,', '0']
mov ['esi,', '[ebp+var_C]']
mov ['edx,', '[edx+eax*4]']
mov ['[esi+ecx],', 'edx']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_MINDEX']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_ALIGNPTS']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_UNKNOWN']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_UTP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_LOOPCALL']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_CALL']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_FDEF']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_ENDF']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_MDAP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_IUP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_SHP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_SHC']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_SHZ']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_SHPIX']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_IP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_MSIRP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_ALIGNRP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+138h],', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+238h],', 'offset', '_Round_To_Double_Grid']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_MIAP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_NPUSHB']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_NPUSHW']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+1D4h]']
cmp ['[ebp+var_3C],', 'edx']
jb ['short', 'loc_5B0F']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5B0D']
jmp ['short', '$Set_Invalid_Ref$250']
jmp ['short', 'loc_5B2C']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1D8h]']
mov ['eax,', '[ebp+var_3C]']
mov ['esi,', '[ebp+var_C]']
mov ['edx,', '[esi+edx]']
mov ['[ecx+eax*4],', 'edx']
jmp ['loc_68FC']
push ['offset', '$SG13208']
push ['21A9h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+1D4h]']
cmp ['[ebp+var_40],', 'ecx']
jb ['short', 'loc_5B9E']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_5B8A']
jmp ['short', '$Set_Invalid_Ref$250']
jmp ['short', 'loc_5B9C']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+edx],', '0']
jmp ['short', 'loc_5BBB']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1D8h]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_40]']
mov ['edx,', '[edx+esi*4]']
mov ['[eax+ecx],', 'edx']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_44]']
cmp ['edx,', '[ecx+17Ch]']
jb ['short', 'loc_5BF4']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5BF2']
jmp ['$Set_Invalid_Ref$250']
jmp ['short', 'loc_5C22']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+258h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_48]']
cmp ['edx,', '[ecx+17Ch]']
jb ['short', 'loc_5C6F']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5C5B']
jmp ['$Set_Invalid_Ref$250']
jmp ['short', 'loc_5C6D']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+eax],', '0']
jmp ['short', 'loc_5C9C']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+254h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+edx],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_GC']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_SCFS']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_MD']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+250h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '4']
imul ['ecx,', 'edx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+ecx],', 'eax']
jmp ['loc_68FC']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+250h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+edx],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+13Ch],', '1']
jmp ['loc_68FC']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+13Ch],', '0']
jmp ['loc_68FC']
push ['offset', '$SG13243']
push ['21D7h']
push ['87h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '87h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
cmp ['eax,', '[esi+ecx]']
jge ['short', 'loc_5DA8']
mov ['[ebp+var_64],', '1']
jmp ['short', 'loc_5DAF']
mov ['[ebp+var_64],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_64]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
cmp ['eax,', '[esi+ecx]']
jg ['short', 'loc_5DEC']
mov ['[ebp+var_68],', '1']
jmp ['short', 'loc_5DF3']
mov ['[ebp+var_68],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
cmp ['eax,', '[esi+ecx]']
jle ['short', 'loc_5E30']
mov ['[ebp+var_6C],', '1']
jmp ['short', 'loc_5E37']
mov ['[ebp+var_6C],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_6C]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
cmp ['eax,', '[esi+ecx]']
jl ['short', 'loc_5E74']
mov ['[ebp+var_70],', '1']
jmp ['short', 'loc_5E7B']
mov ['[ebp+var_70],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_70]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
cmp ['eax,', '[esi+ecx]']
jnz ['short', 'loc_5EB8']
mov ['[ebp+var_74],', '1']
jmp ['short', 'loc_5EBF']
mov ['[ebp+var_74],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[edx+eax]']
cmp ['eax,', '[esi+ecx]']
jz ['short', 'loc_5EFC']
mov ['[ebp+var_78],', '1']
jmp ['short', 'loc_5F03']
mov ['[ebp+var_78],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_78]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['esi,', 'esp']
push ['0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+238h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
and ['eax,', '7Fh']
cmp ['eax,', '40h']
jnz ['short', 'loc_5F56']
mov ['[ebp+var_7C],', '1']
jmp ['short', 'loc_5F5D']
mov ['[ebp+var_7C],', '0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_7C]']
mov ['[edx+ecx],', 'eax']
jmp ['loc_68FC']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+238h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
and ['eax,', '7Fh']
jnz ['short', 'loc_5FAD']
mov ['[ebp+var_80],', '1']
jmp ['short', 'loc_5FB4']
mov ['[ebp+var_80],', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_80]']
mov ['[ecx+eax],', 'edx']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_IF']
add ['esp,', '8']
jmp ['loc_68FC']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[ecx+eax],', '0']
jz ['short', 'loc_6012']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+edx],', '0']
jz ['short', 'loc_6012']
mov ['[ebp+var_84],', '1']
jmp ['short', 'loc_601C']
mov ['[ebp+var_84],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_84]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[ecx+eax],', '0']
jnz ['short', 'loc_6063']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+edx],', '0']
jnz ['short', 'loc_6063']
mov ['[ebp+var_88],', '0']
jmp ['short', 'loc_606D']
mov ['[ebp+var_88],', '1']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_88]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[ecx+eax],', '0']
jnz ['short', 'loc_60A3']
mov ['[ebp+var_8C],', '1']
jmp ['short', 'loc_60AD']
mov ['[ebp+var_8C],', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_8C]']
mov ['[ecx+eax],', 'edx']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_DELTAP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['ax,', '[edx+eax]']
mov ['[ecx+14Ch],', 'ax']
jmp ['loc_68FC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+edx],', '6']
jbe ['short', 'loc_612E']
push ['offset', '$SG13263']
push ['2217h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_6147']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['ax,', '[edx+eax]']
mov ['[ecx+14Eh],', 'ax']
jmp ['loc_68FC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+edx]']
mov ['ecx,', '[ebp+var_C]']
add ['edx,', '[ecx+eax]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+ecx],', 'edx']
jmp ['loc_68FC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['edx,', '[ecx+edx]']
sub ['edx,', '[esi+eax]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+ecx],', 'edx']
jmp ['loc_68FC']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jnz ['short', 'loc_61DF']
push ['offset', '$SG13270']
push ['2223h']
push ['85h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '85h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_6215']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
push ['40h']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
push ['edx']
call ['_FT_MulDiv_No_Round']
add ['esp,', '0Ch']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+edx],', 'eax']
jmp ['loc_68FC']
push ['40h']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+edx],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[ecx+eax],', '0']
jge ['short', 'loc_627E']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
neg ['edx']
mov ['[ebp+var_90],', 'edx']
jmp ['short', 'loc_6292']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_90],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_90]']
mov ['[eax+edx],', 'ecx']
jmp ['loc_68FC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
neg ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+ecx],', 'edx']
jmp ['loc_68FC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+edx]']
and ['ecx,', '0FFFFFFC0h']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+eax],', 'ecx']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
add ['eax,', '3Fh']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+edx],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4-98h]']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+238h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+edx],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4-0A8h]']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Round_None']
add ['esp,', '0Ch']
mov ['edx,', '4']
imul ['ecx,', 'edx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+ecx],', 'eax']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4C]']
cmp ['edx,', '[ecx+17Ch]']
jb ['short', 'loc_63E2']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_63E0']
jmp ['$Set_Invalid_Ref$250']
jmp ['short', 'loc_6412']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+104h]']
push ['eax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+180h]']
mov ['ecx,', '[ebp+var_4C]']
mov ['[edx+ecx*4],', 'eax']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_DELTAP']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_DELTAC']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
push ['eax']
push ['4000h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_SetSuperRound']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+138h],', '6']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+238h],', 'offset', '_Round_Super']
jmp ['loc_68FC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
push ['2D41h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_SetSuperRound']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+138h],', '7']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+238h],', 'offset', '_Round_Super_45']
jmp ['loc_68FC']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+edx],', '0']
jz ['loc_659E']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+edx],', '0']
jnz ['short', 'loc_6510']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+1Ch],', '0']
jnz ['short', 'loc_6510']
push ['offset', '$SG13298']
push ['2260h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
mov ['edx,', '[ebp+var_C]']
add ['eax,', '[edx+ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+168h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+168h],', '0']
jl ['short', 'loc_6572']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1ACh],', '0']
jle ['short', 'loc_6594']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1ACh]']
sub ['edx,', '1']
shl ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1B4h]']
mov ['edx,', '[ecx+edx+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
cmp ['ecx,', '[edx+8]']
jle ['short', 'loc_6594']
push ['offset', '$SG13301']
push ['2260h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+178h],', '0']
jmp ['loc_68FC']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jnz ['loc_6682']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jnz ['short', 'loc_65F4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jnz ['short', 'loc_65F4']
push ['offset', '$SG13305']
push ['2264h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['ecx,', '[ebp+var_C]']
add ['edx,', '[ecx+eax]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+168h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+168h],', '0']
jl ['short', 'loc_6656']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+1ACh],', '0']
jle ['short', 'loc_6678']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ACh]']
sub ['ecx,', '1']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1B4h]']
mov ['ecx,', '[eax+ecx+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
cmp ['eax,', '[ecx+8]']
jle ['short', 'loc_6678']
push ['offset', '$SG13308']
push ['2264h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+178h],', '0']
jmp ['loc_68FC']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+138h],', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+238h],', 'offset', '_Round_None']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_UNKNOWN']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+138h],', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+238h],', 'offset', '_Round_Up_To_Grid']
jmp ['loc_68FC']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+138h],', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+238h],', 'offset', '_Round_Down_To_Grid']
jmp ['loc_68FC']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_FLIPPT']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_FLIPRGON']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_FLIPRGOFF']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_UNKNOWN']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_SCANCTRL']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_SDPVTL']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_GETINFO']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_IDEF']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_ROLL']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['edx,', '[eax+edx]']
cmp ['edx,', '[esi+ecx]']
jle ['short', 'loc_67F5']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[esi+eax]']
mov ['[ecx+edx],', 'eax']
jmp ['loc_68FC']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['ecx,', '[edx+ecx]']
cmp ['ecx,', '[esi+eax]']
jge ['short', 'loc_6834']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_C]']
mov ['edx,', '[esi+edx]']
mov ['[eax+ecx],', 'edx']
jmp ['loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_SCANTYPE']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_INSTCTRL']
add ['esp,', '8']
jmp ['loc_68FC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_UNKNOWN']
add ['esp,', '8']
jmp ['loc_68FC']
movzx ['eax,', '[ebp+var_D]']
cmp ['eax,', '0E0h']
jl ['short', 'loc_6895']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_MIRP']
add ['esp,', '8']
jmp ['short', 'loc_68FC']
movzx ['eax,', '[ebp+var_D]']
cmp ['eax,', '0C0h']
jl ['short', 'loc_68B2']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_MDRP']
add ['esp,', '8']
jmp ['short', 'loc_68FC']
movzx ['eax,', '[ebp+var_D]']
cmp ['eax,', '0B8h']
jl ['short', 'loc_68CF']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_PUSHW']
add ['esp,', '8']
jmp ['short', 'loc_68FC']
movzx ['eax,', '[ebp+var_D]']
cmp ['eax,', '0B0h']
jl ['short', 'loc_68EC']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_PUSHB']
add ['esp,', '8']
jmp ['short', 'loc_68FC']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_UNKNOWN']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jz ['loc_6A63']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_94],', 'ecx']
cmp ['[ebp+var_94],', '80h']
jz ['short', 'loc_6926']
jmp ['loc_6A5E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1A0h]']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
imul ['edx,', '[ecx+198h],', '18h']
add ['edx,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'edx']
jmp ['short', 'loc_694D']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '18h']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_50]']
cmp ['ecx,', '[ebp+var_54]']
jnb ['loc_6A37']
mov ['edx,', '[ebp+var_50]']
movzx ['eax,', 'byte', 'ptr', '[edx+10h]']
test ['eax,', 'eax']
jz ['loc_6A32']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
mov ['eax,', '[ebp+var_50]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['edx,', 'ecx']
jnz ['loc_6A32']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+1ACh]']
cmp ['ecx,', '[eax+1B0h]']
jl ['short', 'loc_69BC']
push ['offset', '$SG13357']
push ['22DFh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['$LErrorLabel_$249']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ACh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1B4h]']
mov ['[ebp+var_58],', 'ecx']
mov ['eax,', '[ebp+var_58]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+160h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_58]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_58]']
mov ['dword', 'ptr', '[eax+8],', '1']
mov ['ecx,', '[ebp+var_58]']
mov ['edx,', '[ebp+var_50]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_Goto_CodeRange']
add ['esp,', '0Ch']
movzx ['edx,', 'al']
cmp ['edx,', '1']
jnz ['short', 'loc_6A2D']
jmp ['$LErrorLabel_$249']
jmp ['$LSuiteLabel_$251']
jmp ['loc_6944']
push ['offset', '$SG13360']
push ['22F2h']
push ['80h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$LErrorLabel_$249']
jmp ['$LErrorLabel_$249']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[edx+10h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+178h]']
test ['eax,', 'eax']
jz ['short', 'loc_6A98']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+174h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+168h],', 'edx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0F4240h']
jle ['short', '$LSuiteLabel_$251']
push ['offset', '$SG13364']
push ['230Ch']
push ['8Bh']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8Bh']
jmp ['loc_6BC0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+168h]']
cmp ['edx,', '[ecx+16Ch]']
jl ['short', 'loc_6B13']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1ACh],', '0']
jle ['short', 'loc_6B11']
push ['offset', '$SG13367']
push ['2313h']
push ['83h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '83h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', '$LErrorLabel_$249']
jmp ['short', 'loc_6B13']
jmp ['short', '$LNo_Error_$252']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1E8h]']
test ['eax,', 'eax']
jz ['loc_500E']
xor ['eax,', 'eax']
jmp ['loc_6BC0']
push ['offset', '$SG13370']
push ['2324h']
push ['83h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '83h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jz ['short', 'loc_6BBA']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1E8h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_6BBA']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+160h],', '3']
jnz ['short', 'loc_6BBA']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Dh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_6B96']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
push ['offset', '$SG13376']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_6B71']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['dword', 'ptr', '[eax+12Ch],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['dword', 'ptr', '[edx+130h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+0Ch]']
pop ['edi']
pop ['esi']
add ['esp,', '94h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN192,', 'offset', '$LN192,', 'offset', '$LN187,', 'offset', '$LN187']
dd ['offset', '$LN185,', 'offset', '$LN185,', 'offset', '$LN183,', 'offset', '$LN182']
dd ['offset', '$LN181,', 'offset', '$LN180,', 'offset', '$LN179,', 'offset', '$LN178']
dd ['offset', '$LN177,', 'offset', '$LN176,', 'offset', '$LN175,', 'offset', '$LN174']
dd ['offset', '$LN173,', 'offset', '$LN172,', 'offset', '$LN171,', 'offset', '$LN170']
dd ['offset', '$LN167,', 'offset', '$LN166,', 'offset', '$LN165,', 'offset', '$LN164']
dd ['offset', '$LN163,', 'offset', '$LN159,', 'offset', '$LN158,', 'offset', '$LN157']
dd ['offset', '$LN156,', 'offset', '$LN155,', 'offset', '$LN154,', 'offset', '$LN153']
dd ['offset', '$LN152,', 'offset', '$LN151,', 'offset', '$LN146,', 'offset', '$LN145']
dd ['offset', '$LN144,', 'offset', '$LN143,', 'offset', '$LN142,', 'offset', '$LN141']
dd ['offset', '$LN140,', 'offset', '$LN139,', 'offset', '$LN138,', 'offset', '$LN138']
dd ['offset', '$LN137,', 'offset', '$LN137,', 'offset', '$LN136,', 'offset', '$LN136']
dd ['offset', '$LN135,', 'offset', '$LN135,', 'offset', '$LN134,', 'offset', '$LN134']
dd ['offset', '$LN133,', 'offset', '$LN132,', 'offset', '$LN131,', 'offset', '$LN131']
dd ['offset', '$LN130,', 'offset', '$LN129,', 'offset', '$LN128,', 'offset', '$LN128']
dd ['offset', '$LN127,', 'offset', '$LN126,', 'offset', '$LN125,', 'offset', '$LN121']
dd ['offset', '$LN116,', 'offset', '$LN112,', 'offset', '$LN107,', 'offset', '$LN107']
dd ['offset', '$LN106,', 'offset', '$LN105,', 'offset', '$LN105,', 'offset', '$LN104']
dd ['offset', '$LN103,', 'offset', '$LN102,', 'offset', '$LN101,', 'offset', '$LN100']
dd ['offset', '$LN99,', 'offset', '$LN98,', 'offset', '$LN97,', 'offset', '$LN96']
dd ['offset', '$LN95,', 'offset', '$LN94,', 'offset', '$LN93,', 'offset', '$LN92']
dd ['offset', '$LN91,', 'offset', '$LN90,', 'offset', '$LN89,', 'offset', '$LN88']
dd ['offset', '$LN87,', 'offset', '$LN86,', 'offset', '$LN85,', 'offset', '$LN84']
dd ['offset', '$LN81,', 'offset', '$LN80,', 'offset', '$LN79,', 'offset', '$LN76']
dd ['offset', '$LN75,', 'offset', '$LN74,', 'offset', '$LN73,', 'offset', '$LN72']
dd ['offset', '$LN71,', 'offset', '$LN71,', 'offset', '$LN71,', 'offset', '$LN71']
dd ['offset', '$LN70,', 'offset', '$LN70,', 'offset', '$LN70,', 'offset', '$LN70']
dd ['offset', '$LN69,', 'offset', '$LN65,', 'offset', '$LN65,', 'offset', '$LN64']
dd ['offset', '$LN64,', 'offset', '$LN64,', 'offset', '$LN63,', 'offset', '$LN62']
dd ['offset', '$LN61,', 'offset', '$LN56,', 'offset', '$LN51,', 'offset', '$LN50']
dd ['offset', '$LN49,', 'offset', '$LN48,', 'offset', '$LN47,', 'offset', '$LN47']
dd ['offset', '$LN46,', 'offset', '$LN45,', 'offset', '$LN44,', 'offset', '$LN43']
dd ['offset', '$LN43,', 'offset', '$LN42,', 'offset', '$LN41,', 'offset', '$LN41']
dd ['offset', '$LN40,', 'offset', '$LN39,', 'offset', '$LN38,', 'offset', '$LN37']
dd ['offset', '$LN35,', 'offset', '$LN33,', 'offset', '$LN32,', 'offset', '$LN31']
align ['8']
endp
_TT_Init_Glyph_Loading proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+200h],', 'offset', '_TT_Access_Glyph_Frame']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+208h],', 'offset', '_TT_Load_Glyph_Header']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+20Ch],', 'offset', '_TT_Load_Simple_Glyph']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+210h],', 'offset', '_TT_Load_Composite_Glyph']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+204h],', 'offset', '_TT_Forget_Glyph_Frame']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_TT_Get_HMetrics proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+214h]']
mov ['eax,', '[edx+70h]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_6EBD']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
push ['offset', '$SG9453']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_6E98']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_6EE6']
mov ['edx,', '[ebp+arg_8]']
movsx ['eax,', 'word', 'ptr', '[edx]']
push ['eax']
push ['offset', '$SG9458']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_6EC1']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['8']
endp
_TT_Get_VMetrics proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+124h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6F38']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+214h]']
mov ['edx,', '[ecx+70h]']
call ['edx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_6FAA']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+16Ch]']
cmp ['ecx,', '0FFFFh']
jz ['short', 'loc_6F7B']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+1B2h]']
sub ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+1B2h]']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+1B4h]']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'ax']
jmp ['short', 'loc_6FAA']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+0DCh]']
sub ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+0DCh]']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+0DEh]']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'ax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_6FCF']
mov ['ecx,', '[ebp+arg_10]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
push ['offset', '$SG9481']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_6FAA']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_6FF8']
mov ['eax,', '[ebp+arg_C]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
push ['offset', '$SG9486']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_6FD3']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_TT_Load_Glyph	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_7050']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
push ['offset', '$SG10377']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_702E']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+70h],', '0FFFFFFFFh']
jz ['loc_7150']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '8']
jnz ['loc_7150']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_load_sbit_image']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['loc_7150']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+8]']
and ['eax,', '1']
jz ['loc_7149']
push ['1']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_tt_loader_init']
add ['esp,', '14h']
push ['1']
push ['0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_load_truetype_glyph']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_A0]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_28]']
mov ['[eax+3Ch],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+28h],', '0']
jnz ['short', 'loc_711B']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+38h],', '0']
jz ['short', 'loc_711B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+28h],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+34h],', '0']
jnz ['short', 'loc_7149']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+3Ch],', '0']
jz ['short', 'loc_7149']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+3Ch]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+34h],', 'eax']
xor ['eax,', 'eax']
jmp ['loc_737D']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '1']
jnz ['short', 'loc_717F']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6Ch]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_717F']
push ['offset', '$SG10390']
push ['961h']
push ['24h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '24h']
jmp ['loc_737D']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '4000h']
jz ['short', 'loc_71A6']
push ['offset', '$SG10392']
push ['964h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_737D']
push ['0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_tt_loader_init']
add ['esp,', '14h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_71D4']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_737D']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+48h],', '6F75746Ch']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+80h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+7Ch],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['_load_truetype_glyph']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['loc_7354']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+48h],', '636F6D70h']
jnz ['short', 'loc_724B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_D0]']
mov ['eax,', '[edx+30h]']
mov ['[ecx+80h],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_D0]']
mov ['eax,', '[edx+34h]']
mov ['[ecx+84h],', 'eax']
jmp ['short', 'loc_72AA']
mov ['ecx,', '[ebp+var_D0]']
add ['ecx,', '14h']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '6Ch']
mov ['eax,', '[ecx]']
mov ['[edx],', 'eax']
mov ['eax,', '[ecx+4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ecx+8]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ecx+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ecx+10h]']
mov ['[edx+10h],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+7Ch]']
and ['eax,', '0FFFFFDFFh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+7Ch],', 'eax']
cmp ['[ebp+var_98],', '0']
jz ['short', 'loc_72AA']
push ['0']
mov ['edx,', '[ebp+var_98]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '6Ch']
push ['eax']
call ['_FT_Outline_Translate']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '2']
jnz ['loc_733E']
mov ['edx,', '[ebp+var_3C]']
movzx ['eax,', 'byte', 'ptr', '[edx+151h]']
test ['eax,', 'eax']
jz ['short', 'loc_732F']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ecx+154h]']
mov ['[ebp+var_E4],', 'edx']
cmp ['[ebp+var_E4],', '5']
ja ['short', '$LN3']
mov ['eax,', '[ebp+var_E4]']
jmp ['ds:$LN33_0[eax*4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+7Ch]']
or ['edx,', '20h']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+7Ch],', 'edx']
jmp ['short', 'loc_732D']
jmp ['short', 'loc_732D']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+7Ch]']
or ['edx,', '30h']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+7Ch],', 'edx']
jmp ['short', 'loc_732D']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+7Ch]']
or ['edx,', '10h']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+7Ch],', 'edx']
jmp ['short', 'loc_732D']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+7Ch]']
or ['edx,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+7Ch],', 'edx']
jmp ['short', 'loc_733E']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+7Ch]']
or ['edx,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+7Ch],', 'edx']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['_compute_glyph_metrics']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '1']
jnz ['short', 'loc_737A']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+0Eh]']
cmp ['edx,', '18h']
jge ['short', 'loc_737A']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+7Ch]']
or ['ecx,', '100h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+7Ch],', 'ecx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN32_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN31_0']
dd ['offset', '$LN30']
align ['4']
dd ['offset', '$LN6_1']
dd ['offset', '$LN3']
dd ['offset', '$LN3']
dd ['offset', '$LN5_0']
dd ['offset', '$LN4']
db ['8', 'dup(0CCh)']
endp
_tt_face_load_loca proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '29Ch']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['676C7966h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1FCh]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '0FFh']
cmp ['edx,', '8Eh']
jnz ['short', 'loc_744F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+29Ch],', '0']
jmp ['short', 'loc_745A']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_745A']
jmp ['$Exit$47']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_7478']
push ['offset', '$SG8956']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_745A']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['6C6F6361h']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1FCh]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_74CE']
push ['offset', '$SG8963']
push ['54h']
push ['90h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '90h']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$47']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+0D2h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_753D']
mov ['[ebp+var_14],', '2']
cmp ['[ebp+var_C],', '40000h']
jb ['short', 'loc_752A']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '2']
jl ['short', 'loc_750A']
push ['offset', '$SG8970']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_74EC']
push ['offset', '$SG8971']
push ['5Fh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$47']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_14]']
shr ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2B8h],', 'edx']
jmp ['short', 'loc_759C']
mov ['[ebp+var_14],', '1']
cmp ['[ebp+var_C],', '20000h']
jb ['short', 'loc_758B']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_756B']
push ['offset', '$SG8978']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_754D']
push ['offset', '$SG8979']
push ['6Bh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$47']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_14]']
shr ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2B8h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
cmp ['[eax+2B8h],', 'edx']
jz ['loc_76DA']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_75E6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2B8h]']
sub ['eax,', '1']
push ['eax']
push ['offset', '$SG8986']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_75B4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+2B8h]']
cmp ['ecx,', '[eax+10h]']
ja ['loc_76DA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_14]']
shl ['eax,', 'cl']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+98h]']
shl ['ecx,', '4']
add ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Pos']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_28],', '7FFFFFFFh']
jmp ['short', 'loc_7650']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '10h']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[ebp+var_20]']
jnb ['short', 'loc_767A']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+var_24]']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jle ['short', 'loc_7678']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[ebp+var_28]']
jge ['short', 'loc_7678']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_7647']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+var_20]']
jnz ['short', 'loc_768E']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
sub ['edx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+var_28]']
jg ['short', 'loc_76DA']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2B8h],', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '2']
jl ['short', 'loc_76D6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2B8h]']
push ['edx']
push ['offset', '$SG9006']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_76AE']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2BCh']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ExtractFrame']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_76FF']
jmp ['short', '$Exit$47']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_771D']
push ['offset', '$SG9014']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_76FF']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN46_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN45_0']
dd ['offset', '$LN44_0']
align ['4']
endp
_tt_face_get_location proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+2B8h]']
jnb ['loc_7957']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+0D2h]']
test ['ecx,', 'ecx']
jz ['loc_78A4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2BCh]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2B8h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2BCh]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['eax,', '18h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
or ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '4']
cmp ['ecx,', '[ebp+var_10]']
ja ['short', 'loc_789F']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['eax,', '18h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
or ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_7957']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2BCh]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[ecx+edx*2]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2B8h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2BCh]']
lea ['edx,', '[ecx+edx*2]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
cmp ['edx,', '[ebp+var_10]']
ja ['short', 'loc_7947']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax+29Ch]']
jbe ['short', 'loc_79A6']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '1']
jl ['short', 'loc_7995']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+29Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
push ['offset', '$SG9068']
call ['_FT_Message']
add ['esp,', '10h']
xor ['edx,', 'edx']
jnz ['short', 'loc_7965']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
xor ['eax,', 'eax']
jmp ['short', 'loc_7A20']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+29Ch]']
jbe ['short', 'loc_79F7']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_79E7']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+29Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
push ['offset', '$SG9074']
call ['_FT_Message']
add ['esp,', '10h']
xor ['eax,', 'eax']
jnz ['short', 'loc_79B4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+29Ch]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_4]']
jb ['short', 'loc_7A0C']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_7A1D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+29Ch]']
sub ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_tt_face_done_loca proc	near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2BCh']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_ReleaseFrame']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+2B8h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_tt_face_load_cvt proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '2']
jl ['short', 'loc_7AD6']
push ['offset', '$SG9096']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_7AB8']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['63767420h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1FCh]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7B53']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_7B29']
push ['offset', '$SG9107']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_7B0B']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+284h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+288h],', '0']
mov ['[ebp+var_8],', '0']
jmp ['$Exit$26']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+284h],', 'eax']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+284h]']
push ['ecx']
push ['0']
push ['2']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+288h],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7B95']
jmp ['$Exit$26']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+284h]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7BBB']
jmp ['$Exit$26']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+288h]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+284h]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx*2]']
mov ['[ebp+var_24],', 'ecx']
jmp ['short', 'loc_7BE4']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_24]']
jnb ['short', 'loc_7C00']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
mov ['edx,', '[ebp+var_20]']
mov ['[edx],', 'ax']
jmp ['short', 'loc_7BDB']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_7C2A']
push ['offset', '$SG9125']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_7C0C']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2A0h]']
test ['edx,', 'edx']
jz ['short', '$Exit$26']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_tt_face_vary_cvt']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN24']
dd ['offset', '$LN22']
dd ['0FFFFFFE8h,', '4']
dd ['offset', '$LN23']
align ['8']
endp
_tt_face_load_fpgm proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_7CDE']
push ['offset', '$SG9138']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_7CC0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['6670676Dh']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1FCh]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7D58']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+278h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+274h],', '0']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_7D52']
push ['offset', '$SG9150']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_7D34']
jmp ['short', '$Exit$21']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+274h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '278h']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ExtractFrame']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7D88']
jmp ['short', '$Exit$21']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_7DB0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+274h]']
push ['eax']
push ['offset', '$SG9160']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_7D88']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19']
dd ['offset', '$LN18']
align ['4']
endp
_tt_face_load_prep proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_7E2E']
push ['offset', '$SG9172']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_7E10']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['70726570h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1FCh]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7EA8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+280h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+27Ch],', '0']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_7EA2']
push ['offset', '$SG9184']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_7E84']
jmp ['short', '$Exit$21_0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+27Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '280h']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ExtractFrame']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7ED8']
jmp ['short', '$Exit$21_0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Fh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_7F00']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+27Ch]']
push ['eax']
push ['offset', '$SG9194']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_7ED8']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19_0']
dd ['offset', '$LN18_0']
align ['4']
endp
_tt_face_load_hdmx proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['68646D78h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1FCh]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_7F9F']
cmp ['[ebp+var_24],', '8']
jnb ['short', 'loc_7FA6']
xor ['eax,', 'eax']
jmp ['loc_81BE']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2C0h']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ExtractFrame']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7FCE']
jmp ['$Exit$18']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2C0h]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_24]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '2']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_30]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '2']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_30]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '4']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_30]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-4]']
shl ['ecx,', '18h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_30]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-4]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-4]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-4]']
or ['ecx,', 'eax']
mov ['[ebp+var_2C],', 'ecx']
cmp ['[ebp+var_2C],', '0FFFF0000h']
jb ['short', 'loc_80BA']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_2C],', 'ecx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_80D8']
cmp ['[ebp+var_1C],', '0FFh']
ja ['short', 'loc_80D8']
cmp ['[ebp+var_2C],', 'offset', 'loc_10001']
ja ['short', 'loc_80D8']
cmp ['[ebp+var_2C],', '4']
jnb ['short', 'loc_80F7']
push ['offset', '$SG9245']
push ['212h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_8],', 'eax']
jmp ['$Fail$19']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2D0h],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_8122']
jmp ['short', '$Fail$19']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_8134']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[ebp+var_1C]']
jnb ['short', 'loc_8171']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '[ebp+var_2C]']
cmp ['edx,', '[ebp+var_34]']
jbe ['short', 'loc_8149']
jmp ['short', 'loc_8171']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2D0h]']
mov ['edx,', '[ebp+var_18]']
mov ['esi,', '[ebp+var_30]']
mov ['cl,', '[esi+ecx]']
mov ['[eax+edx],', 'cl']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'edx']
jmp ['short', 'loc_812B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+2C8h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx+2C4h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+2CCh],', 'edx']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_81BE']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2C0h']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_ReleaseFrame']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+2C4h],', '0']
jmp ['short', '$Exit$18']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN16']
dd ['offset', '$LN14']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN15']
align ['8']
endp
_tt_face_free_hdmx proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2D0h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+2D0h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_823E']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2C0h']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_ReleaseFrame']
add ['esp,', '8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_tt_face_get_device_metrics proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2CCh]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2C0h]']
add ['eax,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_82D3']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+2C8h]']
jnb ['short', 'loc_831B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2D0h]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+eax]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_8319']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '2']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_C]']
jnb ['short', 'loc_8317']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_831B']
jmp ['short', 'loc_82CA']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_TT_Set_MM_Blend proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+2A0h],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+2A4h],', '0']
jnz ['short', 'loc_8391']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_TT_Get_MM_Var']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_8391']
jmp ['$Exit$32']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2A4h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax]']
jz ['short', 'loc_83CF']
push ['offset', '$SG13908']
push ['370h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$32']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_83E1']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_8428']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+Src]']
cmp ['dword', 'ptr', '[edx+ecx*4],', '0FFFF0000h']
jl ['short', 'loc_8407']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+Src]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '(offset', 'loc_FFFF+1)']
jle ['short', 'loc_8426']
push ['offset', '$SG13914']
push ['377h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$32']
jmp ['short', 'loc_83D8']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+24h],', '0']
jnz ['short', 'loc_844B']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_var_load_gvar']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_844B']
jmp ['$Exit$32']
mov ['ecx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['short', 'loc_8488']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
push ['4']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+4],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_847F']
jmp ['$Exit$32']
mov ['[ebp+var_20],', '1']
jmp ['short', 'loc_84CB']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_84A1']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_84CB']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_18]']
mov ['esi,', '[ebp+Src]']
mov ['eax,', '[eax+ecx*4]']
cmp ['eax,', '[esi+edx*4]']
jz ['short', 'loc_84C9']
mov ['[ebp+var_20],', '2']
jmp ['short', 'loc_84CB']
jmp ['short', 'loc_8498']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+2A0h],', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+288h],', '0']
jz ['short', '$Exit$32']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '1']
jz ['short', 'loc_8563']
cmp ['[ebp+var_24],', '2']
jz ['short', 'loc_8517']
jmp ['short', '$Exit$32']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+288h]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+288h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_8517']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+288h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_tt_face_load_cvt']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['short', '$Exit$32']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_tt_face_vary_cvt']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN31_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN30_0']
dd ['offset', '$LN29']
align ['4']
endp
_TT_Set_Var_Design proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['[ebp+Src],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+2A4h],', '0']
jnz ['short', 'loc_860E']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_TT_Get_MM_Var']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_860E']
jmp ['$Exit$31']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2A4h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx]']
jz ['short', 'loc_864C']
push ['offset', '$SG13966']
push ['3F1h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$31']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx]']
push ['eax']
push ['0']
push ['4']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+Src],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_8676']
jmp ['$Exit$31']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_869A']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '18h']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[eax]']
jnb ['loc_877C']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[eax+edx*4]']
cmp ['edx,', '[ecx+0Ch]']
jg ['short', 'loc_86CA']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ecx+eax*4]']
cmp ['eax,', '[edx+4]']
jge ['short', 'loc_86E9']
push ['offset', '$SG13975']
push ['401h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$31']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[edx+ecx*4]']
cmp ['ecx,', '[eax+8]']
jge ['short', 'loc_872C']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[edx+4]']
sub ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[eax+edx*4]']
sub ['edx,', '[ecx+8]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
neg ['eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+Src]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_8777']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_8749']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+Src]']
mov ['dword', 'ptr', '[ecx+eax*4],', '0']
jmp ['short', 'loc_8777']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[eax+edx*4]']
sub ['edx,', '[ecx+8]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+Src]']
mov ['[edx+ecx*4],', 'eax']
jmp ['loc_8688']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_8793']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_var_load_avar']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['loc_8880']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_87C4']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '8']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[edx]']
jnb ['loc_8880']
mov ['[ebp+var_20],', '1']
jmp ['short', 'loc_87E4']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_28]']
movzx ['eax,', 'word', 'ptr', '[edx]']
cmp ['[ebp+var_20],', 'eax']
jnb ['loc_887B']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+Src]']
mov ['esi,', '[ebp+var_20]']
mov ['eax,', '[ecx+eax*4]']
cmp ['eax,', '[edx+esi*8]']
jge ['short', 'loc_8876']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[eax+4]']
mov ['eax,', '[ebp+var_20]']
mov ['esi,', '[ebp+var_20]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[ecx+esi*8-8]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+var_20]']
mov ['esi,', '[ebp+var_20]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[eax+esi*8-4]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+Src]']
mov ['esi,', '[ebp+var_20]']
mov ['ecx,', '[edx+ecx*4]']
sub ['ecx,', '[eax+esi*8-8]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_28]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_20]']
add ['eax,', '[ecx+edx*8-4]']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+Src]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_887B']
jmp ['loc_87DB']
jmp ['loc_87B2']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_TT_Set_MM_Blend']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+Src],', '0']
xor ['edx,', 'edx']
jnz ['short', '$Exit$31']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN30_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN29_0']
dd ['offset', '$LN28']
align ['8']
endp
_TT_Get_MM_Var	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '7Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['[ebp+Dst],', '0']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+2A4h],', '0']
jnz ['loc_8DAA']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
push ['67766172h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1FCh]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_897F']
jmp ['$Exit$50']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
push ['66766172h']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1FCh]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_89B5']
jmp ['$Exit$50']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_Pos']
add ['esp,', '4']
mov ['[ebp+var_28],', 'eax']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
push ['offset', '?fvar_fields@?1??TT_Get_MM_Var@@9@9']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_ReadFields']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_89E7']
jmp ['$Exit$50']
cmp ['[ebp+var_58],', '(offset', 'loc_FFFF+1)']
jnz ['short', 'loc_8A4B']
movzx ['eax,', '[ebp+var_52]']
cmp ['eax,', '2']
jnz ['short', 'loc_8A4B']
movzx ['ecx,', '[ebp+var_4E]']
cmp ['ecx,', '14h']
jnz ['short', 'loc_8A4B']
movzx ['edx,', '[ebp+var_50]']
cmp ['edx,', '3FFEh']
jg ['short', 'loc_8A4B']
movzx ['eax,', '[ebp+var_4A]']
movzx ['ecx,', '[ebp+var_50]']
lea ['edx,', 'ds:4[ecx*4]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_8A4B']
movzx ['eax,', '[ebp+var_4C]']
cmp ['eax,', '7EFFh']
jg ['short', 'loc_8A4B']
movzx ['ecx,', '[ebp+var_54]']
movzx ['edx,', '[ebp+var_50]']
imul ['eax,', 'edx,', '14h']
add ['ecx,', 'eax']
movzx ['edx,', '[ebp+var_4C]']
movzx ['eax,', '[ebp+var_4A]']
imul ['edx,', 'eax']
add ['ecx,', 'edx']
cmp ['ecx,', '[ebp+var_14]']
jbe ['short', 'loc_8A6A']
push ['offset', '$SG13793']
push ['2AEh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_20],', 'eax']
jmp ['$Exit$50']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
push ['28h']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2A4h],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8A90']
jmp ['$Exit$50']
movzx ['edx,', '[ebp+var_50]']
imul ['eax,', 'edx,', '18h']
movzx ['ecx,', '[ebp+var_4C]']
lea ['edx,', '[eax+ecx*8+14h]']
movzx ['eax,', '[ebp+var_4C]']
movzx ['ecx,', '[ebp+var_50]']
imul ['eax,', 'ecx']
lea ['edx,', '[edx+eax*4]']
movzx ['eax,', '[ebp+var_50]']
imul ['ecx,', 'eax,', '5']
add ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2A4h]']
mov ['[ecx+0Ch],', 'edx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2A4h]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8AED']
jmp ['$Exit$50']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2A4h]']
mov ['eax,', '[ebp+Dst]']
mov ['[edx+8],', 'eax']
movzx ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ebp+Dst]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+Dst]']
mov ['dword', 'ptr', '[eax+4],', '0FFFFFFFFh']
movzx ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '14h']
shl ['eax,', '0']
add ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+0Ch],', 'eax']
movzx ['edx,', '[ebp+var_50]']
imul ['eax,', 'edx,', '18h']
mov ['ecx,', '[ebp+Dst]']
add ['eax,', '[ecx+0Ch]']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+10h],', 'eax']
movzx ['eax,', '[ebp+var_4C]']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ecx+10h]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_38],', 'eax']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_8B5F']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
movzx ['edx,', '[ebp+var_4C]']
cmp ['[ebp+var_2C],', 'edx']
jge ['short', 'loc_8B86']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+var_38]']
mov ['[ecx+edx*8],', 'eax']
movzx ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ebp+var_38]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_8B56']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_3C],', 'ecx']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_8B9E']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
movzx ['eax,', '[ebp+var_50]']
cmp ['[ebp+var_2C],', 'eax']
jge ['short', 'loc_8BC2']
imul ['ecx,', '[ebp+var_2C],', '18h']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[edx+0Ch]']
mov ['edx,', '[ebp+var_3C]']
mov ['[eax+ecx],', 'edx']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '5']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_8B95']
movzx ['ecx,', '[ebp+var_54]']
add ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8BE4']
jmp ['$Exit$50']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_40],', 'ecx']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_8BFF']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
movzx ['eax,', '[ebp+var_50]']
cmp ['[ebp+var_2C],', 'eax']
jge ['loc_8CED']
lea ['ecx,', '[ebp+var_74]']
push ['ecx']
push ['offset', '?fvaraxis_fields@?1??TT_Get_MM_Var@@9@9']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_ReadFields']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8C2F']
jmp ['$Exit$50']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+var_74]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[ebp+var_70]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ebp+var_6C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax+0Ch],', 'ecx']
movzx ['edx,', '[ebp+var_62]']
mov ['eax,', '[ebp+var_40]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx+10h]']
shr ['edx,', '18h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_40]']
mov ['eax,', '[eax]']
mov ['[ecx+eax],', 'dl']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx+10h]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_40]']
mov ['ecx,', '[ecx]']
mov ['[eax+ecx],', 'dl']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[edx+10h]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_40]']
mov ['edx,', '[edx]']
mov ['[ecx+edx],', 'al']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '0FFh']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+var_40]']
mov ['edx,', '[edx]']
mov ['[eax+edx],', 'cl']
mov ['eax,', '1']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx]']
mov ['byte', 'ptr', '[eax+edx],', '0']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '18h']
mov ['[ebp+var_40],', 'eax']
jmp ['loc_8BF6']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_44],', 'edx']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_8D11']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_44]']
add ['ecx,', '8']
mov ['[ebp+var_44],', 'ecx']
movzx ['edx,', '[ebp+var_4C]']
cmp ['[ebp+var_2C],', 'edx']
jge ['loc_8DAA']
movzx ['eax,', '[ebp+var_50]']
lea ['ecx,', 'ds:4[eax*4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8D44']
jmp ['$Exit$50']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['ecx,', 'ax']
mov ['edx,', '[ebp+var_44]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
mov ['[ebp+var_30],', '0']
jmp ['short', 'loc_8D77']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
movzx ['edx,', '[ebp+var_50]']
cmp ['[ebp+var_30],', 'edx']
jge ['short', 'loc_8D99']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_GetULong']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_30]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_8D6E']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
jmp ['loc_8CFF']
cmp ['[ebp+arg_4],', '0']
jz ['$Exit$50']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2A4h]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_8DDF']
jmp ['$Exit$50']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2A4h]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2A4h]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '14h']
shl ['eax,', '0']
add ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+Dst]']
imul ['eax,', '[edx],', '18h']
mov ['ecx,', '[ebp+Dst]']
add ['eax,', '[ecx+0Ch]']
mov ['edx,', '[ebp+Dst]']
mov ['[edx+10h],', 'eax']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[edx+10h]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_7C],', '0']
jmp ['short', 'loc_8E4C']
mov ['edx,', '[ebp+var_7C]']
add ['edx,', '1']
mov ['[ebp+var_7C],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_7C]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_8E76']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+var_7C]']
mov ['edx,', '[ebp+var_38]']
mov ['[eax+ecx*8],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_38]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_8E43']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_3C],', 'eax']
mov ['[ebp+var_7C],', '0']
jmp ['short', 'loc_8E97']
mov ['ecx,', '[ebp+var_7C]']
add ['ecx,', '1']
mov ['[ebp+var_7C],', 'ecx']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[ebp+var_7C]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_8F1A']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ebp+var_3C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_40]']
cmp ['dword', 'ptr', '[eax+10h],', '77676874h']
jnz ['short', 'loc_8EC0']
mov ['ecx,', '[ebp+var_40]']
mov ['dword', 'ptr', '[ecx],', 'offset', '$SG13857']
jmp ['short', 'loc_8F03']
mov ['edx,', '[ebp+var_40]']
cmp ['dword', 'ptr', '[edx+10h],', '77647468h']
jnz ['short', 'loc_8ED7']
mov ['eax,', '[ebp+var_40]']
mov ['dword', 'ptr', '[eax],', 'offset', '$SG13866']
jmp ['short', 'loc_8F03']
mov ['ecx,', '[ebp+var_40]']
cmp ['dword', 'ptr', '[ecx+10h],', '6F70737Ah']
jnz ['short', 'loc_8EEE']
mov ['edx,', '[ebp+var_40]']
mov ['dword', 'ptr', '[edx],', 'offset', '$SG13875']
jmp ['short', 'loc_8F03']
mov ['eax,', '[ebp+var_40]']
cmp ['dword', 'ptr', '[eax+10h],', '736C6E74h']
jnz ['short', 'loc_8F03']
mov ['ecx,', '[ebp+var_40]']
mov ['dword', 'ptr', '[ecx],', 'offset', '$SG13884']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '5']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '18h']
mov ['[ebp+var_40],', 'eax']
jmp ['loc_8E8E']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+Dst]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN49_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN48_0']
dd ['offset', '$LN44_1']
dd ['0FFFFFFE0h,', '4']
dd ['offset', '$LN45_1']
dd ['0FFFFFFA8h,', '10h']
dd ['offset', '$LN46_1']
dd ['0FFFFFF8Ch,', '14h']
dd ['offset', '$LN47_0']
db ['0Dh', 'dup(0CCh)']
endp
_tt_face_vary_cvt proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '6Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_6C]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_38],', '0']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_40],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2A4h]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '5']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_9017']
push ['offset', '$SG14023']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_8FF9']
cmp ['[ebp+var_44],', '0']
jnz ['short', 'loc_904F']
mov ['eax,', '4']
shl ['eax,', '5']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '2']
jl ['short', 'loc_903F']
push ['offset', '$SG14030']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9021']
mov ['[ebp+var_8],', '0']
jmp ['$Exit$85']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+288h],', '0']
jnz ['short', 'loc_9089']
mov ['eax,', '4']
shl ['eax,', '5']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '2']
jl ['short', 'loc_9079']
push ['offset', '$SG14038']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_905B']
mov ['[ebp+var_8],', '0']
jmp ['$Exit$85']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['63766172h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1FCh]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_90E8']
mov ['ecx,', '4']
shl ['ecx,', '5']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_90D8']
push ['offset', '$SG14049']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_90BA']
mov ['[ebp+var_8],', '0']
jmp ['$Exit$85']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_910D']
mov ['[ebp+var_8],', '0']
jmp ['$Exit$85']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[edx+20h]']
sub ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_GetULong']
add ['esp,', '4']
cmp ['eax,', '(offset', 'loc_FFFF+1)']
jz ['short', 'loc_915C']
mov ['eax,', '4']
shl ['eax,', '5']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '2']
jl ['short', 'loc_914C']
push ['offset', '$SG14059']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_912E']
mov ['[ebp+var_8],', '0']
jmp ['$FExit$86']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[eax]']
push ['ecx']
push ['0']
push ['4']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_91CB']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ecx]']
push ['edx']
push ['0']
push ['4']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_91CB']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_44]']
mov ['eax,', '[edx]']
push ['eax']
push ['0']
push ['4']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_91D0']
jmp ['$FExit$86']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['eax,', 'ax']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['edx,', 'ax']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_30],', '0']
jmp ['short', 'loc_9209']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_24]']
and ['ecx,', '0FFFh']
cmp ['[ebp+var_30],', 'ecx']
jnb ['$FExit$86']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['eax,', 'ax']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['edx,', 'ax']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+var_60]']
and ['eax,', '8000h']
jz ['short', 'loc_9284']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_925B']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_44]']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_9282']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['edx,', 'ax']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_38]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_9252']
jmp ['short', 'loc_92C9']
mov ['edx,', '[ebp+var_60]']
and ['edx,', '4000h']
jz ['short', 'loc_92BB']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_92A1']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ecx]']
shl ['edx,', '1']
cmp ['[ebp+var_34],', 'edx']
jnb ['short', 'loc_92BB']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
jmp ['short', 'loc_9298']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '[ebp+var_5C]']
mov ['[ebp+var_28],', 'ecx']
jmp ['loc_9200']
mov ['edx,', '[ebp+var_60]']
and ['edx,', '4000h']
jz ['short', 'loc_9346']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_92E6']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ebp+var_34]']
cmp ['edx,', '[ecx]']
jnb ['short', 'loc_930D']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['ecx,', 'ax']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_3C]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_92DD']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_931F']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_44]']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_9346']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['edx,', 'ax']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_40]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_9316']
mov ['edx,', '[ebp+var_40]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_60]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
call ['_ft_var_apply_tuple']
add ['esp,', '14h']
mov ['[ebp+var_64],', 'eax']
cmp ['[ebp+var_64],', '0']
jz ['short', 'loc_9377']
mov ['ecx,', '[ebp+var_60]']
and ['ecx,', '2000h']
jnz ['short', 'loc_9385']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_28],', 'edx']
jmp ['loc_9200']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax+20h]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+20h],', 'ecx']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ft_var_readpackedpoints']
add ['esp,', '8']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_4C],', '0']
jnz ['short', 'loc_93C8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+284h]']
mov ['[ebp+var_6C],', 'eax']
jmp ['short', 'loc_93CE']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_6C],', 'ecx']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ft_var_readpackeddeltas']
add ['esp,', '8']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_54],', '0']
jz ['short', 'loc_93ED']
cmp ['[ebp+var_58],', '0']
jnz ['short', 'loc_93F2']
jmp ['loc_94B7']
cmp ['[ebp+var_54],', '0FFFFFFFFh']
jnz ['short', 'loc_9455']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_940A']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[edx+284h]']
jnb ['short', 'loc_9453']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+288h]']
mov ['eax,', '[ebp+var_34]']
movsx ['esi,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_58]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+288h]']
mov ['ecx,', '[ebp+var_34]']
mov ['[eax+ecx*2],', 'si']
jmp ['short', 'loc_9401']
jmp ['short', 'loc_94B7']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_9467']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_4C]']
jnb ['short', 'loc_94B7']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_54]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['[ebp+var_68],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+288h]']
mov ['eax,', '[ebp+var_68]']
movsx ['esi,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_58]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+288h]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax+ecx*2],', 'si']
jmp ['short', 'loc_945E']
cmp ['[ebp+var_54],', '0FFFFFFFFh']
jz ['short', 'loc_94D8']
mov ['edx,', '[ebp+var_54]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_54],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_94BD']
mov ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_58],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_94D8']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+20h],', 'ecx']
jmp ['loc_9200']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_38],', '0']
xor ['eax,', 'eax']
jnz ['short', '$Exit$85']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_3C],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_9536']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_40],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_9551']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN84_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '6Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN83']
dd ['offset', '$LN80_0']
dd ['0FFFFFFE4h,', '4']
dd ['offset', '$LN81_0']
dd ['0FFFFFFB4h,', '4']
dd ['offset', '$LN82']
endp
_TT_Vary_Get_Glyph_Deltas proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '80h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_80]']
mov ['ecx,', '20h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2A4h]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_10],', '0']
mov ['[ebp+Dst],', '0']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_5C],', '0']
mov ['[ebp+var_60],', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2A0h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_9655']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_9671']
push ['offset', '$SG14188']
push ['530h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_9C8C']
lea ['edx,', '[ebp+var_18]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
push ['8']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_9699']
jmp ['$Exit$77']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+20h]']
jnb ['short', 'loc_96C7']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+24h]']
mov ['edx,', '[ebp+arg_4]']
mov ['esi,', '[ebp+arg_4]']
mov ['ecx,', '[ecx+edx*4]']
cmp ['ecx,', '[eax+esi*4+4]']
jnz ['short', 'loc_96CE']
xor ['eax,', 'eax']
jmp ['loc_9C8C']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_971F']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+24h]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+24h]']
mov ['eax,', '[ebp+arg_4]']
mov ['esi,', '[ebp+arg_4]']
mov ['edx,', '[edx+eax*4+4]']
sub ['edx,', '[ecx+esi*4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_9724']
jmp ['$Fail1$78']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+20h]']
sub ['eax,', '[edx]']
mov ['[ebp+var_20],', 'eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
push ['eax']
push ['0']
push ['4']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_97A1']
lea ['edx,', '[ebp+var_18]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
push ['ecx']
push ['0']
push ['4']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_97A1']
lea ['eax,', '[ebp+var_18]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
push ['edx']
push ['0']
push ['4']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_97A6']
jmp ['$Fail2$79']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['edx,', 'ax']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['ecx,', 'ax']
add ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_24]']
and ['edx,', '8000h']
jz ['short', 'loc_9823']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+20h]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+20h],', 'ecx']
lea ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_var_readpackedpoints']
add ['esp,', '8']
mov ['[ebp+var_5C],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+20h]']
sub ['ecx,', '[eax]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'eax']
mov ['[ebp+var_30],', '0']
jmp ['short', 'loc_9835']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_24]']
and ['eax,', '0FFFh']
cmp ['[ebp+var_30],', 'eax']
jnb ['$Fail3$80']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['edx,', 'ax']
mov ['[ebp+var_70],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['ecx,', 'ax']
mov ['[ebp+var_74],', 'ecx']
mov ['edx,', '[ebp+var_74]']
and ['edx,', '8000h']
jz ['short', 'loc_98B0']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_9887']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_34]']
cmp ['edx,', '[ecx]']
jnb ['short', 'loc_98AE']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['ecx,', 'ax']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+Dst]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_987E']
jmp ['short', 'loc_9910']
mov ['ecx,', '[ebp+var_74]']
and ['ecx,', '0FFFh']
mov ['edx,', '[ebp+var_C]']
cmp ['ecx,', '[edx+18h]']
jb ['short', 'loc_98E2']
push ['offset', '$SG14230']
push ['56Ch']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_18],', 'eax']
jmp ['$Fail3$80']
jmp ['short', 'loc_9910']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_74]']
and ['edx,', '0FFFh']
mov ['eax,', '[ebp+var_C]']
imul ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[ecx+1Ch]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_74]']
and ['eax,', '4000h']
jz ['short', 'loc_998A']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_992C']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_9953']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['edx,', 'ax']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_9923']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_9965']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_34]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_998A']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
cwde
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_40]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_995C']
mov ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_ft_var_apply_tuple']
add ['esp,', '14h']
mov ['[ebp+var_78],', 'eax']
cmp ['[ebp+var_78],', '0']
jnz ['short', 'loc_99BE']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '[ebp+var_70]']
mov ['[ebp+var_28],', 'edx']
jmp ['loc_982C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+20h]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_74]']
and ['eax,', '2000h']
jz ['short', 'loc_99FF']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+20h],', 'edx']
lea ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_var_readpackedpoints']
add ['esp,', '8']
mov ['[ebp+var_60],', 'eax']
mov ['eax,', '[ebp+var_60]']
mov ['[ebp+var_64],', 'eax']
jmp ['short', 'loc_9A0B']
mov ['ecx,', '[ebp+var_5C]']
mov ['[ebp+var_64],', 'ecx']
mov ['edx,', '[ebp+var_54]']
mov ['[ebp+var_48],', 'edx']
cmp ['[ebp+var_48],', '0']
jnz ['short', 'loc_9A19']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_9A1F']
mov ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_7C],', 'ecx']
mov ['edx,', '[ebp+var_7C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_var_readpackeddeltas']
add ['esp,', '8']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_48],', '0']
jnz ['short', 'loc_9A40']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_80],', 'ecx']
jmp ['short', 'loc_9A46']
mov ['edx,', '[ebp+var_48]']
mov ['[ebp+var_80],', 'edx']
mov ['eax,', '[ebp+var_80]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_var_readpackeddeltas']
add ['esp,', '8']
mov ['[ebp+var_6C],', 'eax']
cmp ['[ebp+var_64],', '0']
jz ['short', 'loc_9A6B']
cmp ['[ebp+var_6C],', '0']
jz ['short', 'loc_9A6B']
cmp ['[ebp+var_68],', '0']
jnz ['short', 'loc_9A70']
jmp ['loc_9B8F']
cmp ['[ebp+var_64],', '0FFFFFFFFh']
jnz ['short', 'loc_9AEB']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_9A88']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_9AE6']
mov ['ecx,', '[ebp+var_78]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_68]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_10]']
add ['eax,', '[ecx+edx*8]']
mov ['edx,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+edx*8],', 'eax']
mov ['edx,', '[ebp+var_78]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_6C]']
movsx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+ecx*8+4]']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+ecx*8+4],', 'eax']
jmp ['short', 'loc_9A7F']
jmp ['loc_9B8F']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_9AFD']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
cmp ['ecx,', '[ebp+var_48]']
jnb ['loc_9B8F']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_60]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
cmp ['ecx,', '[ebp+arg_C]']
jb ['short', 'loc_9B1A']
jmp ['short', 'loc_9AF4']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_60]']
movzx ['esi,', 'word', 'ptr', '[eax+edx*2]']
mov ['ecx,', '[ebp+var_78]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_68]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+var_10]']
add ['eax,', '[edx+esi*8]']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_60]']
movzx ['ecx,', 'word', 'ptr', '[edx+ecx*2]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+ecx*8],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_60]']
movzx ['esi,', 'word', 'ptr', '[ecx+eax*2]']
mov ['edx,', '[ebp+var_78]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_6C]']
movsx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_10]']
add ['eax,', '[ecx+esi*8+4]']
mov ['edx,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_60]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+edx*8+4],', 'eax']
jmp ['loc_9AF4']
cmp ['[ebp+var_60],', '0FFFFFFFFh']
jz ['short', 'loc_9BB0']
mov ['edx,', '[ebp+var_60]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_60],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9B95']
mov ['edx,', '[ebp+var_68]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_68],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9BB0']
mov ['edx,', '[ebp+var_6C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_6C],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9BCB']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '[ebp+var_70]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+20h],', 'ecx']
jmp ['loc_982C']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+Dst],', '0']
xor ['edx,', 'edx']
jnz ['short', '$Fail3$80']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_3C],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_9C1D']
mov ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_40],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_9C38']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
cmp ['[ebp+var_18],', '0']
jz ['short', '$Exit$77']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_10],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_9C65']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['eax,', '[ebp+var_18]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN76_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '80h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN75_0']
dd ['offset', '$LN72_0']
dd ['0FFFFFFB8h,', '4']
dd ['offset', '$LN73_0']
dd ['0FFFFFFACh,', '4']
dd ['offset', '$LN74_0']
db ['0Dh', 'dup(0CCh)']
endp
_tt_done_blend	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['loc_9E33']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9D1D']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_9D3E']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+14h],', '0']
jz ['short', 'loc_9DD6']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_9D7A']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_9DB5']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+ecx*8+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+eax*8+4],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9D84']
jmp ['short', 'loc_9D71']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+14h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_9DB5']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_9DD6']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+24h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9DF7']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_4],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9E18']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_tt_property_set proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
push ['offset', '$SG8744']
mov ['ecx,', '[ebp+Str1]']
push ['ecx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_9EAC']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax],', '23h']
jz ['short', 'loc_9E9C']
mov ['[ebp+var_4],', '7']
jmp ['short', 'loc_9EA7']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['[ecx+44h],', 'eax']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_9EE6']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Bh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '0']
jl ['short', 'loc_9ECE']
mov ['eax,', '[ebp+Str1]']
push ['eax']
push ['offset', '$SG8753']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9EAC']
push ['offset', '$SG8754']
push ['57h']
push ['0Ch']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ch']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_tt_property_get proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+44h]']
mov ['[ebp+var_C],', 'edx']
push ['offset', '$SG8768']
mov ['eax,', '[ebp+Str1]']
push ['eax']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_9F4D']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_9F87']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Bh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '0']
jl ['short', 'loc_9F6F']
mov ['eax,', '[ebp+Str1]']
push ['eax']
push ['offset', '$SG8775']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9F4D']
push ['offset', '$SG8776']
push ['72h']
push ['0Ch']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ch']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_tt_get_kerning	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+214h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[ecx+4],', '0']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_9FFD']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+54h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_tt_get_advances proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '10h']
jz ['short', 'loc_A084']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_A04E']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['short', 'loc_A082']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_TT_Get_VMetrics']
add ['esp,', '14h']
movzx ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_A045']
jmp ['short', 'loc_A0C8']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_A096']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['short', 'loc_A0C8']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_TT_Get_HMetrics']
add ['esp,', '10h']
movzx ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_A08D']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN15_0']
dd ['offset', '$LN11_0']
dd ['0FFFFFFE4h,', '2']
dd ['offset', '$LN12']
dd ['0FFFFFFD8h,', '2']
dd ['offset', '$LN13']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['2']
dd ['offset', '$LN14_0']
db ['73h,', '62h,', '0']
db ['68h,', '0']
dd ['0CCCC0062h,', '0CCCCCCCCh']
endp
_tt_size_select	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+70h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '1']
jz ['short', 'loc_A19E']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_FT_Select_Metrics']
add ['esp,', '8']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_tt_size_reset']
add ['esp,', '4']
jmp ['short', 'loc_A1E6']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+214h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '0Ch']
mov ['[ebp+var_14],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+6Ch]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_A1E6']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+70h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_C]']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_tt_size_request proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
and ['eax,', '2']
jz ['short', 'loc_A28F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+214h]']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+68h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A27D']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+70h],', '0FFFFFFFFh']
jmp ['short', 'loc_A28F']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_tt_size_select']
add ['esp,', '8']
jmp ['short', 'loc_A2D3']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_Request_Metrics']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
and ['eax,', '1']
jz ['short', 'loc_A2D0']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_tt_size_reset']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', '[ebp+var_4]']
add ['esi,', '2Ch']
mov ['edi,', '[ebp+var_4]']
add ['edi,', '0Ch']
mov ['ecx,', '7']
rep ['movsd']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN8_1']
dd ['offset', '$LN7_3']
align ['4']
endp
_tt_glyph_load	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_A366']
push ['offset', '$SG8874']
push ['16Fh']
push ['25h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '25h']
jmp ['loc_A458']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_A388']
push ['offset', '$SG8876']
push ['172h']
push ['24h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '24h']
jmp ['loc_A458']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_A3AA']
push ['offset', '$SG8878']
push ['175h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_A458']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ecx+10h]']
jb ['short', 'loc_A3DD']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+80h]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jnz ['short', 'loc_A3DD']
push ['offset', '$SG8881']
push ['17Dh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_A458']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '2']
jz ['short', 'loc_A40F']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '2000h']
jz ['short', 'loc_A3FC']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '0FFFFFFFDh']
mov ['[ebp+arg_C],', 'edx']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '8000h']
jz ['short', 'loc_A40F']
mov ['ecx,', '[ebp+arg_C]']
or ['ecx,', '2']
mov ['[ebp+arg_C],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '401h']
jz ['short', 'loc_A43A']
mov ['eax,', '[ebp+arg_C]']
or ['eax,', '9']
mov ['[ebp+arg_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+8]']
and ['edx,', '2000h']
jnz ['short', 'loc_A43A']
mov ['eax,', '[ebp+arg_C]']
or ['eax,', '2']
mov ['[ebp+arg_C],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_TT_Load_Glyph']
add ['esp,', '10h']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_tt_get_interface proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '_tt_services']
call ['_ft_service_list_lookup']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A49F']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_A507']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A4A9']
xor ['eax,', 'eax']
jmp ['short', 'loc_A507']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_A4BC']
xor ['eax,', 'eax']
jmp ['short', 'loc_A507']
push ['offset', '$SG8923']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Get_Module']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_A505']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+14h]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_A505']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+10h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_A507']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_MulFix_i386	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
imul ['edx']
mov ['ecx,', 'edx']
sar ['ecx,', '1Fh']
add ['ecx,', '8000h']
add ['eax,', 'ecx']
adc ['edx,', '0']
shr ['eax,', '10h']
shl ['edx,', '10h']
add ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_tt_get_metrics	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '40h']
push ['edi']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_C],', 'eax']
xor ['ecx,', 'ecx']
mov ['[ebp+var_14],', 'cx']
xor ['edx,', 'edx']
mov ['[ebp+var_20],', 'dx']
xor ['eax,', 'eax']
mov ['[ebp+var_2C],', 'ax']
xor ['ecx,', 'ecx']
mov ['[ebp+var_38],', 'cx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Stream_Pos']
add ['esp,', '4']
mov ['[ebp+var_40],', 'eax']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_TT_Get_HMetrics']
add ['esp,', '10h']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_TT_Get_VMetrics']
add ['esp,', '14h']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A5FB']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_A647']
movsx ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
movzx ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+38h],', 'edx']
movsx ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0B0h],', 'ecx']
movzx ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0B4h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+40h]']
test ['eax,', 'eax']
jnz ['short', 'loc_A645']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+40h],', '1']
movzx ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+3Ch],', 'edx']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_2']
dd ['offset', '$LN5_1']
dd ['0FFFFFFE0h,', '2']
dd ['offset', '$LN6_2']
dd ['0FFFFFFD4h,', '2']
dd ['offset', '$LN7_4']
dd ['0FFFFFFC8h,', '2']
dd ['offset', '$LN8_2']
align ['4']
endp
_tt_get_metrics_incr_overrides proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
mov ['[ebp+var_C],', 'dx']
xor ['eax,', 'eax']
mov ['[ebp+var_10],', 'ax']
xor ['ecx,', 'ecx']
mov ['[ebp+var_14],', 'cx']
xor ['edx,', 'edx']
mov ['[ebp+var_18],', 'dx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+80h]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jz ['$Exit$9']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+80h]']
mov ['ecx,', '[eax+30h]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['$Exit$9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ecx+30h]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[edx+30h]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_A7A8']
jmp ['short', '$Exit$9']
mov ['ax,', 'word', 'ptr', '[ebp+var_2C]']
mov ['[ebp+var_C],', 'ax']
mov ['cx,', 'word', 'ptr', '[ebp+var_24]']
mov ['[ebp+var_14],', 'cx']
movsx ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+34h],', 'edx']
movzx ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+38h],', 'ecx']
movsx ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0B0h],', 'eax']
movzx ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0B4h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+40h]']
test ['edx,', 'edx']
jnz ['short', '$Exit$9']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+40h],', '1']
movzx ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+3Ch],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN7_5']
dd ['offset', '$LN6_3']
db ['0Ch', 'dup(0CCh)']
endp
_translate_array proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_A89A']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_A87B']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_A89A']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx*8]']
add ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+edx*8],', 'ecx']
jmp ['short', 'loc_A872']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_A8D3']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_A8B2']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnb ['short', 'loc_A8D3']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax*8+4]']
add ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+eax*8+4],', 'edx']
jmp ['short', 'loc_A8A9']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_TT_Access_Glyph_Frame proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_A91D']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['offset', '$SG9560']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_A8FB']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_A953']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_A958']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_A978']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+20h]']
mov ['[edx+0C8h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+24h]']
mov ['[edx+0CCh],', 'ecx']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_TT_Forget_Glyph_Frame proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_TT_Load_Glyph_Header proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0C8h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0CCh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ah']
cmp ['ecx,', '[ebp+var_8]']
jbe ['short', 'loc_AA0B']
push ['offset', '$SG9577']
push ['142h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_ABB4']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '2']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+20h],', 'ax']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '2']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+30h],', 'eax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_AB42']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+20h]']
push ['edx']
push ['offset', '$SG9612']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_AB1C']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_AB72']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
push ['eax']
push ['offset', '$SG9617']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_AB46']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_ABA2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
push ['offset', '$SG9622']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_AB76']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+0C8h],', 'ecx']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_TT_Load_Simple_Glyph proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '6Ch']
push ['edi']
lea ['edi,', '[ebp+var_6C]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0C8h]']
mov ['[ebp+Src],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0CCh]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+20h]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_54],', '0']
mov ['edx,', '1']
test ['edx,', 'edx']
jz ['short', 'loc_AC43']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_AC3A']
mov ['eax,', '[ebp+var_10]']
movsx ['ecx,', 'word', 'ptr', '[eax+14h]']
mov ['edx,', '[ebp+var_10]']
movsx ['eax,', 'word', 'ptr', '[edx+38h]']
add ['ecx,', '[ebp+var_14]']
add ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_10]']
cmp ['eax,', '[ecx+8]']
ja ['short', 'loc_AC43']
mov ['[ebp+var_68],', '0']
jmp ['short', 'loc_AC58']
mov ['edx,', '[ebp+var_14]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_68],', 'eax']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_AC69']
jmp ['$Fail$68']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+44h]']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_48]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_4C],', 'eax']
cmp ['[ebp+var_14],', '0FFFh']
jge ['short', 'loc_AC96']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+Src]']
lea ['eax,', '[edx+ecx*2+2]']
cmp ['eax,', '[ebp+var_C]']
jbe ['short', 'loc_AC9B']
jmp ['$Invalid_Outline$69']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '2']
mov ['[ebp+Src],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+Src]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
mov ['[ebp+var_50],', 'dx']
cmp ['[ebp+var_14],', '0']
jle ['short', 'loc_ACE6']
mov ['ecx,', '2']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['cx,', '[ebp+var_50]']
mov ['[eax+edx],', 'cx']
movsx ['edx,', '[ebp+var_50]']
test ['edx,', 'edx']
jge ['short', 'loc_ACF3']
jmp ['$Invalid_Outline$69']
mov ['eax,', '[ebp+var_48]']
add ['eax,', '2']
mov ['[ebp+var_48],', 'eax']
jmp ['short', 'loc_AD07']
mov ['ecx,', '[ebp+var_48]']
add ['ecx,', '2']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+var_48]']
cmp ['edx,', '[ebp+var_4C]']
jnb ['short', 'loc_AD7D']
mov ['eax,', '[ebp+Src]']
add ['eax,', '2']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+Src]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
mov ['eax,', '2']
imul ['edx,', 'eax,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['[eax+edx],', 'cx']
mov ['ecx,', '2']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx]']
movsx ['edx,', '[ebp+var_50]']
cmp ['ecx,', 'edx']
jg ['short', 'loc_AD68']
jmp ['$Invalid_Outline$69']
mov ['eax,', '2']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_50],', 'ax']
jmp ['short', 'loc_ACFE']
mov ['[ebp+var_20],', '0']
cmp ['[ebp+var_14],', '0']
jle ['short', 'loc_ADA6']
mov ['ecx,', '2']
imul ['edx,', 'ecx,', '-1']
mov ['eax,', '[ebp+var_48]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
jns ['short', 'loc_ADA6']
jmp ['$Invalid_Outline$69']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '4']
jz ['short', 'loc_ADCD']
mov ['eax,', '[ebp+var_10]']
movsx ['ecx,', 'word', 'ptr', '[eax+16h]']
mov ['edx,', '[ebp+var_10]']
movsx ['eax,', 'word', 'ptr', '[edx+3Ah]']
add ['ecx,', 'eax']
mov ['edx,', '[ebp+var_20]']
lea ['eax,', '[ecx+edx+4]']
mov ['ecx,', '[ebp+var_10]']
cmp ['eax,', '[ecx+4]']
ja ['short', 'loc_ADDF']
mov ['edx,', '1']
test ['edx,', 'edx']
jz ['short', 'loc_ADDF']
mov ['[ebp+var_6C],', '0']
jmp ['short', 'loc_ADF7']
push ['0']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_6C],', 'eax']
mov ['edx,', '[ebp+var_6C]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_AE08']
jmp ['$Fail$68']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dword', 'ptr', '[ecx+8Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['dword', 'ptr', '[eax+88h],', '0']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+var_C]']
jbe ['short', 'loc_AE38']
jmp ['$Invalid_Outline$69']
mov ['edx,', '[ebp+Src]']
add ['edx,', '2']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
mov ['[ebp+var_1C],', 'ax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_AE8D']
movzx ['ecx,', '[ebp+var_1C]']
push ['ecx']
push ['offset', '$SG9688']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_AE6A']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '[ebp+Src]']
movzx ['ecx,', '[ebp+var_1C]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_AEE0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '0']
jl ['short', 'loc_AEBD']
push ['offset', '$SG9694']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_AE9F']
push ['offset', '$SG9695']
push ['1A7h']
push ['16h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '16h']
mov ['[ebp+var_4],', 'eax']
jmp ['$Fail$68']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
and ['eax,', '2']
jnz ['loc_AFA0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A0h]']
mov ['eax,', '[edx+184h]']
mov ['[ebp+var_28],', 'eax']
movzx ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
add ['eax,', '188h']
push ['eax']
push ['1']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_Update_Max']
add ['esp,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_28]']
mov ['[eax+184h],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_AF54']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_B2DC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
movzx ['ecx,', '[ebp+var_1C]']
mov ['[eax+8Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[eax+188h]']
mov ['[edx+88h],', 'eax']
movzx ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A0h]']
mov ['edx,', '[ecx+188h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
movzx ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+Src]']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '38h']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_34],', 'ecx']
cmp ['[ebp+var_30],', '0']
jnz ['short', 'loc_AFE2']
push ['offset', '$SG9708']
push ['1CDh']
push ['offset', '$SG9709']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_AFC5']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_34]']
jnb ['loc_B08A']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+var_C]']
jbe ['short', 'loc_B002']
jmp ['$Invalid_Outline$69']
mov ['edx,', '[ebp+Src]']
mov ['al,', '[edx]']
mov ['[ebp+var_35],', 'al']
mov ['ecx,', '[ebp+var_30]']
mov ['dl,', '[ebp+var_35]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '1']
mov ['[ebp+Src],', 'ecx']
movzx ['edx,', '[ebp+var_35]']
and ['edx,', '8']
jz ['short', 'loc_B085']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_C]']
jbe ['short', 'loc_B03D']
jmp ['$Invalid_Outline$69']
mov ['ecx,', '[ebp+Src]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_36],', 'dl']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
mov ['[ebp+Src],', 'eax']
movzx ['ecx,', '[ebp+var_36]']
add ['ecx,', '[ebp+var_30]']
cmp ['ecx,', '[ebp+var_34]']
jbe ['short', 'loc_B05F']
jmp ['$Invalid_Outline$69']
jmp ['short', 'loc_B06A']
mov ['dl,', '[ebp+var_36]']
sub ['dl,', '1']
mov ['[ebp+var_36],', 'dl']
movzx ['eax,', '[ebp+var_36]']
test ['eax,', 'eax']
jle ['short', 'loc_B085']
mov ['ecx,', '[ebp+var_30]']
mov ['dl,', '[ebp+var_35]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
jmp ['short', 'loc_B061']
jmp ['loc_AFE6']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_3C]']
lea ['edx,', '[ecx+eax*8]']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_30],', 'ecx']
mov ['[ebp+var_44],', '0']
mov ['edx,', '[ebp+Src]']
add ['edx,', '[ebp+var_54]']
cmp ['edx,', '[ebp+var_C]']
jbe ['short', 'loc_B0BF']
jmp ['$Invalid_Outline$69']
jmp ['short', 'loc_B0D3']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '8']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
cmp ['edx,', '[ebp+var_40]']
jnb ['loc_B19B']
mov ['[ebp+var_58],', '0']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[eax]']
mov ['[ebp+var_59],', 'cl']
movzx ['edx,', '[ebp+var_59]']
and ['edx,', '2']
jz ['short', 'loc_B12C']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_C]']
jbe ['short', 'loc_B107']
jmp ['$Invalid_Outline$69']
mov ['ecx,', '[ebp+Src]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_58],', 'edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
mov ['[ebp+Src],', 'eax']
movzx ['ecx,', '[ebp+var_59]']
and ['ecx,', '10h']
jnz ['short', 'loc_B12A']
mov ['edx,', '[ebp+var_58]']
neg ['edx']
mov ['[ebp+var_58],', 'edx']
jmp ['short', 'loc_B179']
movzx ['eax,', '[ebp+var_59]']
and ['eax,', '10h']
jnz ['short', 'loc_B179']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+var_C]']
jbe ['short', 'loc_B145']
jmp ['$Invalid_Outline$69']
mov ['edx,', '[ebp+Src]']
add ['edx,', '2']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['[ebp+var_58],', 'edx']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_58]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx],', 'edx']
movzx ['eax,', '[ebp+var_59]']
and ['eax,', '0FFFFFFEDh']
mov ['ecx,', '[ebp+var_30]']
mov ['[ecx],', 'al']
jmp ['loc_B0C1']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+3Ch]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_3C]']
lea ['eax,', '[edx+ecx*8]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_30],', 'edx']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_B1D4']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '8']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
cmp ['edx,', '[ebp+var_40]']
jnb ['loc_B29A']
mov ['[ebp+var_60],', '0']
mov ['eax,', '[ebp+var_30]']
mov ['cl,', '[eax]']
mov ['[ebp+var_61],', 'cl']
movzx ['edx,', '[ebp+var_61]']
and ['edx,', '4']
jz ['short', 'loc_B22D']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
cmp ['eax,', '[ebp+var_C]']
jbe ['short', 'loc_B208']
jmp ['$Invalid_Outline$69']
mov ['ecx,', '[ebp+Src]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
mov ['[ebp+Src],', 'eax']
movzx ['ecx,', '[ebp+var_61]']
and ['ecx,', '20h']
jnz ['short', 'loc_B22B']
mov ['edx,', '[ebp+var_60]']
neg ['edx']
mov ['[ebp+var_60],', 'edx']
jmp ['short', 'loc_B277']
movzx ['eax,', '[ebp+var_61]']
and ['eax,', '20h']
jnz ['short', 'loc_B277']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+var_C]']
jbe ['short', 'loc_B243']
jmp ['short', '$Invalid_Outline$69']
mov ['edx,', '[ebp+Src]']
add ['edx,', '2']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_60]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+4],', 'edx']
movzx ['eax,', '[ebp+var_61]']
and ['eax,', '1']
mov ['ecx,', '[ebp+var_30]']
mov ['[ecx],', 'al']
jmp ['loc_B1C2']
mov ['edx,', '[ebp+var_18]']
mov ['ax,', 'word', 'ptr', '[ebp+var_20]']
mov ['[edx+2],', 'ax']
mov ['ecx,', '[ebp+var_18]']
mov ['dx,', 'word', 'ptr', '[ebp+var_14]']
mov ['[ecx],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Src]']
mov ['[eax+0C8h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_B2DC']
push ['offset', '$SG9770']
push ['237h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', '$Fail$68']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN67']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '6Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN66']
dd ['offset', '$LN65_0']
endp
_TT_Load_Composite_Glyph proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0C8h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0CCh]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_10],', 'edx']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_FT_GlyphLoader_CheckSubGlyphs']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_B377']
jmp ['$Fail$22']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
cmp ['edx,', '[ebp+var_C]']
jbe ['short', 'loc_B387']
jmp ['$Invalid_Composite$23']
mov ['eax,', '[ebp+var_18]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_10]']
add ['eax,', '[ecx+58h]']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '2']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'dx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['eax,', '[ebp+var_14]']
mov ['[eax],', 'edx']
mov ['[ebp+var_2C],', '2']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '1']
jz ['short', 'loc_B431']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '2']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '8']
jz ['short', 'loc_B448']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '2']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_B477']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '40h']
jz ['short', 'loc_B45F']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '4']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_B477']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '80h']
jz ['short', 'loc_B477']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '8']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[ebp+var_C]']
jbe ['short', 'loc_B487']
jmp ['$Invalid_Composite$23']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
and ['eax,', '1']
jz ['short', 'loc_B503']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '2']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_B52D']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_24],', '(offset', 'loc_FFFF+1)']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_28],', '0']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '8']
jz ['short', 'loc_B595']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
shl ['edx,', '2']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_24],', 'eax']
jmp ['loc_B702']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '40h']
jz ['short', 'loc_B614']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
shl ['eax,', '2']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '2']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
shl ['ecx,', '2']
mov ['[ebp+var_24],', 'ecx']
jmp ['loc_B702']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
and ['eax,', '80h']
jz ['loc_B702']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '2']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
shl ['ecx,', '2']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
shl ['edx,', '2']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
shl ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '2']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
shl ['ecx,', '2']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_28]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
and ['eax,', '20h']
jnz ['loc_B356']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+54h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
call ['_FT_Stream_Pos']
add ['esp,', '4']
add ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0A8h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+0C8h],', 'eax']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_B799']
push ['offset', '$SG9884']
push ['2B0h']
push ['15h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '15h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', '$Fail$22']
pop ['edi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_tt_prepare_zone proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
sub ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'cx']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
sub ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ah],', 'cx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+arg_8]']
lea ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_8]']
lea ['edx,', '[eax+ecx*8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[ebp+arg_8]']
lea ['ecx,', '[edx+eax*8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+18h],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', 'word', 'ptr', '[ebp+arg_8]']
mov ['[edx+20h],', 'ax']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_TT_Hint_Glyph	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '7Ch']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
cmp ['dword', 'ptr', '[edx+8Ch],', '0FFFFh']
jle ['short', 'loc_B8BB']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_B888']
push ['offset', '$SG9916']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_B86A']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_B8B7']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[eax+8Ch]']
push ['ecx']
push ['offset', '$SG9921']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_B88C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ecx+8Ch]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jbe ['short', 'loc_B8F1']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
shl ['ecx,', '3']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['esi,', '[eax+4]']
add ['esi,', '0ACh']
mov ['ecx,', '[ebp+arg_0]']
mov ['edi,', '[ecx+0A0h]']
add ['edi,', '11Ch']
mov ['ecx,', '11h']
rep ['movsd']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_B964']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A0h]']
mov ['dword', 'ptr', '[ecx+0DCh],', '(offset', 'loc_FFFF+1)']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['dword', 'ptr', '[eax+0E0h],', '(offset', 'loc_FFFF+1)']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
shl ['edx,', '3']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_B994']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A0h]']
mov ['edx,', '[edx+30h]']
mov ['[ecx+0DCh],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['ecx,', '[ecx+34h]']
mov ['[eax+0E0h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[edx+eax*8-20h]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+10h]']
mov ['[ecx+edx*8-20h],', 'eax']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[edx+eax*8-18h]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+10h]']
mov ['[ecx+edx*8-18h],', 'eax']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[edx+eax*8-0Ch]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+10h]']
mov ['[ecx+edx*8-0Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[edx+eax*8-4]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+10h]']
mov ['[ecx+edx*8-4],', 'eax']
cmp ['[ebp+var_8],', '0']
jbe ['loc_BB59']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '38h']
mov ['edx,', '[ecx]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ecx+4]']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ecx+0Ch]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ecx+10h]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A0h]']
mov ['edx,', '[ecx+188h]']
push ['edx']
push ['3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A0h]']
push ['ecx']
call ['_TT_Set_CodeRange']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+230h],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['edi,', '[edx+0A0h]']
add ['edi,', '90h']
mov ['ecx,', '9']
mov ['esi,', '[ebp+var_4]']
rep ['movsd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '1']
jnz ['short', 'loc_BADF']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+124h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_BADF']
mov ['[ebp+var_31],', '1']
jmp ['short', 'loc_BAE3']
mov ['[ebp+var_31],', '0']
mov ['dl,', '[ebp+var_31]']
mov ['[ebp+var_9],', 'dl']
movzx ['eax,', '[ebp+var_9]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A0h]']
push ['edx']
call ['_TT_Run_Context']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_BB25']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A0h]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_BB25']
mov ['eax,', '[ebp+var_10]']
jmp ['loc_BBDF']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['edx,', '[eax+154h]']
shl ['edx,', '5']
or ['edx,', '4']
mov ['eax,', '[ebp+var_24]']
movsx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
or ['ecx,', 'edx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_24]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['edx,', '[eax+ecx*8-20h]']
mov ['eax,', '[eax+ecx*8-1Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+44h],', 'edx']
mov ['[ecx+48h],', 'eax']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['ecx,', '[edx+eax*8-18h]']
mov ['edx,', '[edx+eax*8-14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4Ch],', 'ecx']
mov ['[eax+50h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['eax,', '[ecx+edx*8-10h]']
mov ['ecx,', '[ecx+edx*8-0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0B8h],', 'eax']
mov ['[edx+0BCh],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['edx,', '[eax+ecx*8-8]']
mov ['eax,', '[eax+ecx*8-4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0C0h],', 'edx']
mov ['[ecx+0C4h],', 'eax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN20_1']
dd ['offset', '$LN19_1']
align ['8']
endp
_TT_Process_Simple_Glyph proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '38h']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[edx+48h]']
mov ['edx,', '[ebp+var_C]']
mov ['edx,', '[edx+4]']
mov ['esi,', '[ebp+var_10]']
mov ['[edx+esi*8],', 'eax']
mov ['[edx+esi*8+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['edx,', '[eax+50h]']
mov ['eax,', '[ebp+var_C]']
mov ['eax,', '[eax+4]']
mov ['esi,', '[ebp+var_10]']
mov ['[eax+esi*8+8],', 'ecx']
mov ['[eax+esi*8+0Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0B8h]']
mov ['eax,', '[ecx+0BCh]']
mov ['ecx,', '[ebp+var_C]']
mov ['ecx,', '[ecx+4]']
mov ['esi,', '[ebp+var_10]']
mov ['[ecx+esi*8+10h],', 'edx']
mov ['[ecx+esi*8+14h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0C0h]']
mov ['ecx,', '[edx+0C4h]']
mov ['edx,', '[ebp+var_C]']
mov ['edx,', '[edx+4]']
mov ['esi,', '[ebp+var_10]']
mov ['[edx+esi*8+18h],', 'eax']
mov ['[edx+esi*8+1Ch],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+edx],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+edx+1],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+edx+2],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+edx+3],', '0']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'byte', 'ptr', '[edx+2A0h]']
test ['eax,', 'eax']
jz ['loc_BDDE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_TT_Vary_Get_Glyph_Deltas']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_BD62']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_BF7D']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_BD74']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ebp+var_10]']
jge ['short', 'loc_BDC3']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ebp+var_18]']
add ['eax,', '[edx+ecx*8]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+var_24]']
mov ['[edx+ecx*8],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[eax+ecx*8+4]']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_18]']
add ['edx,', '[ecx+eax*8+4]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
mov ['eax,', '[ebp+var_24]']
mov ['[ecx+eax*8+4],', 'edx']
jmp ['short', 'loc_BD6B']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_18],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_BDC3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
and ['edx,', '2']
jnz ['short', 'loc_BE31']
push ['0']
push ['0']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '38h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '7Ch']
push ['ecx']
call ['_tt_prepare_zone']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+84h]']
lea ['ecx,', 'ds:20h[eax*8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+90h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_2C],', 'edx']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_34],', '0']
mov ['[ebp+var_35],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '1']
jnz ['short', 'loc_BE82']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax+30h]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_34],', 'ecx']
mov ['[ebp+var_35],', '1']
movzx ['edx,', '[ebp+var_35]']
test ['edx,', 'edx']
jz ['loc_BF47']
jmp ['short', 'loc_BE99']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '8']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[ebp+var_2C]']
jnb ['short', 'loc_BED3']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+var_28]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_28]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_BE90']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+ecx*8-20h]']
mov ['eax,', '[eax+ecx*8-1Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+44h],', 'edx']
mov ['[ecx+48h],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+ecx*8-18h]']
mov ['eax,', '[eax+ecx*8-14h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4Ch],', 'edx']
mov ['[ecx+50h],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+ecx*8-10h]']
mov ['eax,', '[eax+ecx*8-0Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0B8h],', 'edx']
mov ['[ecx+0BCh],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+ecx*8-8]']
mov ['eax,', '[eax+ecx*8-4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0C0h],', 'edx']
mov ['[ecx+0C4h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
and ['eax,', '2']
jnz ['short', 'loc_BF7A']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+84h]']
add ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+84h],', 'dx']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_TT_Hint_Glyph']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN19_2']
dd ['offset', '$LN18_1']
db ['0Dh', 'dup(0CCh)']
endp
_TT_Process_Composite_Component	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+16h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '0C8h']
mov ['[ebp+var_D],', 'cl']
movzx ['edx,', '[ebp+var_D]']
test ['edx,', 'edx']
jz ['short', 'loc_C046']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_C023']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_C046']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '10h']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx*8]']
push ['eax']
call ['_FT_Vector_Transform']
add ['esp,', '8']
jmp ['short', 'loc_C01A']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '2']
jnz ['loc_C0E5']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_C08A']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+var_C]']
jb ['short', 'loc_C0A6']
push ['offset', '$SG10006']
push ['424h']
push ['15h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '15h']
jmp ['loc_C215']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_24]']
lea ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
mov ['[ebp+var_18],', 'eax']
jmp ['loc_C1E6']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_C10A']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_C10A']
xor ['eax,', 'eax']
jmp ['loc_C215']
movzx ['edx,', '[ebp+var_D]']
test ['edx,', 'edx']
jz ['short', 'loc_C179']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
and ['ecx,', '800h']
jz ['short', 'loc_C179']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_FT_Hypot']
add ['esp,', '8']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+1Ch]']
push ['eax']
call ['_FT_Hypot']
add ['esp,', '8']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
and ['eax,', '1']
jnz ['short', 'loc_C1E6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+30h]']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+34h]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
and ['eax,', '4']
jz ['short', 'loc_C1E6']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '20h']
and ['edx,', '0FFFFFFC0h']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_C1F2']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_C213']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx*8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ebp+arg_C]']
push ['edx']
call ['_translate_array']
add ['esp,', '10h']
xor ['eax,', 'eax']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_TT_Process_Composite_Glyph proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '14h']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
add ['eax,', '4']
jz ['short', 'loc_C283']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
movsx ['eax,', 'word', 'ptr', '[edx+16h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
movsx ['ecx,', 'word', 'ptr', '[edx+3Ah]']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+var_10]']
movsx ['ecx,', 'word', 'ptr', '[edx+2]']
lea ['edx,', '[eax+ecx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+4]']
ja ['short', 'loc_C295']
mov ['edx,', '1']
test ['edx,', 'edx']
jz ['short', 'loc_C295']
mov ['[ebp+var_30],', '0']
jmp ['short', 'loc_C2B4']
push ['0']
mov ['eax,', '[ebp+var_10]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '4']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C2C8']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_C5D7']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[edx+48h]']
mov ['edx,', '[ebp+var_10]']
movsx ['edx,', 'word', 'ptr', '[edx+2]']
mov ['esi,', '[ebp+var_10]']
mov ['esi,', '[esi+4]']
mov ['[esi+edx*8],', 'eax']
mov ['[esi+edx*8+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['edx,', '[eax+50h]']
mov ['eax,', '[ebp+var_10]']
movsx ['eax,', 'word', 'ptr', '[eax+2]']
mov ['esi,', '[ebp+var_10]']
mov ['esi,', '[esi+4]']
mov ['[esi+eax*8+8],', 'ecx']
mov ['[esi+eax*8+0Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0B8h]']
mov ['eax,', '[ecx+0BCh]']
mov ['ecx,', '[ebp+var_10]']
movsx ['ecx,', 'word', 'ptr', '[ecx+2]']
mov ['esi,', '[ebp+var_10]']
mov ['esi,', '[esi+4]']
mov ['[esi+ecx*8+10h],', 'edx']
mov ['[esi+ecx*8+14h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0C0h]']
mov ['ecx,', '[edx+0C4h]']
mov ['edx,', '[ebp+var_10]']
movsx ['edx,', 'word', 'ptr', '[edx+2]']
mov ['esi,', '[ebp+var_10]']
mov ['esi,', '[esi+4]']
mov ['[esi+edx*8+18h],', 'eax']
mov ['[esi+edx*8+1Ch],', 'ecx']
mov ['eax,', '[ebp+var_10]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
mov ['byte', 'ptr', '[eax+ecx],', '0']
mov ['ecx,', '[ebp+var_10]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+8]']
mov ['byte', 'ptr', '[ecx+edx+1],', '0']
mov ['edx,', '[ebp+var_10]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+8]']
mov ['byte', 'ptr', '[edx+eax+2],', '0']
mov ['eax,', '[ebp+var_10]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
mov ['byte', 'ptr', '[eax+ecx+3],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A8h]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_C3D4']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
mov ['[ebp+var_1C],', 'ax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C3DC']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_C5D7']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_C3FF']
movzx ['ecx,', '[ebp+var_1C]']
push ['ecx']
push ['offset', '$SG10054']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_C3DC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['dx,', '[ecx+11Eh]']
mov ['[ebp+var_20],', 'dx']
movzx ['eax,', '[ebp+var_1C]']
movzx ['ecx,', '[ebp+var_20]']
cmp ['eax,', 'ecx']
jle ['loc_C4E0']
movzx ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+1Ch]']
jle ['short', 'loc_C479']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_C459']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
movzx ['edx,', '[ebp+var_1C]']
push ['edx']
push ['offset', '$SG10063']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_C42F']
push ['offset', '$SG10064']
push ['4C8h']
push ['16h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '16h']
jmp ['loc_C5D7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A0h]']
mov ['eax,', '[edx+184h]']
mov ['[ebp+var_28],', 'eax']
movzx ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
add ['eax,', '188h']
push ['eax']
push ['1']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_Update_Max']
add ['esp,', '14h']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_28]']
mov ['[eax+184h],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C4DE']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_C5D7']
jmp ['short', 'loc_C4EF']
movzx ['edx,', '[ebp+var_1C]']
test ['edx,', 'edx']
jnz ['short', 'loc_C4EF']
xor ['eax,', 'eax']
jmp ['loc_C5D7']
movzx ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A0h]']
mov ['eax,', '[edx+188h]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C521']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_C5D7']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[eax+188h]']
mov ['[edx+88h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['eax,', '[ebp+var_1C]']
mov ['[edx+8Ch],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '14h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '7Ch']
push ['edx']
call ['_tt_prepare_zone']
add ['esp,', '10h']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_C57F']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+84h]']
cmp ['[ebp+var_14],', 'edx']
jnb ['short', 'loc_C5B2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+94h]']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[ecx+edx]']
and ['eax,', '0FFFFFFE7h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+94h]']
mov ['ecx,', '[ebp+var_14]']
mov ['[edx+ecx],', 'al']
jmp ['short', 'loc_C576']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+84h]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+84h],', 'ax']
push ['1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_TT_Hint_Glyph']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN29_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN28_0']
dd ['offset', '$LN26']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN27']
align ['8']
endp
_load_truetype_glyph proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_1D],', '0']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_6D],', '0']
cmp ['[ebp+arg_8],', '1']
jbe ['short', 'loc_C6AA']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'word', 'ptr', '[ecx+122h]']
cmp ['[ebp+arg_8],', 'edx']
jbe ['short', 'loc_C6AA']
push ['offset', '$SG10101']
push ['594h']
push ['15h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '15h']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$71']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+10h]']
jb ['short', 'loc_C6D4']
push ['offset', '$SG10105']
push ['59Bh']
push ['10h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '10h']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$71']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+14h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
and ['edx,', '1']
jnz ['short', 'loc_C702']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+30h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+34h]']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_C710']
mov ['[ebp+var_C],', '(offset', 'loc_FFFF+1)']
mov ['[ebp+var_10],', '(offset', 'loc_FFFF+1)']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+80h]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jz ['loc_C7AA']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_68]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[edx+30h]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+80h]']
mov ['ecx,', '[eax+30h]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C767']
jmp ['$Exit$71']
mov ['[ebp+var_6D],', '1']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_64]']
mov ['[ecx+1Ch],', 'edx']
push ['28h']
push ['0']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['edx,', '[ebp+var_68]']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_FT_Stream_OpenMemory']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ebp+Dst]']
mov ['[ecx+18h],', 'edx']
jmp ['short', 'loc_C7C4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_tt_face_get_location']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jle ['loc_C8C0']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+54h],', '0']
jnz ['short', 'loc_C82A']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+80h]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jnz ['short', 'loc_C82A']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_C807']
push ['offset', '$SG10120']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_C7E9']
push ['offset', '$SG10121']
push ['5D9h']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$71']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
add ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+200h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C868']
jmp ['$Exit$71']
mov ['[ebp+var_1D],', '1']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+208h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C895']
jmp ['$Exit$71']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_tt_get_metrics']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C8B3']
jmp ['$Exit$71']
movzx ['edx,', '[ebp+arg_C]']
test ['edx,', 'edx']
jz ['short', 'loc_C8C0']
jmp ['$Exit$71']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jz ['short', 'loc_C8D8']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+20h]']
test ['edx,', 'edx']
jnz ['loc_CBDB']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+24h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_tt_get_metrics']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C91E']
jmp ['$Exit$71']
movzx ['eax,', '[ebp+arg_C]']
test ['eax,', 'eax']
jz ['short', 'loc_C92B']
jmp ['$Exit$71']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+24h]']
sub ['eax,', '[edx+34h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+44h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+48h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+38h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4Ch],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+50h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0B8h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+0B0h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0BCh],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0C0h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+0BCh]']
sub ['ecx,', '[eax+0B4h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0C4h],', 'ecx']
xor ['eax,', 'eax']
jnz ['loc_C92B']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_tt_get_metrics_incr_overrides']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2A0h]']
test ['edx,', 'edx']
jz ['loc_CB12']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_74],', 'edx']
push ['4']
lea ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_TT_Vary_Get_Glyph_Deltas']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_CA0D']
jmp ['$Exit$71']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['eax,', '[ebp+var_28]']
add ['ecx,', '[eax+edx]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+44h],', 'ecx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+48h]']
mov ['edx,', '[ebp+var_28]']
add ['eax,', '[edx+ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+48h],', 'eax']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['eax,', '[ebp+var_28]']
add ['ecx,', '[eax+edx]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4Ch],', 'ecx']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+50h]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+50h],', 'edx']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0B8h]']
mov ['edx,', '[ebp+var_28]']
add ['eax,', '[edx+ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0B8h],', 'eax']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0BCh]']
mov ['eax,', '[ebp+var_28]']
add ['ecx,', '[eax+edx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0BCh],', 'ecx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0C0h]']
mov ['edx,', '[ebp+var_28]']
add ['eax,', '[edx+ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0C0h],', 'eax']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0C4h]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0C4h],', 'edx']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_74]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_28],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_CAF7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
and ['edx,', '1']
jnz ['loc_CBCF']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+44h],', 'eax']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4Ch],', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0B8h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0B8h],', 'eax']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0BCh]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0BCh],', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0C0h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0C0h],', 'eax']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0C4h]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0C4h],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['$Exit$71']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+24h]']
sub ['edx,', '[ecx+34h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+44h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+48h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+38h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4Ch],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+50h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0B8h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+0B0h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0BCh],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0C0h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0BCh]']
sub ['eax,', '[edx+0B4h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0C4h],', 'eax']
xor ['edx,', 'edx']
jnz ['loc_CBDB']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_tt_get_metrics_incr_overrides']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+20h]']
test ['eax,', 'eax']
jle ['short', 'loc_CCF6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+20Ch]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_CCAC']
jmp ['$Exit$71']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+204h]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1D],', '0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_TT_Process_Simple_Glyph']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_CCE5']
jmp ['$Exit$71']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_FT_GlyphLoader_Add']
add ['esp,', '4']
jmp ['$Exit$71']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+20h]']
cmp ['ecx,', '0FFFFFFFFh']
jnz ['loc_D321']
mov ['edx,', '[ebp+var_1C]']
movsx ['eax,', 'word', 'ptr', '[edx+16h]']
mov ['[ebp+var_78],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
movsx ['edx,', 'word', 'ptr', '[ecx+14h]']
mov ['[ebp+var_7C],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+210h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_CD43']
jmp ['$Exit$71']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A8h]']
mov ['[ebp+var_80],', 'ecx']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+204h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1D],', '0']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+2A0h]']
test ['eax,', 'eax']
jz ['loc_CF5E']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_90],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+54h]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_TT_Vary_Get_Glyph_Deltas']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_CDB8']
jmp ['$Exit$71']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+30h]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_1C]']
add ['eax,', '[ecx+58h]']
mov ['[ebp+var_8C],', 'eax']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+54h]']
mov ['[ebp+var_88],', 'eax']
mov ['[ebp+var_84],', '0']
jmp ['short', 'loc_CE03']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '1']
mov ['[ebp+var_84],', 'ecx']
mov ['edx,', '[ebp+var_8C]']
add ['edx,', '20h']
mov ['[ebp+var_8C],', 'edx']
mov ['eax,', '[ebp+var_84]']
cmp ['eax,', '[ebp+var_88]']
jge ['short', 'loc_CE61']
mov ['ecx,', '[ebp+var_8C]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '2']
jz ['short', 'loc_CE5F']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
movsx ['edx,', 'word', 'ptr', '[ecx+eax*8]']
mov ['eax,', '[ebp+var_8C]']
add ['edx,', '[eax+8]']
mov ['ecx,', '[ebp+var_8C]']
mov ['[ecx+8],', 'edx']
mov ['edx,', '[ebp+var_84]']
mov ['eax,', '[ebp+var_28]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx*8+4]']
mov ['edx,', '[ebp+var_8C]']
add ['ecx,', '[edx+0Ch]']
mov ['eax,', '[ebp+var_8C]']
mov ['[eax+0Ch],', 'ecx']
jmp ['short', 'loc_CDE5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+44h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+48h]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+48h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4Ch]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8+8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+50h]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+50h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0B8h]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8+10h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0B8h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0BCh]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0BCh],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0C0h]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8+18h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0C0h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0C4h]']
mov ['eax,', '[ebp+var_84]']
mov ['ecx,', '[ebp+var_28]']
add ['edx,', '[ecx+eax*8+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0C4h],', 'edx']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_90]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_28],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_CF40']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
and ['edx,', '1']
jnz ['loc_D01B']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+44h],', 'eax']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4Ch],', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0B8h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0B8h],', 'eax']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0BCh]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0BCh],', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0C0h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0C0h],', 'eax']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0C4h]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0C4h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '400h']
jz ['short', 'loc_D047']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_FT_GlyphLoader_Add']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dword', 'ptr', '[ecx+48h],', '636F6D70h']
jmp ['$Exit$71']
mov ['[ebp+var_9C],', '0']
mov ['edx,', '[ebp+var_78]']
mov ['[ebp+var_A0],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+54h]']
mov ['[ebp+var_A4],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+30h]']
mov ['[ebp+var_A8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_AC],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_B0],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_FT_GlyphLoader_Add']
add ['esp,', '4']
mov ['[ebp+var_94],', '0']
jmp ['short', 'loc_D0B1']
mov ['eax,', '[ebp+var_94]']
add ['eax,', '1']
mov ['[ebp+var_94],', 'eax']
mov ['ecx,', '[ebp+var_94]']
cmp ['ecx,', '[ebp+var_A4]']
jnb ['loc_D2B4']
mov ['edx,', '[ebp+var_A8]']
shl ['edx,', '5']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+34h]']
add ['ecx,', 'edx']
mov ['edx,', '[ebp+var_94]']
shl ['edx,', '5']
add ['ecx,', 'edx']
mov ['[ebp+var_9C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['edx,', '[eax+48h]']
mov ['eax,', '8']
imul ['eax,', '0']
mov ['[ebp+eax+var_D4],', 'ecx']
mov ['[ebp+eax+var_D0],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4Ch]']
mov ['eax,', '[ecx+50h]']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['[ebp+ecx+var_D4],', 'edx']
mov ['[ebp+ecx+var_D0],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0B8h]']
mov ['ecx,', '[edx+0BCh]']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['[ebp+edx+var_D4],', 'eax']
mov ['[ebp+edx+var_D0],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0C0h]']
mov ['edx,', '[eax+0C4h]']
mov ['eax,', '8']
imul ['eax,', '3']
mov ['[ebp+eax+var_D4],', 'ecx']
mov ['[ebp+eax+var_D0],', 'edx']
mov ['ecx,', '[ebp+var_1C]']
movsx ['edx,', 'word', 'ptr', '[ecx+16h]']
mov ['[ebp+var_98],', 'edx']
push ['0']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_9C]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_load_truetype_glyph']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_D1A5']
jmp ['$Exit$71']
mov ['ecx,', '[ebp+var_A8]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+34h]']
add ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_94]']
shl ['ecx,', '5']
add ['eax,', 'ecx']
mov ['[ebp+var_9C],', 'eax']
mov ['edx,', '[ebp+var_9C]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
and ['eax,', '200h']
jnz ['loc_D263']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+edx+var_D4]']
mov ['ecx,', '[ebp+edx+var_D0]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+44h],', 'eax']
mov ['[edx+48h],', 'ecx']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+eax+var_D4]']
mov ['edx,', '[ebp+eax+var_D0]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4Ch],', 'ecx']
mov ['[eax+50h],', 'edx']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+ecx+var_D4]']
mov ['eax,', '[ebp+ecx+var_D0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0B8h],', 'edx']
mov ['[ecx+0BCh],', 'eax']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+eax+var_D4]']
mov ['edx,', '[ebp+eax+var_D0]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0C0h],', 'ecx']
mov ['[eax+0C4h],', 'edx']
mov ['ecx,', '[ebp+var_1C]']
movsx ['edx,', 'word', 'ptr', '[ecx+16h]']
mov ['[ebp+var_A0],', 'edx']
mov ['eax,', '[ebp+var_A0]']
cmp ['eax,', '[ebp+var_98]']
jnz ['short', 'loc_D283']
jmp ['loc_D0A2']
mov ['ecx,', '[ebp+var_98]']
push ['ecx']
mov ['edx,', '[ebp+var_78]']
push ['edx']
mov ['eax,', '[ebp+var_9C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_TT_Process_Composite_Component']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_D2AF']
jmp ['$Exit$71']
jmp ['loc_D0A2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_AC]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_B0]']
mov ['[ecx+1Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_80]']
mov ['[eax+0A8h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
and ['eax,', '2']
jnz ['short', 'loc_D31F']
mov ['ecx,', '[ebp+var_9C]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
and ['edx,', '100h']
jz ['short', 'loc_D31F']
mov ['eax,', '[ebp+var_A0]']
cmp ['eax,', '[ebp+var_78]']
jbe ['short', 'loc_D31F']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
mov ['edx,', '[ebp+var_78]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_TT_Process_Composite_Glyph']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_D31F']
jmp ['short', '$Exit$71']
jmp ['short', '$Exit$71']
push ['offset', '$SG10216']
push ['71Ch']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
mov ['[ebp+var_8],', 'eax']
movzx ['ecx,', '[ebp+var_1D]']
test ['ecx,', 'ecx']
jz ['short', 'loc_D35E']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+204h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['edx,', '[ebp+var_6D]']
test ['edx,', 'edx']
jz ['short', 'loc_D399']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_68]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[edx+30h]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+80h]']
mov ['ecx,', '[eax+30h]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN70_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN69_0']
dd ['offset', '$LN65_1']
dd ['0FFFFFFA8h,', '28h']
dd ['offset', '$LN66_0']
dd ['0FFFFFF98h,', '8']
dd ['offset', '$LN67_0']
dd ['0FFFFFF2Ch,', '20h']
dd ['offset', '$LN68']
align ['8']
endp
_compute_glyph_metrics proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '5Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_5C]']
mov ['ecx,', '17h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_2C],', 'edx']
mov ['[ebp+var_24],', '(offset', 'loc_FFFF+1)']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '1']
jnz ['short', 'loc_D47E']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx+14h]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['dword', 'ptr', '[ecx+48h],', '636F6D70h']
jz ['short', 'loc_D49F']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '6Ch']
push ['eax']
call ['_FT_Outline_Get_CBox']
add ['esp,', '8']
jmp ['short', 'loc_D4BC']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '24h']
mov ['edx,', '[ecx]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ecx+4]']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ecx+0Ch]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
mov ['[ecx+38h],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+24h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4Ch]']
sub ['ecx,', '[eax+44h]']
mov ['edx,', '[ebp+var_28]']
mov ['[edx+28h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+1E0h],', '0']
jnz ['short', 'loc_D533']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
and ['edx,', '2']
jnz ['short', 'loc_D533']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
movzx ['edx,', 'word', 'ptr', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_tt_face_get_device_metrics']
add ['esp,', '0Ch']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_30],', '0']
jz ['short', 'loc_D533']
mov ['ecx,', '[ebp+var_30]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '6']
mov ['eax,', '[ebp+var_28]']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_28]']
mov ['[edx+18h],', 'ecx']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_28]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+124h]']
test ['eax,', 'eax']
jz ['short', 'loc_D5C8']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+14Ah]']
test ['edx,', 'edx']
jle ['short', 'loc_D5C8']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0BCh]']
sub ['edx,', '[ebp+var_10]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
cwde
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0BCh]']
cmp ['eax,', '[edx+0C4h]']
jg ['short', 'loc_D5A1']
mov ['[ebp+var_38],', '0']
jmp ['short', 'loc_D5C6']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+0BCh]']
sub ['ecx,', '[eax+0C4h]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
movzx ['edx,', 'ax']
mov ['[ebp+var_38],', 'edx']
jmp ['short', 'loc_D635']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
movsx ['edx,', 'ax']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+16Ch]']
cmp ['ecx,', '0FFFFh']
jz ['short', 'loc_D60E']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx+1B2h]']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'word', 'ptr', '[ecx+1B4h]']
sub ['eax,', 'edx']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_D627']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+0DCh]']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx+0DEh]']
sub ['ecx,', 'eax']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '[ebp+var_3C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[edx+30h]']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_D6A9']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['short', 'loc_D6A9']
mov ['[ebp+var_54],', '0']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_4C],', 'ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_54]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_5C],', 'eax']
cmp ['[ebp+var_5C],', '0']
jz ['short', 'loc_D69D']
mov ['eax,', '[ebp+var_5C]']
jmp ['short', 'loc_D710']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_38]']
mov ['[edx+3Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
and ['edx,', '1']
jnz ['short', 'loc_D6E3']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_34],', 'eax']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['eax,', '[ecx+28h]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['edx,', '[ebp+var_28]']
mov ['ecx,', '[edx+20h]']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+var_28]']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_34]']
mov ['[eax+30h],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_38]']
mov ['[edx+34h],', 'eax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '5Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19_3']
dd ['offset', '$LN17_0']
dd ['0FFFFFFACh,', '10h']
dd ['offset', '$LN18_2']
db ['0Fh', 'dup(0CCh)']
endp
_load_sbit_image proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+214h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+68h]']
mov ['[ebp+var_10],', 'edx']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '4Ch']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+70h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+48h]']
call ['eax']
add ['esp,', '1Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['loc_D8B0']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+6Eh],', 'cx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+6Ch],', 'ax']
movzx ['edx,', '[ebp+var_26]']
shl ['edx,', '6']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+18h],', 'edx']
movzx ['ecx,', '[ebp+var_28]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+1Ch],', 'ecx']
movsx ['eax,', '[ebp+var_24]']
shl ['eax,', '6']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+20h],', 'eax']
movsx ['edx,', '[ebp+var_22]']
shl ['edx,', '6']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+24h],', 'edx']
movzx ['ecx,', '[ebp+var_20]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+28h],', 'ecx']
movsx ['eax,', '[ebp+var_1E]']
shl ['eax,', '6']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+2Ch],', 'eax']
movsx ['edx,', '[ebp+var_1C]']
shl ['edx,', '6']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+30h],', 'edx']
movzx ['ecx,', '[ebp+var_1A]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+34h],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+48h],', '62697473h']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '10h']
jz ['short', 'loc_D89C']
movsx ['edx,', '[ebp+var_1E]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+64h],', 'edx']
movsx ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+68h],', 'ecx']
jmp ['short', 'loc_D8B0']
movsx ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+64h],', 'eax']
movsx ['edx,', '[ebp+var_22]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+68h],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN7_6']
dd ['offset', '$LN6_4']
db ['0Ch', 'dup(0CCh)']
endp
_tt_loader_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '80h']
mov ['[ebp+var_D],', 'al']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_C],', 'ecx']
push ['0D0h']
push ['0']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '2']
jnz ['loc_DBA0']
movzx ['ecx,', '[ebp+arg_10]']
test ['ecx,', 'ecx']
jnz ['loc_DBA0']
mov ['[ebp+var_16],', '0']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+12Ch],', '0']
jl ['short', 'loc_D983']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+130h],', '0']
jge ['short', 'loc_D9A7']
movzx ['ecx,', '[ebp+var_D]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_tt_size_ready_bytecode']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_D9A5']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_DC84']
jmp ['short', 'loc_D9DD']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+12Ch],', '0']
jz ['short', 'loc_D9C3']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+12Ch]']
jmp ['loc_DC84']
jmp ['short', 'loc_D9DD']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+130h],', '0']
jz ['short', 'loc_D9DD']
mov ['eax,', '[ebp+arg_4]']
mov ['eax,', '[eax+130h]']
jmp ['loc_DC84']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+124h]']
test ['edx,', 'edx']
jz ['short', 'loc_D9F9']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+128h]']
mov ['[ebp+var_24],', 'ecx']
jmp ['short', 'loc_DA05']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+60h]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_DA32']
push ['offset', '$SG10324']
push ['85Fh']
push ['99h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '99h']
jmp ['loc_DC84']
mov ['eax,', '[ebp+arg_C]']
sar ['eax,', '10h']
and ['eax,', '0Fh']
cmp ['eax,', '2']
jz ['short', 'loc_DA46']
mov ['[ebp+var_25],', '1']
jmp ['short', 'loc_DA4A']
mov ['[ebp+var_25],', '0']
mov ['cl,', '[ebp+var_25]']
mov ['[ebp+var_15],', 'cl']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_TT_Load_Context']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_DA75']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_DC84']
movzx ['edx,', '[ebp+var_15]']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+260h]']
cmp ['edx,', 'ecx']
jz ['short', 'loc_DAB9']
mov ['edx,', '4']
imul ['eax,', 'edx,', '1Ch']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_DAA5']
push ['offset', '$SG10333']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_DA87']
mov ['edx,', '[ebp+var_14]']
mov ['al,', '[ebp+var_15]']
mov ['[edx+260h],', 'al']
mov ['[ebp+var_16],', '1']
movzx ['ecx,', '[ebp+var_16]']
test ['ecx,', 'ecx']
jz ['short', 'loc_DB34']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_DAD3']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '1']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[eax+0F0h]']
jnb ['short', 'loc_DB12']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+58h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+288h]']
mov ['eax,', '[ebp+var_1C]']
movsx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
mov ['ecx,', '[edx+0F4h]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_DACA']
movzx ['eax,', '[ebp+var_D]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_tt_size_run_prep']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_DB34']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_DC84']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+150h]']
and ['eax,', '1']
jz ['short', 'loc_DB4C']
mov ['ecx,', '[ebp+arg_C]']
or ['ecx,', '2']
mov ['[ebp+arg_C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+150h]']
and ['eax,', '2']
jz ['short', 'loc_DB70']
mov ['edi,', '[ebp+var_14]']
add ['edi,', '11Ch']
mov ['ecx,', '11h']
mov ['esi,', 'offset', '_tt_default_graphics_state']
rep ['movsd']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '80h']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+231h],', 'cl']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+0A0h],', 'ecx']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+188h]']
mov ['[edx+0A4h],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+80h]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jz ['short', 'loc_DBBB']
mov ['ecx,', '[ebp+Dst]']
mov ['dword', 'ptr', '[ecx+54h],', '0']
jmp ['short', 'loc_DC2B']
mov ['esi,', 'esp']
push ['0']
mov ['edx,', '[ebp+var_C]']
push ['edx']
push ['676C7966h']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+1FCh]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
and ['eax,', '0FFh']
cmp ['eax,', '8Eh']
jnz ['short', 'loc_DBFF']
mov ['ecx,', '[ebp+Dst]']
mov ['dword', 'ptr', '[ecx+54h],', '0']
jmp ['short', 'loc_DC2B']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_DC19']
push ['offset', '$SG10355']
call ['_FT_Message']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_DC84']
jmp ['short', 'loc_DC2B']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Stream_Pos']
add ['esp,', '4']
mov ['ecx,', '[ebp+Dst]']
mov ['[ecx+54h],', 'eax']
movzx ['edx,', '[ebp+arg_10]']
test ['edx,', 'edx']
jnz ['short', 'loc_DC56']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_FT_GlyphLoader_Rewind']
add ['esp,', '4']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+18h],', 'eax']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_tt_check_trickyness_family proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_DCB6']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '9']
jge ['short', 'loc_DCE7']
imul ['ecx,', '[ebp+var_4],', '14h']
add ['ecx,', 'offset', '?trick_names@?1??tt_check_trickyness_family@@9@9']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__strstr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_DCE5']
mov ['al,', '1']
jmp ['short', 'loc_DCE9']
jmp ['short', 'loc_DCAD']
xor ['al,', 'al']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_tt_synth_sfnt_checksum	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_DD37']
xor ['eax,', 'eax']
jmp ['short', 'loc_DDAB']
jmp ['short', 'loc_DD42']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '4']
mov ['[ebp+arg_4],', 'edx']
cmp ['[ebp+arg_4],', '3']
jbe ['short', 'loc_DD5C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_GetULong']
add ['esp,', '4']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_DD39']
mov ['[ebp+var_C],', '3']
jmp ['short', 'loc_DD77']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_DD9C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movzx ['edx,', 'al']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '3']
shl ['edx,', 'cl']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_DD65']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_tt_get_sfnt_checksum proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1FCh],', '0']
jnz ['short', 'loc_DDDC']
xor ['eax,', 'eax']
jmp ['short', 'loc_DE40']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
push ['edx']
movzx ['eax,', '[ebp+arg_4]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['eax,', '[edx+eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1FCh]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_DE1C']
xor ['eax,', 'eax']
jmp ['short', 'loc_DE40']
movzx ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+9Ch]']
mov ['ecx,', '[eax+ecx+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+68h]']
push ['eax']
call ['_tt_synth_sfnt_checksum']
add ['esp,', '8']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_tt_check_trickyness_sfnt_ids proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '68h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_68]']
mov ['ecx,', '1Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
push ['44h']
push ['0']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_55],', '0']
mov ['[ebp+var_56],', '0']
mov ['[ebp+var_57],', '0']
xor ['ecx,', 'ecx']
mov ['[ebp+var_5C],', 'cx']
jmp ['short', 'loc_DEA9']
mov ['dx,', '[ebp+var_5C]']
add ['dx,', '1']
mov ['[ebp+var_5C],', 'dx']
movzx ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+98h]']
cmp ['eax,', 'edx']
jge ['loc_DFBA']
mov ['[ebp+var_8],', '0']
movzx ['eax,', '[ebp+var_5C]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['eax,', '[edx+eax]']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_68],', '63767420h']
jz ['short', 'loc_DEF9']
cmp ['[ebp+var_68],', '6670676Dh']
jz ['short', 'loc_DF06']
cmp ['[ebp+var_68],', '70726570h']
jz ['short', 'loc_DF13']
jmp ['short', 'loc_DF20']
mov ['[ebp+var_64],', '0']
mov ['[ebp+var_55],', '1']
jmp ['short', 'loc_DF25']
mov ['[ebp+var_64],', '1']
mov ['[ebp+var_56],', '1']
jmp ['short', 'loc_DF25']
mov ['[ebp+var_64],', '2']
mov ['[ebp+var_57],', '1']
jmp ['short', 'loc_DF25']
jmp ['loc_DE9D']
mov ['[ebp+var_60],', '0']
jmp ['short', 'loc_DF37']
mov ['ecx,', '[ebp+var_60]']
add ['ecx,', '1']
mov ['[ebp+var_60],', 'ecx']
cmp ['[ebp+var_60],', '11h']
jge ['short', 'loc_DFB5']
movzx ['edx,', '[ebp+var_5C]']
shl ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
imul ['eax,', '[ebp+var_60],', '18h']
mov ['esi,', '[ebp+var_64]']
mov ['ecx,', '[ecx+edx+0Ch]']
cmp ['ecx,', 'ds:off_2E14[eax+esi*8]']
jnz ['short', 'loc_DFB0']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_DF7B']
movzx ['edx,', '[ebp+var_5C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_tt_get_sfnt_checksum']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
imul ['ecx,', '[ebp+var_60],', '18h']
mov ['edx,', '[ebp+var_64]']
mov ['eax,', 'ds:?sfnt_id@?1??tt_check_trickyness_sfnt_ids@@9@9[ecx+edx*8]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_DF9F']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ebp+ecx*4+Dst]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_60]']
mov ['[ebp+eax*4+Dst],', 'edx']
mov ['ecx,', '[ebp+var_60]']
cmp ['[ebp+ecx*4+Dst],', '3']
jnz ['short', 'loc_DFB0']
mov ['al,', '1']
jmp ['loc_E077']
jmp ['loc_DF2E']
jmp ['loc_DE9D']
mov ['[ebp+var_60],', '0']
jmp ['short', 'loc_DFCC']
mov ['edx,', '[ebp+var_60]']
add ['edx,', '1']
mov ['[ebp+var_60],', 'edx']
cmp ['[ebp+var_60],', '11h']
jge ['loc_E075']
movzx ['eax,', '[ebp+var_55]']
test ['eax,', 'eax']
jnz ['short', 'loc_E005']
imul ['ecx,', '[ebp+var_60],', '18h']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
cmp ['ds:off_2E14[ecx+eax],', '0']
jnz ['short', 'loc_E005']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ebp+ecx*4+Dst]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_60]']
mov ['[ebp+eax*4+Dst],', 'edx']
movzx ['ecx,', '[ebp+var_56]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_E034']
imul ['edx,', '[ebp+var_60],', '18h']
mov ['eax,', '8']
shl ['eax,', '0']
cmp ['ds:off_2E14[edx+eax],', '0']
jnz ['short', 'loc_E034']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ebp+ecx*4+Dst]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_60]']
mov ['[ebp+eax*4+Dst],', 'edx']
movzx ['ecx,', '[ebp+var_57]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_E062']
imul ['edx,', '[ebp+var_60],', '18h']
mov ['eax,', '8']
shl ['eax,', '1']
cmp ['ds:off_2E14[edx+eax],', '0']
jnz ['short', 'loc_E062']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ebp+ecx*4+Dst]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_60]']
mov ['[ebp+eax*4+Dst],', 'edx']
mov ['ecx,', '[ebp+var_60]']
cmp ['[ebp+ecx*4+Dst],', '3']
jnz ['short', 'loc_E070']
mov ['al,', '1']
jmp ['short', 'loc_E077']
jmp ['loc_DFC3']
xor ['al,', 'al']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN28_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '68h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN27_0']
dd ['offset', '$LN26_0']
endp
_tt_check_trickyness proc near		
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_E0D5']
xor ['al,', 'al']
jmp ['short', 'loc_E111']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_E0F8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['_tt_check_trickyness_family']
add ['esp,', '4']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_E0F8']
mov ['al,', '1']
jmp ['short', 'loc_E111']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_tt_check_trickyness_sfnt_ids']
add ['esp,', '4']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_E10F']
mov ['al,', '1']
jmp ['short', 'loc_E111']
xor ['al,', 'al']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_tt_check_single_notdef	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_5],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_E173']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[edx+2B8h]']
jnb ['short', 'loc_E1B4']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_tt_face_get_location']
add ['esp,', '0Ch']
cmp ['[ebp+var_14],', '0']
jbe ['short', 'loc_E1B2']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
cmp ['[ebp+var_24],', '1']
jbe ['short', 'loc_E1AC']
jmp ['short', 'loc_E1B4']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_E16A']
cmp ['[ebp+var_24],', '1']
jnz ['short', 'loc_E21C']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_E1C6']
mov ['[ebp+var_5],', '1']
jmp ['short', 'loc_E21C']
push ['8']
lea ['eax,', '[ebp+Str1]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Get_Glyph_Name']
add ['esp,', '10h']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_E21C']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
movsx ['edx,', '[ebp+ecx+Str1]']
cmp ['edx,', '2Eh']
jnz ['short', 'loc_E21C']
mov ['esi,', 'esp']
push ['8']
push ['offset', '$SG10592']
lea ['eax,', '[ebp+Str1]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strncmp']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_E21C']
mov ['[ebp+var_5],', '1']
mov ['al,', '[ebp+var_5]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14_1']
dd ['offset', '$LN12_0']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['8']
dd ['offset', '$LN13_0']
align ['4']
endp
_tt_size_done_bytecode proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+124h]']
test ['eax,', 'eax']
jz ['short', 'loc_E2CF']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+128h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+124h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0F4h]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0F4h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_E2CF']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0F0h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0FCh]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0FCh],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_E303']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+0F8h],', 'dx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '100h']
push ['ecx']
call ['_tt_glyphzone_done']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+7Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+7Ch],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_E348']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+88h]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+88h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_E369']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+74h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+78h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+80h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+84h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8Ch],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+90h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+12Ch],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+130h],', '0FFFFFFFFh']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_tt_size_init_bytecode proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '104h']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+12Ch],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+130h],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'word', 'ptr', '[edx+14h]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+78h],', 'eax']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'word', 'ptr', '[edx+16h]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+84h],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+74h],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+80h],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+8Ch],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+90h],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+284h]']
mov ['[eax+0F0h],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_20]']
mov ['dx,', '[ecx+12h]']
mov ['[eax+0F8h],', 'dx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '48h']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['byte', 'ptr', '[ecx+25h],', '0']
mov ['edx,', '[ebp+var_24]']
mov ['byte', 'ptr', '[edx+26h],', '0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_24]']
mov ['dword', 'ptr', '[edx+ecx+14h],', '0']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_24]']
mov ['dword', 'ptr', '[ecx+eax+14h],', '0']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_24]']
mov ['dword', 'ptr', '[eax+edx+14h],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+var_24]']
mov ['dword', 'ptr', '[eax+edx+14h],', '0']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+78h]']
push ['eax']
push ['0']
push ['18h']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+7Ch],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['loc_E5EA']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+84h]']
push ['edx']
push ['0']
push ['18h']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+88h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_E5EA']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0F0h]']
push ['ecx']
push ['0']
push ['4']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+0F4h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_E5EA']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'word', 'ptr', '[eax+0F8h]']
push ['ecx']
push ['0']
push ['4']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+0FCh],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_E5EF']
jmp ['$Exit$11']
mov ['edx,', '[ebp+var_20]']
mov ['ax,', '[edx+10h]']
mov ['[ebp+var_1C],', 'ax']
movzx ['ecx,', '[ebp+var_1C]']
add ['ecx,', '4']
mov ['[ebp+var_1C],', 'cx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '100h']
push ['edx']
push ['0']
movzx ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_tt_glyphzone_new']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_E62D']
jmp ['short', '$Exit$11']
mov ['edx,', '[ebp+var_10]']
mov ['ax,', '[ebp+var_1C]']
mov ['[edx+108h],', 'ax']
mov ['edi,', '[ebp+var_10]']
add ['edi,', '0ACh']
mov ['ecx,', '11h']
mov ['esi,', 'offset', '_tt_default_graphics_state']
rep ['movsd']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+60h]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ecx+edx+0ACh]']
mov ['[eax+28Ch],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+28Ch],', '0']
jnz ['short', 'loc_E690']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+28Ch],', 'offset', '_TT_RunIns']
movzx ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_tt_size_run_fpgm']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_E6B6']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_tt_size_done_bytecode']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_3']
dd ['offset', '$LN8_5']
align ['4']
endp
_Init_Context	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '1Dh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_E735']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['offset', '$SG11003']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_E713']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1B0h],', '20h']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1B0h]']
push ['eax']
push ['0']
push ['10h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1B4h],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_E780']
jmp ['short', '$Fail_Memory$11']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1B8h],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1BAh],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+184h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+188h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
xor ['eax,', 'eax']
jmp ['short', 'loc_E7FD']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['offset', '$SG11012']
call ['_FT_Message']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_TT_Done_Context']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN9_4']
dd ['offset', '$LN8_6']
align ['4']
endp
_TT_MulFix14	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jge ['short', 'loc_E86F']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
mov ['[ebp+arg_0],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_E87D']
mov ['edx,', '[ebp+arg_4]']
neg ['edx']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '10h']
and ['eax,', '0FFFFh']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
imul ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '10h']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '10h']
add ['edx,', '2000h']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_E8DD']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '0Eh']
mov ['ecx,', '[ebp+var_18]']
shl ['ecx,', '12h']
or ['eax,', 'ecx']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_E8FC']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_E904']
mov ['eax,', '[ebp+var_10]']
neg ['eax']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_TT_DotFix14	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFFFh']
imul ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
sar ['ecx,', '10h']
imul ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '10h']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+var_18]']
jnb ['short', 'loc_E967']
mov ['[ebp+var_28],', '1']
jmp ['short', 'loc_E96E']
mov ['[ebp+var_28],', '0']
mov ['ecx,', '[ebp+var_4]']
sar ['ecx,', '10h']
mov ['edx,', '[ebp+var_18]']
sar ['edx,', '1Fh']
add ['ecx,', '[ebp+var_28]']
add ['edx,', 'ecx']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFFFh']
imul ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '10h']
imul ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '10h']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_18]']
jnb ['short', 'loc_E9BB']
mov ['[ebp+var_2C],', '1']
jmp ['short', 'loc_E9C2']
mov ['[ebp+var_2C],', '0']
mov ['ecx,', '[ebp+var_4]']
sar ['ecx,', '10h']
mov ['edx,', '[ebp+var_18]']
sar ['edx,', '1Fh']
add ['ecx,', '[ebp+var_2C]']
add ['edx,', 'ecx']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+var_20]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+var_1C]']
jnb ['short', 'loc_E9F0']
mov ['[ebp+var_30],', '1']
jmp ['short', 'loc_E9F7']
mov ['[ebp+var_30],', '0']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_30]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '1Fh']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ebp+var_24]']
jnb ['short', 'loc_EA26']
mov ['[ebp+var_34],', '1']
jmp ['short', 'loc_EA2D']
mov ['[ebp+var_34],', '0']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_34]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '2000h']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+var_24]']
jnb ['short', 'loc_EA5C']
mov ['[ebp+var_38],', '1']
jmp ['short', 'loc_EA63']
mov ['[ebp+var_38],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '12h']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '0Eh']
or ['eax,', 'edx']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Current_Ratio	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+100h],', '0']
jnz ['loc_EB49']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+128h]']
test ['edx,', 'edx']
jnz ['short', 'loc_EACE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0F4h]']
mov ['[eax+100h],', 'edx']
jmp ['short', 'loc_EB49']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+126h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_EAF0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F8h]']
mov ['[edx+100h],', 'ecx']
jmp ['short', 'loc_EB49']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+126h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0F4h]']
push ['edx']
call ['_TT_MulFix14']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+128h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0F8h]']
push ['eax']
call ['_TT_MulFix14']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_FT_Hypot']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+100h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+100h]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_Current_Ppem	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[eax+0FCh]']
pop ['ebp']
retn
align ['4']
endp
_Current_Ppem_Stretched	proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Current_Ratio']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+0FCh]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['8']
endp
_Read_CVT	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+180h]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+edx*4]']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_Read_CVT_Stretched proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Current_Ratio']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+180h]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[edx+eax*4]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_Write_CVT	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+180h]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[ecx+edx*4],', 'eax']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Write_CVT_Stretched proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Current_Ratio']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+180h]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+edx*4],', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_Move_CVT	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+180h]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+edx*4]']
add ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+180h]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[edx+ecx*4],', 'eax']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_Move_CVT_Stretched proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
mov ['esi,', '[eax+180h]']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Current_Ratio']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
add ['eax,', '[esi+ecx*4]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+180h]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+edx*4],', 'eax']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_GetShortIns	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+168h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+164h]']
movzx ['eax,', 'byte', 'ptr', '[eax+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+164h]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-1]']
add ['eax,', 'edx']
pop ['ebp']
retn
align ['4']
endp
_Ins_Goto_CodeRange proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '1']
jl ['short', 'loc_ED4F']
cmp ['[ebp+arg_4],', '3']
jle ['short', 'loc_ED78']
push ['offset', '$SG11470']
push ['703h']
push ['84h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '84h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['al,', '1']
jmp ['loc_EE1E']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*8+1B4h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_EDB6']
push ['offset', '$SG11473']
push ['70Bh']
push ['8Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8Ah']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['al,', '1']
jmp ['short', 'loc_EE1E']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[edx+4]']
jbe ['short', 'loc_EDE7']
push ['offset', '$SG11475']
push ['715h']
push ['83h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '83h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['al,', '1']
jmp ['short', 'loc_EE1E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx+164h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[edx+16Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+168h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+160h],', 'edx']
xor ['al,', 'al']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_Direct_Move	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ah]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_EEAA']
movzx ['esi,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edi,', '[edx+10h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+234h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['eax,', '[edi+esi*8]']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edx,', '[edx+10h]']
mov ['[edx+ecx*8],', 'eax']
movzx ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+18h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
or ['eax,', '8']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edx,', '[edx+18h]']
mov ['[edx+ecx],', 'al']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ch]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_EF11']
movzx ['esi,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edi,', '[edx+10h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+234h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['eax,', '[edi+esi*8+4]']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edx,', '[edx+10h]']
mov ['[edx+ecx*8+4],', 'eax']
movzx ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+18h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
or ['eax,', '10h']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edx,', '[edx+18h]']
mov ['[edx+ecx],', 'al']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Direct_Move_Orig proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ah]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_EF7C']
movzx ['esi,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edi,', '[edx+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+234h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['eax,', '[edi+esi*8]']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edx,', '[edx+0Ch]']
mov ['[edx+ecx*8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ch]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_EFC5']
movzx ['esi,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edi,', '[edx+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+234h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['eax,', '[edi+esi*8+4]']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['edx,', '[edx+0Ch]']
mov ['[edx+ecx*8+4],', 'eax']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Direct_Move_X	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[eax+ecx*8]']
add ['ecx,', '[ebp+arg_C]']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['eax,', '[eax+10h]']
mov ['[eax+edx*8],', 'ecx']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+18h]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
or ['ecx,', '8']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['eax,', '[eax+18h]']
mov ['[eax+edx],', 'cl']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_Direct_Move_Y	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[eax+ecx*8+4]']
add ['ecx,', '[ebp+arg_C]']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['eax,', '[eax+10h]']
mov ['[eax+edx*8+4],', 'ecx']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+18h]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
or ['ecx,', '10h']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['eax,', '[eax+18h]']
mov ['[eax+edx],', 'cl']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_Direct_Move_Orig_X proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[eax+ecx*8]']
add ['ecx,', '[ebp+arg_C]']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['eax,', '[eax+0Ch]']
mov ['[eax+edx*8],', 'ecx']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_Direct_Move_Orig_Y proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[eax+ecx*8+4]']
add ['ecx,', '[ebp+arg_C]']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['eax,', '[eax+0Ch]']
mov ['[eax+edx*8+4],', 'ecx']
pop ['ebp']
retn
align ['8']
endp
_Round_None	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F103']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'ecx']
jns ['short', 'loc_F101']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_F119']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F119']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_Round_To_Grid	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F15A']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx+20h]']
and ['eax,', '0FFFFFFC0h']
mov ['[ebp+var_4],', 'eax']
jge ['short', 'loc_F158']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_F178']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_4]']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F178']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Round_To_Half_Grid proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F1B9']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0FFFFFFC0h']
add ['ecx,', '20h']
mov ['[ebp+var_4],', 'ecx']
jns ['short', 'loc_F1B7']
mov ['[ebp+var_4],', '20h']
jmp ['short', 'loc_F1D7']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+arg_4]']
and ['edx,', '0FFFFFFC0h']
add ['edx,', '20h']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F1D7']
mov ['[ebp+var_4],', '0FFFFFFE0h']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_Round_Down_To_Grid proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F216']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0FFFFFFC0h']
mov ['[ebp+var_4],', 'ecx']
jge ['short', 'loc_F214']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_F231']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+arg_4]']
and ['edx,', '0FFFFFFC0h']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F231']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_Round_Up_To_Grid proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F26A']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx+3Fh]']
and ['eax,', '0FFFFFFC0h']
mov ['[ebp+var_4],', 'eax']
jge ['short', 'loc_F268']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_F288']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_4]']
add ['ecx,', '3Fh']
and ['ecx,', '0FFFFFFC0h']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F288']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Round_To_Double_Grid proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F2CA']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx+10h]']
and ['eax,', '0FFFFFFE0h']
mov ['[ebp+var_4],', 'eax']
jge ['short', 'loc_F2C8']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_F2E8']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_4]']
add ['ecx,', '10h']
and ['ecx,', '0FFFFFFE0h']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F2E8']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Round_Super	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F350']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[eax+1E0h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1E4h]']
add ['ecx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax+1DCh]']
neg ['edx']
and ['ecx,', 'edx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[eax+1E0h]']
mov ['[ebp+var_4],', 'ecx']
jns ['short', 'loc_F34E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1E0h]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_F39D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+1E4h]']
sub ['eax,', '[edx+1E0h]']
sub ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1DCh]']
neg ['edx']
and ['eax,', 'edx']
neg ['eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '[eax+1E0h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F39D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1E0h]']
neg ['eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Round_Super_45	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_F40A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[eax+1E0h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1E4h]']
add ['ecx,', '[ebp+arg_8]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', 'ecx']
cdq
idiv ['dword', 'ptr', '[esi+1DCh]']
mov ['ecx,', '[ebp+arg_0]']
imul ['eax,', '[ecx+1DCh]']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[edx+1E0h]']
mov ['[ebp+var_4],', 'eax']
jns ['short', 'loc_F408']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1E0h]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_F45E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[eax+1E4h]']
sub ['eax,', '[ecx+1E0h]']
sub ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
cdq
idiv ['dword', 'ptr', '[ecx+1DCh]']
mov ['edx,', '[ebp+arg_0]']
imul ['eax,', '[edx+1DCh]']
neg ['eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '[eax+1E0h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_F45E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1E0h]']
neg ['eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Compute_Round	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
movzx ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '7']
ja ['loc_F504']
mov ['ecx,', '[ebp+var_4]']
jmp ['ds:$LN13_1[ecx*4]']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+238h],', 'offset', '_Round_None']
jmp ['short', 'loc_F504']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+238h],', 'offset', '_Round_To_Grid']
jmp ['short', 'loc_F504']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+238h],', 'offset', '_Round_Up_To_Grid']
jmp ['short', 'loc_F504']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+238h],', 'offset', '_Round_Down_To_Grid']
jmp ['short', 'loc_F504']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+238h],', 'offset', '_Round_To_Half_Grid']
jmp ['short', 'loc_F504']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+238h],', 'offset', '_Round_To_Double_Grid']
jmp ['short', 'loc_F504']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+238h],', 'offset', '_Round_Super']
jmp ['short', 'loc_F504']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+238h],', 'offset', '_Round_Super_45']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7_7']
dd ['offset', '$LN3_0']
dd ['offset', '$LN5_2']
dd ['offset', '$LN6_5']
dd ['offset', '$LN8_7']
dd ['offset', '$LN2']
dd ['offset', '$LN1']
endp
_SetSuperRound	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '0C0h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0C0h']
ja ['short', '$LN13_2']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'ds:$LN17_1[ecx]']
jmp ['ds:$LN19_4[edx*4]']
mov ['eax,', '[ebp+arg_4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1DCh],', 'eax']
jmp ['short', '$LN13_2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+1DCh],', 'eax']
jmp ['short', '$LN13_2']
mov ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1DCh],', 'ecx']
jmp ['short', '$LN13_2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+1DCh],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '30h']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '30h']
ja ['short', '$LN7_8']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'ds:$LN18_3[eax]']
jmp ['ds:$LN20_4[ecx*4]']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1E0h],', '0']
jmp ['short', '$LN7_8']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+1DCh]']
cdq
and ['edx,', '3']
add ['eax,', 'edx']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1E0h],', 'eax']
jmp ['short', '$LN7_8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1DCh]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1E0h],', 'eax']
jmp ['short', '$LN7_8']
mov ['edx,', '[ebp+arg_0]']
imul ['eax,', '[edx+1DCh],', '3']
cdq
and ['edx,', '3']
add ['eax,', 'edx']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1E0h],', 'eax']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '0Fh']
jnz ['short', 'loc_F63E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1DCh]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1E4h],', 'ecx']
jmp ['short', 'loc_F663']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '0Fh']
sub ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
imul ['eax,', '[ecx+1DCh]']
cdq
and ['edx,', '7']
add ['eax,', 'edx']
sar ['eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1E4h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+1DCh]']
cdq
and ['edx,', '0FFh']
add ['eax,', 'edx']
sar ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1DCh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1E0h]']
cdq
and ['edx,', '0FFh']
add ['eax,', 'edx']
sar ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1E0h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1E4h]']
cdq
and ['edx,', '0FFh']
add ['eax,', 'edx']
sar ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1E4h],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_2']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['1,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['2,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['3']
align ['4']
dd ['offset', '$LN5_3']
dd ['offset', '$LN4_1']
dd ['offset', '$LN3_1']
dd ['offset', '$LN7_8']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['1,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['2,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['3']
align ['8']
endp
_Project	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+128h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+126h]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_TT_DotFix14']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_Dual_Project	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+124h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+122h]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_TT_DotFix14']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_Project_x	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_Project_y	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_Compute_Funcs	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ah]']
cmp ['ecx,', '4000h']
jnz ['short', 'loc_F8DA']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+126h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+234h],', 'eax']
jmp ['short', 'loc_F93C']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+12Ch]']
cmp ['eax,', '4000h']
jnz ['short', 'loc_F900']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+128h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+234h],', 'edx']
jmp ['short', 'loc_F93C']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+126h]']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ah]']
imul ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+128h]']
mov ['eax,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[eax+12Ch]']
imul ['ecx,', 'eax']
add ['edx,', 'ecx']
sar ['edx,', '0Eh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+234h],', 'edx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+126h]']
cmp ['eax,', '4000h']
jnz ['short', 'loc_F95C']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+23Ch],', 'offset', '_Project_x']
jmp ['short', 'loc_F989']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+128h]']
cmp ['eax,', '4000h']
jnz ['short', 'loc_F97C']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+23Ch],', 'offset', '_Project_y']
jmp ['short', 'loc_F989']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+23Ch],', 'offset', '_Project']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+122h]']
cmp ['ecx,', '4000h']
jnz ['short', 'loc_F9AA']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+240h],', 'offset', '_Project_x']
jmp ['short', 'loc_F9D8']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+124h]']
cmp ['ecx,', '4000h']
jnz ['short', 'loc_F9CB']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+240h],', 'offset', '_Project_y']
jmp ['short', 'loc_F9D8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+240h],', 'offset', '_Dual_Project']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+248h],', 'offset', '_Direct_Move']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+24Ch],', 'offset', '_Direct_Move_Orig']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+234h],', '4000h']
jnz ['short', 'loc_FA5A']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+12Ah]']
cmp ['edx,', '4000h']
jnz ['short', 'loc_FA2F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+248h],', 'offset', '_Direct_Move_X']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+24Ch],', 'offset', '_Direct_Move_Orig_X']
jmp ['short', 'loc_FA5A']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+12Ch]']
cmp ['eax,', '4000h']
jnz ['short', 'loc_FA5A']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+248h],', 'offset', '_Direct_Move_Y']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+24Ch],', 'offset', '_Direct_Move_Orig_Y']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+234h],', '0']
jge ['short', 'loc_FA76']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+234h]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_FA82']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+234h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '400h']
jge ['short', 'loc_FA98']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+234h],', '4000h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+100h],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_Normalize	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_FAE9']
mov ['ecx,', '[ebp+arg_4]']
neg ['ecx']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_FAEF']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '4000h']
jge ['short', 'loc_FB39']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_FB08']
mov ['eax,', '[ebp+arg_8]']
neg ['eax']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_FB0E']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '4000h']
jge ['short', 'loc_FB39']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_FB27']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_FB27']
xor ['al,', 'al']
jmp ['short', 'loc_FB81']
mov ['edx,', '[ebp+arg_4]']
shl ['edx,', '0Eh']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '0Eh']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Hypot']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx],', 'ax']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx+2],', 'ax']
xor ['al,', 'al']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Ins_SxVTL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+74h]']
cmp ['eax,', 'edx']
jnb ['short', 'loc_FBD0']
movzx ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+50h]']
cmp ['eax,', 'edx']
jb ['short', 'loc_FC07']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_FC00']
push ['offset', '$SG11811']
push ['0AC8h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
mov ['al,', '1']
jmp ['loc_FC93']
movzx ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_10],', 'eax']
movzx ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+7Ch]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx]']
sub ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+4]']
sub ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_FC5D']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_FC5D']
mov ['[ebp+var_4],', '4000h']
mov ['[ebp+arg_C],', '0']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '1']
jz ['short', 'loc_FC79']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_C]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Normalize']
add ['esp,', '10h']
xor ['al,', 'al']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_MINDEX	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_FCDF']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+1Ch]']
jle ['short', 'loc_FD11']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_FD0F']
push ['offset', '$SG11825']
push ['111Dh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['short', 'loc_FD7D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
sub ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', 'ds:0FFFFFFFCh[edx*4]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
sub ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
lea ['edx,', '[ecx+edx*4+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
sub ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
lea ['ecx,', '[eax+ecx*4]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['ecx,', '[ebp+var_8]']
mov ['[edx+eax*4-4],', 'ecx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_Ins_ROLL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+edx],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+edx],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_SkipCode	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+174h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+168h],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+168h]']
cmp ['eax,', '[edx+16Ch]']
jge ['$Fail_Overflow$7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+164h]']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ecx+edx]']
mov ['[eax+170h],', 'cl']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
movsx ['ecx,', 'ds:_opcode_length[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+174h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+174h],', '0']
jge ['short', 'loc_FEEC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+16Ch]']
jl ['short', 'loc_FEBB']
jmp ['short', '$Fail_Overflow$7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+164h]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx+1]']
mov ['eax,', '[ebp+arg_0]']
imul ['edx,', '[eax+174h]']
mov ['ecx,', '2']
sub ['ecx,', 'edx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+174h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+174h]']
mov ['eax,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+16Ch]']
jg ['short', '$Fail_Overflow$7']
xor ['al,', 'al']
jmp ['short', 'loc_FF31']
push ['offset', '$SG11845']
push ['1163h']
push ['83h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '83h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['al,', '1']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_Ins_IF		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jz ['short', 'loc_FF75']
jmp ['loc_FFFC']
mov ['[ebp+var_4],', '1']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_SkipCode']
add ['esp,', '4']
movzx ['ecx,', 'al']
cmp ['ecx,', '1']
jnz ['short', 'loc_FF96']
jmp ['short', 'loc_FFFC']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[edx+170h]']
mov ['byte', 'ptr', '[ebp+var_C],', 'al']
cmp ['byte', 'ptr', '[ebp+var_C],', '1Bh']
jz ['short', 'loc_FFC1']
cmp ['byte', 'ptr', '[ebp+var_C],', '58h']
jz ['short', 'loc_FFB6']
cmp ['byte', 'ptr', '[ebp+var_C],', '59h']
jz ['short', 'loc_FFD9']
jmp ['short', 'loc_FFF4']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_FFF4']
cmp ['[ebp+var_4],', '1']
jnz ['short', 'loc_FFCD']
mov ['byte', 'ptr', '[ebp+var_10+3],', '1']
jmp ['short', 'loc_FFD1']
mov ['byte', 'ptr', '[ebp+var_10+3],', '0']
mov ['dl,', 'byte', 'ptr', '[ebp+var_10+3]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'dl']
jmp ['short', 'loc_FFF4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
jnz ['short', 'loc_FFEA']
mov ['byte', 'ptr', '[ebp+var_10+2],', '1']
jmp ['short', 'loc_FFEE']
mov ['byte', 'ptr', '[ebp+var_10+2],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_10+2]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'cl']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
test ['edx,', 'edx']
jz ['short', 'loc_FF80']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_Ins_ELSE	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_SkipCode']
add ['esp,', '4']
movzx ['eax,', 'al']
cmp ['eax,', '1']
jnz ['short', 'loc_10055']
jmp ['short', 'loc_10089']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+170h]']
mov ['byte', 'ptr', '[ebp+var_8],', 'dl']
cmp ['byte', 'ptr', '[ebp+var_8],', '58h']
jz ['short', 'loc_1006F']
cmp ['byte', 'ptr', '[ebp+var_8],', '59h']
jz ['short', 'loc_1007A']
jmp ['short', 'loc_10083']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_10083']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1003F']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_FDEF	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+194h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
imul ['eax,', '[edx+18Ch],', '18h']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_100E7']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '18h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_C]']
jnb ['short', 'loc_100FE']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
cmp ['edx,', '[ebp+var_4]']
jnz ['short', 'loc_100FC']
jmp ['short', 'loc_100FE']
jmp ['short', 'loc_100DE']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_C]']
jnz ['short', 'loc_10156']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+18Ch]']
cmp ['eax,', '[edx+190h]']
jb ['short', 'loc_10141']
push ['offset', '$SG11900']
push ['1243h']
push ['8Ch']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_1024D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18Ch]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+18Ch],', 'eax']
cmp ['[ebp+var_4],', '0FFFFh']
jbe ['short', 'loc_10186']
push ['offset', '$SG11902']
push ['124Dh']
push ['8Ch']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_1024D']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+160h]']
mov ['[eax],', 'edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['byte', 'ptr', '[edx+10h],', '1']
mov ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax+11h],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+1A4h]']
jbe ['short', 'loc_101E3']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1A4h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_SkipCode']
add ['esp,', '4']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1024D']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[edx+170h]']
mov ['byte', 'ptr', '[ebp+var_10],', 'al']
cmp ['byte', 'ptr', '[ebp+var_10],', '2Ch']
jz ['short', 'loc_10216']
cmp ['byte', 'ptr', '[ebp+var_10],', '2Dh']
jz ['short', 'loc_1023A']
cmp ['byte', 'ptr', '[ebp+var_10],', '89h']
jz ['short', 'loc_10216']
jmp ['short', 'loc_1024B']
push ['offset', '$SG11914']
push ['12DBh']
push ['89h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '89h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_1024D']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
mov ['[edx+8],', 'ecx']
jmp ['short', 'loc_1024D']
jmp ['short', 'loc_101E3']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_Ins_ENDF	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+1ACh],', '0']
jg ['short', 'loc_102B2']
push ['offset', '$SG11924']
push ['12FAh']
push ['88h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '88h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_10343']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1ACh]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1ACh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1ACh]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+1B4h]']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+178h],', '0']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jle ['short', 'loc_1032A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1ACh]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1ACh],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
mov ['[eax+168h],', 'ecx']
jmp ['short', 'loc_10343']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_Goto_CodeRange']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_CALL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1A4h]']
add ['edx,', '1']
cmp ['[ebp+var_4],', 'edx']
jb ['short', 'loc_10396']
jmp ['$Fail$11']
imul ['eax,', '[ebp+var_4],', '18h']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+194h]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1A4h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+18Ch]']
jnz ['short', 'loc_103C8']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0Ch]']
cmp ['eax,', '[ebp+var_4]']
jz ['short', 'loc_1040F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+194h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
imul ['ecx,', '[eax+18Ch],', '18h']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_10]']
jnb ['short', 'loc_10402']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0Ch]']
cmp ['ecx,', '[ebp+var_4]']
jz ['short', 'loc_10402']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '18h']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_103E4']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_1040F']
jmp ['$Fail$11']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+10h]']
test ['edx,', 'edx']
jnz ['short', 'loc_1041F']
jmp ['$Fail$11']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+1ACh]']
cmp ['edx,', '[ecx+1B0h]']
jl ['short', 'loc_1045A']
push ['offset', '$SG11949']
push ['135Ah']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_10501']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1ACh]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+1B4h]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+160h]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+8],', '1']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1ACh]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1ACh],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Ins_Goto_CodeRange']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+178h],', '0']
jmp ['short', 'loc_10501']
push ['offset', '$SG11950']
push ['136Fh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Ins_LOOPCALL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1A4h]']
add ['ecx,', '1']
cmp ['[ebp+var_4],', 'ecx']
jb ['short', 'loc_10556']
jmp ['$Fail$12']
imul ['edx,', '[ebp+var_4],', '18h']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+194h]']
mov ['[ebp+var_C],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1A4h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+18Ch]']
jnz ['short', 'loc_10588']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+0Ch]']
cmp ['edx,', '[ebp+var_4]']
jz ['short', 'loc_105CF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+194h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
imul ['eax,', '[edx+18Ch],', '18h']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_105C2']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0Ch]']
cmp ['eax,', '[ebp+var_4]']
jz ['short', 'loc_105C2']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '18h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_105A4']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_105CF']
jmp ['$Fail$12']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_105DF']
jmp ['$Fail$12']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+1ACh]']
cmp ['ecx,', '[eax+1B0h]']
jl ['short', 'loc_1061A']
push ['offset', '$SG11973']
push ['13B0h']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_106E0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jle ['loc_106BC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ACh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1B4h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+160h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+ecx]']
mov ['[edx+8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1ACh]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1ACh],', 'edx']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Ins_Goto_CodeRange']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+178h],', '0']
jmp ['short', 'loc_106E0']
push ['offset', '$SG11976']
push ['13C7h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_Ins_IDEF	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1A0h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
imul ['eax,', '[edx+198h],', '18h']
add ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1073A']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_1075C']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[edx+0Ch]']
cmp ['edx,', '[eax+ecx]']
jnz ['short', 'loc_1075A']
jmp ['short', 'loc_1075C']
jmp ['short', 'loc_10731']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_107B4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+198h]']
cmp ['eax,', '[edx+19Ch]']
jb ['short', 'loc_1079F']
push ['offset', '$SG11992']
push ['13E6h']
push ['8Dh']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8Dh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_108C8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+198h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+198h],', 'eax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+eax],', '0']
jl ['short', 'loc_107D9']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+eax],', '0FFh']
jle ['short', 'loc_10800']
push ['offset', '$SG11995']
push ['13EFh']
push ['8Dh']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8Dh']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_108C8']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+160h]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+10h],', '1']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+ecx]']
cmp ['ecx,', '[eax+1A8h]']
jbe ['short', 'loc_1086D']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1A8h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_SkipCode']
add ['esp,', '4']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_108C8']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+170h]']
mov ['byte', 'ptr', '[ebp+var_C],', 'cl']
cmp ['byte', 'ptr', '[ebp+var_C],', '2Ch']
jz ['short', 'loc_108A0']
cmp ['byte', 'ptr', '[ebp+var_C],', '2Dh']
jz ['short', 'loc_108C4']
cmp ['byte', 'ptr', '[ebp+var_C],', '89h']
jz ['short', 'loc_108A0']
jmp ['short', 'loc_108C6']
push ['offset', '$SG12008']
push ['1404h']
push ['89h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '89h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['short', 'loc_108C8']
jmp ['short', 'loc_108C8']
jmp ['short', 'loc_1086D']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_NPUSHB	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+164h]']
movzx ['cx,', 'byte', 'ptr', '[eax+ecx+1]']
mov ['word', 'ptr', '[ebp+var_4],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
sub ['ecx,', '[eax+10h]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_10943']
push ['offset', '$SG12022']
push ['1426h']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_109A0']
mov ['edx,', '1']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
jmp ['short', 'loc_1095A']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_8],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
cmp ['ecx,', 'edx']
jg ['short', 'loc_10990']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
add ['edx,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+164h]']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[ecx+edx+1]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+eax*4-4],', 'ecx']
jmp ['short', 'loc_1094E']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+20h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+20h],', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_Ins_NPUSHW	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+164h]']
movzx ['cx,', 'byte', 'ptr', '[eax+ecx+1]']
mov ['word', 'ptr', '[ebp+var_4],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
sub ['ecx,', '[eax+10h]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_10A23']
push ['offset', '$SG12038']
push ['1441h']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_10A8D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
add ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+168h],', 'eax']
xor ['edx,', 'edx']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
jmp ['short', 'loc_10A4C']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_8],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
cmp ['ecx,', 'edx']
jge ['short', 'loc_10A73']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_GetShortIns']
add ['esp,', '4']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
movsx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+ecx*4],', 'edx']
jmp ['short', 'loc_10A40']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+178h],', '0']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+20h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'edx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_Ins_PUSHB	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
sub ['ecx,', '0AFh']
mov ['word', 'ptr', '[ebp+var_4],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
sub ['ecx,', '[eax+10h]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_10B0B']
push ['offset', '$SG12054']
push ['145Fh']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_10B57']
mov ['edx,', '1']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
jmp ['short', 'loc_10B22']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_8],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
cmp ['ecx,', 'edx']
jg ['short', 'loc_10B57']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+168h]']
add ['edx,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+164h]']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[ecx+edx]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+eax*4-4],', 'ecx']
jmp ['short', 'loc_10B16']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_PUSHW	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
sub ['ecx,', '0B7h']
mov ['word', 'ptr', '[ebp+var_4],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
sub ['ecx,', '[eax+10h]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_10BCB']
push ['offset', '$SG12070']
push ['1478h']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_10C25']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+168h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+168h],', 'eax']
xor ['edx,', 'edx']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
jmp ['short', 'loc_10BF4']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_8],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
cmp ['ecx,', 'edx']
jge ['short', 'loc_10C1B']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_GetShortIns']
add ['esp,', '4']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
movsx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+ecx*4],', 'edx']
jmp ['short', 'loc_10BE8']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+178h],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_GC		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+74h]']
cmp ['[ebp+var_4],', 'edx']
jb ['short', 'loc_10CA6']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_10C9A']
push ['offset', '$SG12087']
push ['14A3h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['loc_10D29']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
and ['ecx,', '1']
jz ['short', 'loc_10CF0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+78h]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+ecx*8+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+78h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+edx*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+240h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_10D29']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+7Ch]']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+eax*8+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+7Ch]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+ecx*8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+ecx],', 'eax']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_Ins_SCFS	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_8],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+74h]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_10DC4']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_10DBF']
push ['offset', '$SG12104']
push ['14C8h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_10E68']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
mov ['esi,', 'esp']
mov ['edx,', '[ecx+edx*8+4]']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+7Ch]']
mov ['eax,', '[edx+eax*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+23Ch]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
sub ['eax,', '[ebp+var_4]']
mov ['esi,', 'esp']
push ['eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '6Ch']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+248h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+15Ch]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_10E68']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ecx+edx*8+4]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+78h]']
mov ['[esi+edx*8],', 'eax']
mov ['[esi+edx*8+4],', 'ecx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_MD		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax]']
mov ['[ebp+var_4],', 'dx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_8],', 'ax']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2Ch]']
cmp ['ecx,', 'eax']
jnb ['short', 'loc_10ED3']
movzx ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+50h]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_10F0F']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_10F03']
push ['offset', '$SG12124']
push ['14F4h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['[ebp+var_C],', '0']
jmp ['loc_110DD']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
and ['eax,', '1']
jz ['short', 'loc_10F79']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
movzx ['edx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['eax,', '[eax+ecx*8+4]']
sub ['eax,', '[esi+edx*8+4]']
mov ['esi,', 'esp']
push ['eax']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
movzx ['edx,', '[ebp+var_4]']
mov ['edi,', '[ebp+arg_0]']
mov ['edi,', '[edi+58h]']
mov ['eax,', '[eax+ecx*8]']
sub ['eax,', '[edi+edx*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+23Ch]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
jmp ['loc_110DD']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+158h]']
test ['edx,', 'edx']
jz ['short', 'loc_10F95']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+15Ah]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_10FF0']
movzx ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
lea ['edx,', '[ecx+edx*8]']
mov ['[ebp+var_10],', 'edx']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+240h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
jmp ['loc_110DD']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_18],', 'ecx']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
lea ['edx,', '[ecx+edx*8]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0DCh]']
cmp ['edx,', '[ecx+0E0h]']
jnz ['short', 'loc_11075']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[eax]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0DCh]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_110DD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0DCh]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[edx]']
sub ['ecx,', '[eax]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0E0h]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+ecx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN15_2']
dd ['offset', '$LN14_2']
endp
_Ins_SDPVTL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax+edx]']
mov ['[ebp+var_10],', 'cx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax]']
mov ['[ebp+var_14],', 'dx']
movzx ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+50h]']
cmp ['eax,', 'edx']
jnb ['short', 'loc_1118F']
movzx ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+74h]']
cmp ['eax,', 'edx']
jb ['short', 'loc_111C4']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_111BF']
push ['offset', '$SG12165']
push ['1541h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_112EF']
movzx ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_1C],', 'eax']
movzx ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+78h]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
sub ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[edx+4]']
sub ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1121A']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1121A']
mov ['[ebp+var_4],', '4000h']
mov ['[ebp+var_18],', '0']
mov ['edx,', '[ebp+var_18]']
and ['edx,', '1']
jz ['short', 'loc_11236']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_C]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '122h']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Normalize']
add ['esp,', '10h']
movzx ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_24],', 'ecx']
movzx ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
lea ['edx,', '[ecx+edx*8]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[eax]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+4]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_112A9']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_112A9']
mov ['[ebp+var_4],', '4000h']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+var_18]']
and ['eax,', '1']
jz ['short', 'loc_112C5']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
neg ['eax']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '126h']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Normalize']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Compute_Funcs']
add ['esp,', '4']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_Ins_SZP0	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_11334']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_1134C']
jmp ['short', 'loc_11364']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '0B4h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '24h']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_11396']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '24h']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_11396']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_11394']
push ['offset', '$SG12189']
push ['1595h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_113AF']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+eax]']
mov ['[ecx+158h],', 'ax']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Ins_SZP1	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_113F4']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_1140C']
jmp ['short', 'loc_11424']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '0B4h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '48h']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_11456']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '48h']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_11456']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_11454']
push ['offset', '$SG12206']
push ['15B2h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_1146F']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+eax]']
mov ['[ecx+15Ah],', 'ax']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Ins_SZP2	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_114B4']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_114CC']
jmp ['short', 'loc_114E4']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '0B4h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '6Ch']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_11516']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '6Ch']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_11516']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_11514']
push ['offset', '$SG12223']
push ['15CFh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_1152F']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+eax]']
mov ['[ecx+15Ch],', 'ax']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Ins_SZPS	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_11574']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_1158C']
jmp ['short', 'loc_115A4']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '0B4h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '24h']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_115D6']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '90h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '24h']
mov ['ecx,', '9']
rep ['movsd']
jmp ['short', 'loc_115D6']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_115D4']
push ['offset', '$SG12240']
push ['15ECh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_11647']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '24h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '48h']
mov ['ecx,', '9']
rep ['movsd']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '24h']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '6Ch']
mov ['ecx,', '9']
rep ['movsd']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+eax]']
mov ['[ecx+158h],', 'ax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+edx]']
mov ['[eax+15Ah],', 'dx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax+ecx]']
mov ['[edx+15Ch],', 'cx']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_INSTCTRL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_4],', '1']
jl ['short', 'loc_1169A']
cmp ['[ebp+var_4],', '2']
jle ['short', 'loc_116CC']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_116CA']
push ['offset', '$SG12255']
push ['160Bh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_116F9']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_116D8']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+150h]']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4]']
not ['edx']
and ['ecx,', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8]']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+150h],', 'cl']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_SCANCTRL	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
and ['eax,', '0FFh']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0FFh']
jnz ['short', 'loc_11743']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+151h],', '1']
jmp ['loc_1186C']
jmp ['short', 'loc_11758']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_11758']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+151h],', '0']
jmp ['loc_1186C']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
and ['eax,', '100h']
jz ['short', 'loc_11786']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+0FCh]']
cmp ['edx,', '[ebp+var_4]']
jg ['short', 'loc_11786']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+151h],', '1']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx]']
and ['ecx,', '200h']
jz ['short', 'loc_117B4']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+119h]']
test ['eax,', 'eax']
jz ['short', 'loc_117B4']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+151h],', '1']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
and ['edx,', '400h']
jz ['short', 'loc_117E2']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+11Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_117E2']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+151h],', '1']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
and ['eax,', '800h']
jz ['short', 'loc_11810']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+0FCh]']
cmp ['edx,', '[ebp+var_4]']
jle ['short', 'loc_11810']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+151h],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx]']
and ['ecx,', '1000h']
jz ['short', 'loc_1183E']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+119h]']
test ['eax,', 'eax']
jz ['short', 'loc_1183E']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+151h],', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
and ['edx,', '2000h']
jz ['short', 'loc_1186C']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+11Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1186C']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+151h],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_Ins_SCANTYPE	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+ecx],', '0']
jl ['short', 'loc_118A3']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+ecx]']
mov ['[edx+154h],', 'ecx']
pop ['ebp']
retn
align ['4']
endp
_Ins_FLIPPT	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+10h]']
cmp ['ecx,', '[eax+130h]']
jge ['short', 'loc_11905']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_11900']
push ['offset', '$SG12295']
push ['166Dh']
push ['81h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '81h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Fail$10_0']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+130h],', '0']
jle ['$Fail$10_0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['cx,', '[eax+ecx*4]']
mov ['word', 'ptr', '[ebp+var_4],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+98h]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_1197E']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_1197C']
push ['offset', '$SG12305']
push ['167Bh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_119D5']
jmp ['short', 'loc_119A2']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A8h]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
xor ['edx,', '1']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+0A8h]']
mov ['[ecx+eax],', 'dl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+130h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+130h],', 'eax']
jmp ['loc_11905']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+130h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['[eax+20h],', 'edx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_FLIPRGON	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax]']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_C],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+98h]']
cmp ['ecx,', 'eax']
jnb ['short', 'loc_11A4D']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+98h]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_11A7F']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_11A7D']
push ['offset', '$SG12325']
push ['169Eh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_11AC7']
mov ['dx,', 'word', 'ptr', '[ebp+var_C]']
mov ['word', 'ptr', '[ebp+var_4],', 'dx']
jmp ['short', 'loc_11A95']
mov ['ax,', 'word', 'ptr', '[ebp+var_4]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_4],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
cmp ['ecx,', 'edx']
jg ['short', 'loc_11AC7']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A8h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
or ['eax,', '1']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+0A8h]']
mov ['[edx+ecx],', 'al']
jmp ['short', 'loc_11A89']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_FLIPRGOFF	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax]']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_C],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+98h]']
cmp ['ecx,', 'eax']
jnb ['short', 'loc_11B3D']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+98h]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_11B6F']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_11B6D']
push ['offset', '$SG12347']
push ['16BAh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_11BB7']
mov ['dx,', 'word', 'ptr', '[ebp+var_C]']
mov ['word', 'ptr', '[ebp+var_4],', 'dx']
jmp ['short', 'loc_11B85']
mov ['ax,', 'word', 'ptr', '[ebp+var_4]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_4],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
cmp ['ecx,', 'edx']
jg ['short', 'loc_11BB7']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A8h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
and ['eax,', '0FFFFFFFEh']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+0A8h]']
mov ['[edx+ecx],', 'al']
jmp ['short', 'loc_11B79']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Compute_Point_Displacement proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
and ['ecx,', '1']
jz ['short', 'loc_11C0E']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '24h']
mov ['ecx,', '9']
lea ['edi,', '[ebp+var_28]']
rep ['movsd']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[edx+11Eh]']
mov ['[ebp+var_30],', 'ax']
jmp ['short', 'loc_11C2C']
mov ['esi,', '[ebp+arg_0]']
add ['esi,', '48h']
mov ['ecx,', '9']
lea ['edi,', '[ebp+var_28]']
rep ['movsd']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+120h]']
mov ['[ebp+var_30],', 'dx']
movzx ['eax,', '[ebp+var_30]']
movzx ['ecx,', '[ebp+var_20]']
cmp ['eax,', 'ecx']
jb ['short', 'loc_11C77']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_11C68']
push ['offset', '$SG12372']
push ['16DCh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'dx']
mov ['al,', '1']
jmp ['loc_11D26']
mov ['ecx,', '9']
lea ['esi,', '[ebp+var_28]']
mov ['edi,', '[ebp+arg_C]']
rep ['movsd']
mov ['ecx,', '[ebp+arg_10]']
mov ['dx,', '[ebp+var_30]']
mov ['[ecx],', 'dx']
movzx ['eax,', '[ebp+var_30]']
movzx ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ebp+var_18]']
mov ['esi,', '[ebp+var_1C]']
mov ['eax,', '[edx+eax*8+4]']
sub ['eax,', '[esi+ecx*8+4]']
mov ['esi,', 'esp']
push ['eax']
movzx ['ecx,', '[ebp+var_30]']
movzx ['edx,', '[ebp+var_30]']
mov ['eax,', '[ebp+var_18]']
mov ['edi,', '[ebp+var_1C]']
mov ['ecx,', '[eax+ecx*8]']
sub ['ecx,', '[edi+edx*8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23Ch]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_34],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+234h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+12Ah]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+234h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+12Ch]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
xor ['al,', 'al']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN8_8']
dd ['offset', '$LN7_9']
endp
_Move_Zp2_Point	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_11DC2']
movzx ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
mov ['edx,', '[ecx+edx*8]']
add ['edx,', '[ebp+arg_8]']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+7Ch]']
mov ['[ecx+eax*8],', 'edx']
movzx ['edx,', '[ebp+arg_10]']
test ['edx,', 'edx']
jz ['short', 'loc_11DC2']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+84h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
or ['eax,', '8']
movzx ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+84h]']
mov ['[edx+ecx],', 'al']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_11E1B']
movzx ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+7Ch]']
mov ['edx,', '[ecx+edx*8+4]']
add ['edx,', '[ebp+arg_C]']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+7Ch]']
mov ['[ecx+eax*8+4],', 'edx']
movzx ['edx,', '[ebp+arg_10]']
test ['edx,', 'edx']
jz ['short', 'loc_11E1B']
movzx ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+84h]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
or ['eax,', '10h']
movzx ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+84h]']
mov ['[edx+ecx],', 'al']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_Ins_SHP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '54h']
push ['edi']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '15h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+10h]']
cmp ['ecx,', '[eax+130h]']
jge ['short', 'loc_11E90']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_11E8B']
push ['offset', '$SG12404']
push ['173Eh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Fail$17']
lea ['edx,', '[ebp+var_34]']
push ['edx']
lea ['eax,', '[ebp+var_28]']
push ['eax']
lea ['ecx,', '[ebp+var_4C]']
push ['ecx']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Compute_Point_Displacement']
add ['esp,', '14h']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_11EB8']
jmp ['loc_11F7C']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+130h],', '0']
jle ['$Fail$17']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['cx,', '[eax+ecx*4]']
mov ['[ebp+var_54],', 'cx']
movzx ['edx,', '[ebp+var_54]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+74h]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_11F2E']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_11F2C']
push ['offset', '$SG12415']
push ['174Eh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_11F7C']
jmp ['short', 'loc_11F49']
push ['1']
mov ['edx,', '[ebp+var_4C]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
push ['eax']
movzx ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Move_Zp2_Point']
add ['esp,', '14h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+130h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+130h],', 'ecx']
jmp ['loc_11EB8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+130h],', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['[ecx+20h],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN15_3']
dd ['offset', '$LN11_2']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['2']
dd ['offset', '$LN12_2']
dd ['0FFFFFFC0h,', '4']
dd ['offset', '$LN13_3']
dd ['0FFFFFFB4h,', '4']
dd ['offset', '$LN14_3']
db ['78h,', '0']
align ['8']
endp
_Ins_SHC	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '68h']
push ['edi']
lea ['edi,', '[ebp+var_68]']
mov ['ecx,', '1Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_54],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+15Ch]']
test ['edx,', 'edx']
jnz ['short', 'loc_12028']
mov ['[ebp+var_68],', '1']
jmp ['short', 'loc_12032']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+76h]']
mov ['[ebp+var_68],', 'ecx']
mov ['dx,', 'word', 'ptr', '[ebp+var_68]']
mov ['[ebp+var_58],', 'dx']
movsx ['eax,', '[ebp+var_54]']
movsx ['ecx,', '[ebp+var_58]']
cmp ['eax,', 'ecx']
jb ['short', 'loc_1207B']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_12076']
push ['offset', '$SG12437']
push ['1780h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_1216D']
lea ['edx,', '[ebp+var_34]']
push ['edx']
lea ['eax,', '[ebp+var_28]']
push ['eax']
lea ['ecx,', '[ebp+var_4C]']
push ['ecx']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Compute_Point_Displacement']
add ['esp,', '14h']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_120A3']
jmp ['loc_1216D']
movsx ['edx,', '[ebp+var_54]']
test ['edx,', 'edx']
jnz ['short', 'loc_120B3']
xor ['eax,', 'eax']
mov ['[ebp+var_5C],', 'ax']
jmp ['short', 'loc_120D8']
movsx ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+88h]']
movzx ['ecx,', 'word', 'ptr', '[eax+ecx*2-2]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+8Ch]']
sub ['ecx,', 'eax']
mov ['[ebp+var_5C],', 'cx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+15Ch]']
test ['edx,', 'edx']
jnz ['short', 'loc_120F3']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax+74h]']
mov ['[ebp+var_60],', 'cx']
jmp ['short', 'loc_12117']
movsx ['edx,', '[ebp+var_54]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+8Ch]']
sub ['edx,', 'ecx']
add ['edx,', '1']
mov ['[ebp+var_60],', 'dx']
mov ['dx,', '[ebp+var_5C]']
mov ['[ebp+var_64],', 'dx']
jmp ['short', 'loc_1212D']
mov ['ax,', '[ebp+var_64]']
add ['ax,', '1']
mov ['[ebp+var_64],', 'ax']
movzx ['ecx,', '[ebp+var_64]']
movzx ['edx,', '[ebp+var_60]']
cmp ['ecx,', 'edx']
jge ['short', 'loc_1216D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[eax+7Ch]']
jnz ['short', 'loc_12150']
movzx ['edx,', '[ebp+var_34]']
movzx ['eax,', '[ebp+var_64]']
cmp ['edx,', 'eax']
jz ['short', 'loc_1216B']
push ['1']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
push ['edx']
movzx ['eax,', '[ebp+var_64]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Move_Zp2_Point']
add ['esp,', '14h']
jmp ['short', 'loc_12121']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '68h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN21_0']
dd ['offset', '$LN17_2']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['2']
dd ['offset', '$LN18_4']
dd ['0FFFFFFC0h,', '4']
dd ['offset', '$LN19_5']
dd ['0FFFFFFB4h,', '4']
dd ['offset', '$LN20_5']
db ['78h,', '0']
align ['4']
endp
_Ins_SHZ	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '58h']
push ['edi']
lea ['edi,', '[ebp+var_58]']
mov ['ecx,', '16h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+ecx],', '2']
jb ['short', 'loc_12234']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1222F']
push ['offset', '$SG12466']
push ['17B0h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_12309']
lea ['eax,', '[ebp+var_34]']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
lea ['edx,', '[ebp+var_4C]']
push ['edx']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Compute_Point_Displacement']
add ['esp,', '14h']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1225C']
jmp ['loc_12309']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+15Ch]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_12277']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[edx+74h]']
mov ['[ebp+var_54],', 'ax']
jmp ['short', 'loc_122B5']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+15Ch]']
cmp ['edx,', '1']
jnz ['short', 'loc_122AF']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+76h]']
test ['ecx,', 'ecx']
jle ['short', 'loc_122AF']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+76h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+88h]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2-2]']
add ['eax,', '1']
mov ['[ebp+var_54],', 'ax']
jmp ['short', 'loc_122B5']
xor ['ecx,', 'ecx']
mov ['[ebp+var_54],', 'cx']
xor ['edx,', 'edx']
mov ['[ebp+var_58],', 'dx']
jmp ['short', 'loc_122C9']
mov ['ax,', '[ebp+var_58]']
add ['ax,', '1']
mov ['[ebp+var_58],', 'ax']
movzx ['ecx,', '[ebp+var_58]']
movzx ['edx,', '[ebp+var_54]']
cmp ['ecx,', 'edx']
jge ['short', 'loc_12309']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[eax+7Ch]']
jnz ['short', 'loc_122EC']
movzx ['edx,', '[ebp+var_34]']
movzx ['eax,', '[ebp+var_58]']
cmp ['edx,', 'eax']
jz ['short', 'loc_12307']
push ['0']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
push ['edx']
movzx ['eax,', '[ebp+var_58]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Move_Zp2_Point']
add ['esp,', '14h']
jmp ['short', 'loc_122BD']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '58h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19_6']
dd ['offset', '$LN15_4']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['2']
dd ['offset', '$LN16_3']
dd ['0FFFFFFC0h,', '4']
dd ['offset', '$LN17_3']
dd ['0FFFFFFB4h,', '4']
dd ['offset', '$LN18_5']
db ['78h,', '0']
align ['8']
endp
_Ins_SHPIX	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+130h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['[edx+10h],', 'ecx']
jge ['short', 'loc_123DC']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_123D7']
push ['offset', '$SG12490']
push ['17DEh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['$Fail$10_1']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ah]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
push ['edx']
call ['_TT_MulFix14']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+12Ch]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
push ['edx']
call ['_TT_MulFix14']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+130h],', '0']
jle ['$Fail$10_1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['dx,', '[ecx+edx*4]']
mov ['word', 'ptr', '[ebp+var_C],', 'dx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+74h]']
cmp ['eax,', 'edx']
jb ['short', 'loc_1249C']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1249A']
push ['offset', '$SG12502']
push ['1801h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['short', 'loc_124EA']
jmp ['short', 'loc_124B7']
push ['1']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Move_Zp2_Point']
add ['esp,', '14h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+130h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+130h],', 'edx']
jmp ['loc_12426']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+130h],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[edx+20h],', 'ecx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_Ins_MSIRP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
push ['edi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_4],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+50h]']
cmp ['ecx,', 'eax']
jnb ['short', 'loc_12545']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+2Ch]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_1257A']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_12575']
push ['offset', '$SG12520']
push ['1885h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_126E6']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+15Ah]']
test ['eax,', 'eax']
jnz ['loc_1260C']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ecx+edx*8+4]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+54h]']
mov ['[esi+edx*8],', 'eax']
mov ['[esi+edx*8+4],', 'ecx']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '48h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24Ch]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ecx+edx*8+4]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['[esi+edx*8],', 'eax']
mov ['[esi+edx*8+4],', 'ecx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+34h]']
mov ['edx,', '[edx+eax*8+4]']
sub ['edx,', '[esi+ecx*8+4]']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['edi,', '[ebp+arg_0]']
mov ['edi,', '[edi+34h]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[edi+ecx*8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
sub ['edx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '48h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+248h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax+11Ch]']
mov ['[edx+11Eh],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', 'word', 'ptr', '[ebp+var_4]']
mov ['[edx+120h],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
and ['edx,', '1']
jz ['short', 'loc_126E6']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', 'word', 'ptr', '[ebp+var_4]']
mov ['[eax+11Ch],', 'cx']
pop ['edi']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_MDAP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_4],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2Ch]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_1276B']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_12766']
push ['offset', '$SG12537']
push ['18BBh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_1283D']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
and ['eax,', '1']
jz ['short', 'loc_127EF']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['esi,', 'esp']
mov ['ecx,', '[eax+ecx*8+4]']
push ['ecx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['edx,', '[ecx+edx*8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+108h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+238h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_127F6']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_C]']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '24h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+248h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', 'word', 'ptr', '[ebp+var_4]']
mov ['[edx+11Ch],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_4]']
mov ['[ecx+11Eh],', 'dx']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_Ins_MIAP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+140h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax]']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+2Ch]']
cmp ['eax,', 'edx']
jnb ['short', 'loc_128C3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax+17Ch]']
jb ['short', 'loc_128F8']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_128F3']
push ['offset', '$SG12560']
push ['18FAh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Fail$11_0']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+254h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+158h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_12993']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+12Ah]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_TT_MulFix14']
add ['esp,', '8']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+30h]']
mov ['[ecx+edx*8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+12Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_TT_MulFix14']
add ['esp,', '8']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+30h]']
mov ['[ecx+edx*8+4],', 'eax']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ecx+edx*8+4]']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+34h]']
mov ['[esi+edx*8],', 'eax']
mov ['[esi+edx*8+4],', 'ecx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['esi,', 'esp']
mov ['eax,', '[edx+eax*8+4]']
push ['eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '[eax+ecx*8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23Ch]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
and ['eax,', '1']
jz ['short', 'loc_12A3E']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_10]']
jns ['short', 'loc_129F2']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ebp+var_10]']
neg ['edx']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_129FB']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[ebp+var_14]']
jle ['short', 'loc_12A09']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+108h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+238h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ebp+var_10]']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '24h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+248h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
mov ['[edx+11Ch],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_8]']
mov ['[ecx+11Eh],', 'dx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_MDRP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+134h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx+eax]']
mov ['[ebp+var_4],', 'dx']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+50h]']
cmp ['eax,', 'edx']
jnb ['short', 'loc_12AF2']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+11Ch]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2Ch]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_12B27']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_12B22']
push ['offset', '$SG12585']
push ['1964h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Fail$27']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+158h]']
test ['eax,', 'eax']
jz ['short', 'loc_12B43']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+15Ah]']
test ['edx,', 'edx']
jnz ['short', 'loc_12BA4']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
lea ['edx,', '[ecx+edx*8]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[eax]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_12C97']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5Ch]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
lea ['edx,', '[ecx+edx*8]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0DCh]']
cmp ['edx,', '[ecx+0E0h]']
jnz ['short', 'loc_12C2F']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[eax]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0DCh]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_12C97']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0DCh]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[edx]']
sub ['ecx,', '[eax]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0E0h]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_28],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+148h]']
jns ['short', 'loc_12CB8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[edx+148h]']
neg ['eax']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_12CC7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '[ecx+148h]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_34]']
cmp ['ecx,', '[eax+144h]']
jge ['short', 'loc_12CF7']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_12CE9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+148h]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_12CF7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+148h]']
neg ['edx']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
and ['ecx,', '4']
jz ['short', 'loc_12D42']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
and ['eax,', '3']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+108h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+238h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_12D6D']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
and ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4+108h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Round_None']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
and ['edx,', '8']
jz ['short', 'loc_12DA4']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_12D92']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_10]']
jge ['short', 'loc_12D90']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_12DA4']
mov ['edx,', '[ebp+var_10]']
neg ['edx']
cmp ['[ebp+var_C],', 'edx']
jle ['short', 'loc_12DA4']
mov ['eax,', '[ebp+var_10]']
neg ['eax']
mov ['[ebp+var_C],', 'eax']
movzx ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['edx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[edx+11Ch]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+34h]']
mov ['eax,', '[eax+ecx*8+4]']
sub ['eax,', '[esi+edx*8+4]']
mov ['esi,', 'esp']
push ['eax']
movzx ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['edx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[edx+11Ch]']
mov ['edi,', '[ebp+arg_0]']
mov ['edi,', '[edi+34h]']
mov ['eax,', '[eax+ecx*8]']
sub ['eax,', '[edi+edx*8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+23Ch]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['ecx']
movzx ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '48h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+248h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[edx+11Ch]']
mov ['[ecx+11Eh],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ebp+var_4]']
mov ['[ecx+120h],', 'dx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
and ['ecx,', '10h']
jz ['short', 'loc_12E73']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[ebp+var_4]']
mov ['[edx+11Ch],', 'ax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN25_0']
dd ['offset', '$LN24_0']
endp
_Ins_MIRP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+134h]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+140h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax+edx]']
mov ['[ebp+var_4],', 'cx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+50h]']
cmp ['edx,', 'ecx']
jnb ['short', 'loc_12F43']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+17Ch]']
add ['eax,', '1']
cmp ['[ebp+var_8],', 'eax']
jnb ['short', 'loc_12F43']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+2Ch]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_12F78']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_12F73']
push ['offset', '$SG12639']
push ['19FBh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Fail$28']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_12F87']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_12FAC']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '1']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+254h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[eax+148h]']
jns ['short', 'loc_12FCD']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '[edx+148h]']
neg ['eax']
mov ['[ebp+var_24],', 'eax']
jmp ['short', 'loc_12FDC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ecx+148h]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[eax+144h]']
jge ['short', 'loc_1300C']
cmp ['[ebp+var_C],', '0']
jl ['short', 'loc_12FFE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+148h]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1300C']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+148h]']
neg ['edx']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+15Ah]']
test ['ecx,', 'ecx']
jnz ['loc_130B0']
mov ['edx,', '[ebp+arg_0]']
movzx ['esi,', 'word', 'ptr', '[edx+11Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['edi,', '[eax+30h]']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+12Ah]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_TT_MulFix14']
add ['esp,', '8']
add ['eax,', '[edi+esi*8]']
movzx ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+54h]']
mov ['[edx+ecx*8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['esi,', 'word', 'ptr', '[eax+11Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edi,', '[ecx+30h]']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+12Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_TT_MulFix14']
add ['esp,', '8']
add ['eax,', '[edi+esi*8+4]']
movzx ['edx,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+54h]']
mov ['[ecx+edx*8+4],', 'eax']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ecx+edx*8+4]']
movzx ['edx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['[esi+edx*8],', 'eax']
mov ['[esi+edx*8+4],', 'ecx']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+30h]']
mov ['edx,', '[edx+eax*8+4]']
sub ['edx,', '[esi+ecx*8+4]']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['edi,', '[ebp+arg_0]']
mov ['edi,', '[edi+30h]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[edi+ecx*8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+34h]']
mov ['edx,', '[edx+eax*8+4]']
sub ['edx,', '[esi+ecx*8+4]']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['edi,', '[ebp+arg_0]']
mov ['edi,', '[edi+34h]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[edi+ecx*8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+13Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_13192']
mov ['edx,', '[ebp+var_18]']
xor ['edx,', '[ebp+var_C]']
jge ['short', 'loc_13192']
mov ['eax,', '[ebp+var_C]']
neg ['eax']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
and ['edx,', '4']
jz ['loc_13225']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+158h]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+15Ah]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_131E9']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_18]']
jns ['short', 'loc_131D2']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ebp+var_18]']
neg ['edx']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_131DB']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '[ebp+var_18]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[ebp+var_1C]']
jle ['short', 'loc_131E9']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+170h]']
and ['ecx,', '3']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+108h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+238h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_13250']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
and ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+108h]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Round_None']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
and ['eax,', '8']
jz ['short', 'loc_13287']
cmp ['[ebp+var_18],', '0']
jl ['short', 'loc_13275']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+var_20]']
jge ['short', 'loc_13273']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_13287']
mov ['eax,', '[ebp+var_20]']
neg ['eax']
cmp ['[ebp+var_10],', 'eax']
jle ['short', 'loc_13287']
mov ['ecx,', '[ebp+var_20]']
neg ['ecx']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_14]']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '48h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+248h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax+11Ch]']
mov ['[edx+11Eh],', 'cx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+170h]']
and ['eax,', '10h']
jz ['short', 'loc_132E6']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ebp+var_4]']
mov ['[ecx+11Ch],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[ebp+var_4]']
mov ['[eax+120h],', 'cx']
pop ['edi']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_ALIGNRP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
push ['edi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+10h]']
cmp ['ecx,', '[eax+130h]']
jl ['short', 'loc_13350']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+11Ch]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+2Ch]']
cmp ['eax,', 'edx']
jb ['short', 'loc_13385']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_13380']
push ['offset', '$SG12674']
push ['1ACFh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['$Fail$11_1']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+130h],', '0']
jle ['$Fail$11_1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['dx,', '[ecx+edx*4]']
mov ['word', 'ptr', '[ebp+var_4],', 'dx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+50h]']
cmp ['eax,', 'edx']
jb ['short', 'loc_13401']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_133FC']
push ['offset', '$SG12684']
push ['1ADDh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_134C3']
jmp ['loc_13490']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+34h]']
mov ['edx,', '[edx+eax*8+4]']
sub ['edx,', '[esi+ecx*8+4]']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[ecx+11Ch]']
mov ['edi,', '[ebp+arg_0]']
mov ['edi,', '[edi+34h]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[edi+ecx*8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
neg ['eax']
mov ['esi,', 'esp']
push ['eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '48h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+248h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+130h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+130h],', 'ecx']
jmp ['loc_13385']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+130h],', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['[ecx+20h],', 'eax']
pop ['edi']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_ISECT	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '50h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_50]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'ax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_8],', 'ax']
mov ['ecx,', '4']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['[ebp+var_C],', 'ax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax+edx]']
mov ['[ebp+var_10],', 'cx']
mov ['edx,', '4']
shl ['edx,', '2']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax+edx]']
mov ['[ebp+var_14],', 'cx']
movzx ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+2Ch]']
cmp ['edx,', 'ecx']
jnb ['short', 'loc_13598']
movzx ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+2Ch]']
cmp ['edx,', 'ecx']
jnb ['short', 'loc_13598']
movzx ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+50h]']
cmp ['edx,', 'ecx']
jnb ['short', 'loc_13598']
movzx ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+50h]']
cmp ['edx,', 'ecx']
jnb ['short', 'loc_13598']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+74h]']
cmp ['edx,', 'ecx']
jb ['short', 'loc_135CD']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_135C8']
push ['offset', '$SG12725']
push ['1B18h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_1386B']
movzx ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
movzx ['eax,', '[ebp+var_10]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+34h]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[esi+eax*8]']
mov ['[ebp+var_30],', 'ecx']
movzx ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
movzx ['eax,', '[ebp+var_10]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+34h]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[esi+eax*8+4]']
mov ['[ebp+var_34],', 'ecx']
movzx ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
movzx ['eax,', '[ebp+var_8]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[esi+eax*8]']
mov ['[ebp+var_28],', 'ecx']
movzx ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
movzx ['eax,', '[ebp+var_8]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[esi+eax*8+4]']
mov ['[ebp+var_2C],', 'ecx']
movzx ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
movzx ['eax,', '[ebp+var_8]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[esi+eax*8]']
mov ['[ebp+var_20],', 'ecx']
movzx ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
movzx ['eax,', '[ebp+var_8]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[esi+eax*8+4]']
mov ['[ebp+var_24],', 'ecx']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+84h]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
or ['edx,', '18h']
movzx ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+84h]']
mov ['[ecx+eax],', 'dl']
push ['40h']
mov ['edx,', '[ebp+var_34]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
push ['40h']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_18],', 'esi']
push ['40h']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
push ['40h']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_1C],', 'esi']
cmp ['[ebp+var_18],', '0']
jge ['short', 'loc_1370D']
mov ['ecx,', '[ebp+var_18]']
neg ['ecx']
mov ['[ebp+var_4C],', 'ecx']
jmp ['short', 'loc_13713']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_4C],', 'edx']
cmp ['[ebp+var_1C],', '0']
jge ['short', 'loc_13723']
mov ['eax,', '[ebp+var_1C]']
neg ['eax']
mov ['[ebp+var_50],', 'eax']
jmp ['short', 'loc_13729']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_50],', 'ecx']
imul ['edx,', '[ebp+var_4C],', '13h']
cmp ['edx,', '[ebp+var_50]']
jle ['loc_137D2']
push ['40h']
mov ['eax,', '[ebp+var_34]']
neg ['eax']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
push ['40h']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_38],', 'esi']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_40],', 'eax']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[eax+ecx*8]']
add ['ecx,', '[ebp+var_44]']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+7Ch]']
mov ['[eax+edx*8],', 'ecx']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[eax+ecx*8+4]']
add ['ecx,', '[ebp+var_40]']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+7Ch]']
mov ['[eax+edx*8+4],', 'ecx']
jmp ['loc_1386B']
movzx ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
movzx ['edx,', '[ebp+var_C]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['eax,', '[eax+ecx*8]']
add ['eax,', '[esi+edx*8]']
movzx ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+34h]']
add ['eax,', '[edx+ecx*8]']
movzx ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+34h]']
add ['eax,', '[edx+ecx*8]']
cdq
and ['edx,', '3']
add ['eax,', 'edx']
sar ['eax,', '2']
movzx ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+7Ch]']
mov ['[edx+ecx*8],', 'eax']
movzx ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
movzx ['ecx,', '[ebp+var_C]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['eax,', '[edx+eax*8+4]']
add ['eax,', '[esi+ecx*8+4]']
movzx ['edx,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+34h]']
add ['eax,', '[ecx+edx*8+4]']
movzx ['edx,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+34h]']
add ['eax,', '[ecx+edx*8+4]']
cdq
and ['edx,', '3']
add ['eax,', 'edx']
sar ['eax,', '2']
movzx ['edx,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+7Ch]']
mov ['[ecx+edx*8+4],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '50h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN13_4']
dd ['offset', '$LN12_3']
endp
_Ins_ALIGNPTS	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
push ['edi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_4],', 'ax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_8],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+50h]']
cmp ['ecx,', 'eax']
jnb ['short', 'loc_13909']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2Ch]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_1393E']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_13939']
push ['offset', '$SG12746']
push ['1B64h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_139F1']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+58h]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[esi+eax*8+4]']
mov ['esi,', 'esp']
push ['ecx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
mov ['edi,', '[ebp+arg_0]']
mov ['edi,', '[edi+58h]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[edi+eax*8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+23Ch]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_C]']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '48h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+248h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_C]']
neg ['edx']
mov ['esi,', 'esp']
push ['edx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '24h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+248h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['edi']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_IP		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '4Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+10h]']
cmp ['ecx,', '[eax+130h]']
jge ['short', 'loc_13A71']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_13A6C']
push ['offset', '$SG12760']
push ['1B87h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Fail$35']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+158h]']
test ['eax,', 'eax']
jz ['short', 'loc_13AA4']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+15Ah]']
test ['edx,', 'edx']
jz ['short', 'loc_13AA4']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+15Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_13AA4']
mov ['[ebp+var_48],', '0']
jmp ['short', 'loc_13AAB']
mov ['[ebp+var_48],', '1']
mov ['edx,', '[ebp+var_48]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+11Eh]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2Ch]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_13AFB']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_13AF6']
push ['offset', '$SG12766']
push ['1B95h']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Fail$35']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_13B19']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+11Eh]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_13B2F']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+11Eh]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
lea ['edx,', '[ecx+edx*8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+11Eh]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+11Eh]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+2Ch]']
cmp ['eax,', 'edx']
jnb ['short', 'loc_13B6F']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+120h]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+50h]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_13B82']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
jmp ['loc_13D20']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_13BDF']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+120h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+120h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
jmp ['loc_13CCE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0DCh]']
cmp ['edx,', '[ecx+0E0h]']
jnz ['short', 'loc_13C4A']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+120h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5Ch]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[eax+ecx*8+4]']
sub ['eax,', '[edx+4]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+120h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+240h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
jmp ['loc_13CCE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0DCh]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+120h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[eax]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0E0h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+120h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_1C],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+240h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+120h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+120h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_13D37']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+130h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+130h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+130h],', '0']
jle ['$Fail$35']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
sub ['edx,', '1']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4C]']
mov ['[eax+1Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+74h]']
cmp ['[ebp+var_28],', 'ecx']
jb ['short', 'loc_13DB1']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+231h]']
test ['eax,', 'eax']
jz ['short', 'loc_13DAC']
push ['offset', '$SG12797']
push ['1BCDh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_13FA0']
jmp ['loc_13D22']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_13E00']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+78h]']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[eax+ecx*8+4]']
sub ['eax,', '[edx+4]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+78h]']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+240h]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2C],', 'eax']
jmp ['loc_13EDC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0DCh]']
cmp ['edx,', '[ecx+0E0h]']
jnz ['short', 'loc_13E60']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ecx+edx*8+4]']
sub ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+80h]']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[eax+ecx*8]']
sub ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+240h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_13EDC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0DCh]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[eax]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_40],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0E0h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[edx+eax*8+4]']
sub ['edx,', '[ecx+4]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_3C],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+240h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+7Ch]']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax+ecx*8+4]']
sub ['eax,', '[edx+4]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+7Ch]']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[edx+eax*8]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+23Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_13F4D']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_13F45']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_13F4B']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_13F54']
mov ['[ebp+var_34],', '0']
mov ['ecx,', '[ebp+var_34]']
sub ['ecx,', '[ebp+var_30]']
mov ['esi,', 'esp']
push ['ecx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '6Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+248h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_13D22']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+130h],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[edx+20h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN34']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN33_1']
dd ['offset', '$LN31_2']
dd ['0FFFFFFC0h,', '8']
dd ['offset', '$LN32_1']
endp
_Ins_UTP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+ecx]']
mov ['word', 'ptr', '[ebp+var_4],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2Ch]']
cmp ['ecx,', 'eax']
jb ['short', 'loc_14060']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_1405E']
push ['offset', '$SG12825']
push ['1C1Dh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_140B5']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0FFh']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+12Ah]']
test ['eax,', 'eax']
jz ['short', 'loc_1407C']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+3]']
and ['ecx,', '0FFFFFFF7h']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'cl']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+12Ch]']
test ['eax,', 'eax']
jz ['short', 'loc_14094']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+3]']
and ['ecx,', '0FFFFFFEFh']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'cl']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+3]']
movzx ['ecx,', 'byte', 'ptr', '[ecx+edx]']
and ['ecx,', 'eax']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+3Ch]']
mov ['[eax+edx],', 'cl']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
__iup_worker_shift proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['edx,', '[ebp+arg_C]']
mov ['esi,', '[ebp+arg_C]']
mov ['ecx,', '[ecx+edx*8]']
sub ['ecx,', '[eax+esi*8]']
mov ['[ebp+var_8],', 'ecx']
jz ['short', 'loc_14168']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_1410A']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_C]']
jnb ['short', 'loc_1412F']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+ecx*8]']
add ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['eax,', '[ebp+var_4]']
mov ['[ecx+eax*8],', 'edx']
jmp ['short', 'loc_14101']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_14143']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_8]']
ja ['short', 'loc_14168']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+eax*8]']
add ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[eax+edx*8],', 'ecx']
jmp ['short', 'loc_1413A']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
__iup_worker_interpolate proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_1419C']
jmp ['loc_14366']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_C]']
cmp ['edx,', '[ecx+0Ch]']
jnb ['short', 'loc_141B2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_10]']
cmp ['ecx,', '[eax+0Ch]']
jb ['short', 'loc_141B7']
jmp ['loc_14366']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_C]']
jle ['short', 'loc_14201']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_C],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+arg_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[edx+eax*8]']
sub ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[eax+ecx*8]']
sub ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_C]']
jnz ['short', 'loc_142A2']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_1425A']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_8]']
ja ['short', 'loc_1429D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+eax*8]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_28]']
cmp ['edx,', '[ebp+var_10]']
jg ['short', 'loc_14283']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_1428C']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_28]']
mov ['[eax+ecx*8],', 'edx']
jmp ['short', 'loc_14251']
jmp ['loc_14366']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_2D],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_142BE']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_8]']
ja ['loc_14366']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
cmp ['ecx,', '[ebp+var_10]']
jg ['short', 'loc_142EB']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+var_34],', 'edx']
jmp ['short', 'loc_14352']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_14]']
jl ['short', 'loc_142FE']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_34],', 'ecx']
jmp ['short', 'loc_14352']
movzx ['edx,', '[ebp+var_2D]']
test ['edx,', 'edx']
jnz ['short', 'loc_1432B']
mov ['[ebp+var_2D],', '1']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_18]']
sub ['ecx,', 'edx']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_2C],', 'eax']
mov ['esi,', '[ebp+var_10]']
add ['esi,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+eax*8]']
sub ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_34],', 'esi']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_34]']
mov ['[eax+ecx*8],', 'edx']
jmp ['loc_142B5']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Ins_IUP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+9Ah]']
test ['eax,', 'eax']
jnz ['short', 'loc_143AD']
jmp ['loc_145A0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
and ['edx,', '1']
jz ['short', 'loc_143E6']
mov ['[ebp+var_19],', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A4h]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_14417']
mov ['[ebp+var_19],', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
add ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A0h]']
add ['eax,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A4h]']
add ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+98h]']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
mov ['[ebp+var_34],', 'dx']
mov ['[ebp+var_30],', '0']
movsx ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0ACh]']
movzx ['eax,', 'word', 'ptr', '[edx+eax*2]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+0B0h]']
sub ['eax,', 'edx']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+98h]']
cmp ['[ebp+var_24],', 'edx']
jb ['short', 'loc_14476']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+98h]']
sub ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_30]']
cmp ['edx,', '[ebp+var_24]']
ja ['short', 'loc_144A1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A8h]']
mov ['edx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[ecx+edx]']
movzx ['ecx,', '[ebp+var_19]']
and ['eax,', 'ecx']
jnz ['short', 'loc_144A1']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
jmp ['short', 'loc_14476']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_24]']
ja ['loc_1457E']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_30]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
cmp ['ecx,', '[ebp+var_24]']
ja ['short', 'loc_14515']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A8h]']
mov ['ecx,', '[ebp+var_30]']
movzx ['edx,', 'byte', 'ptr', '[eax+ecx]']
movzx ['eax,', '[ebp+var_19]']
and ['edx,', 'eax']
jz ['short', 'loc_1450A']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
call ['__iup_worker_interpolate']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
jmp ['short', 'loc_144C2']
mov ['edx,', '[ebp+var_2C]']
cmp ['edx,', '[ebp+var_28]']
jnz ['short', 'loc_14537']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['__iup_worker_shift']
add ['esp,', '10h']
jmp ['short', 'loc_1457E']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
movzx ['edx,', 'cx']
push ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['__iup_worker_interpolate']
add ['esp,', '14h']
cmp ['[ebp+var_28],', '0']
jbe ['short', 'loc_1457E']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
call ['__iup_worker_interpolate']
add ['esp,', '14h']
mov ['ax,', '[ebp+var_34]']
add ['ax,', '1']
mov ['[ebp+var_34],', 'ax']
movsx ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+9Ah]']
cmp ['ecx,', 'eax']
jl ['loc_14431']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN20_7']
dd ['offset', '$LN19_7']
endp
_Ins_DELTAP	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+250h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_1463A']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_4]']
ja ['$Fail$18']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '2']
jge ['short', 'loc_1468E']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_1467F']
push ['offset', '$SG12964']
push ['1D52h']
push ['81h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '81h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
jmp ['$Fail$18']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['cx,', '[eax+ecx*4+4]']
mov ['word', 'ptr', '[ebp+var_C],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[edx+eax*4]']
mov ['[ebp+var_18],', 'eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2Ch]']
cmp ['ecx,', 'eax']
jnb ['loc_14791']
mov ['ecx,', '[ebp+var_18]']
and ['ecx,', '0F0h']
shr ['ecx,', '4']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[edx+170h]']
mov ['byte', 'ptr', '[ebp+var_1C],', 'al']
cmp ['byte', 'ptr', '[ebp+var_1C],', '71h']
jz ['short', 'loc_14702']
cmp ['byte', 'ptr', '[ebp+var_1C],', '72h']
jz ['short', 'loc_1470D']
jmp ['short', 'loc_14716']
jmp ['short', 'loc_14716']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_14716']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '20h']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+14Ch]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_1478F']
mov ['eax,', '[ebp+var_18]']
and ['eax,', '0Fh']
sub ['eax,', '8']
mov ['[ebp+var_18],', 'eax']
js ['short', 'loc_14745']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+14Eh]']
mov ['ecx,', '6']
sub ['ecx,', 'eax']
mov ['edx,', '1']
shl ['edx,', 'cl']
imul ['edx,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_18]']
push ['eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '24h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+248h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_147C1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_147C1']
push ['offset', '$SG12983']
push ['1DBFh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_14631']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['[eax+20h],', 'edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Ins_DELTAC	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+250h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_1484A']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_4]']
ja ['$Fail$18_0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '2']
jge ['short', 'loc_1489E']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+231h]']
test ['edx,', 'edx']
jz ['short', 'loc_1488F']
push ['offset', '$SG13003']
push ['1DF1h']
push ['81h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '81h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
jmp ['$Fail$18_0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
sub ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[eax+ecx*4+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[edx+eax*4]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+17Ch]']
jb ['short', 'loc_1491A']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+231h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_14915']
push ['offset', '$SG13010']
push ['1DFFh']
push ['86h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '86h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_149DA']
jmp ['loc_149C9']
mov ['eax,', '[ebp+var_18]']
and ['eax,', '0F0h']
shr ['eax,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+170h]']
mov ['byte', 'ptr', '[ebp+var_1C],', 'dl']
cmp ['byte', 'ptr', '[ebp+var_1C],', '74h']
jz ['short', 'loc_14944']
cmp ['byte', 'ptr', '[ebp+var_1C],', '75h']
jz ['short', 'loc_1494F']
jmp ['short', 'loc_14958']
jmp ['short', 'loc_14958']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '10h']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_14958']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '20h']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+14Ch]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+var_10]']
jnz ['short', 'loc_149C9']
mov ['edx,', '[ebp+var_18]']
and ['edx,', '0Fh']
sub ['edx,', '8']
mov ['[ebp+var_18],', 'edx']
js ['short', 'loc_14987']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+14Eh]']
mov ['ecx,', '6']
sub ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', 'cl']
imul ['eax,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+25Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_14841']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['[eax+20h],', 'edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_Ins_GETINFO	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
and ['eax,', '1']
jz ['short', 'loc_14A24']
mov ['[ebp+var_4],', '23h']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx]']
and ['ecx,', '2']
jz ['short', 'loc_14A51']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+119h]']
test ['eax,', 'eax']
jz ['short', 'loc_14A51']
mov ['ecx,', '[ebp+var_4]']
or ['ecx,', '80h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
and ['edx,', '4']
jz ['short', 'loc_14A7E']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+11Ah]']
test ['ecx,', 'ecx']
jz ['short', 'loc_14A7E']
mov ['edx,', '[ebp+var_4]']
or ['edx,', '100h']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+ecx]']
and ['eax,', '20h']
jz ['short', 'loc_14AAA']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+260h]']
test ['edx,', 'edx']
jz ['short', 'loc_14AAA']
mov ['eax,', '[ebp+var_4]']
or ['eax,', '1000h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+edx],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_Ins_UNKNOWN	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1A0h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
imul ['eax,', '[edx+198h],', '18h']
add ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
jmp ['short', 'loc_14B16']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '18h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_8]']
jnb ['loc_14C0F']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Ch]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+170h]']
cmp ['eax,', 'edx']
jnz ['loc_14C0A']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
test ['ecx,', 'ecx']
jz ['loc_14C0A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+1ACh]']
cmp ['ecx,', '[eax+1B0h]']
jl ['short', 'loc_14B85']
push ['offset', '$SG13049']
push ['1EBAh']
push ['82h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '82h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_14C31']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ACh]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+1B4h]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1ACh]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1ACh],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+160h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+168h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+8],', '1']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ins_Goto_CodeRange']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+178h],', '0']
jmp ['short', 'loc_14C31']
jmp ['loc_14B0D']
push ['offset', '$SG13050']
push ['1ECCh']
push ['80h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_ft_var_readpackedpoints proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_24],', '0']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movzx ['ecx,', 'al']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14CA3']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_14E58']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '80h']
jz ['short', 'loc_14CCB']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movzx ['eax,', 'al']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '7Fh']
shl ['ecx,', '8']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
lea ['edx,', '[ebp+var_24]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
push ['2']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_14CF5']
xor ['eax,', 'eax']
jmp ['loc_14E58']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_8]']
jge ['$Exit$23']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movzx ['ecx,', 'al']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '80h']
jz ['loc_14DC3']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '7Fh']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
mov ['[ebp+var_2A],', 'ax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_4]']
mov ['cx,', '[ebp+var_2A]']
mov ['[eax+edx*2],', 'cx']
movzx ['edx,', '[ebp+var_2A]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_C],', '1']
jl ['short', 'loc_14D71']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_8]']
jl ['short', 'loc_14D76']
jmp ['$Exit$23']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_14D88']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_C]']
jge ['short', 'loc_14DBE']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['edx,', 'ax']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_18]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_14D7F']
jmp ['loc_14E50']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movzx ['dx,', 'al']
mov ['[ebp+var_2C],', 'dx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_4]']
mov ['dx,', '[ebp+var_2C]']
mov ['[ecx+eax*2],', 'dx']
movzx ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_C],', '1']
jl ['short', 'loc_14E06']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_8]']
jl ['short', 'loc_14E08']
jmp ['short', '$Exit$23']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_14E1A']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+var_C]']
jge ['short', 'loc_14E50']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movzx ['eax,', 'al']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_4]']
mov ['ax,', 'word', 'ptr', '[ebp+var_18]']
mov ['[edx+ecx*2],', 'ax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_14E11']
jmp ['loc_14CFC']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN21_2']
dd ['offset', '$LN20_8']
align ['8']
endp
_ft_var_readpackeddeltas proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_1C],', 'edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
push ['2']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_14F02']
xor ['eax,', 'eax']
jmp ['loc_1503E']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['loc_1503B']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movzx ['edx,', 'al']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '80h']
jz ['short', 'loc_14F72']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_14F43']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
cmp ['[ebp+var_10],', 'edx']
ja ['short', 'loc_14F6D']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_14F6D']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+edx*2],', 'cx']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_14F3A']
jmp ['loc_1500C']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '40h']
jz ['short', 'loc_14FC2']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_14F8C']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3Fh']
cmp ['[ebp+var_10],', 'ecx']
ja ['short', 'loc_14FC0']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+arg_4]']
jnb ['short', 'loc_14FC0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_14F83']
jmp ['short', 'loc_1500C']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_14FD4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
cmp ['[ebp+var_10],', 'edx']
ja ['short', 'loc_1500C']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_1500C']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_GetChar']
add ['esp,', '4']
movsx ['dx,', 'al']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+eax*2],', 'dx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_14FCB']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3Fh']
cmp ['[ebp+var_10],', 'eax']
ja ['short', 'loc_15036']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_15017']
xor ['eax,', 'eax']
jmp ['short', 'loc_1503E']
jmp ['loc_14F09']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN24_1']
dd ['offset', '$LN23_0']
db ['0Eh', 'dup(0CCh)']
endp
_ft_var_load_avar proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2A4h]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[ecx+10h],', '1']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
push ['61766172h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1FCh]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15107']
jmp ['loc_152E1']
mov ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15125']
jmp ['loc_152E1']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_GetULong']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_GetULong']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_20],', '10000h']
jnz ['short', 'loc_15159']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[eax]']
jz ['short', 'loc_1515E']
jmp ['$Exit$28']
lea ['edx,', '[ebp+var_18]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_24]']
push ['eax']
push ['0']
push ['8']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+14h],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15189']
jmp ['$Exit$28']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
add ['ecx,', '[edx+14h]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_151B5']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_28]']
cmp ['edx,', '[ebp+var_24]']
jge ['$Exit$28']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx],', 'ax']
lea ['edx,', '[ebp+var_18]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
push ['0']
push ['8']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+4],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15274']
mov ['edx,', '[ebp+var_28]']
sub ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
jmp ['short', 'loc_15210']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jl ['short', 'loc_15247']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[edx+eax*8+4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_2C]']
mov ['dword', 'ptr', '[ecx+edx*8+4],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_15216']
jmp ['short', 'loc_15207']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_15247']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+14h],', '0']
jmp ['short', '$Exit$28']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_15286']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
movzx ['eax,', 'word', 'ptr', '[edx]']
cmp ['[ebp+var_2C],', 'eax']
jge ['short', 'loc_152D0']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['edx,', 'ax']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
mov ['eax,', '[ebp+var_2C]']
mov ['[ecx+eax*8],', 'edx']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['edx,', 'ax']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
mov ['eax,', '[ebp+var_2C]']
mov ['[ecx+eax*8+4],', 'edx']
jmp ['short', 'loc_1527D']
jmp ['loc_151A3']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN27_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN26_2']
dd ['offset', '$LN24_2']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN25_2']
align ['8']
endp
_ft_var_load_gvar proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '54h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '15h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2A4h]']
mov ['[ebp+var_10],', 'edx']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['67766172h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1FCh]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_153AD']
jmp ['$Exit$33']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_Pos']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
lea ['eax,', '[ebp+var_50]']
push ['eax']
push ['offset', '?gvar_fields@?1??ft_var_load_gvar@@9@9']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Stream_ReadFields']
add ['esp,', '0Ch']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_153DF']
jmp ['$Exit$33']
movzx ['edx,', '[ebp+var_4A]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+18h],', 'edx']
movzx ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+20h],', 'ecx']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '[ebp+var_40]']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_50],', '10000h']
jnz ['short', 'loc_15416']
movzx ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
movzx ['edx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_15435']
push ['offset', '$SG13603']
push ['1A1h']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_18],', 'eax']
jmp ['$Exit$33']
lea ['eax,', '[ebp+var_18]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+20h]']
add ['edx,', '1']
push ['edx']
push ['0']
push ['4']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+24h],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15466']
jmp ['$Exit$33']
movzx ['edx,', '[ebp+var_42]']
and ['edx,', '1']
jz ['short', 'loc_154DF']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+20h]']
lea ['edx,', 'ds:4[ecx*4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15497']
jmp ['$Exit$33']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_154A9']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[edx+20h]']
ja ['short', 'loc_154D1']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Stream_GetULong']
add ['esp,', '4']
add ['eax,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx+24h]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_154A0']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
jmp ['short', 'loc_15550']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+20h]']
lea ['eax,', '[edx+edx+2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15504']
jmp ['$Exit$33']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_15516']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+20h]']
ja ['short', 'loc_15544']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movzx ['eax,', 'ax']
mov ['ecx,', '[ebp+var_38]']
lea ['edx,', '[ecx+eax*2]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+24h]']
mov ['eax,', '[ebp+var_20]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_1550D']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+18h],', '0']
jz ['$Exit$33']
lea ['eax,', '[ebp+var_18]']
push ['eax']
push ['0']
movzx ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[ebp+var_10]']
imul ['ecx,', '[edx+18h]']
push ['ecx']
push ['0']
push ['4']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+1Ch],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15590']
jmp ['$Exit$33']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_155CF']
movzx ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[ebp+var_10]']
imul ['ecx,', '[edx+18h]']
shl ['ecx,', '1']
push ['ecx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_155D1']
jmp ['short', '$Exit$33']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_155E3']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[edx+18h]']
jnb ['short', 'loc_15633']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_15600']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
movzx ['edx,', '[ebp+var_4C]']
cmp ['[ebp+var_24],', 'edx']
jnb ['short', 'loc_15631']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Stream_GetUShort']
add ['esp,', '4']
movsx ['ecx,', 'ax']
shl ['ecx,', '2']
movzx ['edx,', '[ebp+var_4C]']
imul ['edx,', '[ebp+var_20]']
add ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+var_10]']
mov ['eax,', '[eax+1Ch]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_155F7']
jmp ['short', 'loc_155DA']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['eax,', '[ebp+var_18]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN32_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN31_3']
dd ['offset', '$LN28_2']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN29_2']
dd ['0FFFFFFB0h,', '14h']
dd ['offset', '$LN30_2']
align ['4']
endp
_ft_var_apply_tuple proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '10000h']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_156ED']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx]']
jnb ['loc_15885']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[ecx+eax*4],', '0']
jnz ['short', 'loc_1570E']
jmp ['short', 'loc_156E4']
jmp ['loc_15880']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+ecx*4],', '0']
jz ['short', 'loc_15753']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+ecx*4],', '0']
jge ['short', 'loc_15738']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax+edx*4],', '0']
jg ['short', 'loc_15753']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+eax*4],', '0']
jle ['short', 'loc_15764']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[edx+ecx*4],', '0']
jge ['short', 'loc_15764']
mov ['[ebp+var_8],', '0']
jmp ['loc_15885']
jmp ['loc_15880']
movzx ['eax,', '[ebp+arg_4]']
and ['eax,', '4000h']
jnz ['short', 'loc_157B8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+eax*4],', '0']
jle ['short', 'loc_1578F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_157A0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+ecx*4]']
neg ['edx']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_15880']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_C]']
mov ['eax,', '[eax+ecx*4]']
cmp ['eax,', '[esi+edx*4]']
jle ['short', 'loc_157E6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_10]']
mov ['edx,', '[edx+eax*4]']
cmp ['edx,', '[esi+ecx*4]']
jl ['short', 'loc_157F7']
mov ['[ebp+var_8],', '0']
jmp ['loc_15885']
jmp ['loc_15880']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_8]']
mov ['ecx,', '[ecx+edx*4]']
cmp ['ecx,', '[esi+eax*4]']
jge ['short', 'loc_15848']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_C]']
mov ['edx,', '[eax+edx*4]']
sub ['edx,', '[esi+ecx*4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_C]']
mov ['ecx,', '[ecx+edx*4]']
sub ['ecx,', '[esi+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_15880']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_8]']
mov ['eax,', '[ecx+eax*4]']
sub ['eax,', '[esi+edx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_10]']
mov ['esi,', '[ebp+var_4]']
mov ['eax,', '[ecx+eax*4]']
sub ['eax,', '[edx+esi*4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_156E4']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_memcpy:near']
extrn ['_memset:near']
extrn ['_strcmp:near']
extrn ['__imp__memmove:near']
extrn ['__imp__strncmp:near']
extrn ['__imp__strstr:near']
extrn ['_FT_Get_Glyph_Name:near']
extrn ['_FT_MulDiv:near']
extrn ['_FT_DivFix:near']
extrn ['_FT_Vector_Transform:near']
extrn ['_FT_Get_Module:near']
extrn ['_ft_mem_alloc:near']
extrn ['_ft_mem_realloc:near']
extrn ['_ft_mem_free:near']
extrn ['_FT_GlyphLoader_CreateExtra:near']
extrn ['_FT_GlyphLoader_Rewind:near']
extrn ['_FT_GlyphLoader_CheckPoints:near']
extrn ['_FT_GlyphLoader_CheckSubGlyphs:near']
extrn ['_FT_GlyphLoader_Add:near']
extrn ['_ft_service_list_lookup:near']
extrn ['_FT_Get_Module_Interface:near']
extrn ['_FT_Select_Metrics:near']
extrn ['_FT_Request_Metrics:near']
extrn ['_FT_Message:near']
extrn ['_FT_Panic:near']
extrn ['_FT_Throw:near']
extrn ['_FT_Stream_OpenMemory:near']
extrn ['_FT_Stream_Seek:near']
extrn ['_FT_Stream_Pos:near']
extrn ['_FT_Stream_Read:near']
extrn ['_FT_Stream_EnterFrame:near']
extrn ['_FT_Stream_ExitFrame:near']
extrn ['_FT_Stream_ExtractFrame:near']
extrn ['_FT_Stream_ReleaseFrame:near']
extrn ['_FT_Stream_GetChar:near']
extrn ['_FT_Stream_GetUShort:near']
extrn ['_FT_Stream_GetULong:near']
extrn ['_FT_Stream_ReadUShort:near']
extrn ['_FT_Stream_ReadFields:near']
extrn ['_FT_MulDiv_No_Round:near']
extrn ['_FT_Hypot:near']
extrn ['_FT_Outline_Get_CBox:near']
extrn ['_FT_Outline_Translate:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['_ft_trace_levels:near']
extrn ['___security_cookie:near']
end
