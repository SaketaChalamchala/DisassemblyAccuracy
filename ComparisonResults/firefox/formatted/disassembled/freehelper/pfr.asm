endp
_pfr_face_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '5Ch']
push ['edi']
lea ['edi,', '[ebp+var_5C]']
mov ['ecx,', '17h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+arg_C],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_AFA']
push ['offset', '$SG9382']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_ADC']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '84h']
push ['ecx']
call ['_pfr_header_load']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_B22']
jmp ['$Exit$51']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '84h']
push ['edx']
call ['_pfr_header_check']
add ['esp,', '4']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_B79']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_B59']
push ['offset', '$SG9390']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_B3B']
push ['offset', '$SG9391']
push ['5Bh']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
jmp ['$Exit$51']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+98h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_log_font_count']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_BA1']
jmp ['$Exit$51']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx],', 'eax']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_BB4']
jmp ['$Exit$51']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ecx]']
jl ['short', 'loc_BE7']
push ['offset', '$SG9396']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG9397']
push ['73h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_C],', 'eax']
jmp ['$Exit$51']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0CCh],', '0']
jz ['short', 'loc_BF9']
mov ['[ebp+var_59],', '1']
jmp ['short', 'loc_BFD']
mov ['[ebp+var_59],', '0']
movzx ['ecx,', '[ebp+var_59]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+98h]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '0F0h']
push ['eax']
call ['_pfr_log_font_load']
add ['esp,', '14h']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_C33']
jmp ['$Exit$51']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+118h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+11Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '120h']
push ['eax']
call ['_pfr_phy_font_load']
add ['esp,', '10h']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_C6A']
jmp ['$Exit$51']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '120h']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+78h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
or ['edx,', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+8],', 'edx']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_CAF']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[edx+78h]']
jnb ['short', 'loc_CD4']
mov ['ecx,', '[ebp+var_24]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+80h]']
cmp ['dword', 'ptr', '[eax+ecx+0Ch],', '0']
jz ['short', 'loc_CD2']
jmp ['short', 'loc_CD4']
jmp ['short', 'loc_CA6']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ecx+78h]']
jnz ['short', 'loc_D20']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jbe ['short', 'loc_CF4']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
jmp ['short', 'loc_D20']
push ['offset', '$SG9410']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG9411']
push ['0A1h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_C],', 'eax']
jmp ['$Exit$51']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+24h]']
and ['eax,', '4']
jnz ['short', 'loc_D3A']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
or ['edx,', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+24h]']
and ['edx,', '1']
jz ['short', 'loc_D56']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
or ['ecx,', '20h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+8],', 'ecx']
jmp ['short', 'loc_D65']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
or ['ecx,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jbe ['short', 'loc_D7D']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
or ['edx,', '2']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[ecx+84h],', '0']
jbe ['short', 'loc_D98']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
or ['eax,', '40h']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax+54h]']
mov ['[edx+14h],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jnz ['short', 'loc_DB9']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+50h]']
mov ['[eax+14h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+58h]']
mov ['[eax+18h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+20h],', '0']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '14h']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '34h']
mov ['ecx,', '[edx]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[edx+4]']
mov ['[eax+4],', 'ecx']
mov ['ecx,', '[edx+8]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[edx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['dx,', '[ecx+0Ch]']
mov ['[eax+44h],', 'dx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['dx,', '[ecx+20h]']
mov ['[eax+46h],', 'dx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['dx,', '[ecx+18h]']
mov ['[eax+48h],', 'dx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+44h]']
imul ['eax,', 'ecx,', '0Ch']
cdq
mov ['ecx,', '0Ah']
idiv ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+4Ah],', 'ax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+4Ah]']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'word', 'ptr', '[edx+46h]']
mov ['edx,', '[ebp+arg_4]']
movsx ['edx,', 'word', 'ptr', '[edx+48h]']
sub ['eax,', 'edx']
cmp ['ecx,', 'eax']
jge ['short', 'loc_E70']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+46h]']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'word', 'ptr', '[edx+48h]']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+4Ah],', 'cx']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jbe ['loc_F4C']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+5Ch]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+68h]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_38],', 'edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
push ['0']
push ['10h']
mov ['edx,', '[ebp+var_38]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+20h],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_EBD']
jmp ['$Exit$51']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_34],', 'edx']
mov ['[ebp+var_28],', '0']
jmp ['short', 'loc_EF3']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '10h']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '24h']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_28]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['short', 'loc_F43']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ebp+var_34]']
mov ['ax,', '[edx+4]']
mov ['[ecx],', 'ax']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ebp+var_34]']
mov ['ax,', '[edx]']
mov ['[ecx+2],', 'ax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+4]']
shl ['edx,', '6']
mov ['eax,', '[ebp+var_30]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx]']
shl ['edx,', '6']
mov ['eax,', '[ebp+var_30]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+4]']
shl ['edx,', '6']
mov ['eax,', '[ebp+var_30]']
mov ['[eax+0Ch],', 'edx']
jmp ['short', 'loc_ED8']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+1Ch],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax+24h]']
and ['ecx,', '4']
jnz ['short', 'loc_F67']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_20]']
mov ['cx,', '[eax+28h]']
mov ['[edx+4Ch],', 'cx']
jmp ['short', 'loc_FBE']
mov ['[ebp+var_3C],', '0']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+78h]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+80h]']
mov ['[ebp+var_44],', 'edx']
jmp ['short', 'loc_F97']
mov ['eax,', '[ebp+var_40]']
sub ['eax,', '1']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_44]']
add ['ecx,', '10h']
mov ['[ebp+var_44],', 'ecx']
cmp ['[ebp+var_40],', '0']
jbe ['short', 'loc_FB3']
mov ['edx,', '[ebp+var_44]']
mov ['eax,', '[ebp+var_3C]']
cmp ['eax,', '[edx+4]']
jge ['short', 'loc_FB1']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_3C],', 'edx']
jmp ['short', 'loc_F85']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', 'word', 'ptr', '[ebp+var_3C]']
mov ['[eax+4Ch],', 'cx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax+4Ah]']
mov ['[edx+4Eh],', 'cx']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx+44h]']
neg ['eax']
cdq
mov ['ecx,', '0Ah']
idiv ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+50h],', 'ax']
mov ['eax,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[eax+44h]']
cdq
mov ['ecx,', '1Eh']
idiv ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+52h],', 'ax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '3']
mov ['[ebp+var_4C],', 'cx']
mov ['edx,', '1']
mov ['[ebp+var_4A],', 'dx']
mov ['[ebp+var_50],', '756E6963h']
push ['0']
lea ['eax,', '[ebp+var_54]']
push ['eax']
push ['0']
push ['offset', '_pfr_cmap_class_rec']
call ['_FT_CMap_New']
add ['esp,', '10h']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[ecx+84h],', '0']
jz ['short', '$Exit$51']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
or ['eax,', '40h']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN50']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '5Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN49']
dd ['offset', '$LN46']
dd ['0FFFFFFE8h,', '4']
dd ['offset', '$LN47']
dd ['0FFFFFFACh,', '0Ch']
dd ['offset', '$LN48']
endp
_pfr_face_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_10D6']
jmp ['short', 'loc_1130']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+64h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '120h']
push ['edx']
call ['_pfr_phy_font_done']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+20h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_110F']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['6', 'dup(0CCh)']
endp
_pfr_face_get_kerning proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '48h']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '120h']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax+4],', '0']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_1195']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jbe ['short', 'loc_11A4']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '1']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+78h]']
ja ['short', 'loc_11BA']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[edx+78h]']
jbe ['short', 'loc_11BF']
jmp ['$Exit$31']
mov ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+80h]']
mov ['ecx,', '[eax+ecx]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '4']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ecx+edx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '10h']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_14]']
or ['eax,', 'ecx']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+88h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_1217']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_1C],', 'ecx']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_1237']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[edx+10h]']
jb ['short', 'loc_1235']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ecx+14h]']
ja ['short', 'loc_1235']
jmp ['short', '$FoundPair$32']
jmp ['short', 'loc_120F']
jmp ['$Exit$31']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_127C']
mov ['eax,', '[ebp+var_1C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
mov ['edx,', '[ebp+var_1C]']
imul ['ecx,', '[edx+8]']
push ['ecx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1281']
jmp ['$Exit$31']
mov ['ecx,', '[ebp+var_1C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
call ['_FT_MSB']
add ['esp,', '4']
mov ['edx,', '1']
mov ['ecx,', 'eax']
shl ['edx,', 'cl']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
imul ['eax,', '[ebp+var_28]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_24]']
sub ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+5]']
and ['edx,', '1']
mov ['[ebp+var_39],', 'dl']
mov ['eax,', '[ebp+var_1C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
and ['ecx,', '2']
mov ['[ebp+var_3A],', 'cl']
cmp ['[ebp+var_34],', '0']
jbe ['loc_13C3']
mov ['edx,', '[ebp+var_34]']
imul ['edx,', '[ebp+var_28]']
add ['edx,', '[ebp+var_38]']
mov ['[ebp+var_40],', 'edx']
movzx ['eax,', '[ebp+var_39]']
test ['eax,', 'eax']
jz ['short', 'loc_135D']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '4']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['edx,', '18h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_40]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+var_40]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
or ['edx,', 'ecx']
mov ['[ebp+var_44],', 'edx']
jmp ['short', 'loc_138C']
mov ['edx,', '[ebp+var_40]']
add ['edx,', '2']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '-2']
mov ['edx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
shl ['eax,', '10h']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
or ['eax,', 'edx']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_18]']
jnz ['short', 'loc_1399']
jmp ['$Found$33']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[ebp+var_18]']
jnb ['short', 'loc_13C3']
movzx ['edx,', '[ebp+var_3A]']
test ['edx,', 'edx']
jz ['short', 'loc_13B4']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '2']
mov ['[ebp+var_40],', 'eax']
jmp ['short', 'loc_13BD']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '1']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+var_40]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_28]']
jbe ['loc_1496']
mov ['ecx,', '[ebp+var_30]']
shr ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '[ebp+var_30]']
mov ['[ebp+var_40],', 'edx']
movzx ['eax,', '[ebp+var_39]']
test ['eax,', 'eax']
jz ['short', 'loc_1444']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '4']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['edx,', '18h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_40]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+var_40]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
or ['edx,', 'ecx']
mov ['[ebp+var_44],', 'edx']
jmp ['short', 'loc_1473']
mov ['edx,', '[ebp+var_40]']
add ['edx,', '2']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '-2']
mov ['edx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
shl ['eax,', '10h']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
or ['eax,', 'edx']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_18]']
jnz ['short', 'loc_1480']
jmp ['$Found$33']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[ebp+var_18]']
jnb ['short', 'loc_1491']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '[ebp+var_30]']
mov ['[ebp+var_38],', 'edx']
jmp ['loc_13C3']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_40],', 'eax']
movzx ['ecx,', '[ebp+var_39]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1500']
mov ['edx,', '[ebp+var_40]']
add ['edx,', '4']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['eax,', '18h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_40]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
or ['eax,', 'edx']
mov ['[ebp+var_44],', 'eax']
jmp ['short', 'loc_152F']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '2']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-2']
mov ['eax,', '[ebp+var_40]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
shl ['ecx,', '10h']
mov ['edx,', '1']
imul ['eax,', 'edx,', '-1']
mov ['edx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
or ['ecx,', 'eax']
mov ['[ebp+var_44],', 'ecx']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[ebp+var_18]']
jnz ['short', 'loc_158B']
movzx ['edx,', '[ebp+var_3A]']
test ['edx,', 'edx']
jz ['short', 'loc_156A']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_40]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['[ebp+var_48],', 'edx']
jmp ['short', 'loc_157C']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
movsx ['edx,', 'word', 'ptr', '[ecx+6]']
add ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+arg_C]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_pfr_slot_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '0A0h']
push ['edx']
call ['_pfr_glyph_init']
add ['esp,', '8']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_pfr_slot_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0A0h']
push ['ecx']
call ['_pfr_glyph_done']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_pfr_slot_load	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '60h']
push ['edi']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '18h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '6Ch']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '1']
jl ['short', 'loc_16A4']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['offset', '$SG9490']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_1682']
cmp ['[ebp+arg_8],', '0']
jbe ['short', 'loc_16B7']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_16CB']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ecx+198h]']
jb ['short', 'loc_16EA']
push ['offset', '$SG9494']
push ['150h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_10],', 'eax']
jmp ['$Exit$27']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '9']
jnz ['short', 'loc_1714']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_pfr_slot_load_bitmap']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_1714']
jmp ['$Exit$27']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '4000h']
jz ['short', 'loc_173E']
push ['offset', '$SG9499']
push ['15Eh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_10],', 'eax']
jmp ['$Exit$27']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '4']
mov ['eax,', '[ebp+var_14]']
add ['edx,', '[eax+1A0h]']
mov ['[ebp+var_18],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+48h],', '6F75746Ch']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[eax+2],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+0BCh]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+68h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '0A0h']
push ['eax']
call ['_pfr_glyph_load']
add ['esp,', '14h']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jnz ['$Exit$27']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '1']
jnz ['short', 'loc_17C5']
mov ['[ebp+var_5D],', '1']
jmp ['short', 'loc_17C9']
mov ['[ebp+var_5D],', '0']
mov ['al,', '[ebp+var_5D]']
mov ['[ebp+var_49],', 'al']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0BCh]']
add ['edx,', '14h']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[edx]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[edx+4]']
mov ['[eax+4],', 'ecx']
mov ['ecx,', '[edx+8]']
mov ['[eax+8],', 'ecx']
mov ['ecx,', '[edx+0Ch]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[edx+10h]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '0FFFFFFFEh']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+10h]']
or ['ecx,', '4']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx+10h],', 'ecx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_183B']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Eh]']
cmp ['ecx,', '18h']
jge ['short', 'loc_183B']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+10h]']
or ['eax,', '100h']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+var_3C]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['eax,', '[ebp+var_3C]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+130h]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+12Ch]']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[ebp+var_48]']
jz ['short', 'loc_188F']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_40],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+144h]']
and ['eax,', '1']
jz ['short', 'loc_18A8']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ebp+var_40]']
mov ['[ecx+1Ch],', 'edx']
jmp ['short', 'loc_18B1']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[ebp+var_40]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[eax+10h]']
mov ['[edx+38h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[eax+1Ch]']
mov ['[edx+3Ch],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+var_3C]']
mov ['dword', 'ptr', '[eax+18h],', '0']
movzx ['ecx,', '[ebp+var_49]']
test ['ecx,', 'ecx']
jz ['loc_198F']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_58],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_5C],', 'ecx']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_191F']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '8']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
cmp ['[ebp+var_50],', 'edx']
jge ['short', 'loc_195D']
mov ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_5C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+var_5C]']
mov ['[edx+4],', 'eax']
jmp ['short', 'loc_190D']
mov ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ecx+10h]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['edx,', '[ebp+var_3C]']
mov ['[edx+1Ch],', 'eax']
lea ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_FT_Outline_Get_CBox']
add ['esp,', '8']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_3C]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_28]']
sub ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ebp+var_3C]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[ebp+var_34]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
mov ['eax,', '[ebp+var_28]']
sub ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN25']
db ['3', 'dup(0FFh)']
dd ['10h']
dd ['offset', '$LN24']
db ['0Fh', 'dup(0CCh)']
endp
_pfr_extra_items_skip proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_extra_items_parse']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_pfr_extra_items_parse proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_1A81']
jmp ['$Too_Short$24']
xor ['eax,', 'eax']
jnz ['short', 'loc_1A71']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1AA2']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '0']
jbe ['$Exit$25']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '2']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_1ABC']
jmp ['$Too_Short$24']
xor ['eax,', 'eax']
jnz ['short', 'loc_1AAC']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_1AF4']
jmp ['$Too_Short$24']
xor ['edx,', 'edx']
jnz ['short', 'loc_1AE4']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_1B5A']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_1B15']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '8']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_1B5A']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_1B58']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_1B56']
jmp ['short', '$Exit$25']
jmp ['short', 'loc_1B5A']
jmp ['short', 'loc_1B0C']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_1A99']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_1B9B']
push ['offset', '$SG7593']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG7594']
push ['5Eh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_4],', 'eax']
jmp ['short', '$Exit$25']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_pfr_header_load proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1C09']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['offset', '_pfr_header_fields']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadFields']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1C09']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+24h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+24h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_pfr_header_check proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['byte', 'ptr', '[ebp+var_4+3],', '1']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '50465230h']
jnz ['short', 'loc_1C5C']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '4']
ja ['short', 'loc_1C5C']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '3Ah']
jb ['short', 'loc_1C5C']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '0D0Ah']
jz ['short', 'loc_1C60']
mov ['byte', 'ptr', '[ebp+var_4+3],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4+3]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_pfr_log_font_count proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1CCA']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['ecx,', 'ax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1CCC']
jmp ['short', '$Exit$8']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN6']
dd ['offset', '$LN5']
db ['0Eh', 'dup(0CCh)']
endp
_pfr_log_font_load proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_1D6F']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['ecx,', 'ax']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1D74']
jmp ['$Exit$45']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ebp+var_4]']
jb ['short', 'loc_1D98']
push ['offset', '$SG7783']
push ['0EFh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_225F']
imul ['eax,', '[ebp+arg_8],', '5']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_1DE7']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['ecx,', 'ax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_1DE7']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadUOffset']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1DEC']
jmp ['$Exit$45']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_1E2F']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1E34']
jmp ['$Exit$45']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '0Dh']
cmp ['eax,', '[ebp+var_2C]']
jbe ['short', 'loc_1E56']
jmp ['$Too_Short$46']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1E46']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '3']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['eax,', '10h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['ecx,', '8']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-3]']
or ['eax,', 'edx']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+edx+8],', 'eax']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '3']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['eax,', '10h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['ecx,', '8']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-3]']
or ['eax,', 'edx']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx+8],', 'eax']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '3']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-3]']
or ['ecx,', 'eax']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx+8],', 'ecx']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '3']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['edx,', '10h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['eax,', '8']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-3]']
or ['edx,', 'ecx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx+8],', 'edx']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_30],', '0']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '4']
jz ['short', 'loc_1FE9']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '8']
jz ['short', 'loc_1FD8']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3']
jnz ['short', 'loc_1FE9']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '3']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '10h']
jz ['short', 'loc_200B']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '20h']
jz ['short', 'loc_200B']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '[ebp+var_30]']
cmp ['edx,', '[ebp+var_2C]']
jbe ['short', 'loc_201B']
jmp ['$Too_Short$46']
xor ['eax,', 'eax']
jnz ['short', 'loc_200B']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '4']
jz ['loc_20D4']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '8']
jz ['short', 'loc_2069']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_207B']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_34]']
mov ['[ecx+1Ch],', 'edx']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '3']
jnz ['short', 'loc_20D4']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '3']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['edx,', '10h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['eax,', '8']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-3]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+24h],', 'edx']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '10h']
jz ['short', 'loc_2135']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '20h']
jz ['short', 'loc_211A']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_212C']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '40h']
jz ['short', 'loc_215B']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_24]']
push ['edx']
call ['_pfr_extra_items_skip']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_215B']
jmp ['$Fail$47']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '5']
cmp ['eax,', '[ebp+var_2C]']
jbe ['short', 'loc_216B']
jmp ['$Too_Short$46']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_215B']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '2']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '3']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['edx,', '10h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['eax,', '8']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-3]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2Ch],', 'edx']
movzx ['ecx,', '[ebp+arg_10]']
test ['ecx,', 'ecx']
jz ['short', '$Fail$47']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '1']
cmp ['edx,', '[ebp+var_2C]']
jbe ['short', 'loc_2203']
jmp ['short', '$Too_Short$46']
xor ['eax,', 'eax']
jnz ['short', 'loc_21F6']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+28h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+28h],', 'edx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '1']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_225F']
push ['offset', '$SG7896']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG7897']
push ['14Ch']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_18],', 'eax']
jmp ['short', '$Fail$47']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN44']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN43']
dd ['offset', '$LN41']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN42']
db ['0Ch', 'dup(0CCh)']
endp
_pfr_phy_font_load proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '64h']
push ['edi']
lea ['edi,', '[ebp+var_64]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+88h],', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '88h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8Ch],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_2335']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_233A']
jmp ['$Exit$81']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+20h]']
mov ['[ecx+94h],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+20h]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '0Fh']
cmp ['ecx,', '[ebp+var_28]']
jbe ['short', 'loc_236B']
jmp ['$Too_Short$82']
xor ['edx,', 'edx']
jnz ['short', 'loc_235B']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '2']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+18h],', 'edx']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '2']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+24h],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '4']
jnz ['short', 'loc_255E']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
cmp ['edx,', '[ebp+var_28]']
jbe ['short', 'loc_2523']
jmp ['$Too_Short$82']
xor ['eax,', 'eax']
jnz ['short', 'loc_2513']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '2']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+28h],', 'ecx']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '80h']
jz ['short', 'loc_258F']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['offset', '_pfr_phy_font_extra_items']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['_pfr_extra_items_parse']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_258F']
jmp ['$Fail$83']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '3']
cmp ['ecx,', '[ebp+var_28]']
jbe ['short', 'loc_259F']
jmp ['$Too_Short$82']
xor ['edx,', 'edx']
jnz ['short', 'loc_258F']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '3']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-3]']
or ['ecx,', 'eax']
mov ['[ebp+var_18],', 'ecx']
jbe ['loc_2805']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ebp+var_28]']
jbe ['short', 'loc_2604']
jmp ['$Too_Short$82']
xor ['eax,', 'eax']
jnz ['short', 'loc_25F4']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_18],', '0']
jbe ['loc_2805']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '4']
cmp ['edx,', '[ebp+var_20]']
jbe ['short', 'loc_262B']
jmp ['loc_2805']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '2']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_2C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '4']
jb ['short', 'loc_266D']
mov ['ecx,', '[ebp+var_34]']
cmp ['ecx,', '[ebp+var_18]']
jbe ['short', 'loc_2672']
jmp ['loc_2805']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_2C]']
lea ['ecx,', '[eax+edx-2]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '2']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_54],', '1']
jz ['short', 'loc_26D4']
cmp ['[ebp+var_54],', '2']
jz ['short', 'loc_2705']
cmp ['[ebp+var_54],', '3']
jz ['loc_27C5']
jmp ['loc_27F1']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '54h']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
sub ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
call ['_pfr_aux_name_load']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2700']
jmp ['$Exit$81']
jmp ['loc_27F1']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '20h']
cmp ['edx,', '[ebp+var_30]']
jbe ['short', 'loc_2715']
jmp ['loc_27F1']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '0Ah']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '2']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_2C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '2']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_2C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+30h],', 'eax']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '2']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+34h],', 'edx']
jmp ['short', 'loc_27F1']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '58h']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
sub ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
call ['_pfr_aux_name_load']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_27F1']
jmp ['$Exit$81']
mov ['edx,', '[ebp+var_30]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_18]']
sub ['eax,', '[ebp+var_34]']
mov ['[ebp+var_18],', 'eax']
jmp ['loc_2611']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+var_28]']
jbe ['short', 'loc_2815']
jmp ['$Too_Short$82']
xor ['edx,', 'edx']
jnz ['short', 'loc_2805']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_40]']
mov ['[edx+68h],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx*2]']
cmp ['ecx,', '[ebp+var_28]']
jbe ['short', 'loc_2847']
jmp ['$Too_Short$82']
xor ['edx,', 'edx']
jnz ['short', 'loc_2834']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
push ['0']
push ['4']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+6Ch],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2876']
jmp ['$Fail$83']
mov ['[ebp+var_3C],', '0']
jmp ['short', 'loc_2888']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_3C]']
cmp ['eax,', '[ebp+var_40]']
jnb ['short', 'loc_28CF']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '2']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+6Ch]']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+var_3C]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_287F']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '8']
cmp ['eax,', '[ebp+var_28]']
jbe ['short', 'loc_28DF']
jmp ['$Too_Short$82']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_28CF']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+70h],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+74h],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '2']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+44h],', 'ecx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+78h],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[edx+20h]']
add ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+7Ch],', 'eax']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_48]']
push ['eax']
push ['0']
push ['10h']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+80h],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_29F8']
jmp ['$Fail$83']
mov ['[ebp+var_4C],', '4']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '2']
jz ['short', 'loc_2A10']
mov ['ecx,', '[ebp+var_4C]']
add ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '4']
jz ['short', 'loc_2A21']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '2']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '8']
jz ['short', 'loc_2A32']
mov ['edx,', '[ebp+var_4C]']
add ['edx,', '1']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '10h']
jz ['short', 'loc_2A43']
mov ['ecx,', '[ebp+var_4C]']
add ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '20h']
jz ['short', 'loc_2A54']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '1']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_48]']
imul ['ecx,', '[ebp+var_4C]']
add ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+var_28]']
jbe ['short', 'loc_2A68']
jmp ['$Too_Short$82']
xor ['edx,', 'edx']
jnz ['short', 'loc_2A54']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_2A7E']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[ebp+var_48]']
jnb ['$Fail$83']
mov ['edx,', '[ebp+var_44]']
shl ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+80h]']
mov ['[ebp+var_50],', 'edx']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '2']
jz ['short', 'loc_2ADA']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_58],', 'edx']
jmp ['short', 'loc_2AEC']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_58],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_58]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '4']
jz ['short', 'loc_2B32']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_2B3B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_5C]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '8']
jz ['short', 'loc_2B55']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '10h']
jz ['short', 'loc_2B93']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_60],', 'edx']
jmp ['short', 'loc_2BA5']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_60],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_60]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '20h']
jz ['short', 'loc_2BFD']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '3']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-3]']
or ['ecx,', 'eax']
mov ['[ebp+var_64],', 'ecx']
jmp ['short', 'loc_2C31']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '2']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['[ebp+var_64],', 'ecx']
mov ['edx,', '[ebp+var_50]']
mov ['eax,', '[ebp+var_64]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_2A75']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Pos']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+90h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+94h],', '0']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_2C9B']
push ['offset', '$SG8471']
push ['3A6h']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_8],', 'eax']
push ['offset', '$SG8472']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', '$Fail$83']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN80']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '64h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN79']
dd ['offset', '$LN77']
dd ['0FFFFFFE0h,', '4']
dd ['offset', '$LN78']
endp
_pfr_phy_font_done proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+50h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_2CF8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+54h]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+54h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_2D19']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+58h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_2D3A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4Ch],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_2D5B']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+48h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+40h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+3Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+64h]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+64h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_2D9A']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+5Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+60h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+80h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_2DCF']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+78h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+7Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+6Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+6Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_2E0A']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+68h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+88h]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_2E72']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_2E4F']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_2E41']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+88h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+84h],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_pfr_extra_item_load_bitmap_info proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '5']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_2EE9']
jmp ['$Too_Short$34']
xor ['eax,', 'eax']
jnz ['short', 'loc_2ED9']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '3']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+5Ch]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['eax,', '[ecx+60h]']
jbe ['short', 'loc_2F7C']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+5Ch]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[eax+ecx+3]']
and ['edx,', '0FFFFFFFCh']
mov ['[ebp+var_28],', 'edx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+64h]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+5Ch]']
push ['edx']
push ['24h']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+64h],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_2F73']
jmp ['$Exit$35']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_28]']
mov ['[edx+60h],', 'eax']
mov ['[ebp+var_18],', '8']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '1']
jz ['short', 'loc_2F94']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '2']
jz ['short', 'loc_2FA5']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '4']
jz ['short', 'loc_2FB6']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '8']
jz ['short', 'loc_2FC7']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '10h']
jz ['short', 'loc_2FD8']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
imul ['eax,', '[edx+5Ch],', '24h']
mov ['ecx,', '[ebp+arg_8]']
add ['eax,', '[ecx+64h]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_14]']
imul ['edx,', '[ebp+var_18]']
add ['edx,', '[ebp+arg_0]']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_2FFC']
jmp ['$Too_Short$34']
xor ['eax,', 'eax']
jnz ['short', 'loc_2FE8']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_301B']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '24h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[ebp+var_14]']
jnb ['loc_3263']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '1']
jz ['short', 'loc_3065']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_2C],', 'edx']
jmp ['short', 'loc_3077']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '2']
jz ['short', 'loc_30BD']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_30],', 'eax']
jmp ['short', 'loc_30CF']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '4']
jz ['short', 'loc_313C']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '3']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['eax,', '10h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['ecx,', '8']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-3]']
or ['eax,', 'edx']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_3170']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_34]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '8']
jz ['short', 'loc_31C8']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '3']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['edx,', '10h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['eax,', '8']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-3]']
or ['edx,', 'ecx']
mov ['[ebp+var_38],', 'edx']
jmp ['short', 'loc_31FC']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+var_C]']
and ['edx,', '10h']
jz ['short', 'loc_3243']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_3255']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_3C]']
mov ['[ecx+1Ch],', 'edx']
jmp ['loc_3009']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+5Ch]']
add ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+5Ch],', 'ecx']
mov ['eax,', '[ebp+var_20]']
jmp ['short', 'loc_32A0']
push ['offset', '$SG7988']
push ['1AEh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_20],', 'eax']
push ['offset', '$SG7989']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', '$Exit$35']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN33']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN32']
dd ['offset', '$LN31']
db ['0Ah', 'dup(0CCh)']
endp
_pfr_extra_item_load_font_id proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jz ['short', 'loc_3321']
jmp ['short', '$Exit$8_0']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+50h],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3346']
jmp ['short', '$Exit$8_0']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+50h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+50h]']
mov ['edx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[ecx+edx],', '0']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN6_0']
dd ['offset', '$LN5_0']
db ['0Eh', 'dup(0CCh)']
endp
_pfr_extra_item_load_stem_snaps	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[edx+4Ch],', '0']
jz ['short', 'loc_33FB']
jmp ['$Exit$19']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_340B']
jmp ['$Too_Short$20']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_33FB']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '0Fh']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*2]']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_344F']
jmp ['$Too_Short$20']
xor ['edx,', 'edx']
jnz ['short', 'loc_343C']
lea ['eax,', '[ebp+var_18]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
push ['0']
push ['4']
mov ['edx,', '[ebp+var_20]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_3478']
jmp ['short', '$Exit$19']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+4Ch],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+40h],', 'ecx']
jmp ['short', 'loc_34A4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_4],', '0']
jbe ['short', '$Exit$19']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['eax,', '[ebp+var_10]']
mov ['[eax],', 'edx']
jmp ['short', 'loc_3492']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_3510']
push ['offset', '$SG8046']
push ['1FDh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_18],', 'eax']
push ['offset', '$SG8047']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', '$Exit$19']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN17']
dd ['offset', '$LN16']
db ['0Ah', 'dup(0CCh)']
endp
_pfr_extra_item_load_kerning_pairs proc	near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '2']
jl ['short', 'loc_35AB']
push ['offset', '$SG8064']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_358D']
lea ['edx,', '[ebp+var_C]']
push ['edx']
push ['18h']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_35CF']
jmp ['$Exit$31_0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_35DF']
jmp ['$Too_Short$32']
xor ['edx,', 'edx']
jnz ['short', 'loc_35CF']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx]']
mov ['[eax+4],', 'dl']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+6],', 'dx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['[edx+5],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', '[eax+94h]']
mov ['edx,', '[ebp+arg_8]']
add ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+0Ch],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '3']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+5]']
and ['eax,', '1']
jz ['short', 'loc_367D']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
add ['edx,', '2']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+5]']
and ['edx,', '2']
jz ['short', 'loc_3698']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
imul ['ecx,', '[edx+8]']
add ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_36B3']
jmp ['$Too_Short$32']
xor ['eax,', 'eax']
jnz ['short', 'loc_3698']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+4]']
test ['edx,', 'edx']
jle ['loc_38B3']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+5]']
and ['ecx,', '1']
jz ['loc_37EC']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '2']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_18]']
shl ['edx,', '10h']
movzx ['eax,', 'word', 'ptr', '[ebp+var_1C]']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+10h],', 'edx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+4]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
imul ['eax,', '[ecx+8]']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '2']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_18]']
shl ['ecx,', '10h']
movzx ['edx,', 'word', 'ptr', '[ebp+var_1C]']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+14h],', 'ecx']
jmp ['loc_3875']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_18]']
shl ['edx,', '10h']
movzx ['eax,', 'word', 'ptr', '[ebp+var_1C]']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+10h],', 'edx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+4]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
imul ['eax,', '[ecx+8]']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_18]']
shl ['edx,', '10h']
movzx ['eax,', 'word', 'ptr', '[ebp+var_1C]']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+14h],', 'edx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+8Ch]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+8Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+4]']
mov ['ecx,', '[ebp+arg_8]']
add ['eax,', '[ecx+84h]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+84h],', 'eax']
jmp ['short', '$Exit$31_0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_38B3']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_3917']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['edx,', 'edx']
jnz ['short', '$Too_Short$32']
push ['offset', '$SG8139']
push ['25Fh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_C],', 'eax']
push ['offset', '$SG8140']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', '$Exit$31_0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN30']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN29']
dd ['offset', '$LN28']
align ['4']
endp
_pfr_aux_name_load proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_10],', '0']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_399F']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax-1]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_399F']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_39AE']
mov ['[ebp+var_1C],', '1']
jmp ['short', 'loc_39B5']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_39CD']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+arg_4]']
jnb ['short', 'loc_39FC']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '20h']
jl ['short', 'loc_39F1']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '7Fh']
jle ['short', 'loc_39FA']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_39FC']
jmp ['short', 'loc_39C4']
cmp ['[ebp+var_18],', '0']
jz ['short', '$Exit$16']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3A24']
jmp ['short', '$Exit$16']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14']
dd ['offset', '$LN13']
db ['0Eh', 'dup(0CCh)']
endp
_pfr_glyph_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['24h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+1Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+20h],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_GlyphLoader_Rewind']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_pfr_glyph_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_3AEA']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_3B1F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+20h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_pfr_glyph_load	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
call ['_FT_GlyphLoader_Rewind']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_glyph_load_rec']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_pfr_slot_load_bitmap proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '90h']
push ['edi']
lea ['edi,', '[ebp+var_90]']
mov ['ecx,', '24h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+68h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '120h']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '4']
mov ['eax,', '[ebp+var_10]']
add ['edx,', '[eax+80h]']
mov ['[ebp+var_2C],', 'edx']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_30],', 'edx']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_3C2B']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_34]']
cmp ['edx,', '[ecx+5Ch]']
jnb ['short', 'loc_3C60']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ch]']
mov ['edx,', '[ebp+var_30]']
cmp ['[edx],', 'ecx']
jnz ['short', 'loc_3C55']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Eh]']
mov ['edx,', '[ebp+var_30]']
cmp ['[edx+4],', 'ecx']
jnz ['short', 'loc_3C55']
jmp ['short', '$Found_Strike$39']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '24h']
mov ['[ebp+var_30],', 'eax']
jmp ['short', 'loc_3C22']
push ['offset', '$SG10175']
push ['233h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_4039']
mov ['[ebp+var_38],', '4']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ecx+8]']
and ['edx,', '1']
jz ['short', 'loc_3C97']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ecx+8]']
and ['edx,', '2']
jz ['short', 'loc_3CAB']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ecx+8]']
and ['edx,', '4']
jz ['short', 'loc_3CBF']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+90h]']
mov ['eax,', '[ebp+var_30]']
add ['edx,', '[eax+18h]']
push ['edx']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3D04']
mov ['edx,', '[ebp+var_30]']
mov ['eax,', '[ebp+var_38]']
imul ['eax,', '[edx+1Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_3D09']
jmp ['$Exit$40']
lea ['edx,', '[ebp+var_24]']
push ['edx']
lea ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
mov ['eax,', '[edx+1Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+24h]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_pfr_lookup_bitmap_data']
add ['esp,', '1Ch']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_3D6C']
push ['offset', '$SG10186']
push ['254h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$40']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_64],', '0']
mov ['[ebp+var_70],', '0']
mov ['[ebp+var_7C],', '0']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_58],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+10h]']
cmp ['ecx,', '[eax+0Ch]']
jz ['short', 'loc_3DCA']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_58]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_58],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_58]']
mov ['[ecx+38h],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+0Ch]']
shl ['edx,', '8']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_58],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0BCh]']
add ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3E32']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_3E37']
jmp ['$Exit$40']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_88],', 'eax']
lea ['ecx,', '[ebp+var_7C]']
push ['ecx']
lea ['edx,', '[ebp+var_58]']
push ['edx']
lea ['eax,', '[ebp+var_70]']
push ['eax']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
lea ['edx,', '[ebp+var_4C]']
push ['edx']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+24h]']
push ['eax']
lea ['ecx,', '[ebp+var_88]']
push ['ecx']
call ['_pfr_load_bitmap_metrics']
add ['esp,', '24h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_40],', '7FFFFFFFh']
jg ['short', 'loc_3EAE']
cmp ['[ebp+var_40],', '80000000h']
jl ['short', 'loc_3EAE']
cmp ['[ebp+var_70],', '7FFFFFFFh']
ja ['short', 'loc_3EAE']
mov ['edx,', '[ebp+var_4C]']
add ['edx,', '[ebp+var_70]']
cmp ['edx,', '7FFFFFFFh']
ja ['short', 'loc_3EAE']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '[ebp+var_70]']
cmp ['eax,', '80000000h']
jge ['short', 'loc_3F14']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_3ECC']
push ['offset', '$SG10207']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_3EAE']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_3EF6']
mov ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
push ['offset', '$SG10212']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_3ED0']
push ['offset', '$SG10213']
push ['286h']
push ['17h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '17h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['loc_402A']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+48h],', '62697473h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_64]']
mov ['[ecx+50h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_70]']
mov ['[eax+4Ch],', 'ecx']
mov ['edx,', '[ebp+var_64]']
add ['edx,', '7']
sar ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+54h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+5Eh],', '1']
mov ['edx,', '[ebp+var_64]']
shl ['edx,', '6']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+18h],', 'edx']
mov ['ecx,', '[ebp+var_70]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+var_40]']
shl ['eax,', '6']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+var_4C]']
shl ['edx,', '6']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+24h],', 'edx']
mov ['ecx,', '[ebp+var_58]']
sar ['ecx,', '2']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+28h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
neg ['ecx']
sar ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+20h]']
mov ['[ecx+34h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_40]']
mov ['[ecx+64h],', 'edx']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '[ebp+var_70]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+68h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+54h]']
imul ['eax,', '[ebp+var_70]']
mov ['[ebp+var_90],', 'eax']
mov ['ecx,', '[ebp+var_90]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_glyphslot_alloc_bitmap']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_402A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4Ch']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0D0h]']
and ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+var_7C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+24h]']
push ['edx']
mov ['eax,', '[ebp+var_88]']
push ['eax']
call ['_pfr_load_bitmap_bits']
add ['esp,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN38']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '90h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN37']
dd ['offset', '$LN28_0']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN29_0']
dd ['0FFFFFFC0h,', '4']
dd ['offset', '$LN30_0']
dd ['0FFFFFFB4h,', '4']
dd ['offset', '$LN31_0']
dd ['0FFFFFFA8h,', '4']
dd ['offset', '$LN32_0']
dd ['0FFFFFF9Ch,', '4']
dd ['offset', '$LN33_0']
db ['90h']
db ['3', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN34']
dd ['0FFFFFF84h,', '4']
dd ['offset', '$LN35']
dd ['0FFFFFF78h,', '4']
dd ['offset', '$LN36']
db ['9', 'dup(0CCh)']
endp
_pfr_glyph_close_contour proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '38h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+20h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_4153']
jmp ['loc_4213']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
sub ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
test ['edx,', 'edx']
jle ['short', 'loc_4185']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
movsx ['ecx,', 'word', 'ptr', '[eax+ecx*2-2]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_10]']
jle ['short', 'loc_41E0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_10]']
lea ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_C]']
lea ['ecx,', '[edx+eax*8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax]']
jnz ['short', 'loc_41E0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[edx+4]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_41E0']
mov ['edx,', '[ebp+var_8]']
mov ['ax,', '[edx+2]']
sub ['ax,', '1']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+2],', 'ax']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_10]']
jl ['short', 'loc_420C']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['ax,', 'word', 'ptr', '[ebp+var_C]']
mov ['[ecx+edx*2],', 'ax']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[ecx]']
add ['dx,', '1']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+20h],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_pfr_glyph_start proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+20h],', '0']
pop ['ebp']
retn
db ['4', 'dup(0CCh)']
endp
_pfr_glyph_line_to proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '38h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+20h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_4298']
push ['offset', '$SG8551']
push ['8Ah']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_C],', 'eax']
push ['offset', '$SG8552']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Exit$8_1']
xor ['edx,', 'edx']
jnz ['short', 'loc_42B6']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+16h]']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+3Ah]']
lea ['ecx,', '[ecx+eax+1]']
mov ['edx,', '[ebp+var_4]']
cmp ['ecx,', '[edx+4]']
ja ['short', 'loc_42C8']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_42C8']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_42DB']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jnz ['short', '$Exit$8_1']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_8]']
mov ['edx,', '[edx+4]']
mov ['esi,', '[ebp+var_10]']
mov ['[edx+esi*8],', 'eax']
mov ['[edx+esi*8+4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+edx],', '1']
mov ['eax,', '[ebp+var_8]']
mov ['cx,', '[eax+2]']
add ['cx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+2],', 'cx']
mov ['eax,', '[ebp+var_C]']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_pfr_glyph_curve_to proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '38h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+20h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_43AB']
push ['offset', '$SG8572']
push ['0AEh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_C],', 'eax']
push ['offset', '$SG8573']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Exit$8_2']
xor ['edx,', 'edx']
jnz ['short', 'loc_43C9']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+16h]']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+3Ah]']
lea ['ecx,', '[ecx+eax+3]']
mov ['edx,', '[ebp+var_4]']
cmp ['ecx,', '[edx+4]']
ja ['short', 'loc_43DB']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_43DB']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_43EE']
push ['0']
push ['3']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jnz ['$Exit$8_2']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_8]']
add ['eax,', '[ecx+8]']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '8']
imul ['edx,', '0']
mov ['esi,', '[ebp+var_10]']
mov ['[esi+edx],', 'eax']
mov ['[esi+edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['esi,', '[ebp+var_10]']
mov ['[esi+eax],', 'ecx']
mov ['[esi+eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['esi,', '[ebp+var_10]']
mov ['[esi+ecx],', 'edx']
mov ['[esi+ecx+4],', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[ecx+eax],', '2']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+edx],', '2']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[edx+ecx],', '1']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '3']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+2],', 'cx']
mov ['eax,', '[ebp+var_C]']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['7', 'dup(0CCh)']
endp
_pfr_glyph_move_to proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_pfr_glyph_close_contour']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+20h],', '1']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4519']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+16h]']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+3Ah]']
lea ['eax,', '[eax+edx+1]']
mov ['ecx,', '[ebp+var_4]']
cmp ['eax,', '[ecx+4]']
ja ['short', 'loc_4540']
xor ['edx,', 'edx']
jnz ['short', 'loc_4537']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+14h]']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+38h]']
lea ['ecx,', '[ecx+eax+1]']
mov ['edx,', '[ebp+var_4]']
cmp ['ecx,', '[edx+8]']
ja ['short', 'loc_4540']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_4553']
push ['1']
push ['1']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_4572']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_pfr_glyph_line_to']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_pfr_glyph_end	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_pfr_glyph_close_contour']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
call ['_FT_GlyphLoader_Add']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_pfr_glyph_load_simple proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8Ch']
push ['edi']
lea ['edi,', '[ebp+var_8C]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_45FC']
jmp ['$Failure$197']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_45EC']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
and ['edx,', '80h']
jz ['short', 'loc_4622']
jmp ['$Failure$197']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+var_18]']
and ['eax,', '4']
jz ['short', 'loc_4672']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+arg_8]']
jbe ['short', 'loc_4648']
jmp ['$Failure$197']
xor ['edx,', 'edx']
jnz ['short', 'loc_4638']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_28]']
and ['eax,', '0Fh']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
shr ['ecx,', '4']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_46CE']
mov ['edx,', '[ebp+var_18]']
and ['edx,', '2']
jz ['short', 'loc_46A0']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_468A']
jmp ['$Failure$197']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_467A']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
and ['edx,', '1']
jz ['short', 'loc_46CE']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_46B8']
jmp ['$Failure$197']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_46A8']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_20]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[eax+4]']
jbe ['short', 'loc_472C']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '7']
and ['edx,', '0FFFFFFF8h']
mov ['[ebp+var_34],', 'edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
push ['4']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_4723']
jmp ['$Exit$198']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_34]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+var_1C]']
lea ['ecx,', '[edx+eax*4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_475E']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+var_28]']
jnb ['loc_482F']
mov ['edx,', '[ebp+var_24]']
and ['edx,', '7']
jnz ['short', 'loc_4798']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_4782']
jmp ['$Failure$197']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4772']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
and ['edx,', '1']
jz ['short', 'loc_47EA']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_47B0']
jmp ['$Failure$197']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_47A0']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['[ebp+var_30],', 'edx']
jmp ['short', 'loc_4813']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_47FA']
jmp ['$Failure$197']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_47EA']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
add ['eax,', '[ebp+var_30]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ebp+var_30]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
jmp ['loc_4755']
mov ['ecx,', '[ebp+var_18]']
and ['ecx,', '8']
jz ['short', 'loc_4855']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_pfr_extra_items_skip']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_4855']
jmp ['$Exit$198']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_glyph_start']
add ['esp,', '4']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['[ebp+eax+var_54],', '0']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['[ebp+edx+var_58],', '0']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+ecx+var_58]']
mov ['eax,', '[ebp+ecx+var_54]']
mov ['ecx,', '8']
imul ['ecx,', '3']
mov ['[ebp+ecx+var_58],', 'edx']
mov ['[ebp+ecx+var_54],', 'eax']
mov ['[ebp+var_6C],', '0']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_48B8']
jmp ['$Failure$197']
xor ['eax,', 'eax']
jnz ['short', 'loc_48A8']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_64],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_64]']
and ['ecx,', '0Fh']
mov ['[ebp+var_68],', 'ecx']
mov ['edx,', '[ebp+var_64]']
shr ['edx,', '4']
mov ['[ebp+var_80],', 'edx']
cmp ['[ebp+var_80],', '7']
ja ['loc_4B20']
mov ['eax,', '[ebp+var_80]']
jmp ['ds:$LN195[eax*4]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '6']
jl ['short', 'loc_4912']
push ['offset', '$SG8699']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN136']
mov ['[ebp+var_70],', '0']
jmp ['loc_4B4F']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '6']
jl ['short', 'loc_4940']
push ['offset', '$SG8705']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN131']
jmp ['short', '$Line1$199']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '6']
jl ['short', 'loc_4964']
push ['offset', '$SG8712']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN126']
jmp ['short', '$Line1$199']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '6']
jl ['short', 'loc_4988']
push ['offset', '$SG8718']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN121']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_6C],', 'ecx']
mov ['[ebp+var_70],', '1']
jmp ['loc_4B4F']
mov ['edx,', '4']
imul ['eax,', 'edx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '6']
jl ['short', 'loc_49C0']
mov ['ecx,', '[ebp+var_68]']
push ['ecx']
push ['offset', '$SG8724']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', '$LN116']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_1C]']
jb ['short', 'loc_49D1']
jmp ['$Failure$197']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_68]']
mov ['edx,', '[edx+eax*4]']
mov ['[ebp+ecx+var_58],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+ecx+var_54]']
mov ['[ebp+eax+var_54],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+eax+var_58]']
mov ['edx,', '[ebp+eax+var_54]']
mov ['eax,', '8']
imul ['eax,', '3']
mov ['[ebp+eax+var_58],', 'ecx']
mov ['[ebp+eax+var_54],', 'edx']
mov ['[ebp+var_70],', '0']
jmp ['loc_4B4F']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '6']
jl ['short', 'loc_4A4F']
mov ['eax,', '[ebp+var_68]']
push ['eax']
push ['offset', '$SG8731']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', '$LN110']
mov ['edx,', '[ebp+var_68]']
cmp ['edx,', '[ebp+var_20]']
jb ['short', 'loc_4A60']
jmp ['$Failure$197']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+ecx+var_58]']
mov ['[ebp+eax+var_58],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_68]']
mov ['eax,', '[eax+ecx*4]']
mov ['[ebp+edx+var_54],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+edx+var_58]']
mov ['ecx,', '[ebp+edx+var_54]']
mov ['edx,', '8']
imul ['edx,', '3']
mov ['[ebp+edx+var_58],', 'eax']
mov ['[ebp+edx+var_54],', 'ecx']
mov ['[ebp+var_70],', '0']
jmp ['loc_4B4F']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '6']
jl ['short', 'loc_4ADA']
push ['offset', '$SG8738']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN104']
mov ['[ebp+var_6C],', '0B8Eh']
mov ['[ebp+var_70],', '3']
jmp ['short', 'loc_4B4F']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '6']
jl ['short', 'loc_4B0C']
push ['offset', '$SG8744']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN99']
mov ['[ebp+var_6C],', '0E2Bh']
mov ['[ebp+var_70],', '3']
jmp ['short', 'loc_4B4F']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '6']
jl ['short', 'loc_4B3E']
push ['offset', '$SG8750']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_4B20']
mov ['[ebp+var_70],', '4']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_6C],', 'eax']
lea ['ecx,', '[ebp+var_58]']
mov ['[ebp+var_60],', 'ecx']
mov ['[ebp+var_74],', '0']
jmp ['short', 'loc_4B67']
mov ['edx,', '[ebp+var_74]']
add ['edx,', '1']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+var_74]']
cmp ['eax,', '[ebp+var_70]']
jnb ['loc_4F41']
mov ['ecx,', '[ebp+var_6C]']
and ['ecx,', '3']
mov ['[ebp+var_84],', 'ecx']
jz ['short', 'loc_4BA0']
cmp ['[ebp+var_84],', '1']
jz ['loc_4C0F']
cmp ['[ebp+var_84],', '2']
jz ['loc_4C86']
jmp ['loc_4CE8']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_4BB0']
jmp ['$Failure$197']
xor ['eax,', 'eax']
jnz ['short', 'loc_4BA0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_78],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_78]']
cmp ['ecx,', '[ebp+var_1C]']
jb ['short', 'loc_4BD3']
jmp ['$Failure$197']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ebp+var_78]']
mov ['eax,', '[eax+edx*4]']
mov ['[ecx],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '7']
jl ['short', 'loc_4C06']
mov ['eax,', '[ebp+var_78]']
push ['eax']
push ['offset', '$SG8771']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4BE4']
jmp ['loc_4D1B']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_4C1F']
jmp ['$Failure$197']
xor ['eax,', 'eax']
jnz ['short', 'loc_4C0F']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+var_60]']
mov ['[edx],', 'ecx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_4C7D']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[edx]']
push ['eax']
push ['offset', '$SG8787']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4C59']
jmp ['loc_4D1B']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_4C96']
jmp ['$Failure$197']
xor ['eax,', 'eax']
jnz ['short', 'loc_4C86']
mov ['ecx,', '[ebp+arg_4]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_7C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+edx+var_58]']
add ['eax,', '[ebp+var_7C]']
mov ['ecx,', '[ebp+var_60]']
mov ['[ecx],', 'eax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '7']
jl ['short', 'loc_4CE2']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
push ['offset', '$SG8798']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_4CC0']
jmp ['short', 'loc_4D1B']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_4D06']
push ['offset', '$SG8804']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_4CE8']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+ecx+var_58]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
shr ['ecx,', '2']
and ['ecx,', '3']
mov ['[ebp+var_88],', 'ecx']
jz ['short', 'loc_4D4B']
cmp ['[ebp+var_88],', '1']
jz ['loc_4DBB']
cmp ['[ebp+var_88],', '2']
jz ['loc_4E34']
jmp ['loc_4E97']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_4D5B']
jmp ['$Failure$197']
xor ['eax,', 'eax']
jnz ['short', 'loc_4D4B']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_78],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_78]']
cmp ['ecx,', '[ebp+var_20]']
jb ['short', 'loc_4D7E']
jmp ['$Failure$197']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ebp+var_78]']
mov ['eax,', '[eax+edx*4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '7']
jl ['short', 'loc_4DB2']
mov ['eax,', '[ebp+var_78]']
push ['eax']
push ['offset', '$SG8820']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4D90']
jmp ['loc_4ECB']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_4DCB']
jmp ['$Failure$197']
xor ['eax,', 'eax']
jnz ['short', 'loc_4DBB']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['edx,', '[ebp+var_60]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_4E2B']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[edx+4]']
push ['eax']
push ['offset', '$SG8836']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4E06']
jmp ['loc_4ECB']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_4E44']
jmp ['$Failure$197']
xor ['eax,', 'eax']
jnz ['short', 'loc_4E34']
mov ['ecx,', '[ebp+arg_4]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_7C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+edx+var_54]']
add ['eax,', '[ebp+var_7C]']
mov ['ecx,', '[ebp+var_60]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '4']
imul ['eax,', 'edx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '7']
jl ['short', 'loc_4E91']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
push ['offset', '$SG8847']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_4E6F']
jmp ['short', 'loc_4ECB']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_4EB5']
push ['offset', '$SG8853']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_4E97']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+ecx+var_54]']
mov ['[edx+4],', 'eax']
cmp ['[ebp+var_74],', '0']
jnz ['short', 'loc_4F08']
cmp ['[ebp+var_70],', '4']
jnz ['short', 'loc_4F08']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+arg_8]']
jbe ['short', 'loc_4EE7']
jmp ['$Failure$197']
xor ['edx,', 'edx']
jnz ['short', 'loc_4ED7']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_6C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_70]']
sub ['eax,', '1']
mov ['[ebp+var_70],', 'eax']
jmp ['short', 'loc_4F11']
mov ['ecx,', '[ebp+var_6C]']
shr ['ecx,', '4']
mov ['[ebp+var_6C],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[ecx+eax+4]']
mov ['ecx,', '8']
imul ['ecx,', '3']
mov ['[ebp+ecx+var_58],', 'edx']
mov ['[ebp+ecx+var_54],', 'eax']
mov ['edx,', '[ebp+var_60]']
add ['edx,', '8']
mov ['[ebp+var_60],', 'edx']
jmp ['loc_4B5E']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '7']
jl ['short', 'loc_4F5F']
push ['offset', '$SG8865']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_4F41']
mov ['eax,', '[ebp+var_64]']
shr ['eax,', '4']
mov ['[ebp+var_8C],', 'eax']
cmp ['[ebp+var_8C],', '5']
ja ['short', 'loc_4FBD']
mov ['ecx,', '[ebp+var_8C]']
jmp ['ds:$LN196[ecx*4]']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_pfr_glyph_end']
add ['esp,', '4']
jmp ['short', '$Exit$198']
lea ['eax,', '[ebp+var_58]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_glyph_line_to']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
jmp ['short', '$Test_Error$200']
lea ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_pfr_glyph_move_to']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
jmp ['short', '$Test_Error$200']
lea ['ecx,', '[ebp+var_48]']
push ['ecx']
lea ['edx,', '[ebp+var_50]']
push ['edx']
lea ['eax,', '[ebp+var_58]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_glyph_curve_to']
add ['esp,', '10h']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_4FE0']
jmp ['short', '$Exit$198']
jmp ['loc_48A1']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_5013']
push ['offset', '$SG8876']
push ['225h']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_C],', 'eax']
push ['offset', '$SG8877']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', '$Exit$198']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN194']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '8Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN193']
dd ['offset', '$LN191']
dd ['0FFFFFFA8h,', '20h']
dd ['offset', '$LN192']
align ['4']
dd ['offset', '$LN131']
dd ['offset', '$LN116']
dd ['offset', '$LN110']
dd ['offset', '$LN126']
dd ['offset', '$LN121']
dd ['offset', '$LN104']
dd ['offset', '$LN99']
dd ['offset', '$LN4']
dd ['offset', '$LN4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
dd ['offset', '$LN3']
endp
_pfr_glyph_load_compound proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '40h']
push ['edi']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+arg_8]']
jbe ['short', 'loc_50E2']
jmp ['$Failure$79']
xor ['edx,', 'edx']
jnz ['short', 'loc_50D2']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_1C]']
and ['eax,', '80h']
jnz ['short', 'loc_5107']
jmp ['$Failure$79']
mov ['ecx,', '[ebp+var_1C]']
and ['ecx,', '3Fh']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
and ['edx,', '8']
jz ['short', 'loc_5136']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_pfr_extra_items_skip']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_5136']
jmp ['$Exit$80']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+14h]']
jbe ['loc_51D1']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_28]']
lea ['edx,', '[ecx+eax+3]']
and ['edx,', '0FFFFFFFCh']
mov ['[ebp+var_34],', 'edx']
cmp ['[ebp+var_34],', '40h']
jbe ['short', 'loc_5193']
push ['offset', '$SG8911']
push ['25Dh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_8],', 'eax']
push ['offset', '$SG8912']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Exit$80']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
push ['18h']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_51C8']
jmp ['$Exit$80']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_34]']
mov ['[edx+14h],', 'eax']
imul ['ecx,', '[ebp+var_28],', '18h']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+18h]']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_51F9']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '18h']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ebp+var_24]']
jnb ['$Exit$80']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_30],', '0']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_5223']
jmp ['$Failure$79']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5213']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['dword', 'ptr', '[edx],', '10000h']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '10h']
jz ['short', 'loc_5297']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_8]']
jbe ['short', 'loc_525A']
jmp ['$Failure$79']
xor ['edx,', 'edx']
jnz ['short', 'loc_524A']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['dword', 'ptr', '[edx+4],', '10000h']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '20h']
jz ['short', 'loc_52F7']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_8]']
jbe ['short', 'loc_52B9']
jmp ['$Failure$79']
xor ['edx,', 'edx']
jnz ['short', 'loc_52A9']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_38]']
and ['edx,', '3']
mov ['[ebp+var_3C],', 'edx']
cmp ['[ebp+var_3C],', '1']
jz ['short', 'loc_530E']
cmp ['[ebp+var_3C],', '2']
jz ['short', 'loc_5358']
jmp ['short', 'loc_5381']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_531E']
jmp ['$Failure$79']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_530E']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['[ebp+var_2C],', 'edx']
jmp ['short', 'loc_5381']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_5368']
jmp ['$Failure$79']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5358']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
add ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_38]']
shr ['edx,', '2']
and ['edx,', '3']
mov ['[ebp+var_40],', 'edx']
cmp ['[ebp+var_40],', '1']
jz ['short', 'loc_539B']
cmp ['[ebp+var_40],', '2']
jz ['short', 'loc_53E5']
jmp ['short', 'loc_540E']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_53AB']
jmp ['$Failure$79']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_539B']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movsx ['edx,', 'ax']
mov ['[ebp+var_30],', 'edx']
jmp ['short', 'loc_540E']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_53F5']
jmp ['$Failure$79']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_53E5']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
add ['eax,', '[ebp+var_30]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_2C]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_38]']
and ['eax,', '40h']
jz ['short', 'loc_5475']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_8]']
jbe ['short', 'loc_5438']
jmp ['$Failure$79']
xor ['edx,', 'edx']
jnz ['short', 'loc_5428']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+14h],', 'eax']
jmp ['short', 'loc_549E']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_5485']
jmp ['$Failure$79']
xor ['eax,', 'eax']
jnz ['short', 'loc_5475']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_18]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_38]']
and ['edx,', '80h']
jz ['short', 'loc_5507']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '3']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_54B9']
jmp ['$Failure$79']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_54A9']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '3']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['eax,', '10h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['ecx,', '8']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-3]']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+10h],', 'eax']
jmp ['short', 'loc_554F']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_5514']
jmp ['short', '$Failure$79']
xor ['eax,', 'eax']
jnz ['short', 'loc_5507']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
jmp ['loc_51E7']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_5591']
push ['offset', '$SG9032']
push ['2C8h']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_8],', 'eax']
push ['offset', '$SG9033']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', '$Exit$80']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN78_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN77_0']
dd ['offset', '$LN76']
db ['6', 'dup(0CCh)']
endp
_pfr_glyph_load_rec proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_561F']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5624']
jmp ['$Exit$37']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+20h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+arg_10]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+arg_10],', '0']
jbe ['loc_5897']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
and ['edx,', '80h']
jz ['loc_5897']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '14h']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_glyph_load_compound']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_569B']
jmp ['$Exit$37']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
sub ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_56CD']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
push ['offset', '$SG9066']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_56A7']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_56E3']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_18]']
jge ['loc_586F']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_5711']
mov ['edx,', '[ebp+var_10]']
push ['edx']
push ['offset', '$SG9078']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_56EF']
imul ['ecx,', '[ebp+var_14],', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
add ['eax,', 'ecx']
imul ['ecx,', '[ebp+var_10],', '18h']
add ['eax,', 'ecx']
mov ['[ebp+var_30],', 'eax']
mov ['edx,', '[ebp+var_20]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_glyph_load_rec']
add ['esp,', '14h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5764']
jmp ['loc_586F']
imul ['edx,', '[ebp+var_14],', '18h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', 'edx']
imul ['edx,', '[ebp+var_10],', '18h']
add ['ecx,', 'edx']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_20]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
sub ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_30]']
cmp ['dword', 'ptr', '[edx],', '10000h']
jnz ['short', 'loc_579D']
mov ['eax,', '[ebp+var_30]']
cmp ['dword', 'ptr', '[eax+4],', '10000h']
jz ['short', 'loc_5814']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_28]']
lea ['ecx,', '[edx+eax*8]']
mov ['[ebp+var_34],', 'ecx']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_57C7']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '1']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '8']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+var_2C]']
jge ['short', 'loc_5812']
mov ['edx,', '[ebp+var_30]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_30]']
add ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+var_34]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_30]']
add ['eax,', '[ecx+0Ch]']
mov ['edx,', '[ebp+var_34]']
mov ['[edx+4],', 'eax']
jmp ['short', 'loc_57B5']
jmp ['short', 'loc_586A']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_28]']
lea ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_38],', 'eax']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_583E']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '8']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_586A']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_30]']
add ['edx,', '[eax+8]']
mov ['ecx,', '[ebp+var_38]']
mov ['[ecx],', 'edx']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_30]']
add ['eax,', '[ecx+0Ch]']
mov ['edx,', '[ebp+var_38]']
mov ['[edx+4],', 'eax']
jmp ['short', 'loc_582C']
jmp ['loc_56DA']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_5891']
mov ['edx,', '[ebp+var_18]']
push ['edx']
push ['offset', '$SG9095']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_586F']
jmp ['short', '$Exit$37']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '42h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_58B9']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['offset', '$SG9101']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5897']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_pfr_glyph_load_simple']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_pfr_cmap_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+198h]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+1A0h]']
mov ['[eax+14h],', 'edx']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_5955']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+10h]']
jnb ['short', '$Exit$7']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '1']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '4']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+14h]']
mov ['edx,', '[edx+eax]']
cmp ['edx,', '[esi+ecx]']
jb ['short', 'loc_599C']
push ['offset', '$SG9137']
push ['32h']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_4],', 'eax']
jmp ['short', '$Exit$7']
jmp ['short', 'loc_594C']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['4', 'dup(0CCh)']
endp
_pfr_cmap_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
pop ['ebp']
retn
db ['7', 'dup(0CCh)']
endp
_pfr_cmap_char_index proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_5A4F']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+var_4]']
shr ['eax,', '1']
add ['eax,', '[ebp+var_4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+14h]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_5A32']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
jmp ['short', 'loc_5A51']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_5A47']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_5A4D']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_59FB']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_pfr_cmap_char_next proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_5B11']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_C]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+14h]']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_5AF4']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5AE9']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', '$Exit$12']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', '$Restart$11']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_5B09']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_5B0F']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_5AA3']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx+10h]']
jnb ['short', '$Exit$12']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+14h]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', '$Exit$12']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['6', 'dup(0CCh)']
endp
_FT_MulFix_i386	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
imul ['edx']
mov ['ecx,', 'edx']
sar ['ecx,', '1Fh']
add ['ecx,', '8000h']
add ['eax,', 'ecx']
adc ['edx,', '0']
shr ['eax,', '10h']
shl ['edx,', '10h']
add ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_pfr_get_kerning proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '120h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_pfr_face_get_kerning']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+10h]']
jz ['short', 'loc_5C44']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5C19']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['short', 'loc_5C44']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx+4],', 'eax']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_pfr_get_advance proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '6']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_5C8D']
jmp ['short', '$Exit$6']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jz ['short', '$Exit$6']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '120h']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+78h]']
jnb ['short', '$Exit$6']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+80h]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[edx+eax+4]']
mov ['[ecx],', 'edx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_pfr_get_metrics proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '120h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+58h]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_5D2A']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
mov ['[ecx],', 'eax']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_5D3B']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+10h]']
mov ['[ecx],', 'eax']
mov ['[ebp+var_C],', '10000h']
mov ['[ebp+var_10],', '10000h']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_5D89']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ch]']
shl ['ecx,', '6']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+0Eh]']
shl ['edx,', '6']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_5D97']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_5DA5']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx],', 'eax']
xor ['eax,', 'eax']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_pfr_get_service proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '_pfr_services']
call ['_ft_service_list_lookup']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_pfr_bitwriter_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
imul ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
movzx ['ecx,', '[ebp+arg_8]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_5E67']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
imul ['eax,', '[ecx+4]']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'eax']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_pfr_bitwriter_decode_bytes proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_14],', '80h']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_1C],', '0']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '3']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+10h]']
jle ['short', 'loc_5EDA']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
and ['eax,', '7']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_5EEE']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jle ['loc_5FBC']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '7']
cmp ['edx,', '[ebp+var_8]']
jnz ['short', 'loc_5F15']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_18]']
and ['eax,', '80h']
jz ['short', 'loc_5F28']
mov ['ecx,', '[ebp+var_1C]']
or ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_18]']
shl ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '0']
jg ['short', 'loc_5F89']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[ecx+eax],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_14],', '80h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_5FB7']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_5FB7']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[ecx+eax],', 'dl']
mov ['[ebp+var_14],', '80h']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
jmp ['loc_5EE5']
cmp ['[ebp+var_14],', '80h']
jz ['short', 'loc_5FD6']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_10]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[eax+edx],', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_pfr_bitwriter_decode_rle1 proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_2C],', '80h']
mov ['[ebp+var_30],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_8],', '1']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['[ebp+ecx+var_18],', '0']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['[ebp+edx+var_18],', '0']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_20],', '1']
jmp ['short', 'loc_6062']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jle ['loc_61AC']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_60EC']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_60D0']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_8]']
jb ['short', 'loc_6082']
jmp ['short', 'loc_60EC']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_34]']
sar ['edx,', '4']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['[ebp+ecx+var_18],', 'edx']
mov ['edx,', '[ebp+var_34]']
and ['edx,', '0Fh']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['[ebp+eax+var_18],', 'edx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+edx+var_18]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_60E6']
mov ['[ebp+var_8],', '1']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+ecx+var_18]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_6072']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_60FB']
mov ['eax,', '[ebp+var_30]']
or ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
shr ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_24]']
sub ['edx,', '1']
mov ['[ebp+var_24],', 'edx']
cmp ['[ebp+var_24],', '0']
jg ['short', 'loc_6154']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_28]']
mov ['al,', 'byte', 'ptr', '[ebp+var_30]']
mov ['[edx+ecx],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_24],', 'edx']
mov ['[ebp+var_2C],', '80h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_30],', '0']
jmp ['short', 'loc_6182']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_6182']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_28]']
mov ['al,', 'byte', 'ptr', '[ebp+var_30]']
mov ['[edx+ecx],', 'al']
mov ['[ebp+var_2C],', '80h']
mov ['[ebp+var_30],', '0']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jg ['short', 'loc_619A']
mov ['[ebp+var_38],', '1']
jmp ['short', 'loc_61A1']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_6059']
cmp ['[ebp+var_2C],', '80h']
jz ['short', 'loc_61C6']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_28]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_30]']
mov ['[eax+edx],', 'cl']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN21']
dd ['offset', '$LN20']
db ['0Dh', 'dup(0CCh)']
endp
_pfr_bitwriter_decode_rle2 proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_1C],', '80h']
mov ['[ebp+var_20],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_8],', '1']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_6272']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jle ['loc_636D']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_62AD']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_8]']
jb ['short', 'loc_628C']
jmp ['short', 'loc_62AD']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
xor ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_6282']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_62BC']
mov ['eax,', '[ebp+var_20]']
or ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
shr ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jg ['short', 'loc_6315']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_18]']
mov ['al,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[edx+ecx],', 'al']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_1C],', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_6343']
cmp ['[ebp+var_1C],', '0']
jnz ['short', 'loc_6343']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_18]']
mov ['al,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[edx+ecx],', 'al']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_1C],', '80h']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jg ['short', 'loc_635B']
mov ['[ebp+var_24],', '1']
jmp ['short', 'loc_6362']
mov ['[ebp+var_24],', '0']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_10],', 'eax']
jmp ['loc_6269']
cmp ['[ebp+var_1C],', '80h']
jz ['short', 'loc_6387']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_18]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[eax+edx],', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_pfr_lookup_bitmap_data	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '1']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'al']
mov ['[ebp+var_C],', '4']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_10+3]']
test ['ecx,', 'ecx']
jz ['short', 'loc_63D5']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '2']
jz ['short', 'loc_63E6']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '4']
jz ['short', 'loc_63F7']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_8]']
jnb ['$Fail$18']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
shr ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
imul ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_6435']
jmp ['short', '$Fail$18']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_10+3]']
test ['eax,', 'eax']
jz ['short', 'loc_6473']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '2']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_6485']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ebp+arg_10]']
jnz ['short', 'loc_648F']
jmp ['short', '$Found_It$19']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+arg_10]']
jnb ['short', 'loc_649F']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_64A5']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_6404']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[ecx],', '0']
jmp ['loc_659C']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '2']
jz ['short', 'loc_6501']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '2']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_6515']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '4']
jz ['short', 'loc_6566']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['edx,', '10h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['eax,', '8']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-3]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_14]']
mov ['[eax],', 'edx']
jmp ['short', 'loc_659C']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '2']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movzx ['ecx,', 'dx']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['4', 'dup(0CCh)']
endp
_pfr_load_bitmap_metrics proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_65D9']
jmp ['$Too_Short$71']
xor ['eax,', 'eax']
jnz ['short', 'loc_65C9']
mov ['ecx,', '[ebp+var_C]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_5],', 'dl']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_20],', '0']
mov ['[ebp+var_18],', '0']
movzx ['ecx,', '[ebp+var_5]']
and ['ecx,', '3']
mov ['[ebp+var_24],', 'ecx']
cmp ['[ebp+var_24],', '3']
ja ['loc_67CF']
mov ['edx,', '[ebp+var_24]']
jmp ['ds:$LN68[edx*4]']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_663F']
jmp ['$Too_Short$71']
xor ['ecx,', 'ecx']
jnz ['short', '$LN58']
mov ['edx,', '[ebp+var_C]']
mov ['al,', '[edx]']
mov ['[ebp+var_6],', 'al']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
movsx ['edx,', '[ebp+var_6]']
sar ['edx,', '4']
mov ['[ebp+var_10],', 'edx']
movsx ['eax,', '[ebp+var_6]']
shl ['eax,', '4']
movsx ['ecx,', 'al']
sar ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
jmp ['loc_67CF']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_6683']
jmp ['$Too_Short$71']
xor ['eax,', 'eax']
jnz ['short', '$LN53']
mov ['ecx,', '[ebp+var_C]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['loc_67CF']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '4']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_66C0']
jmp ['$Too_Short$71']
xor ['edx,', 'edx']
jnz ['short', '$LN48_0']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '2']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
movsx ['ecx,', 'dx']
mov ['[ebp+var_14],', 'ecx']
jmp ['loc_67CF']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '6']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_6741']
jmp ['$Too_Short$71']
xor ['eax,', 'eax']
jnz ['short', '$LN43_0']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '3']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['edx,', '10h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['eax,', '8']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-3]']
or ['edx,', 'ecx']
mov ['[ebp+var_10],', 'edx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '3']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['eax,', '10h']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-3]']
shl ['ecx,', '8']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-3]']
or ['eax,', 'edx']
mov ['[ebp+var_14],', 'eax']
mov ['al,', '[ebp+var_5]']
shr ['al,', '2']
mov ['[ebp+var_5],', 'al']
movzx ['ecx,', '[ebp+var_5]']
and ['ecx,', '3']
mov ['[ebp+var_28],', 'ecx']
cmp ['[ebp+var_28],', '3']
ja ['loc_6900']
mov ['edx,', '[ebp+var_28]']
jmp ['ds:$LN69[edx*4]']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_20],', '0']
jmp ['loc_6900']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_6819']
jmp ['$Too_Short$71']
xor ['ecx,', 'ecx']
jnz ['short', '$LN34_0']
mov ['edx,', '[ebp+var_C]']
mov ['al,', '[edx]']
mov ['[ebp+var_6],', 'al']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
movsx ['edx,', '[ebp+var_6]']
sar ['edx,', '4']
and ['edx,', '0Fh']
mov ['[ebp+var_1C],', 'edx']
movsx ['eax,', '[ebp+var_6]']
and ['eax,', '0Fh']
mov ['[ebp+var_20],', 'eax']
jmp ['loc_6900']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_685A']
jmp ['$Too_Short$71']
xor ['edx,', 'edx']
jnz ['short', '$LN29_1']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_6900']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '4']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_6894']
jmp ['$Too_Short$71']
xor ['ecx,', 'ecx']
jnz ['short', '$LN24_0']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movzx ['eax,', 'cx']
mov ['[ebp+var_20],', 'eax']
mov ['cl,', '[ebp+var_5]']
shr ['cl,', '2']
mov ['[ebp+var_5],', 'cl']
movzx ['edx,', '[ebp+var_5]']
and ['edx,', '3']
mov ['[ebp+var_2C],', 'edx']
cmp ['[ebp+var_2C],', '3']
ja ['loc_6A03']
mov ['eax,', '[ebp+var_2C]']
jmp ['ds:$LN70[eax*4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_18],', 'ecx']
jmp ['loc_6A03']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_6942']
jmp ['$Too_Short$71']
xor ['eax,', 'eax']
jnz ['short', '$LN15_0']
mov ['ecx,', '[ebp+var_C]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '8']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['loc_6A03']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_6970']
jmp ['$Too_Short$71']
xor ['edx,', 'edx']
jnz ['short', '$LN10']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-2]']
or ['ecx,', 'edx']
movsx ['eax,', 'cx']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_6A03']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '3']
cmp ['ecx,', '[ebp+arg_4]']
jbe ['short', 'loc_69BA']
jmp ['$Too_Short$71']
xor ['edx,', 'edx']
jnz ['short', '$LN5_2']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '3']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-3]']
or ['ecx,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_18]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax],', 'ecx']
movzx ['edx,', '[ebp+var_5]']
sar ['edx,', '2']
mov ['eax,', '[ebp+arg_20]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_6A6D']
push ['offset', '$SG10124']
push ['1DAh']
push ['8']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8']
mov ['[ebp+var_4],', 'eax']
push ['offset', '$SG10125']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', '$Exit$72']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN53']
dd ['offset', '$LN48_0']
dd ['offset', '$LN43_0']
dd ['offset', '$LN34_0']
dd ['offset', '$LN29_1']
dd ['offset', '$LN24_0']
dd ['offset', '$LN15_0']
dd ['offset', '$LN10']
dd ['offset', '$LN5_2']
db ['8', 'dup(0CCh)']
endp
_pfr_load_bitmap_bits proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jbe ['loc_6B92']
mov ['ecx,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jbe ['loc_6B92']
movzx ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_pfr_bitwriter_init']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_24],', 'edx']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_6B29']
cmp ['[ebp+var_24],', '1']
jz ['short', 'loc_6B3F']
cmp ['[ebp+var_24],', '2']
jz ['short', 'loc_6B55']
jmp ['short', 'loc_6B6B']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_pfr_bitwriter_decode_bytes']
add ['esp,', '0Ch']
jmp ['short', 'loc_6B92']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_pfr_bitwriter_decode_rle1']
add ['esp,', '0Ch']
jmp ['short', 'loc_6B92']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_pfr_bitwriter_decode_rle2']
add ['esp,', '0Ch']
jmp ['short', 'loc_6B92']
push ['offset', '$SG10149']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG10150']
push ['1FFh']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN11']
dd ['offset', '$LN10_0']
align ['10h']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_memcpy:near']
extrn ['_memset:near']
extrn ['_FT_MulDiv:near']
extrn ['_FT_MulFix:near']
extrn ['_FT_DivFix:near']
extrn ['_ft_mem_alloc:near']
extrn ['_ft_mem_realloc:near']
extrn ['_ft_mem_free:near']
extrn ['_FT_GlyphLoader_Rewind:near']
extrn ['_FT_GlyphLoader_CheckPoints:near']
extrn ['_FT_GlyphLoader_Add:near']
extrn ['_ft_service_list_lookup:near']
extrn ['_FT_CMap_New:near']
extrn ['_ft_glyphslot_alloc_bitmap:near']
extrn ['_FT_Stream_Seek:near']
extrn ['_FT_Stream_Skip:near']
extrn ['_FT_Stream_Pos:near']
extrn ['_FT_Stream_EnterFrame:near']
extrn ['_FT_Stream_ExitFrame:near']
extrn ['_FT_Stream_ReadUShort:near']
extrn ['_FT_Stream_ReadUOffset:near']
extrn ['_FT_Stream_ReadFields:near']
extrn ['_FT_Message:near']
extrn ['_FT_Throw:near']
extrn ['_FT_Outline_Get_CBox:near']
extrn ['_FT_MSB:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['_ft_trace_levels:near']
extrn ['___security_cookie:near']
end
