endp
_FT_Outline_GetInsideBorder proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Outline_Get_Orientation']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_362']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_369']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Outline_GetOutsideBorder proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Outline_Get_Orientation']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3B2']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_3B9']
mov ['[ebp+var_8],', '1']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Stroker_New	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_413']
push ['offset', '$SG7603']
push ['31Eh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_4A7']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_432']
push ['offset', '$SG7605']
push ['321h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_4A7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['84h']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_49C']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+80h],', 'edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '20h']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+edx+40h]']
push ['ecx']
call ['_ft_stroke_border_init']
add ['esp,', '8']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '20h']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax+40h]']
push ['edx']
call ['_ft_stroke_border_init']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN7']
dd ['offset', '$LN6']
align ['10h']
endp
_FT_Stroker_Set	proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_4FB']
jmp ['short', 'loc_54A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+3Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+2Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+30h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax+38h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+38h],', '10000h']
jge ['short', 'loc_535']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+38h],', '10000h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+34h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stroker_Rewind']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Stroker_Rewind proc	near		
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_599']
mov ['eax,', '20h']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+40h]']
push ['eax']
call ['_ft_stroke_border_reset']
add ['esp,', '4']
mov ['ecx,', '20h']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+40h]']
push ['eax']
call ['_ft_stroke_border_reset']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Stroker_ParseOutline proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0B4h']
push ['edi']
lea ['edi,', '[ebp+var_B4]']
mov ['ecx,', '2Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_5EE']
push ['offset', '$SG8061']
push ['83Bh']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_A3E']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_610']
push ['offset', '$SG8063']
push ['83Eh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_A3E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stroker_Rewind']
add ['esp,', '4']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_635']
mov ['ecx,', '[ebp+var_44]']
add ['ecx,', '1']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'word', 'ptr', '[edx]']
cmp ['[ebp+var_44],', 'eax']
jge ['loc_A1E']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+var_44]']
movsx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_50]']
lea ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_48]']
ja ['short', 'loc_676']
mov ['ecx,', '[ebp+var_50]']
add ['ecx,', '1']
mov ['[ebp+var_48],', 'ecx']
jmp ['short', 'loc_62C']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[eax+ecx*8]']
mov ['eax,', '[eax+ecx*8+4]']
mov ['[ebp+var_2C],', 'edx']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[edx+eax*8]']
mov ['edx,', '[edx+eax*8+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_48]']
lea ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_3C]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
and ['edx,', '3']
mov ['[ebp+var_4C],', 'edx']
cmp ['[ebp+var_4C],', '2']
jnz ['short', 'loc_6E9']
jmp ['$Invalid_Outline$47']
cmp ['[ebp+var_4C],', '0']
jnz ['short', 'loc_749']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_50]']
movsx ['eax,', 'byte', 'ptr', '[ecx+edx]']
and ['eax,', '3']
cmp ['eax,', '1']
jnz ['short', 'loc_71B']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '8']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_737']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_34]']
sub ['ecx,', '8']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
sub ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stroker_BeginSubPath']
add ['esp,', '0Ch']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_76C']
jmp ['$Exit$48']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_38]']
jnb ['$Close$49']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '8']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_3C]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
and ['eax,', '3']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_B4],', 'ecx']
cmp ['[ebp+var_B4],', '0']
jz ['short', 'loc_7F3']
cmp ['[ebp+var_B4],', '1']
jz ['short', 'loc_7BF']
jmp ['loc_8F2']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_58],', 'edx']
lea ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stroker_LineTo']
add ['esp,', '8']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_7EE']
jmp ['$Exit$48']
jmp ['loc_76C']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_38]']
jnb ['loc_8D6']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '8']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_3C]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
and ['eax,', '3']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[eax+edx]']
mov ['edx,', '[eax+edx+4]']
mov ['[ebp+var_6C],', 'ecx']
mov ['[ebp+var_68],', 'edx']
cmp ['[ebp+var_4C],', '1']
jnz ['short', 'loc_87C']
lea ['eax,', '[ebp+var_6C]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stroker_ConicTo']
add ['esp,', '0Ch']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_877']
jmp ['$Exit$48']
jmp ['loc_76C']
cmp ['[ebp+var_4C],', '0']
jz ['short', 'loc_887']
jmp ['$Invalid_Outline$47']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+var_6C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_7C],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_68]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_78],', 'eax']
lea ['eax,', '[ebp+var_7C]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stroker_ConicTo']
add ['esp,', '0Ch']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_8C5']
jmp ['$Exit$48']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_18],', 'ecx']
jmp ['$Do_Conic$50']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stroker_ConicTo']
add ['esp,', '0Ch']
mov ['[ebp+var_40],', 'eax']
jmp ['$Close$49']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '8']
cmp ['edx,', '[ebp+var_38]']
ja ['short', 'loc_914']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_3C]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
and ['edx,', '3']
cmp ['edx,', '2']
jz ['short', 'loc_919']
jmp ['$Invalid_Outline$47']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '10h']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
add ['ecx,', '2']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '-2']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[ecx+eax+4]']
mov ['[ebp+var_8C],', 'edx']
mov ['[ebp+var_88],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '-1']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[eax+edx]']
mov ['edx,', '[eax+edx+4]']
mov ['[ebp+var_9C],', 'ecx']
mov ['[ebp+var_98],', 'edx']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_38]']
ja ['short', 'loc_9BE']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[eax+edx]']
mov ['edx,', '[eax+edx+4]']
mov ['[ebp+var_AC],', 'ecx']
mov ['[ebp+var_A8],', 'edx']
lea ['eax,', '[ebp+var_AC]']
push ['eax']
lea ['ecx,', '[ebp+var_9C]']
push ['ecx']
lea ['edx,', '[ebp+var_8C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stroker_CubicTo']
add ['esp,', '10h']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_9B9']
jmp ['short', '$Exit$48']
jmp ['loc_76C']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_9C]']
push ['edx']
lea ['eax,', '[ebp+var_8C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stroker_CubicTo']
add ['esp,', '10h']
mov ['[ebp+var_40],', 'eax']
jmp ['short', '$Close$49']
jmp ['loc_76C']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_9EE']
jmp ['short', '$Exit$48']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+14h]']
test ['eax,', 'eax']
jnz ['short', 'loc_A10']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stroker_EndSubPath']
add ['esp,', '4']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_A10']
jmp ['short', '$Exit$48']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '1']
mov ['[ebp+var_48],', 'edx']
jmp ['loc_62C']
xor ['eax,', 'eax']
jmp ['short', 'loc_A3E']
mov ['eax,', '[ebp+var_40]']
jmp ['short', 'loc_A3E']
push ['offset', '$SG8107']
push ['8F0h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN46']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '0B4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN45']
dd ['offset', '$LN36']
dd ['0FFFFFFE4h,', '8']
dd ['offset', '$LN37']
dd ['0FFFFFFD4h,', '8']
dd ['offset', '$LN38']
dd ['0FFFFFFA4h,', '8']
dd ['offset', '$LN39']
dd ['0FFFFFF94h,', '8']
dd ['offset', '$LN40']
dd ['0FFFFFF84h,', '8']
dd ['offset', '$LN41']
dd ['0FFFFFF74h,', '8']
dd ['offset', '$LN42']
dd ['0FFFFFF64h,', '8']
dd ['offset', '$LN43']
dd ['0FFFFFF54h,', '8']
dd ['offset', '$LN44']
endp
_FT_Stroker_BeginSubPath proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B27']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B40']
push ['offset', '$SG7929']
push ['6F8h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_BAD']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+14h],', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ebp+arg_8]']
mov ['[edx+15h],', 'al']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jnz ['short', 'loc_B84']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+15h]']
test ['eax,', 'eax']
jz ['short', 'loc_B7E']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jz ['short', 'loc_B84']
mov ['byte', 'ptr', '[ebp+var_4+3],', '0']
jmp ['short', 'loc_B88']
mov ['byte', 'ptr', '[ebp+var_4+3],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_4+3]']
mov ['[edx+28h],', 'al']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1Ch],', 'edx']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
xor ['eax,', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Stroker_EndSubPath proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_C03']
push ['offset', '$SG7969']
push ['760h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$16']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+15h]']
test ['ecx,', 'ecx']
jz ['loc_CA6']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '40h']
mov ['[ebp+var_8],', 'edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_stroker_cap']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_C3D']
jmp ['$Exit$16']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_stroker_add_reverse_left']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_C59']
jmp ['$Exit$16']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['eax,', '[ecx+20h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
add ['eax,', '0B40000h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroker_cap']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_C93']
jmp ['$Exit$16']
push ['0']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_stroke_border_close']
add ['esp,', '8']
jmp ['$Exit$16']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+1Ch]']
jnz ['short', 'loc_CC2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+20h]']
jz ['short', 'loc_CE3']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stroker_LineTo']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_CE3']
jmp ['$Exit$16']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[edx+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D6A']
mov ['[ebp+var_10],', '0']
cmp ['[ebp+var_C],', '0']
jge ['short', 'loc_D21']
mov ['[ebp+var_10],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_stroker_inside']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_D43']
jmp ['short', '$Exit$16']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
push ['edx']
mov ['eax,', '1']
sub ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroker_outside']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_D6A']
jmp ['short', '$Exit$16']
push ['0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '40h']
push ['edx']
call ['_ft_stroke_border_close']
add ['esp,', '8']
push ['1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '60h']
push ['eax']
call ['_ft_stroke_border_close']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Stroker_LineTo proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_DC9']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_DE5']
push ['offset', '$SG7781']
push ['512h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_F3C']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
sub ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_E13']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_E13']
jmp ['$Exit$18']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['_FT_Vector_Length']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '5A0000h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
push ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+14h]']
test ['edx,', 'edx']
jz ['short', 'loc_E80']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_stroker_subpath_start']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_E7E']
jmp ['$Exit$18']
jmp ['short', 'loc_EA7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_stroker_process_corner']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_EA7']
jmp ['$Exit$18']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '40h']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_20],', '1']
jmp ['short', 'loc_ECB']
mov ['edx,', '[ebp+var_20]']
sub ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '20h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_20],', '0']
jl ['short', 'loc_F17']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_2C],', 'ecx']
push ['1']
lea ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_F05']
jmp ['short', '$Exit$18']
mov ['ecx,', '[ebp+var_14]']
neg ['ecx']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
neg ['edx']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_EB9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'eax']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
mov ['[eax+10h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN16']
dd ['offset', '$LN14']
dd ['0FFFFFFD0h,', '8']
dd ['offset', '$LN15']
align ['10h']
endp
_FT_Stroker_ConicTo proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1CCh']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1CC]']
mov ['ecx,', '73h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_128],', 'eax']
mov ['[ebp+var_129],', '1']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_FE0']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_FE0']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_FFF']
push ['offset', '$SG7807']
push ['55Fh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$38']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx]']
cmp ['eax,', '0FFFFFFFEh']
jle ['loc_109B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx]']
cmp ['eax,', '2']
jge ['short', 'loc_109B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '0FFFFFFFEh']
jle ['short', 'loc_109B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '2']
jge ['short', 'loc_109B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
cmp ['eax,', '0FFFFFFFEh']
jle ['short', 'loc_109B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
cmp ['eax,', '2']
jge ['short', 'loc_109B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '0FFFFFFFEh']
jle ['short', 'loc_109B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '2']
jge ['short', 'loc_109B']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Exit$38']
lea ['edx,', '[ebp+var_11C]']
mov ['[ebp+var_124],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '8']
imul ['eax,', '0']
mov ['esi,', '[ebp+var_124]']
mov ['[esi+eax],', 'ecx']
mov ['[esi+eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['esi,', '[ebp+var_124]']
mov ['[esi+ecx],', 'edx']
mov ['[esi+ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[edx+0Ch]']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['esi,', '[ebp+var_124]']
mov ['[esi+edx],', 'eax']
mov ['[esi+edx+4],', 'ecx']
lea ['eax,', '[ebp+var_11C]']
cmp ['[ebp+var_124],', 'eax']
jb ['loc_171B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_140],', 'edx']
mov ['eax,', '[ebp+var_140]']
mov ['[ebp+var_134],', 'eax']
mov ['ecx,', '[ebp+var_124]']
cmp ['ecx,', '[ebp+var_128]']
jnb ['short', 'loc_1192']
lea ['edx,', '[ebp+var_140]']
push ['edx']
lea ['eax,', '[ebp+var_134]']
push ['eax']
mov ['ecx,', '[ebp+var_124]']
push ['ecx']
call ['_ft_conic_is_small_enough']
add ['esp,', '0Ch']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1192']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_116F']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_134]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_124]']
push ['ecx']
call ['_ft_conic_split']
add ['esp,', '4']
mov ['edx,', '[ebp+var_124]']
add ['edx,', '10h']
mov ['[ebp+var_124],', 'edx']
jmp ['loc_10FE']
movzx ['eax,', '[ebp+var_129]']
test ['eax,', 'eax']
jz ['short', 'loc_11E8']
mov ['[ebp+var_129],', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+14h]']
test ['edx,', 'edx']
jz ['short', 'loc_11C9']
push ['0']
mov ['eax,', '[ebp+var_134]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroker_subpath_start']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_11E6']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_134]']
mov ['[edx+4],', 'eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroker_process_corner']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_125D']
mov ['edx,', '[ebp+var_134]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
cmp ['eax,', '78000h']
jle ['short', 'loc_125D']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_124]']
mov ['ecx,', '[eax+edx]']
mov ['edx,', '[eax+edx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_134]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroker_process_corner']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[edx+30h],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1268']
jmp ['$Exit$38']
mov ['[ebp+var_174],', '0']
mov ['edx,', '[ebp+var_140]']
push ['edx']
mov ['eax,', '[ebp+var_134]']
push ['eax']
call ['_FT_Angle_Diff']
add ['esp,', '8']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_168],', 'eax']
mov ['ecx,', '[ebp+var_134]']
add ['ecx,', '[ebp+var_168]']
mov ['[ebp+var_16C],', 'ecx']
mov ['edx,', '[ebp+var_168]']
push ['edx']
call ['_FT_Cos']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_178],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+28h]']
test ['eax,', 'eax']
jz ['short', 'loc_1329']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_124]']
mov ['esi,', '[ebp+var_124]']
mov ['edx,', '[ecx+edx+4]']
sub ['edx,', '[esi+eax+4]']
push ['edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_124]']
mov ['esi,', '[ebp+var_124]']
mov ['ecx,', '[eax+ecx]']
sub ['ecx,', '[esi+edx]']
push ['ecx']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_174],', 'eax']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '40h']
mov ['[ebp+var_17C],', 'edx']
mov ['[ebp+var_180],', '0']
jmp ['short', 'loc_135F']
mov ['eax,', '[ebp+var_180]']
add ['eax,', '1']
mov ['[ebp+var_180],', 'eax']
mov ['ecx,', '[ebp+var_17C]']
add ['ecx,', '20h']
mov ['[ebp+var_17C],', 'ecx']
cmp ['[ebp+var_180],', '1']
jg ['loc_16FC']
imul ['edx,', '[ebp+var_180],', '0B40000h']
mov ['eax,', '5A0000h']
sub ['eax,', 'edx']
mov ['[ebp+var_170],', 'eax']
mov ['ecx,', '[ebp+var_16C]']
add ['ecx,', '[ebp+var_170]']
push ['ecx']
mov ['edx,', '[ebp+var_178]']
push ['edx']
lea ['eax,', '[ebp+var_150]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_124]']
mov ['eax,', '[ebp+var_150]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_150],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_124]']
mov ['eax,', '[ebp+var_14C]']
add ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_14C],', 'eax']
mov ['ecx,', '[ebp+var_140]']
add ['ecx,', '[ebp+var_170]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
push ['eax']
lea ['ecx,', '[ebp+var_160]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_124]']
mov ['edx,', '[ebp+var_160]']
add ['edx,', '[ecx+eax]']
mov ['[ebp+var_160],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_124]']
mov ['eax,', '[ebp+var_15C]']
add ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_15C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+28h]']
test ['edx,', 'edx']
jz ['loc_16CF']
mov ['eax,', '[ebp+var_17C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_17C]']
mov ['eax,', '[edx+8]']
mov ['edx,', '[eax+ecx*8-8]']
mov ['eax,', '[eax+ecx*8-4]']
mov ['[ebp+var_18C],', 'edx']
mov ['[ebp+var_188],', 'eax']
mov ['ecx,', '[ebp+var_15C]']
sub ['ecx,', '[ebp+var_188]']
push ['ecx']
mov ['edx,', '[ebp+var_160]']
sub ['edx,', '[ebp+var_18C]']
push ['edx']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_194],', 'eax']
mov ['eax,', '[ebp+var_194]']
push ['eax']
mov ['ecx,', '[ebp+var_174]']
push ['ecx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
cmp ['eax,', '5A0000h']
jle ['loc_16CF']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_124]']
mov ['ecx,', '[eax+edx+4]']
sub ['ecx,', '[ebp+var_188]']
push ['ecx']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_124]']
mov ['ecx,', '[eax+edx]']
sub ['ecx,', '[ebp+var_18C]']
push ['ecx']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_198],', 'eax']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_124]']
mov ['edx,', '[ecx+eax+4]']
sub ['edx,', '[ebp+var_15C]']
push ['edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_124]']
mov ['eax,', '[edx+ecx]']
sub ['eax,', '[ebp+var_160]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_19C],', 'eax']
mov ['ecx,', '[ebp+var_160]']
sub ['ecx,', '[ebp+var_18C]']
mov ['[ebp+var_1A8],', 'ecx']
mov ['edx,', '[ebp+var_15C]']
sub ['edx,', '[ebp+var_188]']
mov ['[ebp+var_1A4],', 'edx']
lea ['eax,', '[ebp+var_1A8]']
push ['eax']
call ['_FT_Vector_Length']
add ['esp,', '4']
mov ['[ebp+var_1C0],', 'eax']
mov ['ecx,', '[ebp+var_194]']
sub ['ecx,', '[ebp+var_19C]']
push ['ecx']
call ['_FT_Sin']
add ['esp,', '4']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_1C4],', 'eax']
mov ['edx,', '[ebp+var_198]']
sub ['edx,', '[ebp+var_19C]']
push ['edx']
call ['_FT_Sin']
add ['esp,', '4']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_1C8],', 'eax']
mov ['eax,', '[ebp+var_1C8]']
push ['eax']
mov ['ecx,', '[ebp+var_1C4]']
push ['ecx']
mov ['edx,', '[ebp+var_1C0]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_1CC],', 'eax']
mov ['eax,', '[ebp+var_198]']
push ['eax']
mov ['ecx,', '[ebp+var_1CC]']
push ['ecx']
lea ['edx,', '[ebp+var_1B8]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_1B8]']
add ['eax,', '[ebp+var_18C]']
mov ['[ebp+var_1B8],', 'eax']
mov ['ecx,', '[ebp+var_1B4]']
add ['ecx,', '[ebp+var_188]']
mov ['[ebp+var_1B4],', 'ecx']
mov ['edx,', '[ebp+var_17C]']
mov ['byte', 'ptr', '[edx+10h],', '0']
push ['0']
lea ['eax,', '[ebp+var_1B8]']
push ['eax']
mov ['ecx,', '[ebp+var_17C]']
push ['ecx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1656']
jmp ['$Exit$38']
push ['0']
lea ['edx,', '[ebp+var_160]']
push ['edx']
mov ['eax,', '[ebp+var_17C]']
push ['eax']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_167C']
jmp ['$Exit$38']
lea ['ecx,', '[ebp+var_18C]']
push ['ecx']
lea ['edx,', '[ebp+var_150]']
push ['edx']
mov ['eax,', '[ebp+var_17C]']
push ['eax']
call ['_ft_stroke_border_conicto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_16A7']
jmp ['$Exit$38']
push ['0']
lea ['ecx,', '[ebp+var_160]']
push ['ecx']
mov ['edx,', '[ebp+var_17C]']
push ['edx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_16CA']
jmp ['short', '$Exit$38']
jmp ['loc_1341']
lea ['eax,', '[ebp+var_160]']
push ['eax']
lea ['ecx,', '[ebp+var_150]']
push ['ecx']
mov ['edx,', '[ebp+var_17C]']
push ['edx']
call ['_ft_stroke_border_conicto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_16F7']
jmp ['short', '$Exit$38']
jmp ['loc_1341']
mov ['eax,', '[ebp+var_124]']
sub ['eax,', '10h']
mov ['[ebp+var_124],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_140]']
mov ['[ecx],', 'edx']
jmp ['loc_10FE']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN37_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN36_0']
dd ['offset', '$LN28']
db ['0CCh']
db ['0FEh,', '2', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN29']
dd ['0FFFFFEC0h,', '4']
dd ['offset', '$LN30']
dd ['0FFFFFEB0h,', '8']
dd ['offset', '$LN31']
dd ['0FFFFFEA0h,', '8']
dd ['offset', '$LN32']
dd ['0FFFFFE74h,', '8']
dd ['offset', '$LN33']
dd ['0FFFFFE58h,', '8']
dd ['offset', '$LN34']
dd ['0FFFFFE48h,', '8']
dd ['offset', '$LN35']
align ['10h']
endp
_FT_Stroker_CubicTo proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_20C]']
mov ['ecx,', '83h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_34]']
mov ['[ebp+var_140],', 'eax']
mov ['[ebp+var_141],', '1']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1856']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1856']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_1856']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_1875']
push ['offset', '$SG7869']
push ['629h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$40']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx]']
cmp ['eax,', '0FFFFFFFEh']
jle ['loc_1961']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx]']
cmp ['eax,', '2']
jge ['loc_1961']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '0FFFFFFFEh']
jle ['loc_1961']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '2']
jge ['loc_1961']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
cmp ['eax,', '0FFFFFFFEh']
jle ['loc_1961']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
cmp ['eax,', '2']
jge ['short', 'loc_1961']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '0FFFFFFFEh']
jle ['short', 'loc_1961']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '2']
jge ['short', 'loc_1961']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
cmp ['eax,', '0FFFFFFFEh']
jle ['short', 'loc_1961']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx]']
cmp ['eax,', '2']
jge ['short', 'loc_1961']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '0FFFFFFFEh']
jle ['short', 'loc_1961']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '2']
jge ['short', 'loc_1961']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
jmp ['$Exit$40']
lea ['edx,', '[ebp+var_134]']
mov ['[ebp+var_13C],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '8']
imul ['eax,', '0']
mov ['esi,', '[ebp+var_13C]']
mov ['[esi+eax],', 'ecx']
mov ['[esi+eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['esi,', '[ebp+var_13C]']
mov ['[esi+ecx],', 'edx']
mov ['[esi+ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['esi,', '[ebp+var_13C]']
mov ['[esi+edx],', 'eax']
mov ['[esi+edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[eax+0Ch]']
mov ['eax,', '8']
imul ['eax,', '3']
mov ['esi,', '[ebp+var_13C]']
mov ['[esi+eax],', 'ecx']
mov ['[esi+eax+4],', 'edx']
lea ['ecx,', '[ebp+var_134]']
cmp ['[ebp+var_13C],', 'ecx']
jb ['loc_20EC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_158],', 'eax']
mov ['ecx,', '[ebp+var_158]']
mov ['[ebp+var_164],', 'ecx']
mov ['edx,', '[ebp+var_164]']
mov ['[ebp+var_14C],', 'edx']
mov ['eax,', '[ebp+var_13C]']
cmp ['eax,', '[ebp+var_140]']
jnb ['short', 'loc_1A88']
lea ['ecx,', '[ebp+var_164]']
push ['ecx']
lea ['edx,', '[ebp+var_158]']
push ['edx']
lea ['eax,', '[ebp+var_14C]']
push ['eax']
mov ['ecx,', '[ebp+var_13C]']
push ['ecx']
call ['_ft_cubic_is_small_enough']
add ['esp,', '10h']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1A88']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1A65']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14C]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_13C]']
push ['ecx']
call ['_ft_cubic_split']
add ['esp,', '4']
mov ['edx,', '[ebp+var_13C]']
add ['edx,', '18h']
mov ['[ebp+var_13C],', 'edx']
jmp ['loc_19E1']
movzx ['eax,', '[ebp+var_141]']
test ['eax,', 'eax']
jz ['short', 'loc_1ADE']
mov ['[ebp+var_141],', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+14h]']
test ['edx,', 'edx']
jz ['short', 'loc_1ABF']
push ['0']
mov ['eax,', '[ebp+var_14C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroker_subpath_start']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1ADC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14C]']
mov ['[edx+4],', 'eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroker_process_corner']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1B54']
mov ['edx,', '[ebp+var_14C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
cmp ['eax,', '5A000h']
jle ['short', 'loc_1B54']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_13C]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[ecx+eax+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14C]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+30h],', '0']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_stroker_process_corner']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['[eax+30h],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1B5F']
jmp ['$Exit$40']
mov ['[ebp+var_1B0],', '0']
mov ['eax,', '[ebp+var_158]']
push ['eax']
mov ['ecx,', '[ebp+var_14C]']
push ['ecx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_19C],', 'eax']
mov ['edx,', '[ebp+var_164]']
push ['edx']
mov ['eax,', '[ebp+var_158]']
push ['eax']
call ['_FT_Angle_Diff']
add ['esp,', '8']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_1A4],', 'eax']
mov ['ecx,', '[ebp+var_158]']
push ['ecx']
mov ['edx,', '[ebp+var_14C]']
push ['edx']
call ['_ft_angle_mean']
add ['esp,', '8']
mov ['[ebp+var_1A0],', 'eax']
mov ['eax,', '[ebp+var_164]']
push ['eax']
mov ['ecx,', '[ebp+var_158]']
push ['ecx']
call ['_ft_angle_mean']
add ['esp,', '8']
mov ['[ebp+var_1A8],', 'eax']
mov ['edx,', '[ebp+var_19C]']
push ['edx']
call ['_FT_Cos']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_1B4],', 'eax']
mov ['edx,', '[ebp+var_1A4]']
push ['edx']
call ['_FT_Cos']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_1B8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+28h]']
test ['eax,', 'eax']
jz ['short', 'loc_1C8E']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+var_13C]']
mov ['esi,', '[ebp+var_13C]']
mov ['edx,', '[eax+edx+4]']
sub ['edx,', '[esi+ecx+4]']
push ['edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+var_13C]']
mov ['esi,', '[ebp+var_13C]']
mov ['ecx,', '[edx+ecx]']
sub ['ecx,', '[esi+eax]']
push ['ecx']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_1B0],', 'eax']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '40h']
mov ['[ebp+var_1BC],', 'edx']
mov ['[ebp+var_1C0],', '0']
jmp ['short', 'loc_1CC4']
mov ['eax,', '[ebp+var_1C0]']
add ['eax,', '1']
mov ['[ebp+var_1C0],', 'eax']
mov ['ecx,', '[ebp+var_1BC]']
add ['ecx,', '20h']
mov ['[ebp+var_1BC],', 'ecx']
cmp ['[ebp+var_1C0],', '1']
jg ['loc_20CD']
imul ['edx,', '[ebp+var_1C0],', '0B40000h']
mov ['eax,', '5A0000h']
sub ['eax,', 'edx']
mov ['[ebp+var_1AC],', 'eax']
mov ['ecx,', '[ebp+var_1A0]']
add ['ecx,', '[ebp+var_1AC]']
push ['ecx']
mov ['edx,', '[ebp+var_1B4]']
push ['edx']
lea ['eax,', '[ebp+var_174]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_13C]']
mov ['eax,', '[ebp+var_174]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_174],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_13C]']
mov ['eax,', '[ebp+var_170]']
add ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_170],', 'eax']
mov ['ecx,', '[ebp+var_1A8]']
add ['ecx,', '[ebp+var_1AC]']
push ['ecx']
mov ['edx,', '[ebp+var_1B8]']
push ['edx']
lea ['eax,', '[ebp+var_184]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_13C]']
mov ['eax,', '[ebp+var_184]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_184],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_13C]']
mov ['eax,', '[ebp+var_180]']
add ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_180],', 'eax']
mov ['ecx,', '[ebp+var_164]']
add ['ecx,', '[ebp+var_1AC]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
push ['eax']
lea ['ecx,', '[ebp+var_194]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_13C]']
mov ['edx,', '[ebp+var_194]']
add ['edx,', '[ecx+eax]']
mov ['[ebp+var_194],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_13C]']
mov ['eax,', '[ebp+var_190]']
add ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_190],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+28h]']
test ['edx,', 'edx']
jz ['loc_2099']
mov ['eax,', '[ebp+var_1BC]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_1BC]']
mov ['eax,', '[edx+8]']
mov ['edx,', '[eax+ecx*8-8]']
mov ['eax,', '[eax+ecx*8-4]']
mov ['[ebp+var_1CC],', 'edx']
mov ['[ebp+var_1C8],', 'eax']
mov ['ecx,', '[ebp+var_190]']
sub ['ecx,', '[ebp+var_1C8]']
push ['ecx']
mov ['edx,', '[ebp+var_194]']
sub ['edx,', '[ebp+var_1CC]']
push ['edx']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_1D4],', 'eax']
mov ['eax,', '[ebp+var_1D4]']
push ['eax']
mov ['ecx,', '[ebp+var_1B0]']
push ['ecx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
cmp ['eax,', '5A0000h']
jle ['loc_2099']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_13C]']
mov ['edx,', '[ecx+eax+4]']
sub ['edx,', '[ebp+var_1C8]']
push ['edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+var_13C]']
mov ['eax,', '[edx+ecx]']
sub ['eax,', '[ebp+var_1CC]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_1D8],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_13C]']
mov ['ecx,', '[eax+edx+4]']
sub ['ecx,', '[ebp+var_190]']
push ['ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_13C]']
mov ['edx,', '[ecx+eax]']
sub ['edx,', '[ebp+var_194]']
push ['edx']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['[ebp+var_1DC],', 'eax']
mov ['eax,', '[ebp+var_194]']
sub ['eax,', '[ebp+var_1CC]']
mov ['[ebp+var_1E8],', 'eax']
mov ['ecx,', '[ebp+var_190]']
sub ['ecx,', '[ebp+var_1C8]']
mov ['[ebp+var_1E4],', 'ecx']
lea ['edx,', '[ebp+var_1E8]']
push ['edx']
call ['_FT_Vector_Length']
add ['esp,', '4']
mov ['[ebp+var_200],', 'eax']
mov ['eax,', '[ebp+var_1D4]']
sub ['eax,', '[ebp+var_1DC]']
push ['eax']
call ['_FT_Sin']
add ['esp,', '4']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_204],', 'eax']
mov ['ecx,', '[ebp+var_1D8]']
sub ['ecx,', '[ebp+var_1DC]']
push ['ecx']
call ['_FT_Sin']
add ['esp,', '4']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_208],', 'eax']
mov ['edx,', '[ebp+var_208]']
push ['edx']
mov ['eax,', '[ebp+var_204]']
push ['eax']
mov ['ecx,', '[ebp+var_200]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_20C],', 'eax']
mov ['edx,', '[ebp+var_1D8]']
push ['edx']
mov ['eax,', '[ebp+var_20C]']
push ['eax']
lea ['ecx,', '[ebp+var_1F8]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_1F8]']
add ['edx,', '[ebp+var_1CC]']
mov ['[ebp+var_1F8],', 'edx']
mov ['eax,', '[ebp+var_1F4]']
add ['eax,', '[ebp+var_1C8]']
mov ['[ebp+var_1F4],', 'eax']
mov ['ecx,', '[ebp+var_1BC]']
mov ['byte', 'ptr', '[ecx+10h],', '0']
push ['0']
lea ['edx,', '[ebp+var_1F8]']
push ['edx']
mov ['eax,', '[ebp+var_1BC]']
push ['eax']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2019']
jmp ['$Exit$40']
push ['0']
lea ['ecx,', '[ebp+var_194]']
push ['ecx']
mov ['edx,', '[ebp+var_1BC]']
push ['edx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_203F']
jmp ['$Exit$40']
lea ['eax,', '[ebp+var_1CC]']
push ['eax']
lea ['ecx,', '[ebp+var_174]']
push ['ecx']
lea ['edx,', '[ebp+var_184]']
push ['edx']
mov ['eax,', '[ebp+var_1BC]']
push ['eax']
call ['_ft_stroke_border_cubicto']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2071']
jmp ['$Exit$40']
push ['0']
lea ['ecx,', '[ebp+var_194]']
push ['ecx']
mov ['edx,', '[ebp+var_1BC]']
push ['edx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2094']
jmp ['short', '$Exit$40']
jmp ['loc_1CA6']
lea ['eax,', '[ebp+var_194]']
push ['eax']
lea ['ecx,', '[ebp+var_184]']
push ['ecx']
lea ['edx,', '[ebp+var_174]']
push ['edx']
mov ['eax,', '[ebp+var_1BC]']
push ['eax']
call ['_ft_stroke_border_cubicto']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_20C8']
jmp ['short', '$Exit$40']
jmp ['loc_1CA6']
mov ['ecx,', '[ebp+var_13C]']
sub ['ecx,', '18h']
mov ['[ebp+var_13C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_164]']
mov ['[edx],', 'eax']
jmp ['loc_19E1']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN39_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '20Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN38_0']
db ['0FEh,', '2', 'dup(0FFh)']
dd ['offset', '$SG7573+8']
dd ['offset', '$LN28_0']
dd ['0FFFFFEB4h,', '4']
dd ['offset', '$LN29_0']
dd ['0FFFFFEA8h,', '4']
dd ['offset', '$LN30_0']
dd ['0FFFFFE9Ch,', '4']
dd ['offset', '$LN31_0']
dd ['0FFFFFE8Ch,', '8']
dd ['offset', '$LN32_0']
dd ['0FFFFFE7Ch,', '8']
dd ['offset', '$LN33_0']
dd ['0FFFFFE6Ch,', '8']
dd ['offset', '$LN34_0']
dd ['0FFFFFE34h,', '8']
dd ['offset', '$LN35_0']
dd ['0FFFFFE18h,', '8']
dd ['offset', '$LN36_1']
dd ['0FFFFFE08h,', '8']
dd ['offset', '$LN37_1']
align ['10h']
endp
_FT_Stroker_GetBorderCounts proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_223A']
cmp ['[ebp+arg_4],', '1']
jle ['short', 'loc_2256']
push ['offset', '$SG8000']
push ['7C4h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', '$Exit$11']
lea ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
shl ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+40h]']
push ['ecx']
call ['_ft_stroke_border_get_counts']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_2285']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2293']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9']
dd ['offset', '$LN7_0']
dd ['0FFFFFFECh,', '4']
dd ['offset', '$LN8_0']
endp
_FT_Stroker_ExportBorder proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2307']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_2309']
jmp ['short', 'loc_2340']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2315']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_2340']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+40h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2340']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_stroke_border_export']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Stroker_GetCounts proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_38],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_2396']
push ['offset', '$SG8019']
push ['7E3h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', '$Exit$14']
lea ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '40h']
push ['edx']
call ['_ft_stroke_border_get_counts']
add ['esp,', '0Ch']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_23B8']
jmp ['short', '$Exit$14']
lea ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '60h']
push ['edx']
call ['_ft_stroke_border_get_counts']
add ['esp,', '0Ch']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_23DA']
jmp ['short', '$Exit$14']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_23FA']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx],', 'eax']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_2408']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_3C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN12']
dd ['offset', '$LN8_1']
dd ['0FFFFFFECh,', '4']
dd ['offset', '$LN9_0']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN10_0']
dd ['0FFFFFFD0h,', '4']
dd ['offset', '$LN11']
endp
_FT_Stroker_Export proc	near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stroker_ExportBorder']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stroker_ExportBorder']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_FT_Stroker_Done proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2527']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '20h']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+40h]']
push ['eax']
call ['_ft_stroke_border_done']
add ['esp,', '4']
mov ['ecx,', '20h']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+40h]']
push ['eax']
call ['_ft_stroke_border_done']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+80h],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_250C']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_FT_Glyph_Stroke proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '6']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+80h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_2581']
jmp ['$Exit$16_0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_259B']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+4],', 'offset', '_ft_outline_glyph_class']
jz ['short', 'loc_25A0']
jmp ['$Exit$16_0']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Glyph_Copy']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_25BE']
jmp ['$Exit$16_0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '14h']
mov ['[ebp+var_20],', 'ecx']
push ['0']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stroker_ParseOutline']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_25F3']
jmp ['$Fail$17']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stroker_GetCounts']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_Outline_Done']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Outline_New']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_263E']
jmp ['short', '$Fail$17']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx+2],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stroker_Export']
add ['esp,', '8']
movzx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_2675']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Done_Glyph']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
jmp ['short', '$Exit$16_0']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Done_Glyph']
add ['esp,', '4']
mov ['[ebp+var_8],', '0']
movzx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jnz ['short', '$Exit$16_0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14_0']
dd ['offset', '$LN11_0']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN12_0']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN13_0']
align ['10h']
endp
_FT_Glyph_StrokeBorder proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '6']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+80h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_2761']
jmp ['$Exit$19']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_277B']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+4],', 'offset', '_ft_outline_glyph_class']
jz ['short', 'loc_2780']
jmp ['$Exit$19']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_Glyph_Copy']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_279E']
jmp ['$Exit$19']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '14h']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
call ['_FT_Outline_GetOutsideBorder']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
movzx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_27E0']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_27D9']
mov ['[ebp+var_20],', '1']
jmp ['short', 'loc_27E0']
mov ['[ebp+var_20],', '0']
push ['0']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stroker_ParseOutline']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_2800']
jmp ['$Fail$20']
lea ['eax,', '[ebp+var_38]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stroker_GetBorderCounts']
add ['esp,', '10h']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_Outline_Done']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Outline_New']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_284F']
jmp ['short', '$Fail$20']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ecx+2],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stroker_ExportBorder']
add ['esp,', '0Ch']
movzx ['ecx,', '[ebp+arg_C]']
test ['ecx,', 'ecx']
jz ['short', 'loc_288A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_Done_Glyph']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
jmp ['short', '$Exit$19']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Done_Glyph']
add ['esp,', '4']
mov ['[ebp+var_8],', '0']
movzx ['ecx,', '[ebp+arg_C]']
test ['ecx,', 'ecx']
jnz ['short', '$Exit$19']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN17_0']
dd ['offset', '$LN14_1']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN15_1']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN16_0']
align ['10h']
endp
_ft_pos_abs	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_2949']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_2951']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_conic_split	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[esi+eax]']
mov ['[edx+ecx],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+ecx],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+eax]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+edx],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx],', 'eax']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[esi+eax+4]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+eax+4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+edx+4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx+4],', 'eax']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_conic_is_small_enough proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[edx+eax]']
sub ['eax,', '[esi+ecx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[eax+ecx+4]']
sub ['ecx,', '[esi+edx+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[edx+eax]']
sub ['eax,', '[esi+ecx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[ecx+edx+4]']
sub ['edx,', '[esi+eax+4]']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_C],', '0FFFFFFFEh']
jle ['short', 'loc_2B96']
cmp ['[ebp+var_C],', '2']
jge ['short', 'loc_2B96']
cmp ['[ebp+var_8],', '0FFFFFFFEh']
jle ['short', 'loc_2B96']
cmp ['[ebp+var_8],', '2']
jge ['short', 'loc_2B96']
mov ['[ebp+var_30],', '1']
jmp ['short', 'loc_2B9D']
mov ['[ebp+var_30],', '0']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_1C],', '0FFFFFFFEh']
jle ['short', 'loc_2BC4']
cmp ['[ebp+var_1C],', '2']
jge ['short', 'loc_2BC4']
cmp ['[ebp+var_18],', '0FFFFFFFEh']
jle ['short', 'loc_2BC4']
cmp ['[ebp+var_18],', '2']
jge ['short', 'loc_2BC4']
mov ['[ebp+var_34],', '1']
jmp ['short', 'loc_2BCB']
mov ['[ebp+var_34],', '0']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_2C],', 'ecx']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_2C00']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_2BDF']
jmp ['short', 'loc_2BFE']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_2C51']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_2C27']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_2C51']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '1E0000h']
jge ['short', 'loc_2C80']
mov ['[ebp+var_35],', '1']
jmp ['short', 'loc_2C84']
mov ['[ebp+var_35],', '0']
mov ['al,', '[ebp+var_35]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN19']
dd ['offset', '$LN17_1']
dd ['0FFFFFFE4h,', '8']
dd ['offset', '$LN18_0']
dd ['0CCCC0031h']
endp
_ft_cubic_split	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '8']
imul ['eax,', 'edx,', '6']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[esi+ecx]']
mov ['[edx+eax],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+eax]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+edx],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+eax]']
add ['eax,', '[ebp+var_10]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '8']
imul ['eax,', 'edx,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '8']
shl ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+edx],', 'eax']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '6']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[esi+eax+4]']
mov ['[ecx+edx+4],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+edx+4]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+edx+4]']
add ['eax,', '[ebp+var_10]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+edx+4],', 'ecx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+edx+4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '8']
shl ['edx,', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+edx+4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['edx,', '8']
imul ['ecx,', 'edx,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx+4],', 'eax']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_angle_mean	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
add ['eax,', '[ebp+arg_0]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
endp
_ft_cubic_is_small_enough proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '54h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '15h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[ecx+eax]']
sub ['eax,', '[esi+edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[edx+ecx+4]']
sub ['ecx,', '[esi+eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[ecx+edx]']
sub ['edx,', '[esi+eax]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[edx+eax+4]']
sub ['eax,', '[esi+ecx+4]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[ecx+edx]']
sub ['edx,', '[esi+eax]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[eax+ecx+4]']
sub ['ecx,', '[esi+edx+4]']
mov ['[ebp+var_28],', 'ecx']
cmp ['[ebp+var_C],', '0FFFFFFFEh']
jle ['short', 'loc_3014']
cmp ['[ebp+var_C],', '2']
jge ['short', 'loc_3014']
cmp ['[ebp+var_8],', '0FFFFFFFEh']
jle ['short', 'loc_3014']
cmp ['[ebp+var_8],', '2']
jge ['short', 'loc_3014']
mov ['[ebp+var_48],', '1']
jmp ['short', 'loc_301B']
mov ['[ebp+var_48],', '0']
mov ['edx,', '[ebp+var_48]']
mov ['[ebp+var_3C],', 'edx']
cmp ['[ebp+var_1C],', '0FFFFFFFEh']
jle ['short', 'loc_3042']
cmp ['[ebp+var_1C],', '2']
jge ['short', 'loc_3042']
cmp ['[ebp+var_18],', '0FFFFFFFEh']
jle ['short', 'loc_3042']
cmp ['[ebp+var_18],', '2']
jge ['short', 'loc_3042']
mov ['[ebp+var_4C],', '1']
jmp ['short', 'loc_3049']
mov ['[ebp+var_4C],', '0']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_2C],', '0FFFFFFFEh']
jle ['short', 'loc_3070']
cmp ['[ebp+var_2C],', '2']
jge ['short', 'loc_3070']
cmp ['[ebp+var_28],', '0FFFFFFFEh']
jle ['short', 'loc_3070']
cmp ['[ebp+var_28],', '2']
jge ['short', 'loc_3070']
mov ['[ebp+var_50],', '1']
jmp ['short', 'loc_3077']
mov ['[ebp+var_50],', '0']
mov ['ecx,', '[ebp+var_50]']
mov ['[ebp+var_44],', 'ecx']
cmp ['[ebp+var_3C],', '0']
jz ['loc_312A']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_30C0']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_3095']
jmp ['short', 'loc_30BE']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_3125']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_30F1']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_3125']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
jmp ['loc_3221']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_31A6']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_3161']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_31A4']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_ft_angle_mean']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_3221']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_31E2']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_3221']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_FT_Atan2']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_Angle_Diff']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_34],', '168000h']
jge ['short', 'loc_3279']
cmp ['[ebp+var_38],', '168000h']
jge ['short', 'loc_3279']
mov ['[ebp+var_51],', '1']
jmp ['short', 'loc_327D']
mov ['[ebp+var_51],', '0']
mov ['al,', '[ebp+var_51]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN32_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN31_1']
dd ['offset', '$LN28_1']
dd ['0FFFFFFE4h,', '8']
dd ['offset', '$LN29_1']
dd ['0FFFFFFD4h,', '8']
dd ['offset', '$LN30_1']
db ['32h,', '0']
align ['10h']
endp
_ft_stroke_border_grow proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_4]']
jbe ['$Exit$11_0']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_334F']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+var_18]']
lea ['edx,', '[ecx+eax+10h]']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_3336']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
push ['8']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_33A9']
lea ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_33AB']
jmp ['short', '$Exit$11_0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_1']
dd ['offset', '$LN8_2']
align ['10h']
endp
_ft_stroke_border_close	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+14h],', '0']
jge ['short', 'loc_3448']
push ['offset', '$SG7376']
push ['162h']
push ['offset', '$SG7377']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_3428']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
cmp ['[ebp+var_8],', 'eax']
ja ['short', 'loc_3464']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
jmp ['loc_359D']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ecx+edx*8+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+8]']
mov ['esi,', '[ebp+var_4]']
mov ['[edx+esi*8],', 'eax']
mov ['[edx+esi*8+4],', 'ecx']
movzx ['eax,', '[ebp+arg_4]']
test ['eax,', 'eax']
jz ['loc_3563']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[edx+eax*8+8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[eax+ecx*8-8]']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_34D5']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '8']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '8']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_10]']
jnb ['short', 'loc_350B']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_34C3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[edx+eax+1]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[eax+ecx-1]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_353F']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_28]']
sub ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ebp+var_28]']
jnb ['short', 'loc_3563']
mov ['eax,', '[ebp+var_24]']
mov ['cl,', '[eax]']
mov ['[ebp+var_29],', 'cl']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+var_28]']
mov ['cl,', '[eax]']
mov ['[edx],', 'cl']
mov ['edx,', '[ebp+var_28]']
mov ['al,', '[ebp+var_29]']
mov ['[edx],', 'al']
jmp ['short', 'loc_352D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[edx+eax]']
or ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['edx,', '[ebp+var_4]']
mov ['[eax+edx],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+edx-1]']
or ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['ecx,', '[ebp+var_8]']
mov ['[edx+ecx-1],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+10h],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN17_2']
dd ['offset', '$LN16_1']
endp
_ft_stroke_border_lineto proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jge ['short', 'loc_3633']
push ['offset', '$SG7406']
push ['1A4h']
push ['offset', '$SG7407']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_3613']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+10h]']
test ['eax,', 'eax']
jz ['short', 'loc_3662']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx]']
mov ['esi,', '[ebp+arg_0]']
mov ['esi,', '[esi+8]']
mov ['[esi+ecx*8-8],', 'edx']
mov ['[esi+ecx*8-4],', 'eax']
jmp ['loc_3741']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx],', '0']
jbe ['short', 'loc_36D5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[eax+ecx*8-8]']
sub ['eax,', '[edx]']
cmp ['eax,', '0FFFFFFFEh']
jle ['short', 'loc_36D5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ecx+edx*8-8]']
sub ['ecx,', '[eax]']
cmp ['ecx,', '2']
jge ['short', 'loc_36D5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[edx+eax*8-4]']
sub ['edx,', '[ecx+4]']
cmp ['edx,', '0FFFFFFFEh']
jle ['short', 'loc_36D5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[eax+ecx*8-4]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '2']
jge ['short', 'loc_36D5']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_374D']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroke_border_grow']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3741']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
lea ['eax,', '[edx+eax*8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax]']
mov ['[ebp+var_C],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '8']
imul ['ecx,', '0']
mov ['esi,', '[ebp+var_8]']
mov ['[esi+ecx],', 'edx']
mov ['[esi+ecx+4],', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[ecx+eax],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ebp+arg_8]']
mov ['[edx+10h],', 'al']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_conicto proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jge ['short', 'loc_379C']
push ['offset', '$SG7427']
push ['1CEh']
push ['offset', '$SG7428']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_377C']
push ['2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_stroke_border_grow']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3835']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '8']
imul ['edx,', '0']
mov ['esi,', '[ebp+var_8]']
mov ['[esi+edx],', 'eax']
mov ['[esi+edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['esi,', '[ebp+var_8]']
mov ['[esi+eax],', 'ecx']
mov ['[esi+eax+4],', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['byte', 'ptr', '[eax+edx],', '0']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[edx+ecx],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+10h],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_cubicto proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jge ['short', 'loc_388C']
push ['offset', '$SG7447']
push ['1EFh']
push ['offset', '$SG7448']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_386C']
push ['3']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_stroke_border_grow']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['loc_3950']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '8']
imul ['edx,', '0']
mov ['esi,', '[ebp+var_8]']
mov ['[esi+edx],', 'eax']
mov ['[esi+edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['esi,', '[ebp+var_8]']
mov ['[esi+eax],', 'ecx']
mov ['[esi+eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['esi,', '[ebp+var_8]']
mov ['[esi+ecx],', 'edx']
mov ['[esi+ecx+4],', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[ecx+eax],', '2']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['byte', 'ptr', '[eax+edx],', '2']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[edx+ecx],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+10h],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_arcto	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '64h']
push ['edi']
lea ['edi,', '[ebp+var_64]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_60],', '0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_24]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '[eax]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[edx+4]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_10],', '0']
jl ['short', 'loc_39D3']
mov ['[ebp+var_64],', '5A0000h']
jmp ['short', 'loc_39DA']
mov ['[ebp+var_64],', '0FFA60000h']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['loc_3B2B']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '5A0000h']
jle ['short', 'loc_3A02']
mov ['[ebp+var_C],', '5A0000h']
jmp ['short', 'loc_3A12']
cmp ['[ebp+var_C],', '0FFA60000h']
jge ['short', 'loc_3A12']
mov ['[ebp+var_C],', '0FFA60000h']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jge ['short', 'loc_3A2F']
mov ['ecx,', '[ebp+var_18]']
neg ['ecx']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
sar ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_34]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '[eax]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[edx+4]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_Cos']
add ['esp,', '4']
add ['eax,', '10000h']
imul ['edx,', 'eax,', '3']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['_FT_Sin']
add ['esp,', '4']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_5C],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_44]']
add ['edx,', '[ebp+var_24]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '[ebp+var_20]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
lea ['eax,', '[ebp+var_54]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_54]']
add ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_54],', 'ecx']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '[ebp+var_30]']
mov ['[ebp+var_50],', 'edx']
lea ['eax,', '[ebp+var_34]']
push ['eax']
lea ['ecx,', '[ebp+var_54]']
push ['ecx']
lea ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_stroke_border_cubicto']
add ['esp,', '10h']
mov ['[ebp+var_60],', 'eax']
cmp ['[ebp+var_60],', '0']
jz ['short', 'loc_3B0B']
jmp ['short', 'loc_3B2B']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'ecx']
jmp ['loc_39E0']
mov ['eax,', '[ebp+var_60]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '64h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN16_2']
dd ['offset', '$LN12_1']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['8']
dd ['offset', '$LN13_1']
dd ['0FFFFFFBCh,', '8']
dd ['offset', '$LN14_2']
dd ['0FFFFFFACh,', '8']
dd ['offset', '$LN15_2']
db ['32h']
align ['2']
endp
_ft_stroke_border_moveto proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jl ['short', 'loc_3BBA']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroke_border_close']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[edx+14h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+10h],', '0']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_init proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+1Ch],', '0']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_reset	proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+1Ch],', '0']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_done proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_3C74']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_3C95']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+1Ch],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_get_counts proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_3D6C']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '8']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_10],', '0']
jbe ['short', 'loc_3DC5']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
and ['ecx,', '4']
jz ['short', 'loc_3D97']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_3D8E']
jmp ['short', '$Fail$12']
mov ['[ebp+var_1C],', '1']
jmp ['short', 'loc_3D9F']
cmp ['[ebp+var_1C],', '0']
jnz ['short', 'loc_3D9F']
jmp ['short', '$Fail$12']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
and ['edx,', '8']
jz ['short', 'loc_3DC3']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_3D48']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_3DCD']
jmp ['short', '$Fail$12']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+1Ch],', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_3DF9']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '0']
jmp ['short', '$Exit$13']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroke_border_export proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
shl ['ecx,', '3']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
lea ['edx,', '[ecx+edx*8]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_4]']
add ['edx,', '[eax+8]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_3E87']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_4],', '0']
jbe ['short', 'loc_3EBB']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
and ['edx,', '1']
jz ['short', 'loc_3EA0']
mov ['eax,', '[ebp+var_C]']
mov ['byte', 'ptr', '[eax],', '1']
jmp ['short', 'loc_3EB9']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
and ['edx,', '2']
jz ['short', 'loc_3EB3']
mov ['eax,', '[ebp+var_C]']
mov ['byte', 'ptr', '[eax],', '2']
jmp ['short', 'loc_3EB9']
mov ['ecx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[ecx],', '0']
jmp ['short', 'loc_3E6C']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*2]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['ax,', '[edx+2]']
mov ['word', 'ptr', '[ebp+var_1C],', 'ax']
jmp ['short', 'loc_3F09']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['ax,', 'word', 'ptr', '[ebp+var_1C]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_1C],', 'ax']
cmp ['[ebp+var_10],', '0']
jbe ['short', 'loc_3F3F']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
and ['edx,', '8']
jz ['short', 'loc_3F3D']
mov ['eax,', '[ebp+var_18]']
mov ['cx,', 'word', 'ptr', '[ebp+var_1C]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', '[eax]']
add ['cx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'cx']
jmp ['short', 'loc_3EEB']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+2],', 'cx']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Outline_Check']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_3F79']
push ['offset', '$SG7573']
push ['2EBh']
push ['offset', '$SG7574']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_3F52']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroker_arcto proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+arg_4]']
shl ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+40h]']
mov ['[ebp+var_14],', 'ecx']
imul ['edx,', '[ebp+arg_4],', '0B40000h']
mov ['eax,', '5A0000h']
sub ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0B40000h']
jnz ['short', 'loc_4006']
mov ['edx,', '[ebp+var_8]']
neg ['edx']
shl ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '8']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_ft_stroke_border_arcto']
add ['esp,', '14h']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+10h],', '0']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroker_cap	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '4Ch']
push ['edi']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+2Ch],', '1']
jnz ['short', 'loc_40A4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '0B40000h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_stroker_arcto']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$15']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '2']
jnz ['loc_41A7']
imul ['edx,', '[ebp+arg_8],', '0B40000h']
mov ['eax,', '5A0000h']
sub ['eax,', 'edx']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+40h]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+var_20]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
add ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
push ['0']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_4144']
jmp ['$Exit$15']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[edx+0Ch]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
push ['0']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$15']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+2Ch],', '0']
jnz ['$Exit$15']
imul ['ecx,', '[ebp+arg_8],', '0B40000h']
mov ['edx,', '5A0000h']
sub ['edx,', 'ecx']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+40h]']
mov ['[ebp+var_4C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
lea ['ecx,', '[ebp+var_3C]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '[edx+8]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_38],', 'edx']
push ['0']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_422A']
jmp ['short', '$Exit$15']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
lea ['ecx,', '[ebp+var_3C]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '[edx+8]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_38],', 'edx']
push ['0']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_2']
dd ['offset', '$LN10_2']
dd ['0FFFFFFE0h,', '8']
dd ['offset', '$LN11_1']
dd ['0FFFFFFC4h,', '8']
dd ['offset', '$LN12_2']
align ['10h']
endp
_ft_stroker_inside proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+40h]']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_2C],', '0']
imul ['eax,', '[ebp+arg_4],', '0B40000h']
mov ['ecx,', '5A0000h']
sub ['ecx,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Angle_Diff']
add ['esp,', '8']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_434C']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_4352']
mov ['[ebp+var_2D],', '0']
jmp ['short', 'loc_43A3']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Tan']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_4399']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
cmp ['eax,', '[ebp+var_34]']
jl ['short', 'loc_4399']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[ebp+var_34]']
jl ['short', 'loc_4399']
mov ['[ebp+var_35],', '1']
jmp ['short', 'loc_439D']
mov ['[ebp+var_35],', '0']
mov ['dl,', '[ebp+var_35]']
mov ['[ebp+var_2D],', 'dl']
movzx ['eax,', '[ebp+var_2D]']
test ['eax,', 'eax']
jnz ['short', 'loc_43E9']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
lea ['edx,', '[ebp+var_24]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[edx+0Ch]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+10h],', '0']
jmp ['short', 'loc_4448']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_FT_Cos']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[edx+8]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_20],', 'edx']
push ['0']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN11_2']
dd ['offset', '$LN10_3']
align ['10h']
endp
_ft_stroker_outside proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '70h']
push ['edi']
lea ['edi,', '[ebp+var_70]']
mov ['ecx,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+40h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jnz ['short', 'loc_44E7']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_stroker_arcto']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$30']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_20],', '0']
imul ['edx,', '[ebp+arg_4],', '0B40000h']
mov ['eax,', '5A0000h']
sub ['eax,', 'edx']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+30h],', '1']
jnz ['short', 'loc_452C']
mov ['[ebp+var_6D],', '1']
jmp ['short', 'loc_4530']
mov ['[ebp+var_6D],', '0']
mov ['dl,', '[ebp+var_6D]']
mov ['[ebp+var_21],', 'dl']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '2']
jz ['short', 'loc_4545']
mov ['[ebp+var_6E],', '1']
jmp ['short', 'loc_4549']
mov ['[ebp+var_6E],', '0']
mov ['cl,', '[ebp+var_6E]']
mov ['[ebp+var_22],', 'cl']
movzx ['edx,', '[ebp+var_21]']
test ['edx,', 'edx']
jnz ['loc_45F0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_Angle_Diff']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0B40000h']
jnz ['short', 'loc_458C']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_45A5']
mov ['eax,', '[ebp+var_18]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+var_18]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['_FT_Cos']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '10000h']
jge ['short', 'loc_45F0']
movzx ['ecx,', '[ebp+var_22]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_45EC']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_ft_pos_abs']
add ['esp,', '4']
cmp ['eax,', '39h']
jle ['short', 'loc_45F0']
mov ['[ebp+var_21],', '1']
movzx ['eax,', '[ebp+var_21]']
test ['eax,', 'eax']
jz ['loc_47A5']
movzx ['ecx,', '[ebp+var_22]']
test ['ecx,', 'ecx']
jz ['short', 'loc_4657']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
lea ['edx,', '[ebp+var_30]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[edx+0Ch]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+10h],', '0']
push ['0']
lea ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_47A0']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
push ['eax']
lea ['edx,', '[ebp+var_40]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '[edx+0Ch]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_Sin']
add ['esp,', '4']
push ['eax']
call ['_ft_pos_abs']
add ['esp,', '4']
push ['eax']
mov ['edx,', '10000h']
sub ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_58],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_58]']
push ['edx']
lea ['eax,', '[ebp+var_50]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_50]']
add ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+var_4C]']
add ['edx,', '[ebp+var_3C]']
mov ['[ebp+var_4C],', 'edx']
push ['0']
lea ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_470A']
jmp ['$Exit$30']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_58]']
push ['eax']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '[ebp+var_40]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '[ebp+var_3C]']
mov ['[ebp+var_4C],', 'eax']
push ['0']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_4753']
jmp ['$Exit$30']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_47A0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
lea ['eax,', '[ebp+var_50]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '[ecx+8]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4C]']
add ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_4C],', 'ecx']
push ['0']
lea ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$30']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
push ['eax']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
lea ['eax,', '[ebp+var_68]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_68]']
add ['edx,', '[ecx+8]']
mov ['[ebp+var_68],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_64]']
add ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_64],', 'ecx']
push ['0']
lea ['edx,', '[ebp+var_68]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_4804']
jmp ['short', '$Exit$30']
cmp ['[ebp+arg_8],', '0']
jnz ['short', '$Exit$30']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
lea ['edx,', '[ebp+var_68]']
push ['edx']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_68]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_68],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_64]']
add ['eax,', '[edx+0Ch]']
mov ['[ebp+var_64],', 'eax']
push ['0']
lea ['ecx,', '[ebp+var_68]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_stroke_border_lineto']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN29_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '70h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN28_2']
dd ['offset', '$LN24']
dd ['0FFFFFFC0h,', '8']
dd ['offset', '$LN25']
dd ['0FFFFFFB0h,', '8']
dd ['offset', '$LN26']
dd ['0FFFFFF98h,', '8']
dd ['offset', '$LN27']
align ['10h']
endp
_ft_stroker_process_corner proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_Angle_Diff']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_4912']
jmp ['short', '$Exit$6']
mov ['[ebp+var_C],', '0']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_4926']
mov ['[ebp+var_C],', '1']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_stroker_inside']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_4945']
jmp ['short', '$Exit$6']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '1']
sub ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_stroker_outside']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_stroker_subpath_start proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '5A0000h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
push ['edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Vector_From_Polar']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '40h']
mov ['[ebp+var_28],', 'edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['_ft_stroke_border_moveto']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_49EE']
jmp ['short', '$Exit$8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+var_C]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
sub ['edx,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '20h']
mov ['[ebp+var_28],', 'eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
call ['_ft_stroke_border_moveto']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+24h],', 'ecx']
mov ['eax,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN6_0']
dd ['offset', '$LN4']
dd ['0FFFFFFE4h,', '8']
dd ['offset', '$LN5']
align ['10h']
endp
_ft_stroker_add_reverse_left proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '40h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '60h']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jge ['short', 'loc_4AEF']
push ['offset', '$SG7945']
push ['71Fh']
push ['offset', '$SG7946']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_4ACF']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx+14h]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jle ['$Exit$15_0']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_stroke_border_grow']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_4B29']
jmp ['$Exit$15_0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx*8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx]']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
lea ['eax,', '[edx+eax*8-8]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
lea ['edx,', '[edx+ecx-1]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx*8]']
cmp ['[ebp+var_1C],', 'ecx']
jb ['loc_4C38']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx],', 'eax']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_20]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
movzx ['eax,', '[ebp+arg_4]']
test ['eax,', 'eax']
jz ['short', 'loc_4BC8']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
and ['ecx,', '0FFFFFFF3h']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+eax],', 'cl']
jmp ['short', 'loc_4C0F']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
and ['eax,', '0Ch']
mov ['byte', 'ptr', '[ebp+var_24+3],', 'al']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_24+3]']
cmp ['ecx,', '4']
jz ['short', 'loc_4BEF']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_24+3]']
cmp ['edx,', '8']
jnz ['short', 'loc_4C0F']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
xor ['eax,', '0Ch']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', '8']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '8']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
jmp ['loc_4B6C']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax+10h],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['byte', 'ptr', '[ecx+10h],', '0']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_memcpy:near']
extrn ['_FT_MulDiv:near']
extrn ['_FT_MulFix:near']
extrn ['_FT_DivFix:near']
extrn ['_FT_Outline_New:near']
extrn ['_FT_Outline_Done:near']
extrn ['_FT_Outline_Check:near']
extrn ['_FT_Outline_Get_Orientation:near']
extrn ['_FT_Glyph_Copy:near']
extrn ['_FT_Done_Glyph:near']
extrn ['_FT_Sin:near']
extrn ['_FT_Cos:near']
extrn ['_FT_Tan:near']
extrn ['_FT_Atan2:near']
extrn ['_FT_Angle_Diff:near']
extrn ['_FT_Vector_Length:near']
extrn ['_FT_Vector_From_Polar:near']
extrn ['_ft_mem_alloc:near']
extrn ['_ft_mem_realloc:near']
extrn ['_ft_mem_free:near']
extrn ['_FT_Panic:near']
extrn ['_FT_Throw:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['_ft_outline_glyph_class:near']
extrn ['___security_cookie:near']
end
