endp
_FT_MulFix_i386	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
imul ['edx']
mov ['ecx,', 'edx']
sar ['ecx,', '1Fh']
add ['ecx,', '8000h']
add ['eax,', 'ecx']
adc ['edx,', '0']
shr ['eax,', '10h']
shl ['edx,', '10h']
add ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_ps_table_new	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+20h],', 'ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
push ['4']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+18h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1A7C']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
push ['4']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1Ch],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1A7E']
jmp ['short', '$Exit$12']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0DEADBEEFh']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '24h']
mov ['ecx,', 'ds:_ps_table_funcs']
mov ['[eax],', 'ecx']
mov ['edx,', 'ds:off_16D8']
mov ['[eax+4],', 'edx']
mov ['ecx,', 'ds:off_16DC']
mov ['[eax+8],', 'ecx']
mov ['edx,', 'ds:off_16E0']
mov ['[eax+0Ch],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1B08']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1AE7']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN10']
dd ['offset', '$LN9']
db ['6', 'dup(0CCh)']
endp
_ps_table_add	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_1B78']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+10h]']
jl ['short', 'loc_1BA1']
push ['offset', '$SG8300']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8301']
push ['0B0h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_1CC1']
cmp ['[ebp+arg_C],', '0']
jge ['short', 'loc_1BD0']
push ['offset', '$SG8303']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8304']
push ['0B6h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_1CC1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jbe ['loc_1C6E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
js ['short', 'loc_1C06']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[eax+8]']
jb ['short', 'loc_1C0D']
mov ['[ebp+var_C],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '[ebp+arg_C]']
cmp ['[ebp+var_8],', 'eax']
jnb ['short', 'loc_1C3F']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx+1]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '3FFh']
and ['ecx,', '0FFFFFC00h']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_1C0D']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_reallocate_t1_table']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_1C5D']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_1CC1']
cmp ['[ebp+var_C],', '0']
jl ['short', 'loc_1C6E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax+18h]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+eax*4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[edx+eax*4],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+4]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
xor ['eax,', 'eax']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_ps_table_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_1D0F']
jmp ['short', 'loc_1D89']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_1D33']
jmp ['short', 'loc_1D89']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_shift_elements']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_14],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_1D68']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN9_0']
dd ['offset', '$LN8']
db ['0Ah', 'dup(0CCh)']
endp
_ps_table_release proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0DEADBEEFh']
jnz ['short', 'loc_1E57']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1DEC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_1E0B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_1E2C']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['7', 'dup(0CCh)']
endp
_ps_parser_skip_spaces proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_skip_spaces']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_ps_parser_skip_PS_token proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_skip_spaces']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_10]']
jb ['short', 'loc_1EDB']
jmp ['$Exit$24']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '5Bh']
jz ['short', 'loc_1EF1']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '5Dh']
jnz ['short', 'loc_1EFF']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
jmp ['$Exit$24']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '7Bh']
jnz ['short', 'loc_1F22']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_skip_procedure']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
jmp ['$Exit$24']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '28h']
jnz ['short', 'loc_1F45']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_skip_literal_string']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
jmp ['$Exit$24']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '3Ch']
jnz ['short', 'loc_1F93']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_1F7B']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
cmp ['eax,', '3Ch']
jnz ['short', 'loc_1F7B']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_1F8E']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_skip_string']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
jmp ['$Exit$24']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '3Eh']
jnz ['short', 'loc_1FF4']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_10]']
jnb ['short', 'loc_1FBA']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Eh']
jz ['short', 'loc_1FE6']
push ['offset', '$SG8475']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8476']
push ['23Ah']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_14],', 'eax']
jmp ['$Exit$24']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
jmp ['$Exit$24']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '2Fh']
jnz ['short', 'loc_2008']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_10]']
jnb ['$Exit$24']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '20h']
jz ['loc_20D3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Dh']
jz ['loc_20D3']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '0Ah']
jz ['loc_20D3']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '9']
jz ['loc_20D3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Ch']
jz ['short', 'loc_20D3']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
test ['eax,', 'eax']
jz ['short', 'loc_20D3']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '2Fh']
jz ['short', 'loc_20D3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '28h']
jz ['short', 'loc_20D3']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '29h']
jz ['short', 'loc_20D3']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '3Ch']
jz ['short', 'loc_20D3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Eh']
jz ['short', 'loc_20D3']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '5Bh']
jz ['short', 'loc_20D3']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '5Dh']
jz ['short', 'loc_20D3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '7Bh']
jz ['short', 'loc_20D3']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '7Dh']
jz ['short', 'loc_20D3']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '25h']
jnz ['short', 'loc_20D5']
jmp ['short', '$Exit$24']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_2008']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_2123']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_2123']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
push ['offset', '$SG8485']
call ['_FT_Message']
add ['esp,', '8']
push ['offset', '$SG8486']
push ['258h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN22']
dd ['offset', '$LN21']
endp
_ps_parser_to_token proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_10]']
jb ['short', 'loc_21D3']
jmp ['loc_238F']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_18],', 'cl']
cmp ['byte', 'ptr', '[ebp+var_18],', '28h']
jz ['short', 'loc_21F2']
cmp ['byte', 'ptr', '[ebp+var_18],', '5Bh']
jz ['short', 'loc_225A']
cmp ['byte', 'ptr', '[ebp+var_18],', '7Bh']
jz ['short', 'loc_2226']
jmp ['loc_2319']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+8],', '2']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_skip_literal_string']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_2221']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
jmp ['loc_236B']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+8],', '3']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_skip_procedure']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_2255']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
jmp ['loc_236B']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+8],', '3']
mov ['[ebp+var_14],', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_2317']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jnz ['short', 'loc_2317']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '5Bh']
jnz ['short', 'loc_22BF']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_22ED']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '5Dh']
jnz ['short', 'loc_22ED']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jg ['short', 'loc_22ED']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_2317']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ps_parser_skip_PS_token']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_2298']
jmp ['short', 'loc_236B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '2Fh']
jnz ['short', 'loc_2335']
mov ['[ebp+var_1C],', '4']
jmp ['short', 'loc_233C']
mov ['[ebp+var_1C],', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_PS_token']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jnz ['short', 'loc_236B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_2387']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN23_0']
dd ['offset', '$LN22_0']
endp
_ps_parser_to_token_array proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ps_parser_to_token']
add ['esp,', '8']
cmp ['[ebp+var_8],', '3']
jnz ['loc_24B3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'ecx']
imul ['edx,', '[ebp+arg_8],', '0Ch']
add ['edx,', '[ebp+var_20]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_248F']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ps_parser_to_token']
add ['esp,', '8']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_2462']
jmp ['short', 'loc_248F']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2484']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_24]']
jnb ['short', 'loc_2484']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_34]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_30]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '0Ch']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_243D']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '[ebp+arg_4]']
cdq
mov ['ecx,', '0Ch']
idiv ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx+8],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN10_1']
dd ['offset', '$LN8_0']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['0Ch']
dd ['offset', '$LN9_1']
db ['0Bh', 'dup(0CCh)']
endp
_ps_parser_load_field proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0B8h']
push ['edi']
lea ['edi,', '[ebp+var_B8]']
mov ['ecx,', '2Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ps_parser_to_token']
add ['esp,', '8']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_254D']
jmp ['$Fail$69']
mov ['[ebp+var_2C],', '1']
mov ['[ebp+var_30],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_40],', 'edx']
cmp ['[ebp+var_40],', '7']
jnz ['short', 'loc_25D0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_58],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
lea ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_to_token']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_58]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_5C]']
mov ['[eax+8],', 'ecx']
cmp ['[ebp+var_48],', '3']
jnz ['short', 'loc_25CE']
mov ['[ebp+var_40],', '8']
jmp ['short', '$FieldArray$70']
jmp ['short', 'loc_2600']
cmp ['[ebp+var_C],', '3']
jnz ['short', 'loc_2600']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_2C],', 'edx']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_25E7']
jmp ['$Fail$69']
mov ['[ebp+var_30],', '1']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_28]']
sub ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
jmp ['short', 'loc_2614']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_2C],', '0']
jbe ['loc_2B86']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+arg_4]']
add ['eax,', '[ecx+10h]']
mov ['[ebp+var_60],', 'eax']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['_skip_spaces']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_A8],', 'ecx']
mov ['edx,', '[ebp+var_A8]']
sub ['edx,', '1']
mov ['[ebp+var_A8],', 'edx']
cmp ['[ebp+var_A8],', '7']
ja ['loc_2B7F']
mov ['eax,', '[ebp+var_A8]']
jmp ['ds:$LN68[eax*4]']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
call ['_ps_tobool']
add ['esp,', '8']
mov ['[ebp+var_64],', 'eax']
jmp ['short', '$Store_Integer$71']
push ['0']
mov ['eax,', '[ebp+var_28]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_PS_Conv_ToFixed']
add ['esp,', '0Ch']
mov ['[ebp+var_64],', 'eax']
jmp ['short', '$Store_Integer$71']
push ['3']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['_PS_Conv_ToFixed']
add ['esp,', '0Ch']
mov ['[ebp+var_64],', 'eax']
jmp ['short', '$Store_Integer$71']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
call ['_PS_Conv_ToInt']
add ['esp,', '8']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax+14h]']
mov ['[ebp+var_AC],', 'cl']
cmp ['[ebp+var_AC],', '1']
jz ['short', 'loc_26F1']
cmp ['[ebp+var_AC],', '2']
jz ['short', 'loc_26FB']
cmp ['[ebp+var_AC],', '4']
jz ['short', 'loc_2707']
jmp ['short', 'loc_2711']
mov ['edx,', '[ebp+var_60]']
mov ['al,', 'byte', 'ptr', '[ebp+var_64]']
mov ['[edx],', 'al']
jmp ['short', 'loc_2719']
mov ['ecx,', '[ebp+var_60]']
mov ['dx,', 'word', 'ptr', '[ebp+var_64]']
mov ['[ecx],', 'dx']
jmp ['short', 'loc_2719']
mov ['eax,', '[ebp+var_60]']
mov ['ecx,', '[ebp+var_64]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_2719']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+var_64]']
mov ['[edx],', 'eax']
jmp ['loc_2B81']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_6C],', 'edx']
mov ['eax,', '[ebp+var_28]']
sub ['eax,', '[ebp+var_20]']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+var_28]']
jb ['short', 'loc_273D']
jmp ['loc_2B81']
cmp ['[ebp+var_C],', '4']
jnz ['short', 'loc_2757']
mov ['edx,', '[ebp+var_70]']
sub ['edx,', '1']
mov ['[ebp+var_70],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_27A1']
cmp ['[ebp+var_C],', '2']
jnz ['short', 'loc_2771']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_70]']
sub ['edx,', '2']
mov ['[ebp+var_70],', 'edx']
jmp ['short', 'loc_27A1']
mov ['eax,', '[ebp+var_C]']
push ['eax']
push ['offset', '$SG8690']
call ['_FT_Message']
add ['esp,', '8']
push ['offset', '$SG8691']
push ['494h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_38],', 'eax']
jmp ['$Exit$72']
mov ['ecx,', '[ebp+var_60]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_27F9']
mov ['edx,', '4']
imul ['eax,', 'edx,', '29h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '0']
jl ['short', 'loc_27CD']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
push ['offset', '$SG8700']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_27A9']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_6C]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_60]']
mov ['dword', 'ptr', '[ecx],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_27D1']
mov ['eax,', '[ebp+var_60]']
mov ['dword', 'ptr', '[eax],', '0']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_70]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_6C]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_281E']
jmp ['$Exit$72']
mov ['ecx,', '[ebp+var_70]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_68]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_68]']
add ['ecx,', '[ebp+var_70]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+var_68]']
mov ['[edx],', 'eax']
jmp ['loc_2B81']
mov ['ecx,', '[ebp+var_60]']
mov ['[ebp+var_8C],', 'ecx']
push ['0']
lea ['edx,', '[ebp+var_84]']
push ['edx']
push ['4']
mov ['eax,', '[ebp+var_28]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_ps_tofixedarray']
add ['esp,', '14h']
mov ['[ebp+var_90],', 'eax']
cmp ['[ebp+var_90],', '4']
jge ['short', 'loc_28A7']
push ['offset', '$SG8718']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8719']
push ['4B9h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_38],', 'eax']
jmp ['$Exit$72']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+eax+var_84]']
push ['ecx']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['edx,', '[ebp+var_8C]']
mov ['[edx],', 'eax']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+eax+var_84]']
push ['ecx']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['edx,', '[ebp+var_8C]']
mov ['[edx+4],', 'eax']
mov ['eax,', '4']
shl ['eax,', '1']
mov ['ecx,', '[ebp+eax+var_84]']
push ['ecx']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['edx,', '[ebp+var_8C]']
mov ['[edx+8],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+ecx+var_84]']
push ['edx']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8C]']
mov ['[ecx+0Ch],', 'eax']
jmp ['loc_2B81']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_94],', 'eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_C]']
shl ['edx,', '2']
push ['edx']
push ['0']
push ['4']
mov ['eax,', '[ebp+var_94]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_98],', 'eax']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_296B']
jmp ['$Exit$72']
mov ['[ebp+var_A0],', '0']
jmp ['short', 'loc_2986']
mov ['ecx,', '[ebp+var_A0]']
add ['ecx,', '1']
mov ['[ebp+var_A0],', 'ecx']
cmp ['[ebp+var_A0],', '4']
jnb ['loc_2A88']
push ['0']
mov ['edx,', '[ebp+var_A0]']
imul ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_98]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_ps_tofixedarray']
add ['esp,', '14h']
mov ['[ebp+var_9C],', 'eax']
cmp ['[ebp+var_9C],', '0']
jl ['short', 'loc_29DB']
mov ['edx,', '[ebp+var_9C]']
cmp ['edx,', '[ebp+arg_C]']
jnb ['loc_2A73']
cmp ['[ebp+var_A0],', '0']
jnz ['short', 'loc_29F0']
mov ['[ebp+var_B0],', 'offset', '$SG8734']
jmp ['short', 'loc_2A3C']
cmp ['[ebp+var_A0],', '1']
jnz ['short', 'loc_2A05']
mov ['[ebp+var_B4],', 'offset', '$SG8735']
jmp ['short', 'loc_2A30']
cmp ['[ebp+var_A0],', '2']
jnz ['short', 'loc_2A1A']
mov ['[ebp+var_B8],', 'offset', '$SG8736']
jmp ['short', 'loc_2A24']
mov ['[ebp+var_B8],', 'offset', '$SG8737']
mov ['eax,', '[ebp+var_B8]']
mov ['[ebp+var_B4],', 'eax']
mov ['ecx,', '[ebp+var_B4]']
mov ['[ebp+var_B0],', 'ecx']
mov ['edx,', '[ebp+var_B0]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['offset', '$SG8738']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG8739']
push ['4DEh']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_38],', 'eax']
jmp ['$Exit$72']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
call ['_skip_spaces']
add ['esp,', '8']
jmp ['loc_2977']
mov ['[ebp+var_A0],', '0']
jmp ['short', 'loc_2AA3']
mov ['eax,', '[ebp+var_A0]']
add ['eax,', '1']
mov ['[ebp+var_A0],', 'eax']
mov ['ecx,', '[ebp+var_A0]']
cmp ['ecx,', '[ebp+arg_C]']
jnb ['loc_2B59']
mov ['edx,', '[ebp+var_A0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_A4],', 'ecx']
mov ['edx,', '[ebp+var_A0]']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[eax+edx*4]']
push ['ecx']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['edx,', '[ebp+var_A4]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_A0]']
add ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_98]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_A0]']
lea ['ecx,', '[eax+edx*2]']
mov ['edx,', '[ebp+var_98]']
mov ['eax,', '[edx+ecx*4]']
push ['eax']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_A4]']
mov ['[ecx+8],', 'eax']
imul ['edx,', '[ebp+arg_C],', '3']
add ['edx,', '[ebp+var_A0]']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[eax+edx*4]']
push ['ecx']
call ['_FT_RoundFix']
add ['esp,', '4']
mov ['edx,', '[ebp+var_A4]']
mov ['[edx+0Ch],', 'eax']
jmp ['loc_2A94']
mov ['eax,', '[ebp+var_98]']
push ['eax']
mov ['ecx,', '[ebp+var_94]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_98],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_2B59']
jmp ['short', 'loc_2B81']
jmp ['short', '$Fail$69']
jmp ['loc_2602']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['[ebp+var_38],', '0']
mov ['eax,', '[ebp+var_38]']
jmp ['short', 'loc_2BB4']
push ['offset', '$SG8750']
push ['507h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_38],', 'eax']
jmp ['short', '$Exit$72']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN67']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0B8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN66']
dd ['offset', '$LN61']
dd ['0FFFFFFE0h,', '4']
dd ['offset', '$LN62']
dd ['0FFFFFFC8h,', '4']
dd ['offset', '$LN63']
dd ['0FFFFFFB0h,', '0Ch']
dd ['offset', '$LN64']
dd ['0FFFFFF7Ch,', '10h']
dd ['offset', '$LN65']
dd ['offset', '$LN38']
dd ['offset', '$LN40']
dd ['offset', '$LN39']
dd ['offset', '$LN31']
dd ['offset', '$LN31']
dd ['offset', '$LN16']
dd ['offset', '$LN14']
db ['8', 'dup(0CCh)']
endp
_ps_parser_load_field_table proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1D4h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1D4]']
mov ['ecx,', '75h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_1A0],', '0']
mov ['ecx,', '9']
mov ['esi,', '[ebp+arg_4]']
lea ['edi,', '[ebp+var_1D0]']
rep ['movsd']
mov ['[ebp+var_1C8],', '2']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+8],', '0Ah']
jz ['short', 'loc_2CC9']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+8],', '7']
jnz ['short', 'loc_2CD3']
mov ['[ebp+var_1C8],', '3']
lea ['edx,', '[ebp+var_198]']
push ['edx']
push ['20h']
lea ['eax,', '[ebp+var_188]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ps_parser_to_token_array']
add ['esp,', '10h']
cmp ['[ebp+var_198],', '0']
jge ['short', 'loc_2D07']
mov ['[ebp+var_1A0],', '0A2h']
jmp ['$Exit$17']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_198]']
cmp ['eax,', '[edx+18h]']
jbe ['short', 'loc_2D21']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_198],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_1A4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_1A8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+8],', '7']
jz ['short', 'loc_2D67']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+1Ch],', '0']
jz ['short', 'loc_2D67']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+ecx]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+1Ch]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_198]']
mov ['[eax+edx],', 'cl']
lea ['edx,', '[ebp+var_188]']
mov ['[ebp+var_190],', 'edx']
jmp ['short', 'loc_2D93']
mov ['eax,', '[ebp+var_198]']
sub ['eax,', '1']
mov ['[ebp+var_198],', 'eax']
mov ['ecx,', '[ebp+var_190]']
add ['ecx,', '0Ch']
mov ['[ebp+var_190],', 'ecx']
cmp ['[ebp+var_198],', '0']
jle ['short', 'loc_2DFE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_190]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_190]']
mov ['ecx,', '[eax+4]']
mov ['[edx+8],', 'ecx']
push ['0']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_1D0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ps_parser_load_field']
add ['esp,', '14h']
mov ['[ebp+var_1A0],', 'eax']
cmp ['[ebp+var_1A0],', '0']
jz ['short', 'loc_2DE6']
jmp ['short', 'loc_2DFE']
movzx ['eax,', '[ebp+var_1BC]']
add ['eax,', '[ebp+var_1C0]']
mov ['[ebp+var_1C0],', 'eax']
jmp ['loc_2D75']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_1A4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_1A8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_1A0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1D4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN15']
dd ['offset', '$LN12']
dd ['0FFFFFE68h,', '4']
dd ['offset', '$LN13']
dd ['0FFFFFE30h,', '24h']
dd ['offset', '$LN14_0']
align ['4']
endp
_ps_parser_to_int proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_PS_Conv_ToInt']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['5', 'dup(0CCh)']
endp
_ps_parser_to_bytes proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[eax+8]']
jb ['short', 'loc_2F0E']
jmp ['$Exit$11']
movzx ['edx,', '[ebp+arg_10]']
test ['edx,', 'edx']
jz ['short', 'loc_2F56']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Ch']
jz ['short', 'loc_2F4D']
push ['offset', '$SG8804']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8805']
push ['578h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$11']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_PS_Conv_ASCIIHexDecode']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx],', 'eax']
movzx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['short', 'loc_2FC6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+8]']
jnb ['short', 'loc_2FBD']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Eh']
jz ['short', 'loc_2FBD']
push ['offset', '$SG8808']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8809']
push ['589h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_4],', 'eax']
jmp ['short', '$Exit$11']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN9_2']
dd ['offset', '$LN8_1']
endp
_ps_parser_to_fixed proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_PS_Conv_ToFixed']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_ps_parser_to_coord_array proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ps_tocoordarray']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_ps_parser_to_fixed_array proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_parser_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ps_tofixedarray']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_ps_parser_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
push ['edi']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+10h],', 'edx']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '14h']
mov ['ecx,', '0Dh']
mov ['esi,', 'offset', '_ps_parser_funcs']
rep ['movsd']
pop ['edi']
pop ['esi']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_ps_parser_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
pop ['ebp']
retn
db ['5', 'dup(0CCh)']
endp
_t1_builder_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+40h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+44h],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+64h]']
mov ['[eax],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_31C8']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '14h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '38h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_GlyphLoader_Rewind']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+28h]']
mov ['[ecx+4Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+48h],', '0']
movzx ['edx,', '[ebp+arg_10]']
test ['edx,', 'edx']
jz ['short', 'loc_31C8']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+24h]']
mov ['[edx+48h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+20h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+24h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['edi,', '[ebp+arg_0]']
add ['edi,', '50h']
mov ['ecx,', '8']
mov ['esi,', 'offset', '_t1_builder_funcs']
rep ['movsd']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['6', 'dup(0CCh)']
endp
_t1_builder_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_326E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '6Ch']
mov ['ecx,', '[edx+10h]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ecx+10h]']
mov ['[eax+10h],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_t1_builder_check_points proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_32B1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movsx ['edx,', 'word', 'ptr', '[ecx+16h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movsx ['eax,', 'word', 'ptr', '[ecx+3Ah]']
add ['edx,', '[ebp+arg_4]']
add ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
cmp ['eax,', '[edx+4]']
ja ['short', 'loc_32C3']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_32C3']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_32DB']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_t1_builder_add_point proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+44h]']
test ['eax,', 'eax']
jz ['short', 'loc_3383']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
lea ['edx,', '[ecx+edx*8]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
add ['ecx,', '[edx+8]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_RoundFix']
add ['esp,', '4']
sar ['eax,', '10h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_FT_RoundFix']
add ['esp,', '4']
sar ['eax,', '10h']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'eax']
movzx ['edx,', '[ebp+arg_C]']
test ['edx,', 'edx']
jz ['short', 'loc_3374']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_337B']
mov ['[ebp+var_10],', '2']
mov ['eax,', '[ebp+var_C]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_10]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['ax,', '[edx+2]']
add ['ax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+2],', 'ax']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_t1_builder_add_point1 proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1_builder_check_points']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_33E4']
push ['1']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1_builder_add_point']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['7', 'dup(0CCh)']
endp
_t1_builder_add_contour	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_344F']
push ['offset', '$SG8899']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8900']
push ['67Ch']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
jmp ['loc_3504']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+44h]']
test ['eax,', 'eax']
jnz ['short', 'loc_3471']
mov ['ecx,', '[ebp+var_4]']
mov ['dx,', '[ecx]']
add ['dx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dx']
xor ['eax,', 'eax']
jmp ['loc_3504']
mov ['ecx,', '1']
test ['ecx,', 'ecx']
jz ['short', 'loc_34AA']
xor ['edx,', 'edx']
jnz ['short', 'loc_34A1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movsx ['edx,', 'word', 'ptr', '[ecx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movsx ['eax,', 'word', 'ptr', '[ecx+38h]']
lea ['ecx,', '[edx+eax+1]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
cmp ['ecx,', '[eax+8]']
ja ['short', 'loc_34AA']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_34C0']
push ['1']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3501']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
test ['edx,', 'edx']
jle ['short', 'loc_34F1']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx]']
mov ['edx,', '[ebp+var_4]']
mov ['edx,', '[edx+0Ch]']
mov ['[edx+eax*2-2],', 'cx']
mov ['eax,', '[ebp+var_4]']
mov ['cx,', '[eax]']
add ['cx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_t1_builder_start_point	proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '3']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+40h],', '3']
jnz ['short', 'loc_3540']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_3576']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+40h],', '3']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_t1_builder_add_contour']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3576']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_t1_builder_add_point1']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['5', 'dup(0CCh)']
endp
_t1_builder_close_contour proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_35BD']
jmp ['loc_36C0']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx]']
cmp ['eax,', '1']
jg ['short', 'loc_35D1']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_35E8']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
movsx ['edx,', 'word', 'ptr', '[ecx+edx*2-4]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
cmp ['edx,', '1']
jle ['short', 'loc_3668']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
lea ['edx,', '[ecx+edx*8-8]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx-1]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax]']
jnz ['short', 'loc_3668']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+4]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_3668']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '1']
jnz ['short', 'loc_3668']
mov ['ecx,', '[ebp+var_4]']
mov ['dx,', '[ecx+2]']
sub ['dx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+2],', 'dx']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
test ['edx,', 'edx']
jle ['short', 'loc_36C0']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
sub ['ecx,', '1']
cmp ['[ebp+var_8],', 'ecx']
jnz ['short', 'loc_36A5']
mov ['edx,', '[ebp+var_4]']
mov ['ax,', '[edx]']
sub ['ax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_4]']
mov ['ax,', '[edx+2]']
sub ['ax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+2],', 'ax']
jmp ['short', 'loc_36C0']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+0Ch]']
mov ['[ecx+edx*2-2],', 'ax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_t1_decrypt	proc near		
push ['ebp']
mov ['ebp,', 'esp']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_PS_Conv_EexecDecode']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['5', 'dup(0CCh)']
endp
_PS_Conv_Strtol	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['byte', 'ptr', '[ebp+var_C+3],', '0']
mov ['byte', 'ptr', '[ebp+var_C+2],', '0']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_4]']
jb ['short', 'loc_373A']
jmp ['$Bad$35']
cmp ['[ebp+arg_8],', '2']
jl ['short', 'loc_3746']
cmp ['[ebp+arg_8],', '24h']
jle ['short', 'loc_376F']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '2Ah']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_3764']
push ['offset', '$SG10600']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_3746']
xor ['eax,', 'eax']
jmp ['loc_3903']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '2Dh']
jz ['short', 'loc_3785']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '2Bh']
jnz ['short', 'loc_37B6']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '2Dh']
jnz ['short', 'loc_3796']
mov ['byte', 'ptr', '[ebp+var_14+1],', '1']
jmp ['short', 'loc_379A']
mov ['byte', 'ptr', '[ebp+var_14+1],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_14+1]']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'al']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_4]']
jnz ['short', 'loc_37B6']
jmp ['$Bad$35']
mov ['eax,', '7FFFFFFFh']
cdq
idiv ['[ebp+arg_8]']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '7FFFFFFFh']
cdq
idiv ['[ebp+arg_8]']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'dl']
jmp ['short', 'loc_37D9']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_3891']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '20h']
jz ['short', 'loc_3833']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '0Dh']
jz ['short', 'loc_3833']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Ah']
jz ['short', 'loc_3833']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '9']
jz ['short', 'loc_3833']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '0Ch']
jz ['short', 'loc_3833']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3833']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '80h']
jl ['short', 'loc_3835']
jmp ['short', 'loc_3891']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
and ['edx,', '7Fh']
mov ['al,', 'ds:_ft_char_table[edx]']
mov ['byte', 'ptr', '[ebp+var_14+2],', 'al']
movsx ['ecx,', 'byte', 'ptr', '[ebp+var_14+2]']
test ['ecx,', 'ecx']
jl ['short', 'loc_3858']
movsx ['edx,', 'byte', 'ptr', '[ebp+var_14+2]']
cmp ['edx,', '[ebp+arg_8]']
jl ['short', 'loc_385A']
jmp ['short', 'loc_3891']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_10]']
jg ['short', 'loc_3876']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_10]']
jnz ['short', 'loc_387C']
movsx ['edx,', 'byte', 'ptr', '[ebp+var_14+2]']
movsx ['eax,', 'byte', 'ptr', '[ebp+var_14+3]']
cmp ['edx,', 'eax']
jle ['short', 'loc_387C']
mov ['byte', 'ptr', '[ebp+var_C+2],', '1']
jmp ['short', 'loc_388C']
mov ['ecx,', '[ebp+var_8]']
imul ['ecx,', '[ebp+arg_8]']
movsx ['edx,', 'byte', 'ptr', '[ebp+var_14+2]']
add ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
jmp ['loc_37D0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C+2]']
test ['edx,', 'edx']
jz ['short', 'loc_38CA']
mov ['[ebp+var_8],', '7FFFFFFFh']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '2Ah']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_38C6']
push ['offset', '$SG10622']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_38A8']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+3]']
test ['eax,', 'eax']
jz ['short', 'loc_38DA']
mov ['ecx,', '[ebp+var_8]']
neg ['ecx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_3903']
mov ['edx,', '4']
imul ['eax,', 'edx,', '2Ah']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_38FD']
push ['offset', '$SG10628']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$Bad$35']
xor ['eax,', 'eax']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_PS_Conv_ToInt	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'edx']
push ['0Ah']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_PS_Conv_Strtol']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_3965']
xor ['eax,', 'eax']
jmp ['short', 'loc_39B5']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_39AA']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '23h']
jnz ['short', 'loc_39AA']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_PS_Conv_Strtol']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_39AA']
xor ['eax,', 'eax']
jmp ['short', 'loc_39B5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7']
dd ['offset', '$LN6']
endp
_PS_Conv_ToFixed proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_1C],', '1']
mov ['[ebp+var_1D],', '0']
mov ['[ebp+var_1E],', '0']
mov ['[ebp+var_1F],', '0']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_4]']
jb ['short', 'loc_3A38']
jmp ['$Bad$62']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '2Dh']
jz ['short', 'loc_3A4E']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '2Bh']
jnz ['short', 'loc_3A7F']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '2Dh']
jnz ['short', 'loc_3A5F']
mov ['[ebp+var_25],', '1']
jmp ['short', 'loc_3A63']
mov ['[ebp+var_25],', '0']
mov ['al,', '[ebp+var_25]']
mov ['[ebp+var_1D],', 'al']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_4]']
jnz ['short', 'loc_3A7F']
jmp ['$Bad$62']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '2Eh']
jz ['short', 'loc_3ACA']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_PS_Conv_ToInt']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_3AB2']
xor ['eax,', 'eax']
jmp ['loc_3DB8']
cmp ['[ebp+var_14],', '7FFFh']
jle ['short', 'loc_3AC1']
mov ['[ebp+var_1E],', '1']
jmp ['short', 'loc_3ACA']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '10h']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_3BBD']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '2Eh']
jnz ['loc_3BBD']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_3AF9']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['loc_3BBD']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '20h']
jz ['short', 'loc_3B54']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Dh']
jz ['short', 'loc_3B54']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '0Ah']
jz ['short', 'loc_3B54']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '9']
jz ['short', 'loc_3B54']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Ch']
jz ['short', 'loc_3B54']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
test ['eax,', 'eax']
jz ['short', 'loc_3B54']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '80h']
jl ['short', 'loc_3B56']
jmp ['short', 'loc_3BBD']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
and ['ecx,', '7Fh']
mov ['dl,', 'ds:_ft_char_table[ecx]']
mov ['[ebp+var_20],', 'dl']
movsx ['eax,', '[ebp+var_20]']
test ['eax,', 'eax']
jl ['short', 'loc_3B79']
movsx ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '0Ah']
jl ['short', 'loc_3B7B']
jmp ['short', 'loc_3BBD']
cmp ['[ebp+var_1C],', '0CCCCCCCh']
jge ['short', 'loc_3BB8']
cmp ['[ebp+var_18],', '0CCCCCCCh']
jge ['short', 'loc_3BB8']
imul ['edx,', '[ebp+var_18],', '0Ah']
movsx ['eax,', '[ebp+var_20]']
add ['edx,', 'eax']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_3BB1']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_3BB1']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
jmp ['short', 'loc_3BB8']
imul ['edx,', '[ebp+var_1C],', '0Ah']
mov ['[ebp+var_1C],', 'edx']
jmp ['loc_3AF0']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_3C36']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '65h']
jz ['short', 'loc_3BDE']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '45h']
jnz ['short', 'loc_3C36']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_PS_Conv_ToInt']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_3C0F']
xor ['eax,', 'eax']
jmp ['loc_3DB8']
cmp ['[ebp+var_24],', '3E8h']
jle ['short', 'loc_3C1E']
mov ['[ebp+var_1E],', '1']
jmp ['short', 'loc_3C36']
cmp ['[ebp+var_24],', '0FFFFFC18h']
jge ['short', 'loc_3C2D']
mov ['[ebp+var_1F],', '1']
jmp ['short', 'loc_3C36']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '[ebp+var_24]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_3C51']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_3C51']
xor ['eax,', 'eax']
jmp ['loc_3DB8']
movzx ['ecx,', '[ebp+var_1E]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3C5E']
jmp ['$Overflow$63']
movzx ['edx,', '[ebp+var_1F]']
test ['edx,', 'edx']
jz ['short', 'loc_3C6B']
jmp ['$Underflow$64']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_3CBC']
cmp ['[ebp+var_14],', '0CCCCCCCh']
jl ['short', 'loc_3C7F']
jmp ['$Overflow$63']
imul ['eax,', '[ebp+var_14],', '0Ah']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_18],', '0CCCCCCCh']
jl ['short', 'loc_3CAA']
cmp ['[ebp+var_1C],', '1']
jnz ['short', 'loc_3C9A']
jmp ['$Overflow$63']
mov ['eax,', '[ebp+var_1C]']
cdq
mov ['ecx,', '0Ah']
idiv ['ecx']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_3CB1']
imul ['edx,', '[ebp+var_18],', '0Ah']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_3C6B']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_3D0C']
mov ['eax,', '[ebp+var_14]']
cdq
mov ['ecx,', '0Ah']
idiv ['ecx']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_1C],', '0CCCCCCCh']
jge ['short', 'loc_3CE2']
imul ['edx,', '[ebp+var_1C],', '0Ah']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_3CF0']
mov ['eax,', '[ebp+var_18]']
cdq
mov ['ecx,', '0Ah']
idiv ['ecx']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_3D01']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_3D01']
jmp ['$Underflow$64']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '1']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_3CBC']
cmp ['[ebp+var_18],', '0']
jz ['short', '$Exit$65']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+var_14],', 'edx']
movzx ['eax,', '[ebp+var_1D]']
test ['eax,', 'eax']
jz ['short', 'loc_3D3E']
mov ['ecx,', '[ebp+var_14]']
neg ['ecx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_3DB8']
mov ['edx,', '4']
imul ['eax,', 'edx,', '2Ah']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_3D61']
push ['offset', '$SG10712']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$Bad$62']
xor ['eax,', 'eax']
jmp ['short', 'loc_3DB8']
mov ['[ebp+var_14],', '7FFFFFFFh']
mov ['edx,', '4']
imul ['eax,', 'edx,', '2Ah']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_3D8E']
push ['offset', '$SG10717']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_3D70']
jmp ['short', '$Exit$65']
mov ['edx,', '4']
imul ['eax,', 'edx,', '2Ah']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_3DB2']
push ['offset', '$SG10722']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$Underflow$64']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN61_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN60']
dd ['offset', '$LN59']
endp
_PS_Conv_ASCIIHexDecode	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_10],', '1']
mov ['eax,', '[ebp+arg_C]']
shl ['eax,', '1']
mov ['[ebp+arg_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_3E4A']
xor ['eax,', 'eax']
jmp ['loc_3F2C']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[ebp+var_4]']
cmp ['[ebp+arg_C],', 'ecx']
jbe ['short', 'loc_3E5E']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_C],', 'edx']
jmp ['short', 'loc_3E69']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_C]']
jnb ['loc_3F01']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '20h']
jz ['short', 'loc_3EA5']
cmp ['[ebp+var_14],', '0Dh']
jz ['short', 'loc_3EA5']
cmp ['[ebp+var_14],', '0Ah']
jz ['short', 'loc_3EA5']
cmp ['[ebp+var_14],', '9']
jz ['short', 'loc_3EA5']
cmp ['[ebp+var_14],', '0Ch']
jz ['short', 'loc_3EA5']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_3EA7']
jmp ['short', 'loc_3E60']
cmp ['[ebp+var_14],', '80h']
jb ['short', 'loc_3EB2']
jmp ['short', 'loc_3F01']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '7Fh']
movsx ['edx,', 'ds:_ft_char_table[ecx]']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '10h']
jb ['short', 'loc_3ECA']
jmp ['short', 'loc_3F01']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '4']
or ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
and ['ecx,', '100h']
jz ['short', 'loc_3EFC']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '[ebp+var_C]']
mov ['al,', 'byte', 'ptr', '[ebp+var_10]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_10],', '1']
jmp ['loc_3E60']
cmp ['[ebp+var_10],', '1']
jz ['short', 'loc_3F1E']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '4']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_C]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_PS_Conv_EexecDecode proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_4]']
jb ['short', 'loc_3F76']
xor ['eax,', 'eax']
jmp ['loc_3FFC']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+var_4]']
cmp ['[ebp+arg_C],', 'edx']
jbe ['short', 'loc_3F8A']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_C],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_3F9C']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_C]']
jnb ['short', 'loc_3FE4']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
xor ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_C]']
imul ['ecx,', 'eax,', '0CE6Dh']
add ['ecx,', '58BFh']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '[ebp+var_8]']
mov ['al,', 'byte', 'ptr', '[ebp+var_14]']
mov ['[edx],', 'al']
jmp ['short', 'loc_3F93']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['cx,', 'word', 'ptr', '[ebp+var_C]']
mov ['[eax],', 'cx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_shift_elements	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
sub ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_4055']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_C]']
jnb ['short', 'loc_408F']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+edx],', '0']
jz ['short', 'loc_408D']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+edx]']
add ['ecx,', '[ebp+var_4]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+eax],', 'ecx']
jmp ['short', 'loc_404C']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_reallocate_t1_table proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_40F3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_10]']
jmp ['short', 'loc_4148']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_413D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_shift_elements']
add ['esp,', '8']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_8],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4122']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+8],', 'eax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_3']
dd ['offset', '$LN8_3']
db ['0Ah', 'dup(0CCh)']
endp
_skip_comment	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_4]']
jnb ['short', 'loc_41CA']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Dh']
jz ['short', 'loc_41BD']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '0Ah']
jnz ['short', 'loc_41BF']
jmp ['short', 'loc_41CA']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_419F']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['6', 'dup(0CCh)']
endp
_skip_spaces	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_4]']
jnb ['short', 'loc_4272']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '20h']
jz ['short', 'loc_4267']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '0Dh']
jz ['short', 'loc_4267']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '0Ah']
jz ['short', 'loc_4267']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '9']
jz ['short', 'loc_4267']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '0Ch']
jz ['short', 'loc_4267']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_4267']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '25h']
jnz ['short', 'loc_4265']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_skip_comment']
add ['esp,', '8']
jmp ['short', 'loc_4267']
jmp ['short', 'loc_4272']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_41FF']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_4']
dd ['offset', '$LN8_4']
endp
_skip_literal_string proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '3']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_4]']
jnb ['loc_43D5']
mov ['eax,', '[ebp+var_4]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'cl']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_14+3]']
cmp ['eax,', '5Ch']
jnz ['loc_439F']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_4326']
jmp ['loc_43D5']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '28h']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+var_18],', '4Ch']
ja ['short', '$LN11_1']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'ds:$LN21_0[edx]']
jmp ['ds:$LN22_1[eax*4]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_439D']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_436C']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '3']
jnb ['short', 'loc_439D']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_439D']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '30h']
jl ['short', 'loc_4390']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '37h']
jle ['short', 'loc_4392']
jmp ['short', 'loc_439D']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_4363']
jmp ['short', 'loc_43D0']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_14+3]']
cmp ['eax,', '28h']
jnz ['short', 'loc_43B3']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_43D0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_14+3]']
cmp ['edx,', '29h']
jnz ['short', 'loc_43D0']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jnz ['short', 'loc_43D0']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_43D5']
jmp ['loc_42EF']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '1,', '1']
db ['0,', '1,', '1,', '1']
db ['1,', '1,', '0,', '1']
db ['1,', '1,', '0,', '1']
db ['1,', '1,', '1,', '1']
db ['1,', '1,', '0,', '1']
db ['1,', '1,', '0,', '1']
db ['0']
align ['4']
endp
_skip_string	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_44D3']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_skip_spaces']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_448D']
jmp ['short', 'loc_44D3']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '30h']
jl ['short', 'loc_44A3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '39h']
jle ['short', 'loc_44D1']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '41h']
jl ['short', 'loc_44B9']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '46h']
jle ['short', 'loc_44D1']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '61h']
jl ['short', 'loc_44CF']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '66h']
jle ['short', 'loc_44D1']
jmp ['short', 'loc_44D3']
jmp ['short', 'loc_4462']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_450F']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '3Eh']
jz ['short', 'loc_450F']
push ['offset', '$SG8423']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG8424']
push ['1B4h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_4518']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_0']
dd ['offset', '$LN12_1']
endp
_skip_procedure	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '7Bh']
jz ['short', 'loc_45AB']
push ['offset', '$SG8439']
push ['1CEh']
push ['offset', '$SG8440']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_4587']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_45C2']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['$end$24']
cmp ['[ebp+var_14],', '0']
jnz ['$end$24']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '25h']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+var_18],', '58h']
ja ['short', '$LN8_5']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'ds:$LN19[edx]']
jmp ['ds:$LN23_1[eax*4]']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', '$LN8_5']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
jnz ['short', 'loc_4622']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', '$end$24']
jmp ['short', '$LN8_5']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_skip_literal_string']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
jmp ['short', '$LN8_5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_skip_string']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
jmp ['short', '$LN8_5']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_skip_comment']
add ['esp,', '8']
jmp ['loc_45B9']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_4683']
push ['offset', '$SG8456']
push ['1F1h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN21_1']
dd ['offset', '$LN20']
dd ['offset', '$LN6_0,', 'offset', '$LN8_5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '2']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '5,', '5']
db ['5,', '5,', '3,', '5']
db ['4']
align ['4']
endp
_ps_tocoordarray proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_4]']
jb ['short', 'loc_476E']
jmp ['$Exit$22']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['[ebp+var_12],', '0']
movzx ['edx,', '[ebp+var_11]']
cmp ['edx,', '5Bh']
jnz ['short', 'loc_4789']
mov ['[ebp+var_12],', '5Dh']
jmp ['short', 'loc_4796']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '7Bh']
jnz ['short', 'loc_4796']
mov ['[ebp+var_12],', '7Dh']
movzx ['ecx,', '[ebp+var_12]']
test ['ecx,', 'ecx']
jz ['short', 'loc_47A7']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['$Exit$22']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_skip_spaces']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_47D0']
jmp ['$Exit$22']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
movzx ['eax,', '[ebp+var_12]']
cmp ['edx,', 'eax']
jnz ['short', 'loc_47E9']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', '$Exit$22']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_24],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_47FF']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[ebp+arg_8]']
jl ['short', 'loc_47FF']
jmp ['short', '$Exit$22']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_4813']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*2]']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_4819']
lea ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_28],', 'ecx']
push ['0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
call ['_PS_Conv_ToFixed']
add ['esp,', '0Ch']
sar ['eax,', '10h']
mov ['ecx,', '[ebp+var_28]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ebp+var_8]']
jnz ['short', 'loc_4847']
mov ['[ebp+var_10],', '0FFFFFFFFh']
jmp ['short', '$Exit$22']
jmp ['short', 'loc_4850']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
movzx ['ecx,', '[ebp+var_12]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_485A']
jmp ['short', '$Exit$22']
jmp ['loc_47A7']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN20_0']
dd ['offset', '$LN18']
dd ['0FFFFFFE4h,', '2']
dd ['offset', '$LN19_0']
db ['6', 'dup(0CCh)']
endp
_ps_tofixedarray proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_4]']
jb ['short', 'loc_48EE']
jmp ['$Exit$22_0']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_11],', 'cl']
mov ['[ebp+var_12],', '0']
movzx ['edx,', '[ebp+var_11]']
cmp ['edx,', '5Bh']
jnz ['short', 'loc_4909']
mov ['[ebp+var_12],', '5Dh']
jmp ['short', 'loc_4916']
movzx ['eax,', '[ebp+var_11]']
cmp ['eax,', '7Bh']
jnz ['short', 'loc_4916']
mov ['[ebp+var_12],', '7Dh']
movzx ['ecx,', '[ebp+var_12]']
test ['ecx,', 'ecx']
jz ['short', 'loc_4927']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['$Exit$22_0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['_skip_spaces']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_4950']
jmp ['$Exit$22_0']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
movzx ['eax,', '[ebp+var_12]']
cmp ['edx,', 'eax']
jnz ['short', 'loc_4969']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', '$Exit$22_0']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_24],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_497F']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[ebp+arg_8]']
jl ['short', 'loc_497F']
jmp ['short', '$Exit$22_0']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_4993']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_4999']
lea ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_PS_Conv_ToFixed']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_28]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_49C5']
mov ['[ebp+var_10],', '0FFFFFFFFh']
jmp ['short', '$Exit$22_0']
jmp ['short', 'loc_49CE']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
movzx ['edx,', '[ebp+var_12]']
test ['edx,', 'edx']
jnz ['short', 'loc_49D8']
jmp ['short', '$Exit$22_0']
jmp ['loc_4927']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN20_1']
dd ['offset', '$LN18_0']
dd ['0FFFFFFE4h,', '4']
dd ['offset', '$LN19_1']
db ['0Ah', 'dup(0CCh)']
endp
_ps_tobool	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '3']
cmp ['edx,', '[ebp+arg_4]']
jnb ['short', 'loc_4AC5']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
cmp ['eax,', '74h']
jnz ['short', 'loc_4AC5']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
cmp ['eax,', '72h']
jnz ['short', 'loc_4AC5']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
cmp ['eax,', '75h']
jnz ['short', 'loc_4AC5']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
cmp ['ecx,', '65h']
jnz ['short', 'loc_4AC5']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '5']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_4B40']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_4B40']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
cmp ['ecx,', '66h']
jnz ['short', 'loc_4B40']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
cmp ['ecx,', '61h']
jnz ['short', 'loc_4B40']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
cmp ['ecx,', '6Ch']
jnz ['short', 'loc_4B40']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
cmp ['edx,', '73h']
jnz ['short', 'loc_4B40']
mov ['eax,', '1']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
cmp ['edx,', '65h']
jnz ['short', 'loc_4B40']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '6']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_t1_decoder_parse_glyph	proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5C0h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_t1_decoder_parse_charstrings proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E0h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E0]']
mov ['ecx,', '38h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_2C],', '0']
mov ['[ebp+var_41],', '1']
lea ['ecx,', '[ebp+var_38]']
lea ['edx,', '[ebp+arg_0]']
xor ['ecx,', 'edx']
lea ['eax,', '[ebp+arg_4]']
xor ['ecx,', 'eax']
mov ['[ebp+var_38],', 'ecx']
mov ['ecx,', '[ebp+var_38]']
sar ['ecx,', '0Ah']
xor ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_38]']
sar ['edx,', '14h']
xor ['ecx,', 'edx']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_38],', 'ecx']
jnz ['short', 'loc_4BF4']
mov ['[ebp+var_38],', '7384h']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '70h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+470h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '474h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+540h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '474h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[edx+40h],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+48h]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+5D4h],', '0']
jnz ['short', 'loc_4C4C']
mov ['[ebp+var_A8],', '1']
jmp ['short', 'loc_4C56']
mov ['[ebp+var_A8],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5D0h],', '0']
jnz ['short', 'loc_4C6E']
mov ['[ebp+var_AC],', '1']
jmp ['short', 'loc_4C78']
mov ['[ebp+var_AC],', '0']
mov ['ecx,', '[ebp+var_A8]']
cmp ['ecx,', '[ebp+var_AC]']
jz ['short', 'loc_4C9D']
push ['offset', '$SG9290']
push ['194h']
push ['offset', '$SG9291']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_4C34']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5D0h],', '0']
jz ['short', 'loc_4CE2']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+5D4h],', '0']
jbe ['short', 'loc_4CE2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5D4h]']
shl ['eax,', '2']
push ['eax']
push ['0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+5D0h]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_4D00']
push ['offset', '$SG9297']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_4CE2']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_B0],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_B0]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_B0]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ecx],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'edx']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_4D86']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2D],', '0']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['loc_6A04']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+470h]']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_4C],', '0']
mov ['[ebp+var_50],', '0']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_4DD3']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_4DD3']
push ['offset', '$SG9309']
push ['1B6h']
push ['offset', '$SG9310']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4DB0']
movzx ['edx,', '[ebp+var_41]']
test ['edx,', 'edx']
jz ['short', 'loc_4E1A']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_4E12']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '70h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+470h]']
sub ['ecx,', 'edx']
sar ['ecx,', '2']
push ['ecx']
push ['offset', '$SG9316']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_4DDF']
mov ['[ebp+var_41],', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_B4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_B4]']
mov ['[ebp+var_B8],', 'eax']
mov ['ecx,', '[ebp+var_B8]']
sub ['ecx,', '1']
mov ['[ebp+var_B8],', 'ecx']
cmp ['[ebp+var_B8],', '0FEh']
ja ['$LN298']
mov ['edx,', '[ebp+var_B8]']
movzx ['eax,', 'ds:$LN374[edx]']
jmp ['ds:$LN380[eax*4]']
mov ['[ebp+var_4C],', '10h']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '12h']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '0Eh']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '9']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '6']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '0Dh']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '0Bh']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '5']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '16h']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '18h']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '2']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '1']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '1Ah']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '0Ah']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '7']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '0Ch']
jmp ['loc_51DB']
mov ['[ebp+var_4C],', '8']
jmp ['loc_51DB']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jbe ['short', 'loc_4F54']
push ['offset', '$SG9340']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_BC],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_BC]']
mov ['[ebp+var_C0],', 'edx']
cmp ['[ebp+var_C0],', '21h']
ja ['short', '$LN307']
mov ['eax,', '[ebp+var_C0]']
movzx ['ecx,', 'ds:$LN375[eax]']
jmp ['ds:$LN381[ecx*4]']
mov ['[ebp+var_4C],', '0Fh']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '13h']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '11h']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '3']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '4']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '14h']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '15h']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '17h']
jmp ['short', 'loc_5005']
mov ['[ebp+var_4C],', '19h']
jmp ['short', 'loc_5005']
mov ['edx,', '1']
imul ['eax,', 'edx,', '-1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
push ['edx']
push ['offset', '$SG9356']
call ['_FT_Message']
add ['esp,', '8']
jmp ['$Syntax_Error$384']
jmp ['loc_51DB']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '4']
cmp ['eax,', '[ebp+var_10]']
jbe ['short', 'loc_5027']
push ['offset', '$SG9359']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
shl ['ecx,', '18h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
or ['ecx,', 'eax']
mov ['[ebp+var_50],', 'ecx']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '4']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_50],', '7D00h']
jg ['short', 'loc_508F']
cmp ['[ebp+var_50],', '0FFFF8300h']
jge ['short', 'loc_50AC']
movzx ['edx,', '[ebp+var_2D]']
test ['edx,', 'edx']
jz ['short', 'loc_50A6']
push ['offset', '$SG9368']
call ['_FT_Message']
add ['esp,', '4']
jmp ['short', 'loc_50AA']
mov ['[ebp+var_2D],', '1']
jmp ['short', 'loc_50BD']
movzx ['eax,', '[ebp+var_2D]']
test ['eax,', 'eax']
jnz ['short', 'loc_50BD']
mov ['ecx,', '[ebp+var_50]']
shl ['ecx,', '10h']
mov ['[ebp+var_50],', 'ecx']
jmp ['loc_51DB']
mov ['edx,', '1']
imul ['eax,', 'edx,', '-1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
cmp ['edx,', '20h']
jl ['loc_51B9']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '-1']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
cmp ['eax,', '0F7h']
jge ['short', 'loc_510D']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
sub ['ecx,', '8Bh']
mov ['[ebp+var_50],', 'ecx']
jmp ['loc_51A6']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_10]']
jbe ['short', 'loc_5130']
push ['offset', '$SG9380']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-2']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
cmp ['ecx,', '0FBh']
jge ['short', 'loc_5177']
mov ['edx,', '1']
imul ['eax,', 'edx,', '-2']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
sub ['edx,', '0F7h']
shl ['edx,', '8']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '-1']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
lea ['edx,', '[edx+ecx+6Ch]']
mov ['[ebp+var_50],', 'edx']
jmp ['short', 'loc_51A6']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '-2']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
sub ['eax,', '0FBh']
shl ['eax,', '8']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
lea ['eax,', '[eax+edx+6Ch]']
neg ['eax']
mov ['[ebp+var_50],', 'eax']
movzx ['ecx,', '[ebp+var_2D]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_51B7']
mov ['edx,', '[ebp+var_50]']
shl ['edx,', '10h']
mov ['[ebp+var_50],', 'edx']
jmp ['short', 'loc_51DB']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '-1']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
push ['eax']
push ['offset', '$SG9387']
call ['_FT_Message']
add ['esp,', '8']
jmp ['$Syntax_Error$384']
cmp ['[ebp+var_2C],', '0']
jle ['short', 'loc_5210']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_C4],', 'ecx']
cmp ['[ebp+var_C4],', '0']
jz ['short', 'loc_5207']
cmp ['[ebp+var_C4],', '15h']
jle ['short', 'loc_5209']
cmp ['[ebp+var_C4],', '18h']
jle ['short', 'loc_5207']
jmp ['short', 'loc_5209']
jmp ['short', 'loc_5210']
mov ['[ebp+var_2C],', '0']
movzx ['edx,', '[ebp+var_2D]']
test ['edx,', 'edx']
jz ['short', 'loc_5235']
cmp ['[ebp+var_4C],', '0']
jz ['short', 'loc_5235']
cmp ['[ebp+var_4C],', '14h']
jz ['short', 'loc_5235']
push ['offset', '$SG9396']
call ['_FT_Message']
add ['esp,', '4']
mov ['[ebp+var_2D],', '0']
cmp ['[ebp+var_4C],', '0']
jnz ['loc_52E5']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '70h']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', 'eax']
sar ['ecx,', '2']
cmp ['ecx,', '100h']
jl ['short', 'loc_5267']
push ['offset', '$SG9399']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
movzx ['edx,', '[ebp+var_2D]']
test ['edx,', 'edx']
jz ['short', 'loc_5297']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_5291']
mov ['edx,', '[ebp+var_50]']
push ['edx']
push ['offset', '$SG9405']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_526F']
jmp ['short', 'loc_52C3']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_52BF']
mov ['eax,', '[ebp+var_50]']
sar ['eax,', '10h']
movsx ['ecx,', 'ax']
push ['ecx']
push ['offset', '$SG9413']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_5297']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_50]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_48]']
add ['edx,', '4']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+470h],', 'ecx']
jmp ['loc_69FF']
cmp ['[ebp+var_4C],', '15h']
jnz ['loc_5A6A']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_530D']
push ['offset', '$SG9422']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_52EF']
mov ['[ebp+var_41],', '1']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '70h']
mov ['eax,', '[ebp+var_48]']
sub ['eax,', 'edx']
sar ['eax,', '2']
cmp ['eax,', '2']
jge ['short', 'loc_532D']
jmp ['$Stack_Underflow$385']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '8']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
sar ['ecx,', '10h']
movsx ['edx,', 'cx']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+ecx]']
sar ['eax,', '10h']
movsx ['ecx,', 'ax']
mov ['[ebp+var_58],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '70h']
mov ['eax,', '[ebp+var_48]']
sub ['eax,', 'edx']
sar ['eax,', '2']
cmp ['[ebp+var_58],', 'eax']
jle ['short', 'loc_537C']
jmp ['$Stack_Underflow$385']
mov ['ecx,', '[ebp+var_58]']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_48]']
sub ['edx,', 'ecx']
mov ['[ebp+var_48],', 'edx']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_54]']
mov ['[ebp+var_C8],', 'eax']
cmp ['[ebp+var_C8],', '1Ch']
ja ['$LN205']
mov ['ecx,', '[ebp+var_C8]']
movzx ['edx,', 'ds:$LN376[ecx]']
jmp ['ds:$LN382[edx*4]']
cmp ['[ebp+var_58],', '3']
jz ['short', 'loc_53CD']
jmp ['$Unexpected_OtherSubr$386']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+578h],', '0']
jz ['short', 'loc_53E5']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+57Ch],', '7']
jz ['short', 'loc_53F7']
push ['offset', '$SG9439']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+eax],', 'edx']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax],', 'edx']
mov ['[ebp+var_28],', '2']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '0']
jz ['short', 'loc_5430']
jmp ['$Unexpected_OtherSubr$386']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+578h],', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+57Ch],', '0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_start_point']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_547E']
push ['6']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_check_points']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5483']
jmp ['$Fail$387']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '0']
jz ['short', 'loc_5493']
jmp ['$Unexpected_OtherSubr$386']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+578h],', '0']
jnz ['short', 'loc_54B1']
push ['offset', '$SG9449']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+57Ch]']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+57Ch]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+57Ch],', 'ecx']
cmp ['[ebp+var_5C],', '0']
jle ['short', 'loc_5516']
cmp ['[ebp+var_5C],', '7']
jge ['short', 'loc_5516']
cmp ['[ebp+var_5C],', '3']
jz ['short', 'loc_54F3']
cmp ['[ebp+var_5C],', '6']
jz ['short', 'loc_54F3']
mov ['[ebp+var_C9],', '0']
jmp ['short', 'loc_54FA']
mov ['[ebp+var_C9],', '1']
movzx ['eax,', '[ebp+var_C9]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_t1_builder_add_point']
add ['esp,', '10h']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '1']
jz ['short', 'loc_5526']
jmp ['$Unexpected_OtherSubr$386']
mov ['[ebp+var_28],', '1']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_5558']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+14h]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax+14h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_5A4D']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '70h']
mov ['[ebp+var_48],', 'edx']
jmp ['loc_5A4D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5B8h]']
mov ['[ebp+var_60],', 'ecx']
cmp ['[ebp+var_60],', '0']
jnz ['short', 'loc_558F']
push ['offset', '$SG9464']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
cmp ['[ebp+var_54],', '12h']
jnz ['short', 'loc_55A1']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_55AB']
mov ['[ebp+var_D0],', '0']
mov ['edx,', '[ebp+var_D0]']
mov ['eax,', '[ebp+var_54]']
lea ['ecx,', '[eax+edx-0Dh]']
mov ['[ebp+var_64],', 'ecx']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+var_64]']
imul ['eax,', '[edx]']
cmp ['[ebp+var_58],', 'eax']
jz ['short', 'loc_55DB']
push ['offset', '$SG9468']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['ecx,', '[ebp+var_64]']
mov ['edx,', '[ebp+var_48]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_74],', 'ecx']
mov ['[ebp+var_68],', '0']
jmp ['short', 'loc_55FF']
mov ['edx,', '[ebp+var_68]']
add ['edx,', '1']
mov ['[ebp+var_68],', 'edx']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_64]']
jnb ['short', 'loc_5685']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_74]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_78],', 'ecx']
mov ['[ebp+var_6C],', '1']
jmp ['short', 'loc_562A']
mov ['edx,', '[ebp+var_6C]']
add ['edx,', '1']
mov ['[ebp+var_6C],', 'edx']
mov ['eax,', '[ebp+var_60]']
mov ['ecx,', '[ebp+var_6C]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_566F']
mov ['edx,', '[ebp+var_70]']
mov ['eax,', '[edx]']
mov ['[ebp+var_D4],', 'eax']
mov ['ecx,', '[ebp+var_70]']
add ['ecx,', '4']
mov ['[ebp+var_70],', 'ecx']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[edx+88h]']
mov ['ecx,', '[ebp+var_6C]']
mov ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp+var_D4]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
add ['eax,', '[ebp+var_78]']
mov ['[ebp+var_78],', 'eax']
jmp ['short', 'loc_5621']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ebp+var_78]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '4']
mov ['[ebp+var_74],', 'eax']
jmp ['loc_55F6']
mov ['ecx,', '[ebp+var_64]']
mov ['[ebp+var_28],', 'ecx']
jmp ['loc_5A4D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5B8h]']
mov ['[ebp+var_80],', 'eax']
cmp ['[ebp+var_58],', '1']
jnz ['short', 'loc_56A8']
cmp ['[ebp+var_80],', '0']
jnz ['short', 'loc_56AD']
jmp ['$Unexpected_OtherSubr$386']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
sar ['ecx,', '10h']
movsx ['edx,', 'cx']
mov ['[ebp+var_7C],', 'edx']
cmp ['[ebp+var_7C],', '0']
jl ['short', 'loc_56DD']
mov ['eax,', '[ebp+var_80]']
mov ['ecx,', '[ebp+var_7C]']
add ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+5D4h]']
jbe ['short', 'loc_56E2']
jmp ['$Unexpected_OtherSubr$386']
mov ['eax,', '[ebp+var_80]']
mov ['ecx,', '[eax]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_80]']
mov ['eax,', '[edx+88h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5D0h]']
mov ['eax,', '[ebp+var_7C]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '2']
jz ['short', 'loc_571D']
jmp ['$Unexpected_OtherSubr$386']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+eax]']
mov ['edx,', '[ebp+var_48]']
add ['eax,', '[edx+ecx]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['[ecx+edx],', 'eax']
mov ['[ebp+var_28],', '1']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '2']
jz ['short', 'loc_575E']
jmp ['$Unexpected_OtherSubr$386']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['esi,', '[ebp+var_48]']
mov ['eax,', '[edx+eax]']
sub ['eax,', '[esi+ecx]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['[ecx+edx],', 'eax']
mov ['[ebp+var_28],', '1']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '2']
jz ['short', 'loc_579F']
jmp ['$Unexpected_OtherSubr$386']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ecx+eax]']
push ['edx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['[ecx+edx],', 'eax']
mov ['[ebp+var_28],', '1']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '2']
jnz ['short', 'loc_57F6']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
cmp ['dword', 'ptr', '[eax+edx],', '0']
jnz ['short', 'loc_57FB']
jmp ['$Unexpected_OtherSubr$386']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+ecx]']
push ['eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '4']
imul ['ecx,', 'edx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['[edx+ecx],', 'eax']
mov ['[ebp+var_28],', '1']
jmp ['loc_5A4D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5B8h]']
mov ['[ebp+var_88],', 'ecx']
cmp ['[ebp+var_58],', '2']
jnz ['short', 'loc_5859']
cmp ['[ebp+var_88],', '0']
jnz ['short', 'loc_585E']
jmp ['$Unexpected_OtherSubr$386']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
sar ['ecx,', '10h']
movsx ['edx,', 'cx']
mov ['[ebp+var_84],', 'edx']
cmp ['[ebp+var_84],', '0']
jl ['short', 'loc_5892']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_84]']
cmp ['ecx,', '[eax+5D4h]']
jb ['short', 'loc_5897']
jmp ['$Unexpected_OtherSubr$386']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5D0h]']
mov ['ecx,', '[ebp+var_84]']
mov ['esi,', '[ebp+var_48]']
mov ['eax,', '[esi+eax]']
mov ['[edx+ecx*4],', 'eax']
jmp ['loc_5A4D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5B8h]']
mov ['[ebp+var_90],', 'edx']
cmp ['[ebp+var_58],', '1']
jnz ['short', 'loc_58DA']
cmp ['[ebp+var_90],', '0']
jnz ['short', 'loc_58DF']
jmp ['$Unexpected_OtherSubr$386']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+ecx]']
sar ['eax,', '10h']
movsx ['ecx,', 'ax']
mov ['[ebp+var_8C],', 'ecx']
cmp ['[ebp+var_8C],', '0']
jl ['short', 'loc_5913']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8C]']
cmp ['eax,', '[edx+5D4h]']
jb ['short', 'loc_5918']
jmp ['$Unexpected_OtherSubr$386']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5D0h]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['esi,', '[ebp+var_8C]']
mov ['edx,', '[edx+esi*4]']
mov ['[eax+ecx],', 'edx']
mov ['[ebp+var_28],', '1']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '4']
jz ['short', 'loc_594F']
jmp ['$Unexpected_OtherSubr$386']
mov ['eax,', '4']
shl ['eax,', '1']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '3']
mov ['ecx,', '[ebp+var_48]']
mov ['esi,', '[ebp+var_48]']
mov ['eax,', '[ecx+eax]']
cmp ['eax,', '[esi+edx]']
jle ['short', 'loc_5988']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['esi,', '[ebp+var_48]']
mov ['ecx,', '[esi+ecx]']
mov ['[edx+eax],', 'ecx']
mov ['[ebp+var_28],', '1']
jmp ['loc_5A4D']
cmp ['[ebp+var_58],', '0']
jz ['short', 'loc_599F']
jmp ['$Unexpected_OtherSubr$386']
mov ['edx,', '[ebp+var_38]']
mov ['[ebp+var_94],', 'edx']
cmp ['[ebp+var_94],', '8000h']
jl ['short', 'loc_59C3']
mov ['eax,', '[ebp+var_94]']
add ['eax,', '1']
mov ['[ebp+var_94],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_94]']
mov ['[eax+edx],', 'ecx']
mov ['edx,', '10000h']
sub ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
call ['_FT_MulFix_i386']
add ['esp,', '8']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jnz ['short', 'loc_5A01']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '2873h']
mov ['[ebp+var_38],', 'ecx']
mov ['[ebp+var_28],', '1']
jmp ['short', 'loc_5A4D']
cmp ['[ebp+var_58],', '0']
jl ['short', '$Unexpected_OtherSubr$386']
cmp ['[ebp+var_54],', '0']
jl ['short', '$Unexpected_OtherSubr$386']
mov ['edx,', '[ebp+var_54]']
push ['edx']
mov ['eax,', '[ebp+var_58]']
push ['eax']
push ['offset', '$SG9533']
call ['_FT_Message']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_58]']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_5A4D']
mov ['edx,', '[ebp+var_54]']
push ['edx']
mov ['eax,', '[ebp+var_58]']
push ['eax']
push ['offset', '$SG9534']
call ['_FT_Message']
add ['esp,', '0Ch']
jmp ['$Syntax_Error$384']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_48]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_48]']
mov ['[ecx+470h],', 'edx']
jmp ['loc_69FF']
mov ['eax,', '[ebp+var_4C]']
mov ['ecx,', 'ds:_t1_args_count[eax*4]']
mov ['[ebp+var_98],', 'ecx']
cmp ['[ebp+var_98],', '0']
jge ['short', 'loc_5A9A']
push ['offset', '$SG9541']
push ['41Ch']
push ['offset', '$SG9542']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_5A7A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '70h']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', 'eax']
sar ['ecx,', '2']
cmp ['ecx,', '[ebp+var_98]']
jge ['short', 'loc_5AB9']
jmp ['$Stack_Underflow$385']
mov ['edx,', '[ebp+var_4C]']
mov ['[ebp+var_D8],', 'edx']
cmp ['[ebp+var_D8],', '14h']
jl ['short', 'loc_5AD8']
cmp ['[ebp+var_D8],', '18h']
jle ['short', 'loc_5AD6']
jmp ['short', 'loc_5AD8']
jmp ['short', 'loc_5B26']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '70h']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', 'eax']
sar ['ecx,', '2']
cmp ['ecx,', '[ebp+var_98]']
jz ['short', 'loc_5B26']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '0']
jl ['short', 'loc_5B22']
mov ['ecx,', '[ebp+var_98]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '70h']
mov ['eax,', '[ebp+var_48]']
sub ['eax,', 'edx']
sar ['eax,', '2']
push ['eax']
push ['offset', '$SG9555']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5AEE']
mov ['edx,', '[ebp+var_98]']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_48]']
sub ['eax,', 'edx']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_DC],', 'ecx']
mov ['edx,', '[ebp+var_DC]']
sub ['edx,', '1']
mov ['[ebp+var_DC],', 'edx']
cmp ['[ebp+var_DC],', '19h']
ja ['$LN9_5']
mov ['eax,', '[ebp+var_DC]']
jmp ['ds:$LN383[eax*4]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_5B87']
push ['offset', '$SG9565']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN185']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_close_contour']
add ['esp,', '4']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_5C0B']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+14h]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_5BCB']
jmp ['$Syntax_Error$384']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5BCh]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[edx+18h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5C0B']
jmp ['$Fail$387']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_FT_GlyphLoader_Add']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5D4h],', '0']
jbe ['loc_5CD1']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_5C48']
push ['offset', '$SG9576']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_5C2A']
mov ['[ebp+var_9C],', '0']
jmp ['short', 'loc_5C67']
mov ['ecx,', '[ebp+var_9C]']
add ['ecx,', '1']
mov ['[ebp+var_9C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_9C]']
cmp ['eax,', '[edx+5D4h]']
jnb ['short', 'loc_5CAF']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_5CA9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5D0h]']
mov ['edx,', '[ebp+var_9C]']
mov ['eax,', '[ecx+edx*4]']
push ['eax']
push ['offset', '$SG9584']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5C78']
jmp ['short', 'loc_5C58']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_5CCD']
push ['offset', '$SG9589']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5CAF']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_5CEF']
push ['offset', '$SG9594']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5CD1']
xor ['eax,', 'eax']
jmp ['loc_6A65']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_5D18']
push ['offset', '$SG9600']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$LN157']
mov ['edx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[edx+40h],', '1']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+20h]']
mov ['edx,', '[ebp+var_48]']
add ['eax,', '[edx+ecx]']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ecx+edx]']
mov ['[eax+28h],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+18h]']
mov ['eax,', '[ebp+var_48]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_18],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+46h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5DA2']
xor ['eax,', 'eax']
jmp ['loc_6A65']
jmp ['loc_69CD']
mov ['edx,', '4']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
sar ['ecx,', '10h']
movsx ['edx,', 'cx']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+ecx]']
sar ['eax,', '10h']
movsx ['ecx,', 'ax']
push ['ecx']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ecx+eax]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1operator_seac']
add ['esp,', '18h']
jmp ['loc_6A65']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_5E2C']
push ['offset', '$SG9612']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN150']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+40h],', '1']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+20h]']
mov ['ecx,', '[ebp+var_48]']
add ['edx,', '[ecx+eax]']
mov ['eax,', '[ebp+var_14]']
mov ['[eax+20h],', 'edx']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+24h]']
mov ['edx,', '[ebp+var_48]']
add ['eax,', '[edx+ecx]']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ecx+edx]']
mov ['[eax+28h],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+ecx]']
mov ['[edx+2Ch],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+18h]']
mov ['ecx,', '[ebp+var_48]']
add ['edx,', '[ecx+eax]']
mov ['[ebp+var_18],', 'edx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+1Ch]']
mov ['eax,', '[ebp+var_48]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx+46h]']
test ['edx,', 'edx']
jz ['short', 'loc_5ED5']
xor ['eax,', 'eax']
jmp ['loc_6A65']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_5EF8']
push ['offset', '$SG9619']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN144']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '3']
jz ['short', 'loc_5F0E']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+40h],', '2']
jnz ['short', 'loc_5F1A']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_close_contour']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+40h],', '1']
jmp ['loc_69CD']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_5F47']
push ['offset', '$SG9627']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN137']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_t1_builder_start_point']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5F6D']
jmp ['$Fail$387']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_18],', 'ecx']
jmp ['$Add_Line$388']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_5FA4']
push ['offset', '$SG9635']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$LN131']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '[ecx+eax]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+578h],', '0']
jnz ['short', 'loc_5FE0']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+40h],', '0']
jnz ['short', 'loc_5FD6']
jmp ['$Syntax_Error$384']
mov ['edx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[edx+40h],', '2']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_6003']
push ['offset', '$SG9643']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN124']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_start_point']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_603B']
push ['3']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_t1_builder_check_points']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_6040']
jmp ['$Fail$387']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_18],', 'ecx']
push ['0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'ecx']
push ['0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
mov ['edx,', '4']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ecx+eax]']
mov ['[ebp+var_1C],', 'edx']
push ['1']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_60F4']
push ['offset', '$SG9651']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN117']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_start_point']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_611A']
jmp ['$Fail$387']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_t1_builder_add_point1']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_6164']
jmp ['$Fail$387']
jmp ['loc_69CD']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_6187']
push ['offset', '$SG9659']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN110']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+578h],', '0']
jnz ['short', 'loc_61D7']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', 'loc_61CD']
jmp ['$Syntax_Error$384']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+40h],', '2']
jmp ['loc_69CD']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_61FA']
push ['offset', '$SG9667']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$LN103']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_start_point']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_6232']
push ['3']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_check_points']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_6237']
jmp ['$Fail$387']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_1C],', 'eax']
push ['0']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_t1_builder_add_point']
add ['esp,', '10h']
mov ['ecx,', '4']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'ecx']
push ['0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
mov ['edx,', '4']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '5']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ecx+eax]']
mov ['[ebp+var_1C],', 'edx']
push ['1']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_6313']
push ['offset', '$SG9675']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN96']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_start_point']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_634B']
push ['3']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_t1_builder_check_points']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_6350']
jmp ['$Fail$387']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'ecx']
push ['0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'ecx']
push ['0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
mov ['edx,', '4']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '[ecx+eax]']
mov ['[ebp+var_18],', 'edx']
push ['1']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_add_point']
add ['esp,', '10h']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_6404']
push ['offset', '$SG9683']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN89']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_t1_builder_start_point']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_642A']
jmp ['$Fail$387']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[edx+ecx]']
mov ['[ebp+var_1C],', 'eax']
jmp ['$Add_Line$388']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_6461']
push ['offset', '$SG9690']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN83']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[eax+edx]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+578h],', '0']
jnz ['short', 'loc_649D']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+40h],', '0']
jnz ['short', 'loc_6493']
jmp ['$Syntax_Error$384']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+40h],', '2']
jmp ['loc_69CD']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_64C0']
push ['offset', '$SG9698']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$LN76']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ecx+eax]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_48]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_48]']
add ['edx,', '4']
mov ['[ebp+var_48],', 'edx']
mov ['[ebp+var_2D],', '0']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_651F']
push ['offset', '$SG9705']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN71']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+ecx]']
sar ['eax,', '10h']
movsx ['ecx,', 'ax']
mov ['[ebp+var_A0],', 'ecx']
cmp ['[ebp+var_A0],', '0']
jl ['short', 'loc_6557']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_A0]']
cmp ['eax,', '[edx+554h]']
jl ['short', 'loc_6569']
push ['offset', '$SG9711']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '474h']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', 'ecx']
cdq
mov ['ecx,', '0Ch']
idiv ['ecx']
cmp ['eax,', '10h']
jl ['short', 'loc_6596']
push ['offset', '$SG9713']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+558h]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_A0]']
mov ['eax,', '[eax+edx*4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+55Ch],', '0']
jz ['short', 'loc_65EB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+55Ch]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+var_A0]']
add ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+8],', 'edx']
jmp ['short', 'loc_663D']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+550h],', '0']
jl ['short', 'loc_6608']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+550h]']
mov ['[ebp+var_E0],', 'eax']
jmp ['short', 'loc_6612']
mov ['[ebp+var_E0],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+var_E0]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+558h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_A0]']
mov ['edx,', '[edx+ecx*4+4]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_6663']
push ['offset', '$SG9717']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+540h],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_10],', 'eax']
jmp ['loc_69CD']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_66A4']
push ['offset', '$SG9723']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN60_0']
cmp ['[ebp+var_28],', '0']
jle ['short', 'loc_66BC']
mov ['ecx,', '[ebp+var_28]']
sub ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
jmp ['loc_69CD']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_66D4']
push ['offset', '$SG9726']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_48]']
add ['eax,', '4']
mov ['[ebp+var_48],', 'eax']
jmp ['loc_69CD']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_6709']
push ['offset', '$SG9732']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN53']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '474h']
cmp ['[ebp+var_8],', 'ecx']
ja ['short', 'loc_672D']
push ['offset', '$SG9734']
call ['_FT_Message']
add ['esp,', '4']
jmp ['$Syntax_Error$384']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '0Ch']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+540h],', 'edx']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_6776']
push ['offset', '$SG9740']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN47']
jmp ['loc_69CD']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_679D']
push ['offset', '$SG9746']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', '$LN42']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_67C7']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_48]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_69CD']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_67EA']
push ['offset', '$SG9753']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$LN36']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_6814']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_48]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
mov ['eax,', '[edx+10h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_69CD']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_6837']
push ['offset', '$SG9760']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN30']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_6880']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
add ['ecx,', '[ebp+var_20]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['[edx+eax],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_48]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_69CD']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_68A3']
push ['offset', '$SG9767']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$LN24_0']
cmp ['[ebp+var_40],', '0']
jz ['loc_693E']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_A4],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+ecx]']
add ['eax,', '[ebp+var_A4]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['[ecx+edx],', 'eax']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_48]']
mov ['ecx,', '[eax+edx]']
add ['ecx,', '[ebp+var_A4]']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_48]']
mov ['[eax+edx],', 'ecx']
mov ['ecx,', '4']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[edx+ecx]']
add ['eax,', '[ebp+var_A4]']
mov ['ecx,', '4']
shl ['ecx,', '2']
mov ['edx,', '[ebp+var_48]']
mov ['[edx+ecx],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_48]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_40]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax+10h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_69CD']
mov ['edx,', '4']
imul ['eax,', 'edx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_6961']
push ['offset', '$SG9775']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$LN18_1']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '4']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+578h],', '0']
jmp ['short', 'loc_69CD']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_69B4']
push ['offset', '$SG9781']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', '$LN13_1']
jmp ['short', 'loc_69CD']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
push ['offset', '$SG9783']
call ['_FT_Message']
add ['esp,', '8']
jmp ['short', '$Syntax_Error$384']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_48]']
mov ['[edx+470h],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_69F7']
push ['offset', '$SG9788']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_69D9']
mov ['[ebp+var_41],', '1']
jmp ['loc_4D8A']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '28h']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_6A22']
push ['offset', '$SG9793']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_6A04']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_6A65']
push ['offset', '$SG9794']
push ['60Eh']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
jmp ['short', 'loc_6A65']
push ['offset', '$SG9795']
push ['611h']
push ['0A1h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A1h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN379']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '0E0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN378']
dd ['offset', '$LN377']
align ['4']
dd ['offset', '$LN333,', 'offset', '$LN332,', 'offset', '$LN331,', 'offset', '$LN330']
dd ['offset', '$LN329,', 'offset', '$LN328,', 'offset', '$LN320,', 'offset', '$LN327']
dd ['offset', '$LN326,', 'offset', '$LN325,', 'offset', '$LN324,', 'offset', '$LN323']
dd ['offset', '$LN322,', 'offset', '$LN321,', 'offset', '$LN306,', 'offset', '$LN298']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '0Eh,', '0Fh,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '10h,', '11h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h']
db ['13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '13h,', '12h']
align ['4']
dd ['offset', '$LN315']
dd ['offset', '$LN314']
dd ['offset', '$LN313']
dd ['offset', '$LN312']
dd ['offset', '$LN311']
dd ['offset', '$LN310']
dd ['offset', '$LN309']
dd ['offset', '$LN308']
dd ['offset', '$LN307']
db ['9,', '9,', '3,', '4']
db ['9,', '9,', '9,', '9']
db ['5,', '9,', '9,', '9']
db ['6,', '7,', '9,', '9']
db ['9,', '9,', '9,', '9']
db ['9,', '9,', '9,', '9']
db ['9,', '9,', '9,', '9']
db ['9,', '8']
align ['4']
dd ['offset', '$LN257']
dd ['offset', '$LN253']
dd ['offset', '$LN249']
dd ['offset', '$LN246']
dd ['offset', '$LN245']
dd ['offset', '$LN236']
dd ['offset', '$LN231']
dd ['offset', '$LN229']
dd ['offset', '$LN227']
dd ['offset', '$LN225']
dd ['offset', '$LN222']
dd ['offset', '$LN217']
dd ['offset', '$LN212']
dd ['offset', '$LN209']
dd ['offset', '$LN205']
db ['0Fh,', '0Fh,', '0Fh,', '0Fh']
db ['0Fh,', '0Fh,', '0Fh,', '0Fh']
db ['4,', '4,', '5,', '5']
db ['5,', '5,', '5,', '6']
db ['7,', '8,', '9,', '0Ah']
db ['0Bh,', '0Ch,', '0Fh,', '0Dh']
db ['0Eh']
align ['4']
dd ['offset', '$LN157']
dd ['offset', '$LN152']
dd ['offset', '$LN150']
dd ['offset', '$LN144']
dd ['offset', '$LN137']
dd ['offset', '$LN131']
dd ['offset', '$LN124']
dd ['offset', '$LN117']
dd ['offset', '$LN110']
dd ['offset', '$LN103']
dd ['offset', '$LN96']
dd ['offset', '$LN89']
dd ['offset', '$LN83']
dd ['offset', '$LN47']
dd ['offset', '$LN42']
dd ['offset', '$LN36']
dd ['offset', '$LN30']
dd ['offset', '$LN24_0']
dd ['offset', '$LN76']
dd ['offset', '$LN9_5']
dd ['offset', '$LN71']
dd ['offset', '$LN60_0']
dd ['offset', '$LN53']
dd ['offset', '$LN18_1']
dd ['offset', '$LN13_1']
endp
_t1_decoder_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['5DCh']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+60h]']
mov ['[ebp+var_8],', 'edx']
push ['offset', '$SG9828']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_module_get_service']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_6D41']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_6D97']
push ['offset', '$SG9830']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG9831']
push ['636h']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['loc_6E23']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+544h],', 'ecx']
movzx ['edx,', '[ebp+arg_18]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1_builder_init']
add ['esp,', '14h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
mov ['[ecx+548h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx+54Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[eax+5BCh],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_14]']
mov ['[edx+5B8h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+5C0h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '5C4h']
mov ['ecx,', 'ds:_t1_decoder_funcs']
mov ['[eax],', 'ecx']
mov ['edx,', 'ds:off_16CC']
mov ['[eax+4],', 'edx']
mov ['ecx,', 'ds:off_16D0']
mov ['[eax+8],', 'ecx']
xor ['eax,', 'eax']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_t1_decoder_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1_builder_done']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_afm_parser_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['10h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_6E9A']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_6EE5']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN5']
dd ['offset', '$LN4_0']
db ['0Eh', 'dup(0CCh)']
endp
_afm_parser_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_6F3F']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_afm_parser_parse proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '64h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_64]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_10],', '0A0h']
mov ['[ebp+var_28],', '0']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_6FDE']
push ['offset', '$SG10535']
push ['35Ah']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_72FC']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_next_key']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_7020']
cmp ['[ebp+var_1C],', '10h']
jnz ['short', 'loc_7020']
mov ['esi,', 'esp']
push ['10h']
push ['offset', '$SG10538']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strncmp']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_703C']
push ['offset', '$SG10539']
push ['35Fh']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['loc_72FC']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_next_key']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['$Fail$42']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_afm_tokenize']
add ['esp,', '8']
mov ['[ebp+var_64],', 'eax']
cmp ['[ebp+var_64],', '31h']
ja ['$LN25']
mov ['edx,', '[ebp+var_64]']
movzx ['eax,', 'ds:$LN34[edx]']
jmp ['ds:$LN41_0[eax*4]']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_read_int']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_70A2']
jmp ['$Fail$42']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_70CD']
cmp ['[ebp+var_28],', '2']
jz ['short', 'loc_70CD']
push ['offset', '$SG10552']
push ['36Eh']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
mov ['[ebp+var_10],', 'eax']
jmp ['$Fail$42']
jmp ['$LN25']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['[ebp+ecx+var_50],', '4']
push ['1']
lea ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_afm_parser_read_vals']
add ['esp,', '0Ch']
cmp ['eax,', '1']
jz ['short', 'loc_70FE']
jmp ['$Fail$42']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['cl,', 'byte', 'ptr', '[ebp+edx+var_4C]']
mov ['[eax],', 'cl']
jmp ['$LN25']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['[ebp+eax+var_50],', '2']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['[ebp+ecx+var_50],', '2']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['[ebp+edx+var_50],', '2']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['[ebp+ecx+var_50],', '2']
push ['4']
lea ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_afm_parser_read_vals']
add ['esp,', '0Ch']
cmp ['eax,', '4']
jz ['short', 'loc_716F']
jmp ['$Fail$42']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_4C]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_4C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_4C]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+eax+var_4C]']
mov ['[ecx+10h],', 'edx']
jmp ['$LN25']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['[ebp+ecx+var_50],', '2']
push ['1']
lea ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_afm_parser_read_vals']
add ['esp,', '0Ch']
cmp ['eax,', '1']
jz ['short', 'loc_71E7']
jmp ['$Fail$42']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_4C]']
mov ['[eax+14h],', 'ecx']
jmp ['$LN25']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['[ebp+eax+var_50],', '2']
push ['1']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_read_vals']
add ['esp,', '0Ch']
cmp ['eax,', '1']
jz ['short', 'loc_7227']
jmp ['short', '$Fail$42']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+ecx+var_4C]']
mov ['[edx+18h],', 'eax']
jmp ['short', '$LN25']
mov ['[ebp+var_5C],', '0']
lea ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_read_int']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_7258']
jmp ['short', '$Fail$42']
push ['11h']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_afm_parser_skip_section']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_727B']
mov ['eax,', '[ebp+var_10]']
jmp ['loc_72FC']
jmp ['short', '$LN25']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parse_kern_data']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', '$LN8_6']
jmp ['short', '$Fail$42']
xor ['eax,', 'eax']
jmp ['short', 'loc_72FC']
jmp ['loc_703C']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
xor ['ecx,', 'ecx']
jnz ['short', '$Fail$42']
mov ['edx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[edx+20h],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+24h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_72C8']
mov ['edx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[edx+28h],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN40_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '64h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN39_0']
dd ['offset', '$LN35']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN36_0']
dd ['0FFFFFFB0h,', '20h']
dd ['offset', '$LN37']
dd ['0FFFFFFA4h,', '4']
dd ['offset', '$LN38_0']
align ['10h']
dd ['offset', '$LN15_0']
dd ['offset', '$LN8_6']
dd ['offset', '$LN19_2']
dd ['offset', '$LN21_4']
dd ['offset', '$LN24_1']
dd ['offset', '$LN13_2']
dd ['offset', '$LN10_5']
dd ['offset', '$LN25']
db ['8,', '8,', '8,', '8']
db ['8,', '8,', '8,', '8']
db ['8,', '8,', '1,', '8']
db ['8,', '8,', '8,', '8']
db ['2,', '8,', '8,', '8']
db ['8,', '8,', '3,', '8']
db ['8,', '8,', '4,', '8']
db ['8,', '8,', '8,', '8']
db ['8,', '8,', '8,', '8']
db ['5,', '8,', '8,', '8']
db ['8,', '6,', '8,', '8']
db ['8,', '7']
db ['6', 'dup(0CCh)']
endp
_afm_parser_read_vals proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_8],', '5']
jbe ['short', 'loc_7409']
xor ['eax,', 'eax']
jmp ['loc_75A1']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_741B']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['loc_759E']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*8]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_744C']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_afm_stream_read_string']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_745B']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_afm_stream_read_one']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_7466']
jmp ['loc_759E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_30],', 'ecx']
cmp ['[ebp+var_30],', '5']
ja ['loc_7599']
mov ['edx,', '[ebp+var_30]']
jmp ['ds:$LN26[edx*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_20],', 'ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_ft_mem_qalloc']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx+4],', 'eax']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_74DF']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_18]']
mov ['byte', 'ptr', '[edx+eax],', '0']
jmp ['loc_7599']
push ['0']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_18]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['_PS_Conv_ToFixed']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ecx+4],', 'eax']
jmp ['loc_7599']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_18]']
push ['edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['_PS_Conv_ToInt']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_7599']
cmp ['[ebp+var_18],', '4']
jnz ['short', 'loc_754C']
mov ['esi,', 'esp']
push ['4']
push ['offset', '$SG10311']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__strncmp']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_754C']
mov ['[ebp+var_31],', '1']
jmp ['short', 'loc_7550']
mov ['[ebp+var_31],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['cl,', '[ebp+var_31]']
mov ['[eax+4],', 'cl']
jmp ['short', 'loc_7599']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jz ['short', 'loc_758F']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_7599']
mov ['edx,', '[ebp+var_1C]']
mov ['dword', 'ptr', '[edx+4],', '0']
jmp ['loc_7412']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN24_2']
dd ['offset', '$LN22_3']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN23_2']
align ['10h']
dd ['offset', '$LN8_7']
dd ['offset', '$LN6_2']
dd ['offset', '$LN5_0']
dd ['offset', '$LN4_1']
dd ['offset', '$LN3_0']
db ['4', 'dup(0CCh)']
endp
_afm_parser_next_key proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_7696']
mov ['eax,', '1']
test ['eax,', 'eax']
jz ['short', 'loc_7694']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '2']
jge ['short', 'loc_765D']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_afm_stream_read_string']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_afm_stream_read_one']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_7690']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+0Ch],', '3']
jge ['short', 'loc_7690']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '2']
jl ['short', 'loc_7690']
jmp ['short', 'loc_763F']
jmp ['short', 'loc_7694']
jmp ['short', 'loc_763F']
jmp ['short', 'loc_76ED']
mov ['ecx,', '1']
test ['ecx,', 'ecx']
jz ['short', 'loc_76ED']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+0Ch],', '1']
jge ['short', 'loc_76B6']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_afm_stream_read_one']
add ['esp,', '4']
jmp ['short', 'loc_769F']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_afm_stream_read_one']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_76E9']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '3']
jge ['short', 'loc_76E9']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '1']
jl ['short', 'loc_76E9']
jmp ['short', 'loc_7696']
jmp ['short', 'loc_76ED']
jmp ['short', 'loc_7696']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_7718']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7709']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
sub ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_7710']
mov ['[ebp+var_C],', '0']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_t1_lookup_glyph_by_stdcharcode	proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+544h]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_775F']
cmp ['[ebp+arg_4],', '0FFh']
jle ['short', 'loc_7767']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_7804']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+14h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_779E']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax+548h]']
jnb ['short', 'loc_7801']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+54Ch]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_77FF']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_10]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx+edx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_77FF']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_77FF']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_7804']
jmp ['short', 'loc_7795']
or ['eax,', '0FFFFFFFFh']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_t1operator_seac proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+5D8h]']
test ['eax,', 'eax']
jz ['short', 'loc_7877']
push ['offset', '$SG9229']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG9230']
push ['0D0h']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
jmp ['loc_7B60']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+46h]']
test ['edx,', 'edx']
jz ['short', 'loc_78B0']
push ['offset', '$SG9232']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG9233']
push ['0D6h']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
jmp ['loc_7B60']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '[eax+20h]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+54Ch],', '0']
jnz ['short', 'loc_7905']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[eax+80h]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jnz ['short', 'loc_7905']
push ['offset', '$SG9235']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG9236']
push ['0E7h']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
jmp ['loc_7B60']
mov ['edx,', '[ebp+var_30]']
mov ['eax,', '[edx+80h]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jz ['short', 'loc_7922']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_7948']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_t1_lookup_glyph_by_stdcharcode']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1_lookup_glyph_by_stdcharcode']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_7954']
cmp ['[ebp+var_C],', '0']
jge ['short', 'loc_7982']
push ['offset', '$SG9241']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG9242']
push ['0FCh']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
jmp ['loc_7B60']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+45h]']
test ['edx,', 'edx']
jz ['loc_7A74']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx+9Ch]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
push ['2']
mov ['edx,', '[ebp+var_38]']
push ['edx']
call ['_FT_GlyphLoader_CheckSubGlyphs']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_79C4']
jmp ['$Exit$18']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+58h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['ecx,', '202h']
mov ['edx,', '[ebp+var_3C]']
mov ['[edx+4],', 'cx']
mov ['eax,', '[ebp+var_3C]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_3C]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '20h']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '2']
mov ['eax,', '[ebp+var_3C]']
mov ['[eax+4],', 'dx']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_RoundFix']
add ['esp,', '4']
sar ['eax,', '10h']
mov ['edx,', '[ebp+var_3C]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['_FT_RoundFix']
add ['esp,', '4']
sar ['eax,', '10h']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_34]']
mov ['dword', 'ptr', '[edx+80h],', '2']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+34h]']
mov ['[eax+84h],', 'edx']
mov ['eax,', '[ebp+var_34]']
mov ['dword', 'ptr', '[eax+48h],', '636F6D70h']
mov ['ecx,', '[ebp+var_38]']
mov ['dword', 'ptr', '[ecx+54h],', '2']
jmp ['$Exit$18']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_FT_GlyphLoader_Prepare']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+5D8h],', '1']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1_decoder_parse_glyph']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+5D8h],', '0']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7AB5']
jmp ['$Exit$18']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['ecx,', '[edx+24h]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['ecx,', '[edx+2Ch]']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+20h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+24h],', '0']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+18h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+1Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+5D8h],', '1']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_t1_decoder_parse_glyph']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+5D8h],', '0']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7B2B']
jmp ['short', '$Exit$18']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+20h],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[eax+24h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_28]']
mov ['[eax+28h],', 'ecx']
mov ['edx,', '[ebp+var_24]']
mov ['[eax+2Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN16_1']
dd ['offset', '$LN14_2']
dd ['0FFFFFFD8h,', '8']
dd ['offset', '$LN15_1']
db ['7', 'dup(0CCh)']
endp
_t1_cmap_std_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1E4h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1A0h]']
mov ['[ecx+18h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1A4h]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['[ecx+14h],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_7C26']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_7C2F']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jnz ['short', 'loc_7C55']
push ['offset', '$SG9854']
push ['30h']
push ['offset', '$SG9855']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_7C38']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['5', 'dup(0CCh)']
endp
_t1_cmap_std_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0']
pop ['ebp']
retn
align ['4']
endp
_t1_cmap_std_char_index	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_4],', '100h']
jnb ['loc_7D68']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_7D08']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx+18h]']
jnb ['short', 'loc_7D68']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_7D66']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_10]']
movsx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_7D66']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_7D66']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_7D68']
jmp ['short', 'loc_7CFF']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_t1_cmap_std_char_next proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '100h']
jnb ['short', 'loc_7DD1']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_t1_cmap_std_char_index']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7DC6']
jmp ['short', '$Exit$6']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_7DA2']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_t1_cmap_standard_init proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_t1_cmap_std_init']
add ['esp,', '8']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_t1_cmap_expert_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_t1_cmap_std_init']
add ['esp,', '8']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_t1_cmap_custom_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '174h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ecx+10h],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['[edx+18h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+18h],', '0']
jnz ['short', 'loc_7ED4']
push ['offset', '$SG9940']
push ['0C4h']
push ['offset', '$SG9941']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_7EB4']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+4]']
cmp ['eax,', '[edx+8]']
jle ['short', 'loc_7EFD']
push ['offset', '$SG9946']
push ['0C5h']
push ['offset', '$SG9947']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_7ED8']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_t1_cmap_custom_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '0']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_t1_cmap_custom_char_index proc	near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+10h]']
jb ['short', 'loc_7F8A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+14h]']
cmp ['[ebp+arg_4],', 'eax']
jnb ['short', 'loc_7F8A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_t1_cmap_custom_char_next proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+10h]']
jnb ['short', 'loc_7FDC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_7FE7']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+14h]']
cmp ['[ebp+var_8],', 'eax']
jnb ['short', 'loc_8012']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8010']
jmp ['short', '$Exit$8']
jmp ['short', 'loc_7FDE']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['4', 'dup(0CCh)']
endp
_psaux_get_glyph_name proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1A4h]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+edx*4]']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_t1_cmap_unicode_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+1E4h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
push ['0']
push ['offset', '_psaux_get_glyph_name']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1A0h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_t1_cmap_unicode_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_80F1']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_t1_cmap_unicode_char_index proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1E4h]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_t1_cmap_unicode_char_next proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1E4h]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_afm_stream_skip_spaces	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0Ch],', '1']
jl ['short', 'loc_821A']
mov ['eax,', '3Bh']
jmp ['loc_82AA']
mov ['ecx,', '1']
test ['ecx,', 'ecx']
jz ['short', 'loc_8267']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_824A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_8251']
mov ['[ebp+var_8],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '20h']
jz ['short', 'loc_8265']
cmp ['[ebp+var_4],', '9']
jz ['short', 'loc_8265']
jmp ['short', 'loc_8267']
jmp ['short', 'loc_821A']
cmp ['[ebp+var_4],', '0Dh']
jz ['short', 'loc_8273']
cmp ['[ebp+var_4],', '0Ah']
jnz ['short', 'loc_827F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '2']
jmp ['short', 'loc_82A7']
cmp ['[ebp+var_4],', '3Bh']
jnz ['short', 'loc_8291']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '1']
jmp ['short', 'loc_82A7']
cmp ['[ebp+var_4],', '0FFFFFFFFh']
jz ['short', 'loc_829D']
cmp ['[ebp+var_4],', '1Ah']
jnz ['short', 'loc_82A7']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '3']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_afm_stream_read_one proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_afm_stream_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '1']
jl ['short', 'loc_82F3']
xor ['eax,', 'eax']
jmp ['loc_839D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '1']
test ['ecx,', 'ecx']
jz ['loc_839A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_8332']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_8339']
mov ['[ebp+var_C],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '20h']
jz ['short', 'loc_834B']
cmp ['[ebp+var_8],', '9']
jnz ['short', 'loc_834F']
jmp ['short', 'loc_839A']
jmp ['short', 'loc_8395']
cmp ['[ebp+var_8],', '0Dh']
jz ['short', 'loc_835B']
cmp ['[ebp+var_8],', '0Ah']
jnz ['short', 'loc_8369']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '2']
jmp ['short', 'loc_839A']
jmp ['short', 'loc_8395']
cmp ['[ebp+var_8],', '3Bh']
jnz ['short', 'loc_837D']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '1']
jmp ['short', 'loc_839A']
jmp ['short', 'loc_8395']
cmp ['[ebp+var_8],', '0FFFFFFFFh']
jz ['short', 'loc_8389']
cmp ['[ebp+var_8],', '1Ah']
jnz ['short', 'loc_8395']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '3']
jmp ['short', 'loc_839A']
jmp ['loc_82FE']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_afm_stream_read_string	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_afm_stream_skip_spaces']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '2']
jl ['short', 'loc_83E0']
xor ['eax,', 'eax']
jmp ['short', 'loc_845F']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '1']
test ['ecx,', 'ecx']
jz ['short', 'loc_845C']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_841B']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_8422']
mov ['[ebp+var_C],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0Dh']
jz ['short', 'loc_8434']
cmp ['[ebp+var_8],', '0Ah']
jnz ['short', 'loc_8442']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '2']
jmp ['short', 'loc_845C']
jmp ['short', 'loc_845A']
cmp ['[ebp+var_8],', '0FFFFFFFFh']
jz ['short', 'loc_844E']
cmp ['[ebp+var_8],', '1Ah']
jnz ['short', 'loc_845A']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '3']
jmp ['short', 'loc_845C']
jmp ['short', 'loc_83EB']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_afm_tokenize	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_849A']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '4Ah']
jge ['short', 'loc_851B']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', 'ds:_afm_key_table[ecx*4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_8516']
jmp ['short', 'loc_84C2']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '4Ah']
jge ['short', 'loc_8516']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', 'ds:_afm_key_table[ecx*4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jz ['short', 'loc_84E6']
mov ['eax,', '4Bh']
jmp ['short', 'loc_8520']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', 'ds:_afm_key_table[edx*4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strncmp']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_8514']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_8520']
jmp ['short', 'loc_84B9']
jmp ['loc_8491']
mov ['eax,', '4Bh']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_afm_parser_read_int proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', '3']
push ['1']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_afm_parser_read_vals']
add ['esp,', '0Ch']
cmp ['eax,', '1']
jnz ['short', 'loc_857F']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
xor ['eax,', 'eax']
jmp ['short', 'loc_859B']
jmp ['short', 'loc_859B']
push ['offset', '$SG10391']
push ['245h']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6_3']
dd ['offset', '$LN5_1']
endp
_afm_parse_track_kern proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '64h']
push ['edi']
lea ['edi,', '[ebp+var_64]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_20],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '20h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_afm_parser_read_int']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_8628']
jmp ['$Fail$23']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+20h],', '0']
jz ['short', 'loc_866A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_24],', 'eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+20h]']
push ['eax']
push ['0']
push ['14h']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+1Ch],', 'eax']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_866A']
mov ['eax,', '[ebp+var_2C]']
jmp ['loc_87DD']
lea ['eax,', '[ebp+var_18]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_afm_parser_next_key']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['$Fail$23']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_afm_tokenize']
add ['esp,', '8']
mov ['[ebp+var_64],', 'eax']
mov ['ecx,', '[ebp+var_64]']
sub ['ecx,', '14h']
mov ['[ebp+var_64],', 'ecx']
cmp ['[ebp+var_64],', '37h']
ja ['$LN1']
mov ['edx,', '[ebp+var_64]']
movzx ['eax,', 'ds:$LN16_2[edx]']
jmp ['ds:$LN22_4[eax*4]']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[edx+20h]']
jl ['short', 'loc_86D9']
jmp ['$Fail$23']
imul ['ecx,', '[ebp+var_20],', '14h']
mov ['edx,', '[ebp+var_8]']
add ['ecx,', '[edx+1Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['[ebp+ecx+var_5C],', '3']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['[ebp+edx+var_5C],', '2']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['[ebp+eax+var_5C],', '2']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['[ebp+edx+var_5C],', '2']
mov ['eax,', '8']
shl ['eax,', '2']
mov ['[ebp+eax+var_5C],', '2']
push ['5']
lea ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_read_vals']
add ['esp,', '0Ch']
cmp ['eax,', '5']
jz ['short', 'loc_874E']
jmp ['short', '$Fail$23']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+ecx+var_58]']
mov ['[edx],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+ecx+var_58]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+ecx+var_58]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_58]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_58]']
mov ['[eax+10h],', 'ecx']
jmp ['short', 'loc_87BC']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+20h],', 'edx']
xor ['eax,', 'eax']
jmp ['short', 'loc_87DD']
jmp ['short', 'loc_87BC']
jmp ['short', '$Fail$23']
jmp ['loc_866A']
push ['offset', '$SG10423']
push ['28Eh']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '64h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN20_2']
dd ['offset', '$LN17_1']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN18_2']
dd ['0FFFFFFA4h,', '28h']
dd ['offset', '$LN19_3']
align ['4']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['1,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '2']
db ['8', 'dup(0CCh)']
endp
_afm_compare_kern_pairs	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
shl ['eax,', '10h']
mov ['ecx,', '[ebp+var_4]']
or ['eax,', '[ecx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
shl ['eax,', '10h']
mov ['ecx,', '[ebp+var_8]']
or ['eax,', '[ecx+4]']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_10]']
jbe ['short', 'loc_88F2']
mov ['eax,', '1']
jmp ['short', 'loc_8903']
jmp ['short', 'loc_8903']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_10]']
jnb ['short', 'loc_8901']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_8903']
jmp ['short', 'loc_8903']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['5', 'dup(0CCh)']
endp
_afm_parse_kern_pairs proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '68h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_68]']
mov ['ecx,', '1Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_20],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '28h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_afm_parser_read_int']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_8959']
jmp ['$Fail$27']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+28h],', '0']
jz ['short', 'loc_899B']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_24],', 'eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+28h]']
push ['eax']
push ['0']
push ['10h']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+24h],', 'eax']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_899B']
mov ['eax,', '[ebp+var_2C]']
jmp ['loc_8B60']
lea ['eax,', '[ebp+var_18]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_afm_parser_next_key']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['$Fail$27']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_afm_tokenize']
add ['esp,', '8']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_64],', 'ecx']
mov ['edx,', '[ebp+var_64]']
sub ['edx,', '14h']
mov ['[ebp+var_64],', 'edx']
cmp ['[ebp+var_64],', '37h']
ja ['$LN1_0']
mov ['eax,', '[ebp+var_64]']
movzx ['ecx,', 'ds:$LN20_3[eax]']
jmp ['ds:$LN26_0[ecx*4]']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[eax+28h]']
jl ['short', 'loc_8A10']
jmp ['$Fail$27']
mov ['edx,', '[ebp+var_20]']
shl ['edx,', '4']
mov ['eax,', '[ebp+var_8]']
add ['edx,', '[eax+24h]']
mov ['[ebp+var_C],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['[ebp+edx+var_5C],', '5']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['[ebp+eax+var_5C],', '5']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['[ebp+ecx+var_5C],', '3']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['[ebp+eax+var_5C],', '3']
push ['4']
lea ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_read_vals']
add ['esp,', '0Ch']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '3']
jge ['short', 'loc_8A7E']
jmp ['$Fail$27']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+ecx+var_58]']
mov ['[edx],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+ecx+var_58]']
mov ['[edx+4],', 'eax']
cmp ['[ebp+var_34],', '25h']
jnz ['short', 'loc_8AC4']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_58]']
mov ['[eax+0Ch],', 'ecx']
jmp ['short', 'loc_8B02']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+edx+var_58]']
mov ['[eax+8],', 'ecx']
cmp ['[ebp+var_34],', '22h']
jnz ['short', 'loc_8AF2']
cmp ['[ebp+var_38],', '4']
jnz ['short', 'loc_8AF2']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+eax+var_58]']
mov ['[ebp+var_68],', 'ecx']
jmp ['short', 'loc_8AF9']
mov ['[ebp+var_68],', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_68]']
mov ['[edx+0Ch],', 'eax']
jmp ['short', 'loc_8B3F']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+28h],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '_afm_compare_kern_pairs']
push ['10h']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+24h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__qsort']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['eax,', 'eax']
jmp ['short', 'loc_8B60']
jmp ['short', 'loc_8B3F']
jmp ['short', '$Fail$27']
jmp ['loc_899B']
push ['offset', '$SG10478']
push ['302h']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '68h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN24_3']
dd ['offset', '$LN21_6']
dd ['0FFFFFFD4h,', '4']
dd ['offset', '$LN22_5']
dd ['0FFFFFFA4h,', '20h']
dd ['offset', '$LN23_3']
align ['10h']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '1,', '3']
db ['1,', '1,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '3']
db ['3,', '3,', '3,', '2']
db ['4', 'dup(0CCh)']
endp
_afm_parse_kern_data proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_10]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_afm_parser_next_key']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', '$Fail$19']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_afm_tokenize']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '14h']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+var_18],', '37h']
ja ['short', '$LN1_1']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'ds:$LN14_3[edx]']
jmp ['ds:$LN18_3[eax*4]']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_afm_parse_track_kern']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8CA1']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_8CE8']
jmp ['short', 'loc_8CC7']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parse_kern_pairs']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8CBD']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_8CE8']
jmp ['short', 'loc_8CC7']
xor ['eax,', 'eax']
jmp ['short', 'loc_8CE8']
jmp ['short', 'loc_8CC7']
jmp ['short', '$Fail$19']
jmp ['loc_8C39']
push ['offset', '$SG10501']
push ['32Ch']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN16_3']
dd ['offset', '$LN15_2']
dd ['offset', '$LN1_1']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '1,', '1']
db ['4,', '2,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '4']
db ['4,', '4,', '4,', '3']
endp
_afm_parser_skip_section proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
cmp ['[ebp+var_18],', '0']
jbe ['short', 'loc_8DAA']
mov ['[ebp+var_1C],', '1']
jmp ['short', 'loc_8DB1']
mov ['[ebp+var_1C],', '0']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_8DD4']
push ['0']
push ['1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_afm_parser_next_key']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_8DD2']
jmp ['short', '$Fail$15']
jmp ['short', 'loc_8D8C']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_afm_parser_next_key']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', '$Fail$15']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_afm_tokenize']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+arg_8]']
jz ['short', 'loc_8E10']
cmp ['[ebp+var_14],', '14h']
jnz ['short', 'loc_8E14']
xor ['eax,', 'eax']
jmp ['short', 'loc_8E32']
jmp ['short', 'loc_8DD4']
push ['offset', '$SG10524']
push ['34Ah']
push ['0A0h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0A0h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_3']
dd ['offset', '$LN12_2']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_memcpy:near']
extrn ['_memset:near']
extrn ['_strcmp:near']
extrn ['__imp__strncmp:near']
extrn ['__imp__qsort:near']
extrn ['_FT_DivFix:near']
extrn ['_FT_RoundFix:near']
extrn ['_ft_mem_alloc:near']
extrn ['_ft_mem_qalloc:near']
extrn ['_ft_mem_realloc:near']
extrn ['_ft_mem_free:near']
extrn ['_FT_GlyphLoader_Rewind:near']
extrn ['_FT_GlyphLoader_CheckPoints:near']
extrn ['_FT_GlyphLoader_CheckSubGlyphs:near']
extrn ['_FT_GlyphLoader_Prepare:near']
extrn ['_FT_GlyphLoader_Add:near']
extrn ['_ft_module_get_service:near']
extrn ['_FT_Message:near']
extrn ['_FT_Panic:near']
		extrn _FT_Panic:near	
extrn ['_FT_Throw:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['_ft_trace_levels:near']
extrn ['___security_cookie:near']
end
