endp
_Set_High_Precision proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_30']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10h],', '100h']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '1Eh']
jmp ['short', 'loc_4D']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '6']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10h],', '20h']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '2']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Bh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '6']
jl ['short', 'loc_85']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_6D']
mov ['[ebp+var_4],', 'offset', '$SG7253']
jmp ['short', 'loc_74']
mov ['[ebp+var_4],', 'offset', '$SG7254']
mov ['edx,', '[ebp+var_4]']
push ['edx']
push ['offset', '$SG7255']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_4D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '1']
mov ['ecx,', '[ecx]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
sub ['ecx,', '6']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_New_Profile	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jnz ['short', 'loc_10B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['[ecx+58h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['[ecx+5Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
add ['edx,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+28h]']
cmp ['eax,', '[edx+24h]']
jb ['short', 'loc_13D']
push ['offset', '$SG7270']
push ['2ECh']
push ['62h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '62h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['loc_2B8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0B4h]']
mov ['[edx+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_1B7']
cmp ['[ebp+var_4],', '2']
jz ['short', 'loc_214']
jmp ['loc_25C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ecx+0Ch]']
or ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['[ecx+0Ch],', 'edx']
movsx ['edx,', '[ebp+arg_8]']
test ['edx,', 'edx']
jz ['short', 'loc_1E9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ecx+0Ch]']
or ['edx,', '20h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['[ecx+0Ch],', 'edx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Bh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '6']
jl ['short', 'loc_20E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
push ['edx']
push ['offset', '$SG7283']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_1E9']
jmp ['short', 'loc_28A']
movsx ['ecx,', '[ebp+arg_8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_231']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[eax+0Ch]']
or ['ecx,', '10h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['[eax+0Ch],', 'ecx']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Bh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '6']
jl ['short', 'loc_256']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
push ['offset', '$SG7290']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_231']
jmp ['short', 'loc_28A']
push ['offset', '$SG7292']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG7293']
push ['30Ah']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['short', 'loc_2B8']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+60h],', '0']
jnz ['short', 'loc_29F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['[eax+60h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+64h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+56h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+57h],', '0']
xor ['al,', 'al']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_End_Profile	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_330']
push ['offset', '$SG7304']
call ['_FT_Message']
add ['esp,', '4']
push ['offset', '$SG7305']
push ['333h']
push ['63h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '63h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['loc_477']
cmp ['[ebp+var_4],', '0']
jle ['loc_41D']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Bh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '6']
jl ['short', 'loc_36D']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
push ['eax']
push ['offset', '$SG7312']
call ['_FT_Message']
add ['esp,', '10h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_33A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+10h],', 'ecx']
movsx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_3BF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ecx+0Ch]']
and ['edx,', '8']
jz ['short', 'loc_3AA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ecx+0Ch]']
or ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['[ecx+0Ch],', 'edx']
jmp ['short', 'loc_3BF']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[eax+0Ch]']
or ['ecx,', '20h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['[eax+0Ch],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[eax+58h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
add ['ecx,', '20h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+28h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['[eax+1Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax+54h]']
add ['cx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+54h],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+28h]']
cmp ['edx,', '[ecx+24h]']
jb ['short', 'loc_46E']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Bh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_449']
push ['offset', '$SG7325']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_42B']
push ['offset', '$SG7326']
push ['357h']
push ['62h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '62h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['short', 'loc_477']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+57h],', '0']
xor ['al,', 'al']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Insert_Y_Turn	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+20h]']
sub ['edx,', 'eax']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_4EA']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ecx+eax*4]']
jge ['short', 'loc_4EA']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_4CB']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_52D']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+ecx*4]']
jle ['short', 'loc_52D']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_52D']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_4FE']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_594']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
sub ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+24h]']
cmp ['edx,', '[ecx+28h]']
ja ['short', 'loc_571']
push ['offset', '$SG7346']
push ['38Fh']
push ['62h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '62h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['short', 'loc_596']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+30h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
neg ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+20h]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[edx+eax*4],', 'ecx']
xor ['al,', 'al']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Finalize_Profile_Table	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax+54h]']
mov ['word', 'ptr', '[ebp+var_4],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5Ch]']
mov ['[ebp+var_8],', 'eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
cmp ['ecx,', '1']
jle ['loc_6DC']
cmp ['[ebp+var_8],', '0']
jz ['loc_6DC']
movzx ['edx,', 'word', 'ptr', '[ebp+var_4]']
test ['edx,', 'edx']
jle ['loc_6DA']
movzx ['eax,', 'word', 'ptr', '[ebp+var_4]']
cmp ['eax,', '1']
jle ['short', 'loc_61E']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
lea ['edx,', '[ecx+edx*4]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_628']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
and ['eax,', '8']
jz ['short', 'loc_651']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+10h]']
lea ['ecx,', '[ecx+eax-1]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_68B']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+14h]']
sub ['ecx,', '[eax+10h]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+14h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx*4-4]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Insert_Y_Turn']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_6BC']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Insert_Y_Turn']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_6C0']
mov ['al,', '1']
jmp ['short', 'loc_6E8']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['dx,', 'word', 'ptr', '[ebp+var_4]']
sub ['dx,', '1']
mov ['word', 'ptr', '[ebp+var_4],', 'dx']
jmp ['loc_5F2']
jmp ['short', 'loc_6E6']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+5Ch],', '0']
xor ['al,', 'al']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Split_Conic	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[esi+eax]']
mov ['[edx+ecx],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+ecx],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+eax]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+edx],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx],', 'eax']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[esi+eax+4]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+eax+4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+edx+4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx+4],', 'eax']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Split_Cubic	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '8']
imul ['eax,', 'edx,', '6']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[esi+ecx]']
mov ['[edx+eax],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[ebp+var_C]']
lea ['ecx,', '[edx+eax+1]']
sar ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+edx],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[edx+eax+1]']
sar ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax+1]']
sar ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax+1]']
sar ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+eax],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax+1]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '8']
shl ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax+1]']
sar ['edx,', '1']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '6']
mov ['eax,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['edx,', '[esi+edx+4]']
mov ['[eax+ecx+4],', 'edx']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax+4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax+4]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[eax+ecx+1]']
sar ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+eax+4],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+4]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[eax+ecx+1]']
sar ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_C]']
lea ['eax,', '[edx+ecx+1]']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+1]']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx+1]']
sar ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+1]']
sar ['eax,', '1']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+edx+4],', 'eax']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Line_Up	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jle ['short', 'loc_ADE']
mov ['edx,', '[ebp+arg_10]']
cmp ['edx,', '[ebp+arg_14]']
jl ['short', 'loc_ADE']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_18]']
jle ['short', 'loc_AE5']
xor ['al,', 'al']
jmp ['loc_D2E']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[ebp+arg_14]']
jge ['short', 'loc_B20']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[edx]']
sar ['eax,', 'cl']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_B3C']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['ecx,', '[ecx]']
sar ['edx,', 'cl']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
and ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
cmp ['edx,', '[ebp+arg_18]']
jle ['short', 'loc_B5A']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_18]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['[ebp+var_10],', 'edx']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_B76']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
and ['ecx,', '[ebp+arg_10]']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+var_14],', '0']
jle ['short', 'loc_BB8']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_B8D']
xor ['al,', 'al']
jmp ['loc_D2E']
jmp ['short', 'loc_BB6']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
sub ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_BD9']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[edx+57h]']
test ['eax,', 'eax']
jz ['short', 'loc_BD9']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
sub ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+57h],', '0']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_BE5']
mov ['[ebp+var_2D],', '1']
jmp ['short', 'loc_BE9']
mov ['[ebp+var_2D],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ebp+var_2D]']
mov ['[edx+57h],', 'al']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx+56h]']
test ['edx,', 'edx']
jz ['short', 'loc_C10']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+56h],', '0']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['ecx,', '[ebp+var_1C]']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+24h]']
jb ['short', 'loc_C54']
push ['offset', '$SG7438']
push ['48Ch']
push ['62h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '62h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['loc_D2E']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_C8E']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_FT_MulDiv_No_Round']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
imul ['eax,', '[ebp+var_4]']
cdq
idiv ['[ebp+var_8]']
mov ['[ebp+var_24],', 'edx']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_CCA']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulDiv_No_Round']
add ['esp,', '0Ch']
neg ['eax']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', 'edx']
imul ['ecx,', '[eax+4]']
mov ['eax,', 'ecx']
cdq
idiv ['[ebp+var_8]']
mov ['[ebp+var_24],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_8]']
neg ['edx']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_2C],', 'ecx']
cmp ['[ebp+var_1C],', '0']
jle ['short', 'loc_D23']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '4']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_20]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'eax']
js ['short', 'loc_D18']
mov ['ecx,', '[ebp+var_28]']
sub ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_1C]']
sub ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_CDB']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+28h],', 'edx']
xor ['al,', 'al']
pop ['edi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Line_Down	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax+56h]']
mov ['byte', 'ptr', '[ebp+var_4+2],', 'cl']
mov ['edx,', '[ebp+arg_14]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+arg_18]']
neg ['eax']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
neg ['ecx']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
neg ['eax']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Line_Up']
add ['esp,', '1Ch']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
movsx ['eax,', 'byte', 'ptr', '[ebp+var_4+2]']
test ['eax,', 'eax']
jz ['short', 'loc_DAA']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'byte', 'ptr', '[ecx+56h]']
test ['edx,', 'edx']
jnz ['short', 'loc_DAA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ecx+14h]']
neg ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['[ecx+14h],', 'edx']
mov ['al,', 'byte', 'ptr', '[ebp+var_4+3]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Bezier_Up	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+edx*8+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+eax+4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_C]']
jl ['short', 'loc_E28']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_10]']
jle ['short', 'loc_E2D']
jmp ['$Fin$20']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['edx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[ebp+arg_10]']
jle ['short', 'loc_E49']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_E5F']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_ED5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax-1]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
neg ['ecx']
and ['edx,', 'ecx']
mov ['[ebp+var_C],', 'edx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
sub ['eax,', '1']
and ['eax,', '[ebp+var_4]']
mov ['word', 'ptr', '[ebp+var_18],', 'ax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'ecx']
movsx ['edx,', 'word', 'ptr', '[ebp+var_18]']
test ['edx,', 'edx']
jnz ['short', 'loc_ED5']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+57h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_EB2']
mov ['edx,', '[ebp+var_24]']
sub ['edx,', '4']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+57h],', '0']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_1C]']
mov ['edx,', '[eax+edx*8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '4']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ecx+4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+56h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_EFA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx]']
sar ['eax,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['[edx+14h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+56h],', '0']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+var_C]']
jge ['short', 'loc_F07']
jmp ['$Fin$20']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '[ecx+edx*4+4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+24h]']
jb ['short', 'loc_F50']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_24]']
mov ['[ecx+28h],', 'edx']
push ['offset', '$SG7502']
push ['53Bh']
push ['62h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '62h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['loc_1094']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+var_20]']
jb ['$Fin$20']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jg ['$Fin$20']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+57h],', '0']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+ecx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_C]']
jle ['loc_102B']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+edx*8+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+10h]']
jl ['short', 'loc_FCF']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['[ebp+arg_8]']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_1C]']
lea ['ecx,', '[eax+edx*8]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_1029']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+arg_4]']
mov ['esi,', '[ebp+var_1C]']
mov ['eax,', '[ecx+eax]']
sub ['eax,', '[esi+edx*8]']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_4]']
imul ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_4]']
cdq
idiv ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_1C]']
add ['eax,', '[ecx+edx*8]']
mov ['edx,', '[ebp+var_24]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '4']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '3']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', 'ecx']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_1070']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_C]']
jnz ['short', 'loc_1062']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+57h],', '1']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+edx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '4']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ecx+4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '3']
mov ['ecx,', '[ebp+var_1C]']
sub ['ecx,', 'eax']
mov ['[ebp+var_1C],', 'ecx']
jmp ['loc_F56']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx+28h],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
xor ['al,', 'al']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Bezier_Down	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+eax+4]']
neg ['edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+ecx+4],', 'edx']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx+4]']
neg ['eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx+4],', 'eax']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+eax+4]']
neg ['edx']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+eax+4],', 'edx']
cmp ['[ebp+arg_4],', '2']
jle ['short', 'loc_1151']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+eax+4]']
neg ['edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+ecx+4],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+56h]']
mov ['byte', 'ptr', '[ebp+var_8+2],', 'dl']
mov ['eax,', '[ebp+arg_C]']
neg ['eax']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
neg ['ecx']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Bezier_Up']
add ['esp,', '14h']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'al']
movsx ['edx,', 'byte', 'ptr', '[ebp+var_8+2]']
test ['edx,', 'edx']
jz ['short', 'loc_11A4']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+56h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_11A4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[eax+14h]']
neg ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['[eax+14h],', 'ecx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+edx+4]']
neg ['ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+eax+4],', 'ecx']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Line_To	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_121F']
cmp ['[ebp+var_4],', '1']
jz ['loc_12D8']
cmp ['[ebp+var_4],', '2']
jz ['loc_1375']
jmp ['loc_1421']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[edx+48h]']
jle ['short', 'loc_127F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+48h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
lea ['edx,', '[edx+ecx-1]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
neg ['ecx']
and ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+48h]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['edx,', '[ecx+8]']
jl ['short', 'loc_1258']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
jmp ['short', 'loc_125C']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_New_Profile']
add ['esp,', '0Ch']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_127D']
mov ['al,', '1']
jmp ['loc_14C4']
jmp ['short', 'loc_12D3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[edx+48h]']
jge ['short', 'loc_12D3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
mov ['eax,', '[ebp+arg_0]']
and ['edx,', '[eax+48h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+48h]']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jl ['short', 'loc_12AE']
mov ['byte', 'ptr', '[ebp+var_8+2],', '1']
jmp ['short', 'loc_12B2']
mov ['byte', 'ptr', '[ebp+var_8+2],', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+2]']
push ['edx']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_New_Profile']
add ['esp,', '0Ch']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_12D3']
mov ['al,', '1']
jmp ['loc_14C4']
jmp ['loc_1421']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[edx+48h]']
jge ['loc_1370']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
mov ['eax,', '[ebp+arg_0]']
and ['edx,', '[eax+48h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+48h]']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jl ['short', 'loc_130B']
mov ['byte', 'ptr', '[ebp+var_8+1],', '1']
jmp ['short', 'loc_130F']
mov ['byte', 'ptr', '[ebp+var_8+1],', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+1]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_End_Profile']
add ['esp,', '8']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1369']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx+48h]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+48h]']
sub ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+8]']
jl ['short', 'loc_134B']
mov ['byte', 'ptr', '[ebp+var_8],', '1']
jmp ['short', 'loc_134F']
mov ['byte', 'ptr', '[ebp+var_8],', '0']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8]']
push ['eax']
push ['2']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_New_Profile']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1370']
mov ['al,', '1']
jmp ['loc_14C4']
jmp ['loc_1421']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+48h]']
jle ['loc_1421']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+48h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
lea ['eax,', '[eax+edx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
sub ['eax,', '[ecx+48h]']
mov ['edx,', '[ebp+arg_0]']
cmp ['eax,', '[edx+8]']
jl ['short', 'loc_13B2']
mov ['byte', 'ptr', '[ebp+var_C+3],', '1']
jmp ['short', 'loc_13B6']
mov ['byte', 'ptr', '[ebp+var_C+3],', '0']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_End_Profile']
add ['esp,', '8']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_141A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
lea ['ecx,', '[ecx+eax-1]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
and ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
sub ['ecx,', '[edx+48h]']
mov ['eax,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jl ['short', 'loc_13FC']
mov ['byte', 'ptr', '[ebp+var_C+2],', '1']
jmp ['short', 'loc_1400']
mov ['byte', 'ptr', '[ebp+var_C+2],', '0']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_C+2]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_New_Profile']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1421']
mov ['al,', '1']
jmp ['loc_14C4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '1']
jz ['short', 'loc_1438']
cmp ['[ebp+var_10],', '2']
jz ['short', 'loc_1475']
jmp ['short', 'loc_14B0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Line_Up']
add ['esp,', '1Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1473']
mov ['al,', '1']
jmp ['short', 'loc_14C4']
jmp ['short', 'loc_14B0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Line_Down']
add ['esp,', '1Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_14B0']
mov ['al,', '1']
jmp ['short', 'loc_14C4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+44h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+48h],', 'eax']
xor ['al,', 'al']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Conic_To	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0B8h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+44h]']
mov ['[ecx+edx],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+48h]']
mov ['[eax+ecx+4],', 'edx']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[edx+eax],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_8]']
mov ['[ecx+edx+4],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_C]']
mov ['[ecx+edx],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_10]']
mov ['[ecx+edx+4],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '[eax+ecx+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['edx,', '[ecx+edx+4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '[eax+ecx+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['eax,', '[edx+eax]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_C]']
jg ['short', 'loc_15EB']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_15F7']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jl ['short', 'loc_1607']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_18]']
jle ['short', 'loc_162A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
push ['eax']
call ['_Split_Conic']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
add ['edx,', '10h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+34h],', 'edx']
jmp ['loc_1780']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_C]']
jnz ['short', 'loc_1646']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
sub ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
jmp ['loc_1780']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_C]']
jge ['short', 'loc_1657']
mov ['[ebp+var_24],', '1']
jmp ['short', 'loc_165E']
mov ['[ebp+var_24],', '2']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+64h]']
cmp ['edx,', '[ebp+var_1C]']
jz ['loc_1724']
cmp ['[ebp+var_1C],', '1']
jnz ['short', 'loc_16AE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['eax,', 'edx']
sub ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jl ['short', 'loc_16A1']
mov ['[ebp+var_25],', '1']
jmp ['short', 'loc_16A5']
mov ['[ebp+var_25],', '0']
movsx ['edx,', '[ebp+var_25]']
mov ['[ebp+var_2C],', 'edx']
jmp ['short', 'loc_16D7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
neg ['ecx']
and ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+8]']
jl ['short', 'loc_16CC']
mov ['[ebp+var_2D],', '1']
jmp ['short', 'loc_16D0']
mov ['[ebp+var_2D],', '0']
movsx ['ecx,', '[ebp+var_2D]']
mov ['[ebp+var_2C],', 'ecx']
mov ['dl,', 'byte', 'ptr', '[ebp+var_2C]']
mov ['[ebp+var_1D],', 'dl']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+64h],', '0']
jz ['short', 'loc_1703']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_End_Profile']
add ['esp,', '8']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1703']
jmp ['$Fail$28']
movzx ['ecx,', '[ebp+var_1D]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_New_Profile']
add ['esp,', '0Ch']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1724']
jmp ['$Fail$28']
cmp ['[ebp+var_1C],', '1']
jnz ['short', 'loc_1756']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+50h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4Ch]']
push ['edx']
push ['offset', '_Split_Conic']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Bezier_Up']
add ['esp,', '14h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1754']
jmp ['short', '$Fail$28']
jmp ['short', 'loc_1780']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+50h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4Ch]']
push ['edx']
push ['offset', '_Split_Conic']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Bezier_Down']
add ['esp,', '14h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1780']
jmp ['short', '$Fail$28']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '0B8h']
mov ['eax,', '[ebp+arg_0]']
cmp ['[eax+34h],', 'edx']
jnb ['loc_1583']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+44h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+48h],', 'ecx']
xor ['al,', 'al']
jmp ['short', 'loc_17AD']
mov ['al,', '1']
pop ['edi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Cubic_To	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0B8h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+44h]']
mov ['[edx+eax],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+48h]']
mov ['[edx+eax+4],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_4]']
mov ['[ecx+edx],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['edx,', '[ebp+arg_8]']
mov ['[eax+ecx+4],', 'edx']
mov ['eax,', '8']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[edx+eax],', 'ecx']
mov ['edx,', '8']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_10]']
mov ['[ecx+edx+4],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_14]']
mov ['[ecx+edx],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_18]']
mov ['[ecx+edx+4],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['edx,', '[ecx+edx+4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '8']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['eax,', '[edx+eax+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '8']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '[eax+ecx+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['eax,', '[edx+eax+4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['edx,', '[ecx+edx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_10]']
jg ['short', 'loc_1909']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_1915']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_C]']
jg ['short', 'loc_192B']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_24],', 'ecx']
jmp ['short', 'loc_1937']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+var_18]']
jl ['short', 'loc_1947']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ebp+var_1C]']
jle ['short', 'loc_196A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
call ['_Split_Cubic']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
add ['eax,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
jmp ['loc_1AC0']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_10]']
jnz ['short', 'loc_1986']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
sub ['ecx,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+34h],', 'ecx']
jmp ['loc_1AC0']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_10]']
jg ['short', 'loc_1997']
mov ['[ebp+var_30],', '1']
jmp ['short', 'loc_199E']
mov ['[ebp+var_30],', '2']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+64h]']
cmp ['eax,', '[ebp+var_28]']
jz ['loc_1A64']
cmp ['[ebp+var_28],', '1']
jnz ['short', 'loc_19EE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx-1]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
and ['ecx,', 'eax']
sub ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+8]']
jl ['short', 'loc_19E1']
mov ['[ebp+var_31],', '1']
jmp ['short', 'loc_19E5']
mov ['[ebp+var_31],', '0']
movsx ['eax,', '[ebp+var_31]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_1A17']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jl ['short', 'loc_1A0C']
mov ['[ebp+var_39],', '1']
jmp ['short', 'loc_1A10']
mov ['[ebp+var_39],', '0']
movsx ['edx,', '[ebp+var_39]']
mov ['[ebp+var_38],', 'edx']
mov ['al,', 'byte', 'ptr', '[ebp+var_38]']
mov ['[ebp+var_29],', 'al']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+64h],', '0']
jz ['short', 'loc_1A43']
movzx ['edx,', '[ebp+var_29]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_End_Profile']
add ['esp,', '8']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1A43']
jmp ['$Fail$30']
movzx ['edx,', '[ebp+var_29]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_New_Profile']
add ['esp,', '0Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1A64']
jmp ['$Fail$30']
cmp ['[ebp+var_28],', '1']
jnz ['short', 'loc_1A96']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4Ch]']
push ['eax']
push ['offset', '_Split_Cubic']
push ['3']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Bezier_Up']
add ['esp,', '14h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1A94']
jmp ['short', '$Fail$30']
jmp ['short', 'loc_1AC0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4Ch]']
push ['eax']
push ['offset', '_Split_Cubic']
push ['3']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Bezier_Down']
add ['esp,', '14h']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1AC0']
jmp ['short', '$Fail$30']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0B8h']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+34h],', 'eax']
jnb ['loc_188C']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+44h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+48h],', 'edx']
xor ['al,', 'al']
jmp ['short', 'loc_1AEC']
mov ['al,', '1']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Decompose_Curve proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0A0h']
push ['edi']
lea ['edi,', '[ebp+var_A0]']
mov ['ecx,', '28h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+84h]']
mov ['[ebp+var_34],', 'ecx']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_34]']
lea ['ecx,', '[eax+edx*8]']
mov ['[ebp+var_3C],', 'ecx']
movzx ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx*8]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_2C],', 'edx']
movzx ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[edx+ecx*8+4]']
mov ['ecx,', '[eax+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_28],', 'edx']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[edx+ecx*8]']
mov ['ecx,', '[eax+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_C],', 'edx']
movzx ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[edx+ecx*8+4]']
mov ['ecx,', '[eax+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1BD5']
mov ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_28],', 'eax']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1BA9']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_1BBF']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_18],', 'ecx']
movzx ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_34]']
lea ['ecx,', '[eax+edx*8]']
mov ['[ebp+var_38],', 'ecx']
movzx ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+88h]']
mov ['[ebp+var_40],', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_40]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx]']
and ['ecx,', '4']
jz ['short', 'loc_1C2D']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
sar ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0B4h],', 'dl']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_40]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx]']
and ['ecx,', '3']
mov ['[ebp+var_44],', 'ecx']
cmp ['[ebp+var_44],', '2']
jnz ['short', 'loc_1C4D']
jmp ['$Invalid_Outline$66']
cmp ['[ebp+var_44],', '0']
jnz ['short', 'loc_1CB1']
movzx ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+88h]']
movsx ['edx,', 'byte', 'ptr', '[ecx+edx]']
and ['edx,', '3']
cmp ['edx,', '1']
jnz ['short', 'loc_1C83']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
sub ['edx,', '8']
mov ['[ebp+var_3C],', 'edx']
jmp ['short', 'loc_1C9F']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '8']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_40]']
sub ['ecx,', '1']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_2C]']
mov ['[edx+44h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_28]']
mov ['[ecx+48h],', 'edx']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_3C]']
jnb ['loc_212B']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '8']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_40]']
add ['edx,', '1']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_40]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
and ['eax,', '3']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['[ebp+var_A0],', 'ecx']
cmp ['[ebp+var_A0],', '0']
jz ['short', 'loc_1D84']
cmp ['[ebp+var_A0],', '1']
jz ['short', 'loc_1D16']
jmp ['loc_1F2D']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[edx]']
mov ['ecx,', '[eax+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_50],', 'edx']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+4]']
mov ['ecx,', '[edx+18h]']
shl ['eax,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
sub ['eax,', '[ecx+8]']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1D5F']
mov ['edx,', '[ebp+var_50]']
mov ['[ebp+var_58],', 'edx']
mov ['eax,', '[ebp+var_54]']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_58]']
mov ['[ebp+var_54],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_1D49']
mov ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Line_To']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1D7F']
jmp ['$Fail$67']
jmp ['loc_1CC3']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_1C],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx+4]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', '$Do_Conic$68']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_18],', 'eax']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1DC9']
mov ['edx,', '[ebp+var_38]']
cmp ['edx,', '[ebp+var_3C]']
jnb ['loc_1F00']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '8']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '1']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_40]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
and ['edx,', '3']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[edx+ecx]']
mov ['ecx,', '[eax+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_70],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx+4]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_74],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1E6D']
mov ['ecx,', '[ebp+var_70]']
mov ['[ebp+var_78],', 'ecx']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_70],', 'edx']
mov ['eax,', '[ebp+var_78]']
mov ['[ebp+var_74],', 'eax']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1E57']
cmp ['[ebp+var_44],', '1']
jnz ['short', 'loc_1EA0']
mov ['edx,', '[ebp+var_74]']
push ['edx']
mov ['eax,', '[ebp+var_70]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Conic_To']
add ['esp,', '14h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1E9B']
jmp ['$Fail$67']
jmp ['loc_1CC3']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_1EAB']
jmp ['$Invalid_Outline$66']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+var_70]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_74]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_64],', 'eax']
mov ['edx,', '[ebp+var_64]']
push ['edx']
mov ['eax,', '[ebp+var_68]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Conic_To']
add ['esp,', '14h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1EEF']
jmp ['$Fail$67']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_74]']
mov ['[ebp+var_18],', 'eax']
jmp ['$Do_Conic$68']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Conic_To']
add ['esp,', '14h']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1F28']
jmp ['$Fail$67']
jmp ['$Close$69']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '8']
cmp ['ecx,', '[ebp+var_3C]']
ja ['short', 'loc_1F4F']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_40]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx]']
and ['ecx,', '3']
cmp ['ecx,', '2']
jz ['short', 'loc_1F54']
jmp ['$Invalid_Outline$66']
mov ['edx,', '[ebp+var_38]']
add ['edx,', '10h']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '2']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '-2']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_7C],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '-2']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx+4]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_80],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '-1']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_84],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '-1']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx+4]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_88],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2034']
mov ['ecx,', '[ebp+var_7C]']
mov ['[ebp+var_94],', 'ecx']
mov ['edx,', '[ebp+var_80]']
mov ['[ebp+var_7C],', 'edx']
mov ['eax,', '[ebp+var_94]']
mov ['[ebp+var_80],', 'eax']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1FF0']
mov ['edx,', '[ebp+var_84]']
mov ['[ebp+var_98],', 'edx']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+var_84],', 'eax']
mov ['ecx,', '[ebp+var_98]']
mov ['[ebp+var_88],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_200C']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_3C]']
ja ['loc_20F1']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_8C],', 'edx']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx+4]']
mov ['ecx,', '[ecx+18h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
sub ['edx,', '[eax+8]']
mov ['[ebp+var_90],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_20B3']
mov ['ecx,', '[ebp+var_8C]']
mov ['[ebp+var_9C],', 'ecx']
mov ['edx,', '[ebp+var_90]']
mov ['[ebp+var_8C],', 'edx']
mov ['eax,', '[ebp+var_9C]']
mov ['[ebp+var_90],', 'eax']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_208B']
mov ['edx,', '[ebp+var_90]']
push ['edx']
mov ['eax,', '[ebp+var_8C]']
push ['eax']
mov ['ecx,', '[ebp+var_88]']
push ['ecx']
mov ['edx,', '[ebp+var_84]']
push ['edx']
mov ['eax,', '[ebp+var_80]']
push ['eax']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Cubic_To']
add ['esp,', '1Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_20EC']
jmp ['short', '$Fail$67']
jmp ['loc_1CC3']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_88]']
push ['eax']
mov ['ecx,', '[ebp+var_84]']
push ['ecx']
mov ['edx,', '[ebp+var_80]']
push ['edx']
mov ['eax,', '[ebp+var_7C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Cubic_To']
add ['esp,', '1Ch']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_2124']
jmp ['short', '$Fail$67']
jmp ['short', '$Close$69']
jmp ['loc_1CC3']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Line_To']
add ['esp,', '0Ch']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', '$Close$69']
jmp ['short', '$Fail$67']
xor ['al,', 'al']
jmp ['short', 'loc_216B']
push ['offset', '$SG7775']
push ['7DEh']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['al,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN65']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '0A0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN64']
dd ['offset', '$LN60']
dd ['0FFFFFFE4h,', '8']
dd ['offset', '$LN61']
dd ['0FFFFFFD4h,', '8']
dd ['offset', '$LN62']
dd ['0FFFFFF98h,', '8']
dd ['offset', '$LN63']
align ['10h']
endp
_Convert_Glyph	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+5Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+57h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+56h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
sub ['ecx,', '20h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['[ecx+58h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['[edx+8],', 'ecx']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+54h],', 'dx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_2278']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+80h]']
cmp ['[ebp+var_4],', 'eax']
jge ['loc_23FF']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+64h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+60h],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8Ch]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
push ['ecx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Decompose_Curve']
add ['esp,', '10h']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_22D3']
mov ['al,', '1']
jmp ['loc_2437']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
and ['ecx,', '[edx+48h]']
jnz ['short', 'loc_234A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+48h]']
cmp ['edx,', '[ecx+4Ch]']
jl ['short', 'loc_234A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+48h]']
cmp ['edx,', '[ecx+50h]']
jg ['short', 'loc_234A']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+60h],', '0']
jz ['short', 'loc_234A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
mov ['eax,', '[edx+0Ch]']
and ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['ecx,', '[edx+0Ch]']
and ['ecx,', '8']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_234A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
sub ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+28h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['eax,', '[edx+0Ch]']
and ['eax,', '8']
jz ['short', 'loc_2391']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
mov ['eax,', '[ebp+arg_0]']
and ['edx,', '[eax+48h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+48h]']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jl ['short', 'loc_2385']
mov ['byte', 'ptr', '[ebp+var_10+2],', '1']
jmp ['short', 'loc_2389']
mov ['byte', 'ptr', '[ebp+var_10+2],', '0']
mov ['dl,', 'byte', 'ptr', '[ebp+var_10+2]']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'dl']
jmp ['short', 'loc_23C9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
lea ['ecx,', '[ecx+eax-1]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
and ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
sub ['ecx,', '[edx+48h]']
mov ['eax,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jl ['short', 'loc_23BF']
mov ['byte', 'ptr', '[ebp+var_10+1],', '1']
jmp ['short', 'loc_23C3']
mov ['byte', 'ptr', '[ebp+var_10+1],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_10+1]']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'cl']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_10+3]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_End_Profile']
add ['esp,', '8']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_23E5']
mov ['al,', '1']
jmp ['short', 'loc_2437']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+60h],', '0']
jz ['short', 'loc_23FA']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
mov ['[eax+1Ch],', 'edx']
jmp ['loc_226F']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Finalize_Profile_Table']
add ['esp,', '4']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_2416']
mov ['al,', '1']
jmp ['short', 'loc_2437']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+28h]']
cmp ['ecx,', '[eax+24h]']
jnb ['short', 'loc_242D']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_2434']
mov ['[ebp+var_14],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_14]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Init_Linked	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
pop ['ebp']
retn
align ['10h']
endp
_InsNew		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_24B6']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx]']
jge ['short', 'loc_24A3']
jmp ['short', 'loc_24B6']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_2491']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_DelOld		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2520']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_250D']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_2520']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_24F2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Sort		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_25A9']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
and ['ecx,', '8']
jz ['short', 'loc_2576']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_257D']
mov ['[ebp+var_10],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+10h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_254F']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_25BF']
jmp ['short', 'loc_262B']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_262B']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[edx]']
cmp ['ecx,', '[eax]']
jg ['short', 'loc_25F5']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_25F3']
jmp ['short', 'loc_262B']
jmp ['short', 'loc_2620']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_25C8']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Vertical_Sweep_Init proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+70h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
neg ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+9Ch],', 'ax']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'word', 'ptr', '[edx]']
neg ['eax']
imul ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+94h],', 'eax']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_2693']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+68h]']
sub ['eax,', '1']
imul ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+94h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+94h],', 'eax']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+9Eh],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0A0h],', 'dx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Vertical_Sweep_Span proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax+0Ch]']
and ['ecx,', '7']
mov ['[ebp+var_10],', 'ecx']
mov ['dx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'dx']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[ebp+arg_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_8]']
lea ['edx,', '[ecx+eax-1]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
neg ['ecx']
and ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_10],', '2']
jz ['short', 'loc_2733']
mov ['ecx,', '[ebp+arg_C]']
sub ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
sub ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jg ['short', 'loc_2733']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_2748']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
and ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx]']
sar ['eax,', 'cl']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['loc_28A8']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+38h]']
cmp ['[ebp+var_4],', 'eax']
jge ['loc_28A8']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_276F']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+38h]']
cmp ['[ebp+var_8],', 'edx']
jl ['short', 'loc_2788']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+38h]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
sar ['edx,', '3']
movsx ['eax,', 'dx']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sar ['ecx,', '3']
movsx ['edx,', 'cx']
mov ['[ebp+var_18],', 'edx']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '7']
mov ['eax,', '0FFh']
sar ['eax,', 'cl']
mov ['byte', 'ptr', '[ebp+var_1C+3],', 'al']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '7']
mov ['edx,', '7Fh']
sar ['edx,', 'cl']
not ['edx']
mov ['byte', 'ptr', '[ebp+var_1C+2],', 'dl']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+9Eh]']
cmp ['ecx,', '[ebp+var_14]']
jle ['short', 'loc_27DF']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', 'word', 'ptr', '[ebp+var_14]']
mov ['[edx+9Eh],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+0A0h]']
cmp ['edx,', '[ebp+var_18]']
jge ['short', 'loc_27FC']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', 'word', 'ptr', '[ebp+var_18]']
mov ['[eax+0A0h],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+94h]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '0']
jle ['short', 'loc_2891']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_1C+3]']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
or ['ecx,', 'edx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+var_18]']
sub ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jle ['short', 'loc_286C']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[edx],', '0FFh']
mov ['eax,', '[ebp+var_18]']
sub ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_284C']
mov ['ecx,', '1']
shl ['ecx,', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_1C+2]']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
or ['ecx,', 'edx']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+edx],', 'cl']
jmp ['short', 'loc_28A8']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_1C+3]']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_1C+2]']
and ['ecx,', 'edx']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['[eax],', 'dl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Vertical_Sweep_Drop proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['ebx']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_8]']
lea ['eax,', '[edx+ecx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
neg ['ecx']
and ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jle ['loc_2AC2']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx+0Ch]']
and ['edx,', '7']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[eax+4]']
cmp ['[ebp+var_4],', 'ecx']
jnz ['loc_2ABD']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
cmp ['[ebp+var_1C],', '5']
ja ['$LN9']
mov ['eax,', '[ebp+var_1C]']
jmp ['ds:$LN27[eax*4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['loc_2A16']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
lea ['eax,', '[eax+edx-1]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
neg ['ecx']
and ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
jmp ['loc_2A16']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+1Ch]']
cmp ['eax,', '[ebp+arg_14]']
jnz ['short', 'loc_29AA']
mov ['ecx,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jg ['short', 'loc_29AA']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+0Ch]']
and ['eax,', '10h']
jz ['short', 'loc_29A5']
mov ['ecx,', '[ebp+arg_C]']
sub ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+8]']
jge ['short', 'loc_29AA']
jmp ['loc_2B7C']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax+1Ch]']
cmp ['ecx,', '[ebp+arg_10]']
jnz ['short', 'loc_29DF']
movsx ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_10]']
cmp ['[eax+14h],', 'edx']
jnz ['short', 'loc_29DF']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx+0Ch]']
and ['edx,', '20h']
jz ['short', 'loc_29DA']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jge ['short', 'loc_29DF']
jmp ['loc_2B7C']
cmp ['[ebp+var_18],', '1']
jnz ['short', 'loc_29ED']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_2A0F']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
lea ['eax,', '[ecx+eax-1]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['eax,', 'edx']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_2A16']
jmp ['loc_2B7C']
cmp ['[ebp+var_C],', '0']
jge ['short', 'loc_2A24']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_2A3F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[ecx]']
sar ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+38h]']
cmp ['edx,', 'ecx']
jl ['short', 'loc_2A3F']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_4]']
jnz ['short', 'loc_2A4F']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_2A55']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[ecx]']
sar ['edx,', 'cl']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
sar ['eax,', '3']
mov ['word', 'ptr', '[ebp+var_10],', 'ax']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '7']
mov ['word', 'ptr', '[ebp+var_14],', 'cx']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_2ABB']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+38h]']
cmp ['[ebp+var_4],', 'eax']
jge ['short', 'loc_2ABB']
movsx ['ecx,', 'word', 'ptr', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+94h]']
add ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
movsx ['ecx,', 'word', 'ptr', '[ebp+var_14]']
mov ['edx,', '80h']
sar ['edx,', 'cl']
and ['eax,', 'edx']
jz ['short', 'loc_2ABB']
jmp ['loc_2B7C']
jmp ['short', 'loc_2AC2']
jmp ['loc_2B7C']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jl ['loc_2B7C']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+38h]']
cmp ['[ebp+var_4],', 'ecx']
jge ['loc_2B7C']
mov ['edx,', '[ebp+var_4]']
sar ['edx,', '3']
mov ['word', 'ptr', '[ebp+var_10],', 'dx']
mov ['eax,', '[ebp+var_4]']
and ['eax,', '7']
mov ['word', 'ptr', '[ebp+var_14],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+9Eh]']
movsx ['eax,', 'word', 'ptr', '[ebp+var_10]']
cmp ['edx,', 'eax']
jle ['short', 'loc_2B1D']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', 'word', 'ptr', '[ebp+var_10]']
mov ['[ecx+9Eh],', 'dx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+0A0h]']
movsx ['edx,', 'word', 'ptr', '[ebp+var_10]']
cmp ['ecx,', 'edx']
jge ['short', 'loc_2B3D']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', 'word', 'ptr', '[ebp+var_10]']
mov ['[eax+0A0h],', 'cx']
movsx ['edx,', 'word', 'ptr', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+94h]']
add ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
movsx ['ecx,', 'word', 'ptr', '[ebp+var_14]']
mov ['ebx,', '80h']
sar ['ebx,', 'cl']
movsx ['ecx,', 'bl']
movzx ['edx,', 'byte', 'ptr', '[edx+eax]']
or ['edx,', 'ecx']
movsx ['eax,', 'word', 'ptr', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+94h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+3Ch]']
mov ['[ecx+eax],', 'dl']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN16']
dd ['offset', '$LN9']
dd ['offset', '$LN9']
dd ['offset', '$LN17']
dd ['offset', '$LN16']
align ['10h']
endp
_Vertical_Sweep_Step proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+9Ch]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+94h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+94h],', 'ecx']
pop ['ebp']
retn
align ['10h']
endp
_Horizontal_Sweep_Init proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
pop ['ebp']
retn
align ['10h']
endp
_Horizontal_Sweep_Span proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[ebp+arg_14],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+4]']
jge ['loc_2CEF']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_8]']
lea ['ecx,', '[eax+edx-1]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
and ['ecx,', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jnz ['loc_2CEF']
movsx ['ecx,', '[ebp+arg_4]']
sar ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+3Ch]']
mov ['[ebp+var_10],', 'ecx']
movsx ['ecx,', '[ebp+arg_4]']
and ['ecx,', '7']
mov ['eax,', '80h']
sar ['eax,', 'cl']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[ecx]']
sar ['edx,', 'cl']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_2CEF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax+68h]']
jnb ['short', 'loc_2CEF']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '[edx+70h]']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+70h],', '0']
jle ['short', 'loc_2CCC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
imul ['ecx,', '[edx+70h]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C+3]']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
or ['ecx,', 'edx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+eax],', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Horizontal_Sweep_Drop proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_8]']
lea ['eax,', '[edx+ecx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
neg ['ecx']
and ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jle ['loc_2F31']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx+0Ch]']
and ['edx,', '7']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[eax+4]']
cmp ['[ebp+var_4],', 'ecx']
jnz ['loc_2F2C']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
cmp ['[ebp+var_1C],', '5']
ja ['$LN9_0']
mov ['eax,', '[ebp+var_1C]']
jmp ['ds:$LN27_0[eax*4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['loc_2E65']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
lea ['eax,', '[eax+edx-1]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
neg ['ecx']
and ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
jmp ['loc_2E65']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+1Ch]']
cmp ['eax,', '[ebp+arg_14]']
jnz ['short', 'loc_2DF9']
mov ['ecx,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jg ['short', 'loc_2DF9']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+0Ch]']
and ['eax,', '10h']
jz ['short', 'loc_2DF4']
mov ['ecx,', '[ebp+arg_C]']
sub ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+8]']
jge ['short', 'loc_2DF9']
jmp ['loc_2FC4']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax+1Ch]']
cmp ['ecx,', '[ebp+arg_10]']
jnz ['short', 'loc_2E2E']
movsx ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_10]']
cmp ['[eax+14h],', 'edx']
jnz ['short', 'loc_2E2E']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx+0Ch]']
and ['edx,', '20h']
jz ['short', 'loc_2E29']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+8]']
jge ['short', 'loc_2E2E']
jmp ['loc_2FC4']
cmp ['[ebp+var_18],', '1']
jnz ['short', 'loc_2E3C']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_2E5E']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_8]']
lea ['eax,', '[ecx+eax-1]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
neg ['edx']
and ['eax,', 'edx']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_2E65']
jmp ['loc_2FC4']
cmp ['[ebp+var_C],', '0']
jge ['short', 'loc_2E73']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_2E8B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[ecx]']
sar ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+68h]']
jb ['short', 'loc_2E8B']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_4]']
jnz ['short', 'loc_2E9B']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_2EA1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['[ebp+var_4],', 'edx']
movsx ['eax,', '[ebp+arg_4]']
sar ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+3Ch]']
mov ['[ebp+var_10],', 'eax']
movsx ['ecx,', '[ebp+arg_4]']
and ['ecx,', '7']
mov ['edx,', '80h']
sar ['edx,', 'cl']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '[eax+70h]']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', 'ecx']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+70h],', '0']
jle ['short', 'loc_2F06']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
imul ['edx,', '[eax+70h]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_2F2A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+68h]']
jnb ['short', 'loc_2F2A']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_14+3]']
and ['ecx,', 'edx']
jz ['short', 'loc_2F2A']
jmp ['loc_2FC4']
jmp ['short', 'loc_2F31']
jmp ['loc_2FC4']
movsx ['eax,', '[ebp+arg_4]']
sar ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+3Ch]']
mov ['[ebp+var_10],', 'eax']
movsx ['ecx,', '[ebp+arg_4]']
and ['ecx,', '7']
mov ['edx,', '80h']
sar ['edx,', 'cl']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_2FC4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax+68h]']
jnb ['short', 'loc_2FC4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '[edx+70h]']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+70h],', '0']
jle ['short', 'loc_2FA1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
imul ['ecx,', '[edx+70h]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_14+3]']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
or ['ecx,', 'edx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+eax],', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN16_0']
dd ['offset', '$LN9_0']
dd ['offset', '$LN9_0']
dd ['offset', '$LN17_0']
dd ['offset', '$LN16_0']
endp
_Horizontal_Sweep_Step proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
pop ['ebp']
retn
align ['10h']
endp
_Draw_Sweep	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '7Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
lea ['eax,', '[ebp+var_5C]']
push ['eax']
call ['_Init_Linked']
add ['esp,', '4']
lea ['ecx,', '[ebp+var_68]']
push ['ecx']
call ['_Init_Linked']
add ['esp,', '4']
lea ['edx,', '[ebp+var_74]']
push ['edx']
call ['_Init_Linked']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[edx+4Ch]']
mov ['ecx,', '[eax]']
sar ['edx,', 'cl']
mov ['[ebp+var_30],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+50h]']
mov ['ecx,', '[ecx]']
sar ['edx,', 'cl']
mov ['[ebp+var_24],', 'dx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_30CD']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['ax,', '[edx+14h]']
mov ['[ebp+var_3C],', 'ax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+10h]']
lea ['edx,', '[edx+ecx-1]']
mov ['[ebp+var_38],', 'dx']
movsx ['eax,', '[ebp+var_24]']
movsx ['ecx,', '[ebp+var_3C]']
cmp ['eax,', 'ecx']
jle ['short', 'loc_3098']
mov ['dx,', '[ebp+var_3C]']
mov ['[ebp+var_24],', 'dx']
movsx ['eax,', '[ebp+var_30]']
movsx ['ecx,', '[ebp+var_38]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_30AC']
mov ['dx,', '[ebp+var_38]']
mov ['[ebp+var_30],', 'dx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['edx,', '[ebp+var_5C]']
push ['edx']
call ['_InsNew']
add ['esp,', '8']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_3056']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jnz ['short', 'loc_30FA']
push ['offset', '$SG8089']
push ['0BB4h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2Ch],', 'eax']
mov ['al,', '1']
jmp ['loc_34FF']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A4h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_3149']
movsx ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+14h]']
sub ['edx,', 'eax']
movzx ['eax,', 'dx']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+18h],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_3123']
mov ['cx,', '[ebp+var_24]']
mov ['[ebp+var_4],', 'cx']
xor ['edx,', 'edx']
mov ['[ebp+var_C],', 'dx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jle ['short', 'loc_3186']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
neg ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
movsx ['eax,', '[ebp+var_24]']
cmp ['[ecx+edx*4],', 'eax']
jnz ['short', 'loc_3186']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+30h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jle ['loc_3454']
mov ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_3208']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_14],', 'ecx']
movsx ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+18h]']
sub ['ecx,', 'edx']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+18h],', 'ecx']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jnz ['short', 'loc_3200']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['edx,', '[ebp+var_5C]']
push ['edx']
call ['_DelOld']
add ['esp,', '8']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0Ch]']
and ['ecx,', '8']
jz ['short', 'loc_31F0']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['eax,', '[ebp+var_68]']
push ['eax']
call ['_InsNew']
add ['esp,', '8']
jmp ['short', 'loc_3200']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['edx,', '[ebp+var_74]']
push ['edx']
call ['_InsNew']
add ['esp,', '8']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_3199']
lea ['ecx,', '[ebp+var_68]']
push ['ecx']
call ['_Sort']
add ['esp,', '4']
lea ['edx,', '[ebp+var_74]']
push ['edx']
call ['_Sort']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
neg ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['cx,', '[eax+ecx*4]']
mov ['[ebp+var_8],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+30h],', 'eax']
movsx ['edx,', '[ebp+var_8]']
movsx ['eax,', '[ebp+var_4]']
sub ['edx,', 'eax']
mov ['[ebp+var_C],', 'dx']
movsx ['ecx,', '[ebp+var_4]']
movsx ['edx,', '[ebp+var_8]']
cmp ['ecx,', 'edx']
jge ['loc_33E3']
xor ['eax,', 'eax']
mov ['[ebp+var_40],', 'ax']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_1C],', 'edx']
cmp ['[ebp+var_18],', '0']
jz ['loc_3386']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[ebp+var_48]']
jle ['short', 'loc_32A9']
mov ['edx,', '[ebp+var_44]']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_48]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
and ['eax,', '[ebp+var_44]']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_48]']
lea ['ecx,', '[eax+edx-1]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
neg ['eax']
and ['ecx,', 'eax']
mov ['[ebp+var_54],', 'ecx']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+4]']
jg ['short', 'loc_333F']
mov ['eax,', '[ebp+var_50]']
cmp ['eax,', '[ebp+var_44]']
jz ['short', 'loc_333F']
mov ['ecx,', '[ebp+var_54]']
cmp ['ecx,', '[ebp+var_48]']
jz ['short', 'loc_333F']
mov ['edx,', '[ebp+var_50]']
cmp ['edx,', '[ebp+var_54]']
jg ['short', 'loc_3305']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_50]']
add ['ecx,', '[eax+4]']
cmp ['[ebp+var_54],', 'ecx']
jnz ['short', 'loc_333F']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+0Ch]']
and ['eax,', '7']
mov ['[ebp+var_7C],', 'eax']
cmp ['[ebp+var_7C],', '2']
jz ['short', 'loc_333D']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['dword', 'ptr', '[edx+18h],', '1']
mov ['ax,', '[ebp+var_40]']
add ['ax,', '1']
mov ['[ebp+var_40],', 'ax']
jmp ['short', '$Skip_To_Next$47']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
movzx ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A8h]']
call ['edx']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_1C],', 'eax']
jmp ['loc_3275']
movsx ['ecx,', '[ebp+var_40]']
test ['ecx,', 'ecx']
jle ['short', '$Next_Line$48']
jmp ['$Scan_DropOuts$49']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0B0h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['dx,', '[ebp+var_4]']
add ['dx,', '1']
mov ['[ebp+var_4],', 'dx']
movsx ['eax,', '[ebp+var_4]']
movsx ['ecx,', '[ebp+var_8]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_33DE']
lea ['edx,', '[ebp+var_68]']
push ['edx']
call ['_Sort']
add ['esp,', '4']
lea ['eax,', '[ebp+var_74]']
push ['eax']
call ['_Sort']
add ['esp,', '4']
jmp ['loc_3253']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_3419']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jnz ['short', 'loc_3411']
mov ['edx,', '[ebp+var_10]']
push ['edx']
lea ['eax,', '[ebp+var_68]']
push ['eax']
call ['_DelOld']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_33E9']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_344F']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+10h],', '0']
jnz ['short', 'loc_3447']
mov ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_74]']
push ['ecx']
call ['_DelOld']
add ['esp,', '8']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_341F']
jmp ['loc_3186']
movsx ['eax,', '[ebp+var_4]']
movsx ['ecx,', '[ebp+var_30]']
cmp ['eax,', 'ecx']
jg ['short', 'loc_3489']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0B0h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['dx,', '[ebp+var_4]']
add ['dx,', '1']
mov ['[ebp+var_4],', 'dx']
jmp ['short', 'loc_3454']
xor ['al,', 'al']
jmp ['short', 'loc_34FF']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_74]']
mov ['[ebp+var_1C],', 'ecx']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_34FA']
mov ['edx,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[edx+18h],', '0']
jz ['short', 'loc_34E6']
mov ['eax,', '[ebp+var_18]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx]']
push ['eax']
movzx ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0ACh]']
call ['ecx']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_3499']
jmp ['$Next_Line$48']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN46']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN45']
dd ['offset', '$LN40']
dd ['0FFFFFFD0h,', '2']
dd ['offset', '$LN41']
dd ['0FFFFFFA4h,', '4']
dd ['offset', '$LN42']
dd ['0FFFFFF98h,', '4']
dd ['offset', '$LN43']
dd ['0FFFFFF8Ch,', '4']
dd ['offset', '$LN44']
align ['10h']
endp
_Render_Single_Pass proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+400h],', '0']
jl ['loc_377C']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+400h]']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx*4+3C2h]']
mov ['edx,', '[ebp+arg_0]']
imul ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+50h],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+400h]']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+edx*4+3C0h]']
mov ['edx,', '[ebp+arg_0]']
imul ['ecx,', '[edx+4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4Ch],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['[ecx+28h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
movsx ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Convert_Glyph']
add ['esp,', '8']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_373E']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+2Ch],', '62h']
jz ['short', 'loc_3642']
mov ['eax,', '1']
jmp ['loc_377E']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+400h]']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax+edx*4+3C0h]']
mov ['word', 'ptr', '[ebp+var_4],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+400h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dx,', '[ecx+eax*4+3C2h]']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
movsx ['eax,', 'word', 'ptr', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
add ['eax,', 'ecx']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['word', 'ptr', '[ebp+var_C],', 'ax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+400h],', '7']
jge ['short', 'loc_36A7']
movsx ['eax,', 'word', 'ptr', '[ebp+var_C]']
movsx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
cmp ['eax,', 'ecx']
jge ['short', 'loc_36DC']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+400h],', '0']
push ['offset', '$SG8157']
push ['0CA5h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2Ch]']
jmp ['loc_377E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+400h]']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', 'word', 'ptr', '[ebp+var_C]']
mov ['[edx+ecx*4+3C4h],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+400h]']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', 'word', 'ptr', '[ebp+var_8]']
mov ['[eax+edx*4+3C6h],', 'cx']
movsx ['edx,', 'word', 'ptr', '[ebp+var_C]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+400h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx*4+3C2h],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+400h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+400h],', 'edx']
jmp ['short', 'loc_3777']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+5Ch],', '0']
jz ['short', 'loc_3762']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Draw_Sweep']
add ['esp,', '4']
movsx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_3762']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+2Ch]']
jmp ['short', 'loc_377E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+400h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+400h],', 'eax']
jmp ['loc_35AB']
xor ['eax,', 'eax']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Render_Glyph	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+90h]']
and ['ecx,', '100h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Set_High_Precision']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+18h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+90h]']
and ['ecx,', '8']
jz ['short', 'loc_37E6']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+0B4h],', '2']
jmp ['short', 'loc_382E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+90h]']
and ['ecx,', '10h']
jz ['short', 'loc_3800']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+0B4h],', '4']
jmp ['short', 'loc_380A']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+0B4h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+90h]']
and ['edx,', '20h']
jnz ['short', 'loc_382E']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0B4h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0B4h],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+90h]']
and ['ecx,', '200h']
jnz ['short', 'loc_3845']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
jmp ['short', 'loc_3849']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['[edx+0B5h],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0A4h],', 'offset', '_Vertical_Sweep_Init']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0A8h],', 'offset', '_Vertical_Sweep_Span']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0ACh],', 'offset', '_Vertical_Sweep_Drop']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0B0h],', 'offset', '_Vertical_Sweep_Step']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+400h],', '0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx+3C0h],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+68h]']
sub ['edx,', '1']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx+3C2h],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['ax,', '[edx+6Ch]']
mov ['[ecx+38h],', 'ax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+74h]']
mov ['[ecx+3Ch],', 'eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Render_Single_Pass']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_3900']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_39B5']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'byte', 'ptr', '[edx+0B5h]']
test ['eax,', 'eax']
jz ['loc_39B3']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0B4h]']
cmp ['edx,', '2']
jz ['loc_39B3']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0A4h],', 'offset', '_Horizontal_Sweep_Init']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0A8h],', 'offset', '_Horizontal_Sweep_Span']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0ACh],', 'offset', '_Horizontal_Sweep_Drop']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0B0h],', 'offset', '_Horizontal_Sweep_Step']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+400h],', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+eax+3C0h],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+6Ch]']
sub ['ecx,', '1']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+eax+3C2h],', 'cx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Render_Single_Pass']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_39B3']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_39B5']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_Render_Gray_Glyph proc	near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
push ['offset', '$SG8184']
push ['0D62h']
push ['13h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '13h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
endp
_ft_black_init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
pop ['ebp']
retn
align ['10h']
endp
_ft_black_new	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['18h']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3A6F']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_black_init']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5']
dd ['offset', '$LN4']
align ['10h']
endp
_ft_black_done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_3AC4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_black_reset	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_3B5D']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_3B40']
cmp ['[ebp+arg_8],', '0C04h']
jl ['short', 'loc_3B40']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '408h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
sub ['eax,', '[ecx]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+0Ch],', 'ecx']
jmp ['short', 'loc_3B5D']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_black_set_mode proc	near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['10h']
endp
_ft_black_render proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_3BCF']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_3BCF']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jnz ['short', 'loc_3BEB']
push ['offset', '$SG8249']
push ['0E00h']
push ['60h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '60h']
jmp ['loc_3DC5']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_3C0D']
push ['offset', '$SG8251']
push ['0E03h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_3DC5']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3C22']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx]']
test ['eax,', 'eax']
jg ['short', 'loc_3C29']
xor ['eax,', 'eax']
jmp ['loc_3DC5']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jz ['short', 'loc_3C3B']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jnz ['short', 'loc_3C57']
push ['offset', '$SG8256']
push ['0E0Ah']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_3DC5']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx]']
mov ['edx,', '[ebp+var_4]']
mov ['edx,', '[edx+0Ch]']
movsx ['eax,', 'word', 'ptr', '[edx+eax*2-2]']
add ['eax,', '1']
cmp ['ecx,', 'eax']
jz ['short', 'loc_3C92']
push ['offset', '$SG8258']
push ['0E0Eh']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_3DC5']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '2']
jz ['short', 'loc_3CC2']
push ['offset', '$SG8260']
push ['0E14h']
push ['13h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '13h']
jmp ['loc_3DC5']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3CE4']
push ['offset', '$SG8262']
push ['0E17h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_3DC5']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['short', 'loc_3CF5']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_3CFC']
xor ['eax,', 'eax']
jmp ['loc_3DC5']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jnz ['short', 'loc_3D21']
push ['offset', '$SG8266']
push ['0E1Eh']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_3DC5']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '80h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['ecx,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[eax+10h]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '68h']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[edx+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[edx+10h]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[edx+14h]']
mov ['[ecx+14h],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax+1Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+1Ch]']
lea ['ecx,', '[eax+ecx*4]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+20h],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '1']
jz ['short', 'loc_3DB3']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_Render_Gray_Glyph']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_3DC2']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_Render_Glyph']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_raster1_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0A8h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0A4h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[eax+38h]']
mov ['edx,', '[ecx+8]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_raster1_set_mode proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+38h]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
endp
_ft_raster1_transform proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+48h]']
cmp ['edx,', '[ecx+10h]']
jz ['short', 'loc_3EB9']
push ['offset', '$SG8404']
push ['46h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_4],', 'eax']
jmp ['short', '$Exit$6']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_3ED2']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '6Ch']
push ['ecx']
call ['_FT_Outline_Transform']
add ['esp,', '8']
cmp ['[ebp+arg_C],', '0']
jz ['short', '$Exit$6']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '6Ch']
push ['eax']
call ['_FT_Outline_Translate']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
endp
_ft_raster1_get_cbox proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['10h']
push ['0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+48h]']
cmp ['eax,', '[edx+10h]']
jnz ['short', 'loc_3F44']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '6Ch']
push ['edx']
call ['_FT_Outline_Get_CBox']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
endp
_ft_raster1_render proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '78h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_78]']
mov ['ecx,', '1Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+48h]']
cmp ['edx,', '[ecx+10h]']
jz ['short', 'loc_3F9B']
push ['offset', '$SG8437']
push ['76h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_C],', 'eax']
jmp ['$Exit$25']
cmp ['[ebp+arg_8],', '2']
jz ['short', 'loc_3FCB']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0Ch],', 'offset', '_ft_raster1_renderer_class']
jnz ['short', 'loc_3FC9']
push ['offset', '$SG8441']
push ['80h']
push ['13h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '13h']
jmp ['loc_4246']
jmp ['short', 'loc_3FF3']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0Ch],', 'offset', '_ft_raster5_renderer_class']
jnz ['short', 'loc_3FF3']
push ['offset', '$SG8444']
push ['86h']
push ['13h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '13h']
jmp ['loc_4246']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '6Ch']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_401B']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_FT_Outline_Translate']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_FT_Outline_Get_CBox']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '20h']
and ['edx,', '0FFFFFFC0h']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_20]']
sub ['edx,', '[ebp+var_28]']
sar ['edx,', '6']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_1C]']
sub ['eax,', '[ebp+var_24]']
sar ['eax,', '6']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_30],', '0FFFFh']
ja ['short', 'loc_4085']
cmp ['[ebp+var_34],', '0FFFFh']
jbe ['short', 'loc_40A4']
push ['offset', '$SG8450']
push ['0B7h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_C],', 'eax']
jmp ['$Exit$25']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '4Ch']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+9Ch]']
mov ['eax,', '[edx+4]']
and ['eax,', '1']
jz ['short', 'loc_4103']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_3C]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_40C7']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx+4]']
and ['edx,', '0FFFFFFFEh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+9Ch]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '2']
jnz ['short', 'loc_412C']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '3']
and ['eax,', '0FFFFFFFCh']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['byte', 'ptr', '[ecx+12h],', '2']
mov ['edx,', '100h']
mov ['eax,', '[ebp+var_3C]']
mov ['[eax+10h],', 'dx']
jmp ['short', 'loc_4141']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '0Fh']
shr ['ecx,', '4']
shl ['ecx,', '1']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
mov ['byte', 'ptr', '[edx+12h],', '1']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
mov ['eax,', '[ebp+var_34]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+8],', 'edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ecx+0Ch],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_4188']
jmp ['$Exit$25']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+9Ch]']
mov ['ecx,', '[eax+4]']
or ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+9Ch]']
mov ['[eax+4],', 'ecx']
mov ['ecx,', '[ebp+var_24]']
neg ['ecx']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
neg ['edx']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_FT_Outline_Translate']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_74],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_70],', 'edx']
mov ['[ebp+var_6C],', '0']
mov ['eax,', '[ebp+var_3C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+12h]']
cmp ['ecx,', '2']
jnz ['short', 'loc_41E3']
mov ['edx,', '[ebp+var_6C]']
or ['edx,', '1']
mov ['[ebp+var_6C],', 'edx']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_74]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_FT_Outline_Translate']
add ['esp,', '0Ch']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_4221']
jmp ['short', '$Exit$25']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+48h],', '62697473h']
mov ['eax,', '[ebp+var_28]']
sar ['eax,', '6']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+64h],', 'eax']
mov ['edx,', '[ebp+var_1C]']
sar ['edx,', '6']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+68h],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '78h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN23']
dd ['offset', '$LN20']
dd ['0FFFFFFD8h,', '10h']
dd ['offset', '$LN21']
dd ['0FFFFFF8Ch,', '30h']
dd ['offset', '$LN22']
align ['4']
assume ['cs:_data']
align ['4']
align ['4']
align ['10h']
align ['4']
align ['4']
align ['4']
align ['10h']
align ['4']
align ['10h']
align ['4']
align ['4']
align ['4']
align ['10h']
align ['4']
align ['4']
align ['10h']
align ['4']
align ['4']
align ['4']
align ['10h']
align ['4']
align ['4']
align ['4']
align ['10h']
align ['4']
align ['4']
align ['4']
align ['10h']
align ['4']
assume ['cs:_rdata']
public ['_ft_raster1_renderer_class']
dd ['offset', '$SG8475']
dd ['10000h,', '20000h,', '0']
dd ['offset', '_ft_raster1_init']
dd ['2', 'dup(0)']
dd ['6F75746Ch']
dd ['offset', '_ft_raster1_render']
dd ['offset', '_ft_raster1_transform']
dd ['offset', '_ft_raster1_get_cbox']
dd ['offset', '_ft_raster1_set_mode']
dd ['offset', '_ft_standard_raster']
public ['_ft_raster5_renderer_class']
dd ['offset', '$SG8485']
dd ['10000h,', '20000h,', '0']
dd ['offset', '_ft_raster1_init']
dd ['2', 'dup(0)']
dd ['6F75746Ch']
dd ['offset', '_ft_raster1_render']
dd ['offset', '_ft_raster1_transform']
dd ['offset', '_ft_raster1_get_cbox']
dd ['offset', '_ft_raster1_set_mode']
dd ['offset', '_ft_standard_raster']
public ['_ft_standard_raster']
dd ['offset', '_ft_black_new']
dd ['offset', '_ft_black_reset']
dd ['offset', '_ft_black_set_mode']
dd ['offset', '_ft_black_render']
dd ['offset', '_ft_black_done']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_memset:near']
extrn ['_FT_MulDiv:near']
extrn ['_ft_mem_alloc:near']
extrn ['_ft_mem_realloc:near']
extrn ['_ft_mem_free:near']
extrn ['_FT_MulDiv_No_Round:near']
extrn ['_FT_Message:near']
extrn ['_FT_Throw:near']
extrn ['_FT_Outline_Get_CBox:near']
extrn ['_FT_Outline_Translate:near']
extrn ['_FT_Outline_Transform:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['_ft_trace_levels:near']
extrn ['___security_cookie:near']
end
