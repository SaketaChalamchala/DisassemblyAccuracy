endp
_FT_New_Face	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_38BD']
push ['offset', '$SG9816']
push ['4CBh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_38E9']
mov ['[ebp+var_24],', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Open_Face']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5']
dd ['offset', '$LN4']
align ['4']
endp
_FT_New_Memory_Face proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_395D']
push ['offset', '$SG9832']
push ['4E5h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_398F']
mov ['[ebp+var_24],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Open_Face']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN5_0']
dd ['offset', '$LN4_0']
db ['0Fh', 'dup(0CCh)']
endp
_FT_Open_Face	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '68h']
push ['edi']
lea ['edi,', '[ebp+var_68]']
mov ['ecx,', '1Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_30],', '0']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_3A1D']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_3A23']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_3A3F']
push ['offset', '$SG10358']
push ['824h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_3FCD']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
and ['ecx,', '2']
jz ['short', 'loc_3A58']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+10h],', '0']
jz ['short', 'loc_3A58']
mov ['[ebp+var_65],', '1']
jmp ['short', 'loc_3A5C']
mov ['[ebp+var_65],', '0']
mov ['al,', '[ebp+var_65]']
mov ['[ebp+var_31],', 'al']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_New']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3A84']
jmp ['$Fail3$69']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
and ['ecx,', '8']
jz ['loc_3B50']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['loc_3B50']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax]']
and ['ecx,', '1']
jz ['short', 'loc_3B1B']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_44],', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
and ['eax,', '10h']
jz ['short', 'loc_3AE6']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_44],', 'ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
movzx ['eax,', '[ebp+var_31]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_open_face']
add ['esp,', '1Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3B19']
jmp ['$Success$70']
jmp ['short', 'loc_3B35']
push ['offset', '$SG10372']
push ['849h']
push ['20h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '20h']
mov ['[ebp+var_8],', 'eax']
movzx ['eax,', '[ebp+var_31]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_FT_Stream_Free']
add ['esp,', '8']
jmp ['$Fail$71']
jmp ['$Success$70']
mov ['[ebp+var_8],', '0Bh']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '14h']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_38]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_3C],', 'eax']
jmp ['short', 'loc_3B7A']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '4']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_38]']
cmp ['edx,', '[ebp+var_3C]']
jnb ['$Fail3$69']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx+ecx]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx]']
and ['edx,', '1']
jz ['loc_3CAA']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_4C],', '0']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx+ecx]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
and ['edx,', '10h']
jz ['short', 'loc_3BDC']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_4C],', 'eax']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
movzx ['edx,', '[ebp+var_31]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_open_face']
add ['esp,', '1Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3C0F']
jmp ['$Success$70']
push ['offset', '$SG10386']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_3C9B']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '0FFh']
cmp ['edx,', '8Eh']
jnz ['short', 'loc_3C9B']
push ['0']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_3C59']
jmp ['short', '$Fail3$69']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_open_face_PS_from_sfnt_stream']
add ['esp,', '18h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3C9B']
movzx ['ecx,', '[ebp+var_31]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_FT_Stream_Free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_3FCD']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0FFh']
cmp ['eax,', '2']
jz ['short', 'loc_3CAA']
jmp ['short', '$Fail3$69']
jmp ['loc_3B71']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '0FFh']
cmp ['ecx,', '51h']
jz ['short', 'loc_3CDA']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '0FFh']
cmp ['edx,', '2']
jz ['short', 'loc_3CDA']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0FFh']
cmp ['eax,', '55h']
jz ['short', 'loc_3CDA']
jmp ['short', '$Fail2$72']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_load_mac_face']
add ['esp,', '14h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_3D18']
movzx ['eax,', '[ebp+var_31]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_FT_Stream_Free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_3FCD']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '0FFh']
cmp ['edx,', '2']
jz ['short', 'loc_3D28']
jmp ['short', '$Fail2$72']
push ['offset', '$SG10394']
push ['8A2h']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
movzx ['eax,', '[ebp+var_31]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_FT_Stream_Free']
add ['esp,', '8']
jmp ['$Fail$71']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_3D76']
push ['offset', '$SG10399']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', '$Success$70']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0Ch']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3D9A']
jmp ['$Fail$71']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ebp+var_28]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ecx+60h]']
add ['edx,', '10h']
push ['edx']
call ['_FT_List_Add']
add ['esp,', '8']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_3DD7']
push ['offset', '$SG10406']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_3DB9']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_3E46']
push ['0']
mov ['eax,', '[ebp+var_28]']
push ['eax']
call ['_FT_New_GlyphSlot']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3DFD']
jmp ['$Fail$71']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_3E1B']
push ['offset', '$SG10415']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_3DFD']
lea ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
call ['_FT_New_Size']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3E3D']
jmp ['$Fail$71']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_54]']
mov ['[eax+58h],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[edx+8]']
and ['eax,', '1']
jz ['short', 'loc_3E85']
mov ['ecx,', '[ebp+var_28]']
movsx ['edx,', 'word', 'ptr', '[ecx+4Ah]']
test ['edx,', 'edx']
jge ['short', 'loc_3E6C']
mov ['eax,', '[ebp+var_28]']
movsx ['ecx,', 'word', 'ptr', '[eax+4Ah]']
neg ['ecx']
mov ['edx,', '[ebp+var_28]']
mov ['[edx+4Ah],', 'cx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '20h']
jnz ['short', 'loc_3E85']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_28]']
mov ['cx,', '[eax+4Ah]']
mov ['[edx+4Eh],', 'cx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[edx+8]']
and ['eax,', '2']
jz ['short', 'loc_3F07']
mov ['[ebp+var_5C],', '0']
jmp ['short', 'loc_3EA2']
mov ['ecx,', '[ebp+var_5C]']
add ['ecx,', '1']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_5C]']
cmp ['eax,', '[edx+1Ch]']
jge ['short', 'loc_3F07']
mov ['ecx,', '[ebp+var_5C]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+var_28]']
add ['ecx,', '[edx+20h]']
mov ['[ebp+var_60],', 'ecx']
mov ['eax,', '[ebp+var_60]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jge ['short', 'loc_3ED4']
mov ['edx,', '[ebp+var_60]']
movsx ['eax,', 'word', 'ptr', '[edx]']
neg ['eax']
mov ['ecx,', '[ebp+var_60]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_60]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jge ['short', 'loc_3EEE']
mov ['eax,', '[ebp+var_60]']
mov ['ecx,', '[eax+8]']
neg ['ecx']
movsx ['edx,', 'cx']
mov ['eax,', '[ebp+var_60]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_60]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jge ['short', 'loc_3F05']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[edx+0Ch]']
neg ['eax']
mov ['ecx,', '[ebp+var_60]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_3E99']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[edx+80h]']
mov ['[ebp+var_64],', 'eax']
mov ['ecx,', '[ebp+var_64]']
mov ['dword', 'ptr', '[ecx],', '(offset', 'loc_FFFE+2)']
mov ['edx,', '[ebp+var_64]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_64]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_64]']
mov ['dword', 'ptr', '[ecx+0Ch],', '(offset', 'loc_FFFE+2)']
mov ['edx,', '[ebp+var_64]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['eax,', '[ebp+var_64]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_64]']
mov ['dword', 'ptr', '[ecx+38h],', '1']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_3F68']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_28]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_3F74']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['_FT_Done_Face']
add ['esp,', '4']
jmp ['short', '$Exit$73']
cmp ['[ebp+var_30],', '0']
jz ['short', 'loc_3F8A']
mov ['edx,', '[ebp+var_28]']
push ['edx']
call ['_FT_Done_Face']
add ['esp,', '4']
jmp ['short', '$Exit$73']
cmp ['[ebp+var_28],', '0']
jz ['short', '$Exit$73']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_destroy_face']
add ['esp,', '0Ch']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '4']
jl ['short', 'loc_3FC6']
mov ['edx,', '[ebp+var_8]']
push ['edx']
push ['offset', '$SG10444']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', '$Exit$73']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN68']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '68h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN67']
dd ['offset', '$LN63']
dd ['0FFFFFFE4h,', '4']
dd ['offset', '$LN64']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN65']
dd ['0FFFFFFACh,', '4']
dd ['offset', '$LN66']
db ['9', 'dup(0CCh)']
endp
_FT_Attach_File	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_407D']
push ['offset', '$SG10452']
push ['91Bh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_40A1']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_24],', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Attach_Stream']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5_1']
dd ['offset', '$LN4_1']
db ['0Bh', 'dup(0CCh)']
endp
_FT_Attach_Stream proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_412B']
push ['offset', '$SG10465']
push ['935h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_41E1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_4156']
push ['offset', '$SG10467']
push ['939h']
push ['22h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '22h']
jmp ['loc_41E1']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_FT_Stream_New']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_4178']
jmp ['short', '$Exit$12']
mov ['[ebp+var_10],', '7']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[edx+50h],', '0']
jz ['short', 'loc_41B0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+50h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jz ['short', 'loc_41C9']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
and ['eax,', '2']
jz ['short', 'loc_41C9']
mov ['byte', 'ptr', '[ebp+var_1C+3],', '1']
jmp ['short', 'loc_41CD']
mov ['byte', 'ptr', '[ebp+var_1C+3],', '0']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_1C+3]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_FT_Stream_Free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN10']
dd ['offset', '$LN9']
db ['9', 'dup(0CCh)']
endp
_FT_Reference_Face proc	near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_424A']
push ['offset', '$SG10476']
push ['957h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['short', 'loc_4267']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ecx+38h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['[ecx+38h],', 'edx']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_Done_Face	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '23h']
cmp ['[ebp+arg_0],', '0']
jz ['loc_4357']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+60h],', '0']
jz ['loc_4357']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[edx+38h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
cmp ['dword', 'ptr', '[ecx+38h],', '0']
jle ['short', 'loc_42E0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_4357']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '10h']
push ['ecx']
call ['_FT_List_Find']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_4357']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '10h']
push ['eax']
call ['_FT_List_Remove']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_10],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_4321']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_destroy_face']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_FT_Select_Size	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_4395']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '2']
jnz ['short', 'loc_43B1']
push ['offset', '$SG10753']
push ['0B19h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_461B']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_43C2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+1Ch]']
jl ['short', 'loc_43DE']
push ['offset', '$SG10756']
push ['0B1Ch']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_461B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+5Ch],', '0']
jz ['loc_4609']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+5Ch]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
add ['edx,', '0Ch']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_4443']
push ['offset', '$SG10765']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_4425']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_4484']
mov ['edx,', '[ebp+var_C]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+4]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
push ['ecx']
push ['offset', '$SG10770']
call ['_FT_Message']
add ['esp,', '10h']
xor ['edx,', 'edx']
jnz ['short', 'loc_4447']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_44C5']
mov ['edx,', '[ebp+var_C]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+8]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
push ['ecx']
push ['offset', '$SG10775']
call ['_FT_Message']
add ['esp,', '10h']
xor ['edx,', 'edx']
jnz ['short', 'loc_4488']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_44FF']
mov ['edx,', '[ebp+var_C]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+0Ch]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10780']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_44C9']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_4539']
mov ['eax,', '[ebp+var_C]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[eax+10h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10785']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4503']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_4573']
mov ['ecx,', '[ebp+var_C]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[ecx+14h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10790']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_453D']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_45AD']
mov ['edx,', '[ebp+var_C]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+18h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10795']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_4577']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_45D6']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
push ['offset', '$SG10800']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_45B1']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_4600']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
push ['eax']
push ['offset', '$SG10805']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_45DA']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_461B']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Select_Metrics']
add ['esp,', '8']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_FT_Request_Size proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_467B']
push ['offset', '$SG10815']
push ['0B4Eh']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_4940']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_469B']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jl ['short', 'loc_469B']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jl ['short', 'loc_469B']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx],', '5']
jl ['short', 'loc_46B7']
push ['offset', '$SG10818']
push ['0B52h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_4940']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+58h],', '0']
jz ['loc_48E2']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+58h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
add ['ecx,', '0Ch']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_471C']
push ['offset', '$SG10826']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_46FE']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_475D']
mov ['ecx,', '[ebp+var_18]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[ecx+4]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
push ['eax']
push ['offset', '$SG10831']
call ['_FT_Message']
add ['esp,', '10h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4720']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_479E']
mov ['ecx,', '[ebp+var_18]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[ecx+8]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+8]']
push ['eax']
push ['offset', '$SG10836']
call ['_FT_Message']
add ['esp,', '10h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4761']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_47D8']
mov ['ecx,', '[ebp+var_18]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[ecx+0Ch]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10841']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_47A2']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_4812']
mov ['edx,', '[ebp+var_18]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+10h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10846']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_47DC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_484C']
mov ['eax,', '[ebp+var_18]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[eax+14h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10851']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_4816']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_4886']
mov ['ecx,', '[ebp+var_18]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[ecx+18h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10856']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_4850']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_48AF']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'word', 'ptr', '[edx]']
push ['eax']
push ['offset', '$SG10861']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_488A']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_48D9']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
push ['edx']
push ['offset', '$SG10866']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_48B3']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_4940']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
and ['edx,', '1']
jnz ['short', 'loc_492E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '2']
jz ['short', 'loc_492E']
lea ['edx,', '[ebp+var_C]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Match_Size']
add ['esp,', '10h']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_491C']
mov ['eax,', '[ebp+var_1C]']
jmp ['short', 'loc_4940']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Select_Size']
add ['esp,', '8']
jmp ['short', 'loc_4940']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Request_Metrics']
add ['esp,', '8']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN47']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN46']
dd ['offset', '$LN45']
align ['8']
endp
_FT_Set_Char_Size proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_49C3']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_49CF']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_49CF']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_49DD']
mov ['edx,', '[ebp+arg_10]']
mov ['[ebp+arg_C],', 'edx']
jmp ['short', 'loc_49E9']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_49E9']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+arg_10],', 'eax']
cmp ['[ebp+arg_4],', '40h']
jge ['short', 'loc_49F6']
mov ['[ebp+arg_4],', '40h']
cmp ['[ebp+arg_8],', '40h']
jge ['short', 'loc_4A03']
mov ['[ebp+arg_8],', '40h']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_4A16']
mov ['[ebp+arg_10],', '48h']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ebp+arg_C],', 'ecx']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['[ebp+var_C],', 'edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Request_Size']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN13']
dd ['offset', '$LN12']
endp
_FT_Set_Pixel_Sizes proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_4AC3']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_4ACF']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_4ACF']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+arg_4],', '1']
jnb ['short', 'loc_4ADC']
mov ['[ebp+arg_4],', '1']
cmp ['[ebp+arg_8],', '1']
jnb ['short', 'loc_4AE9']
mov ['[ebp+arg_8],', '1']
cmp ['[ebp+arg_4],', '0FFFFh']
jb ['short', 'loc_4AF9']
mov ['[ebp+arg_4],', '0FFFFh']
cmp ['[ebp+arg_8],', '0FFFFh']
jb ['short', 'loc_4B09']
mov ['[ebp+arg_8],', '0FFFFh']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+arg_4]']
shl ['edx,', '6']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '6']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_C],', '0']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Request_Size']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11_0']
dd ['offset', '$LN10_0']
endp
_FT_Load_Glyph	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_11],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_4BC1']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+58h],', '0']
jz ['short', 'loc_4BC1']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+54h],', '0']
jnz ['short', 'loc_4BDD']
push ['offset', '$SG9552']
push ['25Fh']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_5113']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_glyphslot_clear']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0A0h]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '400h']
jz ['short', 'loc_4C26']
mov ['ecx,', '[ebp+arg_8]']
or ['ecx,', '801h']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '1']
jz ['short', 'loc_4C40']
mov ['eax,', '[ebp+arg_8]']
or ['eax,', '0Ah']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0FFFFFFFBh']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+var_18],', '0']
jz ['loc_4D66']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '2']
jnz ['loc_4D66']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '8000h']
jnz ['loc_4D66']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '100h']
jz ['loc_4D66']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '200h']
jnz ['loc_4D66']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
and ['edx,', '2000h']
jnz ['loc_4D66']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '800h']
jnz ['short', 'loc_4CE6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jnz ['short', 'loc_4CC1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_4CE6']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+80h]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['loc_4D66']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['loc_4D66']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '20h']
jnz ['short', 'loc_4CFC']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '400h']
jnz ['short', 'loc_4D02']
mov ['[ebp+var_11],', '1']
jmp ['short', 'loc_4D66']
mov ['ecx,', '[ebp+arg_8]']
sar ['ecx,', '10h']
and ['ecx,', '0Fh']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '1']
jz ['short', 'loc_4D62']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+80h]']
movzx ['ecx,', 'byte', 'ptr', '[eax+34h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_4D62']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
and ['eax,', '8']
jz ['short', 'loc_4D66']
mov ['ecx,', '[ebp+var_1C]']
cmp ['dword', 'ptr', '[ecx+2B8h],', '0']
jz ['short', 'loc_4D66']
mov ['edx,', '[ebp+var_1C]']
movzx ['eax,', 'word', 'ptr', '[edx+11Eh]']
test ['eax,', 'eax']
jnz ['short', 'loc_4D66']
mov ['ecx,', '[ebp+var_1C]']
cmp ['dword', 'ptr', '[ecx+274h],', '0']
jnz ['short', 'loc_4D66']
mov ['edx,', '[ebp+var_1C]']
cmp ['dword', 'ptr', '[edx+27Ch],', '0']
jnz ['short', 'loc_4D66']
mov ['[ebp+var_11],', '1']
movzx ['eax,', '[ebp+var_11]']
test ['eax,', 'eax']
jz ['loc_4E32']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
and ['edx,', '2']
jz ['short', 'loc_4DCF']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '8']
jnz ['short', 'loc_4DCF']
mov ['ecx,', '[ebp+arg_8]']
or ['ecx,', '4000h']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ecx+48h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_4DCF']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+48h],', '62697473h']
jnz ['short', 'loc_4DCF']
jmp ['$Load_Ok$51']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_24],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_2C]']
mov ['[edx+18h],', 'eax']
jmp ['short', '$Load_Ok$51']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ecx+48h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_4E6A']
jmp ['$Exit$52']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+48h],', '6F75746Ch']
jnz ['short', '$Load_Ok$51']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '6Ch']
push ['ecx']
call ['_FT_Outline_Check']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_4E93']
jmp ['$Exit$52']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '2']
jnz ['short', '$Load_Ok$51']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '10h']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_ft_glyphslot_grid_fit_metrics']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '10h']
jz ['short', 'loc_4ECE']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax+40h],', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+34h]']
mov ['[ecx+44h],', 'eax']
jmp ['short', 'loc_4EE4']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+28h]']
mov ['[ecx+40h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[ecx+44h],', '0']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '2000h']
jnz ['short', 'loc_4F42']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '1']
jz ['short', 'loc_4F42']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
add ['eax,', '0Ch']
mov ['[ebp+var_30],', 'eax']
push ['40h']
mov ['ecx,', '[ebp+var_30]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+38h],', 'eax']
push ['40h']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+3Ch]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+3Ch],', 'eax']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '800h']
jnz ['loc_5013']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_34]']
cmp ['dword', 'ptr', '[edx+18h],', '0']
jz ['loc_5013']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_ft_lookup_glyph_renderer']
add ['esp,', '4']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jz ['short', 'loc_4FAE']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '10h']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[eax+2Ch]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_5000']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx+48h],', '6F75746Ch']
jnz ['short', 'loc_5000']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[eax+18h]']
and ['ecx,', '1']
jz ['short', 'loc_4FD8']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '6Ch']
push ['eax']
call ['_FT_Outline_Transform']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+18h]']
and ['edx,', '2']
jz ['short', 'loc_5000']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '6Ch']
push ['ecx']
call ['_FT_Outline_Translate']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '40h']
push ['eax']
call ['_FT_Vector_Transform']
add ['esp,', '8']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_5038']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+40h]']
push ['ecx']
push ['offset', '$SG9601']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_5013']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_5061']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+44h]']
push ['eax']
push ['offset', '$SG9606']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_503C']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_508A']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+38h]']
push ['edx']
push ['offset', '$SG9611']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_5065']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_50B3']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
push ['offset', '$SG9616']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_508E']
cmp ['[ebp+var_4],', '0']
jnz ['short', '$Exit$52']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+48h],', '62697473h']
jz ['short', '$Exit$52']
mov ['ecx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[ecx+48h],', '636F6D70h']
jz ['short', '$Exit$52']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '4']
jz ['short', '$Exit$52']
mov ['eax,', '[ebp+arg_8]']
sar ['eax,', '10h']
and ['eax,', '0Fh']
mov ['[ebp+var_3C],', 'eax']
jnz ['short', 'loc_50FD']
mov ['ecx,', '[ebp+arg_8]']
and ['ecx,', '1000h']
jz ['short', 'loc_50FD']
mov ['[ebp+var_3C],', '2']
mov ['edx,', '[ebp+var_3C]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_Render_Glyph']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['edi']
pop ['esi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Load_Char	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5152']
push ['offset', '$SG9630']
push ['356h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['short', 'loc_5188']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+5Ch],', '0']
jz ['short', 'loc_5174']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Get_Char_Index']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Load_Glyph']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Set_Transform proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_51AE']
jmp ['loc_529B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+18h],', '0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_51F9']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '(offset', 'loc_FFFE+2)']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '(offset', 'loc_FFFE+2)']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+arg_4],', 'ecx']
jmp ['short', 'loc_5215']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[edx+4]']
mov ['[eax+4],', 'ecx']
mov ['ecx,', '[edx+8]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[edx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax+4]']
or ['edx,', '[ecx+8]']
jnz ['short', 'loc_523A']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '(offset', 'loc_FFFE+2)']
jnz ['short', 'loc_523A']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '(offset', 'loc_FFFE+2)']
jz ['short', 'loc_5249']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
or ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+18h],', 'eax']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_526E']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+arg_8],', 'ecx']
jmp ['short', 'loc_527F']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+10h],', 'eax']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[eax]']
or ['edx,', '[ecx+4]']
jz ['short', 'loc_529B']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
or ['ecx,', '2']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+18h],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_Render_Glyph proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_52C2']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_52DB']
push ['offset', '$SG11697']
push ['105Ah']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_52FE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+60h]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_FT_Render_Glyph_Internal']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_FT_Get_Kerning	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5356']
push ['offset', '$SG10921']
push ['0BEAh']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_54AD']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_5378']
push ['offset', '$SG10923']
push ['0BEDh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_54AD']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
cmp ['dword', 'ptr', '[edx+4Ch],', '0']
jz ['loc_54AA']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+4Ch]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['loc_54AA']
cmp ['[ebp+arg_C],', '2']
jz ['loc_54AA']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+4],', 'eax']
cmp ['[ebp+arg_C],', '1']
jz ['loc_54AA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '19h']
jge ['short', 'loc_5457']
push ['19h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Eh]']
cmp ['ecx,', '19h']
jge ['short', 'loc_5488']
push ['19h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Eh]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+4]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_FT_Get_Track_Kerning proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5509']
push ['offset', '$SG10942']
push ['0C25h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_55BA']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_552B']
push ['offset', '$SG10944']
push ['0C28h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_55BA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jz ['short', 'loc_5568']
mov ['esi,', 'esp']
push ['offset', '$SG10954']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+20h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_552B']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5591']
push ['offset', '$SG10956']
push ['0C2Ch']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['short', 'loc_55BA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_FT_Get_Glyph_Name proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5618']
push ['offset', '$SG11328']
push ['0E3Bh']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_578F']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_5624']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_5640']
push ['offset', '$SG11331']
push ['0E3Eh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_578F']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[edx+ecx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+10h]']
jl ['short', 'loc_5676']
push ['offset', '$SG11335']
push ['0E44h']
push ['10h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '10h']
jmp ['loc_578F']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
and ['eax,', '200h']
jnz ['short', 'loc_569F']
push ['offset', '$SG11337']
push ['0E47h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_578F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0FFFFFFFEh']
jnz ['short', 'loc_56BD']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_572E']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_572E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
mov ['[ebp+var_10],', 'edx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
cmp ['dword', 'ptr', '[ecx+20h],', '0']
jz ['short', 'loc_5700']
mov ['esi,', 'esp']
push ['offset', '$SG11359']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+20h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'eax']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_56C3']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_5718']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_571F']
mov ['[ebp+var_18],', '0FFFFFFFEh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+24h],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
xor ['ecx,', 'ecx']
jnz ['loc_569F']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_5772']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_5772']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_578C']
push ['offset', '$SG11367']
push ['0E4Dh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_Get_Postscript_Name	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_57D8']
jmp ['$Exit$18']
cmp ['[ebp+var_4],', '0']
jnz ['$Exit$18']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+80h]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0FFFFFFFEh']
jnz ['short', 'loc_5800']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_5871']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_5871']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jz ['short', 'loc_5843']
mov ['esi,', 'esp']
push ['offset', '$SG11398']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+20h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_5806']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_585B']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_5862']
mov ['[ebp+var_18],', '0FFFFFFFEh']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+80h]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+1Ch],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
xor ['eax,', 'eax']
jnz ['loc_57E2']
cmp ['[ebp+var_8],', '0']
jz ['short', '$Exit$18']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', '$Exit$18']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_FT_Select_Charmap proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_58FE']
push ['offset', '$SG10965']
push ['0C42h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_59CB']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_5920']
push ['offset', '$SG10967']
push ['0C45h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_59CB']
cmp ['[ebp+arg_4],', '756E6963h']
jnz ['short', 'loc_593A']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_find_unicode_charmap']
add ['esp,', '4']
jmp ['loc_59CB']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5962']
push ['offset', '$SG10970']
push ['0C50h']
push ['26h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '26h']
jmp ['short', 'loc_59CB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_597C']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_59B4']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx]']
mov ['ecx,', '[eax+4]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_59B2']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+eax]']
mov ['[ecx+5Ch],', 'eax']
xor ['eax,', 'eax']
jmp ['short', 'loc_59CB']
jmp ['short', 'loc_5973']
push ['offset', '$SG10975']
push ['0C5Dh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_FT_Set_Charmap	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5A1E']
push ['offset', '$SG10984']
push ['0C6Ch']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_5ADF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5A33']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_5A4F']
push ['offset', '$SG10987']
push ['0C70h']
push ['26h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '26h']
jmp ['loc_5ADF']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Get_CMap_Format']
add ['esp,', '4']
cmp ['eax,', '0Eh']
jnz ['short', 'loc_5A79']
push ['offset', '$SG10989']
push ['0C73h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_5ADF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_5A93']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_5AC8']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_5AC6']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+edx]']
mov ['[eax+5Ch],', 'edx']
xor ['eax,', 'eax']
jmp ['short', 'loc_5ADF']
jmp ['short', 'loc_5A8A']
push ['offset', '$SG10994']
push ['0C80h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Get_Charmap_Index proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5B11']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_5B16']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_5B77']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_5B28']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax+24h]']
jge ['short', 'loc_5B4C']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+edx*4]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_5B4A']
jmp ['short', 'loc_5B4C']
jmp ['short', 'loc_5B1F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+24h]']
jl ['short', 'loc_5B70']
push ['offset', '$SG11009']
push ['0C93h']
push ['offset', '$SG11010']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5B4C']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Get_Char_Index proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['loc_5C30']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jz ['short', 'loc_5C30']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5Ch]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jbe ['short', 'loc_5C0E']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_5BE4']
push ['offset', '$SG11097']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_5BC6']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_5C0A']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['offset', '$SG11102']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_5BE8']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Get_First_Char proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_C],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5CBC']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jz ['short', 'loc_5CBC']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jz ['short', 'loc_5CBC']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Get_Char_Index']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_5CA7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[eax+10h]']
jb ['short', 'loc_5CBC']
lea ['edx,', '[ebp+var_C]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Get_Next_Char']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_5CCA']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN8']
dd ['offset', '$LN7']
align ['4']
endp
_FT_Get_Next_Char proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_5DA6']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jz ['short', 'loc_5DA6']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jz ['short', 'loc_5DA6']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['[ebp+var_18],', 'ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+10h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+10h]']
jnb ['short', 'loc_5D5E']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_5D9A']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_5DA0']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_5DB4']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11_1']
dd ['offset', '$LN10_1']
align ['8']
endp
_FT_Get_Name_Index proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['loc_5F0E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '200h']
jz ['loc_5F0E']
cmp ['[ebp+arg_4],', '0']
jz ['loc_5F0E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+80h]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '0FFFFFFFEh']
jnz ['short', 'loc_5E61']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_5ED2']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_5ED2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jz ['short', 'loc_5EA4']
mov ['esi,', 'esp']
push ['offset', '$SG11309']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+20h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_5E67']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_5EBC']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_5EC3']
mov ['[ebp+var_18],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+24h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
jnz ['loc_5E43']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_5F0E']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_5F0E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_Get_SubGlyph_Info proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '6']
cmp ['[ebp+arg_0],', '0']
jz ['loc_5FD7']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+84h],', '0']
jz ['short', 'loc_5FD7']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+48h],', '636F6D70h']
jnz ['short', 'loc_5FD7']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+80h]']
jnb ['short', 'loc_5FD7']
mov ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+84h]']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '10h']
mov ['ecx,', '[ebp+arg_18]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_Face_GetCharVariantIndex proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['loc_611F']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+5Ch],', '0']
jz ['loc_611F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5Ch]']
cmp ['dword', 'ptr', '[edx+4],', '756E6963h']
jnz ['loc_611F']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_find_variant_selector_charmap']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5Ch]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['loc_611F']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jbe ['short', 'loc_60A7']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_607D']
push ['offset', '$SG11156']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_605F']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_60A3']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG11161']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_6081']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jbe ['short', 'loc_60F5']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '1']
jl ['short', 'loc_60CB']
push ['offset', '$SG11167']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_60AD']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '1']
jl ['short', 'loc_60F1']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['offset', '$SG11172']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_60CF']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+14h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Face_GetCharVariantIsDefault proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0FFFFFFFFh']
cmp ['[ebp+arg_0],', '0']
jz ['loc_6249']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_find_variant_selector_charmap']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['loc_6249']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jbe ['short', 'loc_61D2']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '1']
jl ['short', 'loc_61A8']
push ['offset', '$SG11194']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_618A']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '1']
jl ['short', 'loc_61CE']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '$SG11199']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_61AC']
cmp ['[ebp+arg_8],', '0FFFFFFFFh']
jbe ['short', 'loc_6220']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_61F6']
push ['offset', '$SG11205']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_61D8']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '1']
jl ['short', 'loc_621C']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
push ['offset', '$SG11210']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_61FA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+18h]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['ecx,', 'al']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_FT_Face_GetVariantSelectors proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_62D3']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_find_variant_selector_charmap']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_62D3']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_10],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ecx+1Ch]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Face_GetVariantsOfChar proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['loc_63AD']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_find_variant_selector_charmap']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['loc_63AD']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jbe ['short', 'loc_6387']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_635D']
push ['offset', '$SG11246']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_633F']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_6383']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG11251']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_6361']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[eax+20h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_Face_GetCharsOfVariant proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['loc_648D']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_find_variant_selector_charmap']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['loc_648D']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jbe ['short', 'loc_6467']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_643D']
push ['offset', '$SG11273']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_641F']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '1']
jl ['short', 'loc_6463']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG11278']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_6441']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[eax+24h]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_MulDiv	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_64D3']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_64DB']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_65EA']
cmp ['[ebp+arg_0],', '0']
jge ['short', 'loc_64F1']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_64DB']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_650B']
mov ['ecx,', '[ebp+arg_4]']
neg ['ecx']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_64F5']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_6525']
mov ['ecx,', '[ebp+arg_8]']
neg ['ecx']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_650F']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_653B']
mov ['[ebp+arg_0],', '7FFFFFFFh']
jmp ['loc_65D1']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
sar ['edx,', '11h']
mov ['eax,', '1FB66h']
sub ['eax,', 'edx']
cmp ['ecx,', 'eax']
ja ['short', 'loc_656A']
mov ['eax,', '[ebp+arg_0]']
imul ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_8]']
sar ['ecx,', '1']
add ['eax,', 'ecx']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_65D1']
lea ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_multo64']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+arg_8]']
sar ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['_FT_Add64']
add ['esp,', '0Ch']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_65B4']
mov ['eax,', '[ebp+var_10]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_65CB']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_div64by32']
add ['esp,', '0Ch']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_65E1']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_65E7']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN28']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN27']
dd ['offset', '$LN25']
dd ['0FFFFFFE0h,', '8']
dd ['offset', '$LN26']
align ['4']
endp
_FT_MulFix	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_MulFix_i386']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['8']
endp
_FT_DivFix	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+arg_0],', '0']
jge ['short', 'loc_668B']
mov ['eax,', '[ebp+arg_0]']
neg ['eax']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_4]']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_6675']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_66A5']
mov ['eax,', '[ebp+arg_4]']
neg ['eax']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_668F']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_66B8']
mov ['[ebp+var_8],', '7FFFFFFFh']
jmp ['short', 'loc_672D']
mov ['eax,', '[ebp+arg_4]']
sar ['eax,', '11h']
mov ['ecx,', '0FFFFh']
sub ['ecx,', 'eax']
cmp ['[ebp+arg_0],', 'ecx']
jg ['short', 'loc_66E1']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '10h']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '1']
add ['eax,', 'edx']
xor ['edx,', 'edx']
div ['[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_672D']
mov ['eax,', '[ebp+arg_0]']
sar ['eax,', '10h']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '10h']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['edx,', '[ebp+arg_4]']
sar ['edx,', '1']
mov ['[ebp+var_24],', 'edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
call ['_FT_Add64']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_div64by32']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_673D']
mov ['eax,', '[ebp+var_8]']
neg ['eax']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_6743']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19']
dd ['offset', '$LN17']
dd ['0FFFFFFDCh,', '8']
dd ['offset', '$LN18']
align ['8']
endp
_FT_RoundFix	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_67BB']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8000h']
and ['eax,', '0FFFF0000h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_67D1']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
add ['ecx,', '8000h']
and ['ecx,', '0FFFF0000h']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_FT_CeilFix	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_67FB']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0FFFFh']
and ['eax,', '0FFFF0000h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_6811']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
add ['ecx,', '0FFFFh']
and ['ecx,', '0FFFF0000h']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_FT_FloorFix	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_6836']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFFF0000h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_6846']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
and ['ecx,', '0FFFF0000h']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Vector_Transform proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_6879']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_687B']
jmp ['short', 'loc_68EF']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_4],', 'esi']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_8],', 'esi']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+4],', 'ecx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_Library_Version proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_6959']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_6967']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_6975']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_6983']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Add_Module	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_69D1']
push ['offset', '$SG11727']
push ['10AAh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_6C95']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_69F3']
push ['offset', '$SG11729']
push ['10ADh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_6C95']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+10h],', '20005h']
jle ['short', 'loc_6A1B']
push ['offset', '$SG11732']
push ['10B1h']
push ['4']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '4']
jmp ['loc_6C95']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_6A2D']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[edx+10h]']
jnb ['short', 'loc_6AA1']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+14h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_6A9F']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
cmp ['eax,', '[ecx+0Ch]']
jg ['short', 'loc_6A8D']
push ['offset', '$SG11738']
push ['10BBh']
push ['5']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '5']
jmp ['loc_6C95']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Remove_Module']
add ['esp,', '8']
jmp ['short', 'loc_6AA1']
jmp ['short', 'loc_6A24']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+10h],', '20h']
jb ['short', 'loc_6AD8']
push ['offset', '$SG11740']
push ['10C9h']
push ['30h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '30h']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$31']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_6AFD']
jmp ['$Exit$31']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '2']
jz ['short', 'loc_6B3D']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_ft_add_renderer']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_6B3D']
jmp ['$Fail$32']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax]']
and ['ecx,', '4']
jz ['short', 'loc_6B55']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+0A0h],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '1']
jz ['short', 'loc_6B9F']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['[edx+0Ch],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax]']
and ['ecx,', '200h']
jnz ['short', 'loc_6B9F']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '18h']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_FT_GlyphLoader_New']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_6B9F']
jmp ['short', '$Fail$32']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+18h],', '0']
jz ['short', 'loc_6BCB']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_6BCB']
jmp ['short', '$Fail$32']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4+14h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_6C95']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx]']
and ['edx,', '1']
jz ['short', 'loc_6C21']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '200h']
jnz ['short', 'loc_6C21']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+18h]']
push ['edx']
call ['_FT_GlyphLoader_Done']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx]']
and ['edx,', '2']
jz ['short', 'loc_6C75']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jz ['short', 'loc_6C75']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[edx+0Ch]']
cmp ['dword', 'ptr', '[eax+24h],', '6F75746Ch']
jnz ['short', 'loc_6C75']
mov ['ecx,', '[ebp+var_24]']
cmp ['dword', 'ptr', '[ecx+34h],', '0']
jz ['short', 'loc_6C75']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[edx+34h]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+38h]']
mov ['ecx,', '[eax+14h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_14],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_6C75']
jmp ['$Exit$31']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN30']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN29']
dd ['offset', '$LN28_0']
align ['8']
endp
_FT_Get_Module	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_6D06']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_6D0B']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_6D72']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14h']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_6D2E']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_C]']
jnb ['short', 'loc_6D6F']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_6D6D']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_6D6F']
jmp ['short', 'loc_6D25']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_Remove_Module proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6DBF']
push ['offset', '$SG11837']
push ['117Dh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_6E90']
cmp ['[ebp+arg_4],', '0']
jz ['loc_6E79']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_6DEC']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jnb ['loc_6E79']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+edx]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_6E74']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_6E52']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['esi,', '[ebp+var_4]']
mov ['ecx,', '[esi+ecx]']
mov ['[edx+eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_6E23']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+ecx],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_Destroy_Module']
add ['esp,', '4']
xor ['eax,', 'eax']
jmp ['short', 'loc_6E90']
jmp ['loc_6DE3']
push ['offset', '$SG11848']
push ['119Ah']
push ['22h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '22h']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_Property_Set proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['1']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_property_do']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_Property_Get proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_property_do']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_Reference_Library proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6F2A']
push ['offset', '$SG11921']
push ['1221h']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['short', 'loc_6F41']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0BCh]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0BCh],', 'ecx']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_FT_New_Library	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_6F82']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_6F9E']
push ['offset', '$SG11932']
push ['1234h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_7059']
call ['_ft_debug_init']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['0C0h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_6FC9']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_7059']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0A8h],', '4000h']
lea ['edx,', '[ebp+var_C]']
push ['edx']
push ['4000h']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0A4h],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_7004']
jmp ['short', '$Fail$13']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '2']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '5']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '5']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0BCh],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
xor ['eax,', 'eax']
jmp ['short', 'loc_7059']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['ecx,', 'ecx']
jnz ['short', '$Fail$13']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN11_2']
dd ['offset', '$LN10_2']
align ['8']
endp
_FT_Done_Library proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_70D0']
push ['offset', '$SG11963']
push ['128Bh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_7287']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0BCh]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0BCh],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0BCh],', '0']
jle ['short', 'loc_70F6']
jmp ['$Exit$35']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_18],', 'offset', '$SG11971']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_711E']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '2']
jnb ['loc_7211']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_713A']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx+10h]']
jnb ['loc_720C']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+14h]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['[ebp+ecx*4+var_18],', '0']
jz ['short', 'loc_7185']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+edx*4+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_7185']
jmp ['short', 'loc_7131']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax]']
and ['ecx,', '1']
jnz ['short', 'loc_7193']
jmp ['short', 'loc_7131']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '7']
jl ['short', 'loc_71B5']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
push ['offset', '$SG11987']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_7193']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '10h']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_7207']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_FT_Done_Face']
add ['esp,', '4']
mov ['edx,', '[ebp+var_28]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_7205']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '0']
jl ['short', 'loc_7201']
push ['offset', '$SG11998']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_71E3']
jmp ['short', 'loc_71C2']
jmp ['loc_7131']
jmp ['loc_7115']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jbe ['short', 'loc_7236']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4+10h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Remove_Module']
add ['esp,', '8']
jmp ['short', 'loc_7211']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A4h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0A4h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_7236']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0A8h],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_726A']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN34']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN33']
dd ['offset', '$LN32']
endp
_FT_Set_Debug_Hook proc	near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_72ED']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_72ED']
cmp ['[ebp+arg_4],', '4']
jnb ['short', 'loc_72ED']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+eax*4+0ACh],', 'edx']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_Get_TrueType_Engine_Type proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_735C']
push ['offset', '$SG12025']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Get_Module']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_735C']
push ['offset', '$SG12029']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_module_get_service']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_735C']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Matrix_Multiply proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_739C']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_73A1']
jmp ['loc_748C']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_4],', 'esi']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_8],', 'esi']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_C],', 'esi']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_10],', 'esi']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+0Ch],', 'eax']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_FT_Matrix_Invert proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_74E6']
push ['offset', '$SG7351']
push ['296h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_75A7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
sub ['esi,', 'eax']
mov ['[ebp+var_4],', 'esi']
jnz ['short', 'loc_7533']
push ['offset', '$SG7353']
push ['29Dh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_75A7']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
neg ['eax']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
neg ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'eax']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Get_Renderer proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Lookup_Renderer']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_FT_Set_Renderer proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_7620']
push ['offset', '$SG11624']
push ['0FBBh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$12_0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_7645']
push ['offset', '$SG11627']
push ['0FC1h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$12_0']
cmp ['[ebp+arg_8],', '0']
jbe ['short', 'loc_7670']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_7670']
push ['offset', '$SG11629']
push ['0FC7h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$12_0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '94h']
push ['ecx']
call ['_FT_List_Find']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_76AE']
push ['offset', '$SG11631']
push ['0FCEh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$12_0']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '94h']
push ['eax']
call ['_FT_List_Up']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+10h],', '6F75746Ch']
jnz ['short', 'loc_76DB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+9Ch],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+34h]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_76F2']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jbe ['short', '$Exit$12_0']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7723']
jmp ['short', '$Exit$12_0']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '8']
mov ['[ebp+arg_C],', 'ecx']
jmp ['short', 'loc_76E9']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_New_Size	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_20],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_779C']
push ['offset', '$SG10504']
push ['998h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_78E3']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_77BE']
push ['offset', '$SG10506']
push ['99Bh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_78E3']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+60h],', '0']
jnz ['short', 'loc_77E3']
push ['offset', '$SG10508']
push ['99Eh']
push ['22h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '22h']
jmp ['loc_78E3']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_10],', 'ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_7842']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0Ch']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7844']
jmp ['short', '$Exit$20']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['dword', 'ptr', '[ecx+28h],', '0']
mov ['edx,', '[ebp+var_18]']
cmp ['dword', 'ptr', '[edx+38h],', '0']
jz ['short', 'loc_787A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+38h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', '$Exit$20']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '6Ch']
push ['edx']
call ['_FT_List_Add']
add ['esp,', '8']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_78E0']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_20],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_78AA']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_1C],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_78C5']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN18_0']
dd ['offset', '$LN17_0']
db ['0Ah', 'dup(0CCh)']
endp
_FT_Done_Size	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_7964']
push ['offset', '$SG10534']
push ['9D2h']
push ['24h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '24h']
jmp ['loc_7A73']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_798E']
push ['offset', '$SG10536']
push ['9D6h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_7A73']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_79B9']
push ['offset', '$SG10538']
push ['9DAh']
push ['22h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '22h']
jmp ['loc_7A73']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '6Ch']
push ['ecx']
call ['_FT_List_Find']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_7A56']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '6Ch']
push ['eax']
call ['_FT_List_Remove']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_14],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_79F8']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+58h]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_7A40']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+58h],', '0']
mov ['ecx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[ecx+6Ch],', '0']
jz ['short', 'loc_7A40']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+6Ch]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+8]']
mov ['[ecx+58h],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_destroy_size']
add ['esp,', '0Ch']
jmp ['short', 'loc_7A70']
push ['offset', '$SG10548']
push ['9EFh']
push ['24h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '24h']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Activate_Size proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_7AB2']
push ['offset', '$SG11528']
push ['0EEEh']
push ['24h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '24h']
jmp ['short', 'loc_7AED']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_7AC9']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+60h],', '0']
jnz ['short', 'loc_7AE2']
push ['offset', '$SG11531']
push ['0EF2h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['short', 'loc_7AED']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+58h],', 'ecx']
xor ['eax,', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_ft_mem_alloc	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_qalloc']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_7B54']
cmp ['[ebp+arg_4],', '0']
jle ['short', 'loc_7B54']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN5_2']
dd ['offset', '$LN4_2']
db ['0Eh', 'dup(0CCh)']
endp
_ft_mem_qalloc	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_4],', '0']
jle ['short', 'loc_7C0F']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_7C0D']
push ['offset', '$SG13848']
push ['4Eh']
push ['40h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '40h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_7C2C']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_7C2C']
push ['offset', '$SG13851']
push ['53h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_ft_mem_realloc	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_qrealloc']
add ['esp,', '18h']
mov ['[ebp+arg_10],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_7CBB']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+arg_8]']
jle ['short', 'loc_7CBB']
mov ['ecx,', '[ebp+arg_C]']
sub ['ecx,', '[ebp+arg_8]']
imul ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_8]']
imul ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+arg_10]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5_3']
dd ['offset', '$LN4_3']
align ['8']
endp
_ft_mem_qrealloc proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_7D3F']
cmp ['[ebp+arg_C],', '0']
jl ['short', 'loc_7D3F']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_7D5E']
push ['offset', '$SG13884']
push ['83h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_7E5A']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_7D6A']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_7D86']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_10],', '0']
jmp ['loc_7E5A']
mov ['eax,', '7FFFFFFFh']
cdq
idiv ['[ebp+arg_4]']
cmp ['[ebp+arg_C],', 'eax']
jle ['short', 'loc_7DB3']
push ['offset', '$SG13891']
push ['8Ch']
push ['0Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ah']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_7E5A']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_7DF7']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_7DD6']
push ['offset', '$SG13899']
push ['90h']
push ['offset', '$SG13900']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_7DB9']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
imul ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+arg_10],', 'eax']
jmp ['short', 'loc_7E5A']
mov ['eax,', '[ebp+arg_8]']
imul ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
imul ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'ecx']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_7E54']
push ['offset', '$SG13907']
push ['9Dh']
push ['40h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '40h']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_7E5A']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+arg_10],', 'edx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN20_0']
dd ['offset', '$LN19_1']
align ['8']
endp
_ft_mem_free	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_7ECE']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_ft_mem_strdup	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_7F06']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_7F0D']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_dup']
add ['esp,', '10h']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_ft_mem_dup	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_qalloc']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_7F96']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_7F96']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN5_4']
dd ['offset', '$LN4_4']
db ['0Eh', 'dup(0CCh)']
endp
_ft_mem_strcpyn	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_8],', '1']
jbe ['short', 'loc_802A']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_802A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax]']
mov ['[edx],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
jmp ['short', 'loc_7FF3']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_8043']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_804A']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_GlyphLoader_New proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['60h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_80A1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5_5']
dd ['offset', '$LN4_5']
db ['0Ah', 'dup(0CCh)']
endp
_FT_GlyphLoader_CreateExtra proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
shl ['ecx,', '1']
push ['ecx']
push ['0']
push ['8']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+28h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_815A']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+10h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
lea ['ecx,', '[eax+ecx*8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_GlyphLoader_Adjust_Points']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN5_6']
dd ['offset', '$LN4_6']
align ['4']
endp
_FT_GlyphLoader_Done proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_81D8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_GlyphLoader_Reset']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_81BD']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_GlyphLoader_Reset proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_81FB']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_821C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+20h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_823D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_825E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+34h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_827F']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_GlyphLoader_Rewind']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_GlyphLoader_Rewind proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
push ['edi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '38h']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+2],', 'dx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '9']
mov ['esi,', '[ebp+var_4]']
mov ['edi,', '[ebp+var_8]']
rep ['movsd']
pop ['edi']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_GlyphLoader_CheckPoints proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '14h']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '38h']
mov ['[ebp+var_18],', 'eax']
mov ['byte', 'ptr', '[ebp+var_1C+3],', '0']
mov ['ecx,', '[ebp+var_14]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_18]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['edx,', '[ebp+arg_4]']
add ['ecx,', 'edx']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+var_24]']
jbe ['loc_84E2']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '7']
and ['edx,', '0FFFFFFF8h']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_20],', '7FFFh']
jbe ['short', 'loc_83F0']
push ['offset', '$SG7524']
push ['0DFh']
push ['0Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ah']
jmp ['loc_859A']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
push ['8']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_844A']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+8],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_844F']
jmp ['$Exit$17']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_84D5']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_24]']
shl ['eax,', '1']
push ['eax']
push ['8']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+28h],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_8490']
jmp ['$Exit$17']
mov ['eax,', '[ebp+var_24]']
shl ['eax,', '3']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['eax,', '[ebp+var_24]']
lea ['ecx,', '[edx+eax*8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['ecx,', '[ebp+var_20]']
lea ['edx,', '[eax+ecx*8]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_20]']
lea ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['byte', 'ptr', '[ebp+var_1C+3],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_18]']
movsx ['eax,', 'word', 'ptr', '[edx]']
add ['ecx,', '[ebp+arg_8]']
add ['eax,', 'ecx']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+var_24]']
jbe ['short', 'loc_8571']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '3']
and ['edx,', '0FFFFFFFCh']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_20],', '7FFFh']
jbe ['short', 'loc_8535']
push ['offset', '$SG7538']
push ['0FFh']
push ['0Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ah']
jmp ['short', 'loc_859A']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
push ['2']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+0Ch],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_8564']
jmp ['short', '$Exit$17']
mov ['byte', 'ptr', '[ebp+var_1C+3],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+8],', 'eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_1C+3]']
test ['ecx,', 'ecx']
jz ['short', '$Exit$17']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_GlyphLoader_Adjust_Points']
add ['esp,', '4']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_8597']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_GlyphLoader_Reset']
add ['esp,', '4']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN15']
dd ['offset', '$LN14_0']
align ['4']
endp
_FT_GlyphLoader_CheckSubGlyphs proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '14h']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '38h']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+1Ch]']
mov ['eax,', '[ebp+var_20]']
add ['edx,', '[eax+1Ch]']
add ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_18]']
jbe ['short', '$Exit$8']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
and ['ecx,', '0FFFFFFFEh']
mov ['[ebp+var_14],', 'ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
push ['20h']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx+20h],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_867A']
jmp ['short', '$Exit$8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_GlyphLoader_Adjust_Subglyphs']
add ['esp,', '4']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6_7']
dd ['offset', '$LN5_7']
db ['0Ah', 'dup(0CCh)']
endp
_FT_GlyphLoader_Prepare	proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '38h']
mov ['[ebp+var_4],', 'eax']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+2],', 'cx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_GlyphLoader_Adjust_Points']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_GlyphLoader_Adjust_Subglyphs']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_GlyphLoader_Add proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_875D']
jmp ['loc_8804']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '38h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
add ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+2],', 'cx']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'word', 'ptr', '[edx]']
add ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ebp+var_8]']
add ['ecx,', '[edx+1Ch]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'ecx']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_87D1']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_87F8']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_14]']
movsx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
add ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['ecx,', '[ebp+var_14]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_87C8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_GlyphLoader_Prepare']
add ['esp,', '4']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_GlyphLoader_CopyPoints proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax+16h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'word', 'ptr', '[edx+14h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_GlyphLoader_CheckPoints']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['loc_893D']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '14h']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '14h']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '3']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_891C']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+10h]']
test ['eax,', 'eax']
jz ['short', 'loc_891C']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '3']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '3']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+2Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2Ch]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_10]']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
mov ['[edx+2],', 'ax']
mov ['ecx,', '[ebp+var_10]']
mov ['dx,', 'word', 'ptr', '[ebp+var_C]']
mov ['[ecx],', 'dx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_GlyphLoader_Adjust_Points']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_ft_service_list_lookup	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_89BB']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_89BB']
jmp ['short', 'loc_8990']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_89BB']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_89B9']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_89BB']
jmp ['short', 'loc_8987']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_FT_CMap_New	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_18],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_8A18']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_8A18']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_8A34']
push ['offset', '$SG11069']
push ['0CE3h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_8B38']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+64h]']
mov ['[ebp+var_14],', 'ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['$Exit$13']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[eax+8]']
mov ['[ecx+8],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_8AB7']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_8AB7']
jmp ['short', '$Fail$14']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+24h]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+24h]']
push ['edx']
push ['4']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+28h],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_8AEF']
jmp ['short', '$Fail$14']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+28h]']
mov ['ecx,', '[ebp+var_18]']
mov ['[edx+eax*4],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+24h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+24h],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_8B1E']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_8B38']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_ft_cmap_done_internal']
add ['esp,', '4']
mov ['[ebp+var_18],', '0']
jmp ['short', '$Exit$13']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN11_3']
dd ['offset', '$LN10_3']
align ['8']
endp
_FT_CMap_Done	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['loc_8CCC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_8BC9']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[edx+24h]']
jge ['loc_8CCC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28h]']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[edx+eax*4]']
cmp ['ecx,', '[ebp+arg_0]']
jnz ['loc_8CC7']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28h]']
mov ['eax,', '[edx+eax*4-4]']
mov ['[ebp+var_20],', 'eax']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+24h]']
sub ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
push ['4']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+28h],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_8C3B']
jmp ['loc_8CCC']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_8C4F']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ecx+24h]']
jge ['short', 'loc_8C95']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+24h]']
sub ['ecx,', '1']
cmp ['[ebp+var_1C],', 'ecx']
jnz ['short', 'loc_8C7A']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_20]']
mov ['[eax+ecx*4-4],', 'edx']
jmp ['short', 'loc_8C93']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
mov ['edx,', '[ebp+var_1C]']
mov ['esi,', '[ebp+var_1C]']
mov ['ecx,', '[ecx+esi*4]']
mov ['[eax+edx*4-4],', 'ecx']
jmp ['short', 'loc_8C46']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+24h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+5Ch]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_8CB9']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+5Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_cmap_done_internal']
add ['esp,', '4']
jmp ['short', 'loc_8CCC']
jmp ['loc_8BC0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN16_0']
dd ['offset', '$LN15_0']
align ['4']
endp
_FT_Get_Module_Interface proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Get_Module']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8D42']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_8D49']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_ft_module_get_service proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['loc_8ECC']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_8DA4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jnz ['short', 'loc_8DBB']
push ['offset', '$SG11810']
push ['1151h']
push ['offset', '$SG11811']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_8D91']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jz ['short', 'loc_8DEB']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+20h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['loc_8ECC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '14h']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_8E21']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['loc_8ECC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
cmp ['edx,', '[ebp+arg_0]']
jz ['loc_8EC7']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_8E6E']
push ['offset', '$SG11826']
push ['1163h']
push ['offset', '$SG11827']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_8E44']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[edx]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jz ['short', 'loc_8EC7']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+20h]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8EC7']
jmp ['short', 'loc_8ECC']
jmp ['loc_8E18']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_New_GlyphSlot proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_1C],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_8F31']
push ['offset', '$SG9461']
push ['19Ch']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_9057']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+60h],', '0']
jnz ['short', 'loc_8F56']
push ['offset', '$SG9463']
push ['19Fh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_9057']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_8F8F']
push ['offset', '$SG9468']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_8F71']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+2Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_901F']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_ft_glyphslot_init']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_8FFA']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_ft_glyphslot_done']
add ['esp,', '4']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_1C],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_8FDD']
jmp ['short', '$Exit$24']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+54h],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_901D']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx],', 'eax']
jmp ['short', '$Exit$24']
cmp ['[ebp+arg_4],', '0']
jz ['short', '$Exit$24']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '4']
jl ['short', 'loc_9050']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['offset', '$SG9484']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', '$Exit$24']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN22']
dd ['offset', '$LN21_0']
align ['8']
endp
_FT_Done_GlyphSlot proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['loc_9175']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+60h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax+54h]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '0']
jz ['loc_9175']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_9161']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_910B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
mov ['[ecx+54h],', 'eax']
jmp ['short', 'loc_9117']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+14h],', '0']
jz ['short', 'loc_9138']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_glyphslot_done']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_9144']
jmp ['short', 'loc_9175']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_10],', 'edx']
jmp ['loc_90E2']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Select_Metrics proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
add ['ecx,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
shl ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+20h]']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
add ['edx,', '20h']
sar ['edx,', '6']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
add ['edx,', '20h']
sar ['edx,', '6']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+2],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
and ['edx,', '1']
jz ['short', 'loc_9233']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+44h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+44h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_recompute_scaled_metrics']
add ['esp,', '8']
jmp ['short', 'loc_9278']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '(offset', 'loc_FFFE+2)']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '(offset', 'loc_FFFE+2)']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
shl ['edx,', '6']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
mov ['[ecx+18h],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_9296']
push ['offset', '$SG10617']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_9278']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_92D7']
mov ['eax,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[eax+4]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
push ['offset', '$SG10622']
call ['_FT_Message']
add ['esp,', '10h']
xor ['eax,', 'eax']
jnz ['short', 'loc_929A']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_9318']
mov ['eax,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[eax+8]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
push ['offset', '$SG10627']
call ['_FT_Message']
add ['esp,', '10h']
xor ['eax,', 'eax']
jnz ['short', 'loc_92DB']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_9352']
mov ['eax,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[eax+0Ch]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10632']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_931C']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_938C']
mov ['ecx,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[ecx+10h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10637']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_9356']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_93C6']
mov ['edx,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+14h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10642']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_9390']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_9400']
mov ['eax,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[eax+18h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10647']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_93CA']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_9429']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
push ['offset', '$SG10652']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_9404']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_9453']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
push ['ecx']
push ['offset', '$SG10657']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_942D']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Request_Metrics proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
add ['ecx,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
and ['eax,', '1']
jz ['loc_9766']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '4']
ja ['loc_959C']
mov ['eax,', '[ebp+var_18]']
jmp ['ds:$LN66_0[eax*4]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+44h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_959C']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+46h]']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+48h]']
sub ['edx,', 'ecx']
mov ['[ebp+var_C],', 'edx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_959C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+3Ch]']
sub ['edx,', '[ecx+34h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+40h]']
sub ['edx,', '[ecx+38h]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_959C']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+4Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+46h]']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+48h]']
sub ['eax,', 'edx']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_959C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_9582']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_9597']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jnz ['short', 'loc_9597']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[edx+8],', 'ecx']
jmp ['$Calculate_Ppem$67']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_95AA']
mov ['edx,', '[ebp+var_8]']
neg ['edx']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_C],', '0']
jge ['short', 'loc_95B8']
mov ['eax,', '[ebp+var_C]']
neg ['eax']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jz ['short', 'loc_95E0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[edx+4]']
imul ['ecx,', '[eax+0Ch]']
add ['ecx,', '24h']
mov ['eax,', 'ecx']
cdq
mov ['ecx,', '48h']
idiv ['ecx']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_95E9']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+10h],', '0']
jz ['short', 'loc_9615']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[eax+8]']
imul ['eax,', '[ecx+10h]']
add ['eax,', '24h']
cdq
mov ['ecx,', '48h']
idiv ['ecx']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_961E']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['loc_96BD']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_9698']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx],', '3']
jnz ['short', 'loc_9696']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+4]']
jle ['short', 'loc_968A']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
jmp ['short', 'loc_9696']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_96BB']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
jmp ['short', '$Calculate_Ppem$67']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_24]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_9735']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+44h]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+44h]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '20h']
sar ['eax,', '6']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '20h']
sar ['edx,', '6']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+2],', 'dx']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_recompute_scaled_metrics']
add ['esp,', '8']
jmp ['short', 'loc_978A']
push ['1Ch']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '(offset', 'loc_FFFE+2)']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '(offset', 'loc_FFFE+2)']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_97A8']
push ['offset', '$SG10704']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_978A']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_97E9']
mov ['edx,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+4]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
push ['offset', '$SG10709']
call ['_FT_Message']
add ['esp,', '10h']
xor ['edx,', 'edx']
jnz ['short', 'loc_97AC']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_982A']
mov ['edx,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+8]']
divsd ['xmm0,', 'ds:__real@40f0000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
push ['offset', '$SG10714']
call ['_FT_Message']
add ['esp,', '10h']
xor ['edx,', 'edx']
jnz ['short', 'loc_97ED']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_9864']
mov ['edx,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+0Ch]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10719']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_982E']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_989E']
mov ['eax,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[eax+10h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10724']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9868']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_98D8']
mov ['ecx,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[ecx+14h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10729']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_98A2']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_9912']
mov ['edx,', '[ebp+var_4]']
cvtsi2sd ['xmm0,', 'dword', 'ptr', '[edx+18h]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG10734']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_98DC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_993B']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
push ['offset', '$SG10739']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_9916']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_9965']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
push ['eax']
push ['offset', '$SG10744']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_993F']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN55']
dd ['offset', '$LN54']
dd ['offset', '$LN53']
dd ['offset', '$LN52']
db ['0Ch', 'dup(0CCh)']
endp
_FT_Match_Size	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '2']
jnz ['short', 'loc_99DC']
push ['offset', '$SG10562']
push ['0A02h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_9B60']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_9A00']
push ['offset', '$SG10564']
push ['0A06h']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['loc_9B60']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_9A26']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+4]']
imul ['eax,', '[edx+0Ch]']
add ['eax,', '24h']
cdq
mov ['ecx,', '48h']
idiv ['ecx']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_9A2F']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+10h],', '0']
jz ['short', 'loc_9A5B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[eax+8]']
imul ['eax,', '[ecx+10h]']
add ['eax,', '24h']
cdq
mov ['ecx,', '48h']
idiv ['ecx']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_9A64']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['short', 'loc_9A84']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jnz ['short', 'loc_9A84']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_9A9C']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jnz ['short', 'loc_9A9C']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_9A9C']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '20h']
and ['edx,', '0FFFFFFC0h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_9AC6']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+1Ch]']
jge ['short', 'loc_9B49']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+20h]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
cmp ['[ebp+var_C],', 'ecx']
jz ['short', 'loc_9AF3']
jmp ['short', 'loc_9ABD']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
cmp ['[ebp+var_8],', 'eax']
jz ['short', 'loc_9B0C']
movzx ['ecx,', '[ebp+arg_8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_9B44']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_9B2E']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
push ['offset', '$SG10581']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_9B0C']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_9B40']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
xor ['eax,', 'eax']
jmp ['short', 'loc_9B60']
jmp ['loc_9ABD']
push ['offset', '$SG10584']
push ['0A26h']
push ['17h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '17h']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_ft_synthesize_vertical_metrics	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jge ['short', 'loc_9BAB']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax+0Ch]']
jge ['short', 'loc_9BA9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_9BC0']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jle ['short', 'loc_9BC0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '[edx+0Ch]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_9BD5']
imul ['eax,', '[ebp+var_4],', '0Ch']
cdq
mov ['ecx,', '0Ah']
idiv ['ecx']
mov ['[ebp+arg_4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
sub ['edx,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+var_4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+1Ch],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_ft_glyphslot_free_bitmap proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+9Ch],', '0']
jz ['short', 'loc_9C8A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['eax,', '[edx+4]']
and ['eax,', '1']
jz ['short', 'loc_9C8A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+64h]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+58h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_9C4C']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx+4]']
and ['edx,', '0FFFFFFFEh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_9C94']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+58h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_glyphslot_alloc_bitmap proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx+4]']
and ['edx,', '1']
jz ['short', 'loc_9CFF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+58h],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_9CDC']
jmp ['short', 'loc_9D1A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+9Ch]']
mov ['ecx,', '[eax+4]']
or ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+9Ch]']
mov ['[eax+4],', 'ecx']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+58h],', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_1']
dd ['offset', '$LN8_0']
align ['8']
endp
_ft_glyphslot_set_bitmap proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_glyphslot_free_bitmap']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+58h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx+4]']
and ['edx,', '1']
jz ['short', 'loc_9DB8']
push ['offset', '$SG9412']
push ['13Bh']
push ['offset', '$SG9413']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_9D90']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_FT_Lookup_Renderer proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_9DF2']
jmp ['short', '$Exit$10']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+94h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_9E20']
mov ['edx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_9E17']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
cmp ['[ebp+var_4],', '0']
jz ['short', '$Exit$10']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+10h]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_9E50']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_9E48']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', '$Exit$10']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_9E20']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Render_Glyph_Internal proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '100h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_100]']
mov ['ecx,', '40h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+48h]']
mov ['[ebp+var_100],', 'ecx']
cmp ['[ebp+var_100],', '62697473h']
jz ['short', 'loc_9EB0']
jmp ['short', 'loc_9EB5']
jmp ['loc_9F93']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_19],', '0']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+48h],', '6F75746Ch']
jnz ['short', 'loc_9EE6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+94h]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_9F00']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+48h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Lookup_Renderer']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', '7']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_9F68']
mov ['esi,', 'esp']
push ['0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+3Ch]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_9F46']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '0FFh']
cmp ['ecx,', '13h']
jz ['short', 'loc_9F48']
jmp ['short', 'loc_9F68']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+48h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Lookup_Renderer']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_19],', '1']
jmp ['short', 'loc_9F07']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_9F93']
movzx ['eax,', '[ebp+var_19]']
test ['eax,', 'eax']
jz ['short', 'loc_9F93']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_9F93']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Set_Renderer']
add ['esp,', '10h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['loc_A0C2']
lea ['eax,', '[ebp+var_38]']
push ['eax']
call ['_FT_Bitmap_New']
add ['esp,', '4']
push ['1']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '4Ch']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Bitmap_Convert']
add ['esp,', '10h']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jnz ['loc_A0B2']
lea ['ecx,', '[ebp+var_DC]']
push ['ecx']
call ['_MD5_Init']
add ['esp,', '4']
mov ['edx,', '[ebp+var_38]']
imul ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
lea ['ecx,', '[ebp+var_DC]']
push ['ecx']
call ['_MD5_Update']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_DC]']
push ['edx']
lea ['eax,', '[ebp+var_F4]']
push ['eax']
call ['_MD5_Final']
add ['esp,', '8']
mov ['ecx,', '4']
shl ['ecx,', '4']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '3']
jl ['short', 'loc_A035']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
push ['offset', '$SG11675']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_A00F']
mov ['[ebp+var_FC],', '0']
jmp ['short', 'loc_A054']
mov ['edx,', '[ebp+var_FC]']
add ['edx,', '1']
mov ['[ebp+var_FC],', 'edx']
cmp ['[ebp+var_FC],', '10h']
jge ['short', 'loc_A090']
mov ['eax,', '4']
shl ['eax,', '4']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_A08A']
mov ['ecx,', '[ebp+var_FC]']
movzx ['edx,', 'byte', 'ptr', '[ebp+ecx+var_F4]']
push ['edx']
push ['offset', '$SG11683']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_A05D']
jmp ['short', 'loc_A045']
mov ['ecx,', '4']
shl ['ecx,', '4']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '3']
jl ['short', 'loc_A0AE']
push ['offset', '$SG11688']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_A090']
lea ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Bitmap_Done']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN37']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '100h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN36']
dd ['offset', '$LN32_0']
dd ['0FFFFFFC8h,', '18h']
dd ['offset', '$LN33_0']
dd ['0FFFFFF24h,', '98h']
dd ['offset', '$LN34_0']
dd ['0FFFFFF0Ch,', '10h']
dd ['offset', '$LN35']
db ['8', 'dup(0CCh)']
endp
_FT_Get_Advance	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A17C']
push ['offset', '$SG7020']
push ['51h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_A258']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_A19B']
push ['offset', '$SG7022']
push ['54h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_A258']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+10h]']
jb ['short', 'loc_A1BF']
push ['offset', '$SG7025']
push ['57h']
push ['10h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '10h']
jmp ['loc_A258']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ecx+54h]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_A23E']
mov ['eax,', '[ebp+arg_8]']
and ['eax,', '3']
jnz ['short', 'loc_A1EA']
mov ['ecx,', '[ebp+arg_8]']
sar ['ecx,', '10h']
and ['ecx,', '0Fh']
cmp ['ecx,', '1']
jnz ['short', 'loc_A23E']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['[ebp+var_4]']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_A22C']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['1']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__ft_face_scale_advances']
add ['esp,', '10h']
jmp ['short', 'loc_A258']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0FFh']
cmp ['eax,', '7']
jz ['short', 'loc_A23E']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_A258']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Get_Advances']
add ['esp,', '14h']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Get_Advances proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A2AC']
push ['offset', '$SG7049']
push ['7Ah']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_A456']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_A2CB']
push ['offset', '$SG7051']
push ['7Dh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_A456']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_A2F5']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+arg_4]']
jb ['short', 'loc_A2F5']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_8]']
jbe ['short', 'loc_A311']
push ['offset', '$SG7055']
push ['82h']
push ['10h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '10h']
jmp ['loc_A456']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_A31E']
xor ['eax,', 'eax']
jmp ['loc_A456']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+54h]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_A3A7']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '3']
jnz ['short', 'loc_A349']
mov ['edx,', '[ebp+arg_C]']
sar ['edx,', '10h']
and ['edx,', '0Fh']
cmp ['edx,', '1']
jnz ['short', 'loc_A3A7']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['[ebp+var_4]']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_A392']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__ft_face_scale_advances']
add ['esp,', '10h']
jmp ['loc_A456']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFh']
cmp ['eax,', '7']
jz ['short', 'loc_A3A7']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_A456']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '20000000h']
jz ['short', 'loc_A3D5']
push ['offset', '$SG7063']
push ['95h']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['loc_A456']
mov ['edx,', '[ebp+arg_C]']
or ['edx,', '100h']
mov ['[ebp+arg_C],', 'edx']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_A3F3']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+arg_8]']
jnb ['short', 'loc_A453']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Load_Glyph']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_A41D']
jmp ['short', 'loc_A453']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '10h']
jz ['short', 'loc_A436']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
mov ['edx,', '[ecx+44h]']
shl ['edx,', '0Ah']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_A445']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
mov ['edx,', '[ecx+40h]']
shl ['edx,', '0Ah']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+eax*4],', 'edx']
jmp ['short', 'loc_A3EA']
mov ['eax,', '[ebp+var_14]']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
__ft_face_scale_advances proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '1']
jz ['short', 'loc_A48B']
xor ['eax,', 'eax']
jmp ['loc_A50B']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+58h],', '0']
jnz ['short', 'loc_A4AA']
push ['offset', '$SG7003']
push ['28h']
push ['24h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '24h']
jmp ['short', 'loc_A50B']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '10h']
jz ['short', 'loc_A4C0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_A4CC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_A4DE']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_8]']
jnb ['short', 'loc_A509']
push ['40h']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_A4D5']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_FT_Sin		proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '5A0000h']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Cos']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_FT_Cos		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', '0DBD95Bh']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_ft_trig_pseudo_rotate']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '80h']
sar ['eax,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_7']
dd ['offset', '$LN3']
endp
_FT_Tan		proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', '0DBD95Bh']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_ft_trig_pseudo_rotate']
add ['esp,', '8']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_DivFix']
add ['esp,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_8']
dd ['offset', '$LN3_0']
endp
_FT_Atan2	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A66F']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_A66F']
xor ['eax,', 'eax']
jmp ['short', 'loc_A696']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_trig_prenorm']
add ['esp,', '4']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['_ft_trig_pseudo_polarize']
add ['esp,', '4']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN5_10']
dd ['offset', '$LN4_9']
endp
_FT_Angle_Diff	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
cdq
mov ['ecx,', '1680000h']
idiv ['ecx']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_A70C']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1680000h']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0B40000h']
jle ['short', 'loc_A720']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1680000h']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Vector_Unit	proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A733']
jmp ['short', 'loc_A77E']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0DBD95Bh']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_trig_pseudo_rotate']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '80h']
sar ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '80h']
sar ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_FT_Vector_Rotate proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A7B0']
jmp ['loc_A884']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['loc_A884']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_A7DB']
cmp ['[ebp+var_C],', '0']
jz ['loc_A884']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_trig_prenorm']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_trig_pseudo_rotate']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_trig_downscale']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_trig_downscale']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_A861']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['eax,', '1']
shl ['eax,', 'cl']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_10]']
sar ['eax,', '1Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+var_4]']
sar ['edx,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'edx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_C]']
sar ['eax,', '1Fh']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+var_4]']
sar ['edx,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_A884']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_4]']
shl ['eax,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_2']
dd ['offset', '$LN8_1']
endp
_FT_Vector_Length proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_A8F5']
xor ['eax,', 'eax']
jmp ['loc_A998']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_A926']
cmp ['[ebp+var_C],', '0']
jge ['short', 'loc_A919']
mov ['eax,', '[ebp+var_C]']
neg ['eax']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_A91F']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_A998']
jmp ['short', 'loc_A947']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_A947']
cmp ['[ebp+var_10],', '0']
jge ['short', 'loc_A93C']
mov ['edx,', '[ebp+var_10]']
neg ['edx']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_A942']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
jmp ['short', 'loc_A998']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_trig_prenorm']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_trig_pseudo_polarize']
add ['esp,', '4']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_trig_downscale']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_A98E']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['eax,', '1']
shl ['eax,', 'cl']
add ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_4]']
sar ['eax,', 'cl']
jmp ['short', 'loc_A998']
mov ['ecx,', '[ebp+var_4]']
neg ['ecx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', 'cl']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_0']
dd ['offset', '$LN12_4']
endp
_FT_Vector_Polarize proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_AA07']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_AA07']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_AA09']
jmp ['short', 'loc_AA7F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_AA25']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_AA25']
jmp ['short', 'loc_AA7F']
lea ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_trig_prenorm']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_trig_pseudo_polarize']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_trig_downscale']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_AA62']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_4]']
sar ['eax,', 'cl']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_AA6F']
mov ['ecx,', '[ebp+var_4]']
neg ['ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', 'cl']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN9_3']
dd ['offset', '$LN8_2']
endp
_FT_Vector_From_Polar proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_AAC3']
jmp ['short', 'loc_AAE5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Vector_Rotate']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Ah', 'dup(0CCh)']
endp
_FT_MulFix_i386	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
imul ['edx']
mov ['ecx,', 'edx']
sar ['ecx,', '1Fh']
add ['ecx,', '8000h']
add ['eax,', 'ecx']
adc ['edx,', '0']
shr ['eax,', '10h']
shl ['edx,', '10h']
add ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_MulDiv_No_Round proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_AB6D']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_AB75']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_AC4E']
cmp ['[ebp+arg_0],', '0']
jge ['short', 'loc_AB8B']
mov ['ecx,', '[ebp+arg_0]']
neg ['ecx']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_AB75']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_ABA5']
mov ['ecx,', '[ebp+arg_4]']
neg ['ecx']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_AB8F']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_ABBF']
mov ['ecx,', '[ebp+arg_8]']
neg ['ecx']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_ABA9']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_ABD2']
mov ['[ebp+arg_0],', '7FFFFFFFh']
jmp ['short', 'loc_AC35']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '1FFFFh']
ja ['short', 'loc_ABF1']
mov ['eax,', '[ebp+arg_0]']
imul ['eax,', '[ebp+arg_4]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_AC35']
lea ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_multo64']
add ['esp,', '0Ch']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_AC18']
mov ['eax,', '[ebp+var_10]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_AC2F']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_ft_div64by32']
add ['esp,', '0Ch']
mov ['[ebp+var_18],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_AC45']
mov ['eax,', '[ebp+arg_0]']
neg ['eax']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_AC4B']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'ecx']
mov ['eax,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN27_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN26_0']
dd ['offset', '$LN25_0']
db ['0Fh', 'dup(0CCh)']
endp
_FT_Matrix_Multiply_Scaled proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '10h']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_ACC8']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_ACCD']
jmp ['loc_ADD8']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_4],', 'esi']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_8],', 'esi']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_C],', 'esi']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_10],', 'esi']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+0Ch],', 'eax']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Vector_Transform_Scaled proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '10h']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_AE19']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_AE1E']
jmp ['loc_AEA2']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_4],', 'esi']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
add ['esi,', 'eax']
mov ['[ebp+var_8],', 'esi']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_corner_orientation proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_AEFF']
cmp ['[ebp+arg_0],', '0']
jl ['short', 'loc_AEF2']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_AEFA']
mov ['ecx,', '[ebp+arg_C]']
neg ['ecx']
mov ['[ebp+var_4],', 'ecx']
jmp ['loc_AFD2']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_AF20']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_AF15']
mov ['edx,', '[ebp+arg_8]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_AF1B']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
jmp ['loc_AFD2']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_AF41']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_AF34']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_AF3C']
mov ['edx,', '[ebp+arg_4]']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
jmp ['loc_AFD2']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_AF5F']
cmp ['[ebp+arg_C],', '0']
jl ['short', 'loc_AF57']
mov ['eax,', '[ebp+arg_0]']
neg ['eax']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_AF5D']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_AFD2']
lea ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_multo64']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ft_multo64']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_1C]']
jbe ['short', 'loc_AF98']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_AFD2']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_1C]']
jnb ['short', 'loc_AFA9']
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_AFD2']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+var_20]']
jbe ['short', 'loc_AFBA']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_AFD2']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_20]']
jnb ['short', 'loc_AFCB']
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_AFD2']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN30_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN29_0']
dd ['offset', '$LN27_1']
dd ['0FFFFFFE0h,', '8']
dd ['offset', '$LN28_1']
dd ['0CCCC0031h,', '3', 'dup(0CCCCCCCCh)']
endp
_ft_corner_is_flat proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jge ['short', 'loc_B060']
mov ['edx,', '[ebp+arg_0]']
neg ['edx']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_B066']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_0],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_B07C']
mov ['edx,', '[ebp+arg_4]']
neg ['edx']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_B082']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['edx,', '[ebp+arg_4]']
jle ['short', 'loc_B09F']
imul ['eax,', '[ebp+arg_4],', '3']
sar ['eax,', '3']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_B0AC']
imul ['ecx,', '[ebp+arg_0],', '3']
sar ['ecx,', '3']
add ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_B0C2']
mov ['eax,', '[ebp+arg_8]']
neg ['eax']
mov ['[ebp+var_24],', 'eax']
jmp ['short', 'loc_B0C8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+arg_8],', 'edx']
cmp ['[ebp+arg_C],', '0']
jge ['short', 'loc_B0DE']
mov ['eax,', '[ebp+arg_C]']
neg ['eax']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_B0E4']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+arg_C],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_C]']
jle ['short', 'loc_B101']
imul ['ecx,', '[ebp+arg_C],', '3']
sar ['ecx,', '3']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_B10E']
imul ['edx,', '[ebp+arg_8],', '3']
sar ['edx,', '3']
add ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_B124']
mov ['ecx,', '[ebp+var_4]']
neg ['ecx']
mov ['[ebp+var_30],', 'ecx']
jmp ['short', 'loc_B12A']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_B140']
mov ['ecx,', '[ebp+var_8]']
neg ['ecx']
mov ['[ebp+var_34],', 'ecx']
jmp ['short', 'loc_B146']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_8]']
jle ['short', 'loc_B163']
imul ['edx,', '[ebp+var_8],', '3']
sar ['edx,', '3']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_38],', 'edx']
jmp ['short', 'loc_B170']
imul ['eax,', '[ebp+var_4],', '3']
sar ['eax,', '3']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_14]']
sar ['eax,', '4']
cmp ['edx,', 'eax']
jge ['short', 'loc_B192']
mov ['[ebp+var_3C],', '1']
jmp ['short', 'loc_B199']
mov ['[ebp+var_3C],', '0']
mov ['eax,', '[ebp+var_3C]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_MSB		proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFFF0000h']
jz ['short', 'loc_B1D6']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '10h']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FF00h']
jz ['short', 'loc_B1F2']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '8']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '8']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0F0h']
jz ['short', 'loc_B20E']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '4']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0Ch']
jz ['short', 'loc_B228']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '2']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '2']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_B239']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_Hypot	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['_FT_Vector_Length']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_10']
dd ['offset', '$LN3_1']
endp
_ft_multo64	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '0FFFFh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '0FFFFh']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '10h']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_4]']
imul ['edx,', '[ebp+var_10]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_C]']
imul ['eax,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_8]']
imul ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_20]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_B339']
mov ['[ebp+var_24],', '1']
jmp ['short', 'loc_B340']
mov ['[ebp+var_24],', '0']
mov ['ecx,', '[ebp+var_24]']
shl ['ecx,', '10h']
add ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
shr ['edx,', '10h']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_1C]']
shl ['eax,', '10h']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+var_1C]']
jnb ['short', 'loc_B37B']
mov ['[ebp+var_28],', '1']
jmp ['short', 'loc_B382']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_28]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+4],', 'ecx']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_div64by32	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_8]']
jb ['short', 'loc_B3D5']
mov ['eax,', '7FFFFFFFh']
jmp ['loc_B47D']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_MSB']
add ['esp,', '4']
mov ['edx,', '1Fh']
sub ['edx,', 'eax']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
shl ['eax,', 'cl']
mov ['ecx,', '20h']
sub ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_4]']
shr ['edx,', 'cl']
or ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_C]']
shl ['eax,', 'cl']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
imul ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', 'ecx']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '20h']
sub ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '1Fh']
or ['edx,', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_8]']
jb ['short', 'loc_B46F']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
jnz ['short', 'loc_B435']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_FT_Add64	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
add ['ecx,', '[edx]']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_B4D3']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_B4DA']
mov ['[ebp+var_C],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_4]']
add ['eax,', '[ecx+4]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_GlyphLoader_Adjust_Points proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '38h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
lea ['eax,', '[edx+eax*8]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
lea ['ecx,', '[eax+ecx*2]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_B5A3']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
lea ['eax,', '[edx+eax*8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2Ch]']
lea ['eax,', '[edx+eax*8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+50h],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_GlyphLoader_Adjust_Subglyphs proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '38h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+20h]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+20h],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_List_Find	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_B5FD']
xor ['eax,', 'eax']
jmp ['short', 'loc_B628']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_B626']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_B61B']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_B628']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_B605']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_FT_List_Add	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B64F']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B651']
jmp ['short', 'loc_B68E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_B67D']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
jmp ['short', 'loc_B685']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_List_Insert	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B6AF']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B6B1']
jmp ['short', 'loc_B6EC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_B6DC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
jmp ['short', 'loc_B6E4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_List_Remove	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B718']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B71A']
jmp ['short', 'loc_B75D']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_B73C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_B744']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_B754']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_B75D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+4],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_List_Up	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B788']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B78A']
jmp ['short', 'loc_B7EB']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_B7A3']
jmp ['short', 'loc_B7EB']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_B7BC']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_B7C5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[edx+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_List_Iterate proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B827']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B840']
push ['offset', '$SG14016']
push ['184h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_B884']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_B881']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['[ebp+arg_4]']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_B879']
jmp ['short', 'loc_B881']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_B848']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_List_Finalize proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_B8C0']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_B8C2']
jmp ['short', 'loc_B939']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_B926']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_B903']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['[ebp+arg_4]']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_B903']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_B8CA']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_FT_Outline_Decompose proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0BCh']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_BC]']
mov ['ecx,', '2Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_B984']
push ['offset', '$SG12071']
push ['4Dh']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_C2F8']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_B9A3']
push ['offset', '$SG12073']
push ['50h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_C2F8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
mov ['[ebp+var_54],', 'eax']
mov ['[ebp+var_48],', '0']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_B9CE']
mov ['ecx,', '[ebp+var_44]']
add ['ecx,', '1']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx]']
cmp ['[ebp+var_44],', 'eax']
jge ['loc_C28C']
mov ['ecx,', '4']
shl ['ecx,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_B9FF']
mov ['edx,', '[ebp+var_44]']
push ['edx']
push ['offset', '$SG12082']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_B9DD']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+var_44]']
movsx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
mov ['[ebp+var_58],', 'ecx']
cmp ['[ebp+var_58],', '0']
jge ['short', 'loc_BA1E']
jmp ['$Invalid_Outline$89']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_58]']
lea ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_48]']
mov ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ecx+edx*8+4]']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
sub ['eax,', '[ebp+var_54]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_58]']
mov ['ecx,', '[edx+eax*8]']
mov ['edx,', '[edx+eax*8+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
sub ['eax,', '[ebp+var_54]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_48]']
lea ['edx,', '[eax+ecx*8]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_3C]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
and ['edx,', '3']
mov ['[ebp+var_4C],', 'edx']
cmp ['[ebp+var_4C],', '2']
jnz ['short', 'loc_BAD8']
jmp ['$Invalid_Outline$89']
cmp ['[ebp+var_4C],', '0']
jnz ['short', 'loc_BB38']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_58]']
movsx ['eax,', 'byte', 'ptr', '[ecx+edx]']
and ['eax,', '3']
cmp ['eax,', '1']
jnz ['short', 'loc_BB0A']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '8']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_BB26']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '[ebp+var_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_34]']
sub ['ecx,', '8']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
sub ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '4']
shl ['eax,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_BB80']
cvtsi2sd ['xmm0,', '[ebp+var_28]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_2C]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12093']
call ['_FT_Message']
add ['esp,', '14h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_BB38']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_BBAD']
jmp ['$Exit$90']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_38]']
jnb ['loc_C20B']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '8']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_3C]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
and ['eax,', '3']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_BC],', 'ecx']
cmp ['[ebp+var_BC],', '0']
jz ['loc_BCA0']
cmp ['[ebp+var_BC],', '1']
jz ['short', 'loc_BC04']
jmp ['loc_BF4B']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
sub ['eax,', '[ebp+var_54]']
mov ['[ebp+var_64],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '4']
shl ['eax,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_BC6D']
cvtsi2sd ['xmm0,', '[ebp+var_60]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_64]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12109']
call ['_FT_Message']
add ['esp,', '14h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_BC25']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_64]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
call ['edx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_BC9B']
jmp ['$Exit$90']
jmp ['loc_BBAD']
mov ['eax,', '[ebp+var_34]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_34]']
mov ['edx,', '[eax+4]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_38]']
jnb ['loc_BEAD']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '8']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_3C]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
and ['eax,', '3']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+var_34]']
mov ['edx,', '[eax+4]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_70],', 'edx']
cmp ['[ebp+var_4C],', '1']
jnz ['loc_BDC8']
mov ['eax,', '4']
shl ['eax,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['short', 'loc_BD91']
cvtsi2sd ['xmm0,', '[ebp+var_18]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_1C]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_70]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_74]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12121']
call ['_FT_Message']
add ['esp,', '24h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_BD1F']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_74]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_BDC3']
jmp ['$Exit$90']
jmp ['loc_BBAD']
cmp ['[ebp+var_4C],', '0']
jz ['short', 'loc_BDD3']
jmp ['$Invalid_Outline$89']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+var_74]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_84],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_70]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '4']
shl ['ecx,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_BE67']
cvtsi2sd ['xmm0,', '[ebp+var_18]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_1C]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_80]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_84]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12128']
call ['_FT_Message']
add ['esp,', '24h']
xor ['edx,', 'edx']
jnz ['short', 'loc_BDF2']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_84]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_BE9C']
jmp ['$Exit$90']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_70]']
mov ['[ebp+var_18],', 'eax']
jmp ['$Do_Conic$91']
mov ['ecx,', '4']
shl ['ecx,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_BF1F']
cvtsi2sd ['xmm0,', '[ebp+var_18]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_1C]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_28]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_2C]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12134']
call ['_FT_Message']
add ['esp,', '24h']
xor ['edx,', 'edx']
jnz ['short', 'loc_BEAD']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
call ['ecx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
jmp ['$Close$92']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '8']
cmp ['edx,', '[ebp+var_38]']
ja ['short', 'loc_BF6D']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_3C]']
movsx ['edx,', 'byte', 'ptr', '[ecx+eax]']
and ['edx,', '3']
cmp ['edx,', '2']
jz ['short', 'loc_BF72']
jmp ['$Invalid_Outline$89']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '10h']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
add ['ecx,', '2']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '8']
imul ['eax,', 'edx,', '-2']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+eax]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_94],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '-2']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx+ecx+4]']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
sub ['eax,', '[ebp+var_54]']
mov ['[ebp+var_90],', 'eax']
mov ['ecx,', '8']
imul ['edx,', 'ecx,', '-1']
mov ['eax,', '[ebp+var_34]']
mov ['edx,', '[eax+edx]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_A4],', 'edx']
mov ['eax,', '8']
imul ['ecx,', 'eax,', '-1']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx+ecx+4]']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
sub ['eax,', '[ebp+var_54]']
mov ['[ebp+var_A0],', 'eax']
mov ['ecx,', '[ebp+var_34]']
cmp ['ecx,', '[ebp+var_38]']
ja ['loc_C123']
mov ['edx,', '[ebp+var_34]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_50]']
shl ['eax,', 'cl']
sub ['eax,', '[ebp+var_54]']
mov ['[ebp+var_B4],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+var_50]']
shl ['edx,', 'cl']
sub ['edx,', '[ebp+var_54]']
mov ['[ebp+var_B0],', 'edx']
mov ['eax,', '4']
shl ['eax,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '5']
jl ['loc_C0DB']
cvtsi2sd ['xmm0,', '[ebp+var_A0]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_A4]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_90]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_94]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_B0]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_B4]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12147']
call ['_FT_Message']
add ['esp,', '34h']
xor ['ecx,', 'ecx']
jnz ['loc_C029']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
lea ['eax,', '[ebp+var_B4]']
push ['eax']
lea ['ecx,', '[ebp+var_A4]']
push ['ecx']
lea ['edx,', '[ebp+var_94]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_C11E']
jmp ['$Exit$90']
jmp ['loc_BBAD']
mov ['edx,', '4']
shl ['edx,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['loc_C1CF']
cvtsi2sd ['xmm0,', '[ebp+var_A0]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_A4]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_90]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_94]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_28]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_2C]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12153']
call ['_FT_Message']
add ['esp,', '34h']
xor ['eax,', 'eax']
jnz ['loc_C123']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
lea ['eax,', '[ebp+var_A4]']
push ['eax']
lea ['ecx,', '[ebp+var_94]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
jmp ['short', '$Close$92']
jmp ['loc_BBAD']
mov ['ecx,', '4']
shl ['ecx,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '5']
jl ['short', 'loc_C253']
cvtsi2sd ['xmm0,', '[ebp+var_28]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
cvtsi2sd ['xmm0,', '[ebp+var_2C]']
divsd ['xmm0,', 'ds:__real@4050000000000000']
sub ['esp,', '8']
movsd ['qword', 'ptr', '[esp],', 'xmm0']
push ['offset', '$SG12158']
call ['_FT_Message']
add ['esp,', '14h']
xor ['edx,', 'edx']
jnz ['short', 'loc_C20B']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_C27E']
jmp ['short', '$Exit$90']
mov ['ecx,', '[ebp+var_58]']
add ['ecx,', '1']
mov ['[ebp+var_48],', 'ecx']
jmp ['loc_B9C5']
mov ['edx,', '4']
shl ['edx,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_C2AE']
mov ['eax,', '[ebp+var_44]']
push ['eax']
push ['offset', '$SG12164']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_C28C']
xor ['eax,', 'eax']
jmp ['short', 'loc_C2F8']
mov ['edx,', '4']
shl ['edx,', '3']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '5']
jl ['short', 'loc_C2D8']
mov ['eax,', '[ebp+var_40]']
push ['eax']
push ['offset', '$SG12169']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', '$Exit$90']
mov ['eax,', '[ebp+var_40]']
jmp ['short', 'loc_C2F8']
push ['offset', '$SG12170']
push ['125h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN88']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '0BCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN87']
dd ['offset', '$LN78']
dd ['0FFFFFFE4h,', '8']
dd ['offset', '$LN79']
dd ['0FFFFFFD4h,', '8']
dd ['offset', '$LN80']
dd ['0FFFFFF9Ch,', '8']
dd ['offset', '$LN81']
dd ['0FFFFFF8Ch,', '8']
dd ['offset', '$LN82']
dd ['0FFFFFF7Ch,', '8']
dd ['offset', '$LN83']
dd ['0FFFFFF6Ch,', '8']
dd ['offset', '$LN84']
dd ['0FFFFFF5Ch,', '8']
dd ['offset', '$LN85']
dd ['0FFFFFF4Ch,', '8']
dd ['offset', '$LN86']
endp
_FT_Outline_New	proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_C3EA']
push ['offset', '$SG12211']
push ['15Ah']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['short', 'loc_C404']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_FT_Outline_New_Internal']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Outline_New_Internal proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_C43F']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_C45B']
push ['offset', '$SG12183']
push ['133h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_C597']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', 'ds:_null_outline']
mov ['[eax],', 'ecx']
mov ['edx,', 'ds:dword_3878']
mov ['[eax+4],', 'edx']
mov ['ecx,', 'ds:dword_387C']
mov ['[eax+8],', 'ecx']
mov ['edx,', 'ds:dword_3880']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', 'ds:dword_3884']
mov ['[eax+10h],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_C498']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_C4B4']
push ['offset', '$SG12187']
push ['139h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_C597']
cmp ['[ebp+arg_4],', '7FFFh']
jbe ['short', 'loc_C4D9']
push ['offset', '$SG12189']
push ['13Ch']
push ['0Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ah']
jmp ['loc_C597']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
push ['8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx+4],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_C54B']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['0']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx+8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_C54B']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['0']
push ['2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx+0Ch],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C54D']
jmp ['short', '$Fail$13_0']
mov ['edx,', '[ebp+arg_C]']
mov ['ax,', 'word', 'ptr', '[ebp+arg_4]']
mov ['[edx+2],', 'ax']
mov ['ecx,', '[ebp+arg_C]']
mov ['dx,', 'word', 'ptr', '[ebp+arg_8]']
mov ['[ecx],', 'dx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax+10h]']
or ['ecx,', '1']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx+10h],', 'ecx']
xor ['eax,', 'eax']
jmp ['short', 'loc_C597']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax+10h]']
or ['ecx,', '1']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Outline_Done_Internal']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11_4']
dd ['offset', '$LN10_7']
align ['8']
endp
_FT_Outline_Done proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_C5FA']
push ['offset', '$SG12273']
push ['1D1h']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['short', 'loc_C60C']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Outline_Done_Internal']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_FT_Outline_Done_Internal proc near	
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_C63D']
push ['offset', '$SG12251']
push ['1B7h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_C6FB']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_C65F']
push ['offset', '$SG12253']
push ['1BAh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_C6FB']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '1']
jz ['short', 'loc_C6CD']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_C66A']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_C68B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_C6AC']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', 'ds:_null_outline']
mov ['[edx],', 'eax']
mov ['ecx,', 'ds:dword_3878']
mov ['[edx+4],', 'ecx']
mov ['eax,', 'ds:dword_387C']
mov ['[edx+8],', 'eax']
mov ['ecx,', 'ds:dword_3880']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', 'ds:dword_3884']
mov ['[edx+10h],', 'eax']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['8']
endp
_FT_Outline_Check proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['$Bad$13']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_C752']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_C752']
xor ['eax,', 'eax']
jmp ['loc_C7D9']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_C75E']
cmp ['[ebp+var_8],', '0']
jg ['short', 'loc_C760']
jmp ['short', '$Bad$13']
mov ['[ebp+var_10],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_C77F']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_8]']
jge ['short', 'loc_C7B1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_C]']
jle ['short', 'loc_C7A7']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[ebp+var_4]']
jl ['short', 'loc_C7A9']
jmp ['short', '$Bad$13']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_C776']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '1']
cmp ['[ebp+var_10],', 'edx']
jz ['short', 'loc_C7BE']
jmp ['short', '$Bad$13']
xor ['eax,', 'eax']
jmp ['short', 'loc_C7D9']
push ['offset', '$SG12231']
push ['18Ah']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Outline_Get_CBox proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['loc_C90B']
cmp ['[ebp+arg_4],', '0']
jz ['loc_C90B']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_C84B']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_10],', '0']
jmp ['loc_C8E8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+edx*8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '8']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_C895']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '8']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+var_18]']
jnb ['short', 'loc_C8E8']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[ebp+var_4]']
jge ['short', 'loc_C8B3']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+var_C]']
jle ['short', 'loc_C8C1']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+var_8]']
jge ['short', 'loc_C8D8']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_10]']
jle ['short', 'loc_C8E6']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_C88C']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+0Ch],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_Outline_Translate proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_C934']
jmp ['short', 'loc_C987']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
mov ['word', 'ptr', '[ebp+var_4],', 'dx']
jmp ['short', 'loc_C951']
mov ['ax,', 'word', 'ptr', '[ebp+var_4]']
add ['ax,', '1']
mov ['word', 'ptr', '[ebp+var_4],', 'ax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
cmp ['ecx,', 'eax']
jge ['short', 'loc_C987']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '8']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_C945']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_FT_Outline_Copy proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_C9AF']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_C9CB']
push ['offset', '$SG12240']
push ['198h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_CAAE']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_C9ED']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jz ['short', 'loc_CA09']
push ['offset', '$SG12243']
push ['19Ch']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_CAAE']
mov ['edx,', '[ebp+arg_0]']
cmp ['edx,', '[ebp+arg_4]']
jnz ['short', 'loc_CA18']
xor ['eax,', 'eax']
jmp ['loc_CAAE']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
shl ['ecx,', '3']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+10h]']
and ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[edx+10h],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
and ['eax,', '0FFFFFFFEh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+10h]']
or ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+10h],', 'eax']
xor ['eax,', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_FT_Outline_Transform proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_CAE8']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_CAEA']
jmp ['short', 'loc_CB28']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax*8]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_CB0E']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '8']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_8]']
jnb ['short', 'loc_CB28']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_FT_Vector_Transform']
add ['esp,', '8']
jmp ['short', 'loc_CB05']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Outline_Embolden proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Outline_EmboldenXY']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_FT_Outline_EmboldenXY proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0A0h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_A0]']
mov ['ecx,', '28h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_CB97']
push ['offset', '$SG12411']
push ['39Bh']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_CFAA']
mov ['eax,', '[ebp+arg_4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_CBC0']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_CBC0']
xor ['eax,', 'eax']
jmp ['loc_CFAA']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Outline_Get_Orientation']
add ['esp,', '4']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_54],', '2']
jnz ['short', 'loc_CC04']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_CBFD']
push ['offset', '$SG12415']
push ['3A6h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_CFAA']
jmp ['short', 'loc_CC04']
xor ['eax,', 'eax']
jmp ['loc_CFAA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_50],', '0']
mov ['[ebp+var_48],', '0']
jmp ['short', 'loc_CC26']
mov ['edx,', '[ebp+var_48]']
add ['edx,', '1']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['[ebp+var_48],', 'ecx']
jge ['loc_CFA8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
mov ['ecx,', '[ebp+var_48]']
movsx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
mov ['[ebp+var_9C],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+eax*8]']
mov ['eax,', '[ecx+eax*8+4]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_9C]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx*8]']
mov ['ecx,', '[edx+ecx*8+4]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_3C],', 'eax']
mov ['ecx,', '[ebp+var_40]']
sub ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_60],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
sub ['edx,', '[ebp+var_C]']
mov ['[ebp+var_5C],', 'edx']
lea ['eax,', '[ebp+var_60]']
push ['eax']
call ['_FT_Vector_Length']
add ['esp,', '4']
mov ['[ebp+var_88],', 'eax']
cmp ['[ebp+var_88],', '0']
jz ['short', 'loc_CCD6']
mov ['ecx,', '[ebp+var_88]']
push ['ecx']
mov ['edx,', '[ebp+var_60]']
push ['edx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_60],', 'eax']
mov ['eax,', '[ebp+var_88]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_5C],', 'eax']
mov ['edx,', '[ebp+var_50]']
mov ['[ebp+var_4C],', 'edx']
jmp ['short', 'loc_CCE7']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '1']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
cmp ['ecx,', '[ebp+var_9C]']
jg ['loc_CF97']
mov ['edx,', '[ebp+var_4C]']
cmp ['edx,', '[ebp+var_9C]']
jge ['short', 'loc_CD17']
mov ['eax,', '[ebp+var_4C]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+eax*8+8]']
mov ['eax,', '[ecx+eax*8+0Ch]']
mov ['[ebp+var_30],', 'edx']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_CD23']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_30]']
sub ['eax,', '[ebp+var_40]']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_6C],', 'ecx']
lea ['edx,', '[ebp+var_70]']
push ['edx']
call ['_FT_Vector_Length']
add ['esp,', '4']
mov ['[ebp+var_8C],', 'eax']
cmp ['[ebp+var_8C],', '0']
jz ['short', 'loc_CD7C']
mov ['eax,', '[ebp+var_8C]']
push ['eax']
mov ['ecx,', '[ebp+var_70]']
push ['ecx']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_70],', 'eax']
mov ['edx,', '[ebp+var_8C]']
push ['edx']
mov ['eax,', '[ebp+var_6C]']
push ['eax']
call ['_FT_DivFix']
add ['esp,', '8']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_70]']
push ['ecx']
mov ['edx,', '[ebp+var_60]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_6C]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
add ['esi,', 'eax']
mov ['[ebp+var_98],', 'esi']
cmp ['[ebp+var_98],', '0FFFF1000h']
jle ['loc_CF36']
mov ['edx,', '[ebp+var_98]']
add ['edx,', '(offset', 'loc_FFFE+2)']
mov ['[ebp+var_98],', 'edx']
mov ['eax,', '[ebp+var_5C]']
add ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_60]']
add ['ecx,', '[ebp+var_70]']
mov ['[ebp+var_7C],', 'ecx']
cmp ['[ebp+var_54],', '0']
jnz ['short', 'loc_CDEA']
mov ['edx,', '[ebp+var_80]']
neg ['edx']
mov ['[ebp+var_80],', 'edx']
jmp ['short', 'loc_CDF2']
mov ['eax,', '[ebp+var_7C]']
neg ['eax']
mov ['[ebp+var_7C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
push ['ecx']
mov ['edx,', '[ebp+var_70]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_60]']
push ['eax']
mov ['ecx,', '[ebp+var_6C]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
sub ['esi,', 'eax']
mov ['[ebp+var_94],', 'esi']
cmp ['[ebp+var_54],', '0']
jnz ['short', 'loc_CE30']
mov ['edx,', '[ebp+var_94]']
neg ['edx']
mov ['[ebp+var_94],', 'edx']
mov ['eax,', '[ebp+var_88]']
cmp ['eax,', '[ebp+var_8C]']
jge ['short', 'loc_CE4C']
mov ['ecx,', '[ebp+var_88]']
mov ['[ebp+var_A0],', 'ecx']
jmp ['short', 'loc_CE58']
mov ['edx,', '[ebp+var_8C]']
mov ['[ebp+var_A0],', 'edx']
mov ['eax,', '[ebp+var_A0]']
mov ['[ebp+var_90],', 'eax']
mov ['ecx,', '[ebp+var_94]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+var_98]']
push ['ecx']
call ['_FT_MulFix']
add ['esp,', '8']
cmp ['esi,', 'eax']
jg ['short', 'loc_CEAF']
mov ['edx,', '[ebp+var_98]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_80]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_CECC']
mov ['edx,', '[ebp+var_94]']
push ['edx']
mov ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+var_80]']
push ['ecx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_80],', 'eax']
mov ['edx,', '[ebp+var_94]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_90]']
push ['ecx']
mov ['edx,', '[ebp+var_98]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
cmp ['esi,', 'eax']
jg ['short', 'loc_CF17']
mov ['eax,', '[ebp+var_98]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_7C]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_CF34']
mov ['eax,', '[ebp+var_94]']
push ['eax']
mov ['ecx,', '[ebp+var_90]']
push ['ecx']
mov ['edx,', '[ebp+var_7C]']
push ['edx']
call ['_FT_MulDiv']
add ['esp,', '0Ch']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_CF43']
mov ['[ebp+var_7C],', '0']
mov ['eax,', '[ebp+var_7C]']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_80]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+var_4C]']
mov ['[eax+edx*8],', 'ecx']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_7C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+var_4C]']
mov ['[edx+ecx*8+4],', 'eax']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_8C]']
mov ['[ebp+var_88],', 'ecx']
mov ['edx,', '[ebp+var_30]']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_3C],', 'eax']
jmp ['loc_CCDE']
mov ['ecx,', '[ebp+var_9C]']
add ['ecx,', '1']
mov ['[ebp+var_50],', 'ecx']
jmp ['loc_CC1D']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN37_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '0A0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN36_0']
dd ['offset', '$LN29_1']
dd ['0FFFFFFE0h,', '8']
dd ['offset', '$LN30_1']
dd ['0FFFFFFD0h,', '8']
dd ['offset', '$LN31']
dd ['0FFFFFFC0h,', '8']
dd ['offset', '$LN32_1']
dd ['0FFFFFFA0h,', '8']
dd ['offset', '$LN33_1']
db ['90h']
db ['3', 'dup(0FFh)']
dd ['8']
dd ['offset', '$LN34_1']
dd ['0FFFFFF80h,', '8']
dd ['offset', '$LN35_0']
align ['4']
endp
_FT_Outline_Reverse proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_D079']
jmp ['loc_D188']
mov ['[ebp+var_8],', '0']
xor ['eax,', 'eax']
mov ['[ebp+var_4],', 'ax']
jmp ['short', 'loc_D094']
mov ['cx,', '[ebp+var_4]']
add ['cx,', '1']
mov ['[ebp+var_4],', 'cx']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jge ['loc_D179']
movzx ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
movsx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_C]']
lea ['ecx,', '[edx+eax*8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_14]']
jnb ['short', 'loc_D11D']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '8']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_D0D5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[ebp+var_2C]']
jnb ['short', 'loc_D16B']
mov ['edx,', '[ebp+var_28]']
mov ['al,', '[edx]']
mov ['[ebp+var_2D],', 'al']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_2C]']
mov ['al,', '[edx]']
mov ['[ecx],', 'al']
mov ['ecx,', '[ebp+var_2C]']
mov ['dl,', '[ebp+var_2D]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_D135']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_D088']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
xor ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN12_6']
dd ['offset', '$LN11_5']
db ['0Fh', 'dup(0CCh)']
endp
_FT_Outline_Get_Bitmap proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_D207']
push ['offset', '$SG12365']
push ['2A0h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_D255']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_38],', 'eax']
mov ['[ebp+var_30],', '0']
mov ['ecx,', '[ebp+arg_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+12h]']
cmp ['edx,', '2']
jz ['short', 'loc_D238']
mov ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+12h]']
cmp ['ecx,', '5']
jz ['short', 'loc_D238']
mov ['edx,', '[ebp+arg_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+12h]']
cmp ['eax,', '6']
jnz ['short', 'loc_D241']
mov ['ecx,', '[ebp+var_30]']
or ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
lea ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Outline_Render']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN7_1']
dd ['offset', '$LN6_9']
db ['0Dh', 'dup(0CCh)']
endp
_FT_Outline_Render proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_D2EC']
push ['offset', '$SG12344']
push ['26Dh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_D3E2']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_D30E']
push ['offset', '$SG12346']
push ['270h']
push ['14h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '14h']
jmp ['loc_D3E2']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_D330']
push ['offset', '$SG12348']
push ['273h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_D3E2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+94h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'edx']
mov ['[ebp+var_4],', '13h']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D3B4']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+34h]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+38h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_D394']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '0FFh']
cmp ['edx,', '13h']
jz ['short', 'loc_D396']
jmp ['short', 'loc_D3B4']
lea ['eax,', '[ebp+var_14]']
push ['eax']
push ['6F75746Ch']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Lookup_Renderer']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
jmp ['short', 'loc_D358']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_D3DF']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
test ['edx,', 'edx']
jz ['short', 'loc_D3DF']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D3DF']
push ['0']
push ['0']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Set_Renderer']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN12_7']
dd ['offset', '$LN11_6']
db ['0Bh', 'dup(0CCh)']
endp
_FT_Outline_Get_Orientation proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '6Ch']
push ['edi']
lea ['edi,', '[ebp+var_6C]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_58],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_D460']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'word', 'ptr', '[eax+2]']
test ['ecx,', 'ecx']
jg ['short', 'loc_D467']
xor ['eax,', 'eax']
jmp ['loc_D5F8']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Outline_Get_CBox']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[ebp+var_10]']
jz ['short', 'loc_D487']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+var_C]']
jnz ['short', 'loc_D491']
mov ['eax,', '2']
jmp ['loc_D5F8']
cmp ['[ebp+var_10],', '0']
jge ['short', 'loc_D4A1']
mov ['eax,', '[ebp+var_10]']
neg ['eax']
mov ['[ebp+var_60],', 'eax']
jmp ['short', 'loc_D4A7']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_60],', 'ecx']
cmp ['[ebp+var_18],', '0']
jge ['short', 'loc_D4B7']
mov ['edx,', '[ebp+var_18]']
neg ['edx']
mov ['[ebp+var_64],', 'edx']
jmp ['short', 'loc_D4BD']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_64],', 'eax']
mov ['ecx,', '[ebp+var_60]']
or ['ecx,', '[ebp+var_64]']
push ['ecx']
call ['_FT_MSB']
add ['esp,', '4']
sub ['eax,', '0Eh']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jle ['short', 'loc_D4E0']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_68],', 'edx']
jmp ['short', 'loc_D4E7']
mov ['[ebp+var_68],', '0']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_FT_MSB']
add ['esp,', '4']
sub ['eax,', '0Eh']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jle ['short', 'loc_D510']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_6C],', 'edx']
jmp ['short', 'loc_D517']
mov ['[ebp+var_6C],', '0']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_4C],', '0']
jmp ['short', 'loc_D53F']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '1']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['[ebp+var_4C],', 'edx']
jge ['loc_D5D8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_4C]']
movsx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[edx+ecx*8]']
mov ['ecx,', '[edx+ecx*8+4]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_54]']
mov ['[ebp+var_50],', 'edx']
jmp ['short', 'loc_D582']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_50]']
cmp ['ecx,', '[ebp+var_5C]']
jg ['short', 'loc_D5CA']
mov ['edx,', '[ebp+var_50]']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[eax+edx*8]']
mov ['edx,', '[eax+edx*8+4]']
mov ['[ebp+var_44],', 'ecx']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+var_40]']
sub ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_24]']
sar ['eax,', 'cl']
mov ['edx,', '[ebp+var_44]']
add ['edx,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_20]']
sar ['edx,', 'cl']
imul ['eax,', 'edx']
add ['eax,', '[ebp+var_58]']
mov ['[ebp+var_58],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_30],', 'ecx']
jmp ['short', 'loc_D579']
mov ['edx,', '[ebp+var_5C]']
add ['edx,', '1']
mov ['[ebp+var_54],', 'edx']
jmp ['loc_D536']
cmp ['[ebp+var_58],', '0']
jle ['short', 'loc_D5E7']
mov ['eax,', '1']
jmp ['short', 'loc_D5F8']
jmp ['short', 'loc_D5F8']
cmp ['[ebp+var_58],', '0']
jge ['short', 'loc_D5F3']
xor ['eax,', 'eax']
jmp ['short', 'loc_D5F8']
jmp ['short', 'loc_D5F8']
mov ['eax,', '2']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN29_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '6Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN28_2']
dd ['offset', '$LN25_1']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['8']
dd ['offset', '$LN26_1']
dd ['0FFFFFFBCh,', '8']
dd ['offset', '$LN27_2']
align ['8']
endp
_ft_validator_init proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+40h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+44h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+48h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4Ch],', '0']
pop ['ebp']
retn
align ['8']
endp
_ft_validator_run proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
or ['eax,', '0FFFFFFFFh']
pop ['ebp']
retn
align ['4']
endp
_ft_validator_error proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+4Ch],', 'edx']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__longjmp']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Raccess_Guess proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_D706']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '9']
jge ['loc_D79D']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[edx+ecx*4],', '0']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_D73C']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_D749']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[ecx+eax*4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax+edx*4],', '0']
jz ['short', 'loc_D757']
jmp ['short', 'loc_D6FD']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_10]']
lea ['eax,', '[edx+ecx*4]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', 'ds:_ft_raccess_guess_table[ecx*8]']
call ['edx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_14]']
mov ['[edx+ecx*4],', 'eax']
jmp ['loc_D6FD']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_FT_Raccess_Get_HeaderInfo proc	near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '58h']
push ['edi']
lea ['edi,', '[ebp+var_58]']
mov ['ecx,', '16h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D7FF']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_DA7D']
push ['10h']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D822']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_DA7D']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
movzx ['ecx,', '[ebp+eax+var_24]']
shl ['ecx,', '18h']
mov ['edx,', '1']
shl ['edx,', '0']
movzx ['eax,', '[ebp+edx+var_24]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '1']
shl ['edx,', '1']
movzx ['eax,', '[ebp+edx+var_24]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
movzx ['edx,', '[ebp+eax+var_24]']
or ['ecx,', 'edx']
add ['ecx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'ecx']
mov ['ecx,', '1']
shl ['ecx,', '2']
movzx ['edx,', '[ebp+ecx+var_24]']
shl ['edx,', '18h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '5']
movzx ['eax,', '[ebp+ecx+var_24]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '1']
imul ['eax,', 'ecx,', '6']
movzx ['ecx,', '[ebp+eax+var_24]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '7']
movzx ['eax,', '[ebp+ecx+var_24]']
or ['edx,', 'eax']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_44],', 'edx']
mov ['ecx,', '1']
shl ['ecx,', '3']
movzx ['edx,', '[ebp+ecx+var_24]']
shl ['edx,', '18h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '9']
movzx ['eax,', '[ebp+ecx+var_24]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '1']
imul ['eax,', 'ecx,', '0Ah']
movzx ['ecx,', '[ebp+eax+var_24]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0Bh']
movzx ['eax,', '[ebp+ecx+var_24]']
or ['edx,', 'eax']
mov ['[ebp+var_48],', 'edx']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+var_48]']
cmp ['edx,', '[ebp+var_44]']
jnz ['short', 'loc_D910']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_D929']
push ['offset', '$SG12499']
push ['5Ah']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['loc_DA7D']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D94A']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_DA7D']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0Fh']
movzx ['edx,', '[ebp+ecx+var_24]']
add ['edx,', '1']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0Fh']
mov ['[ebp+ecx+var_3C],', 'dl']
push ['10h']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D989']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_DA7D']
mov ['[ebp+var_4C],', '1']
mov ['[ebp+var_50],', '1']
mov ['[ebp+var_54],', '0']
jmp ['short', 'loc_D9A9']
mov ['ecx,', '[ebp+var_54]']
add ['ecx,', '1']
mov ['[ebp+var_54],', 'ecx']
cmp ['[ebp+var_54],', '10h']
jge ['short', 'loc_D9DF']
mov ['edx,', '[ebp+var_54]']
movzx ['eax,', '[ebp+edx+var_3C]']
test ['eax,', 'eax']
jz ['short', 'loc_D9C2']
mov ['[ebp+var_4C],', '0']
mov ['ecx,', '[ebp+var_54]']
movzx ['edx,', '[ebp+ecx+var_3C]']
mov ['eax,', '[ebp+var_54]']
movzx ['ecx,', '[ebp+eax+var_24]']
cmp ['edx,', 'ecx']
jz ['short', 'loc_D9DD']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_D9A0']
cmp ['[ebp+var_4C],', '0']
jnz ['short', 'loc_DA01']
cmp ['[ebp+var_50],', '0']
jnz ['short', 'loc_DA01']
push ['offset', '$SG12510']
push ['70h']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['short', 'loc_DA7D']
push ['8']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['edx,', 'ax']
mov ['[ebp+var_58],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_DA33']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_DA7D']
cmp ['[ebp+var_58],', '0FFFFFFFFh']
jnz ['short', 'loc_DA4F']
push ['offset', '$SG12516']
push ['7Dh']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['short', 'loc_DA7D']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_58]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_DA70']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_DA7D']
mov ['edx,', '[ebp+var_44]']
add ['edx,', '[ebp+var_58]']
mov ['eax,', '[ebp+arg_C]']
mov ['[eax],', 'edx']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '58h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN21_1']
dd ['offset', '$LN18_1']
dd ['0FFFFFFDCh,', '10h']
dd ['offset', '$LN19_2']
dd ['0FFFFFFC4h,', '10h']
dd ['offset', '$LN20_1']
align ['4']
endp
_FT_Raccess_Get_DataOffsets proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_28],', 'ecx']
mov ['[ebp+var_30],', '0']
mov ['[ebp+var_34],', '0']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_DB33']
push ['offset', '$SG12562']
call ['_FT_Message']
add ['esp,', '4']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_DB15']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DB58']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_DF32']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['eax,', 'ax']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DB7C']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_DF32']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_DB97']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[ebp+var_18]']
jge ['loc_DF1B']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_DBF4']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['edx,', 'ax']
mov ['[ebp+var_1C],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_DBF4']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['edx,', 'ax']
mov ['[ebp+var_24],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DBFC']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_DF32']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_DC56']
mov ['edx,', '[ebp+var_20]']
and ['edx,', '0FFh']
movsx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
sar ['ecx,', '8']
and ['ecx,', '0FFh']
movsx ['edx,', 'cl']
push ['edx']
mov ['eax,', '[ebp+var_20]']
sar ['eax,', '10h']
and ['eax,', '0FFh']
movsx ['ecx,', 'al']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
sar ['edx,', '18h']
and ['edx,', '0FFh']
movsx ['eax,', 'dl']
push ['eax']
push ['offset', '$SG12582']
call ['_FT_Message']
add ['esp,', '14h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_DBFC']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_DC80']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
push ['offset', '$SG12587']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_DC5A']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+arg_10]']
jnz ['loc_DF16']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_1C]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DCC5']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_DF32']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_1C]']
mov ['eax,', '[edx]']
push ['eax']
push ['0']
push ['8']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DCF2']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_DF32']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_DD04']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax]']
jge ['loc_DDE1']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_34]']
mov ['[edx+ecx*8],', 'ax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DD37']
jmp ['$Exit$58']
push ['2']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DD53']
jmp ['$Exit$58']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DD71']
jmp ['$Exit$58']
push ['4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DD8D']
jmp ['$Exit$58']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0FFFFFFh']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_34]']
mov ['[eax+edx*8+4],', 'ecx']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '3']
jl ['short', 'loc_DDD8']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ecx+eax*8+4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_34]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*8]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
push ['offset', '$SG12609']
call ['_FT_Message']
add ['esp,', '10h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_DDA0']
jmp ['loc_DCFB']
movzx ['edx,', '[ebp+arg_14]']
test ['edx,', 'edx']
jz ['loc_DE8C']
mov ['esi,', 'esp']
push ['offset', '_ft_raccess_sort_ref_by_id']
push ['8']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__qsort']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '3']
jl ['short', 'loc_DE2E']
push ['offset', '$SG12619']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_DE10']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_DE44']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ecx]']
jge ['short', 'loc_DE8C']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '3']
jl ['short', 'loc_DE86']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[eax+edx*8+4]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_34]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
push ['offset', '$SG12627']
call ['_FT_Message']
add ['esp,', '10h']
xor ['eax,', 'eax']
jnz ['short', 'loc_DE4E']
jmp ['short', 'loc_DE3B']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_1C]']
mov ['eax,', '[edx]']
push ['eax']
push ['0']
push ['4']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DEB3']
jmp ['short', '$Exit$58']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_DEC5']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax]']
jge ['short', 'loc_DEE7']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[eax+edx*8+4]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_30]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_DEBC']
mov ['ecx,', '[ebp+arg_18]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx],', 'edx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_34],', '0']
xor ['edx,', 'edx']
jnz ['short', '$Exit$58']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_DF32']
jmp ['loc_DB8E']
push ['offset', '$SG12638']
push ['0FEh']
push ['1']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN57']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN56_0']
dd ['offset', '$LN55_0']
db ['0Ah', 'dup(0CCh)']
endp
_FT_Stream_New	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_DFC4']
push ['offset', '$SG9339']
push ['0A4h']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_E0F8']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_DFE6']
push ['offset', '$SG9341']
push ['0A7h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_E0F8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_10],', 'edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['28h']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_E00E']
jmp ['$Exit$23']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+1Ch],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
and ['edx,', '1']
jz ['short', 'loc_E040']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_FT_Stream_OpenMemory']
add ['esp,', '0Ch']
jmp ['loc_E0C1']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
and ['eax,', '4']
jz ['short', 'loc_E06E']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_FT_Stream_Open']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
mov ['[ecx+10h],', 'eax']
jmp ['short', 'loc_E0C1']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
and ['edx,', '2']
jz ['short', 'loc_E0A7']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jz ['short', 'loc_E0A7']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_14],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_E081']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_E0C1']
push ['offset', '$SG9356']
push ['0CDh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_E0E4']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_14],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_E0C7']
jmp ['short', 'loc_E0ED']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+1Ch],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN21_2']
dd ['offset', '$LN20_2']
align ['8']
endp
_FT_Stream_Free	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E17F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stream_Close']
add ['esp,', '4']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_E17F']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_E164']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Stream_OpenMemory proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+20h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
pop ['ebp']
retn
align ['4']
endp
_FT_Stream_Close proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E203']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_E203']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Stream_Seek	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_E289']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_E287']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '$SG13131']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG13132']
push ['47h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_E2C3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+4]']
jbe ['short', 'loc_E2C3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG13135']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG13136']
push ['51h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_E2D2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Stream_Skip	proc near		
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_E307']
push ['offset', '$SG13144']
push ['60h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
jmp ['short', 'loc_E31D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
endp
_FT_Stream_Pos	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+8]']
pop ['ebp']
retn
align ['8']
endp
_FT_Stream_Read	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_ReadAt']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_FT_Stream_ReadAt proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_E3C3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '$SG13168']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG13169']
push ['86h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
jmp ['loc_E46E']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_E3F5']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_E428']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_C]']
jbe ['short', 'loc_E40F']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_C]']
jnb ['short', 'loc_E46B']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['offset', '$SG13174']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG13175']
push ['9Ch']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Stream_TryRead proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+4]']
jb ['short', 'loc_E4AB']
jmp ['short', '$Exit$7']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_E4E0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
call ['ecx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_E519']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
sub ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_8]']
jbe ['short', 'loc_E4FD']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_FT_Stream_EnterFrame proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E579']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jz ['short', 'loc_E590']
push ['offset', '$SG13222']
push ['0F2h']
push ['offset', '$SG13223']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_E56A']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['loc_E6C0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+4]']
jbe ['short', 'loc_E5EC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG13227']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG13228']
push ['101h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$21']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ft_mem_qalloc']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_E610']
jmp ['$Exit$21']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_E692']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG13233']
call ['_FT_Message']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_E659']
push ['offset', '$SG13238']
push ['118h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax+20h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
add ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
jmp ['$Exit$21']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+4]']
jnb ['short', 'loc_E6DF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+8]']
cmp ['edx,', '[ebp+arg_4]']
jnb ['short', 'loc_E71A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
push ['offset', '$SG13242']
call ['_FT_Message']
add ['esp,', '10h']
push ['offset', '$SG13243']
push ['128h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_8],', 'eax']
jmp ['short', '$Exit$21']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+20h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
add ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN19_3']
dd ['offset', '$LN18_2']
align ['4']
endp
_FT_Stream_ExitFrame proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_E7B0']
push ['offset', '$SG13251']
push ['143h']
push ['offset', '$SG13252']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_E793']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+14h],', '0']
jz ['short', 'loc_E7E5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_E7C6']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+20h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+24h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Stream_ExtractFrame	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_E84B']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+20h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+24h],', '0']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_FT_Stream_ReleaseFrame	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E8AA']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_E8AA']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_E88B']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Stream_GetChar proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E8E2']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_E8F9']
push ['offset', '$SG13268']
push ['15Bh']
push ['offset', '$SG13269']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_E8D3']
mov ['byte', 'ptr', '[ebp+var_4+3],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+20h]']
cmp ['ecx,', '[eax+24h]']
jnb ['short', 'loc_E929']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'eax']
mov ['al,', 'byte', 'ptr', '[ebp+var_4+3]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_FT_Stream_GetUShort proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E96B']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_E982']
push ['offset', '$SG13281']
push ['16Ch']
push ['offset', '$SG13282']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_E95C']
xor ['edx,', 'edx']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+24h]']
jnb ['short', 'loc_E9D5']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-2]']
or ['edx,', 'eax']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'edx']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_Stream_GetUOffset proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_EA1B']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_EA32']
push ['offset', '$SG13319']
push ['192h']
push ['offset', '$SG13320']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_EA0C']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+24h]']
jnb ['short', 'loc_EA99']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '3']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-3]']
or ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Stream_GetULong proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_EADB']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_EAF2']
push ['offset', '$SG13340']
push ['1A4h']
push ['offset', '$SG13341']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_EACC']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+24h]']
jnb ['short', 'loc_EB6E']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-4]']
shl ['ecx,', '18h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-4]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-4]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-4]']
or ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_FT_Stream_GetUShortLE proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_EBAB']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_EBC2']
push ['offset', '$SG13300']
push ['17Fh']
push ['offset', '$SG13301']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_EB9C']
xor ['edx,', 'edx']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+24h]']
jnb ['short', 'loc_EC15']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-2]']
shl ['ecx,', '8']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-2]']
or ['ecx,', 'eax']
mov ['word', 'ptr', '[ebp+var_8],', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'edx']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_FT_Stream_GetULongLE proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_EC5B']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_EC72']
push ['offset', '$SG13363']
push ['1B6h']
push ['offset', '$SG13364']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_EC4C']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+24h]']
jnb ['short', 'loc_ECEE']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-4]']
shl ['ecx,', '18h']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-4]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-4]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-4]']
or ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_FT_Stream_ReadChar proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_ED45']
push ['offset', '$SG13386']
push ['1C8h']
push ['offset', '$SG13387']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_ED28']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_ED89']
mov ['esi,', 'esp']
push ['1']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jz ['short', 'loc_ED87']
jmp ['short', '$Fail$15']
jmp ['short', 'loc_EDAC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+4]']
jnb ['short', 'loc_EDAA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['cl,', '[eax+ecx]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'cl']
jmp ['short', 'loc_EDAC']
jmp ['short', '$Fail$15']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
jmp ['short', 'loc_EDF9']
push ['offset', '$SG13394']
push ['1DDh']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
push ['offset', '$SG13395']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['al,', 'al']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN13_3']
dd ['offset', '$LN12_8']
align ['4']
endp
_FT_Stream_ReadUShort proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
xor ['eax,', 'eax']
mov ['word', 'ptr', '[ebp+var_14],', 'ax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_EE7D']
push ['offset', '$SG13408']
push ['1EFh']
push ['offset', '$SG13409']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_EE60']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+4]']
jnb ['loc_EF24']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_EEDC']
mov ['esi,', 'esp']
push ['2']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '2']
jz ['short', 'loc_EED4']
jmp ['short', '$Fail$16']
lea ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_EEEA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_EF22']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '2']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
mov ['word', 'ptr', '[ebp+var_14],', 'ax']
jmp ['short', 'loc_EF26']
jmp ['short', '$Fail$16']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['ax,', 'word', 'ptr', '[ebp+var_14]']
jmp ['short', 'loc_EF74']
push ['offset', '$SG13423']
push ['20Ch']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
push ['offset', '$SG13424']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN14_3']
dd ['offset', '$LN13_4']
db ['0Ah', 'dup(0CCh)']
endp
_FT_Stream_ReadUOffset proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_EFFE']
push ['offset', '$SG13466']
push ['24Dh']
push ['offset', '$SG13467']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_EFE1']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+4]']
jnb ['loc_F0B8']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_F05D']
mov ['esi,', 'esp']
push ['3']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '3']
jz ['short', 'loc_F055']
jmp ['short', '$Fail$16_0']
lea ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_F06B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+8]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_F0B6']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['edx,', '10h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-3]']
shl ['eax,', '8']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-3]']
or ['edx,', 'ecx']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_F0BA']
jmp ['short', '$Fail$16_0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_F107']
push ['offset', '$SG13483']
push ['26Ah']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
push ['offset', '$SG13484']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14_4']
dd ['offset', '$LN13_5']
align ['8']
endp
_FT_Stream_ReadULong proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_F18E']
push ['offset', '$SG13497']
push ['27Ch']
push ['offset', '$SG13498']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_F171']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+4]']
jnb ['loc_F260']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_F1F0']
mov ['esi,', 'esp']
push ['4']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '4']
jz ['short', 'loc_F1E8']
jmp ['$Fail$16_1']
lea ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_F1FE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+8]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_F25E']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['edx,', '18h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
or ['edx,', 'ecx']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_F262']
jmp ['short', '$Fail$16_1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_F2AF']
push ['offset', '$SG13516']
push ['299h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
push ['offset', '$SG13517']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN14_5']
dd ['offset', '$LN13_6']
db ['0Eh', 'dup(0CCh)']
endp
_FT_Stream_ReadUShortLE	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
xor ['eax,', 'eax']
mov ['word', 'ptr', '[ebp+var_14],', 'ax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_F33D']
push ['offset', '$SG13437']
push ['21Eh']
push ['offset', '$SG13438']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_F320']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+4]']
jnb ['loc_F3E4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_F39C']
mov ['esi,', 'esp']
push ['2']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
call ['eax']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '2']
jz ['short', 'loc_F394']
jmp ['short', '$Fail$16_2']
lea ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_F3AA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_F3E2']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '2']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-2]']
shl ['edx,', '8']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-2]']
or ['edx,', 'ecx']
mov ['word', 'ptr', '[ebp+var_14],', 'dx']
jmp ['short', 'loc_F3E6']
jmp ['short', '$Fail$16_2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['ax,', 'word', 'ptr', '[ebp+var_14]']
jmp ['short', 'loc_F434']
push ['offset', '$SG13452']
push ['23Bh']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
push ['offset', '$SG13453']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN14_6']
dd ['offset', '$LN13_7']
db ['0Ah', 'dup(0CCh)']
endp
_FT_Stream_ReadULongLE proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_F4BE']
push ['offset', '$SG13530']
push ['2ABh']
push ['offset', '$SG13531']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_F4A1']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+4]']
jnb ['loc_F590']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_F520']
mov ['esi,', 'esp']
push ['4']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
call ['edx']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '4']
jz ['short', 'loc_F518']
jmp ['$Fail$16_3']
lea ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_F52E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+8]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_F58E']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['edx,', '18h']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
or ['edx,', 'ecx']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_F592']
jmp ['short', '$Fail$16_3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_F5DF']
push ['offset', '$SG13549']
push ['2C8h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
push ['offset', '$SG13550']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN14_7']
dd ['offset', '$LN13_8']
db ['0Eh', 'dup(0CCh)']
endp
_FT_Stream_ReadFields proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_F674']
push ['offset', '$SG13562']
push ['2DCh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_FA38']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_F696']
push ['offset', '$SG13564']
push ['2DFh']
push ['28h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '28h']
jmp ['loc_FA38']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
sub ['ecx,', '4']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '15h']
ja ['$LN9_4']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'ds:$LN31_0[edx]']
jmp ['ds:$LN32_2[eax*4]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_EnterFrame']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_F6F5']
jmp ['$Exit$33']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+20h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
jmp ['loc_FA14']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+24h]']
jbe ['short', 'loc_F747']
push ['offset', '$SG13581']
push ['2FFh']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_4],', 'eax']
jmp ['$Exit$33']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '18h']
jnz ['short', 'loc_F773']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
jmp ['loc_FA14']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_14],', '18h']
jmp ['loc_F99E']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-2]']
or ['eax,', 'ecx']
movzx ['edx,', 'ax']
mov ['[ebp+var_10],', 'edx']
mov ['[ebp+var_14],', '10h']
jmp ['loc_F99E']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-2]']
shl ['eax,', '8']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-2]']
or ['eax,', 'edx']
movzx ['eax,', 'ax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_14],', '10h']
jmp ['loc_F99E']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '4']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['edx,', '18h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax-4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx-4]']
or ['edx,', 'ecx']
mov ['[ebp+var_10],', 'edx']
mov ['[ebp+var_14],', '0']
jmp ['loc_F99E']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['eax,', '18h']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[edx+ecx-4]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx-4]']
or ['eax,', 'edx']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_14],', '0']
jmp ['loc_F99E']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '3']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax-3]']
or ['ecx,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '8']
jmp ['short', 'loc_F99E']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '3']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
imul ['edx,', 'eax,', '0']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx-3]']
or ['ecx,', 'edx']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '8']
jmp ['short', 'loc_F99E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+20h],', 'ecx']
jmp ['$Exit$33']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
and ['eax,', '1']
jz ['short', 'loc_F9B9']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
shl ['edx,', 'cl']
mov ['ecx,', '[ebp+var_14]']
sar ['edx,', 'cl']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['al,', '[edx+1]']
mov ['byte', 'ptr', '[ebp+var_24],', 'al']
cmp ['byte', 'ptr', '[ebp+var_24],', '1']
jz ['short', 'loc_F9E3']
cmp ['byte', 'ptr', '[ebp+var_24],', '2']
jz ['short', 'loc_F9ED']
cmp ['byte', 'ptr', '[ebp+var_24],', '4']
jz ['short', 'loc_F9F9']
jmp ['short', 'loc_FA03']
mov ['ecx,', '[ebp+var_18]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_10]']
mov ['[ecx],', 'dl']
jmp ['short', 'loc_FA0B']
mov ['eax,', '[ebp+var_18]']
mov ['cx,', 'word', 'ptr', '[ebp+var_10]']
mov ['[eax],', 'cx']
jmp ['short', 'loc_FA0B']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_FA0B']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '1']
test ['ecx,', 'ecx']
jnz ['loc_F6A6']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
test ['edx,', 'edx']
jz ['short', 'loc_FA35']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_ExitFrame']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN16_1']
dd ['offset', '$LN15_6']
dd ['offset', '$LN14_8']
dd ['offset', '$LN13_9']
dd ['offset', '$LN12_9']
dd ['offset', '$LN11_7']
dd ['offset', '$LN10_8']
dd ['offset', '$LN19_4']
dd ['offset', '$LN9_4']
db ['1,', '1,', '9,', '9']
db ['2,', '2,', '3,', '3']
db ['4,', '4,', '5,', '5']
db ['6,', '6,', '7,', '7']
db ['8,', '8']
align ['4']
endp
_FT_Get_Sfnt_Table proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_FB24']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '8']
jz ['short', 'loc_FB24']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jz ['short', 'loc_FAF5']
mov ['esi,', 'esp']
push ['offset', '$SG11423']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+20h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_FAB8']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_FB24']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_FT_Load_Sfnt_Table proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_FB65']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '8']
jnz ['short', 'loc_FB81']
push ['offset', '$SG11440']
push ['0E92h']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_FC0E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_C],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jz ['short', 'loc_FBBE']
mov ['esi,', 'esp']
push ['offset', '$SG11450']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+20h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_FB81']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_FBE7']
push ['offset', '$SG11453']
push ['0E96h']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['short', 'loc_FC0E']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Sfnt_Table_Info proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_FC57']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '8']
jnz ['short', 'loc_FC73']
push ['offset', '$SG11467']
push ['0EABh']
push ['23h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '23h']
jmp ['loc_FD01']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jz ['short', 'loc_FCB0']
mov ['esi,', 'esp']
push ['offset', '$SG11477']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+20h]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_4],', 'ecx']
xor ['edx,', 'edx']
jnz ['short', 'loc_FC73']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_FCD9']
push ['offset', '$SG11480']
push ['0EAFh']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['short', 'loc_FD01']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11_8']
dd ['offset', '$LN10_9']
db ['9', 'dup(0CCh)']
endp
_FT_Get_CMap_Language_ID proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_FD7A']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_FD7E']
xor ['eax,', 'eax']
jmp ['short', 'loc_FDFD']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jz ['short', 'loc_FDC3']
mov ['esi,', 'esp']
push ['offset', '$SG11498']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+20h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_FD86']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_FDD7']
xor ['eax,', 'eax']
jmp ['short', 'loc_FDFD']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_FDFA']
xor ['eax,', 'eax']
jmp ['short', 'loc_FDFD']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN12_11']
dd ['offset', '$LN11_9']
db ['0Ah', 'dup(0CCh)']
endp
_FT_Get_CMap_Format proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_FE7A']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_FE82']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_FF03']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_20],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jz ['short', 'loc_FEC7']
mov ['esi,', 'esp']
push ['offset', '$SG11519']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+20h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_4],', 'edx']
xor ['eax,', 'eax']
jnz ['short', 'loc_FE8A']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_FEDC']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_FF03']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_FF00']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_FF03']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN12_12']
dd ['offset', '$LN11_10']
align ['8']
endp
_open_face_PS_from_sfnt_stream proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '48h']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_3C],', '0']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+arg_C],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Pos']
add ['esp,', '4']
mov ['[ebp+var_2C],', 'eax']
lea ['edx,', '[ebp+var_31]']
push ['edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_ft_lookup_PS_in_sfnt_stream']
add ['esp,', '14h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_FFB2']
jmp ['$Exit$19']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_FFCE']
jmp ['$Exit$19']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_FFED']
jmp ['short', '$Exit$19']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1000C']
jmp ['short', '$Exit$19']
movzx ['eax,', '[ebp+var_31]']
test ['eax,', 'eax']
jz ['short', 'loc_1001D']
mov ['[ebp+var_44],', 'offset', '$SG9981']
jmp ['short', 'loc_10024']
mov ['[ebp+var_44],', 'offset', '$SG9982']
cmp ['[ebp+arg_8],', '0']
jge ['short', 'loc_10032']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_48],', 'ecx']
jmp ['short', 'loc_10039']
mov ['[ebp+var_48],', '0']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_open_face_from_buffer']
add ['esp,', '18h']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '0FFh']
cmp ['edx,', '2']
jnz ['short', 'loc_10088']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_10088']
mov ['eax,', '[ebp+var_40]']
jmp ['short', 'loc_1008B']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN17_2']
dd ['offset', '$LN13_12']
dd ['0FFFFFFE8h,', '4']
dd ['offset', '$LN14_9']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN15_7']
dd ['0FFFFFFCFh,', '1']
dd ['offset', '$LN16_2']
align ['8']
endp
_open_face_from_buffer proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_34],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
lea ['edx,', '[ebp+var_34]']
push ['edx']
push ['offset', '_memory_stream_close']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_new_memory_stream']
add ['esp,', '14h']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_10176']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_4],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_10153']
mov ['eax,', '[ebp+var_2C]']
jmp ['loc_10208']
mov ['[ebp+var_24],', '2']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_101A5']
mov ['ecx,', '[ebp+var_24]']
or ['ecx,', '8']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Get_Module']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Open_Face']
add ['esp,', '10h']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_101DE']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '0FFFFFBFFh']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
mov ['[eax+8],', 'ecx']
jmp ['short', 'loc_10205']
mov ['ecx,', '[ebp+var_34]']
push ['ecx']
call ['_FT_Stream_Close']
add ['esp,', '4']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_34],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_101EA']
mov ['eax,', '[ebp+var_2C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN15_8']
dd ['offset', '$LN13_13']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN14_10']
align ['8']
endp
_ft_raccess_rule_by_darwin_vfs proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_raccess_get_rule_type_from_rule_index']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '3']
jl ['short', 'loc_10288']
cmp ['[ebp+var_4],', '4']
jle ['short', 'loc_10284']
jmp ['short', 'loc_10288']
mov ['al,', '1']
jmp ['short', 'loc_1028A']
xor ['al,', 'al']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_MD5_Init	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '67452301h']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0EFCDAB89h']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+10h],', '98BADCFEh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '10325476h']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
pop ['ebp']
retn
endp
_MD5_Update	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ebp+arg_8]']
and ['edx,', '1FFFFFFFh']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_4]']
jnb ['short', 'loc_10325']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '1Dh']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
and ['eax,', '3Fh']
mov ['[ebp+var_8],', 'eax']
jz ['short', 'loc_103B7']
mov ['ecx,', '40h']
sub ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_10375']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+18h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['loc_103F7']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+18h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+var_C]']
mov ['[ebp+arg_8],', 'edx']
push ['40h']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_body']
add ['esp,', '0Ch']
cmp ['[ebp+arg_8],', '40h']
jb ['short', 'loc_103E0']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '0FFFFFFC0h']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_body']
add ['esp,', '0Ch']
mov ['[ebp+arg_4],', 'eax']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '3Fh']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '18h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_MD5_Final	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
and ['ecx,', '3Fh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+18h],', '80h']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '40h']
sub ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '8']
jnb ['short', 'loc_10487']
mov ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax+18h]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
push ['40h']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '18h']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_body']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '40h']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '8']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax+18h]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
shl ['ecx,', '3']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '38h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['al,', '[eax]']
mov ['[edx+ecx+18h],', 'al']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
shr ['edx,', '8']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '39h']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+ecx+18h],', 'dl']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
shr ['edx,', '10h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3Ah']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+ecx+18h],', 'dl']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
shr ['edx,', '18h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3Bh']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+ecx+18h],', 'dl']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3Ch']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['cl,', '[ecx+4]']
mov ['[eax+edx+18h],', 'cl']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
shr ['eax,', '8']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3Dh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+edx+18h],', 'al']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
shr ['eax,', '10h']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3Eh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+edx+18h],', 'al']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
shr ['eax,', '18h']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3Fh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+edx+18h],', 'al']
push ['40h']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '18h']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_body']
add ['esp,', '0Ch']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['cl,', '[ecx+8]']
mov ['[eax+edx],', 'cl']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
shr ['eax,', '8']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx],', 'al']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
shr ['ecx,', '10h']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx],', 'cl']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
shr ['edx,', '18h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '1']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['al,', '[eax+0Ch]']
mov ['[edx+ecx],', 'al']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
shr ['edx,', '8']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
shr ['edx,', '10h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '6']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
shr ['edx,', '18h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '7']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '1']
shl ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['al,', '[eax+10h]']
mov ['[edx+ecx],', 'al']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+10h]']
shr ['edx,', '8']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '9']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+10h]']
shr ['edx,', '10h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0Ah']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+10h]']
shr ['edx,', '18h']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['cl,', '[ecx+14h]']
mov ['[eax+edx],', 'cl']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
shr ['eax,', '8']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Dh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
shr ['eax,', '10h']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Eh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
shr ['eax,', '18h']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Fh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+edx],', 'al']
push ['98h']
push ['0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_body		proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '64h']
push ['edi']
lea ['edi,', '[ebp+var_64]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[eax+edx]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_28],', 'ecx']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_28]']
mov ['[eax+edx+58h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
xor ['edx,', '[ebp+var_14]']
and ['edx,', '[ebp+var_C]']
xor ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx-28955B88h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '7']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '19h']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['edx,', '1']
imul ['eax,', 'edx,', '5']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '6']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '7']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_2C],', 'ecx']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_2C]']
mov ['[edx+ecx+58h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
and ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx-173848AAh]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shl ['ecx,', '0Ch']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '14h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '3']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '9']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Ah']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Bh']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '4']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx+eax+58h],', 'edx']
mov ['eax,', '[ebp+var_8]']
xor ['eax,', '[ebp+var_C]']
and ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[ecx+eax+242070DBh]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '11h']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '0Fh']
or ['eax,', 'ecx']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0Ch']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Dh']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Eh']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0Fh']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_34]']
mov ['[edx+ecx+58h],', 'eax']
mov ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_8]']
and ['ecx,', '[ebp+var_10]']
xor ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_C]']
lea ['eax,', '[edx+ecx-3E423112h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '16h']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '0Ah']
or ['ecx,', 'edx']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '1']
shl ['ecx,', '4']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '11h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '12h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '13h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '4']
shl ['eax,', '2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx+eax+58h],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
and ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax-0A83F051h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '7']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '19h']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '14h']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '15h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '16h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '17h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_3C]']
mov ['[edx+ecx+58h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
and ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx+4787C62Ah]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shl ['ecx,', '0Ch']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '14h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '18h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['edx,', '1']
imul ['eax,', 'edx,', '19h']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '1Ah']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '1Bh']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_40],', 'ecx']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_40]']
mov ['[eax+edx+58h],', 'ecx']
mov ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_C]']
and ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_40]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+edx-57CFB9EDh]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '11h']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '0Fh']
or ['edx,', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '1Ch']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '1Dh']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '1Eh']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '1Fh']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['[ebp+var_44],', 'edx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+eax+58h],', 'edx']
mov ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_8]']
and ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax-2B96AFFh]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '16h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '0Ah']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '1']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '21h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '22h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '23h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['[ebp+var_48],', 'edx']
mov ['edx,', '4']
shl ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+edx+58h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
xor ['edx,', '[ebp+var_14]']
and ['edx,', '[ebp+var_C]']
xor ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_48]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx+698098D8h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '7']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '19h']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '24h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '25h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '26h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '27h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['[ebp+var_4C],', 'edx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '9']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4C]']
mov ['[ecx+eax+58h],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
and ['eax,', '[ebp+var_8]']
xor ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_4C]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax-74BB0851h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '14h']
or ['eax,', 'ecx']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '28h']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '29h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '2Ah']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '2Bh']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Ah']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_50]']
mov ['[edx+ecx+58h],', 'eax']
mov ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
and ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ebp+var_10]']
lea ['eax,', '[edx+ecx-0A44Fh]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '11h']
mov ['edx,', '[ebp+var_10]']
shr ['edx,', '0Fh']
or ['ecx,', 'edx']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '2Ch']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['edx,', '1']
imul ['eax,', 'edx,', '2Dh']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '2Eh']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '2Fh']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_54],', 'ecx']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Bh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_54]']
mov ['[eax+edx+58h],', 'ecx']
mov ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
and ['edx,', '[ebp+var_10]']
xor ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_54]']
mov ['eax,', '[ebp+var_C]']
lea ['ecx,', '[eax+edx-76A32842h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shl ['edx,', '16h']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '0Ah']
or ['edx,', 'eax']
mov ['[ebp+var_C],', 'edx']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '30h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '31h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '32h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '33h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['[ebp+var_58],', 'edx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_58]']
mov ['[ecx+eax+58h],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
and ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_58]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax+6B901122h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '7']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '19h']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '34h']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '35h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '36h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '37h']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+edx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Dh']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_5C]']
mov ['[edx+ecx+58h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
and ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx-2678E6Dh]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shl ['ecx,', '0Ch']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '14h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '38h']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['edx,', '1']
imul ['eax,', 'edx,', '39h']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3Ah']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3Bh']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_60],', 'ecx']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Eh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_60]']
mov ['[eax+edx+58h],', 'ecx']
mov ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_C]']
and ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+edx-5986BC72h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '11h']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '0Fh']
or ['edx,', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3Ch']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3Dh']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3Eh']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3Fh']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['[ebp+var_64],', 'edx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Fh']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_64]']
mov ['[ecx+eax+58h],', 'edx']
mov ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_8]']
and ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_64]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax+49B40821h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '16h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '0Ah']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
and ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_10]']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx+58h]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax-9E1DA9Eh]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1Bh']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
xor ['eax,', '[ebp+var_C]']
and ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_C]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '6']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+eax-3FBF4CC0h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shl ['ecx,', '9']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '17h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_8]']
and ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_8]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Bh']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+ecx+265E5A51h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '0Eh']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '12h']
or ['edx,', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
xor ['edx,', '[ebp+var_14]']
and ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_14]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+edx-16493856h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '14h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '0Ch']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
and ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_10]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '5']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+eax-29D0EFA3h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Bh']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
and ['ecx,', '[ebp+var_10]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Ah']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+ecx+2441453h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '9']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '17h']
or ['edx,', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
and ['edx,', '[ebp+var_C]']
xor ['edx,', '[ebp+var_8]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Fh']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[ecx+edx-275E197Fh]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '0Eh']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '12h']
or ['eax,', 'ecx']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
and ['eax,', '[ebp+var_8]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '4']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax-182C0438h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '14h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '0Ch']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
and ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_10]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '9']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+eax+21E1CDE6h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Bh']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
and ['ecx,', '[ebp+var_10]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Eh']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+ecx-3CC8F82Ah]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '9']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '17h']
or ['edx,', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
and ['edx,', '[ebp+var_C]']
xor ['edx,', '[ebp+var_8]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[ecx+edx-0B2AF279h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '0Eh']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '12h']
or ['eax,', 'ecx']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
and ['eax,', '[ebp+var_8]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '4']
shl ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax+455A14EDh]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '14h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '0Ch']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
and ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_10]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Dh']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+eax-561C16FBh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Bh']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
and ['ecx,', '[ebp+var_10]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx+58h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx-3105C08h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shl ['ecx,', '9']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '17h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_8]']
and ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_8]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+ecx+676F02D9h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '0Eh']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '12h']
or ['edx,', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
xor ['edx,', '[ebp+var_14]']
and ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_14]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+edx-72D5B376h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '14h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '0Ch']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '5']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+eax-5C6BEh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Ch']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
xor ['ecx,', '[ebp+var_8]']
mov ['edx,', '4']
shl ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx+58h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+ecx-788E097Fh]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shl ['ecx,', '0Bh']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '15h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Bh']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+ecx+6D9D6122h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '10h']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '10h']
or ['edx,', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_10]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Eh']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+edx-21AC7F4h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '17h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '9']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '4']
shl ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx+58h]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax-5B4115BCh]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1Ch']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_8]']
mov ['ecx,', '4']
shl ['ecx,', '2']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx+58h]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax+4BDECFA9h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '0Bh']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '15h']
or ['eax,', 'ecx']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_8]']
xor ['eax,', '[ebp+var_C]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_10]']
lea ['eax,', '[edx+eax-944B4A0h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '10h']
mov ['edx,', '[ebp+var_10]']
shr ['edx,', '10h']
or ['ecx,', 'edx']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_10]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Ah']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_C]']
lea ['ecx,', '[eax+ecx-41404390h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shl ['edx,', '17h']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '9']
or ['edx,', 'eax']
mov ['[ebp+var_C],', 'edx']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
xor ['edx,', '[ebp+var_10]']
xor ['edx,', '[ebp+var_14]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Dh']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+edx+289B7EC6h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1Ch']
or ['eax,', 'ecx']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_8]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_14]']
lea ['eax,', '[edx+eax-155ED806h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
shl ['ecx,', '0Bh']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '15h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
xor ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+ecx-2B10CF7Bh]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '10h']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '10h']
or ['edx,', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_10]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '6']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+edx+4881D05h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '17h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '9']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '9']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+eax-262B2FC7h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Ch']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
xor ['ecx,', '[ebp+var_8]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+ecx-1924661Bh]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '0Bh']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '15h']
or ['edx,', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_C]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Fh']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[ecx+edx+1FA27CF8h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '10h']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_8]']
xor ['eax,', '[ebp+var_10]']
mov ['ecx,', '4']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+eax-3B53A99Bh]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '17h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '9']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_14]']
not ['eax']
or ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_10]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+eax-0BD6DDBCh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Ah']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_10]']
not ['ecx']
or ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+ecx+432AFF97h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '0Ah']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '16h']
or ['edx,', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
not ['edx']
or ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Eh']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[ecx+edx-546BDC59h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '0Fh']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '11h']
or ['eax,', 'ecx']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_8]']
not ['eax']
or ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '5']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_C]']
lea ['eax,', '[edx+eax-36C5FC7h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '15h']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '0Bh']
or ['ecx,', 'edx']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
not ['ecx']
or ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+ecx+655B59C3h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '6']
mov ['eax,', '[ebp+var_8]']
shr ['eax,', '1Ah']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_10]']
not ['edx']
or ['edx,', '[ebp+var_8]']
xor ['edx,', '[ebp+var_C]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+edx-70F3336Eh]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '0Ah']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '16h']
or ['eax,', 'ecx']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_C]']
not ['eax']
or ['eax,', '[ebp+var_14]']
xor ['eax,', '[ebp+var_8]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Ah']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_10]']
lea ['eax,', '[edx+eax-100B83h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '0Fh']
mov ['edx,', '[ebp+var_10]']
shr ['edx,', '11h']
or ['ecx,', 'edx']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_8]']
not ['ecx']
or ['ecx,', '[ebp+var_10]']
xor ['ecx,', '[ebp+var_14]']
mov ['edx,', '4']
shl ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx+58h]']
mov ['edx,', '[ebp+var_C]']
lea ['eax,', '[edx+ecx-7A7BA22Fh]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '15h']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '0Bh']
or ['ecx,', 'edx']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
not ['ecx']
or ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
mov ['edx,', '4']
shl ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx+6FA87E4Fh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Ah']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_10]']
not ['ecx']
or ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Fh']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+ecx-1D31920h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '0Ah']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '16h']
or ['edx,', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
not ['edx']
or ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '6']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[ecx+edx-5CFEBCECh]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '0Fh']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '11h']
or ['eax,', 'ecx']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_8]']
not ['eax']
or ['eax,', '[ebp+var_10]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Dh']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+edx+58h]']
mov ['edx,', '[ebp+var_C]']
lea ['eax,', '[edx+eax+4E0811A1h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '15h']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '0Bh']
or ['ecx,', 'edx']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
not ['ecx']
or ['ecx,', '[ebp+var_C]']
xor ['ecx,', '[ebp+var_10]']
mov ['edx,', '4']
shl ['edx,', '2']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx+58h]']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx-8AC817Eh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '1Ah']
or ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_10]']
not ['ecx']
or ['ecx,', '[ebp+var_8]']
xor ['ecx,', '[ebp+var_C]']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Bh']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+eax+58h]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+ecx-42C50DCBh]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '0Ah']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '16h']
or ['edx,', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
not ['edx']
or ['edx,', '[ebp+var_14]']
xor ['edx,', '[ebp+var_8]']
mov ['eax,', '4']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
add ['edx,', '[ecx+eax+58h]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+edx+2AD7D2BBh]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '0Fh']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '11h']
or ['edx,', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
not ['edx']
or ['edx,', '[ebp+var_10]']
xor ['edx,', '[ebp+var_14]']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '9']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+ecx+58h]']
mov ['ecx,', '[ebp+var_C]']
lea ['edx,', '[ecx+edx-14792C6Fh]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '15h']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '0Bh']
or ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_24]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '40h']
mov ['[ebp+arg_8],', 'edx']
jnz ['loc_10748']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+14h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_glyphslot_init proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+60h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_1C],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
push ['28h']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_11DBD']
jmp ['short', '$Exit$9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+9Ch],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax]']
and ['ecx,', '200h']
jnz ['short', 'loc_11DEB']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_FT_GlyphLoader_New']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', '$Exit$9']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+40h],', '0']
jz ['short', '$Exit$9']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+40h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7_2']
dd ['offset', '$LN6_10']
align ['8']
endp
_ft_glyphslot_clear proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_glyphslot_free_bitmap']
add ['esp,', '4']
push ['20h']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
push ['14h']
push ['0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '6Ch']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+50h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+54h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+5Eh],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+64h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+68h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+80h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+84h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+88h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+98h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+48h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+3Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+90h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+94h],', '0']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
_ft_glyphslot_done proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+60h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+44h],', '0']
jz ['short', 'loc_11FA3']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+44h]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_glyphslot_free_bitmap']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+9Ch],', '0']
jz ['short', 'loc_12013']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '200h']
jnz ['short', 'loc_11FEC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['eax,', '[edx]']
push ['eax']
call ['_FT_GlyphLoader_Done']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+9Ch],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_11FEC']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_lookup_glyph_renderer proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+60h]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+9Ch]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_12078']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+10h]']
cmp ['eax,', '[edx+48h]']
jz ['short', 'loc_12090']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+48h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_FT_Lookup_Renderer']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_glyphslot_grid_fit_metrics proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
mov ['[ebp+var_4],', 'eax']
movzx ['ecx,', '[ebp+arg_4]']
test ['ecx,', 'ecx']
jz ['loc_12164']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
add ['eax,', '3Fh']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
lea ['eax,', '[eax+edx+3Fh]']
and ['eax,', '0FFFFFFC0h']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
lea ['edx,', '[edx+ecx+3Fh]']
and ['edx,', '0FFFFFFC0h']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
and ['ecx,', '0FFFFFFC0h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
and ['ecx,', '0FFFFFFC0h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+18h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[eax+18h]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'ecx']
jmp ['loc_121E7']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
and ['ecx,', '0FFFFFFC0h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
and ['ecx,', '0FFFFFFC0h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+18h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
lea ['ecx,', '[ecx+eax+3Fh]']
and ['ecx,', '0FFFFFFC0h']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
and ['ecx,', '0FFFFFFC0h']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
add ['eax,', '3Fh']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
sub ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+1Ch],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_destroy_size	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_1223D']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+0Ch]']
cmp ['dword', 'ptr', '[edx+3Ch],', '0']
jz ['short', 'loc_12264']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['eax,', '[edx+3Ch]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+28h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+28h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_12264']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_4],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_12285']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_ft_cmap_done_internal proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_1230F']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_1230F']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_destroy_charmaps proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_12364']
jmp ['short', 'loc_123D9']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_12376']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+24h]']
jge ['short', 'loc_123AE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+edx*4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_cmap_done_internal']
add ['esp,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+ecx*4],', '0']
jmp ['short', 'loc_1236D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_123AE']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+24h],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_destroy_face	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+78h],', '0']
jz ['short', 'loc_1242A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+74h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+78h]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+54h],', '0']
jz ['short', 'loc_12444']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+54h]']
push ['eax']
call ['_FT_Done_GlyphSlot']
add ['esp,', '4']
jmp ['short', 'loc_1242A']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['offset', '_destroy_size']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '6Ch']
push ['eax']
call ['_FT_List_Finalize']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+58h],', '0']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+30h],', '0']
jz ['short', 'loc_1248B']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+30h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_destroy_charmaps']
add ['esp,', '8']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+34h],', '0']
jz ['short', 'loc_124BC']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+34h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '400h']
jz ['short', 'loc_124D3']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_124DA']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+68h]']
push ['ecx']
call ['_FT_Stream_Free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+68h],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+80h],', '0']
jz ['short', 'loc_1252A']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+80h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+80h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_12503']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_4],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_1252A']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_Destroy_Driver	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
push ['offset', '_destroy_face']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '10h']
push ['eax']
call ['_FT_List_Finalize']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '200h']
jnz ['short', 'loc_12597']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
call ['_FT_GlyphLoader_Done']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_find_unicode_charmap proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_125D9']
push ['offset', '$SG9714']
push ['3E8h']
push ['offset', '$SG9715']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_125BC']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_12608']
push ['offset', '$SG9717']
push ['3EDh']
push ['26h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '26h']
jmp ['loc_12723']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_4]']
jb ['loc_126BB']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+ecx]']
cmp ['dword', 'ptr', '[eax+4],', '756E6963h']
jnz ['short', 'loc_126B6']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+edx]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
cmp ['edx,', '3']
jnz ['short', 'loc_12671']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+ecx]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '0Ah']
jz ['short', 'loc_1269E']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
test ['eax,', 'eax']
jnz ['short', 'loc_126B6']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+edx]']
movzx ['edx,', 'word', 'ptr', '[ecx+0Ah]']
cmp ['edx,', '4']
jnz ['short', 'loc_126B6']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+ecx]']
mov ['[edx+5Ch],', 'ecx']
xor ['eax,', 'eax']
jmp ['short', 'loc_12723']
jmp ['loc_12617']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_4]']
jb ['short', 'loc_1270C']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax]']
cmp ['dword', 'ptr', '[edx+4],', '756E6963h']
jnz ['short', 'loc_1270A']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+ecx]']
mov ['[edx+5Ch],', 'ecx']
xor ['eax,', 'eax']
jmp ['short', 'loc_12723']
jmp ['short', 'loc_126CA']
push ['offset', '$SG9729']
push ['42Bh']
push ['26h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '26h']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_find_variant_selector_charmap proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_12770']
push ['offset', '$SG9741']
push ['441h']
push ['offset', '$SG9742']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_12753']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1278A']
xor ['eax,', 'eax']
jmp ['loc_1280F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_127AA']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_1280D']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+edx]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
test ['edx,', 'edx']
jnz ['short', 'loc_1280B']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
movzx ['ecx,', 'word', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '5']
jnz ['short', 'loc_1280B']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax]']
push ['edx']
call ['_FT_Get_CMap_Format']
add ['esp,', '4']
cmp ['eax,', '0Eh']
jnz ['short', 'loc_1280B']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx]']
jmp ['short', 'loc_1280F']
jmp ['short', 'loc_127A1']
xor ['eax,', 'eax']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_open_face	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_4],', 'eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+24h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_12894']
jmp ['$Fail$24']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+60h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+64h],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['[eax+68h],', 'edx']
movzx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_128CB']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+8]']
or ['edx,', '400h']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+8],', 'edx']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['3Ch']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_128EB']
jmp ['$Fail$24']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+80h],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+80h]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_12919']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ebp+arg_10]']
jge ['short', 'loc_12957']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+80h]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jnz ['short', 'loc_12957']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+arg_14]']
cmp ['dword', 'ptr', '[eax+edx*8],', '696E6372h']
jnz ['short', 'loc_12955']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+80h]']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+arg_14]']
mov ['eax,', '[ecx+eax*8+4]']
mov ['[edx+30h],', 'eax']
jmp ['short', 'loc_12910']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+30h],', '0']
jz ['short', 'loc_1298D']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+30h]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+68h]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_129A0']
jmp ['short', '$Fail$24']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_find_unicode_charmap']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_129CB']
mov ['edx,', '[ebp+var_20]']
and ['edx,', '0FFh']
cmp ['edx,', '26h']
jz ['short', 'loc_129CB']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', '$Fail$24']
mov ['ecx,', '[ebp+arg_18]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_12A49']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_destroy_charmaps']
add ['esp,', '8']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+34h],', '0']
jz ['short', 'loc_12A0A']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+34h]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_10],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_12A0A']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_C],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_12A25']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_18]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN22_2']
dd ['offset', '$LN21_4']
align ['4']
endp
_memory_stream_close proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_12A9C']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_new_memory_stream proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_12B28']
push ['offset', '$SG9860']
push ['52Dh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['short', 'loc_12B9D']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_12B47']
push ['offset', '$SG9862']
push ['530h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_12B9D']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_10],', 'edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['28h']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_12B75']
jmp ['short', '$Exit$9_0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_FT_Stream_OpenMemory']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_C]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7_3']
dd ['offset', '$LN6_11']
align ['4']
endp
_ft_lookup_PS_in_sfnt_stream proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_10]']
mov ['byte', 'ptr', '[edx],', '0']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_12C31']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_12DDE']
cmp ['[ebp+var_18],', '74797031h']
jz ['short', 'loc_12C56']
push ['offset', '$SG9921']
push ['5A2h']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['loc_12DDE']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
mov ['word', 'ptr', '[ebp+var_10],', 'ax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_12C78']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_12DDE']
push ['6']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_12C97']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_12DDE']
mov ['[ebp+var_14],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_10]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_12CB6']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_10]']
cmp ['[ebp+var_1C],', 'ecx']
jge ['loc_12DC2']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_12D29']
push ['4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_12D29']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_12D29']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_12D31']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_12DDE']
cmp ['[ebp+var_18],', '43494420h']
jnz ['short', 'loc_12D6F']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '16h']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
sub ['ecx,', '16h']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['byte', 'ptr', '[eax],', '1']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_12D6D']
xor ['eax,', 'eax']
jmp ['short', 'loc_12DDE']
jmp ['short', 'loc_12DAB']
cmp ['[ebp+var_18],', '54595031h']
jnz ['short', 'loc_12DAB']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
add ['eax,', '18h']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
sub ['eax,', '18h']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_10]']
mov ['byte', 'ptr', '[edx],', '0']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_12DAB']
xor ['eax,', 'eax']
jmp ['short', 'loc_12DDE']
cmp ['[ebp+arg_4],', '0']
jl ['short', 'loc_12DBD']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_12DBD']
xor ['eax,', 'eax']
jmp ['short', 'loc_12DDE']
jmp ['loc_12CAD']
push ['offset', '$SG9951']
push ['5C7h']
push ['8Eh']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '8Eh']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN19_5']
dd ['offset', '$LN18_4']
db ['0Eh', 'dup(0CCh)']
endp
_Mac_Read_POST_Resource	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jnz ['short', 'loc_12E61']
mov ['[ebp+arg_10],', '0']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_12E6F']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_134CC']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_12E88']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+arg_C]']
jge ['loc_12F6F']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_12EB8']
jmp ['$Exit$88']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_12ED6']
jmp ['$Exit$88']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '4']
jl ['short', 'loc_12EFC']
mov ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['offset', '$SG10026']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_12ED6']
cmp ['[ebp+var_38],', '7FFFFFFFh']
ja ['short', 'loc_12F18']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_28]']
lea ['edx,', '[ecx+eax+6]']
cmp ['edx,', '[ebp+var_28]']
jnb ['short', 'loc_12F5D']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_12F3A']
mov ['edx,', '[ebp+var_38]']
push ['edx']
push ['offset', '$SG10033']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_12F18']
push ['offset', '$SG10034']
push ['63Bh']
push ['9']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '9']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$88']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_28]']
lea ['eax,', '[edx+ecx+6]']
mov ['[ebp+var_28],', 'eax']
jmp ['loc_12E7F']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_12F98']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
push ['offset', '$SG10039']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['edx,', 'edx']
jnz ['short', 'loc_12F6F']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '2']
cmp ['eax,', '6']
jnb ['short', 'loc_12FEC']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '2']
jl ['short', 'loc_12FC9']
mov ['eax,', '[ebp+var_28]']
push ['eax']
push ['offset', '$SG10045']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_12FA7']
push ['offset', '$SG10046']
push ['648h']
push ['0Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ah']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$88']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_13011']
jmp ['$Exit$88']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[ecx+eax],', '80h']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+edx],', '1']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[edx+ecx],', '0']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[edx+ecx],', '0']
mov ['eax,', '1']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[ecx+eax],', '0']
mov ['edx,', '1']
imul ['eax,', 'edx,', '5']
mov ['ecx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[ecx+eax],', '0']
mov ['[ebp+var_2C],', '6']
mov ['[ebp+var_30],', '2']
mov ['[ebp+var_24],', '0']
mov ['[ebp+var_1C],', '1']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_13098']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+arg_C]']
jge ['loc_133A2']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_130C8']
jmp ['$Exit2$89']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_130E6']
jmp ['$Exit2$89']
cmp ['[ebp+var_34],', '7FFFFFFFh']
jbe ['short', 'loc_1310E']
push ['offset', '$SG10058']
push ['666h']
push ['9']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '9']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit2$89']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
movzx ['eax,', 'ax']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1312F']
jmp ['$Exit2$89']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '3']
jl ['short', 'loc_13163']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
push ['offset', '$SG10065']
call ['_FT_Message']
add ['esp,', '14h']
xor ['eax,', 'eax']
jnz ['short', 'loc_1312F']
mov ['[ebp+var_8],', '0Ah']
mov ['ecx,', '[ebp+var_20]']
sar ['ecx,', '8']
test ['ecx,', 'ecx']
jnz ['short', 'loc_131A3']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_1319A']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['offset', '$SG10071']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_13178']
jmp ['loc_1308F']
cmp ['[ebp+var_34],', '2']
jbe ['short', 'loc_131B4']
mov ['eax,', '[ebp+var_34]']
sub ['eax,', '2']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_131BB']
mov ['[ebp+var_34],', '0']
mov ['ecx,', '[ebp+var_20]']
sar ['ecx,', '8']
cmp ['ecx,', '[ebp+var_1C]']
jnz ['short', 'loc_131D4']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '[ebp+var_34]']
mov ['[ebp+var_24],', 'edx']
jmp ['loc_13325']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '3']
jl ['short', 'loc_131FE']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['offset', '$SG10080']
call ['_FT_Message']
add ['esp,', '10h']
xor ['edx,', 'edx']
jnz ['short', 'loc_131D4']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '3']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '2']
cmp ['eax,', 'ecx']
jbe ['short', 'loc_13217']
jmp ['$Exit2$89']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_30]']
mov ['al,', 'byte', 'ptr', '[ebp+var_24]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_24]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_30]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_30]']
mov ['[ecx+2],', 'al']
mov ['edx,', '[ebp+var_24]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_30]']
mov ['[eax+3],', 'dl']
mov ['ecx,', '[ebp+var_20]']
sar ['ecx,', '8']
cmp ['ecx,', '5']
jnz ['short', 'loc_1325F']
jmp ['loc_133A2']
mov ['edx,', '4']
imul ['eax,', 'edx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_13289']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
push ['offset', '$SG10091']
call ['_FT_Message']
add ['esp,', '10h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1325F']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '6']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '2']
cmp ['edx,', 'eax']
jbe ['short', 'loc_132A2']
jmp ['$Exit2$89']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[ecx],', '80h']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_20]']
sar ['eax,', '8']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_2C]']
mov ['al,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
cmp ['edx,', '[ebp+var_28]']
ja ['short', 'loc_13338']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_34]']
cmp ['eax,', '[ebp+var_28]']
jbe ['short', 'loc_1333D']
jmp ['$Exit2$89']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '3']
jl ['short', 'loc_1336B']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
push ['offset', '$SG10100']
call ['_FT_Message']
add ['esp,', '14h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_1333D']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_13394']
jmp ['$Exit2$89']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '[ebp+var_34]']
mov ['[ebp+var_2C],', 'edx']
jmp ['loc_1308F']
mov ['[ebp+var_8],', '0Ah']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '2']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '2']
cmp ['eax,', 'ecx']
jbe ['short', 'loc_133BE']
jmp ['$Exit2$89']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[edx],', '80h']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[ecx],', '3']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '3']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '2']
cmp ['eax,', 'ecx']
jbe ['short', 'loc_133F4']
jmp ['short', '$Exit2$89']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_30]']
mov ['al,', 'byte', 'ptr', '[ebp+var_24]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_24]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ebp+var_30]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', '10h']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_30]']
mov ['[ecx+2],', 'al']
mov ['edx,', '[ebp+var_24]']
shr ['edx,', '18h']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_30]']
mov ['[eax+3],', 'dl']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
push ['offset', '$SG10109']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_open_face_from_buffer']
add ['esp,', '18h']
jmp ['short', 'loc_134CC']
cmp ['[ebp+var_8],', '0Ah']
jnz ['short', 'loc_13479']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_13473']
push ['offset', '$SG10115']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_13455']
jmp ['short', 'loc_134A1']
cmp ['[ebp+var_8],', '9']
jnz ['short', 'loc_134A1']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '7']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '2']
jl ['short', 'loc_1349D']
push ['offset', '$SG10122']
call ['_FT_Message']
add ['esp,', '4']
xor ['edx,', 'edx']
jnz ['short', 'loc_1347F']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_134AE']
mov ['[ebp+var_8],', '1']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_14],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_134AE']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN87_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN86_0']
dd ['offset', '$LN85_0']
align ['4']
endp
_Mac_Read_sfnt_Resource	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_24],', '0']
cmp ['[ebp+arg_10],', '0FFFFFFFFh']
jnz ['short', 'loc_13541']
mov ['[ebp+arg_10],', '0']
mov ['edx,', '[ebp+arg_10]']
cmp ['edx,', '[ebp+arg_C]']
jl ['short', 'loc_13565']
push ['offset', '$SG10152']
push ['6E6h']
push ['1']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '1']
jmp ['loc_136C8']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1358F']
jmp ['$Exit$19_0']
lea ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_135AD']
jmp ['$Exit$19_0']
cmp ['[ebp+var_1C],', '0FFFFFFFFh']
jnz ['short', 'loc_135CF']
push ['offset', '$SG10158']
push ['6F0h']
push ['1']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '1']
jmp ['loc_136C8']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
push ['0']
push ['0']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_open_face_PS_from_sfnt_stream']
add ['esp,', '18h']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_135F9']
jmp ['$Exit$19_0']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '4']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
test ['eax,', 'eax']
jz ['short', 'loc_13615']
jmp ['$Exit$19_0']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1363A']
mov ['eax,', '[ebp+var_10]']
jmp ['loc_136C8']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_13659']
jmp ['short', '$Exit$19_0']
cmp ['[ebp+var_1C],', '4']
jle ['short', 'loc_1367F']
push ['4']
push ['offset', '$SG10167']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_1367F']
mov ['[ebp+var_28],', '1']
jmp ['short', 'loc_13686']
mov ['[ebp+var_28],', '0']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_1369B']
mov ['[ebp+var_2C],', 'offset', '$SG10168']
jmp ['short', 'loc_136A2']
mov ['[ebp+var_2C],', 'offset', '$SG10169']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_open_face_from_buffer']
add ['esp,', '18h']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN17_3']
dd ['offset', '$LN16_4']
align ['8']
endp
_IsMacResource	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Raccess_Get_HeaderInfo']
add ['esp,', '14h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_13753']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_13865']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
push ['1']
push ['504F5354h']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Raccess_Get_DataOffsets']
add ['esp,', '20h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_137DA']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Mac_Read_POST_Resource']
add ['esp,', '18h']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_28],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_137A6']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_137D2']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
mov ['dword', 'ptr', '[edx],', '1']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_13865']
lea ['eax,', '[ebp+var_34]']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
push ['0']
push ['73666E74h']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Raccess_Get_DataOffsets']
add ['esp,', '20h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_13862']
mov ['eax,', '[ebp+arg_C]']
cdq
idiv ['[ebp+var_34]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Mac_Read_sfnt_Resource']
add ['esp,', '18h']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_28],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_13837']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_13862']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_34]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN18_6']
dd ['offset', '$LN14_11']
dd ['0FFFFFFE4h,', '4']
dd ['offset', '$LN15_9']
dd ['0FFFFFFD8h,', '4']
dd ['offset', '$LN16_5']
db ['0CCh']
db ['3', 'dup(0FFh)']
dd ['4']
dd ['offset', '$LN17_4']
endp
_IsMacBinary	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '98h']
push ['edi']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '26h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_13930']
push ['offset', '$SG10228']
push ['75Eh']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
jmp ['loc_13AC7']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_90],', 'eax']
cmp ['[ebp+var_90],', '0']
jz ['short', 'loc_13952']
jmp ['$Exit$11']
push ['80h']
lea ['ecx,', '[ebp+var_88]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_90],', 'eax']
cmp ['[ebp+var_90],', '0']
jz ['short', 'loc_1397E']
jmp ['$Exit$11']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
movzx ['edx,', '[ebp+ecx+var_88]']
test ['edx,', 'edx']
jnz ['loc_13A17']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '4Ah']
movzx ['edx,', '[ebp+ecx+var_88]']
test ['edx,', 'edx']
jnz ['short', 'loc_13A17']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '52h']
movzx ['edx,', '[ebp+ecx+var_88]']
test ['edx,', 'edx']
jnz ['short', 'loc_13A17']
mov ['eax,', '1']
shl ['eax,', '0']
movzx ['ecx,', '[ebp+eax+var_88]']
test ['ecx,', 'ecx']
jz ['short', 'loc_13A17']
mov ['edx,', '1']
shl ['edx,', '0']
movzx ['eax,', '[ebp+edx+var_88]']
cmp ['eax,', '21h']
jg ['short', 'loc_13A17']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '3Fh']
movzx ['eax,', '[ebp+edx+var_88]']
test ['eax,', 'eax']
jnz ['short', 'loc_13A17']
mov ['ecx,', '1']
shl ['ecx,', '0']
movzx ['edx,', '[ebp+ecx+var_88]']
movzx ['eax,', '[ebp+edx+var_86]']
test ['eax,', 'eax']
jz ['short', 'loc_13A33']
push ['offset', '$SG10235']
push ['76Fh']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['loc_13AC7']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '53h']
movzx ['eax,', '[ebp+edx+var_88]']
shl ['eax,', '18h']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '54h']
movzx ['ecx,', '[ebp+edx+var_88]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '1']
imul ['ecx,', 'edx,', '55h']
movzx ['edx,', '[ebp+ecx+var_88]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '56h']
movzx ['ecx,', '[ebp+edx+var_88]']
or ['eax,', 'ecx']
mov ['[ebp+var_94],', 'eax']
mov ['edx,', '[ebp+var_94]']
add ['edx,', '7Fh']
and ['edx,', '0FFFFFF80h']
add ['edx,', '80h']
mov ['[ebp+var_98],', 'edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_98]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_IsMacResource']
add ['esp,', '14h']
jmp ['short', 'loc_13AC7']
mov ['eax,', '[ebp+var_90]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN9_5']
dd ['offset', '$LN8_6']
db ['9', 'dup(0CCh)']
endp
_load_face_in_embedded_rfork proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D4h']
push ['edi']
lea ['edi,', '[ebp+var_D4]']
mov ['ecx,', '35h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_C],', '2']
mov ['[ebp+var_96],', '0']
mov ['[ebp+var_C8],', '0']
lea ['edx,', '[ebp+var_90]']
push ['edx']
lea ['eax,', '[ebp+var_64]']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Raccess_Guess']
add ['esp,', '18h']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_13B96']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '9']
jge ['loc_13DAD']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_raccess_rule_by_darwin_vfs']
add ['esp,', '8']
mov ['[ebp+var_95],', 'al']
movzx ['eax,', '[ebp+var_95]']
test ['eax,', 'eax']
jz ['short', 'loc_13BF4']
movzx ['ecx,', '[ebp+var_96]']
test ['ecx,', 'ecx']
jz ['short', 'loc_13BF4']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_13BEE']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
push ['offset', '$SG10266']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_13BCC']
jmp ['short', 'loc_13B8D']
mov ['eax,', '[ebp+var_10]']
cmp ['[ebp+eax*4+var_90],', '0']
jz ['short', 'loc_13C37']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '3']
jl ['short', 'loc_13C2E']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+ecx*4+var_90]']
push ['edx']
push ['offset', '$SG10272']
call ['_FT_Message']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jnz ['short', 'loc_13C01']
jmp ['loc_13B8D']
mov ['[ebp+var_BC],', '4']
mov ['ecx,', '[ebp+var_10]']
cmp ['[ebp+ecx*4+var_38],', '0']
jz ['short', 'loc_13C5A']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+edx*4+var_38]']
mov ['[ebp+var_D0],', 'eax']
jmp ['short', 'loc_13C66']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_D0],', 'edx']
mov ['eax,', '[ebp+var_D0]']
mov ['[ebp+var_B0],', 'eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '3']
jl ['short', 'loc_13CA3']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+eax*4+var_64]']
push ['ecx']
mov ['edx,', '[ebp+var_B0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
push ['offset', '$SG10277']
call ['_FT_Message']
add ['esp,', '10h']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_13C72']
lea ['edx,', '[ebp+var_C8]']
push ['edx']
lea ['eax,', '[ebp+var_BC]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FT_Stream_New']
add ['esp,', '0Ch']
mov ['[ebp+var_C],', 'eax']
movzx ['edx,', '[ebp+var_95]']
test ['edx,', 'edx']
jz ['short', 'loc_13CE3']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '0FFh']
cmp ['eax,', '51h']
jnz ['short', 'loc_13CE3']
mov ['[ebp+var_96],', '1']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_13D10']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[edx],', '3']
jl ['short', 'loc_13D07']
push ['offset', '$SG10284']
call ['_FT_Message']
add ['esp,', '4']
xor ['eax,', 'eax']
jnz ['short', 'loc_13CE9']
jmp ['loc_13B8D']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+eax*4+var_64]']
push ['ecx']
mov ['edx,', '[ebp+var_C8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_IsMacResource']
add ['esp,', '14h']
mov ['[ebp+var_C],', 'eax']
push ['0']
mov ['ecx,', '[ebp+var_C8]']
push ['ecx']
call ['_FT_Stream_Free']
add ['esp,', '8']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[eax],', '3']
jl ['short', 'loc_13D88']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_13D6A']
mov ['[ebp+var_D4],', 'offset', '$SG10289']
jmp ['short', 'loc_13D74']
mov ['[ebp+var_D4],', 'offset', '$SG10290']
mov ['ecx,', '[ebp+var_D4]']
push ['ecx']
push ['offset', '$SG10291']
call ['_FT_Message']
add ['esp,', '8']
xor ['edx,', 'edx']
jnz ['short', 'loc_13D47']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_13D96']
jmp ['short', 'loc_13DAD']
jmp ['short', 'loc_13DA8']
movzx ['eax,', '[ebp+var_95]']
test ['eax,', 'eax']
jz ['short', 'loc_13DA8']
mov ['[ebp+var_96],', '1']
jmp ['loc_13B8D']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_13DBF']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '9']
jge ['short', 'loc_13DF4']
mov ['edx,', '[ebp+var_10]']
cmp ['[ebp+edx*4+var_38],', '0']
jz ['short', 'loc_13DF2']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+eax*4+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+eax*4+var_38],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_13DCF']
jmp ['short', 'loc_13DB6']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_13E01']
mov ['[ebp+var_C],', '2']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN51']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0D4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN50']
dd ['offset', '$LN45_0']
dd ['0FFFFFF9Ch,', '24h']
dd ['offset', '$LN46_0']
dd ['0FFFFFF70h,', '24h']
dd ['offset', '$LN47_0']
dd ['0FFFFFF44h,', '20h']
dd ['offset', '$LN48']
dd ['0FFFFFF38h,', '4']
dd ['offset', '$LN49']
db ['8', 'dup(0CCh)']
endp
_load_mac_face	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_IsMacBinary']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '0FFh']
cmp ['edx,', '2']
jnz ['loc_13F71']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '3']
jl ['short', 'loc_13F14']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
push ['offset', '$SG10322']
call ['_FT_Message']
add ['esp,', '8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_13EEF']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_IsMacResource']
add ['esp,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0Eh']
cmp ['dword', 'ptr', 'ds:_ft_trace_levels[ecx],', '3']
jl ['short', 'loc_13F6D']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_13F55']
mov ['[ebp+var_8],', 'offset', '$SG10327']
jmp ['short', 'loc_13F5C']
mov ['[ebp+var_8],', 'offset', '$SG10328']
mov ['edx,', '[ebp+var_8]']
push ['edx']
push ['offset', '$SG10329']
call ['_FT_Message']
add ['esp,', '8']
xor ['eax,', 'eax']
jnz ['short', 'loc_13F35']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '0FFh']
cmp ['ecx,', '2']
jz ['short', 'loc_13F8D']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '0FFh']
cmp ['edx,', '55h']
jnz ['short', 'loc_13FB6']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
and ['ecx,', '4']
jz ['short', 'loc_13FB6']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_load_face_in_embedded_rfork']
add ['esp,', '14h']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_ft_recompute_scaled_metrics proc near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movsx ['eax,', 'word', 'ptr', '[edx+46h]']
push ['eax']
call ['_FT_MulFix']
add ['esp,', '8']
add ['eax,', '3Fh']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+48h]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+4Ah]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+14h],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
movsx ['edx,', 'word', 'ptr', '[ecx+4Ch]']
push ['edx']
call ['_FT_MulFix']
add ['esp,', '8']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+18h],', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_ft_set_current_renderer proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['0']
push ['6F75746Ch']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Lookup_Renderer']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+9Ch],', 'edx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_add_renderer proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_18],', '0']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
push ['0Ch']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_14104']
jmp ['$Exit$13_0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax+24h]']
mov ['[edx+10h],', 'ecx']
mov ['edx,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[edx+24h],', '6F75746Ch']
jnz ['short', 'loc_14187']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax+38h]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_14187']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '34h']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+38h]']
mov ['eax,', '[edx+4]']
call ['eax']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1416C']
jmp ['short', '$Fail$14_0']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+38h]']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[edx+10h]']
mov ['[eax+38h],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[eax+28h]']
mov ['[edx+3Ch],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '94h']
push ['edx']
call ['_FT_List_Add']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_set_current_renderer']
add ['esp,', '4']
cmp ['[ebp+var_10],', '0']
jz ['short', '$Exit$13_0']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_18],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_141B8']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11_11']
dd ['offset', '$LN10_11']
align ['8']
endp
_ft_remove_renderer proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_14244']
jmp ['loc_142E7']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '94h']
push ['edx']
call ['_FT_List_Find']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_142E7']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0Ch]']
cmp ['dword', 'ptr', '[edx+24h],', '6F75746Ch']
jnz ['short', 'loc_142AA']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax+34h],', '0']
jz ['short', 'loc_142AA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+34h]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ecx+38h]']
mov ['eax,', '[edx+14h]']
call ['eax']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '94h']
push ['edx']
call ['_FT_List_Remove']
add ['esp,', '8']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_C],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_142C0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_set_current_renderer']
add ['esp,', '4']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_Destroy_Module	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_1434F']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+0A0h]']
cmp ['ecx,', '[ebp+arg_0]']
jnz ['short', 'loc_1434F']
mov ['edx,', '[ebp+var_C]']
mov ['dword', 'ptr', '[edx+0A0h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx]']
and ['edx,', '2']
jz ['short', 'loc_14367']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_remove_renderer']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
and ['eax,', '1']
jz ['short', 'loc_1437F']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Destroy_Driver']
add ['esp,', '4']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+1Ch],', '0']
jz ['short', 'loc_143A0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+1Ch]']
call ['edx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+arg_0],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_143A0']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_ft_property_do	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', 'offset', '$SG11866']
mov ['[ebp+var_18],', 'offset', '$SG11868']
movzx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jz ['short', 'loc_1440D']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_24],', 'ecx']
jmp ['short', 'loc_14413']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1443B']
push ['offset', '$SG11872']
push ['11B5h']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_1468A']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1444D']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_1444D']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_14469']
push ['offset', '$SG11875']
push ['11B8h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_1468A']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '14h']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_1448C']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_8]']
jnb ['short', 'loc_144BC']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_strcmp']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_144BA']
jmp ['short', 'loc_144BC']
jmp ['short', 'loc_14483']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jnz ['short', 'loc_144F5']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
push ['offset', '$SG11881']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG11882']
push ['11C6h']
push ['0Bh']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Bh']
jmp ['loc_1468A']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx]']
mov ['ecx,', '[eax]']
cmp ['dword', 'ptr', '[ecx+20h],', '0']
jnz ['short', 'loc_1453C']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
push ['offset', '$SG11884']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG11885']
push ['11CEh']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['loc_1468A']
mov ['esi,', 'esp']
push ['offset', '$SG11886']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '4']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+eax]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+20h]']
call ['ecx']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_145AB']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
push ['offset', '$SG11888']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG11889']
push ['11D8h']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['loc_1468A']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'ecx']
movzx ['edx,', '[ebp+arg_10]']
test ['edx,', 'edx']
jz ['short', 'loc_145D3']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_145C7']
mov ['[ebp+var_25],', '1']
jmp ['short', 'loc_145CB']
mov ['[ebp+var_25],', '0']
mov ['cl,', '[ebp+var_25]']
mov ['[ebp+var_1D],', 'cl']
jmp ['short', 'loc_145EC']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jnz ['short', 'loc_145E2']
mov ['[ebp+var_26],', '1']
jmp ['short', 'loc_145E6']
mov ['[ebp+var_26],', '0']
mov ['al,', '[ebp+var_26]']
mov ['[ebp+var_1D],', 'al']
movzx ['ecx,', '[ebp+var_1D]']
test ['ecx,', 'ecx']
jz ['short', 'loc_14622']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
push ['offset', '$SG11896']
call ['_FT_Message']
add ['esp,', '0Ch']
push ['offset', '$SG11897']
push ['11E6h']
push ['7']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '7']
jmp ['short', 'loc_1468A']
movzx ['ecx,', '[ebp+arg_10]']
test ['ecx,', 'ecx']
jz ['short', 'loc_14659']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '4']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+edx]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
call ['eax']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_14687']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '4']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
call ['edx']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_ft_raccess_sort_ref_by_id proc	near	
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jge ['short', 'loc_146C2']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_146DD']
jmp ['short', 'loc_146DD']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jle ['short', 'loc_146DB']
mov ['eax,', '1']
jmp ['short', 'loc_146DD']
jmp ['short', 'loc_146DD']
xor ['eax,', 'eax']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_raccess_guess_apple_double proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '51607h']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_14722']
push ['offset', '$SG12819']
push ['1C8h']
push ['51h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '51h']
jmp ['short', 'loc_1473E']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_raccess_guess_apple_generic']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_raccess_guess_apple_single proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '51600h']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_14792']
push ['offset', '$SG12835']
push ['1DEh']
push ['51h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '51h']
jmp ['short', 'loc_147AE']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_raccess_guess_apple_generic']
add ['esp,', '14h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_raccess_guess_darwin_ufs_export proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
push ['offset', '$SG12850']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_raccess_make_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_14828']
push ['offset', '$SG12852']
push ['1F6h']
push ['40h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '40h']
jmp ['short', 'loc_1486D']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_raccess_guess_linux_double_from_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1484F']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_1486A']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_1484F']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_raccess_guess_darwin_newvfs proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '12h']
cmp ['ecx,', '7FFFFFFFh']
jle ['short', 'loc_148F0']
push ['offset', '$SG12899']
push ['23Ch']
push ['0Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ah']
jmp ['short', 'loc_14952']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '12h']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_14915']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_14952']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['12h']
push ['offset', '$SG12902']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_18]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[edx],', '0']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6_12']
dd ['offset', '$LN5_12']
db ['0Ah', 'dup(0CCh)']
endp
_raccess_guess_darwin_hfsplus proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '6']
cmp ['ecx,', '7FFFFFFFh']
jle ['short', 'loc_14A00']
push ['offset', '$SG12877']
push ['218h']
push ['0Ah']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '0Ah']
jmp ['short', 'loc_14A62']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '6']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_14A25']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_14A62']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['6']
push ['offset', '$SG12880']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_18]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[edx],', '0']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6_13']
dd ['offset', '$LN5_13']
db ['0Ah', 'dup(0CCh)']
endp
_raccess_guess_vfat proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
push ['offset', '$SG12916']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_raccess_make_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_14B01']
push ['offset', '$SG12918']
push ['25Dh']
push ['40h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '40h']
jmp ['short', 'loc_14B14']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[ecx],', '0']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_raccess_guess_linux_cap proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
push ['offset', '$SG12932']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['_raccess_make_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_14B81']
push ['offset', '$SG12934']
push ['277h']
push ['40h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '40h']
jmp ['short', 'loc_14B94']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[ecx],', '0']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_raccess_guess_linux_double proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
push ['offset', '$SG12949']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_raccess_make_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_14C08']
push ['offset', '$SG12951']
push ['292h']
push ['40h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '40h']
jmp ['short', 'loc_14C4D']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_raccess_guess_linux_double_from_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14C2F']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_14C4A']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_14C2F']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_raccess_guess_linux_netatalk proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
push ['offset', '$SG12972']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_raccess_make_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_14CC8']
push ['offset', '$SG12974']
push ['2B2h']
push ['40h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '40h']
jmp ['short', 'loc_14D0D']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_raccess_guess_linux_double_from_file_name']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_14CEF']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_14D0A']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_14CEF']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_raccess_guess_apple_generic proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_2C],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+var_28],', 'eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14D8C']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_14EF8']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_14DB0']
push ['offset', '$SG13004']
push ['2D9h']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['loc_14EF8']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14DD1']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_14EF8']
push ['10h']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14DF0']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_14EF8']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_FT_Stream_ReadUShort']
add ['esp,', '8']
mov ['[ebp+var_18],', 'ax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14E12']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_14EF8']
movzx ['eax,', '[ebp+var_18]']
test ['eax,', 'eax']
jnz ['short', 'loc_14E36']
push ['offset', '$SG13011']
push ['2E6h']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
jmp ['loc_14EF8']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_14E48']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
movzx ['edx,', '[ebp+var_18]']
cmp ['[ebp+var_1C],', 'edx']
jge ['loc_14EE1']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14E76']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_14EF8']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ebp+var_2C]']
jnz ['short', 'loc_14EC0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_14EB0']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_ReadULong']
add ['esp,', '8']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14EB2']
jmp ['short', 'loc_14E3F']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+var_24]']
mov ['[ecx],', 'edx']
xor ['eax,', 'eax']
jmp ['short', 'loc_14EF8']
jmp ['short', 'loc_14EDC']
push ['8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_FT_Stream_Skip']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_14EDC']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_14EF8']
jmp ['loc_14E3F']
push ['offset', '$SG13024']
push ['2FDh']
push ['2']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '2']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN19_7']
dd ['offset', '$LN18_7']
align ['8']
endp
_raccess_guess_linux_double_from_file_name proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '44h']
push ['edi']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_3C],', '0']
mov ['[ebp+var_24],', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_New']
add ['esp,', '0Ch']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_14F84']
mov ['eax,', '[ebp+var_44]']
jmp ['short', 'loc_14FB4']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_raccess_guess_apple_double']
add ['esp,', '14h']
mov ['[ebp+var_44],', 'eax']
push ['0']
mov ['eax,', '[ebp+var_30]']
push ['eax']
call ['_FT_Stream_Free']
add ['esp,', '8']
mov ['eax,', '[ebp+var_44]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN7_6']
dd ['offset', '$LN4_11']
dd ['0FFFFFFD0h,', '4']
dd ['offset', '$LN5_14']
dd ['0FFFFFFC4h,', '4']
dd ['offset', '$LN6_14']
align ['8']
endp
_raccess_make_file_name	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_strlen']
add ['esp,', '4']
mov ['esi,', 'eax']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
add ['esi,', 'eax']
mov ['[ebp+var_10],', 'esi']
lea ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_15093']
xor ['eax,', 'eax']
jmp ['loc_15129']
mov ['esi,', 'esp']
push ['2Fh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strrchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_150F1']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strncpy']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+ecx+1],', '0']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_15106']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+eax],', '0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_strcat']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_strcat']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN7_7']
dd ['offset', '$LN6_15']
align ['4']
endp
_raccess_get_rule_type_from_rule_index proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_4],', '9']
jb ['short', 'loc_1517E']
mov ['eax,', '0FFFFFFFEh']
jmp ['short', 'loc_15188']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', 'ds:dword_3830[ecx*8]']
pop ['ebp']
retn
db ['0Eh', 'dup(0CCh)']
endp
_FT_Get_Sfnt_Name_Count	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_151C3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '8']
jz ['short', 'loc_151C3']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+154h]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_151CA']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Get_Sfnt_Name proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '6']
cmp ['[ebp+arg_8],', '0']
jz ['loc_15363']
cmp ['[ebp+arg_0],', '0']
jz ['loc_15363']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
and ['ecx,', '8']
jz ['loc_15363']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'word', 'ptr', '[eax+154h]']
cmp ['[ebp+arg_4],', 'ecx']
jnb ['loc_15363']
imul ['edx,', '[ebp+arg_4],', '14h']
mov ['eax,', '[ebp+var_10]']
add ['edx,', '[eax+164h]']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx+8]']
test ['edx,', 'edx']
jle ['loc_1530D']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jnz ['loc_1530D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+64h]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+68h]']
mov ['[ebp+var_1C],', 'ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
push ['ecx']
push ['0']
push ['1']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+10h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_152E3']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_152E3']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1530D']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_152E3']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+8],', 'ax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', '[eax]']
mov ['[edx],', 'cx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', '[eax+2]']
mov ['[edx+2],', 'cx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', '[eax+4]']
mov ['[edx+4],', 'cx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['cx,', '[eax+6]']
mov ['[edx+6],', 'cx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+10h]']
mov ['[edx+8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+0Ch],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13_14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN12_14']
dd ['offset', '$LN11_12']
align ['8']
endp
_ft_trig_downscale proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+arg_0],', '0']
jge ['short', 'loc_153DA']
mov ['eax,', '[ebp+arg_0]']
neg ['eax']
mov ['[ebp+arg_0],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
sar ['edx,', '10h']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_10],', '5B16h']
mov ['[ebp+var_14],', '0DBD9h']
mov ['eax,', '[ebp+var_8]']
imul ['eax,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_8]']
imul ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_10]']
imul ['edx,', '[ebp+var_C]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_C]']
imul ['eax,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ebp+var_24]']
jnb ['short', 'loc_1543F']
mov ['[ebp+var_28],', '1']
jmp ['short', 'loc_15446']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_28]']
shl ['eax,', '10h']
add ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_20]']
shr ['ecx,', '10h']
add ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_20]']
shl ['edx,', '10h']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
cmp ['ecx,', '[ebp+var_20]']
jnb ['short', 'loc_15481']
mov ['[ebp+var_2C],', '1']
jmp ['short', 'loc_15488']
mov ['[ebp+var_2C],', '0']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '40000000h']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '40000000h']
jnb ['short', 'loc_154AE']
mov ['[ebp+var_30],', '1']
jmp ['short', 'loc_154B5']
mov ['[ebp+var_30],', '0']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_154D4']
mov ['eax,', '[ebp+arg_0]']
neg ['eax']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_154DA']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_34],', 'ecx']
mov ['eax,', '[ebp+var_34]']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_trig_prenorm proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_15523']
mov ['ecx,', '[ebp+var_4]']
neg ['ecx']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_15529']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_8],', '0']
jge ['short', 'loc_15539']
mov ['eax,', '[ebp+var_8]']
neg ['eax']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_1553F']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
or ['edx,', '[ebp+var_14]']
push ['edx']
call ['_FT_MSB']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '1Dh']
jg ['short', 'loc_1557F']
mov ['eax,', '1Dh']
sub ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_C]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['edx,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_C]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_155AB']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1Dh']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_C]']
sar ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['edx,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_C]']
sar ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_C]']
neg ['ecx']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_ft_trig_pseudo_rotate proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+arg_4],', '0FFD30000h']
jge ['short', 'loc_15621']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
neg ['edx']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '5A0000h']
mov ['[ebp+arg_4],', 'ecx']
jmp ['short', 'loc_155F6']
cmp ['[ebp+arg_4],', '2D0000h']
jle ['short', 'loc_1564C']
mov ['edx,', '[ebp+var_C]']
neg ['edx']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '5A0000h']
mov ['[ebp+arg_4],', 'edx']
jmp ['short', 'loc_15621']
mov ['[ebp+var_18],', 'offset', '_ft_trig_arctan_table']
mov ['[ebp+var_4],', '1']
mov ['[ebp+var_14],', '1']
jmp ['short', 'loc_15674']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '17h']
jge ['loc_15707']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_156C4']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
sar ['edx,', 'cl']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
sar ['eax,', 'cl']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', 'eax']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '4']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_15702']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
sar ['eax,', 'cl']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
sar ['edx,', 'cl']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ecx]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['loc_15663']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_ft_trig_pseudo_polarize proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+var_C]']
jle ['short', 'loc_157B9']
mov ['edx,', '[ebp+var_C]']
neg ['edx']
cmp ['[ebp+var_10],', 'edx']
jle ['short', 'loc_1578B']
mov ['[ebp+var_4],', '5A0000h']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_C]']
neg ['ecx']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_157B7']
cmp ['[ebp+var_10],', '0']
jle ['short', 'loc_1579A']
mov ['[ebp+var_20],', '0B40000h']
jmp ['short', 'loc_157A1']
mov ['[ebp+var_20],', '0FF4C0000h']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
neg ['ecx']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
neg ['edx']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_157E7']
mov ['eax,', '[ebp+var_C]']
neg ['eax']
cmp ['[ebp+var_10],', 'eax']
jge ['short', 'loc_157E0']
mov ['[ebp+var_4],', '0FFA60000h']
mov ['ecx,', '[ebp+var_10]']
neg ['ecx']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_157E7']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_1C],', 'offset', '_ft_trig_arctan_table']
mov ['[ebp+var_8],', '1']
mov ['[ebp+var_18],', '1']
jmp ['short', 'loc_1580F']
mov ['ecx,', '[ebp+var_18]']
shl ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '17h']
jge ['loc_158A2']
cmp ['[ebp+var_10],', '0']
jle ['short', 'loc_1585F']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_8]']
sar ['eax,', 'cl']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_8]']
sar ['edx,', 'cl']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', 'edx']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[edx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '4']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_1589D']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_8]']
sar ['edx,', 'cl']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', 'edx']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_8]']
sar ['edx,', 'cl']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '4']
mov ['[ebp+var_1C],', 'eax']
jmp ['loc_157FE']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_158B6']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
and ['ecx,', '0FFFFFFF0h']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_158C6']
mov ['edx,', '[ebp+var_4]']
neg ['edx']
add ['edx,', '8']
and ['edx,', '0FFFFFFF0h']
neg ['edx']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
assume ['cs:_rdata']
public ['__real@4050000000000000']
assume ['cs:_rdata']
public ['__real@40f0000000000000']
extrn ['_memcmp:near']
extrn ['_memcpy:near']
extrn ['_memset:near']
extrn ['_strcat:near']
extrn ['_strcmp:near']
extrn ['_strlen:near']
extrn ['__imp__memmove:near']
extrn ['__imp__strncpy:near']
extrn ['__imp__strrchr:near']
extrn ['__imp__qsort:near']
extrn ['__imp__longjmp:near']
extrn ['_FT_Message:near']
extrn ['_FT_Panic:near']
extrn ['_FT_Throw:near']
extrn ['_ft_debug_init:near']
extrn ['_FT_Stream_Open:near']
extrn ['_FT_Bitmap_New:near']
extrn ['_FT_Bitmap_Convert:near']
extrn ['_FT_Bitmap_Done:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['_ft_trace_levels:near']
extrn ['___security_cookie:near']
extrn ['__fltused:near']
end
