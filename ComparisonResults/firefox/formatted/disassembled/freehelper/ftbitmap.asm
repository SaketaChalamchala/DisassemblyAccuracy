endp
_FT_Bitmap_New	proc near		
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_1F9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', 'ds:_null_bitmap']
mov ['[eax],', 'ecx']
mov ['edx,', 'ds:dword_1A4']
mov ['[eax+4],', 'edx']
mov ['ecx,', 'ds:dword_1A8']
mov ['[eax+8],', 'ecx']
mov ['edx,', 'ds:dword_1AC']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', 'ds:dword_1B0']
mov ['[eax+10h],', 'ecx']
mov ['edx,', 'ds:dword_1B4']
mov ['[eax+14h],', 'edx']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_FT_Bitmap_Copy	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '40h']
push ['edi']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_C],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_244']
push ['offset', '$SG7019']
push ['3Ah']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_476']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_250']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_269']
push ['offset', '$SG7022']
push ['3Dh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_476']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_278']
xor ['eax,', 'eax']
jmp ['loc_476']
mov ['ecx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jge ['short', 'loc_28A']
mov ['[ebp+var_3C],', '0FFFFFFFFh']
jmp ['short', 'loc_291']
mov ['[ebp+var_3C],', '1']
mov ['edx,', '[ebp+var_3C]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jge ['short', 'loc_2A9']
mov ['[ebp+var_40],', '0FFFFFFFFh']
jmp ['short', 'loc_2B0']
mov ['[ebp+var_40],', '1']
mov ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jnz ['short', 'loc_304']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['edx,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'edx']
mov ['edx,', '[eax+10h]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[eax+14h]']
mov ['[ecx+14h],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[ebp+var_20]']
jz ['short', 'loc_2FD']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+8]']
neg ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+8],', 'eax']
xor ['eax,', 'eax']
jmp ['loc_476']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jge ['short', 'loc_323']
mov ['eax,', '[ebp+var_14]']
neg ['eax']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_14]']
imul ['edx,', '[ecx]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_38C']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_24],', 'edx']
cmp ['[ebp+var_24],', '0']
jge ['short', 'loc_34F']
mov ['eax,', '[ebp+var_24]']
neg ['eax']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_24]']
imul ['edx,', '[ecx]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
cmp ['eax,', '[ebp+var_18]']
jz ['short', 'loc_38A']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_qrealloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+0Ch],', 'eax']
jmp ['short', 'loc_3A6']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_qalloc']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+0Ch],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['loc_473']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[edx]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[edx+4]']
mov ['[eax+4],', 'ecx']
mov ['ecx,', '[edx+8]']
mov ['[eax+8],', 'ecx']
mov ['ecx,', '[edx+0Ch]']
mov ['[eax+0Ch],', 'ecx']
mov ['ecx,', '[edx+10h]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[edx+14h]']
mov ['[eax+14h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ebp+var_20]']
jnz ['short', 'loc_40E']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_473']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
sub ['ecx,', '1']
imul ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['[ebp+var_30],', 'eax']
jmp ['short', 'loc_445']
mov ['ecx,', '[ebp+var_30]']
sub ['ecx,', '1']
mov ['[ebp+var_30],', 'ecx']
cmp ['[ebp+var_30],', '0']
jbe ['short', 'loc_473']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_38]']
sub ['eax,', '[ebp+var_14]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_43C']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN25']
dd ['offset', '$LN24']
align ['8']
endp
_FT_Bitmap_Embolden proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '4Ch']
push ['edi']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_4F0']
push ['offset', '$SG7134']
push ['110h']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_8BE']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_4FF']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jnz ['short', 'loc_51B']
push ['offset', '$SG7137']
push ['113h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_8BE']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
sar ['ecx,', '6']
cmp ['ecx,', '7FFFFFFFh']
jg ['short', 'loc_543']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '20h']
and ['edx,', '0FFFFFFC0h']
sar ['edx,', '6']
cmp ['edx,', '7FFFFFFFh']
jle ['short', 'loc_55F']
push ['offset', '$SG7140']
push ['117h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_8BE']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '20h']
and ['eax,', '0FFFFFFC0h']
sar ['eax,', '6']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '20h']
and ['ecx,', '0FFFFFFC0h']
sar ['ecx,', '6']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_1C],', '0']
jnz ['short', 'loc_592']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_592']
xor ['eax,', 'eax']
jmp ['loc_8BE']
jmp ['short', 'loc_5BA']
cmp ['[ebp+var_1C],', '0']
jl ['short', 'loc_59E']
cmp ['[ebp+var_20],', '0']
jge ['short', 'loc_5BA']
push ['offset', '$SG7147']
push ['11Fh']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_8BE']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+12h]']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
sub ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
cmp ['[ebp+var_4C],', '6']
ja ['$LN34']
mov ['edx,', '[ebp+var_4C]']
jmp ['ds:$LN50[edx*4]']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
call ['_FT_Bitmap_New']
add ['esp,', '4']
push ['1']
lea ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Bitmap_Convert']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_614']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_8BE']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Bitmap_Done']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_3C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_38]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_34]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_30]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['[eax+14h],', 'edx']
jmp ['short', '$LN34']
cmp ['[ebp+var_1C],', '8']
jle ['short', 'loc_659']
mov ['[ebp+var_1C],', '8']
jmp ['short', '$LN34']
imul ['eax,', '[ebp+var_1C],', '3']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', '$LN34']
imul ['ecx,', '[ebp+var_20],', '3']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', '$LN34']
xor ['eax,', 'eax']
jmp ['loc_8BE']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_ft_bitmap_assure_buffer']
add ['esp,', '10h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_69F']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_8BE']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jle ['short', 'loc_6C0']
mov ['eax,', '[ebp+var_14]']
imul ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_4]']
add ['eax,', '[ecx+0Ch]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_6DD']
mov ['edx,', '[ebp+var_14]']
neg ['edx']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
sub ['ecx,', '1']
imul ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
add ['ecx,', '[edx+0Ch]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_6EF']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ecx]']
jnb ['loc_8A0']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_711']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '0']
jl ['loc_829']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_10]']
mov ['al,', '[edx]']
mov ['[ebp+var_41],', 'al']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_738']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_1C]']
jg ['loc_824']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+12h]']
cmp ['ecx,', '1']
jnz ['short', 'loc_79E']
movzx ['edx,', '[ebp+var_41]']
mov ['ecx,', '[ebp+var_C]']
sar ['edx,', 'cl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
or ['ecx,', 'edx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_10]']
mov ['[edx],', 'cl']
cmp ['[ebp+var_10],', '0']
jle ['short', 'loc_799']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[eax-1]']
mov ['ecx,', '8']
sub ['ecx,', '[ebp+var_C]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
or ['ecx,', 'edx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_10]']
mov ['[edx],', 'cl']
jmp ['loc_81F']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_C]']
js ['short', 'loc_81D']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax]']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[ecx+10h]']
sub ['eax,', '1']
cmp ['edx,', 'eax']
jle ['short', 'loc_7E2']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+10h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_10]']
mov ['[eax],', 'dl']
jmp ['short', 'loc_824']
jmp ['short', 'loc_81B']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax]']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_10]']
mov ['[ecx],', 'dl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+10h]']
sub ['edx,', '1']
cmp ['eax,', 'edx']
jnz ['short', 'loc_81B']
jmp ['short', 'loc_824']
jmp ['short', 'loc_81F']
jmp ['short', 'loc_824']
jmp ['loc_72F']
jmp ['loc_708']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_83B']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+var_20]']
jg ['short', 'loc_88F']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+8]']
imul ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', 'eax']
mov ['[ebp+var_48],', 'ecx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_867']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_14]']
jge ['short', 'loc_88D']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_48]']
add ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
or ['ecx,', 'edx']
mov ['edx,', '[ebp+var_48]']
add ['edx,', '[ebp+var_C]']
mov ['[edx],', 'cl']
jmp ['short', 'loc_85E']
jmp ['short', 'loc_832']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_8],', 'ecx']
jmp ['loc_6E6']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
add ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN49']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN48']
dd ['offset', '$LN47']
dd ['offset', '$LN34']
dd ['offset', '$LN33']
dd ['offset', '$LN33']
dd ['offset', '$LN29']
dd ['offset', '$LN28']
dd ['offset', '$LN27']
align ['8']
endp
_FT_Bitmap_Convert proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '90h']
push ['edi']
lea ['edi,', '[ebp+var_90]']
mov ['ecx,', '24h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_95D']
push ['offset', '$SG7212']
push ['1DFh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['loc_1076']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_969']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_985']
push ['offset', '$SG7215']
push ['1E2h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_1076']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['al,', '[edx+12h]']
mov ['[ebp+var_88],', 'al']
cmp ['[ebp+var_88],', '0']
jbe ['loc_AD1']
cmp ['[ebp+var_88],', '7']
jbe ['short', 'loc_9B4']
jmp ['loc_AD1']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_20],', '0']
jge ['short', 'loc_9CB']
mov ['eax,', '[ebp+var_20]']
neg ['eax']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
imul ['edx,', '[ebp+var_20]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax+12h],', '2']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['[ebp+var_1C],', '0']
cmp ['[ebp+arg_C],', '0']
jle ['short', 'loc_A1E']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+4]']
xor ['edx,', 'edx']
div ['[ebp+arg_C]']
mov ['[ebp+var_1C],', 'edx']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_A1E']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_24],', 'ecx']
cmp ['[ebp+var_24],', '0']
jle ['short', 'loc_A5B']
or ['eax,', '0FFFFFFFFh']
xor ['edx,', 'edx']
div ['[ebp+var_24]']
mov ['edx,', '[ebp+arg_8]']
cmp ['[edx],', 'eax']
jbe ['short', 'loc_A5B']
push ['offset', '$SG7230']
push ['20Ah']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['loc_1076']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
imul ['ecx,', '[ebp+var_24]']
cmp ['ecx,', '[ebp+var_28]']
jbe ['short', 'loc_AA4']
lea ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
imul ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_ft_mem_qrealloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+0Ch],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_AA4']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_1076']
mov ['edx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jge ['short', 'loc_ABA']
mov ['eax,', '[ebp+var_24]']
neg ['eax']
mov ['[ebp+var_8C],', 'eax']
jmp ['short', 'loc_AC3']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_8C],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_8C]']
mov ['[edx+8],', 'eax']
jmp ['short', 'loc_AEB']
push ['offset', '$SG7235']
push ['216h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jge ['short', 'loc_B1D']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
imul ['ecx,', '[edx+8]']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', 'ecx']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jge ['short', 'loc_B3D']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_8]']
imul ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', 'eax']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+12h]']
mov ['[ebp+var_90],', 'ecx']
mov ['edx,', '[ebp+var_90]']
sub ['edx,', '1']
mov ['[ebp+var_90],', 'edx']
cmp ['[ebp+var_90],', '6']
ja ['loc_1073']
mov ['eax,', '[ebp+var_90]']
jmp ['ds:$LN66[eax*4]']
mov ['ecx,', '2']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+10h],', 'cx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
jmp ['short', 'loc_B92']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
cmp ['[ebp+var_2C],', '0']
jbe ['loc_D19']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
shr ['eax,', '3']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_BBF']
mov ['ecx,', '[ebp+var_38]']
sub ['ecx,', '1']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_38],', '0']
jbe ['loc_CA7']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+var_30]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_3C]']
and ['eax,', '80h']
sar ['eax,', '7']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_34]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+var_3C]']
and ['edx,', '40h']
sar ['edx,', '6']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+var_34]']
mov ['[ecx+eax],', 'dl']
mov ['edx,', '[ebp+var_3C]']
and ['edx,', '20h']
sar ['edx,', '5']
mov ['eax,', '1']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_34]']
mov ['[ecx+eax],', 'dl']
mov ['edx,', '[ebp+var_3C]']
and ['edx,', '10h']
sar ['edx,', '4']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['eax,', '[ebp+var_34]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+var_3C]']
and ['ecx,', '8']
sar ['ecx,', '3']
mov ['edx,', '1']
shl ['edx,', '2']
mov ['eax,', '[ebp+var_34]']
mov ['[eax+edx],', 'cl']
mov ['ecx,', '[ebp+var_3C]']
and ['ecx,', '4']
sar ['ecx,', '2']
mov ['edx,', '1']
imul ['eax,', 'edx,', '5']
mov ['edx,', '[ebp+var_34]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+var_3C]']
and ['eax,', '2']
sar ['eax,', '1']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '6']
mov ['ecx,', '[ebp+var_34]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+var_3C]']
and ['edx,', '1']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '7']
mov ['eax,', '[ebp+var_34]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '8']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
jmp ['loc_BB6']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
and ['ecx,', '7']
mov ['[ebp+var_38],', 'ecx']
jbe ['short', 'loc_CFC']
mov ['edx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_40],', 'eax']
jmp ['short', 'loc_CC9']
mov ['ecx,', '[ebp+var_38]']
sub ['ecx,', '1']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_38],', '0']
jbe ['short', 'loc_CFC']
mov ['edx,', '[ebp+var_40]']
and ['edx,', '80h']
sar ['edx,', '7']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_34]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+var_40]']
shl ['ecx,', '1']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
jmp ['short', 'loc_CC0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[edx+8]']
mov ['[ebp+var_18],', 'eax']
jmp ['loc_B89']
jmp ['loc_1073']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '100h']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+10h],', 'ax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_48],', 'eax']
jmp ['short', 'loc_D46']
mov ['ecx,', '[ebp+var_48]']
sub ['ecx,', '1']
mov ['[ebp+var_48],', 'ecx']
cmp ['[ebp+var_48],', '0']
jbe ['short', 'loc_D7A']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[edx+8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '[ecx+8]']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_D3D']
jmp ['loc_1073']
mov ['eax,', '4']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+10h],', 'ax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_4C],', 'eax']
jmp ['short', 'loc_D9E']
mov ['ecx,', '[ebp+var_4C]']
sub ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
cmp ['[ebp+var_4C],', '0']
jbe ['loc_ED4']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
shr ['edx,', '2']
mov ['[ebp+var_58],', 'edx']
jmp ['short', 'loc_DCB']
mov ['eax,', '[ebp+var_58]']
sub ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_58],', '0']
jbe ['loc_E59']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_50]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+var_5C]']
and ['edx,', '0C0h']
sar ['edx,', '6']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+var_54]']
mov ['[eax+ecx],', 'dl']
mov ['ecx,', '[ebp+var_5C]']
and ['ecx,', '30h']
sar ['ecx,', '4']
mov ['edx,', '1']
shl ['edx,', '0']
mov ['eax,', '[ebp+var_54]']
mov ['[eax+edx],', 'cl']
mov ['ecx,', '[ebp+var_5C]']
and ['ecx,', '0Ch']
sar ['ecx,', '2']
mov ['edx,', '1']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_54]']
mov ['[eax+edx],', 'cl']
mov ['ecx,', '[ebp+var_5C]']
and ['ecx,', '3']
mov ['edx,', '1']
imul ['eax,', 'edx,', '3']
mov ['edx,', '[ebp+var_54]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_54]']
add ['ecx,', '4']
mov ['[ebp+var_54],', 'ecx']
jmp ['loc_DC2']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
and ['eax,', '3']
mov ['[ebp+var_58],', 'eax']
jbe ['short', 'loc_EB7']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_50]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['[ebp+var_60],', 'ecx']
jmp ['short', 'loc_E84']
mov ['edx,', '[ebp+var_58]']
sub ['edx,', '1']
mov ['[ebp+var_58],', 'edx']
cmp ['[ebp+var_58],', '0']
jbe ['short', 'loc_EB7']
mov ['eax,', '[ebp+var_60]']
and ['eax,', '0C0h']
sar ['eax,', '6']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_54]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+var_60]']
shl ['edx,', '2']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['[ebp+var_54],', 'eax']
jmp ['short', 'loc_E7B']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
jmp ['loc_D95']
jmp ['loc_1073']
mov ['edx,', '10h']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax+10h],', 'dx']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_64],', 'edx']
jmp ['short', 'loc_EF8']
mov ['eax,', '[ebp+var_64]']
sub ['eax,', '1']
mov ['[ebp+var_64],', 'eax']
cmp ['[ebp+var_64],', '0']
jbe ['loc_FCC']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_68],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_6C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
shr ['ecx,', '1']
mov ['[ebp+var_70],', 'ecx']
jmp ['short', 'loc_F24']
mov ['edx,', '[ebp+var_70]']
sub ['edx,', '1']
mov ['[ebp+var_70],', 'edx']
cmp ['[ebp+var_70],', '0']
jbe ['short', 'loc_F7E']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_68]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['[ebp+var_74],', 'eax']
mov ['ecx,', '[ebp+var_74]']
and ['ecx,', '0F0h']
sar ['ecx,', '4']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_6C]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+var_74]']
and ['eax,', '0Fh']
mov ['ecx,', '1']
shl ['ecx,', '0']
mov ['edx,', '[ebp+var_6C]']
mov ['[edx+ecx],', 'al']
mov ['eax,', '[ebp+var_68]']
add ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
add ['ecx,', '2']
mov ['[ebp+var_6C],', 'ecx']
jmp ['short', 'loc_F1B']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
and ['eax,', '1']
jz ['short', 'loc_FAF']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_68]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
and ['ecx,', '0F0h']
sar ['ecx,', '4']
mov ['edx,', '1']
imul ['eax,', 'edx,', '0']
mov ['edx,', '[ebp+var_6C]']
mov ['[edx+eax],', 'cl']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[edx+8]']
mov ['[ebp+var_18],', 'eax']
jmp ['loc_EEF']
jmp ['loc_1073']
mov ['ecx,', '100h']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+10h],', 'cx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_78],', 'ecx']
jmp ['short', 'loc_FF0']
mov ['edx,', '[ebp+var_78]']
sub ['edx,', '1']
mov ['[ebp+var_78],', 'edx']
cmp ['[ebp+var_78],', '0']
jbe ['short', 'loc_1073']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_7C],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_80],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_84],', 'eax']
jmp ['short', 'loc_101F']
mov ['ecx,', '[ebp+var_84]']
sub ['ecx,', '1']
mov ['[ebp+var_84],', 'ecx']
cmp ['[ebp+var_84],', '0']
jbe ['short', 'loc_1056']
mov ['edx,', '[ebp+var_7C]']
push ['edx']
call ['_ft_gray_for_premultiplied_srgb_bgra']
add ['esp,', '4']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_80]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+var_7C]']
add ['edx,', '4']
mov ['[ebp+var_7C],', 'edx']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_1010']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
jmp ['loc_FE7']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN65']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '90h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN64']
dd ['offset', '$LN63']
align ['4']
dd ['offset', '$LN31_0']
dd ['offset', '$LN27_0']
dd ['offset', '$LN16']
dd ['offset', '$LN31_0']
dd ['offset', '$LN31_0']
dd ['offset', '$LN8']
align ['8']
endp
_FT_GlyphSlot_Own_Bitmap proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['loc_11A0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+48h],', '62697473h']
jnz ['loc_11A0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+9Ch]']
mov ['eax,', '[edx+4]']
and ['eax,', '1']
jnz ['short', 'loc_11A0']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_FT_Bitmap_New']
add ['esp,', '4']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_FT_Bitmap_Copy']
add ['esp,', '0Ch']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_115C']
mov ['eax,', '[ebp+var_24]']
jmp ['short', 'loc_11A2']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4Ch']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['[eax+14h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['edx,', '[ecx+4]']
or ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+9Ch]']
mov ['[ecx+4],', 'edx']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6']
dd ['offset', '$LN5']
db ['9', 'dup(0CCh)']
endp
_FT_Bitmap_Done	proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1212']
push ['offset', '$SG7338']
push ['30Eh']
push ['21h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '21h']
jmp ['short', 'loc_1291']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_1231']
push ['offset', '$SG7340']
push ['311h']
push ['6']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '6']
jmp ['short', 'loc_1291']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_1239']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', 'ds:_null_bitmap']
mov ['[ecx],', 'edx']
mov ['eax,', 'ds:dword_1A4']
mov ['[ecx+4],', 'eax']
mov ['edx,', 'ds:dword_1A8']
mov ['[ecx+8],', 'edx']
mov ['eax,', 'ds:dword_1AC']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', 'ds:dword_1B0']
mov ['[ecx+10h],', 'edx']
mov ['eax,', 'ds:dword_1B4']
mov ['[ecx+14h],', 'eax']
xor ['eax,', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['9', 'dup(0CCh)']
endp
_ft_bitmap_assure_buffer proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '54h']
push ['edi']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '15h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jge ['short', 'loc_12ED']
mov ['eax,', '[ebp+var_10]']
neg ['eax']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+12h]']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_54]']
sub ['eax,', '1']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_54],', '5']
ja ['short', 'loc_136C']
mov ['ecx,', '[ebp+var_54]']
jmp ['ds:$LN34_0[ecx*4]']
mov ['[ebp+var_18],', '1']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx+7]']
shr ['ecx,', '3']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_1388']
mov ['[ebp+var_18],', '2']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx+3]']
shr ['ecx,', '2']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_1388']
mov ['[ebp+var_18],', '4']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_20]']
lea ['ecx,', '[eax+edx+1]']
shr ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_1388']
mov ['[ebp+var_18],', '8']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_1388']
push ['offset', '$SG7080']
push ['0B4h']
push ['12h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '12h']
jmp ['loc_15A1']
cmp ['[ebp+arg_C],', '0']
jnz ['loc_1475']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_10]']
jg ['loc_1475']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '3']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '[ebp+arg_8]']
imul ['edx,', '[ebp+var_18]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_2C]']
jnb ['loc_146E']
mov ['ecx,', '[ebp+var_30]']
shr ['ecx,', '3']
mov ['edx,', '[ebp+arg_4]']
add ['ecx,', '[edx+0Ch]']
mov ['[ebp+var_34],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_30]']
and ['edx,', '7']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '0FF00h']
mov ['ecx,', '[ebp+var_3C]']
shr ['eax,', 'cl']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_44],', 'ecx']
jmp ['short', 'loc_1414']
mov ['edx,', '[ebp+var_44]']
sub ['edx,', '1']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_38],', 'ecx']
cmp ['[ebp+var_44],', '0']
jbe ['short', 'loc_146E']
mov ['edx,', '[ebp+var_34]']
mov ['[ebp+var_48],', 'edx']
cmp ['[ebp+var_3C],', '0']
jbe ['short', 'loc_144F']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_48]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
and ['eax,', '[ebp+var_40]']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['ecx,', '[ebp+var_48]']
mov ['[ecx+edx],', 'al']
mov ['edx,', '[ebp+var_48]']
add ['edx,', '1']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[ebp+var_38]']
jnb ['short', 'loc_146C']
mov ['ecx,', '[ebp+var_38]']
sub ['ecx,', '[ebp+var_48]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_48]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
jmp ['short', 'loc_13F9']
xor ['eax,', 'eax']
jmp ['loc_15A1']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_mem_qrealloc']
add ['esp,', '18h']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_14A7']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_15A1']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jle ['short', 'loc_1508']
mov ['eax,', '[ebp+var_20]']
imul ['eax,', '[ebp+var_18]']
add ['eax,', '7']
shr ['eax,', '3']
mov ['[ebp+var_4C],', 'eax']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_14D2']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '1']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_1506']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
imul ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+arg_4]']
add ['edx,', '[eax+0Ch]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+var_1C]']
imul ['ecx,', '[ebp+var_14]']
add ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_14C9']
jmp ['short', 'loc_155B']
mov ['edx,', '[ebp+var_20]']
imul ['edx,', '[ebp+var_18]']
add ['edx,', '7']
shr ['edx,', '3']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_152A']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ecx]']
jnb ['short', 'loc_155B']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
imul ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+arg_4]']
add ['ecx,', '[edx+0Ch]']
push ['ecx']
mov ['eax,', '[ebp+var_14]']
imul ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+var_28]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_1521']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_155B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_28]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jge ['short', 'loc_1596']
mov ['eax,', '[ebp+var_14]']
neg ['eax']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+8],', 'edx']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN33_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN32']
dd ['offset', '$LN31_1']
align ['10h']
dd ['offset', '$LN22']
dd ['offset', '$LN24_0']
dd ['offset', '$LN23']
dd ['offset', '$LN22']
dd ['offset', '$LN22']
endp
_ft_gray_for_premultiplied_srgb_bgra proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '3']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_162C']
xor ['al,', 'al']
jmp ['loc_16B8']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
imul ['edx,', 'ecx,', '127Ch']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
imul ['edx,', 'ecx']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[ecx+eax]']
imul ['ecx,', 'eax,', '0B717h']
mov ['eax,', '1']
shl ['eax,', '0']
mov ['esi,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[esi+eax]']
imul ['ecx,', 'eax']
add ['edx,', 'ecx']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+ecx]']
imul ['eax,', 'ecx,', '366Dh']
mov ['ecx,', '1']
shl ['ecx,', '1']
mov ['esi,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[esi+ecx]']
imul ['eax,', 'ecx']
add ['edx,', 'eax']
shr ['edx,', '10h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
xor ['edx,', 'edx']
div ['[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', 'eax']
mov ['al,', 'dl']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_memcpy:near']
extrn ['_memset:near']
extrn ['_FT_Throw:near']
extrn ['_ft_mem_qalloc:near']
extrn ['_ft_mem_qrealloc:near']
extrn ['_ft_mem_free:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
end
