endp
_FT_Stream_OpenLZW proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_F5']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_114']
push ['offset', '$SG7426']
push ['166h']
push ['28h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '28h']
mov ['[ebp+var_8],', 'eax']
jmp ['$Exit$14']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_ft_lzw_check_header']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_137']
jmp ['$Exit$14']
push ['28h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+1Ch],', 'edx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['10C4h']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_ft_mem_alloc']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1B1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_ft_lzw_file_init']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1A8']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_14],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_18B']
jmp ['short', '$Exit$14']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '7FFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', 'offset', '_ft_lzw_stream_io']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', 'offset', '_ft_lzw_stream_close']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN12']
dd ['offset', '$LN11']
db ['0Ah', 'dup(0CCh)']
endp
_ft_lzwstate_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['0ACh']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+0A4h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+1Ch]']
mov ['[eax+0A8h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+50h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+54h],', '0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '64h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+58h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+60h],', '40h']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_lzwstate_reset']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['8']
endp
_ft_lzwstate_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A8h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_lzwstate_reset']
add ['esp,', '4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '64h']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+58h],', 'eax']
jz ['short', 'loc_2FA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+58h],', '0']
xor ['eax,', 'eax']
jnz ['short', 'loc_2D9']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4Ch]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4Ch],', '0']
xor ['edx,', 'edx']
jnz ['short', 'loc_2FA']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+50h],', '0']
push ['0ACh']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_ft_lzwstate_reset proc	near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+20h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+24h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+5Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '9']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
pop ['ebp']
retn
db ['0Fh', 'dup(0CCh)']
endp
_ft_lzwstate_io	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+40h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+48h]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_3EC']
jmp ['$Exit$54']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_413']
cmp ['[ebp+var_2C],', '1']
jz ['$NextCode$55']
cmp ['[ebp+var_2C],', '2']
jz ['loc_718']
jmp ['$Exit$54']
push ['2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A4h]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
test ['eax,', 'eax']
jnz ['short', 'loc_448']
push ['1']
lea ['ecx,', '[ebp+var_15]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0A4h]']
push ['eax']
call ['_FT_Stream_TryRead']
add ['esp,', '0Ch']
cmp ['eax,', '1']
jz ['short', 'loc_44D']
jmp ['$Eof$56']
movzx ['ecx,', '[ebp+var_15]']
and ['ecx,', '1Fh']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+28h],', 'ecx']
movzx ['eax,', '[ebp+var_15]']
and ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '1']
mov ['ecx,', '[edx+28h]']
shl ['eax,', 'cl']
sub ['eax,', '100h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+30h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+28h],', '10h']
jbe ['short', 'loc_48F']
jmp ['$Eof$56']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '9']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jz ['short', 'loc_4AB']
mov ['[ebp+var_30],', '101h']
jmp ['short', 'loc_4B2']
mov ['[ebp+var_30],', '100h']
mov ['edx,', '[ebp+var_30]']
sub ['edx,', '100h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+38h],', 'edx']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+34h]']
cmp ['eax,', '[edx+28h]']
jnb ['short', 'loc_4EE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '1']
mov ['ecx,', '[ecx+34h]']
shl ['edx,', 'cl']
sub ['edx,', '100h']
mov ['[ebp+var_34],', 'edx']
jmp ['short', 'loc_4FA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_34]']
mov ['[edx+3Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_lzwstate_get_code']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jl ['short', 'loc_521']
cmp ['[ebp+var_20],', '0FFh']
jle ['short', 'loc_526']
jmp ['$Eof$56']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_543']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_8]']
jb ['short', 'loc_559']
jmp ['$Exit$54']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_lzwstate_get_code']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jge ['short', 'loc_57C']
jmp ['$Eof$56']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'ecx']
cmp ['[ebp+var_28],', '100h']
jnz ['short', 'loc_5B5']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+2Ch],', '0']
jz ['short', 'loc_5B5']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+20h],', '1']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', '$NextCode$55']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_28],', '100h']
jb ['loc_6C1']
mov ['eax,', '[ebp+var_28]']
sub ['eax,', '100h']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+38h]']
jb ['short', 'loc_63C']
mov ['edx,', '[ebp+var_28]']
sub ['edx,', '100h']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+38h]']
jbe ['short', 'loc_5EE']
jmp ['$Eof$56']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+5Ch]']
cmp ['eax,', '[edx+60h]']
jb ['short', 'loc_611']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_lzwstate_stack_grow']
add ['esp,', '4']
test ['eax,', 'eax']
jge ['short', 'loc_611']
jmp ['$Eof$56']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[edx+eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5Ch]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+5Ch],', 'eax']
xor ['edx,', 'edx']
jnz ['short', 'loc_5EE']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_28],', '100h']
jb ['short', 'loc_6C1']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4Ch],', '0']
jnz ['short', 'loc_653']
jmp ['$Eof$56']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+5Ch]']
cmp ['ecx,', '[eax+60h]']
jb ['short', 'loc_676']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_lzwstate_stack_grow']
add ['esp,', '4']
test ['eax,', 'eax']
jge ['short', 'loc_676']
jmp ['$Eof$56']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+58h]']
mov ['esi,', '[ebp+var_28]']
mov ['cl,', '[ecx+esi-100h]']
mov ['[edx+eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+5Ch]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+5Ch],', 'eax']
xor ['edx,', 'edx']
jnz ['short', 'loc_653']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['edx,', '[ebp+var_28]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2-200h]']
mov ['[ebp+var_28],', 'eax']
jmp ['loc_63C']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+5Ch]']
cmp ['ecx,', '[eax+60h]']
jb ['short', 'loc_6EA']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_lzwstate_stack_grow']
add ['esp,', '4']
test ['eax,', 'eax']
jge ['short', 'loc_6EA']
jmp ['$Eof$56']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[eax+ecx],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+5Ch],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_6C7']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '2']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+5Ch],', '0']
jbe ['short', 'loc_765']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+5Ch],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_74D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+5Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_4]']
mov ['al,', '[eax+ecx]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_8]']
jnz ['short', 'loc_763']
jmp ['$Exit$54']
jmp ['short', 'loc_718']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+38h]']
cmp ['edx,', '[ecx+30h]']
jnb ['loc_7F8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+38h]']
cmp ['edx,', '[ecx+54h]']
jb ['short', 'loc_79A']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_lzwstate_prefix_grow']
add ['esp,', '4']
test ['eax,', 'eax']
jge ['short', 'loc_79A']
jmp ['$Eof$56']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+38h]']
cmp ['eax,', '[edx+54h]']
jb ['short', 'loc_7BF']
push ['offset', '$SG7594']
push ['180h']
push ['offset', '$SG7595']
call ['_FT_Panic']
add ['esp,', '0Ch']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_79A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4Ch]']
mov ['cx,', 'word', 'ptr', '[ebp+var_C]']
mov ['[edx+eax*2],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+50h]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[edx+eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['$NextCode$55']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+40h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+44h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+48h],', 'eax']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_837']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '3']
jmp ['short', '$Exit$54']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN53']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN52']
dd ['offset', '$LN51']
align ['4']
endp
_ft_lzw_check_header proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_8C1']
push ['2']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FT_Stream_Read']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8C3']
jmp ['short', '$Exit$10']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
movzx ['edx,', 'byte', 'ptr', '[ebp+ecx+var_C]']
cmp ['edx,', '1Fh']
jnz ['short', 'loc_8EA']
mov ['eax,', '1']
shl ['eax,', '0']
movzx ['ecx,', 'byte', 'ptr', '[ebp+eax+var_C]']
cmp ['ecx,', '9Dh']
jz ['short', '$Exit$10']
push ['offset', '$SG7304']
push ['65h']
push ['3']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '3']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN8']
dd ['offset', '$LN7']
db ['0Bh', 'dup(0CCh)']
endp
_ft_lzw_file_init proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+1Ch]']
mov ['[edx+8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '10B8h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10C0h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10C0h]']
mov ['[ecx+10BCh],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10B8h],', '0']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['_ft_lzw_check_header']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_9CA']
jmp ['short', '$Exit$4']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_lzwstate_init']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Dh', 'dup(0CCh)']
endp
_ft_lzw_file_done proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0Ch']
push ['eax']
call ['_ft_lzwstate_done']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
db ['8', 'dup(0CCh)']
endp
_ft_lzw_file_reset proc	near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_FT_Stream_Seek']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_AAB']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0Ch']
push ['eax']
call ['_ft_lzwstate_reset']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10B8h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10C0h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10C0h]']
mov ['[eax+10BCh],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10B8h],', '0']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Ch', 'dup(0CCh)']
endp
_ft_lzw_file_fill_output proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '0B8h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10BCh],', 'ecx']
push ['1000h']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0B8h']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_lzwstate_io']
add ['esp,', '0Ch']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10BCh]']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10C0h],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_B57']
push ['offset', '$SG7340']
push ['0B9h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_ft_lzw_file_skip_output proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10C0h]']
sub ['edx,', '[ecx+10BCh]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_BA9']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10BCh]']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10BCh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10B8h]']
add ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10B8h],', 'eax']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+var_8]']
mov ['[ebp+arg_4],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_C53']
mov ['[ebp+var_C],', '1000h']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_BF7']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0Ch']
push ['eax']
call ['_ft_lzwstate_io']
add ['esp,', '0Ch']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+var_C]']
jnb ['short', 'loc_C33']
push ['offset', '$SG7359']
push ['0E3h']
push ['55h']
call ['_FT_Throw']
add ['esp,', '0Ch']
or ['eax,', '55h']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_C53']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10B8h]']
add ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10B8h],', 'eax']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ebp+var_C]']
mov ['[ebp+arg_4],', 'edx']
jmp ['short', 'loc_BDC']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_lzw_file_io	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+10B8h]']
jnb ['short', 'loc_D04']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10B8h]']
sub ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '0B8h']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+10BCh]']
sub ['edx,', 'ecx']
cmp ['eax,', 'edx']
ja ['short', 'loc_CEA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10B8h]']
sub ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10BCh]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10BCh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+10B8h],', 'eax']
jmp ['short', 'loc_D04']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ft_lzw_file_reset']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_D04']
jmp ['$Exit$15']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+10B8h]']
jbe ['short', 'loc_D39']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ecx+10B8h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_lzw_file_skip_output']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_D39']
jmp ['$Exit$15']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_D44']
jmp ['$Exit$15']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+10C0h]']
sub ['eax,', '[edx+10BCh]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+arg_C]']
jb ['short', 'loc_D67']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10BCh]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_4]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10BCh]']
add ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10BCh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10B8h]']
add ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10B8h],', 'eax']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ebp+var_C]']
mov ['[ebp+arg_C],', 'edx']
jnz ['short', 'loc_DC4']
jmp ['short', '$Exit$15']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ft_lzw_file_fill_output']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_DDB']
jmp ['short', '$Exit$15']
jmp ['loc_D44']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_lzw_stream_close proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_E55']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_ft_lzw_file_done']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_ft_mem_free']
add ['esp,', '8']
mov ['[ebp+var_4],', '0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_E30']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_lzw_stream_io proc near		
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_lzw_file_io']
add ['esp,', '10h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_lzwstate_refill proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_ECD']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_F58']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0A4h]']
push ['edx']
call ['_FT_Stream_TryRead']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
add ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+34h]']
jnb ['short', 'loc_F19']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
jmp ['short', 'loc_F1D']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
shl ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
sub ['ecx,', '1']
sub ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1Ch],', 'edx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_F56']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_F58']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
endp
_ft_lzwstate_get_code proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+20h]']
test ['edx,', 'edx']
jnz ['short', 'loc_FBC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+1Ch]']
jge ['short', 'loc_FBC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+38h]']
cmp ['ecx,', '[eax+3Ch]']
jb ['loc_106B']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+38h]']
cmp ['ecx,', '[eax+3Ch]']
jb ['short', 'loc_1014']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+34h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+34h]']
cmp ['ecx,', '[eax+28h]']
jnb ['short', 'loc_FFF']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_4]']
shl ['edx,', 'cl']
sub ['edx,', '100h']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_100B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+3Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+20h]']
test ['edx,', 'edx']
jz ['short', 'loc_104C']
mov ['[ebp+var_4],', '9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+34h],', 'ecx']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_4]']
shl ['edx,', 'cl']
sub ['edx,', '100h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+3Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+20h],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ft_lzwstate_refill']
add ['esp,', '4']
test ['eax,', 'eax']
jge ['short', 'loc_1064']
or ['eax,', '0FFFFFFFFh']
jmp ['loc_1116']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'eax']
mov ['edx,', '[ebp+var_8]']
sar ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '7']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax]']
mov ['ecx,', '[ebp+var_8]']
sar ['edx,', 'cl']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '8']
sub ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '8']
jb ['short', 'loc_10ED']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax]']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
or ['edx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '8']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jbe ['short', 'loc_1113']
mov ['eax,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[eax]']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
shl ['eax,', 'cl']
sub ['eax,', '1']
and ['edx,', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
or ['edx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_ft_lzwstate_stack_grow	proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+5Ch]']
cmp ['edx,', '[ecx+60h]']
jb ['loc_11F8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A8h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+60h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '1']
mov ['eax,', '[ebp+var_18]']
lea ['ecx,', '[eax+edx+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '64h']
mov ['eax,', '[ebp+arg_0]']
cmp ['[eax+58h],', 'edx']
jnz ['short', 'loc_11A0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+58h],', '0']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+var_18],', '10000h']
jbe ['short', 'loc_11BD']
mov ['[ebp+var_18],', '10000h']
mov ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ebp+var_14]']
jnz ['short', 'loc_11BD']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_11FA']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+58h],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_11EF']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_11FA']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+60h],', 'eax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_0']
dd ['offset', '$LN8_0']
align ['4']
endp
_ft_lzwstate_prefix_grow proc near	
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0A8h]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1280']
mov ['[ebp+var_8],', '200h']
jmp ['short', 'loc_128C']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '2']
add ['edx,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4Ch]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
push ['3']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_ft_mem_realloc']
add ['esp,', '18h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4Ch],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_12BE']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_1305']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4Ch]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[eax+ecx*2]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+50h],', 'edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4Ch]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+50h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+54h],', 'eax']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN7_0']
dd ['offset', '$LN6']
align ['4']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_memcpy:near']
extrn ['_memset:near']
extrn ['__imp__memmove:near']
extrn ['_ft_mem_alloc:near']
extrn ['_ft_mem_realloc:near']
extrn ['_ft_mem_free:near']
extrn ['_FT_Stream_Seek:near']
extrn ['_FT_Stream_Read:near']
extrn ['_FT_Stream_TryRead:near']
extrn ['_FT_Panic:near']
extrn ['_FT_Throw:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
end
