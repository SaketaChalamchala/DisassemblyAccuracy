endp
_FT_Message	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+ArgList],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_4]']
mov ['[ebp+ArgList],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+ArgList]']
push ['ecx']
mov ['edx,', '[ebp+Format]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__vprintf']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+ArgList]']
push ['eax']
mov ['ecx,', '[ebp+Format]']
push ['ecx']
push ['offset', '?buf@?1??FT_Message@@9@9']
call ['dword', 'ptr', 'ds:__imp__vsprintf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['offset', '?buf@?1??FT_Message@@9@9']
call ['dword', 'ptr', 'ds:__imp__OutputDebugStringA@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+ArgList],', '0']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
db ['0Bh', 'dup(0CCh)']
endp
_FT_Panic	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+Args],', '0CCCCCCCCh']
lea ['eax,', '[ebp+arg_4]']
mov ['[ebp+Args],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Args]']
push ['ecx']
mov ['edx,', '[ebp+Format]']
push ['edx']
push ['offset', '?buf@?1??FT_Panic@@9@9']
call ['dword', 'ptr', 'ds:__imp__vsprintf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['offset', '?buf@?1??FT_Panic@@9@9']
call ['dword', 'ptr', 'ds:__imp__OutputDebugStringA@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+Args],', '0']
mov ['esi,', 'esp']
push ['1']
call ['dword', 'ptr', 'ds:__imp__exit']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['8']
endp
_FT_Throw	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'edx']
xor ['eax,', 'eax']
pop ['ebp']
retn
align ['8']
endp
_ft_debug_init	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
push ['offset', '$SG87739']
call ['dword', 'ptr', 'ds:__imp__getenv']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['loc_7E5']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_644']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
test ['eax,', 'eax']
jz ['loc_7E5']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '20h']
jz ['short', 'loc_689']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '9']
jz ['short', 'loc_689']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '2Ch']
jz ['short', 'loc_689']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '3Bh']
jz ['short', 'loc_689']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Dh']
jnz ['short', 'loc_68B']
jmp ['short', 'loc_63B']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6B1']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['eax,', '3Ah']
jz ['short', 'loc_6B1']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_691']
mov ['edx,', '[ebp+var_8]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
test ['eax,', 'eax']
jnz ['short', 'loc_6C0']
jmp ['loc_7E5']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '3Ah']
jnz ['loc_7E0']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_C]']
jbe ['loc_7E0']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_1C],', '0FFFFFFFFh']
mov ['[ebp+var_20],', '0FFFFFFFFh']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_704']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '5Fh']
jge ['short', 'loc_76A']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '_ft_trace_toggles[eax*4]']
mov ['[ebp+var_24],', 'ecx']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_729']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_18]']
jge ['short', 'loc_74B']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '[ebp+var_14]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jz ['short', 'loc_749']
jmp ['short', 'loc_74B']
jmp ['short', 'loc_720']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+var_18]']
jnz ['short', 'loc_768']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+var_14]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_768']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_76A']
jmp ['short', 'loc_6FB']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_798']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
sub ['ecx,', '30h']
mov ['[ebp+var_1C],', 'ecx']
js ['short', 'loc_791']
cmp ['[ebp+var_1C],', '7']
jle ['short', 'loc_798']
mov ['[ebp+var_1C],', '0FFFFFFFFh']
cmp ['[ebp+var_20],', '0']
jl ['short', 'loc_7E0']
cmp ['[ebp+var_1C],', '0']
jl ['short', 'loc_7E0']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_7D3']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_7BC']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '5Fh']
jge ['short', 'loc_7D1']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_1C]']
mov ['dword', 'ptr', 'ds:_ft_trace_levels[eax*4],', 'ecx']
jmp ['short', 'loc_7B3']
jmp ['short', 'loc_7E0']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[ebp+var_1C]']
mov ['dword', 'ptr', 'ds:_ft_trace_levels[edx*4],', 'eax']
jmp ['loc_63B']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
extrn ['_ft_trace_levels:near']
extrn ['__imp__vprintf:near']
extrn ['__imp__vsprintf:near']
extrn ['__imp__exit:near']
extrn ['__imp__getenv:near']
extrn ['__imp__OutputDebugStringA@4:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
end
