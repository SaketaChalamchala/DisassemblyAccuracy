endp
_uprv_isInvariantUnicodeString proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?length@UnicodeString@icu_56@@QBEHXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['dword', 'ptr', 'ds:__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['_uprv_isInvariantUString_56']
add ['esp,', '8']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?upname_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '114h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_swapDataHeader_56']
add ['esp,', '14h']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_240']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_247']
xor ['eax,', 'eax']
jmp ['loc_3EF']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '70h']
jnz ['short', 'loc_28C']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '6Eh']
jnz ['short', 'loc_28C']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '61h']
jnz ['short', 'loc_28C']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
cmp ['ecx,', '6Dh']
jnz ['short', 'loc_28C']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '2']
jz ['short', 'loc_2D5']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
push ['eax']
push ['offset', '??_C@_0GG@OMBLPIJI@upname_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '1Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '10h']
xor ['eax,', 'eax']
jmp ['loc_3EF']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_8]']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_321']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_8]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '20h']
jge ['short', 'loc_321']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_0DP@MDBJMEFK@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_3EF']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_readInt32_56']
add ['esp,', '8']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['loc_3E9']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_44]']
jge ['short', 'loc_375']
mov ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['offset', '??_C@_0EN@CLKDOLBP@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_printError_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['short', 'loc_3EF']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_readInt32_56']
add ['esp,', '8']
mov ['[ebp+var_50],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_2C]']
jz ['short', 'loc_3E9']
push ['1']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_50]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_44]']
sub ['ecx,', '[ebp+var_50]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_50]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_44]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0EN@CLKDOLBP@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@']
db ["'pnames.icu',0Ah,0"]
align ['4']
assume ['cs:_rdata']
public ['??_C@_0DP@MDBJMEFK@upname_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0GG@OMBLPIJI@upname_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@']
db ["'2x)", 'is', 'not', 'recognized', 'as', "pnames.icu',0Ah,0"]
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?U_FAILURE@@YACW4UErrorCode@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
cmp ['[ebp+arg_0],', '0']
setnle ['al']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?uprops_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '154h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_154]']
mov ['ecx,', '55h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_swapDataHeader_56']
add ['esp,', '14h']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_58A']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_591']
xor ['eax,', 'eax']
jmp ['loc_902']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '55h']
jnz ['short', 'loc_606']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '50h']
jnz ['short', 'loc_606']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '72h']
jnz ['short', 'loc_606']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
cmp ['ecx,', '6Fh']
jnz ['short', 'loc_606']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '3']
jl ['short', 'loc_606']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '7']
jg ['short', 'loc_606']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '7']
jge ['short', 'loc_64F']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
cmp ['ecx,', '5']
jnz ['short', 'loc_606']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
cmp ['ecx,', '2']
jz ['short', 'loc_64F']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
push ['eax']
push ['offset', '??_C@_0GH@CMFJJHCK@uprops_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '1Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '10h']
xor ['eax,', 'eax']
jmp ['loc_902']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_688']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_18]']
cmp ['eax,', '40h']
jge ['short', 'loc_688']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_18]']
push ['eax']
push ['offset', '??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_902']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Src],', 'eax']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_6A3']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '10h']
jge ['short', 'loc_6C8']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_udata_readInt32_56']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+ecx*4+var_6C],', 'eax']
jmp ['short', 'loc_69A']
cmp ['[ebp+arg_8],', '0']
jl ['loc_8F9']
mov ['[ebp+var_24],', '9']
jmp ['short', 'loc_6E4']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jle ['short', 'loc_702']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+eax*4+var_6C]']
mov ['[ebp+var_84],', 'ecx']
cmp ['[ebp+var_84],', '0']
jnz ['short', 'loc_702']
jmp ['short', 'loc_6DB']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_84]']
shl ['ecx,', '2']
cmp ['eax,', 'ecx']
jge ['short', 'loc_73D']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_18]']
push ['eax']
push ['offset', '??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_902']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+Dst]']
jz ['short', 'loc_77F']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_84]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
push ['40h']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
call ['edx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '40h']
push ['ecx']
mov ['edx,', '[ebp+var_6C]']
lea ['eax,', 'ds:0FFFFFFC0h[edx*4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '40h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_utrie2_swapAnyVersion_56']
add ['esp,', '14h']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_6C]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_64]']
sub ['ecx,', '[ebp+var_6C]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_6C]']
mov ['eax,', '[ebp+Src]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
call ['ecx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_64]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_60]']
sub ['ecx,', '[ebp+var_64]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_64]']
mov ['eax,', '[ebp+Src]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_60]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
sub ['ecx,', '[ebp+var_60]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+Src]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_utrie2_swapAnyVersion_56']
add ['esp,', '14h']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
sub ['ecx,', '[ebp+var_5C]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_5C]']
mov ['eax,', '[ebp+Src]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
call ['ecx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_50]']
sub ['ecx,', '[ebp+var_54]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_54]']
mov ['eax,', '[ebp+Src]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+var_18]']
lea ['eax,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '154h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN19']
dd ['offset', '$LN18']
assume ['cs:_rdata']
public ['??_C@_0EO@NONMGKAC@uprops_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd@']
db ["'erties", "file',0Ah,0"]
align ['4']
assume ['cs:_rdata']
public ['??_C@_0GH@CMFJJHCK@uprops_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4@']
db ["'2x)", 'is', 'not', 'a', 'Unicode', 'properties', "file',0Ah,0"]
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '178h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_178]']
mov ['ecx,', '5Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_swapDataHeader_56']
add ['esp,', '14h']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_A6E']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A75']
xor ['eax,', 'eax']
jmp ['loc_D71']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '63h']
jnz ['short', 'loc_AEA']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '41h']
jnz ['short', 'loc_AEA']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '53h']
jnz ['short', 'loc_AEA']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
cmp ['ecx,', '45h']
jnz ['short', 'loc_AEA']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '1']
jnz ['short', 'loc_AD2']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
cmp ['ecx,', '5']
jnz ['short', 'loc_AD2']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
cmp ['ecx,', '2']
jz ['short', 'loc_B33']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '2']
jz ['short', 'loc_B33']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '3']
jz ['short', 'loc_B33']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
push ['eax']
push ['offset', '??_C@_0GM@PALFENDF@ucase_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '1Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '10h']
xor ['eax,', 'eax']
jmp ['loc_D71']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Src],', 'eax']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_B85']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '40h']
jge ['short', 'loc_B85']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_0EF@GABPKOFH@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_D71']
mov ['[ebp+var_90],', '0']
jmp ['short', 'loc_BA0']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
cmp ['[ebp+var_90],', '10h']
jge ['short', 'loc_BD1']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_udata_readInt32_56']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_90]']
mov ['[ebp+ecx*4+var_84],', 'eax']
jmp ['short', 'loc_B91']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+Size],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['loc_D68']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jge ['short', 'loc_C14']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_0EM@JFFDJKJC@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_D71']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+Dst]']
jz ['short', 'loc_C41']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_9C],', '0']
mov ['eax,', '[ebp+var_84]']
shl ['eax,', '2']
mov ['[ebp+var_A8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+var_A8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_7C]']
mov ['[ebp+var_A8],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_9C]']
push ['ecx']
mov ['edx,', '[ebp+var_A8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_9C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie2_swapAnyVersion_56']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_78]']
add ['eax,', '[ebp+var_74]']
shl ['eax,', '1']
mov ['[ebp+var_A8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_9C]']
push ['ecx']
mov ['edx,', '[ebp+var_A8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_9C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_9C]']
cmp ['eax,', '[ebp+Size]']
jz ['short', 'loc_D68']
mov ['ecx,', 'ds:?__LINE__Var@?1??ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0']
add ['ecx,', '5Bh']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@']
push ['offset', '??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+Size]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '178h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN18_0']
dd ['offset', '$LN17']
assume ['cs:_rdata']
public ['??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@']
unicode ['0,', '<offset==size>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@']
unicode ['0,', '<d:\\mozilla\\intl\\icu\\source\\tools\\toolutil\\swapimpl.cpp>,0']
align ['4']
assume ['cs:_data']
public ['?__LINE__Var@?1??ucase_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0']
assume ['cs:_rdata']
public ['??_C@_0EM@JFFDJKJC@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
db ["'ping", "data',0Ah,0"]
assume ['cs:_rdata']
public ['??_C@_0EF@GABPKOFH@ucase_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
db ["'ta',0Ah,0"]
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0GM@PALFENDF@ucase_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@']
db ["'x)", 'is', 'not', 'recognized', 'as', 'case', 'mapping', "data',0Ah,0"]
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '178h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_178]']
mov ['ecx,', '5Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_swapDataHeader_56']
add ['esp,', '14h']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_FAE']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_FB5']
xor ['eax,', 'eax']
jmp ['loc_12DF']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '42h']
jnz ['short', 'loc_101E']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '69h']
jnz ['short', 'loc_101E']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '44h']
jnz ['short', 'loc_101E']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
cmp ['ecx,', '69h']
jnz ['short', 'loc_101E']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '1']
jnz ['short', 'loc_1012']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Eh]']
cmp ['ecx,', '5']
jnz ['short', 'loc_1012']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Fh]']
cmp ['ecx,', '2']
jz ['short', 'loc_1067']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '2']
jz ['short', 'loc_1067']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
push ['eax']
push ['offset', '??_C@_0GM@JJLEJPIL@ubidi_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '1Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '10h']
xor ['eax,', 'eax']
jmp ['loc_12DF']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Src],', 'eax']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_10B9']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '40h']
jge ['short', 'loc_10B9']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_0EF@NMMPFKBE@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_12DF']
mov ['[ebp+var_90],', '0']
jmp ['short', 'loc_10D4']
mov ['eax,', '[ebp+var_90]']
add ['eax,', '1']
mov ['[ebp+var_90],', 'eax']
cmp ['[ebp+var_90],', '10h']
jge ['short', 'loc_1105']
mov ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_udata_readInt32_56']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_90]']
mov ['[ebp+ecx*4+var_84],', 'eax']
jmp ['short', 'loc_10C5']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+Size],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['loc_12D6']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jge ['short', 'loc_1148']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_0EM@PEBEPGMH@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_12DF']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+Dst]']
jz ['short', 'loc_1175']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_9C],', '0']
mov ['eax,', '[ebp+var_84]']
shl ['eax,', '2']
mov ['[ebp+var_A8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+var_A8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_7C]']
mov ['[ebp+var_A8],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_9C]']
push ['ecx']
mov ['edx,', '[ebp+var_A8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_9C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie2_swapAnyVersion_56']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_78]']
shl ['eax,', '2']
mov ['[ebp+var_A8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_9C]']
push ['ecx']
mov ['edx,', '[ebp+var_A8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_9C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_70]']
sub ['eax,', '[ebp+var_74]']
mov ['[ebp+var_A8],', 'eax']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_68]']
sub ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_A8],', 'eax']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ebp+var_A8]']
mov ['[ebp+var_9C],', 'eax']
mov ['eax,', '[ebp+var_9C]']
cmp ['eax,', '[ebp+Size]']
jz ['short', 'loc_12D6']
mov ['ecx,', 'ds:?__LINE__Var@?1??ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0']
add ['ecx,', '61h']
mov ['esi,', 'esp']
push ['ecx']
push ['offset', '??_C@_1GO@JNANCNBN@?$AAd?$AA?3?$AA?2?$AAm?$AAo?$AAz?$AAi?$AAl?$AAl?$AAa?$AA?2?$AAi?$AAn?$AAt?$AAl?$AA?2?$AAi?$AAc?$AAu?$AA?2?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?2?$AAt?$AAo?$AAo?$AAl?$AAs@']
push ['offset', '??_C@_1BK@EENNJCJN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?$DN?$AA?$DN?$AAs?$AAi?$AAz?$AAe?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___wassert']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+Size]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '178h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN18_1']
dd ['offset', '$LN17_0']
assume ['cs:_data']
public ['?__LINE__Var@?1??ubidi_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z@4JA@449b26d0']
assume ['cs:_rdata']
public ['??_C@_0EM@PEBEPGMH@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
db ["'ping", "data',0Ah,0"]
assume ['cs:_rdata']
public ['??_C@_0EF@NMMPFKBE@ubidi_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
db ["'ta',0Ah,0"]
align ['4']
assume ['cs:_rdata']
public ['??_C@_0GM@JJLEJPIL@ubidi_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@']
db ["'x)", 'is', 'not', 'recognized', 'as', 'bidi/shaping', "data',0Ah,0"]
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?unorm_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1B8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1B8]']
mov ['ecx,', '6Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_swapDataHeader_56']
add ['esp,', '14h']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_1492']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1499']
xor ['eax,', 'eax']
jmp ['loc_1864']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '4Eh']
jnz ['short', 'loc_14DE']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '6Fh']
jnz ['short', 'loc_14DE']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '72h']
jnz ['short', 'loc_14DE']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
cmp ['ecx,', '6Dh']
jnz ['short', 'loc_14DE']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '2']
jz ['short', 'loc_1527']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
push ['eax']
push ['offset', '??_C@_0GE@CFFFBIMC@unorm_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '1Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '10h']
xor ['eax,', 'eax']
jmp ['loc_1864']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Src],', 'eax']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_157C']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_18]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '80h']
jge ['short', 'loc_157C']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_0DN@KLMKOPGN@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_1864']
mov ['[ebp+var_D0],', '0']
jmp ['short', 'loc_1597']
mov ['eax,', '[ebp+var_D0]']
add ['eax,', '1']
mov ['[ebp+var_D0],', 'eax']
cmp ['[ebp+var_D0],', '20h']
jge ['short', 'loc_15C8']
mov ['eax,', '[ebp+var_D0]']
mov ['ecx,', '[ebp+var_3C]']
mov ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_udata_readInt32_56']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_D0]']
mov ['[ebp+ecx*4+var_C4],', 'eax']
jmp ['short', 'loc_1588']
mov ['eax,', '[ebp+var_9C]']
mov ['ecx,', '[ebp+var_C4]']
lea ['edx,', '[ecx+eax+80h]']
mov ['eax,', '[ebp+var_C0]']
lea ['ecx,', '[edx+eax*2]']
mov ['edx,', '[ebp+var_BC]']
lea ['eax,', '[ecx+edx*2]']
add ['eax,', '[ebp+var_98]']
mov ['ecx,', '[ebp+var_94]']
lea ['edx,', '[eax+ecx*2]']
mov ['[ebp+Size],', 'edx']
cmp ['[ebp+arg_8],', '0']
jl ['loc_185B']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jge ['short', 'loc_163C']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_0EE@MCFJHLJM@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['loc_1864']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+Dst]']
jz ['short', 'loc_1669']
push ['1']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['_uprv_checkValidMemory']
add ['esp,', '8']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_DC],', '0']
mov ['[ebp+var_E8],', '80h']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_DC]']
add ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_C4]']
mov ['[ebp+var_E8],', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_DC]']
push ['ecx']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_DC]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie_swap_56']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_DC]']
add ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_C0]']
add ['eax,', '[ebp+var_BC]']
shl ['eax,', '1']
mov ['[ebp+var_E8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_DC]']
push ['ecx']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_DC]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_DC]']
add ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_9C]']
mov ['[ebp+var_E8],', 'eax']
cmp ['[ebp+var_E8],', '0']
jz ['short', 'loc_17B2']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_DC]']
push ['ecx']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_DC]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie_swap_56']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_DC]']
add ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_98]']
mov ['[ebp+var_E8],', 'eax']
cmp ['[ebp+var_E8],', '0']
jz ['short', 'loc_1804']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_DC]']
push ['ecx']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_DC]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_utrie_swap_56']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_DC]']
add ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_94]']
shl ['eax,', '1']
mov ['[ebp+var_E8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+var_DC]']
push ['ecx']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_DC]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_DC]']
add ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_DC],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+Size]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1B8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN18_2']
dd ['offset', '$LN17_1']
assume ['cs:_rdata']
public ['??_C@_0EE@MCFJHLJM@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
db ["'u',0Ah,0"]
assume ['cs:_rdata']
public ['??_C@_0DN@KLMKOPGN@unorm_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0GE@CFFFBIMC@unorm_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF@']
db ["'x)", 'is', 'not', 'recognized', 'as', "unorm.icu',0Ah,0"]
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?test_swap@@YAHPBUUDataSwapper@@PBXHPAXPAW4UErrorCode@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '124h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_124]']
mov ['ecx,', '49h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_swapDataHeader_56']
add ['esp,', '14h']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_19F0']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1A35']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_1A0C']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_u_errorName_56']
add ['esp,', '4']
mov ['[ebp+var_124],', 'eax']
jmp ['short', 'loc_1A16']
mov ['[ebp+var_124],', 'offset', '??_C@_0BD@NCNAAAEN@pErrorCode?5is?5NULL?$AA@']
mov ['edx,', '[ebp+var_124]']
push ['edx']
push ['offset', '??_C@_0CJ@CPIOEIFK@test_swap?$CI?$CJ?3?5data?5header?5swap?5fa@']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_udata_printError_56']
add ['esp,', '0Ch']
xor ['eax,', 'eax']
jmp ['loc_1B96']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
cmp ['ecx,', '54h']
jnz ['short', 'loc_1A7A']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
cmp ['ecx,', '65h']
jnz ['short', 'loc_1A7A']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
cmp ['ecx,', '73h']
jnz ['short', 'loc_1A7A']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
cmp ['ecx,', '74h']
jnz ['short', 'loc_1A7A']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
cmp ['ecx,', '1']
jz ['short', 'loc_1AC3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Bh]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ah]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+8]']
push ['eax']
push ['offset', '??_C@_0GC@BGHLJGFM@test_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '1Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '10h']
xor ['eax,', 'eax']
jmp ['loc_1B96']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_44],', '2']
mov ['[ebp+var_50],', '5']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_50]']
mov ['[ebp+var_5C],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['loc_1B90']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_5C]']
jge ['short', 'loc_1B24']
mov ['eax,', '[ebp+var_5C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['offset', '??_C@_0EN@DKADDPLF@test_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_printError_56']
add ['esp,', '10h']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '8']
xor ['eax,', 'eax']
jmp ['short', 'loc_1B96']
mov ['[ebp+var_38],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '[ebp+var_44]']
mov ['[ebp+var_38],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_50]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '[ebp+var_38]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_5C]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '124h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_0EN@DKADDPLF@test_swap?$CI?$CJ?3?5too?5few?5bytes?5?$CI?$CFd?5a@']
db ["'f", "testdata',0Ah,0"]
align ['4']
assume ['cs:_rdata']
public ['??_C@_0GC@BGHLJGFM@test_swap?$CI?$CJ?3?5data?5format?5?$CF02x?4?$CF0@']
db ["')", 'is', 'not', 'recognized', 'as', "testdata',0Ah,0"]
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0CJ@CPIOEIFK@test_swap?$CI?$CJ?3?5data?5header?5swap?5fa@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BD@NCNAAAEN@pErrorCode?5is?5NULL?$AA@']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_udata_swap	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '104h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_104]']
mov ['ecx,', '41h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_1CE3']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1CEA']
xor ['eax,', 'eax']
jmp ['loc_1F31']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
push ['0']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_swapDataHeader_56']
add ['esp,', '14h']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1D1E']
xor ['eax,', 'eax']
jmp ['loc_1F31']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
movzx ['cx,', 'byte', 'ptr', '[eax+8]']
mov ['[ebp+var_40],', 'cx']
mov ['eax,', '[ebp+var_18]']
movzx ['cx,', 'byte', 'ptr', '[eax+9]']
mov ['[ebp+var_3E],', 'cx']
mov ['eax,', '[ebp+var_18]']
movzx ['cx,', 'byte', 'ptr', '[eax+0Ah]']
mov ['[ebp+var_3C],', 'cx']
mov ['eax,', '[ebp+var_18]']
movzx ['cx,', 'byte', 'ptr', '[eax+0Bh]']
mov ['[ebp+var_3A],', 'cx']
push ['4']
lea ['eax,', '[ebp+var_40]']
push ['eax']
call ['_uprv_isInvariantUString_56']
add ['esp,', '8']
movsx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_1D80']
push ['4']
lea ['eax,', '[ebp+var_C]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
push ['ecx']
call ['_u_UCharsToChars_56']
add ['esp,', '0Ch']
jmp ['short', 'loc_1D96']
mov ['[ebp+var_9],', '3Fh']
mov ['al,', '[ebp+var_9]']
mov ['[ebp+var_A],', 'al']
mov ['cl,', '[ebp+var_A]']
mov ['[ebp+var_B],', 'cl']
mov ['dl,', '[ebp+var_B]']
mov ['[ebp+var_C],', 'dl']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_1DA8']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '11h']
jge ['loc_1EE1']
push ['4']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '8']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
lea ['edx,', '_swapFns[ecx*8]']
push ['edx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['loc_1EDC']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', 'ds:off_FC[edx*8]']
call ['eax']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?U_FAILURE@@YACW4UErrorCode@@@Z']
add ['esp,', '4']
movsx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_1E70']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_u_errorName_56']
add ['esp,', '4']
push ['eax']
movsx ['edx,', '[ebp+var_9]']
push ['edx']
movsx ['eax,', '[ebp+var_A]']
push ['eax']
movsx ['ecx,', '[ebp+var_B]']
push ['ecx']
movsx ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Ah]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+9]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
push ['ecx']
push ['offset', '??_C@_0FC@KIDMIIEG@udata_swap?$CI?$CJ?3?5failure?5swapping?5d@']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_udata_printError_56']
add ['esp,', '2Ch']
jmp ['short', 'loc_1ED7']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '0Fh']
cmp ['[ebp+var_30],', 'eax']
jge ['short', 'loc_1ED7']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_u_errorName_56']
add ['esp,', '4']
push ['eax']
movsx ['edx,', '[ebp+var_9]']
push ['edx']
movsx ['eax,', '[ebp+var_A]']
push ['eax']
movsx ['ecx,', '[ebp+var_B]']
push ['ecx']
movsx ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Bh]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+0Ah]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+9]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
push ['offset', '??_C@_0GG@GJJLELKE@udata_swap?$CI?$CJ?5warning?3?5swapped?5on@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_udata_printError_56']
add ['esp,', '34h']
mov ['eax,', '[ebp+var_30]']
jmp ['short', 'loc_1F31']
jmp ['loc_1D9F']
movsx ['eax,', '[ebp+var_9]']
push ['eax']
movsx ['ecx,', '[ebp+var_A]']
push ['ecx']
movsx ['edx,', '[ebp+var_B]']
push ['edx']
movsx ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Bh]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0Ah]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+9]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+8]']
push ['edx']
push ['offset', '??_C@_0EE@EFIIIKLK@udata_swap?$CI?$CJ?3?5unknown?5data?5forma@']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_udata_printError_56']
add ['esp,', '28h']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '10h']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '104h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN17_2']
dd ['offset', '$LN15']
dd ['0FFFFFFC0h,', '8']
dd ['offset', '$LN16']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0EE@EFIIIKLK@udata_swap?$CI?$CJ?3?5unknown?5data?5forma@']
db ["')',0Ah,0"]
assume ['cs:_rdata']
public ['??_C@_0GG@GJJLELKE@udata_swap?$CI?$CJ?5warning?3?5swapped?5on@']
db ["'at", '%02x.%02x.%02x.%02x', '("%c%c%c%c")\',0Ah,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_0FC@KIDMIIEG@udata_swap?$CI?$CJ?3?5failure?5swapping?5d@']
db ['\'%c%c%c%c")', '-', "%s',0Ah,0"]
extrn ['_uspoof_swap_56:near']
extrn ['_uchar_swapNames_56:near']
extrn ['_udict_swap_56:near']
extrn ['_ubrk_swap_56:near']
extrn ['_ucol_swapInverseUCA_56:near']
extrn ['_ucol_swap_56:near']
extrn ['_unorm2_swap_56:near']
extrn ['_usprep_swap_56:near']
extrn ['_ucnv_swapAliases_56:near']
extrn ['_ucnv_swap_56:near']
extrn ['_ures_swap_56:near']
extrn ['_uprv_isInvariantUString_56:near']
extrn ['__imp_?getBuffer@UnicodeString@icu_56@@QBEPB_WXZ:near']
extrn ['__imp_?length@UnicodeString@icu_56@@QBEHXZ:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['_memcpy:near']
extrn ['_uprv_checkValidMemory:near']
extrn ['_udata_readInt32_56:near']
extrn ['_udata_printError_56:near']
extrn ['_udata_swapDataHeader_56:near']
extrn ['_utrie2_swapAnyVersion_56:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__imp___wassert:near']
extrn ['_utrie_swap_56:near']
extrn ['_u_errorName_56:near']
extrn ['_memcmp:near']
extrn ['_u_UCharsToChars_56:near']
end
