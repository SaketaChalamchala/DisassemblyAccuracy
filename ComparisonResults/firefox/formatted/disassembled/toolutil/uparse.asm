endp
_u_skipWhitespace proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0C0h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_C0]']
mov ['ecx,', '30h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '20h']
jz ['short', 'loc_4A']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '9']
jz ['short', 'loc_4A']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Dh']
jz ['short', 'loc_4A']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Ah']
jnz ['short', 'loc_55']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_1E']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_rtc$TMZ']
assume ['cs:_rtc$IMZ']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_u_rtrim	proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+Str]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_EA']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '20h']
jz ['short', 'loc_D9']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '9']
jz ['short', 'loc_D9']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '0Dh']
jz ['short', 'loc_D9']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '0Ah']
jnz ['short', 'loc_EA']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['byte', 'ptr', '[ecx],', '0']
jmp ['short', 'loc_A1']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_u_parseDelimitedFile proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '234h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_234]']
mov ['ecx,', '8Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_139']
jmp ['loc_42F']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_14B']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_14B']
cmp ['[ebp+arg_C],', '0']
jg ['short', 'loc_159']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '1']
jmp ['loc_42F']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_17F']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_17F']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '2Dh']
jnz ['short', 'loc_190']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax+1]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_190']
mov ['[ebp+arg_0],', '0']
call ['_T_FileStream_stdin']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1A4']
push ['offset', '??_C@_01KDCPPGHE@r?$AA@']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_T_FileStream_open']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_1B8']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '4']
jmp ['loc_42F']
push ['12Ch']
lea ['eax,', '[ebp+Str1]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_T_FileStream_readLine']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jz ['loc_41D']
lea ['eax,', '[ebp+Str1]']
push ['eax']
call ['_u_rtrim']
add ['esp,', '4']
lea ['ecx,', '[ebp+Str1]']
sub ['eax,', 'ecx']
mov ['[ebp+var_170],', 'eax']
lea ['eax,', '[ebp+Str1]']
push ['eax']
call ['_getMissingLimit']
add ['esp,', '4']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
lea ['ecx,', '[ebp+Str1]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_225']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_22E']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF81h']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_249']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '23h']
jnz ['short', 'loc_24E']
jmp ['loc_1B8']
mov ['esi,', 'esp']
push ['23h']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__strchr']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_158],', 'eax']
cmp ['[ebp+var_158],', '0']
jz ['short', 'loc_2DC']
mov ['eax,', '[ebp+var_158]']
cmp ['eax,', '[ebp+Str]']
jbe ['short', 'loc_2D3']
mov ['eax,', '[ebp+var_158]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '20h']
jz ['short', 'loc_2C2']
mov ['eax,', '[ebp+var_158]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '9']
jz ['short', 'loc_2C2']
mov ['eax,', '[ebp+var_158]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '0Dh']
jz ['short', 'loc_2C2']
mov ['eax,', '[ebp+var_158]']
movsx ['ecx,', 'byte', 'ptr', '[eax-1]']
cmp ['ecx,', '0Ah']
jnz ['short', 'loc_2D3']
mov ['eax,', '[ebp+var_158]']
sub ['eax,', '1']
mov ['[ebp+var_158],', 'eax']
jmp ['short', 'loc_278']
mov ['eax,', '[ebp+var_158]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_2F7']
jmp ['loc_1B8']
mov ['[ebp+var_164],', '0']
jmp ['short', 'loc_312']
mov ['eax,', '[ebp+var_164]']
add ['eax,', '1']
mov ['[ebp+var_164],', 'eax']
mov ['eax,', '[ebp+var_164]']
cmp ['eax,', '[ebp+arg_C]']
jge ['loc_3E5']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+var_158],', 'eax']
mov ['eax,', '[ebp+var_158]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
movsx ['edx,', '[ebp+arg_4]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_35C']
mov ['eax,', '[ebp+var_158]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_35C']
mov ['eax,', '[ebp+var_158]']
add ['eax,', '1']
mov ['[ebp+var_158],', 'eax']
jmp ['short', 'loc_32D']
mov ['eax,', '[ebp+var_164]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+Str]']
mov ['[ecx+eax*8],', 'edx']
mov ['eax,', '[ebp+var_164]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_158]']
mov ['[ecx+eax*8+4],', 'edx']
mov ['eax,', '[ebp+var_158]']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3AB']
mov ['eax,', '[ebp+Str]']
add ['eax,', '1']
mov ['[ebp+Str],', 'eax']
jmp ['short', 'loc_3E0']
mov ['eax,', '[ebp+var_164]']
add ['eax,', '1']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_3E0']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '9']
mov ['eax,', '[ebp+var_170]']
lea ['ecx,', '[ebp+eax+Str1]']
mov ['[ebp+var_158],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
mov ['[ebp+var_164],', 'eax']
jmp ['short', 'loc_3E5']
jmp ['loc_303']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_3EF']
jmp ['short', 'loc_41D']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
call ['[ebp+arg_10]']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_418']
jmp ['short', 'loc_41D']
jmp ['loc_1B8']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_42F']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_T_FileStream_close']
add ['esp,', '4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN36']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '234h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN35']
sar ['dh,', '0FFh']
jmp ['fword', 'ptr', '[ecx+eax]']
align ['10h']
dd ['offset', '$LN34']
align ['4']
assume ['cs:_rdata']
public ['??_C@_01KDCPPGHE@r?$AA@']
align ['10h']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_getMissingLimit proc near		
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+Str1]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+Str1]']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str1],', 'eax']
mov ['ecx,', '[ebp+Str1]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '23h']
jnz ['loc_542']
mov ['eax,', '[ebp+Str1]']
add ['eax,', '1']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str1],', 'eax']
mov ['ecx,', '[ebp+Str1]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '40h']
jnz ['short', 'loc_542']
mov ['eax,', '[ebp+Str1]']
add ['eax,', '1']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str1],', 'eax']
mov ['esi,', 'esp']
push ['7']
push ['offset', '??_C@_07NCACNKHJ@missing?$AA@']
mov ['ecx,', '[ebp+Str1]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strncmp']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_542']
mov ['eax,', '[ebp+Str1]']
add ['eax,', '7']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str1],', 'eax']
mov ['ecx,', '[ebp+Str1]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '3Ah']
jnz ['short', 'loc_542']
mov ['eax,', '[ebp+Str1]']
add ['eax,', '1']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
jmp ['short', 'loc_545']
jmp ['short', 'loc_545']
mov ['eax,', '[ebp+var_8]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_rdata']
public ['??_C@_07NCACNKHJ@missing?$AA@']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_u_parseCodePoints proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_591']
xor ['eax,', 'eax']
jmp ['loc_69D']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_5A9']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_5A9']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_5B9']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_5B9']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_69D']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Bh']
jz ['short', 'loc_5E4']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_5EC']
mov ['eax,', '[ebp+var_20]']
jmp ['loc_69D']
mov ['esi,', 'esp']
push ['10h']
lea ['eax,', '[ebp+EndPtr]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strtoul']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+EndPtr]']
cmp ['eax,', '[ebp+Str]']
jbe ['short', 'loc_65D']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '20h']
jz ['short', 'loc_654']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '9']
jz ['short', 'loc_654']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Dh']
jz ['short', 'loc_654']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Ah']
jz ['short', 'loc_654']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Bh']
jz ['short', 'loc_654']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_65D']
cmp ['[ebp+var_14],', '110000h']
jb ['short', 'loc_66A']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '9']
xor ['eax,', 'eax']
jmp ['short', 'loc_69D']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_689']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_692']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+EndPtr]']
mov ['[ebp+Str],', 'eax']
jmp ['loc_5C0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN16']
dd ['offset', '$LN15']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_u_parseString	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_709']
xor ['eax,', 'eax']
jmp ['loc_8D4']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_721']
cmp ['[ebp+arg_8],', '0']
jl ['short', 'loc_721']
cmp ['[ebp+arg_8],', '0']
jle ['short', 'loc_731']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_731']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_8D4']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_740']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Bh']
jz ['short', 'loc_76B']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_7A5']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_8]']
jge ['short', 'loc_781']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_79D']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_794']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0FFFFFF84h']
jmp ['short', 'loc_79D']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0Fh']
mov ['eax,', '[ebp+var_20]']
jmp ['loc_8D4']
mov ['esi,', 'esp']
push ['10h']
lea ['eax,', '[ebp+EndPtr]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strtoul']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+EndPtr]']
cmp ['eax,', '[ebp+Str]']
jbe ['short', 'loc_816']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '20h']
jz ['short', 'loc_80D']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '9']
jz ['short', 'loc_80D']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Dh']
jz ['short', 'loc_80D']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '0Ah']
jz ['short', 'loc_80D']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Bh']
jz ['short', 'loc_80D']
mov ['eax,', '[ebp+EndPtr]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_816']
cmp ['[ebp+var_14],', '110000h']
jb ['short', 'loc_826']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '9']
xor ['eax,', 'eax']
jmp ['loc_8D4']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_83B']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['[ebp+arg_C],', '0']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_14]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
add ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+arg_8]']
jg ['short', 'loc_8B4']
cmp ['[ebp+var_14],', '0FFFFh']
ja ['short', 'loc_874']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', 'word', 'ptr', '[ebp+var_14]']
mov ['[ecx+eax*2],', 'dx']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_8B2']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '0Ah']
add ['eax,', '0D7C0h']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '3FFh']
or ['eax,', '0DC00h']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_8C9']
mov ['eax,', '0FFFFh']
cmp ['eax,', '[ebp+var_14]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['ecx,', '1']
add ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+EndPtr]']
mov ['[ebp+Str],', 'eax']
jmp ['loc_747']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN24']
dd ['offset', '$LN23']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_u_parseCodePointRangeAnyTerminator proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jle ['short', 'loc_941']
xor ['eax,', 'eax']
jmp ['loc_A7D']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_953']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_953']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_963']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
jmp ['loc_A7D']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str],', 'eax']
mov ['esi,', 'esp']
push ['10h']
lea ['eax,', '[ebp+EndPtr]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strtoul']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+EndPtr]']
cmp ['eax,', '[ebp+Str]']
jbe ['short', 'loc_9A2']
cmp ['[ebp+var_14],', '110000h']
jb ['short', 'loc_9B2']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '9']
xor ['eax,', 'eax']
jmp ['loc_A7D']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+EndPtr]']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str],', 'eax']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '2Eh']
jnz ['short', 'loc_9E8']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax+1]']
cmp ['ecx,', '2Eh']
jz ['short', 'loc_9FA']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+EndPtr]']
mov ['[eax],', 'ecx']
mov ['eax,', '1']
jmp ['loc_A7D']
mov ['eax,', '[ebp+Str]']
add ['eax,', '2']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+Str],', 'eax']
mov ['esi,', 'esp']
push ['10h']
lea ['eax,', '[ebp+EndPtr]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__strtoul']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+EndPtr]']
cmp ['eax,', '[ebp+Str]']
jbe ['short', 'loc_A3C']
cmp ['[ebp+var_14],', '110000h']
jb ['short', 'loc_A49']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '9']
xor ['eax,', 'eax']
jmp ['short', 'loc_A7D']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_A68']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '9']
xor ['eax,', 'eax']
jmp ['short', 'loc_A7D']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+EndPtr]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['eax,', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN14']
dd ['offset', '$LN13']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_u_parseCodePointRange proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['_u_parseCodePointRangeAnyTerminator']
add ['esp,', '14h']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[eax],', '0']
jg ['short', 'loc_B32']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_u_skipWhitespace']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', '3Bh']
jz ['short', 'loc_B32']
mov ['eax,', '[ebp+var_8]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_B32']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '9']
xor ['eax,', 'eax']
jmp ['short', 'loc_B35']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN6']
dd ['offset', '$LN5']
align ['4']
assume ['cs:_text']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rtc$TMZ,', 'fs:nothing,', 'gs:nothing']
endp
_u_parseUTF8	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0E4h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_E4]']
mov ['ecx,', '39h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+Str]']
mov ['[ebp+Src],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_20],', '0']
cmp ['[ebp+arg_4],', '0FFFFFFFFh']
jnz ['short', 'loc_BC3']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['eax,', '[ebp+Str]']
add ['eax,', '[ebp+arg_4]']
cmp ['[ebp+Src],', 'eax']
jnb ['short', 'loc_C14']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
push ['offset', '??_C@_03IJFOLNOP@?$CF2x?$AA@']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__sscanf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_C00']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_14]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_20]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+Src]']
add ['eax,', '2']
mov ['[ebp+Src],', 'eax']
jmp ['short', 'loc_BC3']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['_u_terminateChars_56']
add ['esp,', '10h']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '0E4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN8']
dd ['offset', '$LN7_0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_03IJFOLNOP@?$CF2x?$AA@']
extrn ['__RTC_Shutdown:near']
extrn ['__RTC_InitBase:near']
extrn ['__imp__strchr:near']
extrn ['__RTC_CheckEsp:near']
extrn ['_T_FileStream_close:near']
extrn ['_T_FileStream_readLine:near']
extrn ['_T_FileStream_open:near']
extrn ['_T_FileStream_stdin:near']
extrn ['___security_cookie:near']
extrn ['@__security_check_cookie@4:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['__imp__strncmp:near']
extrn ['__imp__strtoul:near']
extrn ['_u_terminateChars_56:near']
extrn ['__imp__sscanf:near']
extrn ['_strlen:near']
end
