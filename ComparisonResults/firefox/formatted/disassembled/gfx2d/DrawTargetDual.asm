endp
?DrawSurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_18],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_18]']
mov ['eax,', '[edx+2Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_1C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_1C]']
mov ['eax,', '[edx+2Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
dd ['offset', '$LN4_2']
dd ['offset', '$LN3_2']
endp
?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '9Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_A8]']
mov ['ecx,', '27h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_9C]']
call ['??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_A4],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_9C]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_A4]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_A4]']
mov ['eax,', '[edx+60h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_A8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_98]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_A8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_A8]']
mov ['eax,', '[edx+60h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0A8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
dd ['offset', '$LN7_0']
dd ['offset', '$LN4_3']
dd ['0FFFFFF64h,', '8']
dd ['offset', '$LN5_5']
align ['8']
endp
?DrawSurfaceWithShadow@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_18],', 'eax']
mov ['esi,', 'esp']
movzx ['ecx,', '[ebp+arg_14]']
push ['ecx']
push ['ecx']
movss ['xmm0,', '[ebp+arg_10]']
movss ['[esp+28h+var_28],', 'xmm0']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_18]']
mov ['eax,', '[edx+34h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_1C],', 'eax']
mov ['esi,', 'esp']
movzx ['ecx,', '[ebp+arg_14]']
push ['ecx']
push ['ecx']
movss ['xmm0,', '[ebp+arg_10]']
movss ['[esp+2Ch+var_2C],', 'xmm0']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_1C]']
mov ['eax,', '[edx+34h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
dd ['offset', '$LN4_4']
dd ['offset', '$LN3_3']
db ['8', 'dup(0CCh)']
endp
?CopySurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_18],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_18]']
mov ['eax,', '[edx+3Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_1C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_1C]']
mov ['eax,', '[edx+3Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN4_5']
dd ['offset', '$LN3_4']
endp
?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_94],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_94]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_94]']
mov ['eax,', '[edx+44h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_98]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_98]']
mov ['eax,', '[edx+44h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN6']
dd ['offset', '$LN4_6']
db ['8', 'dup(0CCh)']
endp
?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_94],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_94]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_94]']
mov ['edx,', '[eax+48h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_98]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_98]']
mov ['eax,', '[edx+48h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
dd ['offset', '$LN6_0']
dd ['offset', '$LN4_7']
endp
?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_94],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_94]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_94]']
mov ['eax,', '[edx+4Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_98]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_98]']
mov ['eax,', '[edx+4Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
dd ['offset', '$LN6_1']
dd ['offset', '$LN4_8']
db ['8', 'dup(0CCh)']
endp
?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_94],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_94]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_94]']
mov ['edx,', '[eax+50h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_98]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_98]']
mov ['eax,', '[edx+50h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
dd ['offset', '$LN6_2']
dd ['offset', '$LN4_9']
endp
?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_94],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_94]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_94]']
mov ['eax,', '[edx+54h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_98]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_98]']
mov ['eax,', '[edx+54h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN6_3']
dd ['offset', '$LN4_10']
db ['8', 'dup(0CCh)']
endp
?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_98]']
mov ['ecx,', '23h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_94],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_94]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_94]']
mov ['eax,', '[edx+58h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_98]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_98]']
mov ['eax,', '[edx+58h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '98h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
dd ['offset', '$LN6_4']
dd ['offset', '$LN4_11']
db ['8', 'dup(0CCh)']
endp
?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '108h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_114]']
mov ['ecx,', '42h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_108]']
call ['??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_110],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_A0]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_110]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_110]']
mov ['edx,', '[eax+5Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_114],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_9C]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_114]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_114]']
mov ['eax,', '[edx+5Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_108]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_8C]']
call ['??1DualPattern@gfx@mozilla@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '114h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN8_1']
dd ['offset', '$LN5_8']
dd ['0FFFFFEF8h,', '74h']
dd ['offset', '$LN6_5']
endp
?PushLayer@DrawTargetDual@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_18],', 'eax']
mov ['esi,', 'esp']
movzx ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
push ['ecx']
movss ['xmm0,', '[ebp+arg_4]']
movss ['[esp+34h+var_34],', 'xmm0']
movzx ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_18]']
mov ['eax,', '[edx+70h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_1C],', 'eax']
mov ['esi,', 'esp']
movzx ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
push ['ecx']
movss ['xmm0,', '[ebp+arg_4]']
movss ['[esp+38h+var_38],', 'xmm0']
movzx ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_1C]']
mov ['eax,', '[edx+70h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
dd ['offset', '$LN4_12']
dd ['offset', '$LN3_5']
db ['0Bh', 'dup(0CCh)']
endp
?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '114h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_F8],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_FC],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
mov ['eax,', '[ebp+var_FC]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_FC]']
mov ['eax,', '[edx+84h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_100],', 'eax']
mov ['ecx,', '[ebp+var_100]']
mov ['[ebp+var_104],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_104]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_108],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_108]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_108]']
mov ['eax,', '[edx+84h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10C],', 'eax']
mov ['ecx,', '[ebp+var_10C]']
mov ['[ebp+var_110],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['edx,', '[ebp+var_110]']
push ['edx']
lea ['ecx,', '[ebp+var_24]']
call ['??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_30]']
call ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_FEE']
lea ['ecx,', '[ebp+var_24]']
call ['??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
test ['eax,', 'eax']
jnz ['loc_107C']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['offset', '$SG70167']
push ['0FFFFFFFFh']
push ['0']
call ['?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_F0]']
call ['??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
mov ['[ebp+var_114],', 'eax']
mov ['ecx,', '[ebp+var_114]']
mov ['[ebp+var_118],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['ecx,', '[ebp+var_118]']
call ['??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z']
mov ['ecx,', 'eax']
call ['??$?6HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@ABU?$BaseSize@HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@12@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_F0]']
call ['??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z']
mov ['edx,', '[ebp+var_F8]']
or ['edx,', '1']
mov ['[ebp+var_F8],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_10F1']
lea ['eax,', '[ebp+var_24]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
lea ['edx,', '[ebp+var_F4]']
push ['edx']
call ['??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_11C],', 'eax']
mov ['eax,', '[ebp+var_11C]']
mov ['[ebp+var_120],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
mov ['ecx,', '[ebp+var_120]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0VDrawTargetDual@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@@Z']
mov ['edx,', '[ebp+var_F8]']
or ['edx,', '1']
mov ['[ebp+var_F8],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_F4]']
call ['??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
dd ['offset', '$LN16']
dd ['offset', '$LN13']
dd ['0FFFFFFDCh,', '4']
dd ['offset', '$LN14']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0A8h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-98h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-98h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-98h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-98h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-98h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0	proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-98h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0 proc near
lea ['ecx,', '[ebp-8Ch]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1 proc near
lea ['ecx,', '[ebp-108h]']
jmp ['??1DualPattern@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-114h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$2 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$3 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$4 proc near
lea ['ecx,', '[ebp-0F0h]']
jmp ['??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$5 proc near
mov ['eax,', '[ebp-0F8h]']
and ['eax,', '1']
jz ['locret_1338']
and ['dword', 'ptr', '[ebp-0F8h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
retn
endp
__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$6 proc near
lea ['ecx,', '[ebp-0F4h]']
jmp ['??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-120h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VDrawTargetDual@gfx@mozilla@@@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAEPAVDrawTargetDual@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?0VSourceSurfaceDual@gfx@mozilla@@@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?take@?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAEPAVSourceSurfaceDual@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?6HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@ABU?$BaseSize@HU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
push ['edi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_14C0']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_145D']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_1464']
mov ['[ebp+var_8],', '0']
push ['offset', '??_C@_01PKGAHCOL@?$CJ?$AA@']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
push ['offset', '??_C@_01IHBHIGKO@?0?$AA@']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
push ['offset', '??_C@_05EHMGNGKA@Size?$CI?$AA@']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
pop ['edi']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '78h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_88]']
mov ['ecx,', '1Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
xor ['ecx,', 'ecx']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QBE_JXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_4C],', 'edx']
cmp ['[ebp+var_4C],', '0']
jl ['short', 'loc_15B9']
jg ['short', 'loc_155F']
cmp ['[ebp+var_50],', '0']
jbe ['short', 'loc_15B9']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QBE_JXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_58],', 'eax']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_54]']
cmp ['eax,', '[ebp+var_18]']
jl ['short', 'loc_15B9']
jg ['short', 'loc_1591']
mov ['ecx,', '[ebp+var_58]']
cmp ['ecx,', '[ebp+var_1C]']
jbe ['short', 'loc_15B9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QBE_JXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+var_1C]']
sbb ['edx,', '[ebp+var_18]']
mov ['dword', 'ptr', '[ebp+var_60],', 'eax']
mov ['dword', 'ptr', '[ebp+var_60+4],', 'edx']
jmp ['short', 'loc_15C2']
xorpd ['xmm0,', 'xmm0']
movlpd ['[ebp+var_60],', 'xmm0']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_60]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_60+4]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_30]']
call ['??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_30]']
call ['??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_15FE']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
jmp ['loc_186C']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?flags@ios_base@std@@QBEHXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
and ['eax,', '1C0h']
cmp ['eax,', '40h']
jz ['loc_16E9']
jmp ['short', 'loc_1646']
mov ['ecx,', '[ebp+var_24]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_20]']
sbb ['edx,', '0']
mov ['[ebp+var_24],', 'ecx']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_20],', '0']
jl ['loc_16E9']
jg ['short', 'loc_165C']
cmp ['[ebp+var_24],', '0']
jbe ['loc_16E9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_65],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_6C],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+var_65]']
push ['eax']
mov ['ecx,', '[ebp+var_6C]']
call ['dword', 'ptr', 'ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+var_70]']
mov ['[ebp+var_38],', 'ecx']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_3C],', 'eax']
lea ['edx,', '[ebp+var_38]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_16E4']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_16E9']
jmp ['loc_1634']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_174B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_74],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_74]']
call ['dword', 'ptr', 'ds:__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_7C],', 'eax']
mov ['[ebp+var_78],', 'edx']
mov ['eax,', '[ebp+var_7C]']
cmp ['eax,', '[ebp+var_1C]']
jnz ['short', 'loc_1742']
mov ['ecx,', '[ebp+var_78]']
cmp ['ecx,', '[ebp+var_18]']
jz ['short', 'loc_174B']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jnz ['loc_1814']
jmp ['short', 'loc_1769']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_20]']
sbb ['ecx,', '0']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '0']
jl ['loc_1814']
jg ['short', 'loc_177F']
cmp ['[ebp+var_24],', '0']
jbe ['loc_1814']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_7D],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_84],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+var_7D]']
push ['eax']
mov ['ecx,', '[ebp+var_84]']
call ['dword', 'ptr', 'ds:__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_88],', 'eax']
mov ['ecx,', '[ebp+var_88]']
mov ['[ebp+var_40],', 'ecx']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_44],', 'eax']
lea ['edx,', '[ebp+var_40]']
push ['edx']
lea ['eax,', '[ebp+var_44]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_180F']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_1814']
jmp ['loc_1757']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?width@ios_base@std@@QAE_J_J@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_185C']
endp
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0 proc near
mov ['esi,', 'esp']
push ['1']
push ['4']
mov ['eax,', '[ebp+8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+8]']
add ['edx,', '[ecx+4]']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', 'offset', '$LN23_0']
retn
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_186C']
endp
$LN23_0		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
call ['dword', 'ptr', 'ds:__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_30]']
call ['??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_48]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN32']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '88h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN31']
dd ['offset', '$LN29']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_24],', '0']
push ['44h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_19B1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z']
add ['esp,', '4']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z']
add ['esp,', '4']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
call ['??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_19B8']
mov ['[ebp+var_28],', '0']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_1C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
call ['??0?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z']
mov ['[ebp+var_4],', '2']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_14]']
call ['?forget@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@XZ']
mov ['edx,', '[ebp+var_24]']
or ['edx,', '1']
mov ['[ebp+var_24],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11_0']
dd ['offset', '$LN9_2']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0	proc near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1	proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2	proc near
mov ['eax,', '[ebp-24h]']
and ['eax,', '1']
jz ['$LN8_3']
and ['dword', 'ptr', '[ebp-24h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_24],', '0']
push ['18h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_1B19']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z']
add ['esp,', '4']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$Forward@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@@mozilla@@YAAAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV1@@Z']
add ['esp,', '4']
mov ['ecx,', 'eax']
call ['??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
call ['??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_1B20']
mov ['[ebp+var_28],', '0']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_1C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
call ['??0?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z']
mov ['[ebp+var_4],', '2']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_14]']
call ['?forget@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@XZ']
mov ['edx,', '[ebp+var_24]']
or ['edx,', '1']
mov ['[ebp+var_24],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN11']
dd ['offset', '$LN9_0']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0 proc near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2 proc near
mov ['eax,', '[ebp-24h]']
and ['eax,', '1']
jz ['$LN8_2']
and ['dword', 'ptr', '[ebp-24h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@D@std@@YAPADIPAD@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1C07']
jmp ['short', 'loc_1C31']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_1C22']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1C31']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1C5F']
jmp ['short', 'loc_1C8F']
cmp ['[ebp+arg_0],', '1FFFFFFFh']
ja ['short', 'loc_1C80']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '3']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1C8F']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?_Xbad_alloc@std@@YAXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1CCD']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$addressof@D@std@@YAPADAAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1D8E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_1D95']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1E8C']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_1E93']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$Atomic@I$01X@mozilla@@QAE@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$atomic@I@std@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$AtomicBaseIncDec@I$01@detail@mozilla@@QAE@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$AtomicBase@I$01@detail@mozilla@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$BaseRect@HU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@U?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@U?$IntMarginTyped@UUnknownUnits@gfx@mozilla@@@23@@gfx@mozilla@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['1']
push ['3']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+0B0h],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+0B8h],', '0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
push ['2']
call ['?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z']
add ['esp,', '4']
movzx ['eax,', 'al']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
endp
__ehhandler$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$Atomic@I$01X@mozilla@@QAE@I@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_21F4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_2234']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_2274']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_22B4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?AddRef@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??0_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@D@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@P80@AEXNM@Z@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$atomic@I@std@@QAE@I@Z proc	near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4atomic_uint@std@@QAEII@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$forward@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_14+3]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0 proc near
mov ['esi,', 'esp']
mov ['ecx,', '[ebp-10h]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_14],', '0CCCCCCCCh']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2838']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+10h],', 'offset', '??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['esi,', 'esp']
push ['0']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '18h']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['dword', 'ptr', 'ds:__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+eax],', 'offset', '??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '68h']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['edx,', '[eax+4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+edx-4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0	proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN5_10']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
retn
endp
__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '20h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
jmp ['__RTC_CheckEsp']
endp
__ehhandler$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0?$fpos@H@std@@QAE@_J@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0DrawTarget@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTarget@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0UserData@gfx@mozilla@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0Matrix@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ecx+38h]']
and ['dl,', '0FEh']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+38h],', 'dl']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ecx+38h]']
and ['dl,', '0FDh']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+38h],', 'dl']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
endp
__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1UserData@gfx@mozilla@@QAE@XZ']
endp
__ehhandler$??0DrawTarget@gfx@mozilla@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawTarget@gfx@mozilla@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0DrawTarget@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTargetDual@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??0?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@PAVDrawTarget@gfx@mozilla@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+arg_0]']
call ['?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+39h],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '3Ch']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '40h']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '50h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_5C]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['byte', 'ptr', '[eax+70h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['al,', '1']
jz ['short', 'loc_2B87']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+6Ch],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+68h],', 'ecx']
jmp ['loc_2CE2']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '4']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['eax,', '[ebp+var_54]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_54]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['al,', '8']
jz ['short', 'loc_2BCC']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+6Ch],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+68h],', 'ecx']
jmp ['loc_2CE2']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '4']
call ['?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_10]']
call ['?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_24]']
push ['edx']
push ['34h']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_2C3C']
lea ['ecx,', '[ebp+var_34]']
call ['??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
push ['eax']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '0Ch']
push ['edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '10h']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
call ['??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
mov ['[ebp+var_58],', 'eax']
jmp ['short', 'loc_2C43']
mov ['[ebp+var_58],', '0']
mov ['edx,', '[ebp+var_58]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+68h],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '34h']
call ['?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ']
mov ['[ebp+var_40],', 'eax']
mov ['edx,', '[ebp+var_40]']
push ['edx']
push ['34h']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_3C],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_3C],', '0']
jz ['short', 'loc_2CBE']
lea ['ecx,', '[ebp+var_50]']
call ['??0?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
push ['eax']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+9]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '0Ch']
push ['edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '14h']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
call ['??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_2CC5']
mov ['[ebp+var_5C],', '0']
mov ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_38],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax+6Ch],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[edx+70h],', '1']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '5Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$0 proc	near
mov ['eax,', '[ebp-24h]']
push ['eax']
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$1 proc	near
mov ['eax,', '[ebp-40h]']
push ['eax']
mov ['eax,', '[ebp-3Ch]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-5Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0DualSurface@gfx@mozilla@@QAE@PAVSourceSurface@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_2D77']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
jmp ['short', 'loc_2DCB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['al,', '8']
jz ['short', 'loc_2DA4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_2DCB']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '10h']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '14h']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Matrix@gfx@mozilla@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@3f800000']
movss ['dword', 'ptr', '[eax],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[ecx+4],', 'xmm0']
mov ['edx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[edx+8],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@3f800000']
movss ['dword', 'ptr', '[eax+0Ch],', 'xmm0']
mov ['ecx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[ecx+10h],', 'xmm0']
mov ['edx,', '[ebp+var_4]']
movss ['xmm0,', 'ds:__real@00000000']
movss ['dword', 'ptr', '[edx+14h],', 'xmm0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0Pattern@gfx@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Pattern@gfx@mozilla@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0SourceSurface@gfx@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SourceSurface@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0UserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
endp
__ehhandler$??0SourceSurface@gfx@mozilla@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0SourceSurface@gfx@mozilla@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0SourceSurface@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SourceSurfaceDual@gfx@mozilla@@6B@']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+14h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_4]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$3 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '14h']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0Pattern@gfx@mozilla@@IAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SurfacePattern@gfx@mozilla@@6B@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@PAVSourceSurface@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_10]']
mov ['al,', '[ebp+arg_4]']
mov ['[edx+8],', 'al']
mov ['ecx,', '[ebp+var_10]']
mov ['dl,', '[ebp+arg_C]']
mov ['[ecx+9],', 'dl']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '0Ch']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ecx+14h]']
mov ['[eax+14h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '24h']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[eax+4]']
mov ['[edx+4],', 'ecx']
mov ['ecx,', '[eax+8]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[eax+0Ch]']
mov ['[edx+0Ch],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0UserData@gfx@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Container_proxy@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Generic_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Generic_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Iostream_error_category@std@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Iostream_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_3298']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0_System_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_System_error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_category@std@@QAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['esi']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?good@ios_base@std@@QBE_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_33F2']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[edx+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_33F2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '[ebp+arg_0]']
jz ['short', 'loc_33F2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?good@ios_base@std@@QBE_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx+4],', 'al']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
endp
__ehhandler$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_351A']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@IAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@IAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_3556']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_3584']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_35B8']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_35EC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_3620']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?Release@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1_Container_base12@std@@QAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_369A']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_36B2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_36CA']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_36E2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax-68h]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+edx-68h],', 'offset', '??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-68h]']
mov ['eax,', '[edx+4]']
sub ['eax,', '68h']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-68h]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx-6Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '50h']
call ['??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '48h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1DrawTarget@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7DrawTarget@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1UserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@QAE@XZ']
endp
__ehhandler$??1DrawTarget@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1DrawTarget@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1DrawTargetDual@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1DrawTargetDual@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
call ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$1	proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '3Ch']
jmp ['??1?$RefPtr@VDrawTarget@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??1DrawTargetDual@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1DrawTargetDual@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1DualPattern@gfx@mozilla@@QAE@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+70h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_3968']
mov ['esi,', 'esp']
push ['0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+68h]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ecx+68h]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+6Ch]']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[edx]']
mov ['ecx,', '[eax+6Ch]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1Pattern@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Pattern@gfx@mozilla@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1SourceSurface@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7SourceSurface@gfx@mozilla@@6B@']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1UserData@gfx@mozilla@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@QAE@XZ']
endp
__ehhandler$??1SourceSurface@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1SourceSurface@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$0 proc	near
mov ['ecx,', '[ebp-10h]']
jmp ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
endp
__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$1 proc	near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1SurfacePattern@gfx@mozilla@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1Pattern@gfx@mozilla@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0	proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Pattern@gfx@mozilla@@UAE@XZ']
endp
__ehhandler$??1SurfacePattern@gfx@mozilla@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1SurfacePattern@gfx@mozilla@@UAE@XZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1UserData@gfx@mozilla@@QAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Destroy@UserData@gfx@mozilla@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Generic_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Iostream_error_category@std@@UAE@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[eax+4]']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_3C4E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['ecx,', 'edx']
call ['dword', 'ptr', 'ds:__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1_System_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1error_category@std@@UAE@XZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_?uncaught_exception@std@@YA_NXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_3CD9']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx]']
call ['dword', 'ptr', 'ds:__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??2@YAPAXIPAX@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??3@YAXPAX0@Z	proc near		
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??4atomic_uint@std@@QAEII@Z proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['?atomic_store@std@@YAXPAUatomic_uint@1@I@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??6?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEAAV012@QBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_3D82']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_3D6B']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_3D72']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_category@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_3DC0']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_3DC7']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??8error_condition@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
mov ['ecx,', 'eax']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_3E26']
mov ['ecx,', '[ebp+var_4]']
call ['?value@error_condition@std@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_condition@std@@QBEHXZ']
cmp ['esi,', 'eax']
jnz ['short', 'loc_3E26']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_3E2D']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??B?$fpos@H@std@@QBE_JXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
add ['edx,', '[ecx+8]']
mov ['esi,', '[eax+4]']
adc ['esi,', '[ecx+0Ch]']
mov ['eax,', 'edx']
mov ['edx,', 'esi']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_3EDE']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_3F06']
mov ['ecx,', '[ebp+var_4]']
call ['?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z']
add ['esp,', '4']
add ['eax,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z']
add ['esp,', '4']
sub ['eax,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '68h']
call ['??1?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '68h']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@$4PPPPPPPM@A@AEPAXI@Z proc near
sub ['ecx,', '[ecx-4]']
jmp ['??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_3FEA']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '68h']
call ['??_D?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4030']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '68h']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '68h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawTarget@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawTarget@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4072']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GDrawTargetDual@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1DrawTargetDual@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_40B2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GPattern@gfx@mozilla@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1Pattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_40F2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GSourceSurface@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1SourceSurface@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4132']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GSourceSurfaceDual@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4172']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_GSurfacePattern@gfx@mozilla@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1SurfacePattern@gfx@mozilla@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_41B2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Generic_error_category@std@@UAEPAXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_41F2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4232']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_G_System_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_System_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_4272']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??_Gerror_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_42B2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??0_Generic_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??0_Iostream_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??0_System_error_category@std@@QAE@XZ']
push ['offset', '??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
call ['dword', 'ptr', 'ds:__imp_??0id@locale@std@@QAE@I@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Eallocator_arg@std@@YAXXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$di']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__Epiecewise_construct@std@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
xor ['eax,', 'eax']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??1_Generic_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??1_Iostream_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$yd']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??1_System_error_category@std@@UAE@XZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_445A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_447E']
mov ['ecx,', '[ebp+var_4]']
call ['??E?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsAddRefHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?AddRef@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
call ['?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '2']
jz ['short', 'loc_4583']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
jmp ['short', 'loc_4587']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ClearRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+38h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+38h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_10]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['ecx,', '[ebp+var_18]']
call ['??$?0VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_18]']
call ['??B?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
push ['eax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+3Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN7']
dd ['offset', '$LN5_2']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1?$RefPtr@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
endp
__ehhandler$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z	proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
jmp ['___CxxFrameHandler3']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CreateFilter@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+98h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CreateGradientStops@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx+94h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CreatePathBuilder@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+90h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+84h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CreateSourceSurfaceFromData@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
movzx ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+78h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?CreateSourceSurfaceFromNativeSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+80h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?DefaultOptions@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@SAH_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jz ['short', 'loc_4A1C']
mov ['[ebp+var_4],', '4']
jmp ['short', 'loc_4A23']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
or ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Destroy@UserData@gfx@mozilla@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_4A5A']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx]']
jge ['short', 'loc_4AA2']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
cmp ['dword', 'ptr', '[edx+eax+8],', '0']
jz ['short', 'loc_4AA0']
imul ['eax,', '[ebp+var_8],', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['esi,', 'esp']
mov ['eax,', '[edx+eax+4]']
push ['eax']
imul ['ecx,', '[ebp+var_8],', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax+ecx+8]']
call ['ecx']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_4A51']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__free']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?DrawFilter@DrawTargetDual@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+30h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+30h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_54]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_4BC6']
jmp ['short', 'loc_4C2C']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_34]']
call ['?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_4BF4']
lea ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z']
push ['offset', '??_C@_00CNPNBAHC@?$AA@']
lea ['ecx,', '[ebp+var_54]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '54h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN9_1']
db ['3', 'dup(0FFh)']
dd ['1Ch']
dd ['offset', '$LN7_7']
jnb ['short', 'loc_4CEE']
jb ['short', '$+2']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0 proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
endp
__ehhandler$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ proc	near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-50h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Flush@DrawTargetDual@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx+24h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetBackendType@DrawTargetDual@gfx@mozilla@@UBE?AW4BackendType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetDataSurface@SourceSurfaceDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+39h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetFormat@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetNativeSurface@DrawTargetDual@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetSize@DrawTargetDual@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+18h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetSize@SourceSurfaceDual@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['??C?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@DrawTargetDual@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Init@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXH_NW4LogReason@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+0B0h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+0B4h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ebp+arg_4]']
mov ['[ecx+0B8h],', 'dl']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+0B8h]']
test ['ecx,', 'ecx']
jz ['loc_5147']
mov ['ecx,', '[ebp+var_4]']
call ['?AutoPrefix@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_50BD']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '4']
jz ['short', 'loc_5073']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5046']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '10h']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_504D']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
push ['2']
push ['offset', '??_C@_04HGKILAJC@?$FLGFX?$AA@']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_50BD']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5084']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_508B']
mov ['[ebp+var_C],', '0']
push ['offset', '??_C@_01JOAMLHOP@?9?$AA@']
mov ['esi,', 'esp']
push ['2']
push ['offset', '??_C@_04HGKILAJC@?$FLGFX?$AA@']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '8']
jz ['short', 'loc_511E']
mov ['ecx,', '[ebp+var_4]']
call ['?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_511E']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_50EB']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10h']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_50F2']
mov ['[ebp+var_10],', '0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0B4h]']
push ['edx']
push ['offset', '??_C@_01CLKCMJKC@?5?$AA@']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
mov ['ecx,', 'eax']
call ['dword', 'ptr', 'ds:__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_512F']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_5136']
mov ['[ebp+var_14],', '0']
push ['offset', '??_C@_03FLKELDHI@?$FN?3?5?$AA@']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
add ['esp,', '8']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?GetFormat@DrawTarget@gfx@mozilla@@QBE?AW4SurfaceFormat@23@XZ']
cmp ['al,', '1']
jnz ['short', 'loc_5184']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_518B']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsCurrentGroupOpaque@DrawTargetDual@gfx@mozilla@@UAE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+0B0h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsDualDrawTarget@DrawTargetDual@gfx@mozilla@@UBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+0B8h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+0B0h]']
and ['eax,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?OptimizeSourceSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+7Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA']
cmp ['eax,', '[ebp+arg_4]']
jl ['short', 'loc_5389']
cmp ['dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA,', '4']
jge ['short', 'loc_534D']
cmp ['[ebp+arg_4],', '3']
jge ['short', 'loc_5389']
movzx ['ecx,', '[ebp+arg_8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_535E']
mov ['[ebp+var_4],', 'offset', '??_C@_00CNPNBAHC@?$AA@']
jmp ['short', 'loc_5365']
mov ['[ebp+var_4],', 'offset', '??_C@_01EEMJAFIK@?6?$AA@']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
push ['eax']
push ['offset', '??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@']
call ['dword', 'ptr', 'ds:__imp__printf']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PopClip@DrawTargetDual@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+6Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx+6Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_5420']
int ['3']
mov ['dword', 'ptr', '$SG70167,', '3E6h']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5424']
xor ['edx,', 'edx']
jnz ['short', 'loc_5420']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PopLayer@DrawTargetDual@gfx@mozilla@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+74h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx+74h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PushClip@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+64h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+64h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PushClipRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+68h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+68h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_55F8']
int ['3']
mov ['dword', 'ptr', '$SG70167,', '3DFh']
mov ['esi,', 'esp']
push ['3']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__TerminateProcess@8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['_MOZ_NoReturn']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_55FC']
xor ['edx,', 'edx']
jnz ['short', 'loc_55F8']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VDrawTarget@gfx@mozilla@@@?$RefPtr@VDrawTarget@gfx@mozilla@@@@SAXPAVDrawTarget@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTarget@gfx@mozilla@@@@CAXPAVDrawTarget@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VDrawTargetDual@gfx@mozilla@@@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@SAXPAVDrawTargetDual@gfx@mozilla@@@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@CAXPAVDrawTargetDual@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VSourceSurface@gfx@mozilla@@@?$RefPtr@VSourceSurface@gfx@mozilla@@@@SAXPAVSourceSurface@gfx@mozilla@@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurface@gfx@mozilla@@@@CAXPAVSourceSurface@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$AddRefTraits@VSourceSurfaceDual@gfx@mozilla@@@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@SAXPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?AddRefTraitsReleaseHelper@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@CAXPAVSourceSurfaceDual@gfx@mozilla@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_56CC']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_573C']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5700']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_5707']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_5735']
mov ['esi,', 'esp']
push ['1']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_573C']
mov ['[ebp+var_1C],', '0']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Release@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
jnz ['short', 'loc_576D']
mov ['ecx,', '[ebp+var_4]']
call ['??F?$AtomicBaseIncDec@I$01@detail@mozilla@@QAEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_57CF']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5793']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '4']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_579A']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_57C8']
mov ['esi,', 'esp']
push ['1']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_57CF']
mov ['[ebp+var_18],', '0']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '[ebp+arg_0]']
and ['al,', '1']
shl ['al,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ecx+38h]']
and ['dl,', '0FDh']
or ['dl,', 'al']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+38h],', 'dl']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ecx+14h]']
mov ['[eax+14h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['al,', '[edx+38h]']
or ['al,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SetTransform@DrawTargetDual@gfx@mozilla@@UAEXABVMatrix@23@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ecx+14h]']
mov ['[eax+14h],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3Ch']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[edx+9Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??C?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ']
mov ['[ebp+var_C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+9Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ShouldOutputMessage@BasicLogger@gfx@mozilla@@SA_NH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA']
cmp ['eax,', '[ebp+arg_0]']
jl ['short', 'loc_5944']
cmp ['dword', 'ptr', 'ds:?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA,', '4']
jge ['short', 'loc_5940']
cmp ['[ebp+arg_0],', '3']
jge ['short', 'loc_5944']
mov ['al,', '1']
jmp ['short', 'loc_5946']
xor ['al,', 'al']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '40h']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '3Ch']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
call ['??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0VSourceSurfaceDual@gfx@mozilla@@@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@$$QAU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@@Z']
mov ['edx,', '[ebp+var_18]']
or ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_14]']
call ['??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@XZ']
endp
__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1 proc near
mov ['eax,', '[ebp-18h]']
and ['eax,', '1']
jz ['$LN5_3']
and ['dword', 'ptr', '[ebp-18h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAE@XZ']
retn
endp
__ehhandler$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0B4h],', '0FFFFFFFFh']
jle ['short', 'loc_5A7C']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+0B4h],', '65h']
jge ['short', 'loc_5A7C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_5A83']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?WriteLog@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@AAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?LogIt@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_5B04']
mov ['ecx,', '[ebp+var_4]']
call ['?NoNewline@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['ecx,', 'al']
push ['ecx']
push ['2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?OutputMessage@BasicLogger@gfx@mozilla@@SAXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@H_N@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '4']
jz ['short', 'loc_5AD5']
xor ['edx,', 'edx']
jnz ['short', 'loc_5AD1']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B0h]']
and ['ecx,', '8']
jz ['short', 'loc_5B04']
mov ['ecx,', '[ebp+var_4]']
call ['?ValidReason@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_5B04']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0B4h]']
push ['ecx']
call ['?CrashAction@BasicLogger@gfx@mozilla@@SAXW4LogReason@23@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_C+3]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
dd ['offset', '$LN4_0']
dd ['offset', '$LN3_0']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Assign_rv@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jnb ['short', 'loc_5BEE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
push ['ecx']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_5C19']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['[eax+14h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['[eax+18h],', 'edx']
push ['0']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '5']
ja ['short', 'loc_5CC6']
mov ['ecx,', '[ebp+var_4]']
jmp ['ds:$LN12[ecx*4]']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Fetch_add_relaxed_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_5D4E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Fetch_add_acquire_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_5D4E']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Fetch_add_release_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_5D4E']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z']
add ['esp,', '8']
jmp ['loc_5D4E']
mov ['esi,', 'esp']
push ['698h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['ecx,', 'ecx']
jz ['short', 'loc_5CF4']
xor ['edx,', 'edx']
jnz ['short', 'loc_5D24']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['698h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_5D24']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['698h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
dd ['offset', '$LN4']
dd ['offset', '$LN4']
dd ['offset', '$LN3']
dd ['offset', '$LN2']
dd ['offset', '$LN2']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
xor ['ecx,', 'ecx']
sub ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5DC2']
cmp ['[ebp+var_4],', '3']
jz ['short', 'loc_5DD7']
cmp ['[ebp+var_4],', '5']
jz ['short', 'loc_5DEC']
jmp ['short', 'loc_5E01']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Store_relaxed_4@std@@YAXPCKK@Z']
add ['esp,', '8']
jmp ['loc_5E87']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Store_release_4@std@@YAXPCKK@Z']
add ['esp,', '8']
jmp ['loc_5E87']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Store_seq_cst_4@std@@YAXPCKK@Z']
add ['esp,', '8']
jmp ['loc_5E87']
mov ['esi,', 'esp']
push ['577h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['ecx,', 'ecx']
jz ['short', 'loc_5E2F']
xor ['edx,', 'edx']
jnz ['short', 'loc_5E5F']
mov ['esi,', 'esp']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['577h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['dword', 'ptr', 'ds:__imp___CrtDbgReportW']
add ['esp,', '18h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jnz ['short', 'loc_5E5F']
int ['3']
mov ['esi,', 'esp']
push ['0']
push ['577h']
push ['offset', '??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['dword', 'ptr', 'ds:__imp___invalid_parameter']
add ['esp,', '14h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '28h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '0Fh']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_18]']
jnb ['short', 'loc_5EF6']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_5F48']
mov ['eax,', '[ebp+var_18]']
xor ['edx,', 'edx']
mov ['ecx,', '3']
div ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
cmp ['ecx,', 'eax']
ja ['short', 'loc_5F10']
jmp ['short', 'loc_5F48']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[edx+18h]']
shr ['esi,', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', 'esi']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ecx+18h],', 'eax']
ja ['short', 'loc_5F3D']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+18h]']
shr ['eax,', '1']
mov ['ecx,', '[ebp+var_14]']
add ['eax,', '[ecx+18h]']
mov ['[ebp+var_18],', 'eax']
jmp ['short', 'loc_5F48']
mov ['ecx,', '[ebp+var_14]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_25]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_5FDF']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-18h],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
lea ['eax,', '[ebp-26h]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['[ebp-34h],', 'eax']
mov ['ecx,', '[ebp-18h]']
add ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp-34h]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp-38h],', 'eax']
mov ['edx,', '[ebp-38h]']
mov ['[ebp-20h],', 'edx']
jmp ['short', 'loc_5FC9']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN17']
retn
mov ['dword', 'ptr', '[ebp-4],', '1']
jmp ['short', 'loc_5FD9']
endp
$LN17		proc near		
mov ['dword', 'ptr', '[ebp-4],', '1']
mov ['eax,', 'offset', '$LN19']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_5FEF']
endp
$LN19		proc near		
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_600E']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['ecx,', '[ebp-20h]']
push ['ecx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
lea ['edx,', '[ebp-20h]']
push ['edx']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
push ['eax']
lea ['ecx,', '[ebp-27h]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[ebp-18h]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+0Ch]']
push ['ecx']
mov ['ecx,', '[ebp-14h]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '38h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
dd ['offset', '$LN22']
dd ['offset', '$LN20']
align ['4']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
lea ['edx,', '[ebp+var_8+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_acquire_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_relaxed_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_release_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Fetch_add_seq_cst_4@std@@YAKPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
lock ['xadd', '[ecx],', 'eax']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_C+3]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_C+3]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
dd ['offset', '$LN4_1']
dd ['offset', '$LN3_1']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Getstate@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jnz ['short', 'loc_6237']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '2']
jnz ['short', 'loc_6248']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '8']
jz ['short', 'loc_6259']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '8']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '4']
jz ['short', 'loc_626A']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_62A7']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_62C7']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['short', 'loc_6311']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_6301']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_6301']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_62E8']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'edx']
jmp ['short', 'loc_62F1']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_6311']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6311']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_6320']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_6327']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+3Ch],', 'edx']
cmp ['[ebp+Size],', '0']
jz ['loc_6471']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '6']
cmp ['ecx,', '6']
jz ['loc_6471']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['[ebp+Dst],', 'eax']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '4']
jnz ['short', 'loc_63E8']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+Size]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '2']
jnz ['short', 'loc_6462']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '18h']
jz ['short', 'loc_6409']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+Size]']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_640F']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '[ebp+Size]']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_6462']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
or ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+3Ch],', 'ecx']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_64B8']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_64B8']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+14h]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_64BE']
xor ['al,', 'al']
jmp ['short', 'loc_64C0']
jmp ['short', 'loc_64C0']
mov ['al,', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_6504']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_650D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_6554']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_655D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Store_relaxed_4@std@@YAXPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Store_release_4@std@@YAXPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Store_seq_cst_4@std@@YAXPCKK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
xchg ['eax,', '[ecx]']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_65C8']
jmp ['short', 'loc_663B']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+18h],', '10h']
jb ['short', 'loc_663B']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_C+3]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_661A']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
lea ['eax,', '[ebp+var_C+2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+18h],', '0Fh']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '1']
jz ['short', 'loc_66FF']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_66B4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_66C9']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', 'eax']
push ['edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['esi,', 'esp']
push ['0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+38h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '0FFFFFFFEh']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+3Ch],', 'edx']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xlength_error@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['dword', 'ptr', 'ds:__imp_?_Xout_of_range@std@@YAXPBD@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?addr@?$ClassStorage@VSurfacePattern@gfx@mozilla@@@gfx@mozilla@@QAEPAVSurfacePattern@23@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@D@std@@YAPADIPAD@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z']
add ['esp,', '8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_68A4']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jnb ['short', 'loc_68C0']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_68E7']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_6929']
push ['0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_6929']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_69B6']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_69E9']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_6A26']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_6A23']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_fetch_add_4@std@@YAKPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_fetch_sub_4@std@@YAKPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_store@std@@YAXPAUatomic_uint@1@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?atomic_store_explicit@std@@YAXPAUatomic_uint@1@IW4memory_order@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Atomic_store_4@std@@YAXPCKKW4memory_order@1@@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?convert@?$ToStorageTypeArgument@I@detail@mozilla@@SAII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_6B3D']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_6B54']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?dec@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_6C4E']
call ['?generic_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_6C63']
jmp ['short', 'loc_6C63']
call ['?system_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jnz ['short', 'loc_6CD1']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_6CD8']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eof@?$char_traits@D@std@@SAHXZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
or ['eax,', '0FFFFFFFFh']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eq@?$char_traits@D@std@@SA_NABD0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movsx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_6D0C']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_6D13']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_6D3C']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_6D43']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_code@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_6D91']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_code@std@@QBEHXZ']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_6D91']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_6D98']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', 'eax']
call ['??8error_condition@std@@QBE_NABV01@@Z']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_6E29']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Dst],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_6E79']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_6E95']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
jmp ['short', 'loc_6EDB']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_6EDB']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?fetch_add@atomic_uint@std@@QAEIIW4memory_order@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['?atomic_fetch_add_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['?atomic_fetch_sub_explicit@std@@YAIPAUatomic_uint@1@IW4memory_order@1@@Z']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAEXAAPAVDrawTargetDual@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAE@PAVDrawTargetDual@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_7']
dd ['offset', '$LN5_12']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?forget@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAE?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?swap@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAEXAAPAVSourceSurfaceDual@gfx@mozilla@@@Z']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAE@PAVSourceSurfaceDual@gfx@mozilla@@@Z']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
dd ['offset', '$LN6_6']
dd ['offset', '$LN5_11']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?generic_category@std@@YAABVerror_category@1@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VDrawTarget@gfx@mozilla@@@@QBEPAVDrawTarget@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?get@?$RefPtr@VSourceSurface@gfx@mozilla@@@@QBEPAVSourceSurface@gfx@mozilla@@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?inc@?$IntrinsicIncDec@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?add@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?length@?$char_traits@D@std@@SAIPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_70E6']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_70F5']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z']
add ['esp,', '4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator@D@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z	proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@D@std@@QBEIXZ']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_719B']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_71A4']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_7201']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_7208']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_7275']
push ['offset', '??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_7291']
jmp ['short', 'loc_7291']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+Str],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp_?_Winerror_map@std@@YAPBDH@Z']
add ['esp,', '4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_72ED']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_72F4']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', '[ebp+var_C]']
or ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_733A']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_735B']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Generic_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_07DCLBNMLN@generic?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_Iostream_error_category@std@@UBEPBDXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_08LLGCOLLL@iostream?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?name@_System_error_category@std@@UBEPBDXZ proc	near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_06FHFOAHML@system?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?not_eof@?$char_traits@D@std@@SAHABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx],', 'eax']
jz ['short', 'loc_73E2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_7401']
call ['?eof@?$char_traits@D@std@@SAHXZ']
test ['eax,', 'eax']
jnz ['short', 'loc_73F4']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_73FB']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+Src],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+Size],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '2']
jz ['short', 'loc_7457']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_77F6']
jmp ['short', 'loc_7487']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_1C],', 'eax']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_7487']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
jmp ['loc_77F6']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '8']
jz ['short', 'loc_7501']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_7501']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
cmp ['eax,', '[edx+38h]']
jnb ['short', 'loc_7501']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_7570']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_7570']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_77F6']
jmp ['loc_77F6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_758F']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_75BA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['[ebp+var_20],', 'esi']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '1']
cmp ['edx,', '20h']
jnb ['short', 'loc_75D9']
mov ['[ebp+var_24],', '20h']
jmp ['short', 'loc_75E1']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '0']
jbe ['short', 'loc_7604']
mov ['edx,', '7FFFFFFFh']
sub ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_7604']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_75E7']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_7614']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_77F6']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['[ebp+Dst],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+Src],', 'eax']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_765E']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_76D9']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax+38h],', 'ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_C]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+3Ch]']
and ['edx,', '4']
jz ['short', 'loc_76B3']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Dst]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_76D4']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '1']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_77A4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+38h]']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+var_C]']
mov ['esi,', 'esp']
push ['edx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '4']
jz ['short', 'loc_775F']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+Dst]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_77A4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
add ['eax,', '1']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '1']
jz ['short', 'loc_77C2']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
or ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+3Ch],', 'ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_78D6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jbe ['short', 'loc_78D6']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_8],', 'eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_78DF']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '-1']
add ['eax,', 'edx']
push ['eax']
lea ['eax,', '[ebp+var_C+3]']
push ['eax']
call ['?eq@?$char_traits@D@std@@SA_NABD0@Z']
add ['esp,', '8']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_78DF']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '2']
jz ['short', 'loc_78DF']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['short', 'loc_7940']
jmp ['short', 'loc_7940']
mov ['esi,', 'esp']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
call ['?eof@?$char_traits@D@std@@SAHXZ']
mov ['[ebp+var_10],', 'eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z']
add ['esp,', '8']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_7934']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?to_char_type@?$char_traits@D@std@@SADABH@Z']
add ['esp,', '4']
mov ['bl,', 'al']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[eax],', 'bl']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?not_eof@?$char_traits@D@std@@SAHABH@Z']
add ['esp,', '4']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_79BB']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_79BB']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '1']
jz ['loc_7B87']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_7B87']
cmp ['[ebp+arg_C],', '2']
jnz ['short', 'loc_7A12']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_7A70']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_7A59']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '2']
jnz ['short', 'loc_7A59']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_7A70']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_7A70']
mov ['ecx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['edx,', '[ecx]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ecx+4]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jl ['loc_7B72']
jg ['short', 'loc_7A86']
cmp ['[ebp+arg_4],', '0']
jb ['loc_7B72']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_8]']
jg ['loc_7B72']
jl ['short', 'loc_7AC3']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+var_C]']
ja ['loc_7B72']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_10]']
and ['edx,', '2']
jz ['short', 'loc_7B70']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_7B70']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_7B82']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
jmp ['loc_7CEB']
mov ['eax,', '[ebp+arg_10]']
and ['eax,', '2']
jz ['loc_7CD3']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_7CD3']
cmp ['[ebp+arg_C],', '2']
jnz ['short', 'loc_7BDE']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_7C33']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_7C1D']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_7C33']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_7C33']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
cmp ['[ebp+arg_8],', '0']
jl ['loc_7CC0']
jg ['short', 'loc_7C45']
cmp ['[ebp+arg_4],', '0']
jb ['short', 'loc_7CC0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_10]']
jg ['short', 'loc_7CC0']
jl ['short', 'loc_7C7A']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+var_14]']
ja ['short', 'loc_7CC0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+arg_4]']
adc ['edx,', '[ebp+arg_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_7CD1']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+arg_8],', 'ecx']
jmp ['short', 'loc_7CEB']
mov ['edx,', '[ebp+arg_4]']
or ['edx,', '[ebp+arg_8]']
jz ['short', 'loc_7CEB']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['??B?$fpos@H@std@@QBE_JXZ']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_7D8E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_7D8E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_7DB0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+4]']
jnz ['short', 'loc_7DB0']
jmp ['loc_7FC4']
mov ['edx,', '[ebp+arg_1C]']
and ['edx,', '1']
jz ['loc_7EED']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_7EED']
cmp ['[ebp+var_8],', '0']
jl ['loc_7ED8']
jg ['short', 'loc_7DEC']
cmp ['[ebp+var_C],', '0']
jb ['loc_7ED8']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_14]']
jg ['loc_7ED8']
jl ['short', 'loc_7E29']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_18]']
ja ['loc_7ED8']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+var_C]']
adc ['edx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_1C]']
and ['edx,', '2']
jz ['short', 'loc_7ED6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_7ED6']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_7EE8']
mov ['eax,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_7FC4']
mov ['eax,', '[ebp+arg_1C]']
and ['eax,', '2']
jz ['loc_7FB3']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_7FB3']
cmp ['[ebp+var_8],', '0']
jl ['loc_7FA0']
jg ['short', 'loc_7F25']
cmp ['[ebp+var_C],', '0']
jb ['short', 'loc_7FA0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', 'edx']
cdq
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_1C]']
jg ['short', 'loc_7FA0']
jl ['short', 'loc_7F5A']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_20]']
ja ['short', 'loc_7FA0']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
mov ['eax,', 'esi']
cdq
add ['eax,', '[ebp+var_C]']
adc ['edx,', '[ebp+var_8]']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_7FB1']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_7FC4']
mov ['edx,', 'dword', 'ptr', 'ds:__imp_?_BADOFF@std@@3_JB']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[edx+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$fpos@H@std@@QAE@_J@Z']
mov ['eax,', '[ebp+arg_0]']
pop ['edi']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Init@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXPBDIH@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ	proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '7Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_7C]']
mov ['ecx,', '1Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_78],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '2']
jnz ['loc_8139']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_8139']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_8]']
cmp ['[edx+38h],', 'eax']
jnb ['short', 'loc_80D3']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_80DC']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+38h]']
mov ['[ebp+var_7C],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_7C]']
sub ['edx,', 'eax']
push ['edx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
lea ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z']
mov ['ecx,', '[ebp+var_78]']
or ['ecx,', '1']
mov ['[ebp+var_78],', 'ecx']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_81EA']
jmp ['loc_81EA']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+3Ch]']
and ['eax,', '4']
jnz ['short', 'loc_81C2']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_81C2']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
sub ['esi,', 'eax']
push ['esi']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
lea ['ecx,', '[ebp+var_4C]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
lea ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z']
mov ['edx,', '[ebp+var_78]']
or ['edx,', '1']
mov ['[ebp+var_78],', 'edx']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_81EA']
jmp ['short', 'loc_81EA']
lea ['ecx,', '[ebp+var_70]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
lea ['eax,', '[ebp+var_70]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z']
mov ['ecx,', '[ebp+var_78]']
or ['ecx,', '1']
mov ['[ebp+var_78],', 'ecx']
lea ['ecx,', '[ebp+var_70]']
call ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '7Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
dd ['offset', '$LN17_1']
dd ['offset', '$LN14_0']
dd ['0FFFFFFB4h,', '1Ch']
dd ['offset', '$LN15']
db ['90h']
db ['3', 'dup(0FFh)']
dd ['1Ch']
dd ['offset', '$LN16_0']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
call ['?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?str@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
call ['?str@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?sub@?$IntrinsicAddSub@I$01@detail@mozilla@@SAIAAU?$atomic@I@std@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?fetch_sub@atomic_uint@std@@QAEIIW4memory_order@2@@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VDrawTargetDual@gfx@mozilla@@@@QAEXAAPAVDrawTargetDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?swap@?$RefPtr@VSourceSurfaceDual@gfx@mozilla@@@@QAEXAAPAVSourceSurfaceDual@gfx@mozilla@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?system_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@QAEPAVDrawTarget@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@QAEPAVDrawTargetDual@gfx@mozilla@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@QAEPAVSourceSurface@gfx@mozilla@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?take@?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@QAEPAVSourceSurfaceDual@gfx@mozilla@@XZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?to_char_type@?$char_traits@D@std@@SADABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['al,', '[eax]']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?to_int_type@?$char_traits@D@std@@SAHABD@Z proc	near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[eax]']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_8475']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_85C4']
jmp ['loc_85C4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
jnb ['short', 'loc_84C4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
jmp ['loc_85C4']
jmp ['loc_85C4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+3Ch]']
and ['ecx,', '4']
jnz ['short', 'loc_8529']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_8529']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['esi,', 'eax']
ja ['short', 'loc_8538']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
cmp ['[edx+38h],', 'eax']
ja ['short', 'loc_8538']
call ['?eof@?$char_traits@D@std@@SAHXZ']
jmp ['loc_85C4']
jmp ['loc_85C4']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['[ecx+38h],', 'eax']
jnb ['short', 'loc_856A']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+38h],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+38h]']
push ['ecx']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['edi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
call ['dword', 'ptr', 'ds:__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['?to_int_type@?$char_traits@D@std@@SAHABD@Z']
add ['esp,', '4']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_code@std@@QBEHXZ proc near	
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
?value@error_condition@std@@QBEHXZ proc	near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_MOZ_NoReturn	proc near		
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
endp
_hypot		proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_8]']
movsd ['[esp+0Ch+var_C],', 'xmm0']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_0]']
movsd ['[esp+14h+var_14],', 'xmm0']
call ['dword', 'ptr', 'ds:__imp___hypot']
add ['esp,', '10h']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
align ['4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0']
dd ['offset', '__unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDI@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0']
dd ['offset', '__unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0']
dd ['2', 'dup(0)']
dd ['offset', '__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1']
dd ['0FFFFFFFFh,', '0']
dd ['1,', '0']
dd ['1,', '0']
dd ['offset', '__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['2']
dd ['offset', '__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
dd ['3', 'dup(0)']
dd ['1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4']
dd ['2', 'dup(0)']
dd ['3,', '1']
dd ['offset', '__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z$0']
dd ['offset', '__unwindtable$??0SurfacePattern@gfx@mozilla@@QAE@PAVSourceSurface@12@W4ExtendMode@12@ABVMatrix@12@W4Filter@12@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1SurfacePattern@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1SurfacePattern@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1SourceSurface@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1SourceSurface@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0SourceSurface@gfx@mozilla@@QAE@XZ$0']
dd ['offset', '__unwindtable$??0SourceSurface@gfx@mozilla@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$0']
align ['10h']
dd ['offset', '__unwindfunclet$??0DrawTarget@gfx@mozilla@@QAE@XZ$1']
dd ['offset', '__unwindtable$??0DrawTarget@gfx@mozilla@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1DrawTarget@gfx@mozilla@@UAE@XZ$0']
dd ['offset', '__unwindtable$??1DrawTarget@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z$1']
dd ['offset', '__unwindtable$?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindtable$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2']
align ['10h']
dd ['offset', '__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2']
dd ['3']
dd ['offset', '__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$3']
dd ['4']
dd ['offset', '__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4']
dd ['3']
dd ['offset', '__unwindfunclet$??0SourceSurfaceDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$4']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$0']
align ['8']
dd ['offset', '__unwindfunclet$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ$1']
dd ['offset', '__unwindtable$??1SourceSurfaceDual@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$1']
dd ['1']
dd ['offset', '__unwindfunclet$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z$2']
dd ['offset', '__unwindtable$??0DrawTargetDual@gfx@mozilla@@QAE@PAVDrawTarget@12@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$1']
align ['8']
dd ['offset', '__unwindfunclet$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ$0']
dd ['offset', '__unwindtable$?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z$0']
dd ['offset', '__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z$1']
dd ['offset', '__unwindtable$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
align ['20h']
dd ['1']
dd ['offset', '__unwindtable$?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindtable$?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
dd ['5', 'dup(0)']
dd ['1']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$5']
align ['8']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$0']
dd ['1']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1']
align ['8']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$1']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$2']
dd ['4']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$3']
dd ['3']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$3']
dd ['6']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$4']
dd ['6']
dd ['offset', '__unwindfunclet$?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z$6']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$0']
align ['10h']
dd ['offset', '__unwindfunclet$??1DrawTargetDual@gfx@mozilla@@UAE@XZ$1']
dd ['offset', '__unwindtable$??1DrawTargetDual@gfx@mozilla@@UAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2']
dd ['0']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0']
dd ['0']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1']
dd ['offset', '__unwindtable$??$MakeAndAddRef@VSourceSurfaceDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VSourceSurfaceDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0']
align ['10h']
dd ['offset', '__unwindfunclet$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$1']
dd ['offset', '__unwindtable$??0?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z$0']
dd ['offset', '__unwindtable$??0?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@H@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$0']
dd ['0FFFFFFFFh']
dd ['offset', '__unwindfunclet$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z$1']
dd ['offset', '__unwindtable$??0DualPattern@gfx@mozilla@@QAE@ABVPattern@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z$0']
dd ['offset', '__unwindtable$??0?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@HW4LogReason@12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ$0']
dd ['offset', '__unwindtable$??1?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAE@XZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$0']
dd ['0']
dd ['offset', '__unwindfunclet$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ$1']
dd ['offset', '__unwindtable$?Flush@?$Log@$01UBasicLogger@gfx@mozilla@@@gfx@mozilla@@QAEXXZ']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$2']
align ['10h']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$0']
align ['8']
dd ['offset', '__unwindfunclet$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z$1']
dd ['offset', '__unwindtable$??$MakeAndAddRef@VDrawTargetDual@gfx@mozilla@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@AAV4@@mozilla@@YA?AU?$already_AddRefed@VDrawTargetDual@gfx@mozilla@@@@AAV?$RefPtr@VDrawTarget@gfx@mozilla@@@@0@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['2', 'dup(0)']
dd ['offset', '__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0']
dd ['offset', '__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3']
dd ['offset', '__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2']
dd ['4', 'dup(0)']
dd ['offset', '__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
dd ['1']
dd ['offset', '__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z']
dd ['3', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0']
dd ['offset', '__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0']
dd ['offset', '__unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_xdata$x']
dd ['offset', '__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0']
dd ['offset', '__unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
dd ['5', 'dup(0)']
dd ['1']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
align ['4']
assume ['cs:_rdata']
public ['??_C@_00CNPNBAHC@?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4error_category@std@@6B@']
public ['??_7error_category@std@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4_Generic_error_category@std@@6B@']
public ['??_7_Generic_error_category@std@@6B@']
dd ['offset', '?name@_Generic_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_07DCLBNMLN@generic?$AA@']
assume ['cs:_rdata']
public ['??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4_Iostream_error_category@std@@6B@']
public ['??_7_Iostream_error_category@std@@6B@']
dd ['offset', '?name@_Iostream_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_08LLGCOLLL@iostream?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4_System_error_category@std@@6B@']
public ['??_7_System_error_category@std@@6B@']
dd ['offset', '?name@_System_error_category@std@@UBEPBDXZ']
dd ['offset', '?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
dd ['offset', '?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z']
dd ['offset', '?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z']
assume ['cs:_rdata']
public ['??_C@_06FHFOAHML@system?$AA@']
align ['10h']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_bss']
assume ['es:nothing,', 'ss:nothing,', 'ds:_rdata,', 'fs:nothing,', 'gs:nothing']
public ['?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
assume ['cs:_rdata']
public ['??_C@_1JC@LCKPGPAG@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xatomic.h>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@BEGEBJJG@?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAm?$AAe?$AAm?$AAo?$AAr?$AAy?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA?$AA@']
unicode ['0,', '<Invalid', 'memory_order>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
assume ['cs:_rdata']
public ['??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
unicode ['0,', '<"Standard', 'C++', 'Libraries', 'Invalid', 'Argument"', '&&', '0>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
unicode ['0,', '<%s>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
unicode ['0,', '<"invalid', 'argument">,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1CK@BEBCCGEN@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAs?$AAt?$AAo?$AAr?$AAe?$AA_?$AA4?$AA?$AA@']
unicode ['0,', '<std::_Atomic_store_4>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_1DC@FMPHIJPC@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAA?$AAt?$AAo?$AAm?$AAi?$AAc?$AA_?$AAf?$AAe?$AAt?$AAc?$AAh?$AA_?$AAa?$AAd?$AAd?$AA_?$AA4?$AA?$AA@']
unicode ['0,', '<std::_Atomic_fetch_add_4>,0']
align ['4']
assume ['cs:_rdata']
dd ['offset', '??_R4Pattern@gfx@mozilla@@6B@']
public ['??_7Pattern@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
assume ['cs:_rdata']
dd ['offset', '??_R4SurfacePattern@gfx@mozilla@@6B@']
public ['??_7SurfacePattern@gfx@mozilla@@6B@']
dd ['offset', '?GetType@SurfacePattern@gfx@mozilla@@UBE?AW4PatternType@23@XZ']
assume ['cs:_rdata']
dd ['offset', '??_R4SourceSurface@gfx@mozilla@@6B@']
public ['??_7SourceSurface@gfx@mozilla@@6B@']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ']
dd ['offset', '__purecall']
dd ['offset', '?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawTarget@gfx@mozilla@@6B@']
public ['??_7DrawTarget@gfx@mozilla@@6B@']
dd ['offset', '?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z']
dd ['offset', '__purecall']
dd ['offset', '?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?PushLayer@DrawTarget@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z']
dd ['offset', '?PopLayer@DrawTarget@gfx@mozilla@@UAEXXZ']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '__purecall']
dd ['offset', '?SetTransform@DrawTarget@gfx@mozilla@@UAEXABVMatrix@23@@Z']
dd ['offset', '?GetNativeSurface@DrawTarget@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?IsDualDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsCurrentGroupOpaque@DrawTarget@gfx@mozilla@@UAE_NXZ']
dd ['offset', '?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4SourceSurfaceDual@gfx@mozilla@@6B@']
public ['??_7SourceSurfaceDual@gfx@mozilla@@6B@']
dd ['offset', '?GetType@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceType@23@XZ']
dd ['offset', '?GetSize@SourceSurfaceDual@gfx@mozilla@@UBE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ']
dd ['offset', '?GetFormat@SourceSurfaceDual@gfx@mozilla@@UBE?AW4SurfaceFormat@23@XZ']
dd ['offset', '?IsValid@SourceSurface@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?GetDataSurface@SourceSurfaceDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VDataSourceSurface@gfx@mozilla@@@@XZ']
dd ['offset', '?GetNativeSurface@SourceSurface@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?GuaranteePersistance@SourceSurface@gfx@mozilla@@MAEXXZ']
assume ['cs:_rdata']
dd ['offset', '??_R4DrawTargetDual@gfx@mozilla@@6B@']
public ['??_7DrawTargetDual@gfx@mozilla@@6B@']
dd ['offset', '?IsValid@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?GetType@DrawTargetDual@gfx@mozilla@@UBE?AW4DrawTargetType@23@XZ']
dd ['offset', '?GetBackendType@DrawTargetDual@gfx@mozilla@@UBE?AW4BackendType@23@XZ']
dd ['offset', '?IsRecording@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?Snapshot@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@XZ']
dd ['offset', '?GetSize@DrawTargetDual@gfx@mozilla@@UAE?AU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@XZ']
dd ['offset', '?LockBits@DrawTarget@gfx@mozilla@@UAE_NPAPAEPAU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@PAHPAW4SurfaceFormat@23@PAU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?ReleaseBits@DrawTarget@gfx@mozilla@@UAEXPAE@Z']
dd ['offset', '?Flush@DrawTargetDual@gfx@mozilla@@UAEXXZ']
dd ['offset', '?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z']
dd ['offset', '?DrawSurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@1ABUDrawSurfaceOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?DrawFilter@DrawTargetDual@gfx@mozilla@@UAEXPAVFilterNode@23@ABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
dd ['offset', '?DrawSurfaceWithShadow@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUColor@23@1MW4CompositionOp@23@@Z']
dd ['offset', '?ClearRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?CopySurface@DrawTargetDual@gfx@mozilla@@UAEXPAVSourceSurface@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?CopyRect@DrawTarget@gfx@mozilla@@UAEXABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@ABU?$IntPointTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?FillRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['offset', '?StrokeRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?StrokeLine@DrawTargetDual@gfx@mozilla@@UAEXABU?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@0ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?Stroke@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUStrokeOptions@23@ABUDrawOptions@23@@Z']
dd ['offset', '?Fill@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@ABVPattern@23@ABUDrawOptions@23@@Z']
dd ['offset', '?FillGlyphs@DrawTargetDual@gfx@mozilla@@UAEXPAVScaledFont@23@ABUGlyphBuffer@23@ABVPattern@23@ABUDrawOptions@23@PBVGlyphRenderingOptions@23@@Z']
dd ['offset', '?Mask@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@0ABUDrawOptions@23@@Z']
dd ['offset', '?MaskSurface@DrawTargetDual@gfx@mozilla@@UAEXABVPattern@23@PAVSourceSurface@23@U?$PointTyped@UUnknownUnits@gfx@mozilla@@M@23@ABUDrawOptions@23@@Z']
dd ['offset', '?PushClip@DrawTargetDual@gfx@mozilla@@UAEXPBVPath@23@@Z']
dd ['offset', '?PushClipRect@DrawTargetDual@gfx@mozilla@@UAEXABU?$RectTyped@UUnknownUnits@gfx@mozilla@@M@23@@Z']
dd ['offset', '?PopClip@DrawTargetDual@gfx@mozilla@@UAEXXZ']
dd ['offset', '?PushLayer@DrawTargetDual@gfx@mozilla@@UAEX_NMPAVSourceSurface@23@ABVMatrix@23@ABU?$IntRectTyped@UUnknownUnits@gfx@mozilla@@@23@0@Z']
dd ['offset', '?PopLayer@DrawTargetDual@gfx@mozilla@@UAEXXZ']
dd ['offset', '?CreateSourceSurfaceFromData@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAEABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@HW4SurfaceFormat@23@@Z']
dd ['offset', '?OptimizeSourceSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@PAVSourceSurface@23@@Z']
dd ['offset', '?CreateSourceSurfaceFromNativeSurface@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VSourceSurface@gfx@mozilla@@@@ABUNativeSurface@23@@Z']
dd ['offset', '?CreateSimilarDrawTarget@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@@Z']
dd ['offset', '?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z']
dd ['offset', '?CreateShadowDrawTarget@DrawTarget@gfx@mozilla@@UBE?AU?$already_AddRefed@VDrawTarget@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@W4SurfaceFormat@23@M@Z']
dd ['offset', '?CreatePathBuilder@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VPathBuilder@gfx@mozilla@@@@W4FillRule@23@@Z']
dd ['offset', '?CreateGradientStops@DrawTargetDual@gfx@mozilla@@UBE?AU?$already_AddRefed@VGradientStops@gfx@mozilla@@@@PAUGradientStop@23@IW4ExtendMode@23@@Z']
dd ['offset', '?CreateFilter@DrawTargetDual@gfx@mozilla@@UAE?AU?$already_AddRefed@VFilterNode@gfx@mozilla@@@@W4FilterType@23@@Z']
dd ['offset', '?SetTransform@DrawTargetDual@gfx@mozilla@@UAEXABVMatrix@23@@Z']
dd ['offset', '?GetNativeSurface@DrawTargetDual@gfx@mozilla@@UAEPAXW4NativeSurfaceType@23@@Z']
dd ['offset', '?IsDualDrawTarget@DrawTargetDual@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsTiledDrawTarget@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?SupportsRegionClipping@DrawTarget@gfx@mozilla@@UBE_NXZ']
dd ['offset', '?IsCurrentGroupOpaque@DrawTargetDual@gfx@mozilla@@UAE_NXZ']
dd ['offset', '?SetPermitSubpixelAA@DrawTarget@gfx@mozilla@@UAEX_N@Z']
assume ['cs:_rdata']
public ['??_C@_01EEMJAFIK@?6?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_04HDOCAJNK@?$CFs?$CFs?$AA@']
align ['10h']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
public ['??_7?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ']
dd ['offset', '?overflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z']
dd ['offset', '?pbackfail@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHH@Z']
dd ['offset', '?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ']
dd ['offset', '?underflow@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAEHXZ']
dd ['offset', '?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z']
dd ['offset', '?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z']
dd ['offset', '?seekoff@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@_JHH@Z']
dd ['offset', '?seekpos@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@MAE?AV?$fpos@H@2@V32@H@Z']
dd ['offset', '?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z']
dd ['offset', '?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ']
dd ['offset', '?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z']
assume ['cs:_rdata']
dd ['offset', '??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
public ['??_7?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
assume ['cs:_rdata']
public ['??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_istream@DU?$char_traits@D@std@@@1@@']
dd ['offset', '$SG36827+0Ch']
assume ['cs:_rdata']
public ['??_8?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@7B?$basic_ostream@DU?$char_traits@D@std@@@1@@']
dd ['offset', '$SG36821+20h']
assume ['cs:_rdata']
public ['??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
unicode ['0,', '<C:\\Program', 'Files', '(x86)\\Microsoft', 'Visual', 'Studio', '12.0\\VC\\in>']
unicode ['0,', '<clude\\xstring>,0']
align ['4']
assume ['cs:_rdata']
public ['??_C@_04HGKILAJC@?$FLGFX?$AA@']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_01JOAMLHOP@?9?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_01CLKCMJKC@?5?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_03FLKELDHI@?$FN?3?5?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
assume ['cs:_rdata']
public ['??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
assume ['cs:_rdata']
public ['??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
unicode ['0,', '<invalid', 'null', 'pointer>,0']
align ['10h']
assume ['cs:_rdata']
public ['??_C@_01PKGAHCOL@?$CJ?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_01IHBHIGKO@?0?$AA@']
align ['4']
assume ['cs:_rdata']
public ['??_C@_05EHMGNGKA@Size?$CI?$AA@']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R4?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['offset', '??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['0']
db ["'d@@',0"]
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['2']
dd ['offset', '??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_streambuf@DU?$char_traits@D@std@@@std@@@8']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
dd ['1']
dd ['offset', '??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_streambuf@DU?$char_traits@D@std@@@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R4?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@6B@']
dd ['offset', '$SG36827+0Ch']
dd ['4']
dd ['offset', '??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
dd ['offset', '??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@8']
align ['8']
db ["'@std@@',0"]
assume ['cs:_rdata$r']
public ['??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['3,', '0Ah']
dd ['offset', '??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
dd ['offset', '??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
dd ['9,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['8,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_iostream@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '9']
dd ['offset', '??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_iostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
dd ['offset', '??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_istream@DU?$char_traits@D@std@@@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['4']
dd ['offset', '??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_istream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['2,', '2', 'dup(0)']
dd ['4,', '50h']
dd ['offset', '??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_ios@DU?$char_traits@D@std@@@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['3']
dd ['offset', '??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@?0A@EA@ios_base@std@@8']
dd ['offset', '??_R17?0A@EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_ios@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@ios_base@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3ios_base@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVios_base@std@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3ios_base@std@@8']
dd ['2']
dd ['offset', '??_R2ios_base@std@@8']
assume ['cs:_rdata$r']
public ['??_R2ios_base@std@@8']
dd ['offset', '??_R17?0A@EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R17?0A@EA@?$_Iosb@H@std@@8']
align ['10h']
dd ['8,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$_Iosb@H@std@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3?$_Iosb@H@std@@8']
dd ['1']
dd ['offset', '??_R2?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$_Iosb@H@std@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R1A@A@3EA@ios_base@std@@8']
dd ['1,', '2', 'dup(0)']
dd ['4,', '40h']
dd ['offset', '??_R3ios_base@std@@8']
assume ['cs:_rdata$r']
public ['??_R17A@3EA@?$_Iosb@H@std@@8']
align ['8']
dd ['8,', '0']
dd ['4,', '40h']
dd ['offset', '??_R3?$_Iosb@H@std@@8']
assume ['cs:_rdata$r']
public ['??_R1BA@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '10h,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$basic_ostream@DU?$char_traits@D@std@@@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['4']
dd ['offset', '??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R2?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3FA@?$basic_ios@DU?$char_traits@D@std@@@std@@8']
dd ['offset', '??_R1A@A@3EA@ios_base@std@@8']
dd ['offset', '??_R17A@3EA@?$_Iosb@H@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$basic_ostream@DU?$char_traits@D@std@@@std@@8']
assume ['cs:_rdata$r']
public ['??_R4error_category@std@@6B@']
dd ['offset', '??_R0?AVerror_category@std@@@8']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AVerror_category@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3error_category@std@@8']
dd ['1']
dd ['offset', '??_R2error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@error_category@std@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Generic_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Generic_error_category@std@@@8']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Generic_error_category@std@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3_Generic_error_category@std@@8']
dd ['2']
dd ['offset', '??_R2_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3_Generic_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_Iostream_error_category@std@@6B@']
dd ['offset', '??_R0?AV_Iostream_error_category@std@@@8']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_Iostream_error_category@std@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_Iostream_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_Iostream_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_Iostream_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3_Iostream_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4_System_error_category@std@@6B@']
dd ['offset', '??_R0?AV_System_error_category@std@@@8']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_data$r']
public ['??_R0?AV_System_error_category@std@@@8']
align ['10h']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3_System_error_category@std@@8']
dd ['3']
dd ['offset', '??_R2_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R2_System_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@_Generic_error_category@std@@8']
dd ['offset', '??_R1A@?0A@EA@error_category@std@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@_System_error_category@std@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3_System_error_category@std@@8']
assume ['cs:_rdata$r']
public ['??_R4SourceSurface@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVSourceSurface@gfx@mozilla@@@8']
dd ['offset', '??_R3SourceSurface@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVSourceSurface@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3SourceSurface@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2SourceSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2SourceSurface@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3SourceSurface@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@@8']
dd ['0']
db ["'lla@@',0"]
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@@8']
align ['10h']
db ["'@',0"]
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
dd ['0']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawTarget@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawTarget@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawTarget@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawTarget@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3DrawTarget@gfx@mozilla@@8']
dd ['3']
dd ['offset', '??_R2DrawTarget@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawTarget@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8']
dd ['2,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3DrawTarget@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['1,', '4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['2']
dd ['offset', '??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
align ['10h']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AV?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
dd ['1']
dd ['offset', '??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
align ['8']
dd ['4,', '0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4Pattern@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVPattern@gfx@mozilla@@@8']
dd ['offset', '??_R3Pattern@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVPattern@gfx@mozilla@@@8']
align ['8']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3Pattern@gfx@mozilla@@8']
dd ['1']
dd ['offset', '??_R2Pattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2Pattern@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@Pattern@gfx@mozilla@@8']
dd ['2', 'dup(0)']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3Pattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4SurfacePattern@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVSurfacePattern@gfx@mozilla@@@8']
dd ['offset', '??_R3SurfacePattern@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVSurfacePattern@gfx@mozilla@@@8']
dd ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R3SurfacePattern@gfx@mozilla@@8']
dd ['2']
dd ['offset', '??_R2SurfacePattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2SurfacePattern@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@Pattern@gfx@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@SurfacePattern@gfx@mozilla@@8']
dd ['1,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3SurfacePattern@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4SourceSurfaceDual@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVSourceSurfaceDual@gfx@mozilla@@@8']
dd ['offset', '??_R3SourceSurfaceDual@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVSourceSurfaceDual@gfx@mozilla@@@8']
dd ['0']
assume ['cs:_rdata$r']
public ['??_R3SourceSurfaceDual@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2SourceSurfaceDual@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2SourceSurfaceDual@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@SourceSurface@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$AtomicRefCounted@VSourceSurface@gfx@mozilla@@@external@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VSourceSurface@gfx@mozilla@@$0A@@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@SourceSurfaceDual@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3SourceSurfaceDual@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R4DrawTargetDual@gfx@mozilla@@6B@']
dd ['offset', '??_R0?AVDrawTargetDual@gfx@mozilla@@@8']
dd ['offset', '??_R3DrawTargetDual@gfx@mozilla@@8']
assume ['cs:_data$r']
public ['??_R0?AVDrawTargetDual@gfx@mozilla@@@8']
dd ['0']
align ['10h']
assume ['cs:_rdata$r']
public ['??_R3DrawTargetDual@gfx@mozilla@@8']
dd ['4']
dd ['offset', '??_R2DrawTargetDual@gfx@mozilla@@8']
assume ['cs:_rdata$r']
public ['??_R2DrawTargetDual@gfx@mozilla@@8']
dd ['offset', '??_R1A@?0A@EA@DrawTarget@gfx@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@@mozilla@@8']
dd ['offset', '??_R13?0A@EA@?$RefCounted@VDrawTarget@gfx@mozilla@@$00@detail@mozilla@@8']
db ['0']
align ['4']
assume ['cs:_rdata$r']
public ['??_R1A@?0A@EA@DrawTargetDual@gfx@mozilla@@8']
dd ['3,', '0']
dd ['0FFFFFFFFh,', '0']
dd ['offset', '$SG36821+8']
dd ['offset', '??_R3DrawTargetDual@gfx@mozilla@@8']
assume ['cs:_rtc$IMZ']
assume ['cs:_rtc$TMZ']
assume ['cs:_rdata']
public ['__real@00000000']
assume ['cs:_rdata']
public ['__real@3f800000']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
assume ['cs:_CRT$XCU']
extrn ['__purecall:near']
extrn ['??2@YAPAXI@Z:near']
extrn ['??3@YAXPAX@Z:near']
extrn ['_atexit:near']
extrn ['__imp___invalid_parameter:near']
extrn ['__imp__free:near']
extrn ['__imp___hypot:near']
extrn ['__imp__memmove:near']
extrn ['_memcpy:near']
extrn ['_strlen:near']
extrn ['__imp_?uncaught_exception@std@@YA_NXZ:near']
extrn ['__imp__printf:near']
extrn ['__imp___CrtDbgReportW:near']
extrn ['__imp_?_Debug_message@std@@YAXPB_W0I@Z:near']
extrn ['__imp_??0_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_??1_Container_base12@std@@QAE@XZ:near']
extrn ['__imp_?_Orphan_all@_Container_base12@std@@QAEXXZ:near']
extrn ['__imp_?_Xbad_alloc@std@@YAXXZ:near']
extrn ['__imp_?_Xlength_error@std@@YAXPBD@Z:near']
extrn ['__imp_?_Xout_of_range@std@@YAXPBD@Z:near']
extrn ['__imp_??0id@locale@std@@QAE@I@Z:near']
extrn ['??_Eerror_category@std@@UAEPAXI@Z:near']
extrn ['__imp_?_Syserror_map@std@@YAPBDH@Z:near']
extrn ['__imp_?_Winerror_map@std@@YAPBDH@Z:near']
extrn ['??_E_Generic_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_Iostream_error_category@std@@UAEPAXI@Z:near']
extrn ['??_E_System_error_category@std@@UAEPAXI@Z:near']
extrn ['__imp_?good@ios_base@std@@QBE_NXZ:near']
extrn ['__imp_?flags@ios_base@std@@QBEHXZ:near']
extrn ['__imp_?width@ios_base@std@@QBE_JXZ:near']
extrn ['__imp_?width@ios_base@std@@QAE_J_J@Z:near']
extrn ['__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:near']
extrn ['__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:near']
extrn ['__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:near']
extrn ['__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pbase@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near']
extrn ['__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near']
extrn ['__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ:near']
extrn ['__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z:near']
extrn ['__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z:near']
extrn ['__imp_?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z:near']
extrn ['__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ:near']
extrn ['__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:near']
extrn ['__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:near']
extrn ['__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:near']
extrn ['__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:near']
extrn ['__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ:near']
extrn ['__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:near']
extrn ['__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:near']
extrn ['__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:near']
extrn ['__imp_??0?$basic_iostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@@Z:near']
extrn ['__imp_??1?$basic_iostream@DU?$char_traits@D@std@@@std@@UAE@XZ:near']
extrn ['__imp__TerminateProcess@8:near']
extrn ['__imp__GetCurrentProcess@0:near']
extrn ['??_EPattern@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ESurfacePattern@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ESourceSurface@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['?DrawCapturedDT@DrawTarget@gfx@mozilla@@UAEXPAVDrawTargetCapture@23@ABVMatrix@23@@Z:near']
extrn ['?CreateCaptureDT@DrawTarget@gfx@mozilla@@UAE?AU?$already_AddRefed@VDrawTargetCapture@gfx@mozilla@@@@ABU?$IntSizeTyped@UUnknownUnits@gfx@mozilla@@@23@@Z:near']
extrn ['??_EDrawTarget@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_ESourceSurfaceDual@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_EDrawTargetDual@gfx@mozilla@@UAEPAXI@Z:near']
extrn ['??_E?$basic_stringbuf@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near']
extrn ['??_E?$basic_stringstream@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@UAEPAXI@Z:near']
extrn ['?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near']
extrn ['?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEXXZ:near']
extrn ['?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z:near']
extrn ['?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PAD_J@Z:near']
extrn ['?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JXZ:near']
extrn ['?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near']
extrn ['?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ:near']
extrn ['?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPAD_J@Z:near']
extrn ['?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE_JPBD_J@Z:near']
extrn ['@_RTC_CheckStackVars@8:near']
extrn ['@__security_check_cookie@4:near']
extrn ['__CxxThrowException@8:near']
extrn ['__RTC_CheckEsp:near']
extrn ['__RTC_InitBase:near']
extrn ['__RTC_Shutdown:near']
extrn ['___CxxFrameHandler3:near']
extrn ['__imp_?_BADOFF@std@@3_JB:near']
extrn ['??_7type_info@@6B@:near']
extrn ['?sGfxLogLevel@LoggingPrefs@gfx@mozilla@@2HA:near']
extrn ['___security_cookie:near']
extrn ['__fltused:near']
end
